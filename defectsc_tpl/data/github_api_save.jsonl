{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbHVhL2x1YS9jb21taXRzL2FlNWI1YmE1Mjk3NTNjN2E2NTM5MDFmZmMyOWI1ZWEyNGMzZmRmM2Ei.json", "commit": "https://api.github.com/repos/lua/lua/commits/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a", "content": "{\"sha\": \"ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"node_id\": \"MDY6Q29tbWl0NTgwNTI1NjphZTViNWJhNTI5NzUzYzdhNjUzOTAxZmZjMjliNWVhMjRjM2ZkZjNh\", \"commit\": {\"author\": {\"name\": \"Roberto Ierusalimschy\", \"email\": \"roberto@inf.puc-rio.br\", \"date\": \"2020-07-27T16:23:05Z\"}, \"committer\": {\"name\": \"Roberto Ierusalimschy\", \"email\": \"roberto@inf.puc-rio.br\", \"date\": \"2020-07-27T16:23:05Z\"}, \"message\": \"Fixed bug: line hooks in stripped functions\\n\\nLine-hook handling was accessing debug info. without checking whether\\nit was present.\", \"tree\": {\"sha\": \"7b1978d77887e38b486accaf7412cc84668e4560\", \"url\": \"https://api.github.com/repos/lua/lua/git/trees/7b1978d77887e38b486accaf7412cc84668e4560\"}, \"url\": \"https://api.github.com/repos/lua/lua/git/commits/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/lua/lua/commits/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"html_url\": \"https://github.com/lua/lua/commit/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"comments_url\": \"https://api.github.com/repos/lua/lua/commits/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a/comments\", \"author\": {\"login\": \"roberto-ieru\", \"id\": 16293687, \"node_id\": \"MDQ6VXNlcjE2MjkzNjg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16293687?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/roberto-ieru\", \"html_url\": \"https://github.com/roberto-ieru\", \"followers_url\": \"https://api.github.com/users/roberto-ieru/followers\", \"following_url\": \"https://api.github.com/users/roberto-ieru/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/roberto-ieru/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/roberto-ieru/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/roberto-ieru/subscriptions\", \"organizations_url\": \"https://api.github.com/users/roberto-ieru/orgs\", \"repos_url\": \"https://api.github.com/users/roberto-ieru/repos\", \"events_url\": \"https://api.github.com/users/roberto-ieru/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/roberto-ieru/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"roberto-ieru\", \"id\": 16293687, \"node_id\": \"MDQ6VXNlcjE2MjkzNjg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16293687?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/roberto-ieru\", \"html_url\": \"https://github.com/roberto-ieru\", \"followers_url\": \"https://api.github.com/users/roberto-ieru/followers\", \"following_url\": \"https://api.github.com/users/roberto-ieru/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/roberto-ieru/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/roberto-ieru/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/roberto-ieru/subscriptions\", \"organizations_url\": \"https://api.github.com/users/roberto-ieru/orgs\", \"repos_url\": \"https://api.github.com/users/roberto-ieru/repos\", \"events_url\": \"https://api.github.com/users/roberto-ieru/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/roberto-ieru/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a585eae6e7ada1ca9271607a4f48dfb17868ab7b\", \"url\": \"https://api.github.com/repos/lua/lua/commits/a585eae6e7ada1ca9271607a4f48dfb17868ab7b\", \"html_url\": \"https://github.com/lua/lua/commit/a585eae6e7ada1ca9271607a4f48dfb17868ab7b\"}], \"stats\": {\"total\": 23, \"additions\": 21, \"deletions\": 2}, \"files\": [{\"sha\": \"8cb00e51a100103986bbe6aa50ad170cfe4e3e24\", \"filename\": \"ldebug.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/lua/lua/blob/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a/ldebug.c\", \"raw_url\": \"https://github.com/lua/lua/raw/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a/ldebug.c\", \"contents_url\": \"https://api.github.com/repos/lua/lua/contents/ldebug.c?ref=ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"patch\": \"@@ -783,11 +783,13 @@ l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {\\n ** previous instruction 'oldpc'.\\n */\\n static int changedline (const Proto *p, int oldpc, int newpc) {\\n+  if (p->lineinfo == NULL)  /* no debug information? */\\n+    return 0;\\n   while (oldpc++ < newpc) {\\n     if (p->lineinfo[oldpc] != 0)\\n       return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));\\n   }\\n-  return 0;  /* no line changes in the way */\\n+  return 0;  /* no line changes between positions */\\n }\\n \\n \"}, {\"sha\": \"5377f6ec0e66242efee7e388da313b0f4135e5cf\", \"filename\": \"testes/db.lua\", \"status\": \"modified\", \"additions\": 18, \"deletions\": 1, \"changes\": 19, \"blob_url\": \"https://github.com/lua/lua/blob/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a/testes%2Fdb.lua\", \"raw_url\": \"https://github.com/lua/lua/raw/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a/testes%2Fdb.lua\", \"contents_url\": \"https://api.github.com/repos/lua/lua/contents/testes%2Fdb.lua?ref=ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a\", \"patch\": \"@@ -884,7 +884,7 @@ end\\n \\n \\n print(\\\"testing debug functions on chunk without debug info\\\")\\n-prog = [[-- program to be loaded without debug information\\n+prog = [[-- program to be loaded without debug information (strip)\\n local debug = require'debug'\\n local a = 12  -- a local variable\\n \\n@@ -927,6 +927,23 @@ local f = assert(load(string.dump(load(prog), true)))\\n \\n assert(f() == 13)\\n \\n+do   -- bug in 5.4.0: line hooks in stripped code\\n+  local function foo ()\\n+    local a = 1\\n+    local b = 2\\n+    return b\\n+  end\\n+\\n+  local s = load(string.dump(foo, true))\\n+  local line = true\\n+  debug.sethook(function (e, l)\\n+    assert(e == \\\"line\\\")\\n+    line = l\\n+  end, \\\"l\\\")\\n+  assert(s() == 2); debug.sethook(nil)\\n+  assert(line == nil)  -- hook called withoug debug info for 1st instruction\\n+end\\n+\\n do   -- tests for 'source' in binary dumps\\n   local prog = [[\\n     return function (x)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbHVhL2x1YS9jb21taXRzLzFmM2M2ZjQ1MzRjNjQxMTMxMzM2MTY5N2Q5OGQxMTQ1YTFmMDMwZmEi.json", "commit": "https://api.github.com/repos/lua/lua/commits/1f3c6f4534c6411313361697d98d1145a1f030fa", "content": "{\"sha\": \"1f3c6f4534c6411313361697d98d1145a1f030fa\", \"node_id\": \"C_kwDOAFiUyNoAKDFmM2M2ZjQ1MzRjNjQxMTMxMzM2MTY5N2Q5OGQxMTQ1YTFmMDMwZmE\", \"commit\": {\"author\": {\"name\": \"Roberto Ierusalimschy\", \"email\": \"roberto@inf.puc-rio.br\", \"date\": \"2022-02-15T15:28:46Z\"}, \"committer\": {\"name\": \"Roberto Ierusalimschy\", \"email\": \"roberto@inf.puc-rio.br\", \"date\": \"2022-02-15T15:28:46Z\"}, \"message\": \"Bug: Lua can generate wrong code when _ENV is <const>\", \"tree\": {\"sha\": \"4fe12910861bced95a9349e6aedb03097837939c\", \"url\": \"https://api.github.com/repos/lua/lua/git/trees/4fe12910861bced95a9349e6aedb03097837939c\"}, \"url\": \"https://api.github.com/repos/lua/lua/git/commits/1f3c6f4534c6411313361697d98d1145a1f030fa\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/lua/lua/commits/1f3c6f4534c6411313361697d98d1145a1f030fa\", \"html_url\": \"https://github.com/lua/lua/commit/1f3c6f4534c6411313361697d98d1145a1f030fa\", \"comments_url\": \"https://api.github.com/repos/lua/lua/commits/1f3c6f4534c6411313361697d98d1145a1f030fa/comments\", \"author\": {\"login\": \"roberto-ieru\", \"id\": 16293687, \"node_id\": \"MDQ6VXNlcjE2MjkzNjg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16293687?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/roberto-ieru\", \"html_url\": \"https://github.com/roberto-ieru\", \"followers_url\": \"https://api.github.com/users/roberto-ieru/followers\", \"following_url\": \"https://api.github.com/users/roberto-ieru/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/roberto-ieru/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/roberto-ieru/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/roberto-ieru/subscriptions\", \"organizations_url\": \"https://api.github.com/users/roberto-ieru/orgs\", \"repos_url\": \"https://api.github.com/users/roberto-ieru/repos\", \"events_url\": \"https://api.github.com/users/roberto-ieru/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/roberto-ieru/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"roberto-ieru\", \"id\": 16293687, \"node_id\": \"MDQ6VXNlcjE2MjkzNjg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16293687?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/roberto-ieru\", \"html_url\": \"https://github.com/roberto-ieru\", \"followers_url\": \"https://api.github.com/users/roberto-ieru/followers\", \"following_url\": \"https://api.github.com/users/roberto-ieru/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/roberto-ieru/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/roberto-ieru/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/roberto-ieru/subscriptions\", \"organizations_url\": \"https://api.github.com/users/roberto-ieru/orgs\", \"repos_url\": \"https://api.github.com/users/roberto-ieru/repos\", \"events_url\": \"https://api.github.com/users/roberto-ieru/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/roberto-ieru/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"25b143dd34fb587d1e35290c4b25bc08954800e2\", \"url\": \"https://api.github.com/repos/lua/lua/commits/25b143dd34fb587d1e35290c4b25bc08954800e2\", \"html_url\": \"https://github.com/lua/lua/commit/25b143dd34fb587d1e35290c4b25bc08954800e2\"}], \"stats\": {\"total\": 11, \"additions\": 11, \"deletions\": 0}, \"files\": [{\"sha\": \"a5cd552578a8aa040351c22ec96173db0b535079\", \"filename\": \"lparser.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/lua/lua/blob/1f3c6f4534c6411313361697d98d1145a1f030fa/lparser.c\", \"raw_url\": \"https://github.com/lua/lua/raw/1f3c6f4534c6411313361697d98d1145a1f030fa/lparser.c\", \"contents_url\": \"https://api.github.com/repos/lua/lua/contents/lparser.c?ref=1f3c6f4534c6411313361697d98d1145a1f030fa\", \"patch\": \"@@ -468,6 +468,7 @@ static void singlevar (LexState *ls, expdesc *var) {\\n     expdesc key;\\n     singlevaraux(fs, ls->envn, var, 1);  /* get environment variable */\\n     lua_assert(var->k != VVOID);  /* this one must exist */\\n+    luaK_exp2anyregup(fs, var);  /* but could be a constant */\\n     codestring(&key, varname);  /* key is variable name */\\n     luaK_indexed(fs, var, &key);  /* env[varname] */\\n   }\"}, {\"sha\": \"83821c069aca68e4929dca179ac29fde60930437\", \"filename\": \"testes/attrib.lua\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/lua/lua/blob/1f3c6f4534c6411313361697d98d1145a1f030fa/testes%2Fattrib.lua\", \"raw_url\": \"https://github.com/lua/lua/raw/1f3c6f4534c6411313361697d98d1145a1f030fa/testes%2Fattrib.lua\", \"contents_url\": \"https://api.github.com/repos/lua/lua/contents/testes%2Fattrib.lua?ref=1f3c6f4534c6411313361697d98d1145a1f030fa\", \"patch\": \"@@ -434,6 +434,16 @@ a.aVeryLongName012345678901234567890123456789012345678901234567890123456789 ==\\n 10)\\n \\n \\n+do\\n+  -- _ENV constant\\n+  local function foo ()\\n+    local _ENV <const> = 11\\n+    X = \\\"hi\\\"\\n+  end\\n+  local st, msg = pcall(foo)\\n+  assert(not st and string.find(msg, \\\"number\\\"))\\n+end\\n+\\n \\n -- test of large float/integer indices \\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGx1bmRxdWlzdC9zbmlwcm94eS9jb21taXRzL2Y4ZDlhNDMzZmUyMmFiMmZhMTVjMDAxNzkwNDhhYjAyYWUyM2Q1ODMi.json", "commit": "https://api.github.com/repos/dlundquist/sniproxy/commits/f8d9a433fe22ab2fa15c00179048ab02ae23d583", "content": "{\"sha\": \"f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"node_id\": \"C_kwDOABIP3NoAKGY4ZDlhNDMzZmUyMmFiMmZhMTVjMDAxNzkwNDhhYjAyYWUyM2Q1ODM\", \"commit\": {\"author\": {\"name\": \"Dustin Lundquist\", \"email\": \"dustin@null-ptr.net\", \"date\": \"2023-03-17T03:42:20Z\"}, \"committer\": {\"name\": \"Dustin Lundquist\", \"email\": \"dustin@null-ptr.net\", \"date\": \"2023-03-17T04:57:26Z\"}, \"message\": \"address: fix buffer overflow\\n\\nUpdate tests to work on Debian 11.\", \"tree\": {\"sha\": \"aba1827709049dbb890b258e347886ebfbba8bd7\", \"url\": \"https://api.github.com/repos/dlundquist/sniproxy/git/trees/aba1827709049dbb890b258e347886ebfbba8bd7\"}, \"url\": \"https://api.github.com/repos/dlundquist/sniproxy/git/commits/f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/dlundquist/sniproxy/commits/f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"html_url\": \"https://github.com/dlundquist/sniproxy/commit/f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"comments_url\": \"https://api.github.com/repos/dlundquist/sniproxy/commits/f8d9a433fe22ab2fa15c00179048ab02ae23d583/comments\", \"author\": {\"login\": \"dlundquist\", \"id\": 117703, \"node_id\": \"MDQ6VXNlcjExNzcwMw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/117703?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dlundquist\", \"html_url\": \"https://github.com/dlundquist\", \"followers_url\": \"https://api.github.com/users/dlundquist/followers\", \"following_url\": \"https://api.github.com/users/dlundquist/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dlundquist/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dlundquist/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dlundquist/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dlundquist/orgs\", \"repos_url\": \"https://api.github.com/users/dlundquist/repos\", \"events_url\": \"https://api.github.com/users/dlundquist/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dlundquist/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dlundquist\", \"id\": 117703, \"node_id\": \"MDQ6VXNlcjExNzcwMw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/117703?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dlundquist\", \"html_url\": \"https://github.com/dlundquist\", \"followers_url\": \"https://api.github.com/users/dlundquist/followers\", \"following_url\": \"https://api.github.com/users/dlundquist/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dlundquist/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dlundquist/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dlundquist/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dlundquist/orgs\", \"repos_url\": \"https://api.github.com/users/dlundquist/repos\", \"events_url\": \"https://api.github.com/users/dlundquist/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dlundquist/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"822bb80df9b7b345cc9eba55df74a07b498819ba\", \"url\": \"https://api.github.com/repos/dlundquist/sniproxy/commits/822bb80df9b7b345cc9eba55df74a07b498819ba\", \"html_url\": \"https://github.com/dlundquist/sniproxy/commit/822bb80df9b7b345cc9eba55df74a07b498819ba\"}], \"stats\": {\"total\": 43, \"additions\": 37, \"deletions\": 6}, \"files\": [{\"sha\": \"a801a87e43db1b4dda160f568b5352beb3ff692e\", \"filename\": \"ChangeLog\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/ChangeLog\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/ChangeLog\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/ChangeLog?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1,3 +1,9 @@\\n+2023-03-16  Dustin Lundquist <dustin@null-ptr.net>\\n+\\t0.6.1 Release\\n+\\n+\\t* Fix buffer overflow in address module\\n+\\t* Fix tests\\n+\\n 2018-12-05  Dustin Lundquist <dustin@null-ptr.net>\\n \\t0.6.0 Release\\n \"}, {\"sha\": \"cac74f1cc970d4b1fc44e6e32c435b8797b203d7\", \"filename\": \"configure.ac\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/configure.ac\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/configure.ac\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/configure.ac?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -2,7 +2,7 @@\\n # Process this file with autoconf to produce a configure script.\\n \\n AC_PREREQ([2.60])\\n-AC_INIT([sniproxy], [0.6.0])\\n+AC_INIT([sniproxy], [0.6.1])\\n AC_CONFIG_SRCDIR([src/sniproxy.c])\\n AC_CONFIG_MACRO_DIR([m4])\\n AM_INIT_AUTOMAKE([subdir-objects])\"}, {\"sha\": \"ed623a352f35222a65e77d1e6cc89990b53d4001\", \"filename\": \"debian/changelog\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 1, \"changes\": 9, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/debian%2Fchangelog\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/debian%2Fchangelog\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/debian%2Fchangelog?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1,3 +1,10 @@\\n+sniproxy (0.6.1) unstable; urgency=high\\n+\\n+  * Fix buffer overflow in address module\\n+  * Fix tests\\n+\\n+ -- Dustin Lundquist <dustin@null-ptr.net>  Thu, 16 Mar 2023 21:53:48 -0700\\n+\\n sniproxy (0.6.0) unstable; urgency=medium\\n \\n   * PROXY v1 protocol support\\n@@ -10,7 +17,7 @@ sniproxy (0.6.0) unstable; urgency=medium\\n sniproxy (0.5.0) unstable; urgency=medium\\n \\n   * Transparent proxy support\\n-  * Use accept4() on Linix\\n+  * Use accept4() on Linux\\n   * Run as group specified in config\\n \\n  -- Dustin Lundquist <dustin@null-ptr.net>  Wed, 26 Apr 2017 07:17:13 -0700\"}, {\"sha\": \"f599e28b8ab0d8c9c57a486c89c4a5132dcbd3b2\", \"filename\": \"debian/compat\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/debian%2Fcompat\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/debian%2Fcompat\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/debian%2Fcompat?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1 +1 @@\\n-8\\n+10\"}, {\"sha\": \"a3c691371be1ce7634171924ab316e8b0b04fed5\", \"filename\": \"redhat/sniproxy.spec\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/redhat%2Fsniproxy.spec\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/redhat%2Fsniproxy.spec\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/redhat%2Fsniproxy.spec?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1,5 +1,5 @@\\n Name: sniproxy\\n-Version: 0.6.0\\n+Version: 0.6.1\\n Release: 1%{?dist}\\n Summary: Transparent TLS and HTTP layer 4 proxy with SNI support\\n \\n@@ -46,6 +46,10 @@ rm -rf $RPM_BUILD_ROOT\\n \\n \\n %changelog\\n+* Thu Mar 16 2023 Dustin Lundquist <dustin@null-ptr.net 0.6.1-1\\n+- Fix buffer overflow in address module\\n+- Fix tests\\n+\\n * Wed Dec 5 2018 Dustin Lundquist <dustin@null-ptr.net> 0.6.0-1\\n - PROXY v1 protocol support\\n - SO_REUSEPORT support on Linux 3.9 and later\"}, {\"sha\": \"7e8a80b12841bdf4e0b557b714eaa72b00a26065\", \"filename\": \"setver.sh\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/setver.sh\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/setver.sh\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/setver.sh?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1,6 +1,6 @@\\n #!/bin/sh\\n \\n-VERSION=0.6.0\\n+VERSION=0.6.1\\n \\n SOURCE_DIR=$(dirname $0)\\n GIT_DIR=${SOURCE_DIR}/.git\"}, {\"sha\": \"2811b7ef0a0ffc39a29cbec481239643f89a7eeb\", \"filename\": \"src/address.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/src%2Faddress.c\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/src%2Faddress.c\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/src%2Faddress.c?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -148,6 +148,8 @@ new_address(const char *hostname_or_ip) {\\n     if (hostname_or_ip[0] == '[' &&\\n             (port = strchr(hostname_or_ip, ']')) != NULL) {\\n         len = (size_t)(port - hostname_or_ip - 1);\\n+        if (len >= INET6_ADDRSTRLEN)\\n+            return NULL;\\n \\n         /* inet_pton() will not parse the IP correctly unless it is in a\\n          * separate string.\"}, {\"sha\": \"706e2184344e988985653c8e3140f5b1fce1d0c4\", \"filename\": \"tests/Makefile.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2FMakefile.am\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2FMakefile.am\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/tests%2FMakefile.am?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -1,6 +1,8 @@\\n AM_CPPFLAGS = -I$(top_srcdir)/src -g $(LIBEV_CFLAGS) $(LIBPCRE_CFLAGS) $(LIBUDNS_CFLAGS)\\n AM_CFLAGS = -fno-strict-aliasing -Wall -Wextra -Wpedantic -Wwrite-strings\\n \\n+.NOTPARALLEL:\\n+\\n TESTS = address_test \\\\\\n         buffer_test \\\\\\n         cfg_tokenizer_test \\\\\"}, {\"sha\": \"7a0ea07fb5bf2769d984c2ef918bce9f26db6fa2\", \"filename\": \"tests/bad_dns_request_test\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2Fbad_dns_request_test\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2Fbad_dns_request_test\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/tests%2Fbad_dns_request_test?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -35,6 +35,11 @@ my $bad_requests = [\\n         request => \\\"GET / HTTP/1.1\\\\r\\\\nHost: \\\\0example.com\\\\r\\\\n\\\\r\\\\n\\\",\\n         client => \\\\&http_client,\\n     },\\n+    {\\n+        # Exceed hostname buffer size\\n+        request => \\\"GET / HTTP/1.1\\\\r\\\\nHost: [\\\" . 'long.' x 60 . \\\"example.com]\\\\r\\\\n\\\\r\\\\n\\\",\\n+        client => \\\\&http_client,\\n+    },\\n     {\\n         # Test client aborting connection before DNS response received\\n         request => \\\"GET / HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\\\\r\\\\n\\\",\"}, {\"sha\": \"4d9e975fc2a5803fabe811c83c3a1e8ebcf0e453\", \"filename\": \"tests/slow_client_test\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 1, \"changes\": 7, \"blob_url\": \"https://github.com/dlundquist/sniproxy/blob/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2Fslow_client_test\", \"raw_url\": \"https://github.com/dlundquist/sniproxy/raw/f8d9a433fe22ab2fa15c00179048ab02ae23d583/tests%2Fslow_client_test\", \"contents_url\": \"https://api.github.com/repos/dlundquist/sniproxy/contents/tests%2Fslow_client_test?ref=f8d9a433fe22ab2fa15c00179048ab02ae23d583\", \"patch\": \"@@ -31,11 +31,16 @@ sub slow_client($$) {\\n     my $socket = IO::Socket::INET->new(PeerAddr => '127.0.0.1',\\n             PeerPort => $port,\\n             Proto => \\\"tcp\\\",\\n-            Type => SOCK_STREAM)\\n+            Type => SOCK_STREAM,\\n+            Timeout => 5)\\n         or die \\\"couldn't connect $!\\\";\\n \\n     $socket->send($request);\\n     foreach (split(\\\"\\\\r\\\\n\\\", $request)) {\\n+        unless ($socket->connected()) {\\n+            print \\\"Disconnected\\\\n\\\";\\n+            exit(0);\\n+        }\\n         $socket->send(\\\"$_\\\\r\\\\n\\\");\\n         sleep(1);\\n     }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvY3VybC9jdXJsL2NvbW1pdHMvMTg5MGQ1OTkwNTQxNGFiODRhMzU4OTJiMmU0NTgzMzY1NGFhNWMxMyI=.json", "commit": "https://api.github.com/repos/curl/curl/commits/1890d59905414ab84a35892b2e45833654aa5c13", "content": "{\"sha\": \"1890d59905414ab84a35892b2e45833654aa5c13\", \"node_id\": \"MDY6Q29tbWl0NTY5MDQxOjE4OTBkNTk5MDU0MTRhYjg0YTM1ODkyYjJlNDU4MzM2NTRhYTVjMTM=\", \"commit\": {\"author\": {\"name\": \"Dan Fandrich\", \"email\": \"dan@coneharvesters.com\", \"date\": \"2017-03-11T09:59:34Z\"}, \"committer\": {\"name\": \"Dan Fandrich\", \"email\": \"dan@coneharvesters.com\", \"date\": \"2017-03-12T07:28:31Z\"}, \"message\": \"tool_writeout: fixed a buffer read overrun on --write-out\\n\\nIf a % ended the statement, the string's trailing NUL would be skipped\\nand memory past the end of the buffer would be accessed and potentially\\ndisplayed as part of the --write-out output. Added tests 1440 and 1441\\nto check for this kind of condition.\\n\\nReported-by: Brian Carpenter\", \"tree\": {\"sha\": \"e940c3226a4b39bb72760ac21a3d83b06af7965c\", \"url\": \"https://api.github.com/repos/curl/curl/git/trees/e940c3226a4b39bb72760ac21a3d83b06af7965c\"}, \"url\": \"https://api.github.com/repos/curl/curl/git/commits/1890d59905414ab84a35892b2e45833654aa5c13\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/curl/curl/commits/1890d59905414ab84a35892b2e45833654aa5c13\", \"html_url\": \"https://github.com/curl/curl/commit/1890d59905414ab84a35892b2e45833654aa5c13\", \"comments_url\": \"https://api.github.com/repos/curl/curl/commits/1890d59905414ab84a35892b2e45833654aa5c13/comments\", \"author\": {\"login\": \"dfandrich\", \"id\": 228259, \"node_id\": \"MDQ6VXNlcjIyODI1OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/228259?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dfandrich\", \"html_url\": \"https://github.com/dfandrich\", \"followers_url\": \"https://api.github.com/users/dfandrich/followers\", \"following_url\": \"https://api.github.com/users/dfandrich/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dfandrich/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dfandrich/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dfandrich/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dfandrich/orgs\", \"repos_url\": \"https://api.github.com/users/dfandrich/repos\", \"events_url\": \"https://api.github.com/users/dfandrich/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dfandrich/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dfandrich\", \"id\": 228259, \"node_id\": \"MDQ6VXNlcjIyODI1OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/228259?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dfandrich\", \"html_url\": \"https://github.com/dfandrich\", \"followers_url\": \"https://api.github.com/users/dfandrich/followers\", \"following_url\": \"https://api.github.com/users/dfandrich/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dfandrich/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dfandrich/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dfandrich/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dfandrich/orgs\", \"repos_url\": \"https://api.github.com/users/dfandrich/repos\", \"events_url\": \"https://api.github.com/users/dfandrich/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dfandrich/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d2bcf1e3e247d116dc96bd3ea32056e3f089449c\", \"url\": \"https://api.github.com/repos/curl/curl/commits/d2bcf1e3e247d116dc96bd3ea32056e3f089449c\", \"html_url\": \"https://github.com/curl/curl/commit/d2bcf1e3e247d116dc96bd3ea32056e3f089449c\"}], \"stats\": {\"total\": 66, \"additions\": 64, \"deletions\": 2}, \"files\": [{\"sha\": \"7843182f29ff6f669203029ecdb9d76fd36bf7e8\", \"filename\": \"src/tool_writeout.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/curl/curl/blob/1890d59905414ab84a35892b2e45833654aa5c13/src%2Ftool_writeout.c\", \"raw_url\": \"https://github.com/curl/curl/raw/1890d59905414ab84a35892b2e45833654aa5c13/src%2Ftool_writeout.c\", \"contents_url\": \"https://api.github.com/repos/curl/curl/contents/src%2Ftool_writeout.c?ref=1890d59905414ab84a35892b2e45833654aa5c13\", \"patch\": \"@@ -113,7 +113,7 @@ void ourWriteOut(CURL *curl, struct OutStruct *outs, const char *writeinfo)\\n   double doubleinfo;\\n \\n   while(ptr && *ptr) {\\n-    if('%' == *ptr) {\\n+    if('%' == *ptr && ptr[1]) {\\n       if('%' == ptr[1]) {\\n         /* an escaped %-letter */\\n         fputc('%', stream);\"}, {\"sha\": \"a6a06b81f2d2eb5c1332c05877dda20caad2c51d\", \"filename\": \"tests/data/Makefile.inc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/curl/curl/blob/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2FMakefile.inc\", \"raw_url\": \"https://github.com/curl/curl/raw/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2FMakefile.inc\", \"contents_url\": \"https://api.github.com/repos/curl/curl/contents/tests%2Fdata%2FMakefile.inc?ref=1890d59905414ab84a35892b2e45833654aa5c13\", \"patch\": \"@@ -153,7 +153,7 @@ test1408 test1409 test1410 test1411 test1412 test1413 test1414 test1415 \\\\\\n test1416 test1417 test1418 test1419 test1420 test1421 test1422 test1423 \\\\\\n test1424 \\\\\\n test1428 test1429 test1430 test1431 test1432 test1433 test1434 test1435 \\\\\\n-test1436 test1437 test1438 test1439 \\\\\\n+test1436 test1437 test1438 test1439 test1440 test1441 \\\\\\n \\\\\\n test1500 test1501 test1502 test1503 test1504 test1505 test1506 test1507 \\\\\\n test1508 test1509 test1510 test1511 test1512 test1513 test1514 test1515 \\\\\"}, {\"sha\": \"7ed0c4d5f6251437aed187df8738afe9be62ae70\", \"filename\": \"tests/data/test1440\", \"status\": \"added\", \"additions\": 31, \"deletions\": 0, \"changes\": 31, \"blob_url\": \"https://github.com/curl/curl/blob/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2Ftest1440\", \"raw_url\": \"https://github.com/curl/curl/raw/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2Ftest1440\", \"contents_url\": \"https://api.github.com/repos/curl/curl/contents/tests%2Fdata%2Ftest1440?ref=1890d59905414ab84a35892b2e45833654aa5c13\", \"patch\": \"@@ -0,0 +1,31 @@\\n+<testcase>\\n+<info>\\n+<keywords>\\n+--write-out\\n+</keywords>\\n+</info>\\n+# Server-side\\n+<reply>\\n+</reply>\\n+\\n+# Client-side\\n+<client>\\n+<server>\\n+file\\n+</server>\\n+\\n+<name>\\n+Check --write-out with trailing %{\\n+</name>\\n+<command>\\n+file://localhost/%PWD/log/ --write-out '%{'\\n+</command>\\n+</client>\\n+\\n+# Verify data\\n+<verify>\\n+<stdout nonewline=\\\"yes\\\">\\n+%{\\n+</stdout>\\n+</verify>\\n+</testcase>\"}, {\"sha\": \"6e253a690c1602df73bd3099a39cbbf966ff2d54\", \"filename\": \"tests/data/test1441\", \"status\": \"added\", \"additions\": 31, \"deletions\": 0, \"changes\": 31, \"blob_url\": \"https://github.com/curl/curl/blob/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2Ftest1441\", \"raw_url\": \"https://github.com/curl/curl/raw/1890d59905414ab84a35892b2e45833654aa5c13/tests%2Fdata%2Ftest1441\", \"contents_url\": \"https://api.github.com/repos/curl/curl/contents/tests%2Fdata%2Ftest1441?ref=1890d59905414ab84a35892b2e45833654aa5c13\", \"patch\": \"@@ -0,0 +1,31 @@\\n+<testcase>\\n+<info>\\n+<keywords>\\n+--write-out\\n+</keywords>\\n+</info>\\n+# Server-side\\n+<reply>\\n+</reply>\\n+\\n+# Client-side\\n+<client>\\n+<server>\\n+file\\n+</server>\\n+\\n+<name>\\n+Check --write-out with trailing %\\n+</name>\\n+<command>\\n+file://localhost/%PWD/log/ --write-out '%'\\n+</command>\\n+</client>\\n+\\n+# Verify data\\n+<verify>\\n+<stdout nonewline=\\\"yes\\\">\\n+%\\n+</stdout>\\n+</verify>\\n+</testcase>\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2Y3NmU3ZmViNDFhNDMyN2QyYjA5Nzg0NDliYmRhZmU5OGQ0YTM3NzEi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f76e7feb41a4327d2b0978449bbdafe98d4a3771", "content": "{\"sha\": \"f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpmNzZlN2ZlYjQxYTQzMjdkMmIwOTc4NDQ5YmJkYWZlOThkNGEzNzcx\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-03T19:15:34Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12896/ISAKMP: Do bounds checks in isakmp_rfc3948_print().\\n\\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"e746201550d00787a894710773f19fadf768ca48\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/e746201550d00787a894710773f19fadf768ca48\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f76e7feb41a4327d2b0978449bbdafe98d4a3771/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a1eefe986065846b6c69dbc09afd9fa1a02c4a3d\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a1eefe986065846b6c69dbc09afd9fa1a02c4a3d\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a1eefe986065846b6c69dbc09afd9fa1a02c4a3d\"}], \"stats\": {\"total\": 71, \"additions\": 70, \"deletions\": 1}, \"files\": [{\"sha\": \"2fa15b861a141033c98587719022bb8cc2aacbf8\", \"filename\": \"print-isakmp.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f76e7feb41a4327d2b0978449bbdafe98d4a3771/print-isakmp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f76e7feb41a4327d2b0978449bbdafe98d4a3771/print-isakmp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isakmp.c?ref=f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"patch\": \"@@ -3041,7 +3041,7 @@ isakmp_rfc3948_print(netdissect_options *ndo,\\n \\t\\t     const u_char *bp, u_int length,\\n \\t\\t     const u_char *bp2)\\n {\\n-\\n+\\tND_TCHECK(bp[0]);\\n \\tif(length == 1 && bp[0]==0xff) {\\n \\t\\tND_PRINT((ndo, \\\"isakmp-nat-keep-alive\\\"));\\n \\t\\treturn;\\n@@ -3050,6 +3050,7 @@ isakmp_rfc3948_print(netdissect_options *ndo,\\n \\tif(length < 4) {\\n \\t\\tgoto trunc;\\n \\t}\\n+\\tND_TCHECK(bp[3]);\\n \\n \\t/*\\n \\t * see if this is an IKE packet\"}, {\"sha\": \"ee6fb46eac465fc763f951f61de3b3f23e8cafdc\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"patch\": \"@@ -441,6 +441,7 @@ isoclns-heapoverflow-3\\tisoclns-heapoverflow-3.pcap\\tisoclns-heapoverflow-3.out\\t-e\\n stp-v4-length-sigsegv\\tstp-v4-length-sigsegv.pcap\\tstp-v4-length-sigsegv.out\\n hoobr_pimv1\\t\\thoobr_pimv1.pcap\\t\\thoobr_pimv1.out\\n hoobr_safeputs\\t\\thoobr_safeputs.pcap\\t\\thoobr_safeputs.out\\n+isakmp-rfc3948-oobr\\tisakmp-rfc3948-oobr.pcap\\tisakmp-rfc3948-oobr.out\\n \\n # bad packets from Wilfried Kirsch\\n slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\"}, {\"sha\": \"844170a22c4ee16c6f9d04ba275b598473620272\", \"filename\": \"tests/isakmp-rfc3948-oobr.out\", \"status\": \"added\", \"additions\": 67, \"deletions\": 0, \"changes\": 67, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2Fisakmp-rfc3948-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2Fisakmp-rfc3948-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisakmp-rfc3948-oobr.out?ref=f76e7feb41a4327d2b0978449bbdafe98d4a3771\", \"patch\": \"@@ -0,0 +1,67 @@\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030            000000000000\\n+IP 48.48.48.48.4500 > 48.48.48.48.12336: [|isakmp]\"}, {\"sha\": \"ae1d5afbe7d3993b7e8bc08073593f8604dba38c\", \"filename\": \"tests/isakmp-rfc3948-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2Fisakmp-rfc3948-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f76e7feb41a4327d2b0978449bbdafe98d4a3771/tests%2Fisakmp-rfc3948-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisakmp-rfc3948-oobr.pcap?ref=f76e7feb41a4327d2b0978449bbdafe98d4a3771\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzZmNWJhMmI2NTFjZDlkNGI3ZmE4ZWU1YzRmOTQ0NjA2NDU4NzdjNDUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45", "content": "{\"sha\": \"6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo2ZjViYTJiNjUxY2Q5ZDRiN2ZhOGVlNWM0Zjk0NDYwNjQ1ODc3YzQ1\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-04T00:56:57Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12893/SMB/CIFS: Add a bounds check in name_len().\\n\\nAfter we advance the pointer by the length value in the buffer, make\\nsure it points to something in the captured data.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"286d10fcbad1f40ac4163fd6bef48e74e6a96adc\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/286d10fcbad1f40ac4163fd6bef48e74e6a96adc\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c6e0531b5def26ecf912e8de6ade86cbdaed3751\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c6e0531b5def26ecf912e8de6ade86cbdaed3751\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c6e0531b5def26ecf912e8de6ade86cbdaed3751\"}], \"stats\": {\"total\": 20, \"additions\": 20, \"deletions\": 0}, \"files\": [{\"sha\": \"fc9b3cc6f227a659fd71f3c5e4c1c766a132e9a3\", \"filename\": \"smbutil.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/smbutil.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/smbutil.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/smbutil.c?ref=6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"patch\": \"@@ -237,6 +237,7 @@ name_len(netdissect_options *ndo,\\n \\t    return(-1);\\t/* name goes past the end of the buffer */\\n \\tND_TCHECK2(*s, 1);\\n \\ts += (*s) + 1;\\n+\\tND_TCHECK2(*s, 1);\\n     }\\n     return(PTR_DIFF(s, s0) + 1);\\n \"}, {\"sha\": \"514076410dba3b8cfe8f891a6dca0b0becc4d36b\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"patch\": \"@@ -449,6 +449,9 @@ decnet-oobr\\t\\tdecnet-oobr.pcap\\t\\tdecnet-oobr.out\\n # bad packets from Wilfried Kirsch\\n slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\\n \\n+# bad packets from Otto Airamo and Antti Levom\\u00e4ki\\n+nbns-valgrind\\t\\tnbns-valgrind.pcap\\t\\tnbns-valgrind.out\\t-vvv -e\\n+\\n # RTP tests\\n # fuzzed pcap\\n rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -v -T rtp\"}, {\"sha\": \"bb9cc4973f01e1f91bba84ca1864e7f9a638cec3\", \"filename\": \"tests/nbns-valgrind.out\", \"status\": \"added\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2Fnbns-valgrind.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2Fnbns-valgrind.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fnbns-valgrind.out?ref=6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\", \"patch\": \"@@ -0,0 +1,16 @@\\n+00:0c:85:0e:a5:ff > 00:00:0c:07:ac:f0, ethertype IPv4 (0x0800), length 92: (tos 0x0, ttl 127, id 38615, offset 0, flags [none], proto UDP (17), length 78)\\n+    10.49.248.228.137 > 10.48.161.241.137: \\n+>>> NBT UDP PACKET(137): QUERY; REQUEST; UNICAST\\n+TrnID=0x8D40\\n+OpCode=0\\n+NmFlags=0x10\\n+Rcode=0\\n+QueryCount=1\\n+AnswerCount=0\\n+AuthorityCount=0\\n+AddressRecCount=0\\n+QuestionRecords:\\n+Name=\\n+WARNING: Short packet. Try increasing the snap length\\n+\\n+\"}, {\"sha\": \"57657f02b5e01d870eabfcef03de10df610bf0fe\", \"filename\": \"tests/nbns-valgrind.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2Fnbns-valgrind.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45/tests%2Fnbns-valgrind.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fnbns-valgrind.pcap?ref=6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzJiNjJkMWRkYTQxNTkwZGIyOTM2OGVjN2JhNWY0ZmFmMzQ2NDc2NWEi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2b62d1dda41590db29368ec7ba5f4faf3464765a", "content": "{\"sha\": \"2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoyYjYyZDFkZGE0MTU5MGRiMjkzNjhlYzdiYTVmNGZhZjM0NjQ3NjVh\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-04T04:02:45Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12895/ICMP: Check the availability of data before checksumming it.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd tests using the capture files supplied by the reporter(s).\", \"tree\": {\"sha\": \"04a869e08d8afa2b09066b589b65bf406601ba11\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/04a869e08d8afa2b09066b589b65bf406601ba11\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2b62d1dda41590db29368ec7ba5f4faf3464765a/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"730fc35968c5433b9e2a829779057f4f9495dc51\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/730fc35968c5433b9e2a829779057f4f9495dc51\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/730fc35968c5433b9e2a829779057f4f9495dc51\"}], \"stats\": {\"total\": 49, \"additions\": 42, \"deletions\": 7}, \"files\": [{\"sha\": \"ec7525357fcd8044b24e5aead604462e2b271849\", \"filename\": \"print-icmp.c\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 7, \"changes\": 17, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/print-icmp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/print-icmp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-icmp.c?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -598,7 +598,8 @@ icmp_print(netdissect_options *ndo, const u_char *bp, u_int plen, const u_char *\\n              * to check if an extension header is present. This is expedient,\\n              * however not all implementations set the length field proper.\\n              */\\n-            if (!ext_dp->icmp_length) {\\n+            if (!ext_dp->icmp_length &&\\n+                ND_TTEST2(ext_dp->icmp_ext_version_res, plen - ICMP_EXTD_MINLEN)) {\\n                 vec[0].ptr = (const uint8_t *)(const void *)&ext_dp->icmp_ext_version_res;\\n                 vec[0].len = plen - ICMP_EXTD_MINLEN;\\n                 if (in_cksum(vec, 1)) {\\n@@ -619,12 +620,14 @@ icmp_print(netdissect_options *ndo, const u_char *bp, u_int plen, const u_char *\\n             }\\n \\n             hlen = plen - ICMP_EXTD_MINLEN;\\n-            vec[0].ptr = (const uint8_t *)(const void *)&ext_dp->icmp_ext_version_res;\\n-            vec[0].len = hlen;\\n-            ND_PRINT((ndo, \\\", checksum 0x%04x (%scorrect), length %u\\\",\\n-                   EXTRACT_16BITS(ext_dp->icmp_ext_checksum),\\n-                   in_cksum(vec, 1) ? \\\"in\\\" : \\\"\\\",\\n-                   hlen));\\n+            if (ND_TTEST2(ext_dp->icmp_ext_version_res, hlen)) {\\n+                vec[0].ptr = (const uint8_t *)(const void *)&ext_dp->icmp_ext_version_res;\\n+                vec[0].len = hlen;\\n+                ND_PRINT((ndo, \\\", checksum 0x%04x (%scorrect), length %u\\\",\\n+                       EXTRACT_16BITS(ext_dp->icmp_ext_checksum),\\n+                       in_cksum(vec, 1) ? \\\"in\\\" : \\\"\\\",\\n+                       hlen));\\n+            }\\n \\n             hlen -= 4; /* subtract common header size */\\n             obj_tptr = (const uint8_t *)ext_dp->icmp_ext_data;\"}, {\"sha\": \"c44e2b75fc868a42d6d3f68954fa0691d0e41151\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -452,6 +452,10 @@ slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\\n # bad packets from Otto Airamo and Antti Levom\\u00e4ki\\n nbns-valgrind\\t\\tnbns-valgrind.pcap\\t\\tnbns-valgrind.out\\t-vvv -e\\n arp-oobr\\t\\tarp-oobr.pcap\\t\\t\\tarp-oobr.out\\t-vvv -e\\n+icmp-cksum-oobr-1\\ticmp-cksum-oobr-1.pcap\\t\\ticmp-cksum-oobr-1.out\\t-vvv -e\\n+icmp-cksum-oobr-2\\ticmp-cksum-oobr-2.pcap\\t\\ticmp-cksum-oobr-2.out\\t-vvv -e\\n+icmp-cksum-oobr-3\\ticmp-cksum-oobr-3.pcap\\t\\ticmp-cksum-oobr-3.out\\t-vvv -e\\n+icmp-cksum-oobr-4\\ticmp-cksum-oobr-4.pcap\\t\\ticmp-cksum-oobr-4.out\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"2efafee676058137420426d41931b8e2a761e743\", \"filename\": \"tests/icmp-cksum-oobr-1.out\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-1.out?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -0,0 +1,5 @@\\n+Out 00:16:3e:27:78:a2 ethertype IPv4 (0x0800), length 204: truncated-ip - 13723 bytes missing! (tos 0x72,ECT(0), ttl 64, id 9472, offset 0, flags [none], proto ICMP (1), length 13911, bad cksum 67ea (->8c0c)!)\\n+    62.220.31.247 > 62.225.245.115: ICMP 62.220.31.247 udp port 1027 unreachable, length 13891\\n+\\t(tos 0xa0, ttl 114, id 30054, offset 0, flags [none], proto UDP (17), length 13728, bad cksum 3f1f (->a1f)!)\\n+    62.225.245.115.9109 > 62.220.31.247.1027: [bad udp cksum 0xdfe7 -> 0xdb95!] UDP, length 132\\n+\\tMPLS extension v0 packet not supported\"}, {\"sha\": \"b79f72b1f96dfcd99005cd8cb1e9b61096548cd7\", \"filename\": \"tests/icmp-cksum-oobr-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-1.pcap?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\"}, {\"sha\": \"71d6b886dc1dbb6cc2bc0cef0d954edc5db98861\", \"filename\": \"tests/icmp-cksum-oobr-2.out\", \"status\": \"added\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-2.out?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -0,0 +1,11 @@\\n+IP (0x0021), length 244: truncated-ip - 32768 bytes missing! (tos 0x0, ttl 254, id 59168, offset 0, flags [DF], proto ICMP (1), length 33008, bad cksum 7ade (->fabd)!)\\n+    10.4.0.34 > 12.4.4.4: ICMP time exceeded in-transit, length 32988\\n+\\t(tos 0x0, ttl 1, id 42321, offset 0, flags [none], proto UDP (17), length 40)\\n+    12.4.4.4.42315 > 12.1.1.1.33440: [bad udp cksum 0x1000 -> 0xbad0!] UDP, length 12\\n+\\tMPLS extension v2\\n+\\t  Extended Payload Object (2), Class-Type: 14, length 80\\n+\\t    0x0000:  0000 000f 0001 0000 0a0a 0a0a 3f54 6869\\n+\\t    0x0010:  732d 6973 2d74 6865 2d6e 616d 652d 6f66\\n+\\t    0x0020:  2d74 6865 2d49 6e74 6572 6661 6365 2d74\\n+\\t    0x0030:  6861 742d 7765 2d61 7265 2d6c 6f6f 6b69\\n+\\t    0x0040:  6e67 2d66 6f72 2d5b 3a2d 295d[|icmp]\"}, {\"sha\": \"32db8ac902088c42829ff66a79719e0b96779733\", \"filename\": \"tests/icmp-cksum-oobr-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-2.pcap?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\"}, {\"sha\": \"4a16fdd8389bdb7490eb7cf54eca116cd8570ec6\", \"filename\": \"tests/icmp-cksum-oobr-3.out\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-3.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-3.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-3.out?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -0,0 +1,5 @@\\n+00:00:00:00:00:00 > 00:00:00:00:00:00, ethertype IPv4 (0x0800), length 337: truncated-ip - 4096 bytes missing! (tos 0x0, ttl 64, id 30662, offset 0, flags [DF], proto ICMP (1), length 4419, bad cksum cdf9 (->bdf9)!)\\n+    97.242.24.11 > 97.242.24.11: ICMP 97.242.24.11 udp port 162 unreachable, length 4399\\n+\\t(tos 0x0, ttl 128, id 30661, offset 0, flags [DF], proto UDP (17), length 295)\\n+    97.242.24.11.60377 > 97.242.24.11.162: [udp sum ok]  { SNMPv1 C=\\\"trap\\\" { Trap(251)  .1.3.6.1.4.1.3830.1.1.2.2.1 97.242.24.11 enterpriseSpecific s=52 61498489 .1.3.6.1.4.1.3830.1.1.2.1.1.1=3 .1.3.6.1.4.1.3830.1.1.2.1.1.2=2 .1.3.6.1.4.1.3830.1.1.2.1.1.3=\\\"%SMSA-E-POLLERR, Polling the SMSC was not successful.\\\" .1.3.6.1.4.1.3830.1.1.2.1.1.4=\\\"OPCOM\\\" .1.3.6.1.4.1.3830.1.1.2.1.1.5=\\\"28-OCT-2010 20:42:14.67\\\" .1.3.6.1.4.1.3830.1.1.2.1.1.6=\\\"SMRL51\\\" } } \\n+\\tMPLS extension v0 packet not supported\"}, {\"sha\": \"a92d933f6b287ccfa97da55ee8c4539bd13a964a\", \"filename\": \"tests/icmp-cksum-oobr-3.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-3.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-3.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-3.pcap?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\"}, {\"sha\": \"2b1208222b48e9cd26466c1417dd3127378a624a\", \"filename\": \"tests/icmp-cksum-oobr-4.out\", \"status\": \"added\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-4.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-4.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-4.out?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\", \"patch\": \"@@ -0,0 +1,7 @@\\n+IP (0x0021), length 172: truncated-ip - 8192 bytes missing! (tos 0xc0, ttl 251, id 5047, offset 0, flags [none], proto ICMP (1), length 8360, bad cksum 7edb (->5edb)!)\\n+    10.0.12.2 > 10.0.12.1: ICMP time exceeded in-transit, length 8340\\n+\\t(tos 0x0, ttl 1, id 2574, offset 0, flags [none], proto UDP (17), length 28)\\n+    10.0.12.1.49215 > 10.255.255.4.33435: [udp sum ok] UDP, length 0\\n+\\tMPLS extension v2\\n+\\t  MPLS Stack Entry Object (1), Class-Type: 1, length 8\\n+\\t    label 16, exp 0, [S], ttl 1[|icmp]\"}, {\"sha\": \"58f472832382e52506350b14f193870303aa665c\", \"filename\": \"tests/icmp-cksum-oobr-4.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-4.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2b62d1dda41590db29368ec7ba5f4faf3464765a/tests%2Ficmp-cksum-oobr-4.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp-cksum-oobr-4.pcap?ref=2b62d1dda41590db29368ec7ba5f4faf3464765a\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzg5MzRhN2Q2MzA3MjY3ZDMwMTE4MmYxOWVkMTYyNTYzNzE3ZTI5ZTMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8934a7d6307267d301182f19ed162563717e29e3", "content": "{\"sha\": \"8934a7d6307267d301182f19ed162563717e29e3\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo4OTM0YTdkNjMwNzI2N2QzMDExODJmMTllZDE2MjU2MzcxN2UyOWUz\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-06T23:13:05Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12988/TELNET: Add a missing bounds check.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"263c4f34aef6542839baf406628feb81cd5d95e7\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/263c4f34aef6542839baf406628feb81cd5d95e7\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/8934a7d6307267d301182f19ed162563717e29e3\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8934a7d6307267d301182f19ed162563717e29e3\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/8934a7d6307267d301182f19ed162563717e29e3\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8934a7d6307267d301182f19ed162563717e29e3/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c2ef693866beae071a24b45c49f9674af1df4028\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c2ef693866beae071a24b45c49f9674af1df4028\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c2ef693866beae071a24b45c49f9674af1df4028\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"10fad9fef7f6a5b8c9a045c8f59eeeccb0873829\", \"filename\": \"print-telnet.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8934a7d6307267d301182f19ed162563717e29e3/print-telnet.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8934a7d6307267d301182f19ed162563717e29e3/print-telnet.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-telnet.c?ref=8934a7d6307267d301182f19ed162563717e29e3\", \"patch\": \"@@ -442,6 +442,7 @@ telnet_parse(netdissect_options *ndo, const u_char *sp, u_int length, int print)\\n \\t\\t\\t\\tbreak;\\n \\t\\t\\tp++;\\n \\t\\t}\\n+\\t\\tND_TCHECK(*p);\\n \\t\\tif (*p != IAC)\\n \\t\\t\\tgoto pktend;\\n \"}, {\"sha\": \"61264ee2e1976e01415b96fe6134deaf1663245e\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8934a7d6307267d301182f19ed162563717e29e3/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8934a7d6307267d301182f19ed162563717e29e3/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=8934a7d6307267d301182f19ed162563717e29e3\", \"patch\": \"@@ -466,6 +466,7 @@ eigrp-tlv-oobr\\t\\teigrp-tlv-oobr.pcap\\t\\teigrp-tlv-oobr.out\\t-vvv -e\\n zephyr-oobr\\t\\tzephyr-oobr.pcap\\t\\tzephyr-oobr.out\\t\\t-vvv -e\\n bgp-as-path-oobr\\tbgp-as-path-oobr.pcap\\t\\tbgp-as-path-oobr.out\\t-vvv -e\\n isakmp-no-none-np\\tisakmp-no-none-np.pcap\\t\\tisakmp-no-none-np.out\\t-vvv -e\\n+telnet-iac-check-oobr\\ttelnet-iac-check-oobr.pcap\\ttelnet-iac-check-oobr.out\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"2fd5272e7863ccd79f19069ceb9533180759bafd\", \"filename\": \"tests/telnet-iac-check-oobr.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8934a7d6307267d301182f19ed162563717e29e3/tests%2Ftelnet-iac-check-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8934a7d6307267d301182f19ed162563717e29e3/tests%2Ftelnet-iac-check-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ftelnet-iac-check-oobr.out?ref=8934a7d6307267d301182f19ed162563717e29e3\"}, {\"sha\": \"7800c79bcce6967d94c1fe5d87c3eb5e1502edfc\", \"filename\": \"tests/telnet-iac-check-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8934a7d6307267d301182f19ed162563717e29e3/tests%2Ftelnet-iac-check-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8934a7d6307267d301182f19ed162563717e29e3/tests%2Ftelnet-iac-check-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ftelnet-iac-check-oobr.pcap?ref=8934a7d6307267d301182f19ed162563717e29e3\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2U5NDJmYjg0ZmJlM2E3M2E5OGEwMGQyYTI3OTQyNTg3MmI1ZmI5ZDIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e942fb84fbe3a73a98a00d2a279425872b5fb9d2", "content": "{\"sha\": \"e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjplOTQyZmI4NGZiZTNhNzNhOThhMDBkMmEyNzk0MjU4NzJiNWZiOWQy\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-07T11:03:34Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12992/RIPng: Clean up bounds checking.\\n\\nDo bounds checking as we access items.\\n\\nScan the list of netinfo6 entries based on the supplied packet length,\\nwithout taking the captured length into account; let the aforementioned\\nbounds checking handle that.\\n\\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"4a414ff4e1986ebb42ca16e7410ab3e94db4d79a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/4a414ff4e1986ebb42ca16e7410ab3e94db4d79a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"db24063b01cba8e9d4d88b7d8ac70c9000c104e4\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/db24063b01cba8e9d4d88b7d8ac70c9000c104e4\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/db24063b01cba8e9d4d88b7d8ac70c9000c104e4\"}], \"stats\": {\"total\": 73, \"additions\": 42, \"deletions\": 31}, \"files\": [{\"sha\": \"7113239ad549056a11a9670ee992d4e9f8604092\", \"filename\": \"print-ripng.c\", \"status\": \"modified\", \"additions\": 40, \"deletions\": 31, \"changes\": 71, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/print-ripng.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/print-ripng.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-ripng.c?ref=e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"patch\": \"@@ -110,65 +110,74 @@ ripng_print(netdissect_options *ndo, const u_char *dat, unsigned int length)\\n {\\n \\tregister const struct rip6 *rp = (const struct rip6 *)dat;\\n \\tregister const struct netinfo6 *ni;\\n-\\tregister u_int amt;\\n-\\tregister u_int i;\\n-\\tint j;\\n-\\tint trunc;\\n-\\n-\\tif (ndo->ndo_snapend < dat)\\n-\\t\\treturn;\\n-\\tamt = ndo->ndo_snapend - dat;\\n-\\ti = min(length, amt);\\n-\\tif (i < (sizeof(struct rip6) - sizeof(struct netinfo6)))\\n-\\t\\treturn;\\n-\\ti -= (sizeof(struct rip6) - sizeof(struct netinfo6));\\n+\\tunsigned int length_left;\\n+\\tu_int j;\\n \\n+\\tND_TCHECK(rp->rip6_cmd);\\n \\tswitch (rp->rip6_cmd) {\\n \\n \\tcase RIP6_REQUEST:\\n-\\t\\tj = length / sizeof(*ni);\\n-\\t\\tif (j == 1\\n-\\t\\t    &&  rp->rip6_nets->rip6_metric == HOPCNT_INFINITY6\\n-\\t\\t    &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {\\n-\\t\\t\\tND_PRINT((ndo, \\\" ripng-req dump\\\"));\\n-\\t\\t\\tbreak;\\n+\\t\\tlength_left = length;\\n+\\t\\tif (length_left < (sizeof(struct rip6) - sizeof(struct netinfo6)))\\n+\\t\\t\\tgoto trunc;\\n+\\t\\tlength_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));\\n+ \\t\\tj = length_left / sizeof(*ni);\\n+\\t\\tif (j == 1) {\\n+\\t\\t\\tND_TCHECK(rp->rip6_nets);\\n+\\t\\t\\tif (rp->rip6_nets->rip6_metric == HOPCNT_INFINITY6\\n+\\t\\t\\t    &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {\\n+\\t\\t\\t\\tND_PRINT((ndo, \\\" ripng-req dump\\\"));\\n+\\t\\t\\t\\tbreak;\\n+\\t\\t\\t}\\n \\t\\t}\\n-\\t\\tif (j * sizeof(*ni) != length - 4)\\n-\\t\\t\\tND_PRINT((ndo, \\\" ripng-req %d[%u]:\\\", j, length));\\n+\\t\\tif (j * sizeof(*ni) != length_left)\\n+\\t\\t\\tND_PRINT((ndo, \\\" ripng-req %u[%u]:\\\", j, length));\\n \\t\\telse\\n-\\t\\t\\tND_PRINT((ndo, \\\" ripng-req %d:\\\", j));\\n-\\t\\ttrunc = ((i / sizeof(*ni)) * sizeof(*ni) != i);\\n-\\t\\tfor (ni = rp->rip6_nets; i >= sizeof(*ni);\\n-\\t\\t    i -= sizeof(*ni), ++ni) {\\n+\\t\\t\\tND_PRINT((ndo, \\\" ripng-req %u:\\\", j));\\n+\\t\\tfor (ni = rp->rip6_nets; length_left >= sizeof(*ni);\\n+\\t\\t    length_left -= sizeof(*ni), ++ni) {\\n+\\t\\t\\tND_TCHECK(*ni);\\n \\t\\t\\tif (ndo->ndo_vflag > 1)\\n \\t\\t\\t\\tND_PRINT((ndo, \\\"\\\\n\\\\t\\\"));\\n \\t\\t\\telse\\n \\t\\t\\t\\tND_PRINT((ndo, \\\" \\\"));\\n \\t\\t\\trip6_entry_print(ndo, ni, 0);\\n \\t\\t}\\n+\\t\\tif (length_left != 0)\\n+\\t\\t\\tgoto trunc;\\n \\t\\tbreak;\\n \\tcase RIP6_RESPONSE:\\n-\\t\\tj = length / sizeof(*ni);\\n-\\t\\tif (j * sizeof(*ni) != length - 4)\\n+\\t\\tlength_left = length;\\n+\\t\\tif (length_left < (sizeof(struct rip6) - sizeof(struct netinfo6)))\\n+\\t\\t\\tgoto trunc;\\n+\\t\\tlength_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));\\n+\\t\\tj = length_left / sizeof(*ni);\\n+\\t\\tif (j * sizeof(*ni) != length_left)\\n \\t\\t\\tND_PRINT((ndo, \\\" ripng-resp %d[%u]:\\\", j, length));\\n \\t\\telse\\n \\t\\t\\tND_PRINT((ndo, \\\" ripng-resp %d:\\\", j));\\n-\\t\\ttrunc = ((i / sizeof(*ni)) * sizeof(*ni) != i);\\n-\\t\\tfor (ni = rp->rip6_nets; i >= sizeof(*ni);\\n-\\t\\t    i -= sizeof(*ni), ++ni) {\\n+\\t\\tfor (ni = rp->rip6_nets; length_left >= sizeof(*ni);\\n+\\t\\t    length_left -= sizeof(*ni), ++ni) {\\n+\\t\\t\\tND_TCHECK(*ni);\\n \\t\\t\\tif (ndo->ndo_vflag > 1)\\n \\t\\t\\t\\tND_PRINT((ndo, \\\"\\\\n\\\\t\\\"));\\n \\t\\t\\telse\\n \\t\\t\\t\\tND_PRINT((ndo, \\\" \\\"));\\n \\t\\t\\trip6_entry_print(ndo, ni, ni->rip6_metric);\\n \\t\\t}\\n-\\t\\tif (trunc)\\n-\\t\\t\\tND_PRINT((ndo, \\\"[|ripng]\\\"));\\n+\\t\\tif (length_left != 0)\\n+\\t\\t\\tgoto trunc;\\n \\t\\tbreak;\\n \\tdefault:\\n \\t\\tND_PRINT((ndo, \\\" ripng-%d ?? %u\\\", rp->rip6_cmd, length));\\n \\t\\tbreak;\\n \\t}\\n+\\tND_TCHECK(rp->rip6_vers);\\n \\tif (rp->rip6_vers != RIP6_VERSION)\\n \\t\\tND_PRINT((ndo, \\\" [vers %d]\\\", rp->rip6_vers));\\n+\\treturn;\\n+\\n+trunc:\\n+\\tND_PRINT((ndo, \\\"[|ripng]\\\"));\\n+\\treturn;\\n }\"}, {\"sha\": \"142dd45a9a1c18738d333e8152d87f6fccc382ac\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"patch\": \"@@ -450,6 +450,7 @@ isoclns-oobr\\t\\tisoclns-oobr.pcap\\t\\tisoclns-oobr.out\\n nfs-attr-oobr\\t\\tnfs-attr-oobr.pcap\\t\\tnfs-attr-oobr.out\\n decnet-oobr\\t\\tdecnet-oobr.pcap\\t\\tdecnet-oobr.out\\n oobr_parse_elements\\toobr_parse_elements.pcap\\toobr_parse_elements.out\\n+hoobr_ripng_print\\thoobr_ripng_print.pcap\\t\\thoobr_ripng_print.out\\n \\n # bad packets from Wilfried Kirsch\\n slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\"}, {\"sha\": \"c2d66a066d5ee7da25a89a451913f9edf9b272f9\", \"filename\": \"tests/hoobr_ripng_print.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2Fhoobr_ripng_print.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2Fhoobr_ripng_print.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_ripng_print.out?ref=e942fb84fbe3a73a98a00d2a279425872b5fb9d2\", \"patch\": \"@@ -0,0 +1 @@\\n+IP 48.48.48.48.521 > 48.48.48.48.12336: [|ripng]\"}, {\"sha\": \"7eabe367362b98e261c143b863101b5723ddc6e3\", \"filename\": \"tests/hoobr_ripng_print.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2Fhoobr_ripng_print.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e942fb84fbe3a73a98a00d2a279425872b5fb9d2/tests%2Fhoobr_ripng_print.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_ripng_print.pcap?ref=e942fb84fbe3a73a98a00d2a279425872b5fb9d2\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2ZmZGU0NWFjZjMzNDhmODM1M2ZiNDA2NGExYjIxNjgzZWU2YjVkZGYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ffde45acf3348f8353fb4064a1b21683ee6b5ddf", "content": "{\"sha\": \"ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpmZmRlNDVhY2YzMzQ4ZjgzNTNmYjQwNjRhMWIyMTY4M2VlNmI1ZGRm\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-07T20:08:07Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12994/BGP: Move a test inside a loop.\\n\\nThe loop can be executed more than once (that's kinda the whole point of\\na loop), so the check has to be made each time through the loop, not\\njust once before the loop is executed.\\n\\nDo some additional length checks while we're at it.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"ea523d3b2a9f85f5f8fefd19aca420963e03df5a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/ea523d3b2a9f85f5f8fefd19aca420963e03df5a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6ec0c6fa63412c7a07a5bcb790a529c3563b4173\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6ec0c6fa63412c7a07a5bcb790a529c3563b4173\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/6ec0c6fa63412c7a07a5bcb790a529c3563b4173\"}], \"stats\": {\"total\": 10155, \"additions\": 10149, \"deletions\": 6}, \"files\": [{\"sha\": \"33c482e6fdc3b698178d5aad6e72971ad92199b4\", \"filename\": \"print-bgp.c\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 6, \"changes\": 19, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/print-bgp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/print-bgp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"patch\": \"@@ -2182,35 +2182,42 @@ bgp_attr_print(netdissect_options *ndo,\\n \\t\\tuint8_t type;\\n \\t\\tuint16_t length;\\n \\n-\\t\\tND_TCHECK2(tptr[0], 3);\\n-\\n \\t\\ttlen = len;\\n \\n \\t\\twhile (tlen >= 3) {\\n \\n+\\t\\t    ND_TCHECK2(tptr[0], 3);\\n+\\n \\t\\t    type = *tptr;\\n \\t\\t    length = EXTRACT_16BITS(tptr+1);\\n+\\t\\t    tptr += 3;\\n+\\t\\t    tlen -= 3;\\n \\n \\t\\t    ND_PRINT((ndo, \\\"\\\\n\\\\t    %s TLV (%u), length %u\\\",\\n \\t\\t\\t      tok2str(bgp_aigp_values, \\\"Unknown\\\", type),\\n \\t\\t\\t      type, length));\\n \\n+\\t\\t    if (length < 3)\\n+\\t\\t\\tgoto trunc;\\n+\\t\\t    length -= 3;\\n+\\n \\t\\t    /*\\n \\t\\t     * Check if we can read the TLV data.\\n \\t\\t     */\\n-\\t\\t    ND_TCHECK2(tptr[3], length - 3);\\n+\\t\\t    ND_TCHECK2(tptr[3], length);\\n \\n \\t\\t    switch (type) {\\n \\n \\t\\t    case BGP_AIGP_TLV:\\n-\\t\\t        ND_TCHECK2(tptr[3], 8);\\n+\\t\\t        if (length < 8)\\n+\\t\\t            goto trunc;\\n \\t\\t\\tND_PRINT((ndo, \\\", metric %\\\" PRIu64,\\n-\\t\\t\\t\\t  EXTRACT_64BITS(tptr+3)));\\n+\\t\\t\\t\\t  EXTRACT_64BITS(tptr)));\\n \\t\\t\\tbreak;\\n \\n \\t\\t    default:\\n \\t\\t\\tif (ndo->ndo_vflag <= 1) {\\n-\\t\\t\\t    print_unknown_data(ndo, tptr+3,\\\"\\\\n\\\\t      \\\", length-3);\\n+\\t\\t\\t    print_unknown_data(ndo, tptr,\\\"\\\\n\\\\t      \\\", length);\\n \\t\\t\\t}\\n \\t\\t    }\\n \"}, {\"sha\": \"fa7d5938d15f29b25a81b314d61c4d616361c96f\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=ffde45acf3348f8353fb4064a1b21683ee6b5ddf\", \"patch\": \"@@ -473,6 +473,7 @@ zephyr-oobr\\t\\tzephyr-oobr.pcap\\t\\tzephyr-oobr.out\\t\\t-vvv -e\\n isakmp-no-none-np\\tisakmp-no-none-np.pcap\\t\\tisakmp-no-none-np.out\\t-vvv -e\\n telnet-iac-check-oobr\\ttelnet-iac-check-oobr.pcap\\ttelnet-iac-check-oobr.out\\t-vvv -e\\n resp_4_infiniteloop\\tresp_4_infiniteloop.pcap\\tresp_4_infiniteloop.out\\t-vvv -e\\n+bgp-aigp-oobr\\t\\tbgp-aigp-oobr.pcap\\t\\tbgp-aigp-oobr.out\\t\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"e874ccfaa6d18f7214d95179452ec578fa458df3\", \"filename\": \"tests/bgp-aigp-oobr.out\", \"status\": \"added\", \"additions\": 10135, \"deletions\": 0, \"changes\": 10135, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2Fbgp-aigp-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2Fbgp-aigp-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp-aigp-oobr.out?ref=ffde45acf3348f8353fb4064a1b21683ee6b5ddf\"}, {\"sha\": \"868a008177f4de26b09dacac5f679dffd4437f7b\", \"filename\": \"tests/bgp-aigp-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2Fbgp-aigp-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ffde45acf3348f8353fb4064a1b21683ee6b5ddf/tests%2Fbgp-aigp-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp-aigp-oobr.pcap?ref=ffde45acf3348f8353fb4064a1b21683ee6b5ddf\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzNhNzZmZDdjOTVmY2VkMmMyZjhjODE0OGE5MDU1YzNhNTQyZWZmMjki.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3a76fd7c95fced2c2f8c8148a9055c3a542eff29", "content": "{\"sha\": \"3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjozYTc2ZmQ3Yzk1ZmNlZDJjMmY4YzgxNDhhOTA1NWMzYTU0MmVmZjI5\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-11T02:52:17Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12995/Check for DNS compression pointers that don't point backwards.\\n\\nThis is what BIND 9.11.0-P2 does; it not only detects pointers that\\nloop, as \\\"point backwards\\\" means \\\"point before anything we've processed\\nso far, including what we're processing right now\\\", so the pointer can't\\npoint to itself (as that's what we're processing right now).\\n\\nThis fixes an infinite loop discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\\n\\nAlso, add some infinite-pointer-loop captures.\\n\\nMore checks should be done.  We might, for example, want to make sure\\nthe upper 2 bits of the label length/pointer byte are 00 or 11, and that\\nif we encounter a pointer and jump backwards to what we think is a label\\nthe label ends before the beginning of the last label we processed, to\\nmake sure the pointer doesn't point backwards into the *middle* of a\\nlabel, and also make sure the entire name is <= 255 bytes long.\", \"tree\": {\"sha\": \"462fc3a587a150a93c81bbf47ea65ffb71068e1c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/462fc3a587a150a93c81bbf47ea65ffb71068e1c\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"866c60236c41cea1e1654c8a071897292f64be49\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/866c60236c41cea1e1654c8a071897292f64be49\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/866c60236c41cea1e1654c8a071897292f64be49\"}], \"stats\": {\"total\": 51, \"additions\": 33, \"deletions\": 18}, \"files\": [{\"sha\": \"9a2b9e85687b633fcb4564ff299cd85f738c358e\", \"filename\": \"print-domain.c\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 18, \"changes\": 37, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/print-domain.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/print-domain.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-domain.c?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -151,15 +151,14 @@ ns_nprint(netdissect_options *ndo,\\n \\tregister u_int i, l;\\n \\tregister const u_char *rp = NULL;\\n \\tregister int compress = 0;\\n-\\tint chars_processed;\\n \\tint elt;\\n-\\tint data_size = ndo->ndo_snapend - bp;\\n+\\tu_int offset, max_offset;\\n \\n \\tif ((l = labellen(ndo, cp)) == (u_int)-1)\\n \\t\\treturn(NULL);\\n \\tif (!ND_TTEST2(*cp, 1))\\n \\t\\treturn(NULL);\\n-\\tchars_processed = 1;\\n+\\tmax_offset = (u_int)(cp - bp);\\n \\tif (((i = *cp++) & INDIR_MASK) != INDIR_MASK) {\\n \\t\\tcompress = 0;\\n \\t\\trp = cp + l;\\n@@ -174,24 +173,28 @@ ns_nprint(netdissect_options *ndo,\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tif (!ND_TTEST2(*cp, 1))\\n \\t\\t\\t\\t\\treturn(NULL);\\n-\\t\\t\\t\\tcp = bp + (((i << 8) | *cp) & 0x3fff);\\n+\\t\\t\\t\\toffset = (((i << 8) | *cp) & 0x3fff);\\n+\\t\\t\\t\\t/*\\n+\\t\\t\\t\\t * This must move backwards in the packet.\\n+\\t\\t\\t\\t * No RFC explicitly says that, but BIND's\\n+\\t\\t\\t\\t * name decompression code requires it,\\n+\\t\\t\\t\\t * as a way of preventing infinite loops\\n+\\t\\t\\t\\t * and other bad behavior, and it's probably\\n+\\t\\t\\t\\t * what was intended (compress by pointing\\n+\\t\\t\\t\\t * to domain name suffixes already seen in\\n+\\t\\t\\t\\t * the packet).\\n+\\t\\t\\t\\t */\\n+\\t\\t\\t\\tif (offset >= max_offset) {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"<BAD PTR>\\\"));\\n+\\t\\t\\t\\t\\treturn(NULL);\\n+\\t\\t\\t\\t}\\n+\\t\\t\\t\\tmax_offset = offset;\\n+\\t\\t\\t\\tcp = bp + offset;\\n \\t\\t\\t\\tif ((l = labellen(ndo, cp)) == (u_int)-1)\\n \\t\\t\\t\\t\\treturn(NULL);\\n \\t\\t\\t\\tif (!ND_TTEST2(*cp, 1))\\n \\t\\t\\t\\t\\treturn(NULL);\\n \\t\\t\\t\\ti = *cp++;\\n-\\t\\t\\t\\tchars_processed++;\\n-\\n-\\t\\t\\t\\t/*\\n-\\t\\t\\t\\t * If we've looked at every character in\\n-\\t\\t\\t\\t * the message, this pointer will make\\n-\\t\\t\\t\\t * us look at some character again,\\n-\\t\\t\\t\\t * which means we're looping.\\n-\\t\\t\\t\\t */\\n-\\t\\t\\t\\tif (chars_processed >= data_size) {\\n-\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"<LOOP>\\\"));\\n-\\t\\t\\t\\t\\treturn (NULL);\\n-\\t\\t\\t\\t}\\n \\t\\t\\t\\tcontinue;\\n \\t\\t\\t}\\n \\t\\t\\tif ((i & INDIR_MASK) == EDNS0_MASK) {\\n@@ -212,14 +215,12 @@ ns_nprint(netdissect_options *ndo,\\n \\t\\t\\t}\\n \\n \\t\\t\\tcp += l;\\n-\\t\\t\\tchars_processed += l;\\n \\t\\t\\tND_PRINT((ndo, \\\".\\\"));\\n \\t\\t\\tif ((l = labellen(ndo, cp)) == (u_int)-1)\\n \\t\\t\\t\\treturn(NULL);\\n \\t\\t\\tif (!ND_TTEST2(*cp, 1))\\n \\t\\t\\t\\treturn(NULL);\\n \\t\\t\\ti = *cp++;\\n-\\t\\t\\tchars_processed++;\\n \\t\\t\\tif (!compress)\\n \\t\\t\\t\\trp += l + 1;\\n \\t\\t}\"}, {\"sha\": \"0ddc63e39a8fd53584e1ed60a8ef7b70967aeb6b\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -474,6 +474,7 @@ zephyr-oobr\\t\\tzephyr-oobr.pcap\\t\\tzephyr-oobr.out\\t\\t-vvv -e\\n isakmp-no-none-np\\tisakmp-no-none-np.pcap\\t\\tisakmp-no-none-np.out\\t-vvv -e\\n telnet-iac-check-oobr\\ttelnet-iac-check-oobr.pcap\\ttelnet-iac-check-oobr.out\\t-vvv -e\\n resp_4_infiniteloop\\tresp_4_infiniteloop.pcap\\tresp_4_infiniteloop.out\\t-vvv -e\\n+dns_fwdptr\\t\\tdns_fwdptr.pcap\\t\\t\\tdns_fwdptr.out\\t\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\\n@@ -483,3 +484,11 @@ rtp-seg-fault-2  rtp-seg-fault-2.pcap  rtp-seg-fault-2.out  -v -T rtp\\n # NFS tests\\n # fuzzed pcap\\n nfs-seg-fault-1  nfs-seg-fault-1.pcap  nfs-seg-fault-1.out\\n+\\n+# DNS infinite loop tests\\n+#\\n+# See http://marc.info/?l=tcpdump-workers&m=95552439022555\\n+#\\n+dns-zlip-1\\t\\tdns-zlip-1.pcap\\t\\tdns-zlip-1.out\\n+dns-zlip-2\\t\\tdns-zlip-2.pcap\\t\\tdns-zlip-2.out\\n+dns-zlip-3\\t\\tdns-zlip-3.pcap\\t\\tdns-zlip-3.out\"}, {\"sha\": \"ce12748da260f4da98145cc6a5b34552a5facaad\", \"filename\": \"tests/dns-zlip-1.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-1.out?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -0,0 +1 @@\\n+IP 10.0.0.1.1024 > 146.84.28.88.53: 60777 Type49159 (Class 49168)? <BAD PTR>[|domain]\"}, {\"sha\": \"4ec844c0fc9fd0572e10b1cb91a871e49ce2a80b\", \"filename\": \"tests/dns-zlip-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-1.pcap?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\"}, {\"sha\": \"dbabefbfc105674270fcdf9122a4b65eb43a786d\", \"filename\": \"tests/dns-zlip-2.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-2.out?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -0,0 +1 @@\\n+IP 10.0.0.1.1024 > 146.84.28.88.53: 18992 Type49164 (Class 49168)? <BAD PTR>[|domain]\"}, {\"sha\": \"5f74f226499430dd893fb19b5e3135b491e50385\", \"filename\": \"tests/dns-zlip-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-2.pcap?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\"}, {\"sha\": \"beb173045bbcafa1beb265bd4000203493dd7a41\", \"filename\": \"tests/dns-zlip-3.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-3.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-3.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-3.out?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -0,0 +1 @@\\n+IP 10.0.0.1.1024 > 146.84.28.88.53: 65483 Type49164 (Class 49164)? thisleetostringwillcrashyourlittlenameserverforsurehahahahahah.<BAD PTR>[|domain]\"}, {\"sha\": \"c0c076a636551554f6553ebe6fe214f0e5202074\", \"filename\": \"tests/dns-zlip-3.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-3.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns-zlip-3.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns-zlip-3.pcap?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\"}, {\"sha\": \"4a37b7fb371e6740edb3a792722e0d0f1eb002d9\", \"filename\": \"tests/dns_fwdptr.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns_fwdptr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns_fwdptr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns_fwdptr.out?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\", \"patch\": \"@@ -0,0 +1,2 @@\\n+be:af:ca:ce:ff:ff > de:ad:be:ef:00:01, ethertype IPv4 (0x0800), length 63207: (tos 0x0, ttl 128, id 36039, offset 0, flags [none], proto UDP (17), length 63193)\\n+    156.118.17.235.53 > 156.118.27.229.500: [udp sum ok] 51584 zoneRef NoChange*|$ [64259q] q: Type507 (Class 769)? M-{.^AM-{^C.M-{.^AM-{^C.M-{.^AM-{^C.M-{.^AM-{^C.M-{.^AM-{ .M-{^C^A.<BAD PTR>[|domain]\"}, {\"sha\": \"67a8461197684db8a1fc5658aed7a5db3d077af1\", \"filename\": \"tests/dns_fwdptr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns_fwdptr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3a76fd7c95fced2c2f8c8148a9055c3a542eff29/tests%2Fdns_fwdptr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdns_fwdptr.pcap?ref=3a76fd7c95fced2c2f8c8148a9055c3a542eff29\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzNiMzIwMjlkYjM1NGNiYzg3NTEyNzg2OWQ5YjEyYTlhZGRjNzViNTAi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3b32029db354cbc875127869d9b12a9addc75b50", "content": "{\"sha\": \"3b32029db354cbc875127869d9b12a9addc75b50\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjozYjMyMDI5ZGIzNTRjYmM4NzUxMjc4NjlkOWIxMmE5YWRkYzc1YjUw\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-13T18:26:49Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12999/IS-IS: Add a missing length check.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd tests using the capture files supplied by the reporter(s).\", \"tree\": {\"sha\": \"06db918904ddbe783c9325f4fe025615ba64562e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/06db918904ddbe783c9325f4fe025615ba64562e\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/3b32029db354cbc875127869d9b12a9addc75b50\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3b32029db354cbc875127869d9b12a9addc75b50\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3b32029db354cbc875127869d9b12a9addc75b50\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3b32029db354cbc875127869d9b12a9addc75b50/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"777edc563aacdaff66a0b829cecd2ccb09a10404\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/777edc563aacdaff66a0b829cecd2ccb09a10404\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/777edc563aacdaff66a0b829cecd2ccb09a10404\"}], \"stats\": {\"total\": 49916, \"additions\": 49916, \"deletions\": 0}, \"files\": [{\"sha\": \"9d66d0f7bb047968333f108683408660007a790c\", \"filename\": \"print-isoclns.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/print-isoclns.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/print-isoclns.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isoclns.c?ref=3b32029db354cbc875127869d9b12a9addc75b50\", \"patch\": \"@@ -2532,6 +2532,7 @@ isis_print(netdissect_options *ndo,\\n \\t    ND_TCHECK2(*tptr, 1);\\n \\t    alen = *tptr++;\\n \\t    while (tmp && alen < tmp) {\\n+\\t        ND_TCHECK2(*tptr, alen);\\n \\t\\tND_PRINT((ndo, \\\"\\\\n\\\\t      Area address (length: %u): %s\\\",\\n                        alen,\\n                        isonsap_string(ndo, tptr, alen)));\"}, {\"sha\": \"4c70fe2108c48178ada357c3ae12fb02bdcc1155\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=3b32029db354cbc875127869d9b12a9addc75b50\", \"patch\": \"@@ -476,6 +476,8 @@ isakmp-no-none-np\\tisakmp-no-none-np.pcap\\t\\tisakmp-no-none-np.out\\t-vvv -e\\n telnet-iac-check-oobr\\ttelnet-iac-check-oobr.pcap\\ttelnet-iac-check-oobr.out\\t-vvv -e\\n resp_4_infiniteloop\\tresp_4_infiniteloop.pcap\\tresp_4_infiniteloop.out\\t-vvv -e\\n dns_fwdptr\\t\\tdns_fwdptr.pcap\\t\\t\\tdns_fwdptr.out\\t\\t-vvv -e\\n+isis-areaaddr-oobr-1\\tisis-areaaddr-oobr-1.pcap\\tisis-areaaddr-oobr-1.out\\t\\t-vvv -e\\n+isis-areaaddr-oobr-2\\tisis-areaaddr-oobr-2.pcap\\tisis-areaaddr-oobr-2.out\\t\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"180ae20601ea251cc0fb30da67c20cc7d9b508b0\", \"filename\": \"tests/isis-areaaddr-oobr-1.out\", \"status\": \"added\", \"additions\": 37127, \"deletions\": 0, \"changes\": 37127, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-areaaddr-oobr-1.out?ref=3b32029db354cbc875127869d9b12a9addc75b50\"}, {\"sha\": \"7b1b893bc29a4c26fdfffd43aa80585d60042fbd\", \"filename\": \"tests/isis-areaaddr-oobr-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-areaaddr-oobr-1.pcap?ref=3b32029db354cbc875127869d9b12a9addc75b50\"}, {\"sha\": \"367ffb20da0d0e6e3a7a43a66d2a7e83d3140005\", \"filename\": \"tests/isis-areaaddr-oobr-2.out\", \"status\": \"added\", \"additions\": 12786, \"deletions\": 0, \"changes\": 12786, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-areaaddr-oobr-2.out?ref=3b32029db354cbc875127869d9b12a9addc75b50\"}, {\"sha\": \"906941dc8f6e9f9bf9f974cff84ce0217c7b6d3a\", \"filename\": \"tests/isis-areaaddr-oobr-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3b32029db354cbc875127869d9b12a9addc75b50/tests%2Fisis-areaaddr-oobr-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-areaaddr-oobr-2.pcap?ref=3b32029db354cbc875127869d9b12a9addc75b50\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzk3OWRjZWZkN2IyNTllOWUyMzNmNzdmZTFjNTMxMjc5M2JmZDk0OGYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/979dcefd7b259e9e233f77fe1c5312793bfd948f", "content": "{\"sha\": \"979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo5NzlkY2VmZDdiMjU5ZTllMjMzZjc3ZmUxYzUzMTI3OTNiZmQ5NDhm\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-13T18:38:04Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12998/IS-IS: Check for 2 bytes if we're going to fetch 2 bytes.\\n\\nProbably a copy-and-pasteo.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"2a39a9dc9745489cc9f59b6dd7380fdb6cba79b8\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/2a39a9dc9745489cc9f59b6dd7380fdb6cba79b8\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/979dcefd7b259e9e233f77fe1c5312793bfd948f/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3b32029db354cbc875127869d9b12a9addc75b50\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3b32029db354cbc875127869d9b12a9addc75b50\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3b32029db354cbc875127869d9b12a9addc75b50\"}], \"stats\": {\"total\": 10897, \"additions\": 10896, \"deletions\": 1}, \"files\": [{\"sha\": \"1f871603a4babf241ae29cc0ca086e32515762c2\", \"filename\": \"print-isoclns.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/979dcefd7b259e9e233f77fe1c5312793bfd948f/print-isoclns.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/979dcefd7b259e9e233f77fe1c5312793bfd948f/print-isoclns.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isoclns.c?ref=979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"patch\": \"@@ -2038,7 +2038,7 @@ isis_print_extd_ip_reach(netdissect_options *ndo,\\n         }\\n         processed++;\\n     } else if (afi == AF_INET6) {\\n-        if (!ND_TTEST2(*tptr, 1)) /* fetch status & prefix_len byte */\\n+        if (!ND_TTEST2(*tptr, 2)) /* fetch status & prefix_len byte */\\n             return (0);\\n         status_byte=*(tptr++);\\n         bit_length=*(tptr++);\"}, {\"sha\": \"5633053bfc99d5607f6c9bbda7b58c6afe0cabd7\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=979dcefd7b259e9e233f77fe1c5312793bfd948f\", \"patch\": \"@@ -478,6 +478,7 @@ resp_4_infiniteloop\\tresp_4_infiniteloop.pcap\\tresp_4_infiniteloop.out\\t-vvv -e\\n dns_fwdptr\\t\\tdns_fwdptr.pcap\\t\\t\\tdns_fwdptr.out\\t\\t-vvv -e\\n isis-areaaddr-oobr-1\\tisis-areaaddr-oobr-1.pcap\\tisis-areaaddr-oobr-1.out\\t\\t-vvv -e\\n isis-areaaddr-oobr-2\\tisis-areaaddr-oobr-2.pcap\\tisis-areaaddr-oobr-2.out\\t\\t-vvv -e\\n+isis-extd-ipreach-oobr\\tisis-extd-ipreach-oobr.pcap\\tisis-extd-ipreach-oobr.out\\t\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"40555fab98276e4847e9e1dfb5d5cf5b3629cea9\", \"filename\": \"tests/isis-extd-ipreach-oobr.out\", \"status\": \"added\", \"additions\": 10894, \"deletions\": 0, \"changes\": 10894, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2Fisis-extd-ipreach-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2Fisis-extd-ipreach-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-extd-ipreach-oobr.out?ref=979dcefd7b259e9e233f77fe1c5312793bfd948f\"}, {\"sha\": \"bb25b4a89312168ca7b7b36376306653b9595891\", \"filename\": \"tests/isis-extd-ipreach-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2Fisis-extd-ipreach-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/979dcefd7b259e9e233f77fe1c5312793bfd948f/tests%2Fisis-extd-ipreach-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-extd-ipreach-oobr.pcap?ref=979dcefd7b259e9e233f77fe1c5312793bfd948f\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzZmY2E1OGY1ZjljOTY3NDlhNTc1ZjUyZTIwNTk4YWQ0M2Y1YmRmMzAi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6fca58f5f9c96749a575f52e20598ad43f5bdf30", "content": "{\"sha\": \"6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo2ZmNhNThmNWY5Yzk2NzQ5YTU3NWY1MmUyMDU5OGFkNDNmNWJkZjMw\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-13T19:31:25Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-12996/PIMv2: Make sure PIM TLVs have the right length.\\n\\nWe do bounds checks based on the TLV length, so if the TLV's length is\\ntoo short, and we don't check for that, we could end up fetching data\\npast the end of the TLV - including past the length of the captured data\\nin the packet.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd tests using the capture files supplied by the reporter(s).\", \"tree\": {\"sha\": \"7ee8f6b1227ace140c885e77bd2cf7ee5de6e9a4\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/7ee8f6b1227ace140c885e77bd2cf7ee5de6e9a4\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6fca58f5f9c96749a575f52e20598ad43f5bdf30/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"34cec721d39c76be1e0a600829a7b17bdfb832b6\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/34cec721d39c76be1e0a600829a7b17bdfb832b6\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/34cec721d39c76be1e0a600829a7b17bdfb832b6\"}], \"stats\": {\"total\": 51579, \"additions\": 51570, \"deletions\": 9}, \"files\": [{\"sha\": \"ee18d958132e84d3b5e0f5afebc59fac63eb423e\", \"filename\": \"print-pim.c\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 9, \"changes\": 30, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/print-pim.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/print-pim.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-pim.c?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"patch\": \"@@ -730,7 +730,11 @@ pimv2_print(netdissect_options *ndo,\\n \\n \\t\\t\\tswitch (otype) {\\n \\t\\t\\tcase PIMV2_HELLO_OPTION_HOLDTIME:\\n-\\t\\t\\t\\tunsigned_relts_print(ndo, EXTRACT_16BITS(bp));\\n+\\t\\t\\t\\tif (olen != 2) {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"ERROR: Option Length != 2 Bytes (%u)\\\", olen));\\n+\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\tunsigned_relts_print(ndo, EXTRACT_16BITS(bp));\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n \\n \\t\\t\\tcase PIMV2_HELLO_OPTION_LANPRUNEDELAY:\\n@@ -764,17 +768,25 @@ pimv2_print(netdissect_options *ndo,\\n \\t\\t\\t\\tbreak;\\n \\n \\t\\t\\tcase PIMV2_HELLO_OPTION_GENID:\\n-\\t\\t\\t\\tND_PRINT((ndo, \\\"0x%08x\\\", EXTRACT_32BITS(bp)));\\n+\\t\\t\\t\\tif (olen != 4) {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"ERROR: Option Length != 4 Bytes (%u)\\\", olen));\\n+\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"0x%08x\\\", EXTRACT_32BITS(bp)));\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n \\n \\t\\t\\tcase PIMV2_HELLO_OPTION_REFRESH_CAP:\\n-\\t\\t\\t\\tND_PRINT((ndo, \\\"v%d\\\", *bp));\\n-\\t\\t\\t\\tif (*(bp+1) != 0) {\\n-\\t\\t\\t\\t\\tND_PRINT((ndo, \\\", interval \\\"));\\n-\\t\\t\\t\\t\\tunsigned_relts_print(ndo, *(bp+1));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tif (EXTRACT_16BITS(bp+2) != 0) {\\n-\\t\\t\\t\\t\\tND_PRINT((ndo, \\\" ?0x%04x?\\\", EXTRACT_16BITS(bp+2)));\\n+\\t\\t\\t\\tif (olen != 4) {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"ERROR: Option Length != 4 Bytes (%u)\\\", olen));\\n+\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\tND_PRINT((ndo, \\\"v%d\\\", *bp));\\n+\\t\\t\\t\\t\\tif (*(bp+1) != 0) {\\n+\\t\\t\\t\\t\\t\\tND_PRINT((ndo, \\\", interval \\\"));\\n+\\t\\t\\t\\t\\t\\tunsigned_relts_print(ndo, *(bp+1));\\n+\\t\\t\\t\\t\\t}\\n+\\t\\t\\t\\t\\tif (EXTRACT_16BITS(bp+2) != 0) {\\n+\\t\\t\\t\\t\\t\\tND_PRINT((ndo, \\\" ?0x%04x?\\\", EXTRACT_16BITS(bp+2)));\\n+\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n \"}, {\"sha\": \"eaaeae1bddff54c6648701ff4199a3f834205514\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\", \"patch\": \"@@ -481,6 +481,10 @@ isis-areaaddr-oobr-2\\tisis-areaaddr-oobr-2.pcap\\tisis-areaaddr-oobr-2.out\\t\\t-vvv -e\\n isis-extd-ipreach-oobr\\tisis-extd-ipreach-oobr.pcap\\tisis-extd-ipreach-oobr.out\\t\\t-vvv -e\\n lldp-infinite-loop-1\\tlldp-infinite-loop-1.pcap\\tlldp-infinite-loop-1.out\\t\\t-vvv -e\\n lldp-infinite-loop-2\\tlldp-infinite-loop-2.pcap\\tlldp-infinite-loop-2.out\\t\\t-vvv -e\\n+pimv2-oobr-1\\t\\tpimv2-oobr-1.pcap\\t\\tpimv2-oobr-1.out\\t\\t-vvv -e\\n+pimv2-oobr-2\\t\\tpimv2-oobr-2.pcap\\t\\tpimv2-oobr-2.out\\t\\t-vvv -e\\n+pimv2-oobr-3\\t\\tpimv2-oobr-3.pcap\\t\\tpimv2-oobr-3.out\\t\\t-vvv -e\\n+pimv2-oobr-4\\t\\tpimv2-oobr-4.pcap\\t\\tpimv2-oobr-4.out\\t\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"6627e9cbef9304da7e2ac42f1d50d2b304aa8eae\", \"filename\": \"tests/pimv2-oobr-1.out\", \"status\": \"added\", \"additions\": 16377, \"deletions\": 0, \"changes\": 16377, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-1.out?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"0d78acc6d9633c11c72879473d9dbb9d54bfa6aa\", \"filename\": \"tests/pimv2-oobr-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-1.pcap?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"87efc1e9b37528a0272aad224ae81cca65c723b5\", \"filename\": \"tests/pimv2-oobr-2.out\", \"status\": \"added\", \"additions\": 21581, \"deletions\": 0, \"changes\": 21581, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-2.out?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"320a277df016baab2bbd6ddfe5a9ae9f2b537735\", \"filename\": \"tests/pimv2-oobr-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-2.pcap?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"6ea4ec3d26867796ce8fe3bd31f5671fa90a74e5\", \"filename\": \"tests/pimv2-oobr-3.out\", \"status\": \"added\", \"additions\": 7674, \"deletions\": 0, \"changes\": 7674, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-3.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-3.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-3.out?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"d0aba55b137262f5786bcb3aad340b8cdf9fc642\", \"filename\": \"tests/pimv2-oobr-3.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-3.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-3.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-3.pcap?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"ba367f813aa614651dc1e3d2f6346cec8f4c2907\", \"filename\": \"tests/pimv2-oobr-4.out\", \"status\": \"added\", \"additions\": 5913, \"deletions\": 0, \"changes\": 5913, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-4.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-4.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-4.out?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}, {\"sha\": \"b3590a2363058c3a3876bac790181531e3d20af7\", \"filename\": \"tests/pimv2-oobr-4.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-4.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/6fca58f5f9c96749a575f52e20598ad43f5bdf30/tests%2Fpimv2-oobr-4.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpimv2-oobr-4.pcap?ref=6fca58f5f9c96749a575f52e20598ad43f5bdf30\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzdhOTIzNDQ3ZmQ0OWEwNjlhMGZkM2I2YzM1NDc0MzhhYjVlZTIxMjMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7a923447fd49a069a0fd3b6c3547438ab5ee2123", "content": "{\"sha\": \"7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo3YTkyMzQ0N2ZkNDlhMDY5YTBmZDNiNmMzNTQ3NDM4YWI1ZWUyMTIz\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-19T21:56:12Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13001/NFS: Don't copy more data than is in the file handle.\\n\\nAlso, put the buffer on the stack; no reason to make it static.  (65\\nbytes isn't a lot.)\\n\\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"2381eef1ccb894a1abf5eb81bc816593cc28347e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/2381eef1ccb894a1abf5eb81bc816593cc28347e\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7a923447fd49a069a0fd3b6c3547438ab5ee2123/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8512734883227c11568bb35da1d48b9f8466f43f\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8512734883227c11568bb35da1d48b9f8466f43f\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/8512734883227c11568bb35da1d48b9f8466f43f\"}], \"stats\": {\"total\": 115, \"additions\": 112, \"deletions\": 3}, \"files\": [{\"sha\": \"f3e8666e75f81cfc36b6ade10fbf66ca91af4ef3\", \"filename\": \"print-nfs.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 3, \"changes\": 10, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7a923447fd49a069a0fd3b6c3547438ab5ee2123/print-nfs.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7a923447fd49a069a0fd3b6c3547438ab5ee2123/print-nfs.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-nfs.c?ref=7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"patch\": \"@@ -807,11 +807,15 @@ nfs_printfh(netdissect_options *ndo,\\n \\n \\tif (sfsname) {\\n \\t\\t/* file system ID is ASCII, not numeric, for this server OS */\\n-\\t\\tstatic char temp[NFSX_V3FHMAX+1];\\n+\\t\\tchar temp[NFSX_V3FHMAX+1];\\n+\\t\\tu_int stringlen;\\n \\n \\t\\t/* Make sure string is null-terminated */\\n-\\t\\tstrncpy(temp, sfsname, NFSX_V3FHMAX);\\n-\\t\\ttemp[sizeof(temp) - 1] = '\\\\0';\\n+\\t\\tstringlen = len;\\n+\\t\\tif (stringlen > NFSX_V3FHMAX)\\n+\\t\\t\\tstringlen = NFSX_V3FHMAX;\\n+\\t\\tstrncpy(temp, sfsname, stringlen);\\n+\\t\\ttemp[stringlen] = '\\\\0';\\n \\t\\t/* Remove trailing spaces */\\n \\t\\tspacep = strchr(temp, ' ');\\n \\t\\tif (spacep)\"}, {\"sha\": \"5d164a6bf293ec6815940da11c43a4f0aad08cd5\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"patch\": \"@@ -458,6 +458,7 @@ hoobr_parse_field\\thoobr_parse_field.pcap\\t\\thoobr_parse_field.out\\n hoobr_chdlc_print\\thoobr_chdlc_print.pcap\\t\\thoobr_chdlc_print.out\\n hoobr_lookup_nsap\\thoobr_lookup_nsap.pcap\\t\\thoobr_lookup_nsap.out\\n hoobr_rt6_print\\t\\thoobr_rt6_print.pcap\\t\\thoobr_rt6_print.out\\n+hoobr_nfs_printfh\\thoobr_nfs_printfh.pcap\\t\\thoobr_nfs_printfh.out\\n \\n # bad packets from Wilfried Kirsch\\n slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\"}, {\"sha\": \"8082b86b3edf74ea04a8282cca4ea225cca40126\", \"filename\": \"tests/hoobr_nfs_printfh.out\", \"status\": \"added\", \"additions\": 104, \"deletions\": 0, \"changes\": 104, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2Fhoobr_nfs_printfh.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2Fhoobr_nfs_printfh.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_nfs_printfh.out?ref=7a923447fd49a069a0fd3b6c3547438ab5ee2123\", \"patch\": \"@@ -0,0 +1,104 @@\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00d0:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030                      00000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00d0:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030                                0000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030                                0000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030 3030 3030 3030 3030            000000000000\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0040:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0050:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0060:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0070:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0080:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0090:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00a0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00b0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00c0:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x00d0:  3030 3030 3030 3030 3030 3030            000000000000\\n+IP 48.48.48.48.12336 > 48.48.48.48.2049: Flags [.U], seq 808464432:808476728, ack 808464432, win 12336, urg 12336, length 12296: NFS request xid 808464432 12292 readlink fh 00000000/808464432\"}, {\"sha\": \"ed9abbe8996ac75693e0fbdf918329083c1501a4\", \"filename\": \"tests/hoobr_nfs_printfh.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2Fhoobr_nfs_printfh.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7a923447fd49a069a0fd3b6c3547438ab5ee2123/tests%2Fhoobr_nfs_printfh.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_nfs_printfh.pcap?ref=7a923447fd49a069a0fd3b6c3547438ab5ee2123\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2E3ZTVmNThmNDAyZTY5MTllYzQ0NGE1Nzk0NmJhZGU3ZGZkNmIxODQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a7e5f58f402e6919ec444a57946bade7dfd6b184", "content": "{\"sha\": \"a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjphN2U1ZjU4ZjQwMmU2OTE5ZWM0NDRhNTc5NDZiYWRlN2RmZDZiMTg0\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-21T21:40:19Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13000/IEEE 802.15.4: Fix bug introduced by previous fix.\\n\\nWe've already advanced the pointer past the PAN ID, if present; it now\\npoints to the address, so don't add 2 to it.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"75ddad84e87bce0e8efd9bc3bf2ef265debb2f7c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/75ddad84e87bce0e8efd9bc3bf2ef265debb2f7c\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a7e5f58f402e6919ec444a57946bade7dfd6b184/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"9be4e0b5938b705e7e36cfcb110a740c6ff0cb97\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/9be4e0b5938b705e7e36cfcb110a740c6ff0cb97\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/9be4e0b5938b705e7e36cfcb110a740c6ff0cb97\"}], \"stats\": {\"total\": 4, \"additions\": 3, \"deletions\": 1}, \"files\": [{\"sha\": \"a7817eb5afda6ccc658492b304b164d04e2a0493\", \"filename\": \"print-802_15_4.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a7e5f58f402e6919ec444a57946bade7dfd6b184/print-802_15_4.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a7e5f58f402e6919ec444a57946bade7dfd6b184/print-802_15_4.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-802_15_4.c?ref=a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"patch\": \"@@ -141,7 +141,7 @@ ieee802_15_4_if_print(netdissect_options *ndo,\\n \\t\\t\\treturn hdrlen;\\n \\t\\t}\\n \\t\\tif (ndo->ndo_vflag)\\n-\\t\\t\\tND_PRINT((ndo,\\\"%04x:%s \\\", panid, le64addr_string(ndo, p + 2)));\\n+\\t\\t\\tND_PRINT((ndo,\\\"%04x:%s \\\", panid, le64addr_string(ndo, p)));\\n \\t\\tp += 8;\\n \\t\\tcaplen -= 8;\\n \\t\\thdrlen += 8;\"}, {\"sha\": \"0e646751c74fde5aa6cb1ef0bf4540b3c63a4b99\", \"filename\": \"tests/802_15_4-data.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2F802_15_4-data.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2F802_15_4-data.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2F802_15_4-data.out?ref=a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"patch\": \"@@ -0,0 +1 @@\\n+IEEE 802.15.4 Data packet seq 01 ab4d:10:05:00:81:00:01:00:01 < [|802.15.4]\"}, {\"sha\": \"4a32784e2bc65303e567f19299cde46bce8fff87\", \"filename\": \"tests/802_15_4-data.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2F802_15_4-data.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2F802_15_4-data.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2F802_15_4-data.pcap?ref=a7e5f58f402e6919ec444a57946bade7dfd6b184\"}, {\"sha\": \"be914a4a9b2642434ddadca8a87fd7e5b37a3af8\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a7e5f58f402e6919ec444a57946bade7dfd6b184/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"patch\": \"@@ -488,6 +488,7 @@ pimv2-oobr-3\\t\\tpimv2-oobr-3.pcap\\t\\tpimv2-oobr-3.out\\t\\t-vvv -e\\n pimv2-oobr-4\\t\\tpimv2-oobr-4.pcap\\t\\tpimv2-oobr-4.out\\t\\t-vvv -e\\n 802_15_4-oobr-1\\t\\t802_15_4-oobr-1.pcap\\t\\t802_15_4-oobr-1.out\\t-vvv -e\\n 802_15_4-oobr-2\\t\\t802_15_4-oobr-2.pcap\\t\\t802_15_4-oobr-2.out\\t-vvv -e\\n+802_15_4-data\\t\\t802_15_4-data.pcap\\t\\t802_15_4-data.out\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzg1MTI3MzQ4ODMyMjdjMTE1NjhiYjM1ZGExZDQ4YjlmODQ2NmY0M2Yi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8512734883227c11568bb35da1d48b9f8466f43f", "content": "{\"sha\": \"8512734883227c11568bb35da1d48b9f8466f43f\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo4NTEyNzM0ODgzMjI3YzExNTY4YmIzNWRhMWQ0OGI5Zjg0NjZmNDNm\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-21T22:10:15Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13000/IEEE 802.15.4: Fix bug introduced two fixes prior.\\n\\nWe've already advanced the pointer past the PAN ID, if present; it now\\npoints to the address, so don't add 2 to it.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"12cd2c5316d242024d6f31c9684e90082e7cef68\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/12cd2c5316d242024d6f31c9684e90082e7cef68\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/8512734883227c11568bb35da1d48b9f8466f43f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8512734883227c11568bb35da1d48b9f8466f43f\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/8512734883227c11568bb35da1d48b9f8466f43f\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8512734883227c11568bb35da1d48b9f8466f43f/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a7e5f58f402e6919ec444a57946bade7dfd6b184\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a7e5f58f402e6919ec444a57946bade7dfd6b184\"}], \"stats\": {\"total\": 4, \"additions\": 3, \"deletions\": 1}, \"files\": [{\"sha\": \"1c77da8af16b7835fbe82109f4d7dc36128b7df4\", \"filename\": \"print-802_15_4.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8512734883227c11568bb35da1d48b9f8466f43f/print-802_15_4.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8512734883227c11568bb35da1d48b9f8466f43f/print-802_15_4.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-802_15_4.c?ref=8512734883227c11568bb35da1d48b9f8466f43f\", \"patch\": \"@@ -122,7 +122,7 @@ ieee802_15_4_if_print(netdissect_options *ndo,\\n \\t\\t\\treturn hdrlen;\\n \\t\\t}\\n \\t\\tif (ndo->ndo_vflag)\\n-\\t\\t\\tND_PRINT((ndo,\\\"%04x:%04x \\\", panid, EXTRACT_LE_16BITS(p + 2)));\\n+\\t\\t\\tND_PRINT((ndo,\\\"%04x:%04x \\\", panid, EXTRACT_LE_16BITS(p)));\\n \\t\\tp += 2;\\n \\t\\tcaplen -= 2;\\n \\t\\thdrlen += 2;\"}, {\"sha\": \"125f46d5c5fd45590c337558ff123dfc0e7c27f8\", \"filename\": \"tests/802_15_4_beacon.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8512734883227c11568bb35da1d48b9f8466f43f/tests%2F802_15_4_beacon.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8512734883227c11568bb35da1d48b9f8466f43f/tests%2F802_15_4_beacon.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2F802_15_4_beacon.out?ref=8512734883227c11568bb35da1d48b9f8466f43f\", \"patch\": \"@@ -0,0 +1 @@\\n+IEEE 802.15.4 Beacon packet seq cd ffab:cdff < [|802.15.4]\"}, {\"sha\": \"9e6aafe1dbec4d718da44607bf4e7dcdc4ed6d3e\", \"filename\": \"tests/802_15_4_beacon.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8512734883227c11568bb35da1d48b9f8466f43f/tests%2F802_15_4_beacon.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8512734883227c11568bb35da1d48b9f8466f43f/tests%2F802_15_4_beacon.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2F802_15_4_beacon.pcap?ref=8512734883227c11568bb35da1d48b9f8466f43f\"}, {\"sha\": \"548af8f30bd79d8d8d06ea8e568a2e0739246830\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8512734883227c11568bb35da1d48b9f8466f43f/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8512734883227c11568bb35da1d48b9f8466f43f/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=8512734883227c11568bb35da1d48b9f8466f43f\", \"patch\": \"@@ -489,6 +489,7 @@ pimv2-oobr-4\\t\\tpimv2-oobr-4.pcap\\t\\tpimv2-oobr-4.out\\t\\t-vvv -e\\n 802_15_4-oobr-1\\t\\t802_15_4-oobr-1.pcap\\t\\t802_15_4-oobr-1.out\\t-vvv -e\\n 802_15_4-oobr-2\\t\\t802_15_4-oobr-2.pcap\\t\\t802_15_4-oobr-2.out\\t-vvv -e\\n 802_15_4-data\\t\\t802_15_4-data.pcap\\t\\t802_15_4-data.out\\t-vvv -e\\n+802_15_4_beacon\\t\\t802_15_4_beacon.pcap\\t\\t802_15_4_beacon.out\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzQyMDczZDU0YzUzYTQ5NmJlNDBhZTg0MTUyYmJmZTJjOTIzYWM3YmMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/42073d54c53a496be40ae84152bbfe2c923ac7bc", "content": "{\"sha\": \"42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo0MjA3M2Q1NGM1M2E0OTZiZTQwYWU4NDE1MmJiZmUyYzkyM2FjN2Jj\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-02-21T22:20:32Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13004/Juniper: Add a bounds check.\\n\\nThis fixes a buffer over-read discovered by Forcepoint's security\\nresearchers Otto Airamo & Antti Levom\\u00e4ki.\\n\\nAdd tests using the capture files supplied by the reporter(s).\", \"tree\": {\"sha\": \"a164320218dcfbb70cfddf0851ef2468d1974e40\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/a164320218dcfbb70cfddf0851ef2468d1974e40\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/42073d54c53a496be40ae84152bbfe2c923ac7bc/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a25211918f2e790c67d859d20ccf8dbb81da1598\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a25211918f2e790c67d859d20ccf8dbb81da1598\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a25211918f2e790c67d859d20ccf8dbb81da1598\"}], \"stats\": {\"total\": 7, \"additions\": 7, \"deletions\": 0}, \"files\": [{\"sha\": \"ff1de9c03d15bf9edf72b93ba2c356e4754b3262\", \"filename\": \"print-juniper.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/print-juniper.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/print-juniper.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-juniper.c?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"patch\": \"@@ -1367,6 +1367,7 @@ juniper_parse_header(netdissect_options *ndo,\\n             if (ndo->ndo_eflag) ND_PRINT((ndo, \\\": \\\")); /* print demarc b/w L2/L3*/\\n \\n \\n+            ND_TCHECK_16BITS(p+l2info->cookie_len);\\n             l2info->proto = EXTRACT_16BITS(p+l2info->cookie_len);\\n             break;\\n         }\"}, {\"sha\": \"c0a3f8dd89d0a5fcdd2d777ed6521d9f3a63e9b0\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"patch\": \"@@ -493,6 +493,8 @@ pimv2-oobr-4\\t\\tpimv2-oobr-4.pcap\\t\\tpimv2-oobr-4.out\\t\\t-vvv -e\\n 802_15_4-data\\t\\t802_15_4-data.pcap\\t\\t802_15_4-data.out\\t-vvv -e\\n 802_15_4_beacon\\t\\t802_15_4_beacon.pcap\\t\\t802_15_4_beacon.out\\t-vvv -e\\n lmpv1_busyloop\\t\\tlmpv1_busyloop.pcap\\t\\tlmpv1_busyloop.out\\t-vvv -e\\n+juniper_atm1\\t\\tjuniper_atm1.pcap\\t\\tjuniper_atm1.out\\t-vvv -e\\n+juniper_es\\t\\tjuniper_es.pcap\\t\\t\\tjuniper_es.out\\t-vvv -e\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"27f99bd00779ec2c8ee1ea6e1f1f4f2481aec6f0\", \"filename\": \"tests/juniper_atm1.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_atm1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_atm1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fjuniper_atm1.out?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"patch\": \"@@ -0,0 +1,2 @@\\n+Out \\n+\\tJuniper PCAP Flags [none]ATM1-PIC, cookie-len 4, cookie 0x30303030: [|juniper_hdr], length 808464432\"}, {\"sha\": \"fc29d299a7b00c2a1c6793594570e5a2f3fbe1fb\", \"filename\": \"tests/juniper_atm1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_atm1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_atm1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fjuniper_atm1.pcap?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\"}, {\"sha\": \"e344d70edd03b858500737829829238beb987004\", \"filename\": \"tests/juniper_es.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_es.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_es.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fjuniper_es.out?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\", \"patch\": \"@@ -0,0 +1,2 @@\\n+Out \\n+\\tJuniper PCAP Flags [none]ES-PIC, cookie-len 0: [|juniper_hdr], length 808464432\"}, {\"sha\": \"8f28aa1fa8a729a77a958df847f9392de4062257\", \"filename\": \"tests/juniper_es.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_es.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/42073d54c53a496be40ae84152bbfe2c923ac7bc/tests%2Fjuniper_es.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fjuniper_es.pcap?ref=42073d54c53a496be40ae84152bbfe2c923ac7bc\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2I0NWE5YTE2N2NhNmEzZWYyNzUyYWU5ZDQ4ZDU2YWMxNGIwMDFiZmQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd", "content": "{\"sha\": \"b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpiNDVhOWExNjdjYTZhM2VmMjc1MmFlOWQ0OGQ1NmFjMTRiMDAxYmZk\", \"commit\": {\"author\": {\"name\": \"Francois-Xavier Le Bail\", \"email\": \"devel.fx.lebail@orange.fr\", \"date\": \"2017-02-23T15:50:18Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13005/NFS: Add two bounds checks before fetching data\\n\\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"361d9e01637e7b511e937f4c0e62c35d04d8cf0b\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/361d9e01637e7b511e937f4c0e62c35d04d8cf0b\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/comments\", \"author\": {\"login\": \"fxlb\", \"id\": 2846004, \"node_id\": \"MDQ6VXNlcjI4NDYwMDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2846004?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fxlb\", \"html_url\": \"https://github.com/fxlb\", \"followers_url\": \"https://api.github.com/users/fxlb/followers\", \"following_url\": \"https://api.github.com/users/fxlb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fxlb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fxlb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fxlb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fxlb/orgs\", \"repos_url\": \"https://api.github.com/users/fxlb/repos\", \"events_url\": \"https://api.github.com/users/fxlb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fxlb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"35d146b7a66496d72cdeb95ccb33ab80a265ce90\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/35d146b7a66496d72cdeb95ccb33ab80a265ce90\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/35d146b7a66496d72cdeb95ccb33ab80a265ce90\"}], \"stats\": {\"total\": 46, \"additions\": 46, \"deletions\": 0}, \"files\": [{\"sha\": \"4fd9c3f7dc5e4253e8eab6933751489c5e9afa24\", \"filename\": \"print-nfs.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/print-nfs.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/print-nfs.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-nfs.c?ref=b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"patch\": \"@@ -899,7 +899,11 @@ xid_map_enter(netdissect_options *ndo,\\n \\t\\tUNALIGNED_MEMCPY(&xmep->client, &ip6->ip6_src, sizeof(ip6->ip6_src));\\n \\t\\tUNALIGNED_MEMCPY(&xmep->server, &ip6->ip6_dst, sizeof(ip6->ip6_dst));\\n \\t}\\n+\\tif (!ND_TTEST(rp->rm_call.cb_proc))\\n+\\t\\treturn (0);\\n \\txmep->proc = EXTRACT_32BITS(&rp->rm_call.cb_proc);\\n+\\tif (!ND_TTEST(rp->rm_call.cb_vers))\\n+\\t\\treturn (0);\\n \\txmep->vers = EXTRACT_32BITS(&rp->rm_call.cb_vers);\\n \\treturn (1);\\n }\"}, {\"sha\": \"cf6d2a6832e153a043f818b78485a1d88de9bb21\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"patch\": \"@@ -461,6 +461,7 @@ hoobr_lookup_nsap\\thoobr_lookup_nsap.pcap\\t\\thoobr_lookup_nsap.out\\n hoobr_rt6_print\\t\\thoobr_rt6_print.pcap\\t\\thoobr_rt6_print.out\\n hoobr_nfs_printfh\\thoobr_nfs_printfh.pcap\\t\\thoobr_nfs_printfh.out\\n hoobr_aodv_extension\\thoobr_aodv_extension.pcap\\thoobr_aodv_extension.out\\n+hoobr_nfs_xid_map_enter hoobr_nfs_xid_map_enter.pcap    hoobr_nfs_xid_map_enter.out\\n \\n # bad packets from Wilfried Kirsch\\n slip-bad-direction\\tslip-bad-direction.pcap\\t\\tslip-bad-direction.out\\t-ve\"}, {\"sha\": \"0629063b282f5d5f1842036d6b989be105b0f624\", \"filename\": \"tests/hoobr_nfs_xid_map_enter.out\", \"status\": \"added\", \"additions\": 41, \"deletions\": 0, \"changes\": 41, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2Fhoobr_nfs_xid_map_enter.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2Fhoobr_nfs_xid_map_enter.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_nfs_xid_map_enter.out?ref=b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\", \"patch\": \"@@ -0,0 +1,41 @@\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+30:30:30:30:30:30 > 30:30:30:30:30:30, ethertype Unknown (0x3030), length 808464432: \\n+\\t0x0000:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0010:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0020:  3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\\n+\\t0x0030:  30                                       0\\n+IP 48.48.48.48.12336 > 48.48.48.48.2049: NFS request xid 808464432 12308 [|nfs]\"}, {\"sha\": \"7f94730b1f17be256baf7540373074897b98c80b\", \"filename\": \"tests/hoobr_nfs_xid_map_enter.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2Fhoobr_nfs_xid_map_enter.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd/tests%2Fhoobr_nfs_xid_map_enter.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhoobr_nfs_xid_map_enter.pcap?ref=b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2NhMzM2MTk4ZThiZWJjY2MxODUwMmRlMjc2NzJmZGJkNmViMzQ4NTYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ca336198e8bebccc18502de27672fdbd6eb34856", "content": "{\"sha\": \"ca336198e8bebccc18502de27672fdbd6eb34856\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpjYTMzNjE5OGU4YmViY2NjMTg1MDJkZTI3NjcyZmRiZDZlYjM0ODU2\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-06T04:21:48Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13007/PKTAP: Pass a properly updated struct pcap_pkthdr to the sub-dissector.\\n\\nThe sub-dissector expects that the length and captured length will\\nreflect the actual remaining data in the packet, not the raw amount\\nincluding the PKTAP header; pass an updated header, just as we do for\\nPPI.\\n\\nThis fixes a buffer over-read discovered by Yannick Formaggio.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"bbe918f6b617e9bab0ce1e7c40bd9f53c4224740\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/bbe918f6b617e9bab0ce1e7c40bd9f53c4224740\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/ca336198e8bebccc18502de27672fdbd6eb34856\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ca336198e8bebccc18502de27672fdbd6eb34856\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/ca336198e8bebccc18502de27672fdbd6eb34856\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ca336198e8bebccc18502de27672fdbd6eb34856/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cc4a7391c616be7a64ed65742ef9ed3f106eb165\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/cc4a7391c616be7a64ed65742ef9ed3f106eb165\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/cc4a7391c616be7a64ed65742ef9ed3f106eb165\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"4a295fdf6328582d5bf2f25ceb48324d05272eb3\", \"filename\": \"print-pktap.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ca336198e8bebccc18502de27672fdbd6eb34856/print-pktap.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ca336198e8bebccc18502de27672fdbd6eb34856/print-pktap.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-pktap.c?ref=ca336198e8bebccc18502de27672fdbd6eb34856\", \"patch\": \"@@ -104,6 +104,7 @@ pktap_if_print(netdissect_options *ndo,\\n \\tu_int length = h->len;\\n \\tif_printer printer;\\n \\tconst pktap_header_t *hdr;\\n+\\tstruct pcap_pkthdr nhdr;\\n \\n \\tif (caplen < sizeof(pktap_header_t) || length < sizeof(pktap_header_t)) {\\n \\t\\tND_PRINT((ndo, \\\"[|pktap]\\\"));\\n@@ -144,7 +145,10 @@ pktap_if_print(netdissect_options *ndo,\\n \\n \\tcase PKT_REC_PACKET:\\n \\t\\tif ((printer = lookup_printer(dlt)) != NULL) {\\n-\\t\\t\\thdrlen += printer(ndo, h, p);\\n+\\t\\t\\tnhdr = *h;\\n+\\t\\t\\tnhdr.caplen = caplen;\\n+\\t\\t\\tnhdr.len = length;\\n+\\t\\t\\thdrlen += printer(ndo, &nhdr, p);\\n \\t\\t} else {\\n \\t\\t\\tif (!ndo->ndo_eflag)\\n \\t\\t\\t\\tpktap_header_print(ndo, (const u_char *)hdr,\"}, {\"sha\": \"5f18a05745379bd4b105883c914b4b04488e2b28\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=ca336198e8bebccc18502de27672fdbd6eb34856\", \"patch\": \"@@ -502,6 +502,7 @@ juniper_es\\t\\tjuniper_es.pcap\\t\\t\\tjuniper_es.out\\t-vvv -e\\n \\n # bad packets from Yannick Formaggio\\n l2tp-avp-overflow\\tl2tp-avp-overflow.pcap\\t\\tl2tp-avp-overflow.out\\t-v\\n+pktap-heap-overflow\\tpktap-heap-overflow.pcap\\tpktap-heap-overflow.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"e23ed919332b617590db711755afa45d6656452b\", \"filename\": \"tests/pktap-heap-overflow.out\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2Fpktap-heap-overflow.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2Fpktap-heap-overflow.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpktap-heap-overflow.out?ref=ca336198e8bebccc18502de27672fdbd6eb34856\", \"patch\": \"@@ -0,0 +1,3 @@\\n+[|pktap]\\n+[|ppp]\\n+EXIT CODE 00000100\"}, {\"sha\": \"e8b0f216f2fa6724a62aa491cebbe9ccdec56317\", \"filename\": \"tests/pktap-heap-overflow.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2Fpktap-heap-overflow.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/ca336198e8bebccc18502de27672fdbd6eb34856/tests%2Fpktap-heap-overflow.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpktap-heap-overflow.pcap?ref=ca336198e8bebccc18502de27672fdbd6eb34856\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzVlZGY0MDVkN2VkOWZjOTJmNGY0M2U4YTNkNDRiYWE0YzYzODc1NjIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562", "content": "{\"sha\": \"5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo1ZWRmNDA1ZDdlZDlmYzkyZjRmNDNlOGEzZDQ0YmFhNGM2Mzg3NTYy\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-06T17:42:49Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13008/IEEE 802.11: Fix TIM bitmap copy to copy from p + offset.\\n\\noffset has already been advanced to point to the bitmap; we shouldn't\\nadd the amount to advance again.\\n\\nThis fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.\\n\\nAdd a test using the capture file supplied by the reporter(s).\\n\\nWhile we're at it, remove some redundant tests - we've already checked,\\nbefore the case statement, whether we have captured the entire\\ninformation element and whether the entire information element is\\npresent in the on-the-wire packet; in the cases for particular IEs, we\\nonly need to make sure we don't go past the end of the IE.\", \"tree\": {\"sha\": \"539aef628eb200ba225ddaa9b984041ea9626df5\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/539aef628eb200ba225ddaa9b984041ea9626df5\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ca336198e8bebccc18502de27672fdbd6eb34856\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/ca336198e8bebccc18502de27672fdbd6eb34856\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/ca336198e8bebccc18502de27672fdbd6eb34856\"}], \"stats\": {\"total\": 16, \"additions\": 3, \"deletions\": 13}, \"files\": [{\"sha\": \"d8bf039de1ab0fff45654840a761825e921a4509\", \"filename\": \"print-802_11.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 13, \"changes\": 14, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/print-802_11.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/print-802_11.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-802_11.c?ref=5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"patch\": \"@@ -1039,10 +1039,6 @@ parse_elements(netdissect_options *ndo,\\n \\t\\t\\tif (ssid.length != 0) {\\n \\t\\t\\t\\tif (ssid.length > sizeof(ssid.ssid) - 1)\\n \\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (!ND_TTEST2(*(p + offset), ssid.length))\\n-\\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (length < ssid.length)\\n-\\t\\t\\t\\t\\treturn 0;\\n \\t\\t\\t\\tmemcpy(&ssid.ssid, p + offset, ssid.length);\\n \\t\\t\\t\\toffset += ssid.length;\\n \\t\\t\\t\\tlength -= ssid.length;\\n@@ -1068,10 +1064,6 @@ parse_elements(netdissect_options *ndo,\\n \\t\\t\\t\\tif (challenge.length >\\n \\t\\t\\t\\t    sizeof(challenge.text) - 1)\\n \\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (!ND_TTEST2(*(p + offset), challenge.length))\\n-\\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (length < challenge.length)\\n-\\t\\t\\t\\t\\treturn 0;\\n \\t\\t\\t\\tmemcpy(&challenge.text, p + offset,\\n \\t\\t\\t\\t    challenge.length);\\n \\t\\t\\t\\toffset += challenge.length;\\n@@ -1097,10 +1089,6 @@ parse_elements(netdissect_options *ndo,\\n \\t\\t\\tif (rates.length != 0) {\\n \\t\\t\\t\\tif (rates.length > sizeof rates.rate)\\n \\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (!ND_TTEST2(*(p + offset), rates.length))\\n-\\t\\t\\t\\t\\treturn 0;\\n-\\t\\t\\t\\tif (length < rates.length)\\n-\\t\\t\\t\\t\\treturn 0;\\n \\t\\t\\t\\tmemcpy(&rates.rate, p + offset, rates.length);\\n \\t\\t\\t\\toffset += rates.length;\\n \\t\\t\\t\\tlength -= rates.length;\\n@@ -1189,7 +1177,7 @@ parse_elements(netdissect_options *ndo,\\n \\t\\t\\toffset += 3;\\n \\t\\t\\tlength -= 3;\\n \\n-\\t\\t\\tmemcpy(tim.bitmap, p + offset + 3, tim.length - 3);\\n+\\t\\t\\tmemcpy(tim.bitmap, p + offset, tim.length - 3);\\n \\t\\t\\toffset += tim.length - 3;\\n \\t\\t\\tlength -= tim.length - 3;\\n \\t\\t\\t/*\"}, {\"sha\": \"17ee6fb730abe7e110fd18c2ce878ccdebfb3721\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"patch\": \"@@ -438,6 +438,7 @@ ipv6-rthdr-oobr\\t\\tipv6-rthdr-oobr.pcap\\t\\tipv6-rthdr-oobr.out\\n ieee802.11_tim_ie_oobr\\tieee802.11_tim_ie_oobr.pcap\\tieee802.11_tim_ie_oobr.out\\n decnet-shorthdr-oobr\\tdecnet-shorthdr-oobr.pcap\\tdecnet-shorthdr-oobr.out\\n isakmp-3948-oobr-2\\tisakmp-3948-oobr-2.pcap\\t\\tisakmp-3948-oobr-2.out\\n+ieee802.11_rates_oobr\\tieee802.11_rates_oobr.pcap\\tieee802.11_rates_oobr.out\\n \\n # bad packets from Kamil Frankowicz\\n snmp-heapoverflow-1\\tsnmp-heapoverflow-1.pcap\\tsnmp-heapoverflow-1.out\"}, {\"sha\": \"222eed335ad17cee3168b729e1dae7683a3a1107\", \"filename\": \"tests/ieee802.11_rates_oobr.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2Fieee802.11_rates_oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2Fieee802.11_rates_oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fieee802.11_rates_oobr.out?ref=5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\", \"patch\": \"@@ -0,0 +1 @@\\n+fhset 48 fhpat 48 48dBm signal 48dB signal 48dB noise [|802.11]Beacon IBSS, PRIVACY[|802.11]\"}, {\"sha\": \"bb2819a8c04c245c86fc53e40c77f5de92129dab\", \"filename\": \"tests/ieee802.11_rates_oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2Fieee802.11_rates_oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562/tests%2Fieee802.11_rates_oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fieee802.11_rates_oobr.pcap?ref=5edf405d7ed9fc92f4f43e8a3d44baa4c6387562\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzg1MDllZjAyZWNlYjJiYmI0NzljZWExMGZlNGE3ZWM2Mzk1ZjFhOGIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b", "content": "{\"sha\": \"8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo4NTA5ZWYwMmVjZWIyYmJiNDc5Y2VhMTBmZTRhN2VjNjM5NWYxYThi\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-16T06:45:38Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13012/ICMP: Add a missing bounds check.\\n\\nCheck before fetching the length from the included packet's IPv4 header.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"7f42d9253d1d6bedb5cc55f8db33efe0dc3c994a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/7f42d9253d1d6bedb5cc55f8db33efe0dc3c994a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"9f0730bee3eb65d07b49fd468bc2f269173352fe\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/9f0730bee3eb65d07b49fd468bc2f269173352fe\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/9f0730bee3eb65d07b49fd468bc2f269173352fe\"}], \"stats\": {\"total\": 5, \"additions\": 5, \"deletions\": 0}, \"files\": [{\"sha\": \"366094eff829c08e519017334fdaa656ce40e333\", \"filename\": \"print-icmp.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/print-icmp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/print-icmp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-icmp.c?ref=8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"patch\": \"@@ -581,6 +581,7 @@ icmp_print(netdissect_options *ndo, const u_char *bp, u_int plen, const u_char *\\n \\t\\tND_PRINT((ndo, \\\"\\\\n\\\\t\\\"));\\n \\t\\tip = (const struct ip *)bp;\\n                 snapend_save = ndo->ndo_snapend;\\n+\\t\\tND_TCHECK_16BITS(&ip->ip_len);\\n \\t\\tip_print(ndo, bp, EXTRACT_16BITS(&ip->ip_len));\\n                 ndo->ndo_snapend = snapend_save;\\n \\t}\"}, {\"sha\": \"2fb4d46fa75ecbcaf802a3efba9840abc5b274d4\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"patch\": \"@@ -509,6 +509,7 @@ pktap-heap-overflow\\tpktap-heap-overflow.pcap\\tpktap-heap-overflow.out\\t-v\\n \\n # bad packets from Bhargava Shastry\\n lldp_asan\\t\\tlldp_asan.pcap\\t\\t\\tlldp_asan.out\\t-v\\n+extract_read2_asan\\textract_read2_asan.pcap\\t\\textract_read2_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"d0b72ed0e43400a4f6beb3df8882715166ba14bd\", \"filename\": \"tests/extract_read2_asan.out\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2Fextract_read2_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2Fextract_read2_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fextract_read2_asan.out?ref=8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\", \"patch\": \"@@ -0,0 +1,3 @@\\n+IP (tos 0x14, id 1, offset 0, flags [none], proto ICMP (1), length 512, options (unknown 3,unknown 3,unknown 3 [bad length 3]), bad cksum 3ff (->b4bd)!)\\n+    240.25.0.0 > 3.3.3.3: ICMP source quench, length 484\\n+\\t[|icmp]\"}, {\"sha\": \"d30ee16ddb7607cb48aad91972acea355ec2bcf4\", \"filename\": \"tests/extract_read2_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2Fextract_read2_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b/tests%2Fextract_read2_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fextract_read2_asan.pcap?ref=8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzk4NTEyMjA4MTE2NTc1M2M3NDQyYmQ3ODI0YzQ3M2ViOWZmNTYzMDgi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/985122081165753c7442bd7824c473eb9ff56308", "content": "{\"sha\": \"985122081165753c7442bd7824c473eb9ff56308\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo5ODUxMjIwODExNjU3NTNjNzQ0MmJkNzgyNGM0NzNlYjlmZjU2MzA4\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-16T19:02:20Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13015/EAP: Add more bounds checks.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"5ba5bf7f9d42e871928e4f33174d548e9771d270\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/5ba5bf7f9d42e871928e4f33174d548e9771d270\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/985122081165753c7442bd7824c473eb9ff56308\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/985122081165753c7442bd7824c473eb9ff56308\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/985122081165753c7442bd7824c473eb9ff56308\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/985122081165753c7442bd7824c473eb9ff56308/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cc356512f512e7fa423b3674db4bb31dbe40ffec\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/cc356512f512e7fa423b3674db4bb31dbe40ffec\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/cc356512f512e7fa423b3674db4bb31dbe40ffec\"}], \"stats\": {\"total\": 21, \"additions\": 17, \"deletions\": 4}, \"files\": [{\"sha\": \"d76aea3395a75b641181754e9014835b2120e188\", \"filename\": \"print-eap.c\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 4, \"changes\": 18, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/985122081165753c7442bd7824c473eb9ff56308/print-eap.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/985122081165753c7442bd7824c473eb9ff56308/print-eap.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-eap.c?ref=985122081165753c7442bd7824c473eb9ff56308\", \"patch\": \"@@ -182,7 +182,9 @@ eap_print(netdissect_options *ndo,\\n \\n     switch (eap->type) {\\n     case EAP_FRAME_TYPE_PACKET:\\n+        ND_TCHECK_8BITS(tptr);\\n         type = *(tptr);\\n+        ND_TCHECK_16BITS(tptr+2);\\n         len = EXTRACT_16BITS(tptr+2);\\n         ND_PRINT((ndo, \\\", %s (%u), id %u, len %u\\\",\\n                tok2str(eap_code_values, \\\"unknown\\\", type),\\n@@ -193,10 +195,11 @@ eap_print(netdissect_options *ndo,\\n         ND_TCHECK2(*tptr, len);\\n \\n         if (type <= 2) { /* For EAP_REQUEST and EAP_RESPONSE only */\\n+            ND_TCHECK_8BITS(tptr+4);\\n             subtype = *(tptr+4);\\n             ND_PRINT((ndo, \\\"\\\\n\\\\t\\\\t Type %s (%u)\\\",\\n-                   tok2str(eap_type_values, \\\"unknown\\\", *(tptr+4)),\\n-                   *(tptr + 4)));\\n+                   tok2str(eap_type_values, \\\"unknown\\\", subtype),\\n+                   subtype));\\n \\n             switch (subtype) {\\n             case EAP_TYPE_IDENTITY:\\n@@ -222,6 +225,7 @@ eap_print(netdissect_options *ndo,\\n                  * type one octet per type\\n                  */\\n                 while (count < len) {\\n+                    ND_TCHECK_8BITS(tptr+count);\\n                     ND_PRINT((ndo, \\\" %s (%u),\\\",\\n                            tok2str(eap_type_values, \\\"unknown\\\", *(tptr+count)),\\n                            *(tptr + count)));\\n@@ -230,26 +234,31 @@ eap_print(netdissect_options *ndo,\\n                 break;\\n \\n             case EAP_TYPE_TTLS:\\n-                ND_PRINT((ndo, \\\" TTLSv%u\\\",\\n-                       EAP_TTLS_VERSION(*(tptr + 5)))); /* fall through */\\n             case EAP_TYPE_TLS:\\n+                ND_TCHECK_8BITS(tptr + 5);\\n+                if (subtype == EAP_TYPE_TTLS)\\n+                    ND_PRINT((ndo, \\\" TTLSv%u\\\",\\n+                           EAP_TTLS_VERSION(*(tptr + 5))));\\n                 ND_PRINT((ndo, \\\" flags [%s] 0x%02x,\\\",\\n                        bittok2str(eap_tls_flags_values, \\\"none\\\", *(tptr+5)),\\n                        *(tptr + 5)));\\n \\n                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {\\n+                    ND_TCHECK_32BITS(tptr + 6);\\n \\t\\t    ND_PRINT((ndo, \\\" len %u\\\", EXTRACT_32BITS(tptr + 6)));\\n                 }\\n                 break;\\n \\n             case EAP_TYPE_FAST:\\n+                ND_TCHECK_8BITS(tptr + 5);\\n                 ND_PRINT((ndo, \\\" FASTv%u\\\",\\n                        EAP_TTLS_VERSION(*(tptr + 5))));\\n                 ND_PRINT((ndo, \\\" flags [%s] 0x%02x,\\\",\\n                        bittok2str(eap_tls_flags_values, \\\"none\\\", *(tptr+5)),\\n                        *(tptr + 5)));\\n \\n                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {\\n+                    ND_TCHECK_32BITS(tptr + 6);\\n                     ND_PRINT((ndo, \\\" len %u\\\", EXTRACT_32BITS(tptr + 6)));\\n                 }\\n \\n@@ -258,6 +267,7 @@ eap_print(netdissect_options *ndo,\\n \\n             case EAP_TYPE_AKA:\\n             case EAP_TYPE_SIM:\\n+                ND_TCHECK_8BITS(tptr + 5);\\n                 ND_PRINT((ndo, \\\" subtype [%s] 0x%02x,\\\",\\n                        tok2str(eap_aka_subtype_values, \\\"unknown\\\", *(tptr+5)),\\n                        *(tptr + 5)));\"}, {\"sha\": \"a20e59898f771ee1a8ff9c47a2a8de0bf657fe27\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/985122081165753c7442bd7824c473eb9ff56308/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/985122081165753c7442bd7824c473eb9ff56308/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=985122081165753c7442bd7824c473eb9ff56308\", \"patch\": \"@@ -512,6 +512,7 @@ wb-oobr\\t\\t\\twb-oobr.pcap\\t\\t\\twb-oobr.out\\t-v\\n lldp_asan\\t\\tlldp_asan.pcap\\t\\t\\tlldp_asan.out\\t-v\\n extract_read2_asan\\textract_read2_asan.pcap\\t\\textract_read2_asan.out\\t-v\\n getname_2_read4_asan\\tgetname_2_read4_asan.pcap\\tgetname_2_read4_asan.out\\t-v\\n+eap_extract_read2_asan\\teap_extract_read2_asan.pcap\\teap_extract_read2_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"da96d48045ac4f5ac4a2e88e5915623f81cba3d3\", \"filename\": \"tests/eap_extract_read2_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/985122081165753c7442bd7824c473eb9ff56308/tests%2Feap_extract_read2_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/985122081165753c7442bd7824c473eb9ff56308/tests%2Feap_extract_read2_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Feap_extract_read2_asan.out?ref=985122081165753c7442bd7824c473eb9ff56308\", \"patch\": \"@@ -0,0 +1,2 @@\\n+EAP packet (0) v155, len 0\\n+\\t[|EAP]\"}, {\"sha\": \"26e334eb473d620f343682777680075ba8a92cfe\", \"filename\": \"tests/eap_extract_read2_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/985122081165753c7442bd7824c473eb9ff56308/tests%2Feap_extract_read2_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/985122081165753c7442bd7824c473eb9ff56308/tests%2Feap_extract_read2_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Feap_extract_read2_asan.pcap?ref=985122081165753c7442bd7824c473eb9ff56308\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzExYjQyNmVlMDVlYjYyZWQxMDMyMTg1MjZmMWZhNjE2ODUxYzQzY2Ui.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/11b426ee05eb62ed103218526f1fa616851c43ce", "content": "{\"sha\": \"11b426ee05eb62ed103218526f1fa616851c43ce\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoxMWI0MjZlZTA1ZWI2MmVkMTAzMjE4NTI2ZjFmYTYxNjg1MWM0M2Nl\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T02:40:51Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13017/DHCPv6: Add a missing option length check.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"efd518f59d270ff2a9e09874a1915243fe63ce53\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/efd518f59d270ff2a9e09874a1915243fe63ce53\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/11b426ee05eb62ed103218526f1fa616851c43ce\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/11b426ee05eb62ed103218526f1fa616851c43ce\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/11b426ee05eb62ed103218526f1fa616851c43ce\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/11b426ee05eb62ed103218526f1fa616851c43ce/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c177cb3800a9a68d79b2812f0ffcb9479abd6eb8\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c177cb3800a9a68d79b2812f0ffcb9479abd6eb8\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c177cb3800a9a68d79b2812f0ffcb9479abd6eb8\"}], \"stats\": {\"total\": 7, \"additions\": 7, \"deletions\": 0}, \"files\": [{\"sha\": \"cbb6d84a0588b8204f1c930a089136925e46197f\", \"filename\": \"print-dhcp6.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/11b426ee05eb62ed103218526f1fa616851c43ce/print-dhcp6.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/11b426ee05eb62ed103218526f1fa616851c43ce/print-dhcp6.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-dhcp6.c?ref=11b426ee05eb62ed103218526f1fa616851c43ce\", \"patch\": \"@@ -518,6 +518,10 @@ dhcp6opt_print(netdissect_options *ndo,\\n \\t\\t\\tND_PRINT((ndo, \\\"...)\\\"));\\n \\t\\t\\tbreak;\\n \\t\\tcase DH6OPT_RECONF_MSG:\\n+\\t\\t\\tif (optlen != 1) {\\n+\\t\\t\\t\\tND_PRINT((ndo, \\\" ?)\\\"));\\n+\\t\\t\\t\\tbreak;\\n+\\t\\t\\t}\\n \\t\\t\\ttp = (const u_char *)(dh6o + 1);\\n \\t\\t\\tswitch (*tp) {\\n \\t\\t\\tcase DH6_RENEW:\"}, {\"sha\": \"3f5726601b8fed1970d1079c1d0aa6c298cd3ffa\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=11b426ee05eb62ed103218526f1fa616851c43ce\", \"patch\": \"@@ -518,6 +518,7 @@ esis_snpa_asan-2\\tesis_snpa_asan-2.pcap\\t\\tesis_snpa_asan-2.out\\t-v\\n esis_snpa_asan-3\\tesis_snpa_asan-3.pcap\\t\\tesis_snpa_asan-3.out\\t-v\\n esis_snpa_asan-4\\tesis_snpa_asan-4.pcap\\t\\tesis_snpa_asan-4.out\\t-v\\n esis_snpa_asan-5\\tesis_snpa_asan-5.pcap\\t\\tesis_snpa_asan-5.out\\t-v\\n+dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"3f3937346ccae09e4507b3dddb93220a783b8d40\", \"filename\": \"tests/dhcp6_reconf_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2Fdhcp6_reconf_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2Fdhcp6_reconf_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdhcp6_reconf_asan.out?ref=11b426ee05eb62ed103218526f1fa616851c43ce\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP (tos 0x60, ttl 254, id 21519, offset 0, flags [+, DF, rsvd], proto UDP (17), length 768, options (EOL), bad cksum 9615 (->c6f)!)\\n+    251.73.86.150.514 > 126.172.217.192.546: dhcp6 relay-reply (linkaddr=300:10ed:ff:f01:f:0:7f:7f peeraddr=ffb6:3a64::c1:2300:581c:d00 (reconfigure-message ?) (reconfigure-message ?))\"}, {\"sha\": \"3eb6fe02adebff65b0c53c301bd396f27754df01\", \"filename\": \"tests/dhcp6_reconf_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2Fdhcp6_reconf_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/11b426ee05eb62ed103218526f1fa616851c43ce/tests%2Fdhcp6_reconf_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fdhcp6_reconf_asan.pcap?ref=11b426ee05eb62ed103218526f1fa616851c43ce\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzI2YTY3OTliOWNhODA1MDhjMDVjYWM3YTlhM2JlZjkyMjk5MTUyMGIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/26a6799b9ca80508c05cac7a9a3bef922991520b", "content": "{\"sha\": \"26a6799b9ca80508c05cac7a9a3bef922991520b\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoyNmE2Nzk5YjljYTgwNTA4YzA1Y2FjN2E5YTNiZWY5MjI5OTE1MjBi\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T02:49:28Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13018/PGM: Add a missing bounds check.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"297cec0c4cd49d3bd2b992a5c206f4b0a4f97c77\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/297cec0c4cd49d3bd2b992a5c206f4b0a4f97c77\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/26a6799b9ca80508c05cac7a9a3bef922991520b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/26a6799b9ca80508c05cac7a9a3bef922991520b\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/26a6799b9ca80508c05cac7a9a3bef922991520b\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/26a6799b9ca80508c05cac7a9a3bef922991520b/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"11b426ee05eb62ed103218526f1fa616851c43ce\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/11b426ee05eb62ed103218526f1fa616851c43ce\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/11b426ee05eb62ed103218526f1fa616851c43ce\"}], \"stats\": {\"total\": 7, \"additions\": 7, \"deletions\": 0}, \"files\": [{\"sha\": \"9bd6eac53578760d06a7fd4246fc00532dbe22ab\", \"filename\": \"print-pgm.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/26a6799b9ca80508c05cac7a9a3bef922991520b/print-pgm.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/26a6799b9ca80508c05cac7a9a3bef922991520b/print-pgm.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-pgm.c?ref=26a6799b9ca80508c05cac7a9a3bef922991520b\", \"patch\": \"@@ -457,6 +457,10 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t    ND_PRINT((ndo, \\\"[Total option length leaves no room for final option]\\\"));\\n \\t\\t    return;\\n \\t\\t}\\n+\\t\\tif (!ND_TTEST2(*bp, 2)) {\\n+\\t\\t    ND_PRINT((ndo, \\\" [|OPT]\\\"));\\n+\\t\\t    return;\\n+\\t\\t}\\n \\t\\topt_type = *bp++;\\n \\t\\topt_len = *bp++;\\n \\t\\tif (opt_len < PGM_MIN_OPT_LEN) {\"}, {\"sha\": \"68617bf44aaf4bec7ffad38d9c75fd46b0c28379\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=26a6799b9ca80508c05cac7a9a3bef922991520b\", \"patch\": \"@@ -519,6 +519,7 @@ esis_snpa_asan-3\\tesis_snpa_asan-3.pcap\\t\\tesis_snpa_asan-3.out\\t-v\\n esis_snpa_asan-4\\tesis_snpa_asan-4.pcap\\t\\tesis_snpa_asan-4.out\\t-v\\n esis_snpa_asan-5\\tesis_snpa_asan-5.pcap\\t\\tesis_snpa_asan-5.out\\t-v\\n dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n+pgm_opts_asan\\t\\tpgm_opts_asan.pcap\\t\\tpgm_opts_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"cc0607a45719c47dcc9a571f3c1c06cc74fd4a75\", \"filename\": \"tests/pgm_opts_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2Fpgm_opts_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2Fpgm_opts_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_opts_asan.out?ref=26a6799b9ca80508c05cac7a9a3bef922991520b\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP (tos 0x41,ECT(1), id 0, offset 0, flags [none], proto PGM (113), length 32639, options (unknown 89 [bad length 232]), bad cksum 5959 (->9eb9)!)\\n+    128.121.89.107 > 89.89.16.63: 128.121.89.107.4 > 89.89.16.63.225: PGM, length 0 0x3414eb1f0022 UNKNOWN type 0x1f OPTS LEN 225 OPT_1F [13]  OPT_06 [26]  PATH_NLA [4] [|OPT]\"}, {\"sha\": \"f65d06a0d191da44e2a98a522e2ad41db019058f\", \"filename\": \"tests/pgm_opts_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2Fpgm_opts_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/26a6799b9ca80508c05cac7a9a3bef922991520b/tests%2Fpgm_opts_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_opts_asan.pcap?ref=26a6799b9ca80508c05cac7a9a3bef922991520b\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzQ2MDFjNjg1ZTdmZDE5YzM3MjRkNWU0OTljNjliOGQzZWM0OTkzM2Ui.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/4601c685e7fd19c3724d5e499c69b8d3ec49933e", "content": "{\"sha\": \"4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo0NjAxYzY4NWU3ZmQxOWMzNzI0ZDVlNDk5YzY5YjhkM2VjNDk5MzNl\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T04:49:45Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13019: Clean up PGM option processing.\\n\\nAdd #defines for option lengths or the lengths of the fixed-length part\\nof the option.  Sometimes those #defines differ from what was there\\nbefore; what was there before was wrong, probably because the option\\nlengths given in RFC 3208 were sometimes wrong - some lengths included\\nthe length of the option header, some lengths didn't.\\n\\nDon't use \\\"sizeof(uintXX_t)\\\" for sizes in the packet, just use the\\nnumber of bytes directly.\\n\\nFor the options that include an IPv4 or IPv6 address, check the option\\nlength against the length of what precedes the address before fetching\\nany of that data.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"4aa5d2c8b12aa0be5a83db8dffd541fce730e2bd\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/4aa5d2c8b12aa0be5a83db8dffd541fce730e2bd\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/4601c685e7fd19c3724d5e499c69b8d3ec49933e/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"26a6799b9ca80508c05cac7a9a3bef922991520b\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/26a6799b9ca80508c05cac7a9a3bef922991520b\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/26a6799b9ca80508c05cac7a9a3bef922991520b\"}], \"stats\": {\"total\": 213, \"additions\": 133, \"deletions\": 80}, \"files\": [{\"sha\": \"c22b188b7c02d9d0d34383cd9f43c71a53add52c\", \"filename\": \"print-pgm.c\", \"status\": \"modified\", \"additions\": 130, \"deletions\": 80, \"changes\": 210, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/print-pgm.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/4601c685e7fd19c3724d5e499c69b8d3ec49933e/print-pgm.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-pgm.c?ref=4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"patch\": \"@@ -479,112 +479,130 @@ pgm_print(netdissect_options *ndo,\\n \\n \\t\\tswitch (opt_type & PGM_OPT_MASK) {\\n \\t\\tcase PGM_OPT_LENGTH:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_LENGTH option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_LENGTH_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_LENGTH_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_LENGTH option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_LENGTH_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    ND_PRINT((ndo, \\\" OPTS LEN (extra?) %d\\\", EXTRACT_16BITS(bp)));\\n-\\t\\t    bp += sizeof(uint16_t);\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    bp += 2;\\n+\\t\\t    opts_len -= PGM_OPT_LENGTH_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_FRAGMENT:\\n-\\t\\t    if (opt_len != 16) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_FRAGMENT option, length %u != 16]\\\", opt_len));\\n+#define PGM_OPT_FRAGMENT_LEN\\t(2+2+4+4+4)\\n+\\t\\t    if (opt_len != PGM_OPT_FRAGMENT_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_FRAGMENT option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_FRAGMENT_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    seq = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    offset = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    len = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" FRAG seq %u off %u len %u\\\", seq, offset, len));\\n-\\t\\t    opts_len -= 16;\\n+\\t\\t    opts_len -= PGM_OPT_FRAGMENT_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_NAK_LIST:\\n \\t\\t    bp += 2;\\n-\\t\\t    opt_len -= sizeof(uint32_t);\\t/* option header */\\n+\\t\\t    opt_len -= 4;\\t/* option header */\\n \\t\\t    ND_PRINT((ndo, \\\" NAK LIST\\\"));\\n \\t\\t    while (opt_len) {\\n-\\t\\t\\tif (opt_len < sizeof(uint32_t)) {\\n+\\t\\t\\tif (opt_len < 4) {\\n \\t\\t\\t    ND_PRINT((ndo, \\\"[Option length not a multiple of 4]\\\"));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n-\\t\\t\\tND_TCHECK2(*bp, sizeof(uint32_t));\\n+\\t\\t\\tND_TCHECK2(*bp, 4);\\n \\t\\t\\tND_PRINT((ndo, \\\" %u\\\", EXTRACT_32BITS(bp)));\\n-\\t\\t\\tbp += sizeof(uint32_t);\\n-\\t\\t\\topt_len -= sizeof(uint32_t);\\n-\\t\\t\\topts_len -= sizeof(uint32_t);\\n+\\t\\t\\tbp += 4;\\n+\\t\\t\\topt_len -= 4;\\n+\\t\\t\\topts_len -= 4;\\n \\t\\t    }\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_JOIN:\\n-\\t\\t    if (opt_len != 8) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_JOIN option, length %u != 8]\\\", opt_len));\\n+#define PGM_OPT_JOIN_LEN\\t(2+2+4)\\n+\\t\\t    if (opt_len != PGM_OPT_JOIN_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_JOIN option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_JOIN_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    seq = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" JOIN %u\\\", seq));\\n-\\t\\t    opts_len -= 8;\\n+\\t\\t    opts_len -= PGM_OPT_JOIN_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_NAK_BO_IVL:\\n-\\t\\t    if (opt_len != 12) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NAK_BO_IVL option, length %u != 12]\\\", opt_len));\\n+#define PGM_OPT_NAK_BO_IVL_LEN\\t(2+2+4+4)\\n+\\t\\t    if (opt_len != PGM_OPT_NAK_BO_IVL_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NAK_BO_IVL option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_NAK_BO_IVL_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    offset = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    seq = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" BACKOFF ivl %u ivlseq %u\\\", offset, seq));\\n-\\t\\t    opts_len -= 12;\\n+\\t\\t    opts_len -= PGM_OPT_NAK_BO_IVL_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_NAK_BO_RNG:\\n-\\t\\t    if (opt_len != 12) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NAK_BO_RNG option, length %u != 12]\\\", opt_len));\\n+#define PGM_OPT_NAK_BO_RNG_LEN\\t(2+2+4+4)\\n+\\t\\t    if (opt_len != PGM_OPT_NAK_BO_RNG_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NAK_BO_RNG option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_NAK_BO_RNG_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    offset = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    seq = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" BACKOFF max %u min %u\\\", offset, seq));\\n-\\t\\t    opts_len -= 12;\\n+\\t\\t    opts_len -= PGM_OPT_NAK_BO_RNG_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_REDIRECT:\\n+#define PGM_OPT_REDIRECT_FIXED_LEN\\t(2+2+2+2)\\n+\\t\\t    if (opt_len < PGM_OPT_REDIRECT_FIXED_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_REDIRECT option, length %u < %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_REDIRECT_FIXED_LEN));\\n+\\t\\t\\treturn;\\n+\\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    nla_afnum = EXTRACT_16BITS(bp);\\n-\\t\\t    bp += (2 * sizeof(uint16_t));\\n+\\t\\t    bp += 2+2;\\n \\t\\t    switch (nla_afnum) {\\n \\t\\t    case AFNUM_INET:\\n-\\t\\t\\tif (opt_len != 4 + sizeof(struct in_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_REDIRECT option, length %u != 4 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_REDIRECT option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        opt_len, PGM_OPT_REDIRECT_FIXED_LEN));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in_addr));\\n \\t\\t\\taddrtostr(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in_addr);\\n-\\t\\t\\topts_len -= 4 + sizeof(struct in_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    case AFNUM_INET6:\\n-\\t\\t\\tif (opt_len != 4 + sizeof(struct in6_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_REDIRECT option, length %u != 4 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_REDIRECT option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        PGM_OPT_REDIRECT_FIXED_LEN, opt_len));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in6_addr));\\n \\t\\t\\taddrtostr6(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in6_addr);\\n-\\t\\t\\topts_len -= 4 + sizeof(struct in6_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    default:\\n \\t\\t\\tgoto trunc;\\n@@ -595,49 +613,57 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_PARITY_PRM:\\n-\\t\\t    if (opt_len != 8) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_PARITY_PRM option, length %u != 8]\\\", opt_len));\\n+#define PGM_OPT_PARITY_PRM_LEN\\t(2+2+4)\\n+\\t\\t    if (opt_len != PGM_OPT_PARITY_PRM_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_PARITY_PRM option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_PARITY_PRM_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    len = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" PARITY MAXTGS %u\\\", len));\\n-\\t\\t    opts_len -= 8;\\n+\\t\\t    opts_len -= PGM_OPT_PARITY_PRM_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_PARITY_GRP:\\n-\\t\\t    if (opt_len != 8) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_PARITY_GRP option, length %u != 8]\\\", opt_len));\\n+#define PGM_OPT_PARITY_GRP_LEN\\t(2+2+4)\\n+\\t\\t    if (opt_len != PGM_OPT_PARITY_GRP_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_PARITY_GRP option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_PARITY_GRP_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    seq = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" PARITY GROUP %u\\\", seq));\\n-\\t\\t    opts_len -= 8;\\n+\\t\\t    opts_len -= PGM_OPT_PARITY_GRP_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_CURR_TGSIZE:\\n-\\t\\t    if (opt_len != 8) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_CURR_TGSIZE option, length %u != 8]\\\", opt_len));\\n+#define PGM_OPT_CURR_TGSIZE_LEN\\t(2+2+4)\\n+\\t\\t    if (opt_len != PGM_OPT_CURR_TGSIZE_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_CURR_TGSIZE option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_CURR_TGSIZE_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    len = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    ND_PRINT((ndo, \\\" PARITY ATGS %u\\\", len));\\n-\\t\\t    opts_len -= 8;\\n+\\t\\t    opts_len -= PGM_OPT_CURR_TGSIZE_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_NBR_UNREACH:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NBR_UNREACH option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_NBR_UNREACH_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_NBR_UNREACH_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_NBR_UNREACH option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_NBR_UNREACH_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    ND_PRINT((ndo, \\\" NBR_UNREACH\\\"));\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    opts_len -= PGM_OPT_NBR_UNREACH_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_PATH_NLA:\\n@@ -647,33 +673,39 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_SYN:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_SYN option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_SYN_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_SYN_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_SYN option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_SYN_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    ND_PRINT((ndo, \\\" SYN\\\"));\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    opts_len -= PGM_OPT_SYN_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_FIN:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_FIN option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_FIN_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_FIN_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_FIN option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_FIN_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    ND_PRINT((ndo, \\\" FIN\\\"));\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    opts_len -= PGM_OPT_FIN_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_RST:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_RST option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_RST_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_RST_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_RST option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_RST_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    ND_PRINT((ndo, \\\" RST\\\"));\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    opts_len -= PGM_OPT_RST_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_CR:\\n@@ -683,41 +715,51 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_CRQST:\\n-\\t\\t    if (opt_len != 4) {\\n-\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_CRQST option, length %u != 4]\\\", opt_len));\\n+#define PGM_OPT_CRQST_LEN\\t(2+2)\\n+\\t\\t    if (opt_len != PGM_OPT_CRQST_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_CRQST option, length %u != %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_CRQST_LEN));\\n \\t\\t\\treturn;\\n \\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    ND_PRINT((ndo, \\\" CRQST\\\"));\\n-\\t\\t    opts_len -= 4;\\n+\\t\\t    opts_len -= PGM_OPT_CRQST_LEN;\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_PGMCC_DATA:\\n+#define PGM_OPT_PGMCC_DATA_FIXED_LEN\\t(2+2+4+2+2)\\n+\\t\\t    if (opt_len < PGM_OPT_PGMCC_DATA_FIXED_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u < %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));\\n+\\t\\t\\treturn;\\n+\\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    offset = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    nla_afnum = EXTRACT_16BITS(bp);\\n-\\t\\t    bp += (2 * sizeof(uint16_t));\\n+\\t\\t    bp += 2+2;\\n \\t\\t    switch (nla_afnum) {\\n \\t\\t    case AFNUM_INET:\\n-\\t\\t\\tif (opt_len != 12 + sizeof(struct in_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in_addr));\\n \\t\\t\\taddrtostr(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in_addr);\\n-\\t\\t\\topts_len -= 12 + sizeof(struct in_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    case AFNUM_INET6:\\n-\\t\\t\\tif (opt_len != 12 + sizeof(struct in6_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in6_addr));\\n \\t\\t\\taddrtostr6(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in6_addr);\\n-\\t\\t\\topts_len -= 12 + sizeof(struct in6_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    default:\\n \\t\\t\\tgoto trunc;\\n@@ -728,31 +770,39 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t    break;\\n \\n \\t\\tcase PGM_OPT_PGMCC_FEEDBACK:\\n+#define PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN\\t(2+2+4+2+2)\\n+\\t\\t    if (opt_len < PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN) {\\n+\\t\\t\\tND_PRINT((ndo, \\\"[Bad PGM_OPT_PGMCC_FEEDBACK option, length %u < %u]\\\",\\n+\\t\\t\\t    opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));\\n+\\t\\t\\treturn;\\n+\\t\\t    }\\n \\t\\t    bp += 2;\\n \\t\\t    offset = EXTRACT_32BITS(bp);\\n-\\t\\t    bp += sizeof(uint32_t);\\n+\\t\\t    bp += 4;\\n \\t\\t    nla_afnum = EXTRACT_16BITS(bp);\\n-\\t\\t    bp += (2 * sizeof(uint16_t));\\n+\\t\\t    bp += 2+2;\\n \\t\\t    switch (nla_afnum) {\\n \\t\\t    case AFNUM_INET:\\n-\\t\\t\\tif (opt_len != 12 + sizeof(struct in_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in_addr));\\n \\t\\t\\taddrtostr(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in_addr);\\n-\\t\\t\\topts_len -= 12 + sizeof(struct in_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    case AFNUM_INET6:\\n-\\t\\t\\tif (opt_len != 12 + sizeof(struct in6_addr)) {\\n-\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\\\", opt_len));\\n+\\t\\t\\tif (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr)) {\\n+\\t\\t\\t    ND_PRINT((ndo, \\\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\\\",\\n+\\t\\t\\t        opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));\\n \\t\\t\\t    return;\\n \\t\\t\\t}\\n \\t\\t\\tND_TCHECK2(*bp, sizeof(struct in6_addr));\\n \\t\\t\\taddrtostr6(bp, nla_buf, sizeof(nla_buf));\\n \\t\\t\\tbp += sizeof(struct in6_addr);\\n-\\t\\t\\topts_len -= 12 + sizeof(struct in6_addr);\\n+\\t\\t\\topts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr);\\n \\t\\t\\tbreak;\\n \\t\\t    default:\\n \\t\\t\\tgoto trunc;\"}, {\"sha\": \"94237232889388c00b79b38c6bf459db6a27f178\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"patch\": \"@@ -520,6 +520,7 @@ esis_snpa_asan-4\\tesis_snpa_asan-4.pcap\\t\\tesis_snpa_asan-4.out\\t-v\\n esis_snpa_asan-5\\tesis_snpa_asan-5.pcap\\t\\tesis_snpa_asan-5.out\\t-v\\n dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n pgm_opts_asan\\t\\tpgm_opts_asan.pcap\\t\\tpgm_opts_asan.out\\t-v\\n+pgm_opts_asan_2\\t\\tpgm_opts_asan_2.pcap\\t\\tpgm_opts_asan_2.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"7e948d41239c1da96b17a1f83df791e70124aee6\", \"filename\": \"tests/pgm_opts_asan_2.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2Fpgm_opts_asan_2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2Fpgm_opts_asan_2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_opts_asan_2.out?ref=4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP (tos 0x41,ECT(1), id 0, offset 0, flags [none], proto PGM (113), length 32639, options (unknown 89 [bad length 232]), bad cksum 5959 (->96b9)!)\\n+    128.121.89.107 > 89.89.16.63: 128.121.89.107.4 > 89.89.16.63.225: PGM, length 0 0x3414eb1f0022 UNKNOWN type 0x1f OPTS LEN 225 OPT_1F [13]  OPT_06 [26] [Bad OPT_PGMCC_DATA option, length 4 < 12]\"}, {\"sha\": \"28773fd9e8be45fcef242ce74cfd715c8fa9b72e\", \"filename\": \"tests/pgm_opts_asan_2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2Fpgm_opts_asan_2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests%2Fpgm_opts_asan_2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_opts_asan_2.pcap?ref=4601c685e7fd19c3724d5e499c69b8d3ec49933e\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2M1ZGQ3YmVmNWU1NGRhNTk5NmRjNDcxMzI4NGFhNjI2NmFlNzViNzUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c5dd7bef5e54da5996dc4713284aa6266ae75b75", "content": "{\"sha\": \"c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpjNWRkN2JlZjVlNTRkYTU5OTZkYzQ3MTMyODRhYTYyNjZhZTc1Yjc1\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T05:02:41Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13020/VTP: Add some missing bounds checks.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"f62e131da907d24ba3f4ad6a8bb0cd62e20a0802\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/f62e131da907d24ba3f4ad6a8bb0cd62e20a0802\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c5dd7bef5e54da5996dc4713284aa6266ae75b75/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/4601c685e7fd19c3724d5e499c69b8d3ec49933e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e\"}], \"stats\": {\"total\": 9, \"additions\": 9, \"deletions\": 0}, \"files\": [{\"sha\": \"18c1356ef32504198b7a9d09a7b34fdd2e1e5aa3\", \"filename\": \"print-vtp.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c5dd7bef5e54da5996dc4713284aa6266ae75b75/print-vtp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c5dd7bef5e54da5996dc4713284aa6266ae75b75/print-vtp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-vtp.c?ref=c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"patch\": \"@@ -223,6 +223,7 @@ vtp_print (netdissect_options *ndo,\\n \\t *\\n \\t */\\n \\n+\\tND_TCHECK_32BITS(tptr);\\n \\tND_PRINT((ndo, \\\", Config Rev %x\\\", EXTRACT_32BITS(tptr)));\\n \\n \\t/*\\n@@ -243,6 +244,7 @@ vtp_print (netdissect_options *ndo,\\n \\ttptr += 4;\\n \\twhile (tptr < (pptr+length)) {\\n \\n+\\t    ND_TCHECK_8BITS(tptr);\\n \\t    len = *tptr;\\n \\t    if (len == 0)\\n \\t\\tbreak;\"}, {\"sha\": \"6f5d3314d2cc4c1fffa95343c5e8447aa266d2c3\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"patch\": \"@@ -521,6 +521,7 @@ esis_snpa_asan-5\\tesis_snpa_asan-5.pcap\\t\\tesis_snpa_asan-5.out\\t-v\\n dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n pgm_opts_asan\\t\\tpgm_opts_asan.pcap\\t\\tpgm_opts_asan.out\\t-v\\n pgm_opts_asan_2\\t\\tpgm_opts_asan_2.pcap\\t\\tpgm_opts_asan_2.out\\t-v\\n+vtp_asan\\t\\tvtp_asan.pcap\\t\\t\\tvtp_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"17b682bf6b7f23335ed4bb7d150627db5911259b\", \"filename\": \"tests/vtp_asan.out\", \"status\": \"added\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2Fvtp_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2Fvtp_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fvtp_asan.out?ref=c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"patch\": \"@@ -0,0 +1,6 @@\\n+FRF.16 Frag, seq 193, Flags [Begin, End], UI 08! VTPv69, Message Subset advertisement (0x02), length 2126400013\\n+\\tDomain name: , Seq number: 0[|vtp]\\n+[|mfr]\\n+[|mfr]\\n+[|mfr]\\n+[|mfr]\"}, {\"sha\": \"515828a0b606ab2f659b2ce2e4f213054025ecd1\", \"filename\": \"tests/vtp_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2Fvtp_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c5dd7bef5e54da5996dc4713284aa6266ae75b75/tests%2Fvtp_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fvtp_asan.pcap?ref=c5dd7bef5e54da5996dc4713284aa6266ae75b75\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzY3YzcxMjYwNjJkNTk3MjljZDQyMWJiMzhmOTU5NDAxNWM5OTA3YmEi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/67c7126062d59729cd421bb38f9594015c9907ba", "content": "{\"sha\": \"67c7126062d59729cd421bb38f9594015c9907ba\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo2N2M3MTI2MDYyZDU5NzI5Y2Q0MjFiYjM4Zjk1OTQwMTVjOTkwN2Jh\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T06:01:44Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13021/ICMP6: Add a missing bounds check.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"ebd4a080e39be062bff2050d26cafc1d925d48ae\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/ebd4a080e39be062bff2050d26cafc1d925d48ae\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/67c7126062d59729cd421bb38f9594015c9907ba\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/67c7126062d59729cd421bb38f9594015c9907ba\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/67c7126062d59729cd421bb38f9594015c9907ba\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/67c7126062d59729cd421bb38f9594015c9907ba/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c5dd7bef5e54da5996dc4713284aa6266ae75b75\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c5dd7bef5e54da5996dc4713284aa6266ae75b75\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"c481e446fa5d3cf79e6f727775b800cb8374ed65\", \"filename\": \"print-icmp6.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/67c7126062d59729cd421bb38f9594015c9907ba/print-icmp6.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/67c7126062d59729cd421bb38f9594015c9907ba/print-icmp6.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-icmp6.c?ref=67c7126062d59729cd421bb38f9594015c9907ba\", \"patch\": \"@@ -1131,6 +1131,7 @@ icmp6_print(netdissect_options *ndo,\\n \\t\\tif (ndo->ndo_vflag) {\\n \\t\\t\\tND_TCHECK(dp->icmp6_data16[0]);\\n \\t\\t\\tND_PRINT((ndo,\\\", id 0x%04x\\\", EXTRACT_16BITS(&dp->icmp6_data16[0])));\\n+\\t\\t\\tND_TCHECK(dp->icmp6_data16[1]);\\n \\t\\t\\tif (dp->icmp6_data16[1] & 0xc0)\\n \\t\\t\\t\\tND_PRINT((ndo,\\\" \\\"));\\n \\t\\t\\tif (dp->icmp6_data16[1] & 0x80)\"}, {\"sha\": \"070010c76687e624fdf23fdd46342c03cda263fd\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/67c7126062d59729cd421bb38f9594015c9907ba/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/67c7126062d59729cd421bb38f9594015c9907ba/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=67c7126062d59729cd421bb38f9594015c9907ba\", \"patch\": \"@@ -522,6 +522,7 @@ dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n pgm_opts_asan\\t\\tpgm_opts_asan.pcap\\t\\tpgm_opts_asan.out\\t-v\\n pgm_opts_asan_2\\t\\tpgm_opts_asan_2.pcap\\t\\tpgm_opts_asan_2.out\\t-v\\n vtp_asan\\t\\tvtp_asan.pcap\\t\\t\\tvtp_asan.out\\t-v\\n+icmp6_mobileprefix_asan\\ticmp6_mobileprefix_asan.pcap\\ticmp6_mobileprefix_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"0e0d97c3418e7414456465005a8f18001bf5a90c\", \"filename\": \"tests/icmp6_mobileprefix_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/67c7126062d59729cd421bb38f9594015c9907ba/tests%2Ficmp6_mobileprefix_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/67c7126062d59729cd421bb38f9594015c9907ba/tests%2Ficmp6_mobileprefix_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp6_mobileprefix_asan.out?ref=67c7126062d59729cd421bb38f9594015c9907ba\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP6 (class 0x50, flowlabel 0x0002c, hlim 0, next-header ICMPv6 (58) payload length: 7168) 4f:f829:c:1a1a:1a1a:1a1a:1a37:0 > 16:0:400:0:64fb:9303:f293:8200: ICMP6, mobile router advertisement, length 7168, id 0x9393[|icmp6]\\n+[|ether]\"}, {\"sha\": \"fa40fbb28332c47ead3080f56890508def3f7fac\", \"filename\": \"tests/icmp6_mobileprefix_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/67c7126062d59729cd421bb38f9594015c9907ba/tests%2Ficmp6_mobileprefix_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/67c7126062d59729cd421bb38f9594015c9907ba/tests%2Ficmp6_mobileprefix_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp6_mobileprefix_asan.pcap?ref=67c7126062d59729cd421bb38f9594015c9907ba\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2E3N2ZmMDljNDY1NjBiYzg5NWRlYTExZGM5ZmU2NDM0ODZiMDU2YWMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a77ff09c46560bc895dea11dc9fe643486b056ac", "content": "{\"sha\": \"a77ff09c46560bc895dea11dc9fe643486b056ac\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjphNzdmZjA5YzQ2NTYwYmM4OTVkZWExMWRjOWZlNjQzNDg2YjA1NmFj\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T18:21:00Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13027/LLDP: Fix a bounds check.\\n\\nThe total length of the OID is the OID length plus the length of the OID\\nlength itself.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"a74f102826da5700493e5030de7bb633b4af980b\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/a74f102826da5700493e5030de7bb633b4af980b\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/a77ff09c46560bc895dea11dc9fe643486b056ac\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a77ff09c46560bc895dea11dc9fe643486b056ac\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a77ff09c46560bc895dea11dc9fe643486b056ac\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a77ff09c46560bc895dea11dc9fe643486b056ac/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"b20e1639dbac84b3fcb393858521c13ad47a9d70\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b20e1639dbac84b3fcb393858521c13ad47a9d70\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/b20e1639dbac84b3fcb393858521c13ad47a9d70\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"3984a4f58b6794fcca0bd98d1da3e1f9c63f438e\", \"filename\": \"print-lldp.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a77ff09c46560bc895dea11dc9fe643486b056ac/print-lldp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a77ff09c46560bc895dea11dc9fe643486b056ac/print-lldp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-lldp.c?ref=a77ff09c46560bc895dea11dc9fe643486b056ac\", \"patch\": \"@@ -1401,7 +1401,7 @@ lldp_mgmt_addr_tlv_print(netdissect_options *ndo,\\n     if (tlen) {\\n         oid_len = *tptr;\\n \\n-        if (tlen < oid_len) {\\n+        if (tlen < 1U + oid_len) {\\n             return 0;\\n         }\\n         if (oid_len) {\"}, {\"sha\": \"9ac274704caa4cb062b7ba0af75439be6a90d4ed\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=a77ff09c46560bc895dea11dc9fe643486b056ac\", \"patch\": \"@@ -532,6 +532,7 @@ isis_stlv_asan\\t\\tisis_stlv_asan.pcap\\t\\tisis_stlv_asan.out\\t-v\\n isis_stlv_asan-2\\tisis_stlv_asan-2.pcap\\t\\tisis_stlv_asan-2.out\\t-v\\n isis_stlv_asan-3\\tisis_stlv_asan-3.pcap\\t\\tisis_stlv_asan-3.out\\t-v\\n isis_stlv_asan-4\\tisis_stlv_asan-4.pcap\\t\\tisis_stlv_asan-4.out\\t-v\\n+lldp_mgmt_addr_tlv_asan\\tlldp_mgmt_addr_tlv_asan.pcap\\tlldp_mgmt_addr_tlv_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"10d759724f80612f7dd6d7a67f5ae50e8342dea8\", \"filename\": \"tests/lldp_mgmt_addr_tlv_asan.out\", \"status\": \"added\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2Flldp_mgmt_addr_tlv_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2Flldp_mgmt_addr_tlv_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Flldp_mgmt_addr_tlv_asan.out?ref=a77ff09c46560bc895dea11dc9fe643486b056ac\", \"patch\": \"@@ -0,0 +1,8 @@\\n+LLDP, length 1048572\\n+\\tManagement Address TLV (8), length 15\\n+\\t  Management Address length 6, AFI Reserved (0), no AF printer !\\n+\\t  Unknown Interface Numbering (10): 666137427\\n+\\t[|LLDP]\\n+00:00:00:a0:d4:c3 > 06:04:e8:03:00:02, ethertype Unknown (0xb2a1), length 58785857: \\n+\\t0x0000:  0200 efff e5ff 804f 006e 0026 0000 0000  .......O.n.&....\\n+\\t0x0010:  01                                       .\"}, {\"sha\": \"a7aec5904a2999060807888c306adedd1043e2ac\", \"filename\": \"tests/lldp_mgmt_addr_tlv_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2Flldp_mgmt_addr_tlv_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/a77ff09c46560bc895dea11dc9fe643486b056ac/tests%2Flldp_mgmt_addr_tlv_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Flldp_mgmt_addr_tlv_asan.pcap?ref=a77ff09c46560bc895dea11dc9fe643486b056ac\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzJkNjY5ODYyZGY3Y2QxN2Y1MzkxMjkwNDlmNmZiNzBkMTcxNzQxMjUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2d669862df7cd17f539129049f6fb70d17174125", "content": "{\"sha\": \"2d669862df7cd17f539129049f6fb70d17174125\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoyZDY2OTg2MmRmN2NkMTdmNTM5MTI5MDQ5ZjZmYjcwZDE3MTc0MTI1\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T21:55:12Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13031/Check for the presence of the entire IPv6 fragment header.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\\n\\nClean up some whitespace in tests/TESTLIST while we're at it.\", \"tree\": {\"sha\": \"a71a92ba20bf628f6e3bb11ffed3277faee150db\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/a71a92ba20bf628f6e3bb11ffed3277faee150db\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/2d669862df7cd17f539129049f6fb70d17174125\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2d669862df7cd17f539129049f6fb70d17174125\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/2d669862df7cd17f539129049f6fb70d17174125\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/2d669862df7cd17f539129049f6fb70d17174125/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"eb8c0d4636363c881503d9c091604fbf785725eb\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/eb8c0d4636363c881503d9c091604fbf785725eb\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/eb8c0d4636363c881503d9c091604fbf785725eb\"}], \"stats\": {\"total\": 10, \"additions\": 6, \"deletions\": 4}, \"files\": [{\"sha\": \"fbcabc5b00cdc82a97ca76e7f15ca94823f40561\", \"filename\": \"print-frag6.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2d669862df7cd17f539129049f6fb70d17174125/print-frag6.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2d669862df7cd17f539129049f6fb70d17174125/print-frag6.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-frag6.c?ref=2d669862df7cd17f539129049f6fb70d17174125\", \"patch\": \"@@ -41,7 +41,7 @@ frag6_print(netdissect_options *ndo, register const u_char *bp, register const u\\n \\tdp = (const struct ip6_frag *)bp;\\n \\tip6 = (const struct ip6_hdr *)bp2;\\n \\n-\\tND_TCHECK(dp->ip6f_offlg);\\n+\\tND_TCHECK(*dp);\\n \\n \\tif (ndo->ndo_vflag) {\\n \\t\\tND_PRINT((ndo, \\\"frag (0x%08x:%d|%ld)\\\",\"}, {\"sha\": \"8e88e93ea70041531db44aca0e4de8070c0825b3\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2d669862df7cd17f539129049f6fb70d17174125/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2d669862df7cd17f539129049f6fb70d17174125/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=2d669862df7cd17f539129049f6fb70d17174125\", \"patch\": \"@@ -536,9 +536,10 @@ isis_stlv_asan-4\\tisis_stlv_asan-4.pcap\\t\\tisis_stlv_asan-4.out\\t-v\\n lldp_mgmt_addr_tlv_asan\\tlldp_mgmt_addr_tlv_asan.pcap\\tlldp_mgmt_addr_tlv_asan.out\\t-v\\n bootp_asan\\t\\tbootp_asan.pcap\\t\\t\\tbootp_asan.out\\t\\t-v\\n ppp_ccp_config_deflate_option_asan\\tppp_ccp_config_deflate_option_asan.pcap\\tppp_ccp_config_deflate_option_asan.out\\t-v\\n-pim_header_asan\\t\\tpim_header_asan.pcap\\t\\tpim_header_asan.out\\t\\t-v\\n-pim_header_asan-2\\tpim_header_asan-2.pcap\\t\\tpim_header_asan-2.out\\t\\t-v\\n-pim_header_asan-3\\tpim_header_asan-3.pcap\\t\\tpim_header_asan-3.out\\t\\t-v\\n+pim_header_asan\\t\\tpim_header_asan.pcap\\t\\tpim_header_asan.out\\t-v\\n+pim_header_asan-2\\tpim_header_asan-2.pcap\\t\\tpim_header_asan-2.out\\t-v\\n+pim_header_asan-3\\tpim_header_asan-3.pcap\\t\\tpim_header_asan-3.out\\t-v\\n+ip6_frag_asan\\t\\tip6_frag_asan.pcap\\t\\tip6_frag_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"2daba4254a10b3627966011c4ae63cd530ae1b48\", \"filename\": \"tests/ip6_frag_asan.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2d669862df7cd17f539129049f6fb70d17174125/tests%2Fip6_frag_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2d669862df7cd17f539129049f6fb70d17174125/tests%2Fip6_frag_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fip6_frag_asan.out?ref=2d669862df7cd17f539129049f6fb70d17174125\", \"patch\": \"@@ -0,0 +1 @@\\n+IP6 (class 0x51, flowlabel 0xb2100, hlim 16, next-header Fragment (44) payload length: 27136) 452:22:19:0:41a:e4ff:10ff:484d > 2243:80:1400:100:19:ffff:ffff:fffb: [|frag]\"}, {\"sha\": \"a99a22d126e946eebc1183d8b57fda650fe7abf6\", \"filename\": \"tests/ip6_frag_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/2d669862df7cd17f539129049f6fb70d17174125/tests%2Fip6_frag_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/2d669862df7cd17f539129049f6fb70d17174125/tests%2Fip6_frag_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fip6_frag_asan.pcap?ref=2d669862df7cd17f539129049f6fb70d17174125\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzFiYzc4ZDc5NWNkNWNhZDU1MjU0OTg2NThmNDE0YTExZWEwYTdlOWMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/1bc78d795cd5cad5525498658f414a11ea0a7e9c", "content": "{\"sha\": \"1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoxYmM3OGQ3OTVjZDVjYWQ1NTI1NDk4NjU4ZjQxNGExMWVhMGE3ZTlj\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-22T22:38:02Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13032/RADIUS: Check whether a byte exists before testing its value.\\n\\nReverse the test in a for loop to test the length before testing whether\\nwe have a null byte.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\\n\\nClean up other length tests while we're at it.\", \"tree\": {\"sha\": \"5deb1f62c306a102f4377261d1c9a5b2bac8d2da\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/5deb1f62c306a102f4377261d1c9a5b2bac8d2da\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/1bc78d795cd5cad5525498658f414a11ea0a7e9c/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0f1735981d7ee78af277fab4c29da83a3ce4da5e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/0f1735981d7ee78af277fab4c29da83a3ce4da5e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/0f1735981d7ee78af277fab4c29da83a3ce4da5e\"}], \"stats\": {\"total\": 24, \"additions\": 15, \"deletions\": 9}, \"files\": [{\"sha\": \"8555188ee9853a834aaa0cf57182f418b3e09002\", \"filename\": \"print-radius.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 9, \"changes\": 14, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/1bc78d795cd5cad5525498658f414a11ea0a7e9c/print-radius.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/1bc78d795cd5cad5525498658f414a11ea0a7e9c/print-radius.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-radius.c?ref=1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"patch\": \"@@ -503,10 +503,7 @@ print_attr_string(netdissect_options *ndo,\\n    {\\n       case TUNNEL_PASS:\\n            if (length < 3)\\n-           {\\n-              ND_PRINT((ndo, \\\"%s\\\", tstr));\\n-              return;\\n-           }\\n+              goto trunc;\\n            if (*data && (*data <=0x1F) )\\n               ND_PRINT((ndo, \\\"Tag[%u] \\\", *data));\\n            else\\n@@ -526,10 +523,7 @@ print_attr_string(netdissect_options *ndo,\\n            if (*data <= 0x1F)\\n            {\\n               if (length < 1)\\n-              {\\n-                 ND_PRINT((ndo, \\\"%s\\\", tstr));\\n-                 return;\\n-              }\\n+                 goto trunc;\\n               if (*data)\\n                 ND_PRINT((ndo, \\\"Tag[%u] \\\", *data));\\n               else\\n@@ -539,6 +533,8 @@ print_attr_string(netdissect_options *ndo,\\n            }\\n         break;\\n       case EGRESS_VLAN_NAME:\\n+           if (length < 1)\\n+              goto trunc;\\n            ND_PRINT((ndo, \\\"%s (0x%02x) \\\",\\n                   tok2str(rfc4675_tagged,\\\"Unknown tag\\\",*data),\\n                   *data));\\n@@ -547,7 +543,7 @@ print_attr_string(netdissect_options *ndo,\\n         break;\\n    }\\n \\n-   for (i=0; *data && i < length ; i++, data++)\\n+   for (i=0; i < length && *data; i++, data++)\\n        ND_PRINT((ndo, \\\"%c\\\", (*data < 32 || *data > 126) ? '.' : *data));\\n \\n    return;\"}, {\"sha\": \"314afa223804b75fa4b3505f5738bb66e622b08a\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"patch\": \"@@ -541,6 +541,7 @@ pim_header_asan\\t\\tpim_header_asan.pcap\\t\\tpim_header_asan.out\\t-v\\n pim_header_asan-2\\tpim_header_asan-2.pcap\\t\\tpim_header_asan-2.out\\t-v\\n pim_header_asan-3\\tpim_header_asan-3.pcap\\t\\tpim_header_asan-3.out\\t-v\\n ip6_frag_asan\\t\\tip6_frag_asan.pcap\\t\\tip6_frag_asan.out\\t-v\\n+radius_attr_asan\\tradius_attr_asan.pcap\\t\\tradius_attr_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"faef3ddf1671dc19b1469f523abe96bb45b49ef7\", \"filename\": \"tests/radius_attr_asan.out\", \"status\": \"added\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2Fradius_attr_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2Fradius_attr_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fradius_attr_asan.out?ref=1bc78d795cd5cad5525498658f414a11ea0a7e9c\", \"patch\": \"@@ -0,0 +1,9 @@\\n+IP (tos 0x64, ttl 249, id 40192, offset 0, flags [+, DF, rsvd], proto UDP (17), length 299, options (unknown 235 [bad length 252]), bad cksum 8000 (->1faa)!)\\n+    0.0.86.32.258 > 0.2.250.99.3799: RADIUS, length: 263\\n+\\tUnknown Command (58), id: 0x6a, Authenticator: 0901020ed7ff03edb63a0f00cb0f00cb\\n+\\t  NAS-Port Attribute (5), length: 5, Value: ERROR: length 3 != 4\\n+\\t  Unknown Attribute (127), length: 4, Value: \\n+\\t  NAS-IP-Address Attribute (4), length: 4, Value: ERROR: length 2 != 4\\n+\\t  NAS-IP-Address Attribute (4), length: 4, Value: ERROR: length 2 != 4\\n+\\t  NAS-IP-Address Attribute (4), length: 4, Value: ERROR: length 2 != 4\\n+\\t  Callback-Id Attribute (20), length: 4, Value: .. [|radius]\"}, {\"sha\": \"9a7ed160d07b00faa7f6dacb8a0d90c94d57edf5\", \"filename\": \"tests/radius_attr_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2Fradius_attr_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/1bc78d795cd5cad5525498658f414a11ea0a7e9c/tests%2Fradius_attr_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fradius_attr_asan.pcap?ref=1bc78d795cd5cad5525498658f414a11ea0a7e9c\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2I4ZTU1OWFmYWViOGZlMDYwNGExZjhlM2FkNGRjMTQ0NWRlMDdhMDAi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00", "content": "{\"sha\": \"b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpiOGU1NTlhZmFlYjhmZTA2MDRhMWY4ZTNhZDRkYzE0NDVkZTA3YTAw\", \"commit\": {\"author\": {\"name\": \"Francois-Xavier Le Bail\", \"email\": \"devel.fx.lebail@orange.fr\", \"date\": \"2017-03-22T15:08:25Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13023/IPv6 mobility: Add a bounds check before fetching data\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'\", \"tree\": {\"sha\": \"ff43c52d918e7a894fe291d79d1c5737128614ff\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/ff43c52d918e7a894fe291d79d1c5737128614ff\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/comments\", \"author\": {\"login\": \"fxlb\", \"id\": 2846004, \"node_id\": \"MDQ6VXNlcjI4NDYwMDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2846004?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fxlb\", \"html_url\": \"https://github.com/fxlb\", \"followers_url\": \"https://api.github.com/users/fxlb/followers\", \"following_url\": \"https://api.github.com/users/fxlb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fxlb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fxlb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fxlb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fxlb/orgs\", \"repos_url\": \"https://api.github.com/users/fxlb/repos\", \"events_url\": \"https://api.github.com/users/fxlb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fxlb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"eee0b04bcfdae319c242b0b8fc3d07029ee65b8c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/eee0b04bcfdae319c242b0b8fc3d07029ee65b8c\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/eee0b04bcfdae319c242b0b8fc3d07029ee65b8c\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"64497b36e86ee7c4bf3533c33b3a67a6958db8c5\", \"filename\": \"print-mobility.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/print-mobility.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/print-mobility.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-mobility.c?ref=b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"patch\": \"@@ -150,6 +150,7 @@ mobility_opt_print(netdissect_options *ndo,\\n \\t\\t\\t\\tgoto trunc;\\n \\t\\t\\t}\\n \\t\\t\\t/* units of 4 secs */\\n+\\t\\t\\tND_TCHECK_16BITS(&bp[i+2]);\\n \\t\\t\\tND_PRINT((ndo, \\\"(refresh: %u)\\\",\\n \\t\\t\\t\\tEXTRACT_16BITS(&bp[i+2]) << 2));\\n \\t\\t\\tbreak;\"}, {\"sha\": \"3e215960d7b4ec5a2793ba182e8537bbb3c642e7\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"patch\": \"@@ -524,6 +524,7 @@ pgm_opts_asan_2\\t\\tpgm_opts_asan_2.pcap\\t\\tpgm_opts_asan_2.out\\t-v\\n vtp_asan\\t\\tvtp_asan.pcap\\t\\t\\tvtp_asan.out\\t-v\\n icmp6_mobileprefix_asan\\ticmp6_mobileprefix_asan.pcap\\ticmp6_mobileprefix_asan.out\\t-v\\n ip_printroute_asan\\tip_printroute_asan.pcap\\t\\tip_printroute_asan.out\\t-v\\n+mobility_opt_asan\\tmobility_opt_asan.pcap\\t\\tmobility_opt_asan.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"91493c2dda1a533cd1c3b40850ba67803d51acc6\", \"filename\": \"tests/mobility_opt_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2Fmobility_opt_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2Fmobility_opt_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmobility_opt_asan.out?ref=b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP6 (class 0x50, flowlabel 0x00004, hlim 0, next-header Mobile IP (old) (62) payload length: 7168) d400:7fa1:0:400::6238:2949 > 9675:86dd:7300:2c:1c7f:ffff:ffc3:b2a1: mobility: BU seq#=116 A lifetime=15872(pad1)[|MOBILITY]\\n+IP6 (class 0x50, flowlabel 0x00004, hlim 0, next-header Mobile IP (old) (62) payload length: 7168) d4c3:b2a1:200:400::6238:2949 > 9675:86dd:73f0:2c:1c7f:ffff:ebc3:b291: mobility: BU seq#=116 A lifetime=15360[|MOBILITY]\"}, {\"sha\": \"d28de32c80863d6d6a0ca491f9cd86d5cf8e4ea8\", \"filename\": \"tests/mobility_opt_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2Fmobility_opt_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00/tests%2Fmobility_opt_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmobility_opt_asan.pcap?ref=b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzdkM2FiYTlmMDY4OTlkMDEyOGVmNDZlOGEyZmExNDNjNmZhZDhmNjIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62", "content": "{\"sha\": \"7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo3ZDNhYmE5ZjA2ODk5ZDAxMjhlZjQ2ZThhMmZhMTQzYzZmYWQ4ZjYy\", \"commit\": {\"author\": {\"name\": \"Francois-Xavier Le Bail\", \"email\": \"devel.fx.lebail@orange.fr\", \"date\": \"2017-03-22T15:27:48Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13024/IPv6 mobility: Add a bounds check before fetching data\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'\", \"tree\": {\"sha\": \"de7a8446ce8ed34e73c2e799523e97a7ecdc4b01\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/de7a8446ce8ed34e73c2e799523e97a7ecdc4b01\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/comments\", \"author\": {\"login\": \"fxlb\", \"id\": 2846004, \"node_id\": \"MDQ6VXNlcjI4NDYwMDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2846004?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fxlb\", \"html_url\": \"https://github.com/fxlb\", \"followers_url\": \"https://api.github.com/users/fxlb/followers\", \"following_url\": \"https://api.github.com/users/fxlb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fxlb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fxlb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fxlb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fxlb/orgs\", \"repos_url\": \"https://api.github.com/users/fxlb/repos\", \"events_url\": \"https://api.github.com/users/fxlb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fxlb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"21a0fbade4894450e7063c95ada17bd7d49dcf71\", \"filename\": \"print-mobility.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/print-mobility.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/print-mobility.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-mobility.c?ref=7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"patch\": \"@@ -166,6 +166,8 @@ mobility_opt_print(netdissect_options *ndo,\\n \\t\\t\\t\\tND_PRINT((ndo, \\\"(ni: trunc)\\\"));\\n \\t\\t\\t\\tgoto trunc;\\n \\t\\t\\t}\\n+\\t\\t\\tND_TCHECK_16BITS(&bp[i+2]);\\n+\\t\\t\\tND_TCHECK_16BITS(&bp[i+4]);\\n \\t\\t\\tND_PRINT((ndo, \\\"(ni: ho=0x%04x co=0x%04x)\\\",\\n \\t\\t\\t\\tEXTRACT_16BITS(&bp[i+2]),\\n \\t\\t\\t\\tEXTRACT_16BITS(&bp[i+4])));\"}, {\"sha\": \"e0caaa34b51b6aea21ed4f2592e7cceab5c82b35\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"patch\": \"@@ -525,6 +525,7 @@ vtp_asan\\t\\tvtp_asan.pcap\\t\\t\\tvtp_asan.out\\t-v\\n icmp6_mobileprefix_asan\\ticmp6_mobileprefix_asan.pcap\\ticmp6_mobileprefix_asan.out\\t-v\\n ip_printroute_asan\\tip_printroute_asan.pcap\\t\\tip_printroute_asan.out\\t-v\\n mobility_opt_asan\\tmobility_opt_asan.pcap\\t\\tmobility_opt_asan.out\\t-v\\n+mobility_opt_asan_2\\tmobility_opt_asan_2.pcap\\tmobility_opt_asan_2.out\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"403926e5b2c49553b715e0376c271a7f48938993\", \"filename\": \"tests/mobility_opt_asan_2.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2Fmobility_opt_asan_2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2Fmobility_opt_asan_2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmobility_opt_asan_2.out?ref=7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\", \"patch\": \"@@ -0,0 +1 @@\\n+IP6 (class 0x50, flowlabel 0x0002c, hlim 0, next-header Mobile IP (old) (62) payload length: 7168) ff:7f0f:40:0:ee00:0:b658:5203 > 205:20:1:b00:0:2200:af01:e000: mobility: BRR(type-0x06: len=0)[|MOBILITY]\"}, {\"sha\": \"7fadc580f52058a7939dec5f813f5ce109724a74\", \"filename\": \"tests/mobility_opt_asan_2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2Fmobility_opt_asan_2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62/tests%2Fmobility_opt_asan_2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmobility_opt_asan_2.pcap?ref=7d3aba9f06899d0128ef46e8a2fa143c6fad8f62\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzI5ZTU0NzBlNmFiODRiYWRiYzMxZjQ1MzJiYjc1NTRhNzk2ZDlkNTIi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/29e5470e6ab84badbc31f4532bb7554a796d9d52", "content": "{\"sha\": \"29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoyOWU1NDcwZTZhYjg0YmFkYmMzMWY0NTMyYmI3NTU0YTc5NmQ5ZDUy\", \"commit\": {\"author\": {\"name\": \"Francois-Xavier Le Bail\", \"email\": \"devel.fx.lebail@orange.fr\", \"date\": \"2017-03-22T18:37:04Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13028/BOOTP: Add a bounds check before fetching data\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'\", \"tree\": {\"sha\": \"04fe5dd0acb822afbfae63f5be768c17d788f1fa\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/04fe5dd0acb822afbfae63f5be768c17d788f1fa\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/29e5470e6ab84badbc31f4532bb7554a796d9d52/comments\", \"author\": {\"login\": \"fxlb\", \"id\": 2846004, \"node_id\": \"MDQ6VXNlcjI4NDYwMDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2846004?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fxlb\", \"html_url\": \"https://github.com/fxlb\", \"followers_url\": \"https://api.github.com/users/fxlb/followers\", \"following_url\": \"https://api.github.com/users/fxlb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fxlb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fxlb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fxlb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fxlb/orgs\", \"repos_url\": \"https://api.github.com/users/fxlb/repos\", \"events_url\": \"https://api.github.com/users/fxlb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fxlb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a77ff09c46560bc895dea11dc9fe643486b056ac\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/a77ff09c46560bc895dea11dc9fe643486b056ac\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/a77ff09c46560bc895dea11dc9fe643486b056ac\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"51e53844c1ff66a1f36e62f08bd58a4b6ee7f25d\", \"filename\": \"print-bootp.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/29e5470e6ab84badbc31f4532bb7554a796d9d52/print-bootp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/29e5470e6ab84badbc31f4532bb7554a796d9d52/print-bootp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bootp.c?ref=29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"patch\": \"@@ -322,6 +322,7 @@ bootp_print(netdissect_options *ndo,\\n \\tif (EXTRACT_16BITS(&bp->bp_secs))\\n \\t\\tND_PRINT((ndo, \\\", secs %d\\\", EXTRACT_16BITS(&bp->bp_secs)));\\n \\n+\\tND_TCHECK(bp->bp_flags);\\n \\tND_PRINT((ndo, \\\", Flags [%s]\\\",\\n \\t\\t  bittok2str(bootp_flag_values, \\\"none\\\", EXTRACT_16BITS(&bp->bp_flags))));\\n \\tif (ndo->ndo_vflag > 1)\"}, {\"sha\": \"8b90e1f5d543da44c81a9193b5adda6e05cb6175\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"patch\": \"@@ -533,6 +533,7 @@ isis_stlv_asan-2\\tisis_stlv_asan-2.pcap\\t\\tisis_stlv_asan-2.out\\t-v\\n isis_stlv_asan-3\\tisis_stlv_asan-3.pcap\\t\\tisis_stlv_asan-3.out\\t-v\\n isis_stlv_asan-4\\tisis_stlv_asan-4.pcap\\t\\tisis_stlv_asan-4.out\\t-v\\n lldp_mgmt_addr_tlv_asan\\tlldp_mgmt_addr_tlv_asan.pcap\\tlldp_mgmt_addr_tlv_asan.out\\t-v\\n+bootp_asan\\t\\tbootp_asan.pcap\\t\\t\\tbootp_asan.out\\t\\t-v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"d3ae8d99a63f7cf34dbed48110c889623f9fa5c6\", \"filename\": \"tests/bootp_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2Fbootp_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2Fbootp_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbootp_asan.out?ref=29e5470e6ab84badbc31f4532bb7554a796d9d52\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP (tos 0x0, ttl 252, id 40207, offset 0, flags [+, DF, rsvd], proto UDP (17), length 60951, bad cksum ff (->8336)!)\\n+    18.0.0.15.16896 > 107.95.83.32.68: BOOTP/DHCP, unknown (0x00), length 59384, htype 0, hlen 0, hops 13, xid 0x14000000, secs 3328 [|bootp]\"}, {\"sha\": \"7c8a6ae120740265185e0373511f30684c53547f\", \"filename\": \"tests/bootp_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2Fbootp_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/29e5470e6ab84badbc31f4532bb7554a796d9d52/tests%2Fbootp_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbootp_asan.pcap?ref=29e5470e6ab84badbc31f4532bb7554a796d9d52\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2RhNmYxYTY3N2JmYTQ0NzZhYmFlYWY5YjFhZmUxYzQzOTBmNTFiNDEi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41", "content": "{\"sha\": \"da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpkYTZmMWE2NzdiZmE0NDc2YWJhZWFmOWIxYWZlMWM0MzkwZjUxYjQx\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-23T21:11:30Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13034/PGM: Add a bounds check.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\\n\\nMove a return to make the code a bit cleaner (i.e., make it more obvious\\nthat if we don't have enough of the PGM header, we just print the source\\nand destination IP addresses, mark it as incomplete PGM, and don't try\\nto look at the PGM header).\", \"tree\": {\"sha\": \"c60a2cc08f95e4ffea89ab84d207d3c533f6adbe\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/c60a2cc08f95e4ffea89ab84d207d3c533f6adbe\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fe5ad997c499d6a7b033f52dc7581a23959abfd1\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/fe5ad997c499d6a7b033f52dc7581a23959abfd1\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/fe5ad997c499d6a7b033f52dc7581a23959abfd1\"}], \"stats\": {\"total\": 7, \"additions\": 5, \"deletions\": 2}, \"files\": [{\"sha\": \"8340f2c3eb43f5d05f0ba7048f78efbfa84e6635\", \"filename\": \"print-pgm.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/print-pgm.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/print-pgm.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-pgm.c?ref=da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"patch\": \"@@ -169,13 +169,12 @@ pgm_print(netdissect_options *ndo,\\n \\t\\t\\tND_PRINT((ndo, \\\"%s > %s: [|pgm]\\\",\\n \\t\\t\\t\\tip6addr_string(ndo, &ip6->ip6_src),\\n \\t\\t\\t\\tip6addr_string(ndo, &ip6->ip6_dst)));\\n-\\t\\t\\treturn;\\n \\t\\t} else {\\n \\t\\t\\tND_PRINT((ndo, \\\"%s > %s: [|pgm]\\\",\\n \\t\\t\\t\\tipaddr_string(ndo, &ip->ip_src),\\n \\t\\t\\t\\tipaddr_string(ndo, &ip->ip_dst)));\\n-\\t\\t\\treturn;\\n \\t\\t}\\n+\\t\\treturn;\\n \\t}\\n \\n \\tsport = EXTRACT_16BITS(&pgm->pgm_sport);\\n@@ -362,6 +361,7 @@ pgm_print(netdissect_options *ndo,\\n \\t     * and stopping if we don't have enough.\\n \\t     */\\n \\t    bp += (2 * sizeof(uint16_t));\\n+\\t    ND_TCHECK_16BITS(bp);\\n \\t    switch (EXTRACT_16BITS(bp)) {\\n \\t    case AFNUM_INET:\\n \\t\\tND_TCHECK2(*bp, sizeof(struct in_addr));\"}, {\"sha\": \"1c94dcca1669ccb43d18db75039d44f957e4678f\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"patch\": \"@@ -522,6 +522,7 @@ dhcp6_reconf_asan\\tdhcp6_reconf_asan.pcap\\t\\tdhcp6_reconf_asan.out\\t-v\\n pgm_opts_asan\\t\\tpgm_opts_asan.pcap\\t\\tpgm_opts_asan.out\\t-v\\n pgm_opts_asan_2\\t\\tpgm_opts_asan_2.pcap\\t\\tpgm_opts_asan_2.out\\t-v\\n pgm_opts_asan_3\\t\\tpgm_opts_asan_3.pcap\\t\\tpgm_opts_asan_3.out\\t-v\\n+pgm_group_addr_asan\\tpgm_group_addr_asan.pcap\\tpgm_group_addr_asan.out\\t-v\\n vtp_asan\\t\\tvtp_asan.pcap\\t\\t\\tvtp_asan.out\\t-v\\n vtp_asan-2\\t\\tvtp_asan-2.pcap\\t\\t\\tvtp_asan-2.out\\t-v\\n vtp_asan-3\\t\\tvtp_asan-3.pcap\\t\\t\\tvtp_asan-3.out\\t-v\"}, {\"sha\": \"a09d9b2ac4101577f923c905d76bc99be032c293\", \"filename\": \"tests/pgm_group_addr_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2Fpgm_group_addr_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2Fpgm_group_addr_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_group_addr_asan.out?ref=da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP (tos 0x41,ECT(1), id 40256, offset 0, flags [none], proto PGM (113), length 768, options (unknown 89 [bad length 232]), bad cksum 5959 (->5afd)!)\\n+    89.121.89.107 > 89.89.89.89: 89.121.89.107.32322 > 89.89.89.89.500: PGM, length 24818 0x00ff7f010347 [|pgm]\"}, {\"sha\": \"5c11567198dc5d378c4e29c579956f68ecb222c1\", \"filename\": \"tests/pgm_group_addr_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2Fpgm_group_addr_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41/tests%2Fpgm_group_addr_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fpgm_group_addr_asan.pcap?ref=da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzU3MWE2ZjMzZjQ3ZTdhMjM5NGZhMDhmOTI1ZTUzNDEzNWMyOWNmMWUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/571a6f33f47e7a2394fa08f925e534135c29cf1e", "content": "{\"sha\": \"571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo1NzFhNmYzM2Y0N2U3YTIzOTRmYTA4ZjkyNWU1MzQxMzVjMjljZjFl\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-03-23T21:37:56Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13035/Properly handle IS-IS IDs shorter than a system ID (MAC address).\\n\\nSome of them are variable-length, with a field giving the total length,\\nand therefore they can be shorter than 6 octets.  If one is, don't run\\npast the end.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"f66a8b09902f003d1afb24dffe8e6dd050fe8827\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/f66a8b09902f003d1afb24dffe8e6dd050fe8827\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/571a6f33f47e7a2394fa08f925e534135c29cf1e/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/da6f1a677bfa4476abaeaf9b1afe1c4390f51b41\"}], \"stats\": {\"total\": 78, \"additions\": 77, \"deletions\": 1}, \"files\": [{\"sha\": \"6285502845247c95ac3bb999bb934ccf99a84d2b\", \"filename\": \"print-isoclns.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/571a6f33f47e7a2394fa08f925e534135c29cf1e/print-isoclns.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/571a6f33f47e7a2394fa08f925e534135c29cf1e/print-isoclns.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isoclns.c?ref=571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"patch\": \"@@ -1646,8 +1646,12 @@ isis_print_id(const uint8_t *cp, int id_len)\\n     int i;\\n     static char id[sizeof(\\\"xxxx.xxxx.xxxx.yy-zz\\\")];\\n     char *pos = id;\\n+    int sysid_len;\\n \\n-    for (i = 1; i <= SYSTEM_ID_LEN; i++) {\\n+    sysid_len = SYSTEM_ID_LEN;\\n+    if (sysid_len > id_len)\\n+        sysid_len = id_len;\\n+    for (i = 1; i <= sysid_len; i++) {\\n         snprintf(pos, sizeof(id) - (pos - id), \\\"%02x\\\", *cp++);\\n \\tpos += strlen(pos);\\n \\tif (i == 2 || i == 4)\"}, {\"sha\": \"3adc5c7f37fa45b76a5a7d6b2c0f42625d95018b\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"patch\": \"@@ -539,6 +539,7 @@ isis_stlv_asan\\t\\tisis_stlv_asan.pcap\\t\\tisis_stlv_asan.out\\t-v\\n isis_stlv_asan-2\\tisis_stlv_asan-2.pcap\\t\\tisis_stlv_asan-2.out\\t-v\\n isis_stlv_asan-3\\tisis_stlv_asan-3.pcap\\t\\tisis_stlv_asan-3.out\\t-v\\n isis_stlv_asan-4\\tisis_stlv_asan-4.pcap\\t\\tisis_stlv_asan-4.out\\t-v\\n+isis_sysid_asan\\t\\tisis_sysid_asan.pcap\\t\\tisis_sysid_asan.out\\t-v\\n lldp_mgmt_addr_tlv_asan\\tlldp_mgmt_addr_tlv_asan.pcap\\tlldp_mgmt_addr_tlv_asan.out\\t-v\\n bootp_asan\\t\\tbootp_asan.pcap\\t\\t\\tbootp_asan.out\\t\\t-v\\n bootp_asan-2\\t\\tbootp_asan-2.pcap\\t\\tbootp_asan-2.out\\t-v\"}, {\"sha\": \"0e5a703334926a735cad3766c77f4dcdfdd50502\", \"filename\": \"tests/isis_sysid_asan.out\", \"status\": \"added\", \"additions\": 71, \"deletions\": 0, \"changes\": 71, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2Fisis_sysid_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2Fisis_sysid_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis_sysid_asan.out?ref=571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"patch\": \"@@ -0,0 +1,71 @@\\n+UI 22! IS-IS, length 469869187\\n+\\tL2 Lan IIH, hlen: 27, v: 1, pdu-v: 1, sys-id-len: 6 (0), max-area: 224 (224)\\n+\\t  source-id: fed0.f90f.58af,  holding time: 34047s, Flags: [unknown circuit type 0x00]\\n+\\t  lan-id:    0105.0088.a204.00, Priority: 65, PDU length: 4096\\n+\\t    unknown TLV #64, length: 128\\n+\\t\\t0x0000:  ff10 8e12 0001 1b01 0000 6b00 fbcf f90f\\n+\\t\\t0x0010:  58af 84ff 1000 4901 0000 88a2 011c 000c\\n+\\t\\t0x0020:  0281 0083 1b01 0010 019d e000 fed0 f90f\\n+\\t\\t0x0030:  58af 84ff 1000 4101 0500 88a2 011c 0272\\n+\\t\\t0x0040:  0c2a 2205 831b 011c 0010 0000 0583 1b01\\n+\\t\\t0x0050:  0010 01ab e000 fe08 0808 0808 08cb 0808\\n+\\t\\t0x0060:  0808 0808 0808 0880 0008 7f08 0808 0808\\n+\\t\\t0x0070:  08fd 0808 080c 0608 0807 0808 0808 0408\\n+\\t    Padding TLV #8, length: 8\\n+\\t    Padding TLV #8, length: 8\\n+\\t    Padding TLV #8, length: 7\\n+\\t    Padding TLV #8, length: 8\\n+\\t    Padding TLV #8, length: 0\\n+\\t    Padding TLV #8, length: 8\\n+\\t    unknown TLV #100, length: 0\\n+\\t    unknown TLV #32, length: 16\\n+\\t\\t0x0000:  2020 2020 3c20 2020 2020 2020 205a 1a31\\n+\\t    IS Neighbor(s) (variable length) TLV #7, length: 238\\n+\\t      LAN address length 1 bytes \\n+\\t\\tIS Neighbor: 5a\\n+\\t\\tIS Neighbor: 45\\n+\\t\\tIS Neighbor: 50\\n+\\t\\tIS Neighbor: 48\\n+\\t\\tIS Neighbor: 59\\n+\\t\\tIS Neighbor: 52\\n+\\t\\tIS Neighbor: 5f\\n+\\t\\tIS Neighbor: 43\\n+\\t\\tIS Neighbor: 54\\n+\\t\\tIS Neighbor: 4c\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 00\\n+\\t\\tIS Neighbor: 00\\n+\\t\\tIS Neighbor: 08\\n+\\t\\tIS Neighbor: 00\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 64\\n+\\t\\tIS Neighbor: 00\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 10\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20\\n+\\t\\tIS Neighbor: 20 [|isis]\"}, {\"sha\": \"8190b4e6550292613131d3eaed9f2aa2538c1bcb\", \"filename\": \"tests/isis_sysid_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2Fisis_sysid_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/571a6f33f47e7a2394fa08f925e534135c29cf1e/tests%2Fisis_sysid_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis_sysid_asan.pcap?ref=571a6f33f47e7a2394fa08f925e534135c29cf1e\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzg4YjJkYWM4MzdlODFjZjU2ZGNlMDVlNmU3YjU5ODkzMzJjMDA5MmQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/88b2dac837e81cf56dce05e6e7b5989332c0092d", "content": "{\"sha\": \"88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo4OGIyZGFjODM3ZTgxY2Y1NmRjZTA1ZTZlN2I1OTg5MzMyYzAwOTJk\", \"commit\": {\"author\": {\"name\": \"Francois-Xavier Le Bail\", \"email\": \"devel.fx.lebail@orange.fr\", \"date\": \"2017-03-23T23:55:18Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13036/OSPFv3: Add a bounds check before fetching data\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s), modified\\nso the capture file won't be rejected as an invalid capture.\", \"tree\": {\"sha\": \"8da67b71244580404b9e688280496d1f5a4f5cd4\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/8da67b71244580404b9e688280496d1f5a4f5cd4\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/88b2dac837e81cf56dce05e6e7b5989332c0092d/comments\", \"author\": {\"login\": \"fxlb\", \"id\": 2846004, \"node_id\": \"MDQ6VXNlcjI4NDYwMDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2846004?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fxlb\", \"html_url\": \"https://github.com/fxlb\", \"followers_url\": \"https://api.github.com/users/fxlb/followers\", \"following_url\": \"https://api.github.com/users/fxlb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fxlb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fxlb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fxlb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fxlb/orgs\", \"repos_url\": \"https://api.github.com/users/fxlb/repos\", \"events_url\": \"https://api.github.com/users/fxlb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fxlb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/571a6f33f47e7a2394fa08f925e534135c29cf1e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/571a6f33f47e7a2394fa08f925e534135c29cf1e\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"381fdbbf71b33d39a5101da617c4aeabab83cc37\", \"filename\": \"print-ospf6.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/88b2dac837e81cf56dce05e6e7b5989332c0092d/print-ospf6.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/88b2dac837e81cf56dce05e6e7b5989332c0092d/print-ospf6.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-ospf6.c?ref=88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"patch\": \"@@ -735,6 +735,7 @@ ospf6_decode_v3(netdissect_options *ndo,\\n \\tcase OSPF_TYPE_HELLO: {\\n \\t\\tregister const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);\\n \\n+\\t\\tND_TCHECK_32BITS(&hellop->hello_options);\\n \\t\\tND_PRINT((ndo, \\\"\\\\n\\\\tOptions [%s]\\\",\\n \\t\\t          bittok2str(ospf6_option_values, \\\"none\\\",\\n \\t\\t          EXTRACT_32BITS(&hellop->hello_options))));\"}, {\"sha\": \"20d655c8862680700748e33e7383cebbeac5ed93\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"patch\": \"@@ -549,6 +549,7 @@ pim_header_asan-2\\tpim_header_asan-2.pcap\\t\\tpim_header_asan-2.out\\t-v\\n pim_header_asan-3\\tpim_header_asan-3.pcap\\t\\tpim_header_asan-3.out\\t-v\\n ip6_frag_asan\\t\\tip6_frag_asan.pcap\\t\\tip6_frag_asan.out\\t-v\\n radius_attr_asan\\tradius_attr_asan.pcap\\t\\tradius_attr_asan.out\\t-v\\n+ospf6_decode_v3_asan\\tospf6_decode_v3_asan.pcap\\tospf6_decode_v3_asan.out -v\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"aef79e0a7bcd2ebfb865daaccb6dacbad9a2dfb4\", \"filename\": \"tests/ospf6_decode_v3_asan.out\", \"status\": \"added\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2Fospf6_decode_v3_asan.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2Fospf6_decode_v3_asan.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fospf6_decode_v3_asan.out?ref=88b2dac837e81cf56dce05e6e7b5989332c0092d\", \"patch\": \"@@ -0,0 +1,2 @@\\n+IP6 (class 0x76, flowlabel 0xf6701, hlim 109, next-header OSPF (89) payload length: 30311) 6767:6780:6767:a102:4:b6:5853:f040 > 1000:a32:8847:1::116: OSPFv3, Hello, length 30311\\n+\\tRouter-ID 1.1.0.34, Area 0.255.2.2, Instance 82 [|ospf3]\"}, {\"sha\": \"2d50b9c1f4c865d1807e7ef51aa5f7160df16280\", \"filename\": \"tests/ospf6_decode_v3_asan.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2Fospf6_decode_v3_asan.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/88b2dac837e81cf56dce05e6e7b5989332c0092d/tests%2Fospf6_decode_v3_asan.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fospf6_decode_v3_asan.pcap?ref=88b2dac837e81cf56dce05e6e7b5989332c0092d\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzczMzUxNjNhNmVmODJkNDZmZjE4ZjNlNjA5OWExNTc3NDcyNDE2Mjki.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7335163a6ef82d46ff18f3e6099a157747241629", "content": "{\"sha\": \"7335163a6ef82d46ff18f3e6099a157747241629\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo3MzM1MTYzYTZlZjgyZDQ2ZmYxOGYzZTYwOTlhMTU3NzQ3MjQxNjI5\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-06-12T01:27:27Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13038/PPP: Do bounds checking.\\n\\nThis fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.\\n\\nAdd a test using the capture file supplied by Katie Holly.\", \"tree\": {\"sha\": \"9dd943cdbdf6fc41294782b943350601c5e01c45\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/9dd943cdbdf6fc41294782b943350601c5e01c45\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/7335163a6ef82d46ff18f3e6099a157747241629\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7335163a6ef82d46ff18f3e6099a157747241629\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/7335163a6ef82d46ff18f3e6099a157747241629\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/7335163a6ef82d46ff18f3e6099a157747241629/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3cb7c9ac790752e2f06ae7d8f4da3c75c934584c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3cb7c9ac790752e2f06ae7d8f4da3c75c934584c\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3cb7c9ac790752e2f06ae7d8f4da3c75c934584c\"}], \"stats\": {\"total\": 13, \"additions\": 13, \"deletions\": 0}, \"files\": [{\"sha\": \"891761728bbb7450368c7b838e8a82c1d7c681bd\", \"filename\": \"print-ppp.c\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7335163a6ef82d46ff18f3e6099a157747241629/print-ppp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7335163a6ef82d46ff18f3e6099a157747241629/print-ppp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-ppp.c?ref=7335163a6ef82d46ff18f3e6099a157747241629\", \"patch\": \"@@ -811,6 +811,15 @@ handle_mlppp(netdissect_options *ndo,\\n     if (!ndo->ndo_eflag)\\n         ND_PRINT((ndo, \\\"MLPPP, \\\"));\\n \\n+    if (length < 2) {\\n+        ND_PRINT((ndo, \\\"[|mlppp]\\\"));\\n+        return;\\n+    }\\n+    if (!ND_TTEST_16BITS(p)) {\\n+        ND_PRINT((ndo, \\\"[|mlppp]\\\"));\\n+        return;\\n+    }\\n+\\n     ND_PRINT((ndo, \\\"seq 0x%03x, Flags [%s], length %u\\\",\\n            (EXTRACT_16BITS(p))&0x0fff, /* only support 12-Bit sequence space for now */\\n            bittok2str(ppp_ml_flag_values, \\\"none\\\", *p & 0xc0),\"}, {\"sha\": \"bdc7ff40c685280126a7642fa6d85e9b05d2136e\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7335163a6ef82d46ff18f3e6099a157747241629/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7335163a6ef82d46ff18f3e6099a157747241629/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=7335163a6ef82d46ff18f3e6099a157747241629\", \"patch\": \"@@ -554,6 +554,9 @@ radius_attr_asan\\tradius_attr_asan.pcap\\t\\tradius_attr_asan.out\\t-v\\n ospf6_decode_v3_asan\\tospf6_decode_v3_asan.pcap\\tospf6_decode_v3_asan.out -v\\n ip_ts_opts_asan\\t\\tip_ts_opts_asan.pcap\\t\\tip_ts_opts_asan.out\\t-v\\n \\n+# bad packets from Katie Holly\\n+mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\\n+\\n # RTP tests\\n # fuzzed pcap\\n rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -v -T rtp\"}, {\"sha\": \"9230189c768d967c379567e2b07a8455587a513c\", \"filename\": \"tests/mlppp-oobr.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7335163a6ef82d46ff18f3e6099a157747241629/tests%2Fmlppp-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7335163a6ef82d46ff18f3e6099a157747241629/tests%2Fmlppp-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmlppp-oobr.out?ref=7335163a6ef82d46ff18f3e6099a157747241629\", \"patch\": \"@@ -0,0 +1 @@\\n+MLPPP, [|mlppp]\"}, {\"sha\": \"95b1bbe3645018f845f0b6586455541e3a9e4883\", \"filename\": \"tests/mlppp-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/7335163a6ef82d46ff18f3e6099a157747241629/tests%2Fmlppp-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/7335163a6ef82d46ff18f3e6099a157747241629/tests%2Fmlppp-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fmlppp-oobr.pcap?ref=7335163a6ef82d46ff18f3e6099a157747241629\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2Y0YjllMjRjNzM4NGQ4ODJhN2Y0MzRjYzc0MTM5MjViZjg3MWQ2M2Ui.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f4b9e24c7384d882a7f434cc7413925bf871d63e", "content": "{\"sha\": \"f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpmNGI5ZTI0YzczODRkODgyYTdmNDM0Y2M3NDEzOTI1YmY4NzFkNjNl\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-06-13T05:16:12Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13041/ICMP6: Add more bounds checks.\\n\\nThis fixes a buffer over-read discovered by Kim Gwan Yeong.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"c1988caca5e23a75613b3f16c7489b64b5d82d8d\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/c1988caca5e23a75613b3f16c7489b64b5d82d8d\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f4b9e24c7384d882a7f434cc7413925bf871d63e/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"42fe19f2988daf295e90e453c10728d60a696040\", \"filename\": \"print-icmp6.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f4b9e24c7384d882a7f434cc7413925bf871d63e/print-icmp6.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f4b9e24c7384d882a7f434cc7413925bf871d63e/print-icmp6.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-icmp6.c?ref=f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"patch\": \"@@ -1699,6 +1699,7 @@ icmp6_nodeinfo_print(netdissect_options *ndo, u_int icmp6len, const u_char *bp,\\n \\n \\t\\tneedcomma = 0;\\n \\n+\\t\\tND_TCHECK2(*dp, sizeof(*ni6));\\n \\t\\tni6 = (const struct icmp6_nodeinfo *)dp;\\n \\t\\tND_PRINT((ndo,\\\" node information reply\\\"));\\n \\t\\tND_PRINT((ndo,\\\" (\\\"));\\t/*)*/\\n@@ -1753,6 +1754,7 @@ icmp6_nodeinfo_print(netdissect_options *ndo, u_int icmp6len, const u_char *bp,\\n \\t\\t\\t\\tND_PRINT((ndo,\\\", \\\"));\\n \\t\\t\\tND_PRINT((ndo,\\\"DNS name\\\"));\\n \\t\\t\\tcp = (const u_char *)(ni6 + 1) + 4;\\n+\\t\\t\\tND_TCHECK(cp[0]);\\n \\t\\t\\tif (cp[0] == ep - cp - 1) {\\n \\t\\t\\t\\t/* icmp-name-lookup-03, pascal string */\\n \\t\\t\\t\\tif (ndo->ndo_vflag)\"}, {\"sha\": \"a8811bc696a5cedb1f76e86625c7fccea2549688\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"patch\": \"@@ -560,6 +560,7 @@ mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\\n \\n # bad packets from Kim Gwan Yeong\\n mptcp-dss-oobr\\t\\tmptcp-dss-oobr.pcap\\t\\tmptcp-dss-oobr.out\\t-v\\n+icmp6_nodeinfo_oobr\\ticmp6_nodeinfo_oobr.pcap\\ticmp6_nodeinfo_oobr.out\\n \\n # RTP tests\\n # fuzzed pcap\"}, {\"sha\": \"0856ea2f01d389676d7bebcdb6d59b8de7681aac\", \"filename\": \"tests/icmp6_nodeinfo_oobr.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2Ficmp6_nodeinfo_oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2Ficmp6_nodeinfo_oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp6_nodeinfo_oobr.out?ref=f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"patch\": \"@@ -0,0 +1 @@\\n+IP6 a072:7f00:1:7f00:1:e01a:17:6785 > c903::a002:8018:fe30:0:204: ICMP6, who-are-you reply[|icmp6], length 4\"}, {\"sha\": \"4c3ff04dea98b5ee3589256eac68c4fea39767fc\", \"filename\": \"tests/icmp6_nodeinfo_oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2Ficmp6_nodeinfo_oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/f4b9e24c7384d882a7f434cc7413925bf871d63e/tests%2Ficmp6_nodeinfo_oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Ficmp6_nodeinfo_oobr.pcap?ref=f4b9e24c7384d882a7f434cc7413925bf871d63e\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzM5NTgyYzA0Y2M1ZTM0MDU0YjI5MzZiNDIzMDcyZmI5ZGYyZmY2ZWYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/39582c04cc5e34054b2936b423072fb9df2ff6ef", "content": "{\"sha\": \"39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjozOTU4MmMwNGNjNWUzNDA1NGIyOTM2YjQyMzA3MmZiOWRmMmZmNmVm\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-07-29T17:52:38Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13042/HNCP: add DHCPv6-Data bounds checks\\n\\nhncp_print_rec() validates each HNCP TLV to be within the declared as\\nwell as the on-the-wire packet space. However, dhcpv6_print() in the same\\nfile didn't do the same for the DHCPv6 options within the HNCP\\nDHCPv6-Data TLV value, which could cause an out-of-bounds read when\\ndecoding an invalid packet. Add missing checks to dhcpv6_print().\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"fe9574ee05d00aa37b0ff7252abb0c04b6ddbab4\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/fe9574ee05d00aa37b0ff7252abb0c04b6ddbab4\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/39582c04cc5e34054b2936b423072fb9df2ff6ef/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/f4b9e24c7384d882a7f434cc7413925bf871d63e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/f4b9e24c7384d882a7f434cc7413925bf871d63e\"}], \"stats\": {\"total\": 17, \"additions\": 17, \"deletions\": 0}, \"files\": [{\"sha\": \"d0c9a3ea633416cc3557c04a8815499019ef8eae\", \"filename\": \"print-hncp.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/39582c04cc5e34054b2936b423072fb9df2ff6ef/print-hncp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/39582c04cc5e34054b2936b423072fb9df2ff6ef/print-hncp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-hncp.c?ref=39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"patch\": \"@@ -318,6 +318,8 @@ dhcpv6_print(netdissect_options *ndo,\\n \\n     i = 0;\\n     while (i < length) {\\n+        if (i + 4 > length)\\n+            return -1;\\n         tlv = cp + i;\\n         type = EXTRACT_16BITS(tlv);\\n         optlen = EXTRACT_16BITS(tlv + 2);\\n@@ -329,6 +331,8 @@ dhcpv6_print(netdissect_options *ndo,\\n \\n         ND_PRINT((ndo, \\\"%s\\\", tok2str(dh6opt_str, \\\"Unknown\\\", type)));\\n         ND_PRINT((ndo,\\\" (%u)\\\", optlen + 4 ));\\n+        if (i + 4 + optlen > length)\\n+            return -1;\\n \\n         switch (type) {\\n             case DH6OPT_DNS_SERVERS:\"}, {\"sha\": \"c72f7de6f1ed6ac2bf03acdd857a3c967d5638b2\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"patch\": \"@@ -554,6 +554,12 @@ radius_attr_asan\\tradius_attr_asan.pcap\\t\\tradius_attr_asan.out\\t-v\\n ospf6_decode_v3_asan\\tospf6_decode_v3_asan.pcap\\tospf6_decode_v3_asan.out -v\\n ip_ts_opts_asan\\t\\tip_ts_opts_asan.pcap\\t\\tip_ts_opts_asan.out\\t-v\\n isakmpv1-attr-oobr\\tisakmpv1-attr-oobr.pcap\\t\\tisakmpv1-attr-oobr.out\\t-v\\n+# The case below depends on the bug in print-hncp.c, which at the time of\\n+# discovery had codepoints for DHCPv6-Data and DHCPv4-Data swapped around.\\n+# After the bugfix the output will be different because of the different\\n+# code path and will not test the vulnerability unless modified respectively.\\n+# The .pcap file is truncated after the 1st packet.\\n+hncp_dhcpv6data-oobr\\thncp_dhcpv6data-oobr.pcap\\thncp_dhcpv6data-oobr.out -v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"376502d90586d4c64c7474ed199f97d5af212cc9\", \"filename\": \"tests/hncp_dhcpv6data-oobr.out\", \"status\": \"added\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2Fhncp_dhcpv6data-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2Fhncp_dhcpv6data-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhncp_dhcpv6data-oobr.out?ref=39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"patch\": \"@@ -0,0 +1,7 @@\\n+IP6 (flowlabel 0x01cc3, hlim 234, next-header UDP (17) payload length: 11025) 400::e4ff:ffff:adf9:8900:0.1646 > 62:9de3:ff47:ebec:8206:ff00:ad:ff00.8231: hncp (11017)\\n+\\tFuture use: type=16384 (5)\\n+\\tDHCPv6-Data (25)\\n+\\t\\tUnknown (4)\\n+\\t\\tUnknown (4)\\n+\\t\\tSNTP-servers (61956)  (invalid)\\n+\\t[|hncp]\"}, {\"sha\": \"3430e9a8587613a3a7849bbb18dc29993332ef42\", \"filename\": \"tests/hncp_dhcpv6data-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2Fhncp_dhcpv6data-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/39582c04cc5e34054b2936b423072fb9df2ff6ef/tests%2Fhncp_dhcpv6data-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhncp_dhcpv6data-oobr.pcap?ref=39582c04cc5e34054b2936b423072fb9df2ff6ef\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2MyZjY4MzNkZGRlY2YyZDVmYjg5YzljODk4ZWVlOTk4MWRhMzQyZWQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c2f6833dddecf2d5fb89c9c898eee9981da342ed", "content": "{\"sha\": \"c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpjMmY2ODMzZGRkZWNmMmQ1ZmI4OWM5Yzg5OGVlZTk5ODFkYTM0MmVk\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-07-29T20:45:35Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13044/HNCP: add DHCPv4-Data bounds checks\\n\\ndhcpv4_print() in print-hncp.c had the same bug as dhcpv6_print(), apply\\na fix along the same lines.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"9b7935343afd8bf4b457232d9c5bf6c93b3f8efe\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/9b7935343afd8bf4b457232d9c5bf6c93b3f8efe\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/c2f6833dddecf2d5fb89c9c898eee9981da342ed/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/39582c04cc5e34054b2936b423072fb9df2ff6ef\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/39582c04cc5e34054b2936b423072fb9df2ff6ef\"}], \"stats\": {\"total\": 10, \"additions\": 10, \"deletions\": 0}, \"files\": [{\"sha\": \"c0e0064481c44debca94b2cfd70eabbe54cfa227\", \"filename\": \"print-hncp.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c2f6833dddecf2d5fb89c9c898eee9981da342ed/print-hncp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c2f6833dddecf2d5fb89c9c898eee9981da342ed/print-hncp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-hncp.c?ref=c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"patch\": \"@@ -270,6 +270,8 @@ dhcpv4_print(netdissect_options *ndo,\\n \\n     i = 0;\\n     while (i < length) {\\n+        if (i + 2 > length)\\n+            return -1;\\n         tlv = cp + i;\\n         type = (uint8_t)tlv[0];\\n         optlen = (uint8_t)tlv[1];\\n@@ -281,6 +283,8 @@ dhcpv4_print(netdissect_options *ndo,\\n \\n         ND_PRINT((ndo, \\\"%s\\\", tok2str(dh4opt_str, \\\"Unknown\\\", type)));\\n         ND_PRINT((ndo,\\\" (%u)\\\", optlen + 2 ));\\n+        if (i + 2 + optlen > length)\\n+            return -1;\\n \\n         switch (type) {\\n         case DH4OPT_DNS_SERVERS:\"}, {\"sha\": \"b42ba5b1490d9a98e531c44cdbf2afa67b8a65d7\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"patch\": \"@@ -560,6 +560,8 @@ isakmpv1-attr-oobr\\tisakmpv1-attr-oobr.pcap\\t\\tisakmpv1-attr-oobr.out\\t-v\\n # code path and will not test the vulnerability unless modified respectively.\\n # The .pcap file is truncated after the 1st packet.\\n hncp_dhcpv6data-oobr\\thncp_dhcpv6data-oobr.pcap\\thncp_dhcpv6data-oobr.out -v -c1\\n+# Same comments apply to the case below.\\n+hncp_dhcpv4data-oobr\\thncp_dhcpv4data-oobr.pcap\\thncp_dhcpv4data-oobr.out -v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"7d558dd9d16e16a263b6f7690df9c92b4d0b802e\", \"filename\": \"tests/hncp_dhcpv4data-oobr.out\", \"status\": \"added\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2Fhncp_dhcpv4data-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2Fhncp_dhcpv4data-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhncp_dhcpv4data-oobr.out?ref=c2f6833dddecf2d5fb89c9c898eee9981da342ed\", \"patch\": \"@@ -0,0 +1,4 @@\\n+IP truncated-ip - 260 bytes missing! (tos 0x12,ECT(0), ttl 48, id 21323, offset 0, flags [+, DF, rsvd], proto UDP (17), length 296, bad cksum 8e0f (->cd08)!)\\n+    1.2.7.0.1812 > 128.253.0.96.8231: hncp (268)\\n+\\tDHCPv4-Data (6)\\n+\\t\\tDNS-server (98) (invalid)\"}, {\"sha\": \"fb7c7766ad6f131f47c75e048a501de4d9cafe0a\", \"filename\": \"tests/hncp_dhcpv4data-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2Fhncp_dhcpv4data-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/c2f6833dddecf2d5fb89c9c898eee9981da342ed/tests%2Fhncp_dhcpv4data-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fhncp_dhcpv4data-oobr.pcap?ref=c2f6833dddecf2d5fb89c9c898eee9981da342ed\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2QxMGEwZjk4MGZlOGY5NDA3YWIxZmZiZDYxMjY0MTQzM2ViZTE3NWUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d10a0f980fe8f9407ab1ffbd612641433ebe175e", "content": "{\"sha\": \"d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpkMTBhMGY5ODBmZThmOTQwN2FiMWZmYmQ2MTI2NDE0MzNlYmUxNzVl\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-03T21:34:44Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13046/BGP: fix an existing bounds check for PMSI Tunnel\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"28434642bbb98f2df0b9bb0a90dfda1d5db61c7a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/28434642bbb98f2df0b9bb0a90dfda1d5db61c7a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d10a0f980fe8f9407ab1ffbd612641433ebe175e/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3b36ec4e713dea9266db11975066c425aa669b6c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3b36ec4e713dea9266db11975066c425aa669b6c\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3b36ec4e713dea9266db11975066c425aa669b6c\"}], \"stats\": {\"total\": 14, \"additions\": 13, \"deletions\": 1}, \"files\": [{\"sha\": \"d7a336a4603a0e8931cd72fef255cc464814f937\", \"filename\": \"print-bgp.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d10a0f980fe8f9407ab1ffbd612641433ebe175e/print-bgp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d10a0f980fe8f9407ab1ffbd612641433ebe175e/print-bgp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"patch\": \"@@ -2123,11 +2123,11 @@ bgp_attr_print(netdissect_options *ndo,\\n         {\\n                 uint8_t tunnel_type, flags;\\n \\n+                ND_TCHECK2(tptr[0], 5);\\n                 tunnel_type = *(tptr+1);\\n                 flags = *tptr;\\n                 tlen = len;\\n \\n-                ND_TCHECK2(tptr[0], 5);\\n                 ND_PRINT((ndo, \\\"\\\\n\\\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\\\",\\n                        tok2str(bgp_pmsi_tunnel_values, \\\"Unknown\\\", tunnel_type),\\n                        tunnel_type,\"}, {\"sha\": \"7532e24031120e9ccf654b6bf0602f82e5be05ac\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"patch\": \"@@ -563,6 +563,7 @@ hncp_dhcpv6data-oobr\\thncp_dhcpv6data-oobr.pcap\\thncp_dhcpv6data-oobr.out -v -c1\\n # Same comments apply to the case below.\\n hncp_dhcpv4data-oobr\\thncp_dhcpv4data-oobr.pcap\\thncp_dhcpv4data-oobr.out -v -c1\\n vqp-oobr\\t\\tvqp-oobr.pcap\\t\\t\\tvqp-oobr.out\\t\\t-v -c1\\n+bgp_pmsi_tunnel-oobr\\tbgp_pmsi_tunnel-oobr.pcap\\tbgp_pmsi_tunnel-oobr.out -v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"3b73c7a64527196d38f941d3fae62b95308fe53f\", \"filename\": \"tests/bgp_pmsi_tunnel-oobr.out\", \"status\": \"added\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2Fbgp_pmsi_tunnel-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2Fbgp_pmsi_tunnel-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_pmsi_tunnel-oobr.out?ref=d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"patch\": \"@@ -0,0 +1,11 @@\\n+IP (tos 0x0, ttl 254, id 40207, offset 0, flags [+, DF, rsvd], proto TCP (6), length 296, bad cksum 8e15 (->3eaa)!)\\n+    241.0.32.19.179 > 239.0.0.1.0: Flags [none], seq 2146695561:2146695813, win 56026, options [unknown-161,eol], length 252: BGP\\n+\\tUpdate Message (2), length: 45\\n+\\t  Withdrawn routes: 3 bytes\\n+\\t  Attribute Set (128), length: 7, Flags [OTPE+f]: \\n+\\t    Origin AS: 4067\\n+\\t      Origin (1), length: 1EGP\\n+\\t      Unknown Attribute (19), length: 1, Flags [+1]: \\n+\\t    no Attribute 19 decoder\\n+\\t    0x0000:  01\\n+\\t      PMSI Tunnel (22), length: 1, Flags [+1]: [|BGP]\"}, {\"sha\": \"33cf660ce01808405e27a12974e51d8be673ed0d\", \"filename\": \"tests/bgp_pmsi_tunnel-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2Fbgp_pmsi_tunnel-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d10a0f980fe8f9407ab1ffbd612641433ebe175e/tests%2Fbgp_pmsi_tunnel-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_pmsi_tunnel-oobr.pcap?ref=d10a0f980fe8f9407ab1ffbd612641433ebe175e\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2Q1MTViNGI0YTMwMDQ3OWNkZjFhNmUwZDFiYjk1YmMxZjlmZWU1MTQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514", "content": "{\"sha\": \"d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpkNTE1YjRiNGEzMDA0NzljZGYxYTZlMGQxYmI5NWJjMWY5ZmVlNTE0\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-03T23:08:23Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13043/BGP: fix decoding of MVPN route types 6 and 7\\n\\nRFC 6514 Section 4.6 defines the structure for Shared Tree Join (6) and\\nSource Tree Join (7) multicast VPN route types. decode_multicast_vpn()\\ndidn't implement the Source AS field of that structure properly, adjust\\nthe offsets to put it right.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"8aafaab7ee4a8e92c092ace73763778c3fe1cc3a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/8aafaab7ee4a8e92c092ace73763778c3fe1cc3a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d10a0f980fe8f9407ab1ffbd612641433ebe175e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/d10a0f980fe8f9407ab1ffbd612641433ebe175e\"}], \"stats\": {\"total\": 18, \"additions\": 16, \"deletions\": 2}, \"files\": [{\"sha\": \"ced54c3dd23c114f2c5b2e73e381a416637f72e6\", \"filename\": \"print-bgp.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/print-bgp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/print-bgp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"patch\": \"@@ -965,13 +965,13 @@ decode_multicast_vpn(netdissect_options *ndo,\\n \\n         case BGP_MULTICAST_VPN_ROUTE_TYPE_SHARED_TREE_JOIN: /* fall through */\\n         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:\\n-            ND_TCHECK2(pptr[0], BGP_VPN_RD_LEN);\\n+            ND_TCHECK2(pptr[0], BGP_VPN_RD_LEN + 4);\\n             offset = strlen(buf);\\n \\t    snprintf(buf + offset, buflen - offset, \\\", RD: %s, Source-AS %s\\\",\\n \\t\\tbgp_vpn_rd_print(ndo, pptr),\\n \\t\\tas_printf(ndo, astostr, sizeof(astostr),\\n \\t\\tEXTRACT_32BITS(pptr + BGP_VPN_RD_LEN)));\\n-            pptr += BGP_VPN_RD_LEN;\\n+            pptr += BGP_VPN_RD_LEN + 4;\\n \\n             bgp_vpn_sg_print(ndo, pptr, buf, buflen);\\n             break;\"}, {\"sha\": \"63e7eee0000cad241b63f58579bd76449f18b903\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"patch\": \"@@ -564,6 +564,7 @@ hncp_dhcpv6data-oobr\\thncp_dhcpv6data-oobr.pcap\\thncp_dhcpv6data-oobr.out -v -c1\\n hncp_dhcpv4data-oobr\\thncp_dhcpv4data-oobr.pcap\\thncp_dhcpv4data-oobr.out -v -c1\\n vqp-oobr\\t\\tvqp-oobr.pcap\\t\\t\\tvqp-oobr.out\\t\\t-v -c1\\n bgp_pmsi_tunnel-oobr\\tbgp_pmsi_tunnel-oobr.pcap\\tbgp_pmsi_tunnel-oobr.out -v -c1\\n+bgp_mvpn_6_and_7\\tbgp_mvpn_6_and_7.pcap\\t\\tbgp_mvpn_6_and_7.out\\t-v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"3eb4a2d09cd9b03384d995bcaf3f0a84aa27fba0\", \"filename\": \"tests/bgp_mvpn_6_and_7.out\", \"status\": \"added\", \"additions\": 13, \"deletions\": 0, \"changes\": 13, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2Fbgp_mvpn_6_and_7.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2Fbgp_mvpn_6_and_7.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_mvpn_6_and_7.out?ref=d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"patch\": \"@@ -0,0 +1,13 @@\\n+IP (tos 0xc, ttl 254, id 21263, offset 0, flags [rsvd], proto TCP (6), length 517, bad cksum 8e15 (->99c9)!)\\n+    241.0.93.20.179 > 255.247.0.1.200: Flags [none], seq 2146691977:2146692450, win 56026, options [unknown-161,eol], length 473: BGP\\n+\\tUpdate Message (2), length: 45\\n+\\t  Withdrawn routes: 3 bytes\\n+\\t  Attribute Set (128), length: 7, Flags [OTPE+f]: \\n+\\t    Origin AS: 148\\n+\\t      Multi-Protocol Reach NLRI (14), length: 71, Flags [T+6]: \\n+\\t    AFI: IPv4 (1), SAFI: Multicast VPN (5), nh-length: 0, no SNPA\\n+\\t      Route-Type: Intra-AS I-PMSI (1), length: 0, RD: 62209:33686018 (= 2.2.2.2), Originator bogus address length 4294967232\\n+\\t      Route-Type: Unknown (0), length: 0\\n+\\t      Route-Type: Unknown (243), length: 1\\n+\\t      Route-Type: Inter-AS I-PMSI (2), length: 2, RD: unknown RD format, Source-AS 368115805\\n+\\t      Route-Type: Inter-AS I-PMSI (2), length: 2, RD: unknown RD format, Source-AS 335544320[|BGP]\"}, {\"sha\": \"a478b95d3d8091cb9dc422b605677eb9b5fa851a\", \"filename\": \"tests/bgp_mvpn_6_and_7.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2Fbgp_mvpn_6_and_7.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514/tests%2Fbgp_mvpn_6_and_7.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_mvpn_6_and_7.pcap?ref=d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2FhMDg1ODEwMDA5NmEzNDkwZWRmOTMwMzRhODBlNjZhNGQ2MWFhZDUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/aa0858100096a3490edf93034a80e66a4d61aad5", "content": "{\"sha\": \"aa0858100096a3490edf93034a80e66a4d61aad5\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjphYTA4NTgxMDAwOTZhMzQ5MGVkZjkzMDM0YTgwZTY2YTRkNjFhYWQ1\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-04T16:15:07Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13049/Rx: add a missing bounds check for Ubik\\n\\nOne of the case blocks in ubik_print() didn't check bounds before\\nfetching 32 bits of packet data and could overread past the captured\\npacket data by that amount.\\n\\nThis fixes a buffer over-read discovered by Henri Salo from Nixu\\nCorporation.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"65778eaa41d957baa670808b79edae52fe4a9511\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/65778eaa41d957baa670808b79edae52fe4a9511\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/aa0858100096a3490edf93034a80e66a4d61aad5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/aa0858100096a3490edf93034a80e66a4d61aad5\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/aa0858100096a3490edf93034a80e66a4d61aad5\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/aa0858100096a3490edf93034a80e66a4d61aad5/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514\"}], \"stats\": {\"total\": 5, \"additions\": 5, \"deletions\": 0}, \"files\": [{\"sha\": \"741d3043d2b355ed8aa1aaf97ae5514e8d924288\", \"filename\": \"print-rx.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/aa0858100096a3490edf93034a80e66a4d61aad5/print-rx.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/aa0858100096a3490edf93034a80e66a4d61aad5/print-rx.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-rx.c?ref=aa0858100096a3490edf93034a80e66a4d61aad5\", \"patch\": \"@@ -2577,6 +2577,7 @@ ubik_print(netdissect_options *ndo,\\n \\t\\t\\tINTOUT();\\n \\t\\t\\tND_PRINT((ndo, \\\" length\\\"));\\n \\t\\t\\tINTOUT();\\n+\\t\\t\\tND_TCHECK_32BITS(bp);\\n \\t\\t\\ttemp = EXTRACT_32BITS(bp);\\n \\t\\t\\tbp += sizeof(int32_t);\\n \\t\\t\\ttok2str(ubik_lock_types, \\\"type %d\\\", temp);\"}, {\"sha\": \"08cb0d9ac0c3c2a2002fe1371ad164f9b6d4d9c8\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=aa0858100096a3490edf93034a80e66a4d61aad5\", \"patch\": \"@@ -573,6 +573,9 @@ mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\\n mptcp-dss-oobr\\t\\tmptcp-dss-oobr.pcap\\t\\tmptcp-dss-oobr.out\\t-v\\n icmp6_nodeinfo_oobr\\ticmp6_nodeinfo_oobr.pcap\\ticmp6_nodeinfo_oobr.out\\n \\n+# bad packets from Henri Salo\\n+rx_ubik-oobr\\t\\trx_ubik-oobr.pcap\\t\\trx_ubik-oobr.out -c1\\n+\\n # RTP tests\\n # fuzzed pcap\\n rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -v -T rtp\"}, {\"sha\": \"f192432d4ae8d4eb1381bf5b5896d1a25c5ddab3\", \"filename\": \"tests/rx_ubik-oobr.out\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2Frx_ubik-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2Frx_ubik-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frx_ubik-oobr.out?ref=aa0858100096a3490edf93034a80e66a4d61aad5\", \"patch\": \"@@ -0,0 +1 @@\\n+IP truncated-ip - 2598 bytes missing! 222.241.104.198.3503 > 131.63.241.146.7002:  rx data pt ubik call disk-lock tid 50266112.32382 file 2122216448 pos 545160708 length 1087685554 [|ubik] (2632)\"}, {\"sha\": \"69caac9013e92c24114f0e553e3183f77cf6e2d7\", \"filename\": \"tests/rx_ubik-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2Frx_ubik-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/aa0858100096a3490edf93034a80e66a4d61aad5/tests%2Frx_ubik-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frx_ubik-oobr.pcap?ref=aa0858100096a3490edf93034a80e66a4d61aad5\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzNjOGEyYjBlOTFkOGQ4OTQ3ZTg5Mzg0ZGFjZjZiNTQ2NzMwODNlNzEi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3c8a2b0e91d8d8947e89384dacf6b54673083e71", "content": "{\"sha\": \"3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjozYzhhMmIwZTkxZDhkODk0N2U4OTM4NGRhY2Y2YjU0NjczMDgzZTcx\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-06T17:45:09Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13048/RSVP: fix decoding of Fast Reroute objects\\n\\nIn rsvp_obj_print() the case block for Class-Num 205 (FAST_REROUTE) from\\nRFC 4090 Section 4.1 could over-read accessing the buffer contents before\\nmaking the bounds check. Rearrange those steps the correct way around.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"eea9fe0ae3562b088c46a83231da62de652b068c\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/eea9fe0ae3562b088c46a83231da62de652b068c\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3c8a2b0e91d8d8947e89384dacf6b54673083e71/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6283c99a5196cb97399ca68f8793db6fde00b6af\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/6283c99a5196cb97399ca68f8793db6fde00b6af\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/6283c99a5196cb97399ca68f8793db6fde00b6af\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"bc599796a827cc117de78954b2b2e8441fb3a404\", \"filename\": \"print-rsvp.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3c8a2b0e91d8d8947e89384dacf6b54673083e71/print-rsvp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3c8a2b0e91d8d8947e89384dacf6b54673083e71/print-rsvp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-rsvp.c?ref=3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"patch\": \"@@ -1472,12 +1472,12 @@ rsvp_obj_print(netdissect_options *ndo,\\n         case RSVP_OBJ_FASTREROUTE:\\n             /* the differences between c-type 1 and 7 are minor */\\n             obj_ptr.rsvp_obj_frr = (const struct rsvp_obj_frr_t *)obj_tptr;\\n-            bw.i = EXTRACT_32BITS(obj_ptr.rsvp_obj_frr->bandwidth);\\n \\n             switch(rsvp_obj_ctype) {\\n             case RSVP_CTYPE_1: /* new style */\\n                 if (obj_tlen < sizeof(struct rsvp_obj_frr_t))\\n                     return-1;\\n+                bw.i = EXTRACT_32BITS(obj_ptr.rsvp_obj_frr->bandwidth);\\n                 ND_PRINT((ndo, \\\"%s  Setup Priority: %u, Holding Priority: %u, Hop-limit: %u, Bandwidth: %.10g Mbps\\\",\\n                        ident,\\n                        (int)obj_ptr.rsvp_obj_frr->setup_prio,\\n@@ -1496,6 +1496,7 @@ rsvp_obj_print(netdissect_options *ndo,\\n             case RSVP_CTYPE_TUNNEL_IPV4: /* old style */\\n                 if (obj_tlen < 16)\\n                     return-1;\\n+                bw.i = EXTRACT_32BITS(obj_ptr.rsvp_obj_frr->bandwidth);\\n                 ND_PRINT((ndo, \\\"%s  Setup Priority: %u, Holding Priority: %u, Hop-limit: %u, Bandwidth: %.10g Mbps\\\",\\n                        ident,\\n                        (int)obj_ptr.rsvp_obj_frr->setup_prio,\"}, {\"sha\": \"d8039517749c6ef2dcb71f0a296f3b4720baa232\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"patch\": \"@@ -565,6 +565,7 @@ hncp_dhcpv4data-oobr\\thncp_dhcpv4data-oobr.pcap\\thncp_dhcpv4data-oobr.out -v -c1\\n vqp-oobr\\t\\tvqp-oobr.pcap\\t\\t\\tvqp-oobr.out\\t\\t-v -c1\\n bgp_pmsi_tunnel-oobr\\tbgp_pmsi_tunnel-oobr.pcap\\tbgp_pmsi_tunnel-oobr.out -v -c1\\n bgp_mvpn_6_and_7\\tbgp_mvpn_6_and_7.pcap\\t\\tbgp_mvpn_6_and_7.out\\t-v -c1\\n+rsvp_fast_reroute-oobr\\trsvp_fast_reroute-oobr.pcap\\trsvp_fast_reroute-oobr.out -v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"0ca2a684b4759132dbf4a121da9ceed6b93fda9c\", \"filename\": \"tests/rsvp_fast_reroute-oobr.out\", \"status\": \"added\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2Frsvp_fast_reroute-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2Frsvp_fast_reroute-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_fast_reroute-oobr.out?ref=3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"patch\": \"@@ -0,0 +1,6 @@\\n+IP (tos 0x0, ttl 224, id 17920, offset 0, flags [none], proto RSVP (46), length 42024, bad cksum 3700 (->fc41)!)\\n+    0.203.243.128 > 0.26.0.0: \\n+\\tRSVPv1 Path Message (1), Flags: [Refresh reduction capable], length: 41218, ttl: 227, checksum: 0x00f4\\n+\\t  Fast Re-Route Object (205) Flags: [ignore and forward if unknown], Class-Type: Unknown (0), length: 4\\n+\\t  Fast Re-Route Object (205) Flags: [ignore and forward if unknown], Class-Type: Unknown (0), length: 4\\n+\\t\\t [|rsvp]\"}, {\"sha\": \"cc1d72e252c74c75114ccee032fb12e4a4de67c7\", \"filename\": \"tests/rsvp_fast_reroute-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2Frsvp_fast_reroute-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/3c8a2b0e91d8d8947e89384dacf6b54673083e71/tests%2Frsvp_fast_reroute-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_fast_reroute-oobr.pcap?ref=3c8a2b0e91d8d8947e89384dacf6b54673083e71\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzMzMTUzMGE0MDc2YzY5YmJkMmUzMjE0ZGI2Y2NiZTgzNGZiNzU2NDAi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/331530a4076c69bbd2e3214db6ccbe834fb75640", "content": "{\"sha\": \"331530a4076c69bbd2e3214db6ccbe834fb75640\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjozMzE1MzBhNDA3NmM2OWJiZDJlMzIxNGRiNmNjYmU4MzRmYjc1NjQw\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-06T19:54:42Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13047/ES-IS: put an existing bounds check right\\n\\nThe bounds check in esis_print() tested one pointer at the beginning of\\na loop that incremented another, make the trivial fix. While at it, make\\nthe function print a standard marker when it detects truncated data and\\nupdate some existing ES-IS tests respectively.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"d1e35c05681780b38a9c1e71c04c42c64d4c1e8a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/d1e35c05681780b38a9c1e71c04c42c64d4c1e8a\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/331530a4076c69bbd2e3214db6ccbe834fb75640\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/331530a4076c69bbd2e3214db6ccbe834fb75640\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/331530a4076c69bbd2e3214db6ccbe834fb75640\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/331530a4076c69bbd2e3214db6ccbe834fb75640/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/3c8a2b0e91d8d8947e89384dacf6b54673083e71\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/3c8a2b0e91d8d8947e89384dacf6b54673083e71\"}], \"stats\": {\"total\": 18, \"additions\": 12, \"deletions\": 6}, \"files\": [{\"sha\": \"06ad906415dc6743f23ab7f3a618978b4b31863e\", \"filename\": \"print-isoclns.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/print-isoclns.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/print-isoclns.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isoclns.c?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -1334,7 +1334,7 @@ esis_print(netdissect_options *ndo,\\n \\n             case ESIS_OPTION_PROTOCOLS:\\n                 while (opli>0) {\\n-                    ND_TCHECK(*pptr);\\n+                    ND_TCHECK(*tptr);\\n                     ND_PRINT((ndo, \\\"%s (0x%02x)\\\",\\n                            tok2str(nlpid_values,\\n                                    \\\"unknown\\\",\\n@@ -1367,7 +1367,7 @@ esis_print(netdissect_options *ndo,\\n             pptr += opli;\\n         }\\n trunc:\\n-\\treturn;\\n+        ND_PRINT((ndo, \\\"[|esis]\\\"));\\n }\\n \\n static void\"}, {\"sha\": \"62e705bf387fac4a9c777deb6bc158e5fde6c8c8\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -566,6 +566,7 @@ vqp-oobr\\t\\tvqp-oobr.pcap\\t\\t\\tvqp-oobr.out\\t\\t-v -c1\\n bgp_pmsi_tunnel-oobr\\tbgp_pmsi_tunnel-oobr.pcap\\tbgp_pmsi_tunnel-oobr.out -v -c1\\n bgp_mvpn_6_and_7\\tbgp_mvpn_6_and_7.pcap\\t\\tbgp_mvpn_6_and_7.out\\t-v -c1\\n rsvp_fast_reroute-oobr\\trsvp_fast_reroute-oobr.pcap\\trsvp_fast_reroute-oobr.out -v -c1\\n+esis_opt_prot-oobr\\tesis_opt_prot-oobr.pcap\\t\\tesis_opt_prot-oobr.out\\t-v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"359eb0fa792b7bf75badc3843ca192321be7e013\", \"filename\": \"tests/esis_opt_prot-oobr.out\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_opt_prot-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_opt_prot-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fesis_opt_prot-oobr.out?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -0,0 +1,5 @@\\n+ES-IS, length 33559803\\n+\\tredirect (6), v: 1, checksum: 0x00c6 (unverified), holding time: 2303s, length indicator: 54\\n+\\t  00.8e\\n+\\t  SNPA (length: 0): <empty>\\n+\\t  Protocols supported Option #129, length 11, value: CLNP (0x81), [|esis]\"}, {\"sha\": \"c50cb67eca7abd05558225bc5bebfe647b760fae\", \"filename\": \"tests/esis_opt_prot-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_opt_prot-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_opt_prot-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fesis_opt_prot-oobr.pcap?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\"}, {\"sha\": \"109d259193b2e716532afe4f3fe3f88f51ddaeaf\", \"filename\": \"tests/esis_snpa_asan-3.out\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-3.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-3.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fesis_snpa_asan-3.out?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -4,4 +4,4 @@ UI 22! ES-IS, length 65565\\n UI 22! ES-IS, length 2650865693\\n \\tredirect (6), v: 1, checksum: 0x0300 (incorrect should be 0xbce5), holding time: 21480s, length indicator: 17\\n \\t  ec.ff00.00\\n-\\t  SNPA (length: 0): <empty>\\n+\\t  SNPA (length: 0): <empty>[|esis]\"}, {\"sha\": \"10a52d46f695897973bc3f0ceb7634bd582e2514\", \"filename\": \"tests/esis_snpa_asan-4.out\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-4.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-4.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fesis_snpa_asan-4.out?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -7,7 +7,7 @@ UI 22! ES-IS, length 65565\\n \\tredirect (6), v: 1, checksum: 0x7034 (incorrect should be 0x44ec), holding time: 21315s, length indicator: 16\\n \\t  02.0400\\n \\t  SNPA (length: 0): <empty>\\n-\\t  Unknown Option #0, length 0, value: \\n+\\t  Unknown Option #0, length 0, value: [|esis]\\n UI 32! ES-IS, length 65565\\n \\tESH (2), v: 1, checksum: 0x70a1 (incorrect should be 0xfb4e), holding time: 21315s, length indicator: 17\\n \\t  Number of Source Addresses: 2\\n@@ -17,5 +17,5 @@ UI 22! ES-IS, length 4244701213\\n \\tredirect (6), v: 1, checksum: 0x7034 (incorrect should be 0x36fe), holding time: 21315s, length indicator: 17\\n \\t  isonsap_string: illegal length\\n \\t  SNPA (length: 0): <empty>\\n-\\t  NET (length: 4) 00.0000.00\\n+\\t  NET (length: 4) 00.0000.00[|esis]\\n Q.922, invalid address\"}, {\"sha\": \"527214cb3360be73bfe2ac35b24ae0a42bb2d192\", \"filename\": \"tests/esis_snpa_asan-5.out\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-5.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/331530a4076c69bbd2e3214db6ccbe834fb75640/tests%2Fesis_snpa_asan-5.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fesis_snpa_asan-5.out?ref=331530a4076c69bbd2e3214db6ccbe834fb75640\", \"patch\": \"@@ -3,7 +3,7 @@ UI 22! ES-IS, length 65565\\n \\t  Number of Source Addresses: 3\\n \\t  NET (length: 0): isonsap_string: illegal length\\n \\t  NET (length: 4): ec.ff00.00\\n-\\t  NET (length: 0): isonsap_string: illegal length\\n+\\t  NET (length: 0): isonsap_string: illegal length[|esis]\\n UI 22! ES-IS, length 65565\\n \\tredirect (6), v: 1, checksum: 0x7034 (incorrect should be 0x3ff0), holding time: 21315s, length indicator: 17\\n \\t  04\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzI4OWM2NzIwMjAyODA1MjlmZDM4MmYzNTAyZWZhYjcxMDBkNjM4ZWMi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/289c672020280529fd382f3502efab7100d638ec", "content": "{\"sha\": \"289c672020280529fd382f3502efab7100d638ec\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjoyODljNjcyMDIwMjgwNTI5ZmQzODJmMzUwMmVmYWI3MTAwZDYzOGVj\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-07T21:43:20Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13051/RSVP: fix bounds checks for UNI\\n\\nFixup the part of rsvp_obj_print() that decodes the GENERALIZED_UNI\\nobject from RFC 3476 Section 3.1 to check the sub-objects inside that\\nobject more thoroughly.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"9b21e2d82e45e547847989b40c46fd4c59e27af8\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/9b21e2d82e45e547847989b40c46fd4c59e27af8\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/289c672020280529fd382f3502efab7100d638ec\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/289c672020280529fd382f3502efab7100d638ec\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/289c672020280529fd382f3502efab7100d638ec\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/289c672020280529fd382f3502efab7100d638ec/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"331530a4076c69bbd2e3214db6ccbe834fb75640\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/331530a4076c69bbd2e3214db6ccbe834fb75640\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/331530a4076c69bbd2e3214db6ccbe834fb75640\"}], \"stats\": {\"total\": 44, \"additions\": 43, \"deletions\": 1}, \"files\": [{\"sha\": \"b0fb34469401e1eaa353cf7e6845dbb2caba4be2\", \"filename\": \"print-rsvp.c\", \"status\": \"modified\", \"additions\": 18, \"deletions\": 1, \"changes\": 19, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/print-rsvp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/print-rsvp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-rsvp.c?ref=289c672020280529fd382f3502efab7100d638ec\", \"patch\": \"@@ -1205,6 +1205,17 @@ rsvp_obj_print(netdissect_options *ndo,\\n \\t\\t/* read variable length subobjects */\\n \\t\\ttotal_subobj_len = obj_tlen;\\n                 while(total_subobj_len > 0) {\\n+                    /* If RFC 3476 Section 3.1 defined that a sub-object of the\\n+                     * GENERALIZED_UNI RSVP object must have the Length field as\\n+                     * a multiple of 4, instead of the check below it would be\\n+                     * better to test total_subobj_len only once before the loop.\\n+                     * So long as it does not define it and this while loop does\\n+                     * not implement such a requirement, let's accept that within\\n+                     * each iteration subobj_len may happen to be a multiple of 1\\n+                     * and test it and total_subobj_len respectively.\\n+                     */\\n+                    if (total_subobj_len < 4)\\n+                        goto invalid;\\n                     subobj_len  = EXTRACT_16BITS(obj_tptr);\\n                     subobj_type = (EXTRACT_16BITS(obj_tptr+2))>>8;\\n                     af = (EXTRACT_16BITS(obj_tptr+2))&0x00FF;\\n@@ -1216,7 +1227,13 @@ rsvp_obj_print(netdissect_options *ndo,\\n                            tok2str(af_values, \\\"Unknown\\\", af), af,\\n                            subobj_len));\\n \\n-                    if(subobj_len == 0)\\n+                    /* In addition to what is explained above, the same spec does not\\n+                     * explicitly say that the same Length field includes the 4-octet\\n+                     * sub-object header, but as long as this while loop implements it\\n+                     * as it does include, let's keep the check below consistent with\\n+                     * the rest of the code.\\n+                     */\\n+                    if(subobj_len < 4 || subobj_len > total_subobj_len)\\n                         goto invalid;\\n \\n                     switch(subobj_type) {\"}, {\"sha\": \"1681849a0652b4138a8ce579845997a0a2613d66\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=289c672020280529fd382f3502efab7100d638ec\", \"patch\": \"@@ -567,6 +567,9 @@ bgp_pmsi_tunnel-oobr\\tbgp_pmsi_tunnel-oobr.pcap\\tbgp_pmsi_tunnel-oobr.out -v -c1\\n bgp_mvpn_6_and_7\\tbgp_mvpn_6_and_7.pcap\\t\\tbgp_mvpn_6_and_7.out\\t-v -c1\\n rsvp_fast_reroute-oobr\\trsvp_fast_reroute-oobr.pcap\\trsvp_fast_reroute-oobr.out -v -c1\\n esis_opt_prot-oobr\\tesis_opt_prot-oobr.pcap\\t\\tesis_opt_prot-oobr.out\\t-v -c1\\n+rsvp_uni-oobr-1\\trsvp_uni-oobr-1.pcap\\trsvp_uni-oobr-1.out\\t-v -c1\\n+rsvp_uni-oobr-2\\trsvp_uni-oobr-2.pcap\\trsvp_uni-oobr-2.out\\t-v -c1\\n+rsvp_uni-oobr-3\\trsvp_uni-oobr-3.pcap\\trsvp_uni-oobr-3.out\\t-v -c3\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"f5da6e7e9bfdb46409ddc0e0ea6fff40a0ce25de\", \"filename\": \"tests/rsvp_uni-oobr-1.out\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-1.out?ref=289c672020280529fd382f3502efab7100d638ec\", \"patch\": \"@@ -0,0 +1,5 @@\\n+IP (tos 0x2,ECT(0), ttl 248, id 0, offset 0, flags [none], proto RSVP (46), length 54312, bad cksum 3743 (->7e72)!)\\n+    54.35.0.0 > 58.16.0.0: \\n+\\tRSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 65527, ttl: 15, checksum: 0x0902\\n+\\t  Generalized UNI Object (229) Flags: [ignore and forward if unknown], Class-Type: 1 (1), length: 12\\n+\\t    Subobject Type: Unknown (127), AF: HDLC (4), length: 2 (invalid)\"}, {\"sha\": \"16d20240f619bba2bd27bb6dfb87a4d46db36e76\", \"filename\": \"tests/rsvp_uni-oobr-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-1.pcap?ref=289c672020280529fd382f3502efab7100d638ec\"}, {\"sha\": \"cc41acd13e5c549f6dc7abc4dbf8a94a2917fbd4\", \"filename\": \"tests/rsvp_uni-oobr-2.out\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-2.out?ref=289c672020280529fd382f3502efab7100d638ec\", \"patch\": \"@@ -0,0 +1,5 @@\\n+IP (tos 0x2,ECT(0), ttl 248, id 0, offset 0, flags [none], proto RSVP (46), length 54312, bad cksum 3743 (->3051)!)\\n+    54.35.78.33 > 58.16.0.0: \\n+\\tRSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 65527, ttl: 15, checksum: 0x0902\\n+\\t  Generalized UNI Object (229) Flags: [ignore and forward if unknown], Class-Type: 1 (1), length: 12\\n+\\t    Subobject Type: Unknown (0), AF: HDLC (4), length: 2 (invalid)\"}, {\"sha\": \"c9265ce93fee20e0ee3e503ab0c1e639535f83c2\", \"filename\": \"tests/rsvp_uni-oobr-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-2.pcap?ref=289c672020280529fd382f3502efab7100d638ec\"}, {\"sha\": \"3afa86e7cbe936e8adfc52c9b5500704250e93ef\", \"filename\": \"tests/rsvp_uni-oobr-3.out\", \"status\": \"added\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-3.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-3.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-3.out?ref=289c672020280529fd382f3502efab7100d638ec\", \"patch\": \"@@ -0,0 +1,12 @@\\n+IP (tos 0x0, ttl 48, id 25615, offset 0, flags [+, DF, rsvd], proto UDP (17), length 61735, bad cksum 8ef1 (->10e1)!)\\n+    1.2.3.3.1812 > 64.112.0.96.4567:  wb-29!\\n+IP (tos 0x2,ECT(0), ttl 248, id 0, offset 0, flags [none], proto RSVP (46), length 54312, bad cksum 3701 (->8972)!)\\n+    54.35.0.0 > 47.16.0.0: \\n+\\tRSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 65527, ttl: 15, checksum: 0x0902\\n+\\t  Generalized UNI Object (229) Flags: [ignore and forward if unknown], Class-Type: 1 (1), length: 12\\n+\\t    Subobject Type: Unknown (0), AF: HDLC (4), length: 1 (invalid)\\n+IP (tos 0x2,ECT(0), ttl 248, id 0, offset 0, flags [none], proto RSVP (46), length 54312, bad cksum 3701 (->7e72)!)\\n+    54.35.0.0 > 58.16.0.0: \\n+\\tRSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 65527, ttl: 15, checksum: 0x0902\\n+\\t  Generalized UNI Object (229) Flags: [ignore and forward if unknown], Class-Type: 1 (1), length: 12\\n+\\t    Subobject Type: Unknown (225), AF: HDLC (4), length: 1 (invalid)\"}, {\"sha\": \"0006a4f9a98d088f32e4330a467e878aadf4f180\", \"filename\": \"tests/rsvp_uni-oobr-3.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-3.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/289c672020280529fd382f3502efab7100d638ec/tests%2Frsvp_uni-oobr-3.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Frsvp_uni-oobr-3.pcap?ref=289c672020280529fd382f3502efab7100d638ec\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2U2NTExY2MxYTk1MGZlMTU2NmIyMjM2MzI5ZDZiNGJkMDgyNmNjN2Ei.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e6511cc1a950fe1566b2236329d6b4bd0826cc7a", "content": "{\"sha\": \"e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjplNjUxMWNjMWE5NTBmZTE1NjZiMjIzNjMyOWQ2YjRiZDA4MjZjYzdh\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-09T23:01:55Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13054/LLDP: add a missing length check\\n\\nIn lldp_private_8023_print() the case block for subtype 4 (Maximum Frame\\nSize TLV, IEEE 802.3bc-2009 Section 79.3.4) did not include the length\\ncheck and could over-read the input buffer, put it right.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"d0b62fae41a9fae52afb1d8caaeeede275262cb7\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/d0b62fae41a9fae52afb1d8caaeeede275262cb7\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"83c64fce3a5226b080e535f5131a8a318f30e79b\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/83c64fce3a5226b080e535f5131a8a318f30e79b\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/83c64fce3a5226b080e535f5131a8a318f30e79b\"}], \"stats\": {\"total\": 8, \"additions\": 8, \"deletions\": 0}, \"files\": [{\"sha\": \"e87b16bd0fcc16444599148d7e4f029298a0be30\", \"filename\": \"print-lldp.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/print-lldp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/print-lldp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-lldp.c?ref=e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"patch\": \"@@ -898,6 +898,9 @@ lldp_private_8023_print(netdissect_options *ndo,\\n         break;\\n \\n     case LLDP_PRIVATE_8023_SUBTYPE_MTU:\\n+        if (tlv_len < 6) {\\n+            return hexdump;\\n+        }\\n         ND_PRINT((ndo, \\\"\\\\n\\\\t    MTU size %u\\\", EXTRACT_16BITS(tptr + 4)));\\n         break;\\n \"}, {\"sha\": \"eb0839e0c01fc6073f7d6ae6ae223be42c7c3b9d\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"patch\": \"@@ -571,6 +571,7 @@ rsvp_uni-oobr-1\\trsvp_uni-oobr-1.pcap\\trsvp_uni-oobr-1.out\\t-v -c1\\n rsvp_uni-oobr-2\\trsvp_uni-oobr-2.pcap\\trsvp_uni-oobr-2.out\\t-v -c1\\n rsvp_uni-oobr-3\\trsvp_uni-oobr-3.pcap\\trsvp_uni-oobr-3.out\\t-v -c3\\n rpki-rtr-oob\\t\\trpki-rtr-oob.pcap\\trpki-rtr-oob.out\\t-v -c1\\n+lldp_8023_mtu-oobr\\tlldp_8023_mtu-oobr.pcap\\tlldp_8023_mtu-oobr.out\\t-v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"5185583963cb3f544fb005f02cb35189859ccd81\", \"filename\": \"tests/lldp_8023_mtu-oobr.out\", \"status\": \"added\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2Flldp_8023_mtu-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2Flldp_8023_mtu-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Flldp_8023_mtu-oobr.out?ref=e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"patch\": \"@@ -0,0 +1,4 @@\\n+LLDP, length 4293194266\\n+\\tOrganization specific TLV (127), length 4: OUI IEEE 802.3 Private (0x00120f)\\n+\\t  Max frame size Subtype (4)\\n+\\t[|LLDP]\"}, {\"sha\": \"dc6d3df398cd55030b733b8c3a2419e5ea6f28ed\", \"filename\": \"tests/lldp_8023_mtu-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2Flldp_8023_mtu-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/e6511cc1a950fe1566b2236329d6b4bd0826cc7a/tests%2Flldp_8023_mtu-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Flldp_8023_mtu-oobr.pcap?ref=e6511cc1a950fe1566b2236329d6b4bd0826cc7a\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzL2JkNGU2OTdlYmQ2Yzg0NTdlZmE4ZjI4ZjY4MzFmYzkyOWI4OGEwMTQi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/bd4e697ebd6c8457efa8f28f6831fc929b88a014", "content": "{\"sha\": \"bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjpiZDRlNjk3ZWJkNmM4NDU3ZWZhOGYyOGY2ODMxZmM5MjliODhhMDE0\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-11T12:39:02Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13053/BGP: fix VPN route target bounds checks\\n\\ndecode_rt_routing_info() didn't check bounds before fetching 4 octets of\\nthe origin AS field and could over-read the input buffer, put it right.\\n\\nIt also fetched the varying number of octets of the route target field\\nfrom 4 octets lower than the correct offset, put it right.\\n\\nIt also used the same temporary buffer explicitly through as_printf()\\nand implicitly through bgp_vpn_rd_print() so the end result of snprintf()\\nwas not what was originally intended.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"d04c456ea7940ece773f8f619162d0b97998bd6d\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/d04c456ea7940ece773f8f619162d0b97998bd6d\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/bd4e697ebd6c8457efa8f28f6831fc929b88a014/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/e6511cc1a950fe1566b2236329d6b4bd0826cc7a\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/e6511cc1a950fe1566b2236329d6b4bd0826cc7a\"}], \"stats\": {\"total\": 66, \"additions\": 63, \"deletions\": 3}, \"files\": [{\"sha\": \"61145405560498ecca64b06ef4337b43d92e9dbc\", \"filename\": \"print-bgp.c\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 3, \"changes\": 22, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/bd4e697ebd6c8457efa8f28f6831fc929b88a014/print-bgp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/bd4e697ebd6c8457efa8f28f6831fc929b88a014/print-bgp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"patch\": \"@@ -761,32 +761,48 @@ decode_rt_routing_info(netdissect_options *ndo,\\n {\\n \\tuint8_t route_target[8];\\n \\tu_int plen;\\n+\\tchar asbuf[sizeof(astostr)]; /* bgp_vpn_rd_print() overwrites astostr */\\n \\n+\\t/* NLRI \\\"prefix length\\\" from RFC 2858 Section 4. */\\n \\tND_TCHECK(pptr[0]);\\n \\tplen = pptr[0];   /* get prefix length */\\n \\n+\\t/* NLRI \\\"prefix\\\" (ibid), valid lengths are { 0, 32, 33, ..., 96 } bits.\\n+\\t * RFC 4684 Section 4 defines the layout of \\\"origin AS\\\" and \\\"route\\n+\\t * target\\\" fields inside the \\\"prefix\\\" depending on its length.\\n+\\t */\\n \\tif (0 == plen) {\\n+\\t\\t/* Without \\\"origin AS\\\", without \\\"route target\\\". */\\n \\t\\tsnprintf(buf, buflen, \\\"default route target\\\");\\n \\t\\treturn 1;\\n \\t}\\n \\n \\tif (32 > plen)\\n \\t\\treturn -1;\\n \\n+\\t/* With at least \\\"origin AS\\\", possibly with \\\"route target\\\". */\\n+\\tND_TCHECK_32BITS(pptr + 1);\\n+\\tas_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_32BITS(pptr + 1));\\n+\\n         plen-=32; /* adjust prefix length */\\n \\n \\tif (64 < plen)\\n \\t\\treturn -1;\\n \\n+\\t/* From now on (plen + 7) / 8 evaluates to { 0, 1, 2, ..., 8 }\\n+\\t * and gives the number of octets in the variable-length \\\"route\\n+\\t * target\\\" field inside this NLRI \\\"prefix\\\". Look for it.\\n+\\t */\\n \\tmemset(&route_target, 0, sizeof(route_target));\\n-\\tND_TCHECK2(pptr[1], (plen + 7) / 8);\\n-\\tmemcpy(&route_target, &pptr[1], (plen + 7) / 8);\\n+\\tND_TCHECK2(pptr[5], (plen + 7) / 8);\\n+\\tmemcpy(&route_target, &pptr[5], (plen + 7) / 8);\\n+\\t/* Which specification says to do this? */\\n \\tif (plen % 8) {\\n \\t\\t((u_char *)&route_target)[(plen + 7) / 8 - 1] &=\\n \\t\\t\\t((0xff00 >> (plen % 8)) & 0xff);\\n \\t}\\n \\tsnprintf(buf, buflen, \\\"origin AS: %s, route target %s\\\",\\n-\\t    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(pptr+1)),\\n+\\t    asbuf,\\n \\t    bgp_vpn_rd_print(ndo, (u_char *)&route_target));\\n \\n \\treturn 5 + (plen + 7) / 8;\"}, {\"sha\": \"d770f5ccf0acb68952b8bc08172c463868953218\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"patch\": \"@@ -572,6 +572,7 @@ rsvp_uni-oobr-2\\trsvp_uni-oobr-2.pcap\\trsvp_uni-oobr-2.out\\t-v -c1\\n rsvp_uni-oobr-3\\trsvp_uni-oobr-3.pcap\\trsvp_uni-oobr-3.out\\t-v -c3\\n rpki-rtr-oob\\t\\trpki-rtr-oob.pcap\\trpki-rtr-oob.out\\t-v -c1\\n lldp_8023_mtu-oobr\\tlldp_8023_mtu-oobr.pcap\\tlldp_8023_mtu-oobr.out\\t-v -c1\\n+bgp_vpn_rt-oobr\\tbgp_vpn_rt-oobr.pcap\\tbgp_vpn_rt-oobr.out\\t-v -c1\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"b4159626794e90e6090b6ff6bf372a77302f7879\", \"filename\": \"tests/bgp_vpn_rt-oobr.out\", \"status\": \"added\", \"additions\": 43, \"deletions\": 0, \"changes\": 43, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2Fbgp_vpn_rt-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2Fbgp_vpn_rt-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_vpn_rt-oobr.out?ref=bd4e697ebd6c8457efa8f28f6831fc929b88a014\", \"patch\": \"@@ -0,0 +1,43 @@\\n+IP (tos 0xc, ttl 254, id 21263, offset 0, flags [rsvd], proto TCP (6), length 60165, bad cksum 8e15 (->9eb8)!)\\n+    241.0.128.19.179 > 239.8.0.1.0: Flags [none], seq 2146695561:2146755682, win 56026, options [unknown-161,eol], length 60121: BGP\\n+\\tUpdate Message (2), length: 45\\n+\\t  Withdrawn routes: 3 bytes\\n+\\t  Attribute Set (128), length: 7, Flags [OTPE+f]: \\n+\\t    Origin AS: 0\\n+\\t      Multi-Protocol Unreach NLRI (15), length: 227, Flags [T+6]: \\n+\\t    AFI: IPv6 (2), SAFI: Multicast VPN (5)\\n+\\t      Route-Type: Source-Active (5), length: 5, RD: unknown RD format, Group bogus address length 127\\n+\\t      Route-Type: Unknown (142), length: 142\\n+\\t      Route-Type: Unknown (0), length: 0\\n+\\t      Route-Type: Unknown (33), length: 0\\n+\\t      Route-Type: Unknown (0), length: 0[|BGP] [|BGP]\\n+\\tUpdate Message (2), length: 45[|BGP] [|BGP]\\n+\\tUpdate Message (2), length: 45\\n+\\t  Withdrawn routes: 3 bytes\\n+\\t  Attribute Set (128), length: 7, Flags [OTPE+f]: \\n+\\t    Origin AS: 0\\n+\\t      Multi-Protocol Reach NLRI (14), length: 227, Flags [T+6]: \\n+\\t    AFI: IPv4 (1), vendor specific SAFI: Route Target Routing Information (132)\\n+\\t    nexthop: invalid len, nh-length: 1, no SNPA\\n+\\t      origin AS: 0, route target 0:0 (= 0.0.0.0)\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target\\n+\\t      default route target[|BGP]\"}, {\"sha\": \"69d5b960664ec2be34c4e2e857ac4ad44a5c7b12\", \"filename\": \"tests/bgp_vpn_rt-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2Fbgp_vpn_rt-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/bd4e697ebd6c8457efa8f28f6831fc929b88a014/tests%2Fbgp_vpn_rt-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fbgp_vpn_rt-oobr.pcap?ref=bd4e697ebd6c8457efa8f28f6831fc929b88a014\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzVkMGQ3NmU4OGVlMmQzMjM2ZDdlMDMyNTg5ZDZmMWQ0ZWM1ZjdiMWUi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e", "content": "{\"sha\": \"5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4Mjo1ZDBkNzZlODhlZTJkMzIzNmQ3ZTAzMjU4OWQ2ZjFkNGVjNWY3YjFl\", \"commit\": {\"author\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-08-16T22:04:31Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13055/IS-IS: fix an Extended IS Reachability sub-TLV\\n\\nIn isis_print_is_reach_subtlv() one of the case blocks did not check that\\nthe sub-TLV \\\"V\\\" is actually present and could over-read the input buffer.\\nAdd a length check to fix that and remove a useless boundary check from\\na loop because the boundary is tested for the full length of \\\"V\\\" before\\nthe switch block.\\n\\nUpdate one of the prior test cases as it turns out it depended on this\\npreviously incorrect code path to make it to its own malformed structure\\nfurther down the buffer, the bugfix has changed its output.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"2451a19aa00b915ff5f6a122406aaeef32945f14\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/2451a19aa00b915ff5f6a122406aaeef32945f14\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/comments\", \"author\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5d340a5ca6e420a70297cdbdf777333f18bfdab7\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/5d340a5ca6e420a70297cdbdf777333f18bfdab7\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/5d340a5ca6e420a70297cdbdf777333f18bfdab7\"}], \"stats\": {\"total\": 466, \"additions\": 194, \"deletions\": 272}, \"files\": [{\"sha\": \"0db8fc10aee226c8b01869d20b770111616eaf93\", \"filename\": \"print-isoclns.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/print-isoclns.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/print-isoclns.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isoclns.c?ref=5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"patch\": \"@@ -1861,14 +1861,15 @@ isis_print_is_reach_subtlv(netdissect_options *ndo,\\n             break;\\n         case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS: /* fall through */\\n         case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD:\\n+            if (subl == 0)\\n+                break;\\n             ND_PRINT((ndo, \\\"%sBandwidth Constraints Model ID: %s (%u)\\\",\\n                    ident,\\n                    tok2str(diffserv_te_bc_values, \\\"unknown\\\", *tptr),\\n                    *tptr));\\n             tptr++;\\n             /* decode BCs until the subTLV ends */\\n             for (te_class = 0; te_class < (subl-1)/4; te_class++) {\\n-                ND_TCHECK2(*tptr, 4);\\n                 bw.i = EXTRACT_32BITS(tptr);\\n                 ND_PRINT((ndo, \\\"%s  Bandwidth constraint CT%u: %.3f Mbps\\\",\\n                        ident,\"}, {\"sha\": \"5866b2858f4fc58008658e8a5c5f4e64751603fa\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"patch\": \"@@ -574,6 +574,7 @@ rpki-rtr-oob\\t\\trpki-rtr-oob.pcap\\trpki-rtr-oob.out\\t-v -c1\\n lldp_8023_mtu-oobr\\tlldp_8023_mtu-oobr.pcap\\tlldp_8023_mtu-oobr.out\\t-v -c1\\n bgp_vpn_rt-oobr\\tbgp_vpn_rt-oobr.pcap\\tbgp_vpn_rt-oobr.out\\t-v -c1\\n cfm_sender_id-oobr\\tcfm_sender_id-oobr.pcap\\tcfm_sender_id-oobr.out\\t-v -c1\\n+isis-extd-isreach-oobr\\tisis-extd-isreach-oobr.pcap\\tisis-extd-isreach-oobr.out -v -c4\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"7da29b66df8e4764d43f0109c4bbeb4f35ae109c\", \"filename\": \"tests/isis-extd-isreach-oobr.out\", \"status\": \"added\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-extd-isreach-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-extd-isreach-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-extd-isreach-oobr.out?ref=5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"patch\": \"@@ -0,0 +1,39 @@\\n+OSI NLPID 0xfe unknown, length: 33554428\\n+\\t0x0000:  fe7f 4a01 0066 0002 00ff ffff f200 0000\\n+\\t0x0010:  00c6 0000 007f e6ff 00e6 6800 0000\\n+unknown CHDLC protocol (0xfafe)\\n+OSI NLPID 0xfe unknown, length: 33554428\\n+\\t0x0000:  fe7f 4a01 f165 0002 0000 0000 0000 0000\\n+\\t0x0010:  00c6 0000 007f e6ff 00e6 6800 0000\\n+IS-IS, length 33554427\\n+\\tL2 Lan IIH, hlen: 27, v: 1, pdu-v: 1, sys-id-len: 6 (0), max-area: 3 (0)\\n+\\t  source-id: 3801.0101.0101,  holding time: 257s, Flags: [unknown circuit type 0x00]\\n+\\t  lan-id:    0101.0101.0100.00, Priority: 1, PDU length: 257\\n+\\t    Extended IS Reachability TLV #22, length: 12\\n+\\t      IS Neighbor: 0d0d.0d0d.0d0d.0d, Metric: 855309, sub-TLVs present (13)\\n+\\t        unknown subTLV #13, length: 13\\n+\\t\\t    0x0000:  0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d\\n+\\t      IS Neighbor: 0d0d.0d0d.0d0d.0d, Metric: 855309, sub-TLVs present (13)\\n+\\t        unknown subTLV #13, length: 13\\n+\\t\\t    0x0000:  0d0d 0d0d 0d0d 0d64 0d0d 0d0d 0d\\n+\\t      IS Neighbor: 0d0d.0d0d.0d0d.0d, Metric: 855309, sub-TLVs present (13)\\n+\\t        unknown subTLV #13, length: 13\\n+\\t\\t    0x0000:  0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d\\n+\\t      IS Neighbor: 0d0d.0d0d.0d0d.0d, Metric: 855309, sub-TLVs present (13)\\n+\\t        unknown subTLV #13, length: 13\\n+\\t\\t    0x0000:  1c0d 0d0d 0d0d 670d 0d0d 0d0d 0d\\n+\\t      IS Neighbor: 0d0d.0d00.0000.40, Metric: 13391955, sub-TLVs present (3)\\n+\\t        unknown subTLV #41, length: 16\\n+\\t\\t    0x0000:  0022 0000 0000 0000 0000 0000 0000 0000\\n+\\t      IS Neighbor: 0000.0000.0a16.00, Metric: 2097279, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.3604.1f01.16, Metric: 70400, no sub-TLVs present\\n+\\t      IS Neighbor: 0012.3a01.4996.01, Metric: 8838496, no sub-TLVs present\\n+\\t      IS Neighbor: 00c7.8787.8766.87, Metric: 0, sub-TLVs present (64)\\n+\\t        unknown subTLV #120, length: 22\\n+\\t\\t    0x0000:  0101 0100 f0ff ffff ff01 0101 434c 4945\\n+\\t\\t    0x0010:  4e54 0101 011f\\n+\\t        Link Local/Remote Identifier subTLV #4, length: 4, 0x04040404\\n+\\t        Link Local/Remote Identifier subTLV #4, length: 4, 0x04040404\\n+\\t        Link Local/Remote Identifier subTLV #4, length: 4, 0x0404000a\\n+\\t        Bandwidth Constraints subTLV #22, length: 0\\n+\\t\\t [|isis]\"}, {\"sha\": \"c024ab4aebcd165ec9203068167cc545af1fe511\", \"filename\": \"tests/isis-extd-isreach-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-extd-isreach-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-extd-isreach-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-extd-isreach-oobr.pcap?ref=5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\"}, {\"sha\": \"e1f3c2cdce0cedf0179755581b3a6cf6772c6350\", \"filename\": \"tests/isis-seg-fault-1-v.out\", \"status\": \"modified\", \"additions\": 152, \"deletions\": 271, \"changes\": 423, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-seg-fault-1-v.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e/tests%2Fisis-seg-fault-1-v.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fisis-seg-fault-1-v.out?ref=5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e\", \"patch\": \"@@ -28,274 +28,155 @@ IS-IS, length 1497\\n \\t        unknown subTLV #0, length: 0\\n \\t        unknown subTLV #0, length: 0\\n \\t        Bandwidth Constraints subTLV #22, length: 0\\n-\\t        Bandwidth Constraints Model ID: Russian dolls (0)\\n-\\t          Bandwidth constraint CT0: 0.000 Mbps\\n-\\t          Bandwidth constraint CT1: 0.000 Mbps\\n-\\t          Bandwidth constraint CT2: 0.000 Mbps\\n-\\t          Bandwidth constraint CT3: 0.000 Mbps\\n-\\t          Bandwidth constraint CT4: 0.000 Mbps\\n-\\t          Bandwidth constraint CT5: 0.000 Mbps\\n-\\t          Bandwidth constraint CT6: -0.000 Mbps\\n-\\t          Bandwidth constraint CT7: 0.000 Mbps\\n-\\t          Bandwidth constraint CT8: 0.000 Mbps\\n-\\t          Bandwidth constraint CT9: 0.000 Mbps\\n-\\t          Bandwidth constraint CT10: 0.000 Mbps\\n-\\t          Bandwidth constraint CT11: 0.000 Mbps\\n-\\t          Bandwidth constraint CT12: 0.000 Mbps\\n-\\t          Bandwidth constraint CT13: 0.000 Mbps\\n-\\t          Bandwidth constraint CT14: -1267650597027719304708096.000 Mbps\\n-\\t          Bandwidth constraint CT15: 0.000 Mbps\\n-\\t          Bandwidth constraint CT16: 0.000 Mbps\\n-\\t          Bandwidth constraint CT17: 0.000 Mbps\\n-\\t          Bandwidth constraint CT18: 0.000 Mbps\\n-\\t          Bandwidth constraint CT19: 0.000 Mbps\\n-\\t          Bandwidth constraint CT20: 0.000 Mbps\\n-\\t          Bandwidth constraint CT21: 0.000 Mbps\\n-\\t          Bandwidth constraint CT22: 0.000 Mbps\\n-\\t          Bandwidth constraint CT23: 0.000 Mbps\\n-\\t          Bandwidth constraint CT24: 0.000 Mbps\\n-\\t          Bandwidth constraint CT25: 0.000 Mbps\\n-\\t          Bandwidth constraint CT26: 0.000 Mbps\\n-\\t          Bandwidth constraint CT27: 0.000 Mbps\\n-\\t          Bandwidth constraint CT28: 0.000 Mbps\\n-\\t          Bandwidth constraint CT29: 0.000 Mbps\\n-\\t          Bandwidth constraint CT30: 0.000 Mbps\\n-\\t          Bandwidth constraint CT31: 0.000 Mbps\\n-\\t          Bandwidth constraint CT32: 0.000 Mbps\\n-\\t          Bandwidth constraint CT33: 0.000 Mbps\\n-\\t          Bandwidth constraint CT34: 0.000 Mbps\\n-\\t          Bandwidth constraint CT35: 0.000 Mbps\\n-\\t          Bandwidth constraint CT36: 0.000 Mbps\\n-\\t          Bandwidth constraint CT37: 0.000 Mbps\\n-\\t          Bandwidth constraint CT38: 16.777 Mbps\\n-\\t          Bandwidth constraint CT39: 0.000 Mbps\\n-\\t          Bandwidth constraint CT40: 0.000 Mbps\\n-\\t          Bandwidth constraint CT41: 0.000 Mbps\\n-\\t          Bandwidth constraint CT42: 0.000 Mbps\\n-\\t          Bandwidth constraint CT43: 0.000 Mbps\\n-\\t          Bandwidth constraint CT44: 0.000 Mbps\\n-\\t          Bandwidth constraint CT45: 0.000 Mbps\\n-\\t          Bandwidth constraint CT46: 0.000 Mbps\\n-\\t          Bandwidth constraint CT47: 0.000 Mbps\\n-\\t          Bandwidth constraint CT48: 0.000 Mbps\\n-\\t          Bandwidth constraint CT49: 0.000 Mbps\\n-\\t          Bandwidth constraint CT50: 0.000 Mbps\\n-\\t          Bandwidth constraint CT51: 0.000 Mbps\\n-\\t          Bandwidth constraint CT52: 0.000 Mbps\\n-\\t          Bandwidth constraint CT53: 0.000 Mbps\\n-\\t          Bandwidth constraint CT54: 0.000 Mbps\\n-\\t          Bandwidth constraint CT55: 0.000 Mbps\\n-\\t          Bandwidth constraint CT56: 0.000 Mbps\\n-\\t          Bandwidth constraint CT57: 0.000 Mbps\\n-\\t          Bandwidth constraint CT58: 0.000 Mbps\\n-\\t          Bandwidth constraint CT59: 0.000 Mbps\\n-\\t          Bandwidth constraint CT60: 0.000 Mbps\\n-\\t          Bandwidth constraint CT61: 0.000 Mbps\\n-\\t          Bandwidth constraint CT62: 0.000 Mbps\\n-\\t          Bandwidth constraint CT63: 0.000 Mbps\\n-\\t          Bandwidth constraint CT64: 0.000 Mbps\\n-\\t          Bandwidth constraint CT65: 0.000 Mbps\\n-\\t          Bandwidth constraint CT66: 0.000 Mbps\\n-\\t          Bandwidth constraint CT67: 0.000 Mbps\\n-\\t          Bandwidth constraint CT68: 0.000 Mbps\\n-\\t          Bandwidth constraint CT69: 0.000 Mbps\\n-\\t          Bandwidth constraint CT70: 0.000 Mbps\\n-\\t          Bandwidth constraint CT71: 0.000 Mbps\\n-\\t          Bandwidth constraint CT72: 0.000 Mbps\\n-\\t          Bandwidth constraint CT73: 0.000 Mbps\\n-\\t          Bandwidth constraint CT74: 0.000 Mbps\\n-\\t          Bandwidth constraint CT75: 0.000 Mbps\\n-\\t          Bandwidth constraint CT76: 0.000 Mbps\\n-\\t          Bandwidth constraint CT77: 0.000 Mbps\\n-\\t          Bandwidth constraint CT78: 0.000 Mbps\\n-\\t          Bandwidth constraint CT79: 0.000 Mbps\\n-\\t          Bandwidth constraint CT80: 0.000 Mbps\\n-\\t          Bandwidth constraint CT81: 0.000 Mbps\\n-\\t          Bandwidth constraint CT82: 0.000 Mbps\\n-\\t          Bandwidth constraint CT83: 0.000 Mbps\\n-\\t          Bandwidth constraint CT84: 0.000 Mbps\\n-\\t          Bandwidth constraint CT85: 0.000 Mbps\\n-\\t          Bandwidth constraint CT86: 0.000 Mbps\\n-\\t          Bandwidth constraint CT87: 0.000 Mbps\\n-\\t          Bandwidth constraint CT88: 0.000 Mbps\\n-\\t          Bandwidth constraint CT89: 0.000 Mbps\\n-\\t          Bandwidth constraint CT90: 0.000 Mbps\\n-\\t          Bandwidth constraint CT91: 0.000 Mbps\\n-\\t          Bandwidth constraint CT92: 0.000 Mbps\\n-\\t          Bandwidth constraint CT93: 0.000 Mbps\\n-\\t          Bandwidth constraint CT94: 0.000 Mbps\\n-\\t          Bandwidth constraint CT95: 0.000 Mbps\\n-\\t          Bandwidth constraint CT96: 0.000 Mbps\\n-\\t          Bandwidth constraint CT97: 0.000 Mbps\\n-\\t          Bandwidth constraint CT98: 0.000 Mbps\\n-\\t          Bandwidth constraint CT99: 0.000 Mbps\\n-\\t          Bandwidth constraint CT100: 0.000 Mbps\\n-\\t          Bandwidth constraint CT101: 0.000 Mbps\\n-\\t          Bandwidth constraint CT102: 0.000 Mbps\\n-\\t          Bandwidth constraint CT103: 0.000 Mbps\\n-\\t          Bandwidth constraint CT104: 0.000 Mbps\\n-\\t          Bandwidth constraint CT105: 0.000 Mbps\\n-\\t          Bandwidth constraint CT106: 0.000 Mbps\\n-\\t          Bandwidth constraint CT107: 0.000 Mbps\\n-\\t          Bandwidth constraint CT108: 0.000 Mbps\\n-\\t          Bandwidth constraint CT109: 0.000 Mbps\\n-\\t          Bandwidth constraint CT110: 334903128525925002608918921216.000 Mbps\\n-\\t          Bandwidth constraint CT111: 0.000 Mbps\\n-\\t          Bandwidth constraint CT112: 0.000 Mbps\\n-\\t          Bandwidth constraint CT113: 0.000 Mbps\\n-\\t          Bandwidth constraint CT114: 0.000 Mbps\\n-\\t          Bandwidth constraint CT115: 0.000 Mbps\\n-\\t          Bandwidth constraint CT116: 0.000 Mbps\\n-\\t          Bandwidth constraint CT117: 0.000 Mbps\\n-\\t          Bandwidth constraint CT118: 0.000 Mbps\\n-\\t          Bandwidth constraint CT119: 0.000 Mbps\\n-\\t          Bandwidth constraint CT120: 0.000 Mbps\\n-\\t          Bandwidth constraint CT121: 0.000 Mbps\\n-\\t          Bandwidth constraint CT122: 0.000 Mbps\\n-\\t          Bandwidth constraint CT123: 0.000 Mbps\\n-\\t          Bandwidth constraint CT124: 0.000 Mbps\\n-\\t          Bandwidth constraint CT125: 0.000 Mbps\\n-\\t          Bandwidth constraint CT126: 0.000 Mbps\\n-\\t          Bandwidth constraint CT127: 0.000 Mbps\\n-\\t          Bandwidth constraint CT128: 0.000 Mbps\\n-\\t          Bandwidth constraint CT129: 0.000 Mbps\\n-\\t          Bandwidth constraint CT130: 0.000 Mbps\\n-\\t          Bandwidth constraint CT131: 0.000 Mbps\\n-\\t          Bandwidth constraint CT132: 0.000 Mbps\\n-\\t          Bandwidth constraint CT133: 0.000 Mbps\\n-\\t          Bandwidth constraint CT134: 0.000 Mbps\\n-\\t          Bandwidth constraint CT135: 0.000 Mbps\\n-\\t          Bandwidth constraint CT136: 0.000 Mbps\\n-\\t          Bandwidth constraint CT137: -4.194 Mbps\\n-\\t          Bandwidth constraint CT138: 0.000 Mbps\\n-\\t          Bandwidth constraint CT139: 0.000 Mbps\\n-\\t          Bandwidth constraint CT140: 0.000 Mbps\\n-\\t          Bandwidth constraint CT141: 0.000 Mbps\\n-\\t          Bandwidth constraint CT142: 0.000 Mbps\\n-\\t          Bandwidth constraint CT143: 0.000 Mbps\\n-\\t          Bandwidth constraint CT144: 0.000 Mbps\\n-\\t          Bandwidth constraint CT145: 0.000 Mbps\\n-\\t          Bandwidth constraint CT146: 0.000 Mbps\\n-\\t          Bandwidth constraint CT147: 0.000 Mbps\\n-\\t          Bandwidth constraint CT148: 0.000 Mbps\\n-\\t          Bandwidth constraint CT149: 0.000 Mbps\\n-\\t          Bandwidth constraint CT150: 0.000 Mbps\\n-\\t          Bandwidth constraint CT151: 0.000 Mbps\\n-\\t          Bandwidth constraint CT152: 0.000 Mbps\\n-\\t          Bandwidth constraint CT153: 0.000 Mbps\\n-\\t          Bandwidth constraint CT154: 16.777 Mbps\\n-\\t          Bandwidth constraint CT155: 0.000 Mbps\\n-\\t          Bandwidth constraint CT156: 0.000 Mbps\\n-\\t          Bandwidth constraint CT157: 0.000 Mbps\\n-\\t          Bandwidth constraint CT158: 0.000 Mbps\\n-\\t          Bandwidth constraint CT159: 0.000 Mbps\\n-\\t          Bandwidth constraint CT160: 0.000 Mbps\\n-\\t          Bandwidth constraint CT161: 0.000 Mbps\\n-\\t          Bandwidth constraint CT162: 0.000 Mbps\\n-\\t          Bandwidth constraint CT163: 0.000 Mbps\\n-\\t          Bandwidth constraint CT164: 0.000 Mbps\\n-\\t          Bandwidth constraint CT165: 0.000 Mbps\\n-\\t          Bandwidth constraint CT166: 0.000 Mbps\\n-\\t          Bandwidth constraint CT167: 0.000 Mbps\\n-\\t          Bandwidth constraint CT168: 0.000 Mbps\\n-\\t          Bandwidth constraint CT169: 0.000 Mbps\\n-\\t          Bandwidth constraint CT170: 0.000 Mbps\\n-\\t          Bandwidth constraint CT171: 0.000 Mbps\\n-\\t          Bandwidth constraint CT172: 0.000 Mbps\\n-\\t          Bandwidth constraint CT173: 0.000 Mbps\\n-\\t          Bandwidth constraint CT174: 0.000 Mbps\\n-\\t          Bandwidth constraint CT175: 0.000 Mbps\\n-\\t          Bandwidth constraint CT176: 0.000 Mbps\\n-\\t          Bandwidth constraint CT177: 0.000 Mbps\\n-\\t          Bandwidth constraint CT178: 0.000 Mbps\\n-\\t          Bandwidth constraint CT179: 1099511.625 Mbps\\n-\\t          Bandwidth constraint CT180: 0.000 Mbps\\n-\\t          Bandwidth constraint CT181: 0.000 Mbps\\n-\\t          Bandwidth constraint CT182: 0.000 Mbps\\n-\\t          Bandwidth constraint CT183: 0.000 Mbps\\n-\\t          Bandwidth constraint CT184: 0.000 Mbps\\n-\\t          Bandwidth constraint CT185: 0.000 Mbps\\n-\\t          Bandwidth constraint CT186: 0.000 Mbps\\n-\\t          Bandwidth constraint CT187: 0.000 Mbps\\n-\\t          Bandwidth constraint CT188: 0.000 Mbps\\n-\\t          Bandwidth constraint CT189: 0.000 Mbps\\n-\\t          Bandwidth constraint CT190: 0.000 Mbps\\n-\\t          Bandwidth constraint CT191: 0.000 Mbps\\n-\\t          Bandwidth constraint CT192: 0.000 Mbps\\n-\\t          Bandwidth constraint CT193: 0.000 Mbps\\n-\\t          Bandwidth constraint CT194: 0.000 Mbps\\n-\\t          Bandwidth constraint CT195: 0.000 Mbps\\n-\\t          Bandwidth constraint CT196: 0.000 Mbps\\n-\\t          Bandwidth constraint CT197: 0.000 Mbps\\n-\\t          Bandwidth constraint CT198: 0.000 Mbps\\n-\\t          Bandwidth constraint CT199: 0.000 Mbps\\n-\\t          Bandwidth constraint CT200: 0.000 Mbps\\n-\\t          Bandwidth constraint CT201: 0.000 Mbps\\n-\\t          Bandwidth constraint CT202: 0.000 Mbps\\n-\\t          Bandwidth constraint CT203: 0.000 Mbps\\n-\\t          Bandwidth constraint CT204: 0.000 Mbps\\n-\\t          Bandwidth constraint CT205: 0.000 Mbps\\n-\\t          Bandwidth constraint CT206: 0.000 Mbps\\n-\\t          Bandwidth constraint CT207: 0.000 Mbps\\n-\\t          Bandwidth constraint CT208: 0.000 Mbps\\n-\\t          Bandwidth constraint CT209: 0.000 Mbps\\n-\\t          Bandwidth constraint CT210: 0.000 Mbps\\n-\\t          Bandwidth constraint CT211: 0.000 Mbps\\n-\\t          Bandwidth constraint CT212: 0.000 Mbps\\n-\\t          Bandwidth constraint CT213: 0.000 Mbps\\n-\\t          Bandwidth constraint CT214: 0.000 Mbps\\n-\\t          Bandwidth constraint CT215: 0.000 Mbps\\n-\\t          Bandwidth constraint CT216: 0.000 Mbps\\n-\\t          Bandwidth constraint CT217: 0.000 Mbps\\n-\\t          Bandwidth constraint CT218: 0.000 Mbps\\n-\\t          Bandwidth constraint CT219: 0.000 Mbps\\n-\\t          Bandwidth constraint CT220: 0.000 Mbps\\n-\\t          Bandwidth constraint CT221: 0.000 Mbps\\n-\\t          Bandwidth constraint CT222: 0.000 Mbps\\n-\\t          Bandwidth constraint CT223: 0.000 Mbps\\n-\\t          Bandwidth constraint CT224: 0.000 Mbps\\n-\\t          Bandwidth constraint CT225: 0.000 Mbps\\n-\\t          Bandwidth constraint CT226: 0.000 Mbps\\n-\\t          Bandwidth constraint CT227: 0.000 Mbps\\n-\\t          Bandwidth constraint CT228: 0.000 Mbps\\n-\\t          Bandwidth constraint CT229: 0.000 Mbps\\n-\\t          Bandwidth constraint CT230: -0.000 Mbps\\n-\\t          Bandwidth constraint CT231: 0.000 Mbps\\n-\\t          Bandwidth constraint CT232: 0.000 Mbps\\n-\\t          Bandwidth constraint CT233: 0.000 Mbps\\n-\\t          Bandwidth constraint CT234: 0.000 Mbps\\n-\\t          Bandwidth constraint CT235: 0.000 Mbps\\n-\\t          Bandwidth constraint CT236: 0.000 Mbps\\n-\\t          Bandwidth constraint CT237: 0.000 Mbps\\n-\\t          Bandwidth constraint CT238: 0.000 Mbps\\n-\\t          Bandwidth constraint CT239: 0.000 Mbps\\n-\\t          Bandwidth constraint CT240: 0.000 Mbps\\n-\\t          Bandwidth constraint CT241: 0.000 Mbps\\n-\\t          Bandwidth constraint CT242: 0.000 Mbps\\n-\\t          Bandwidth constraint CT243: 0.000 Mbps\\n-\\t          Bandwidth constraint CT244: 0.000 Mbps\\n-\\t          Bandwidth constraint CT245: 0.000 Mbps\\n-\\t          Bandwidth constraint CT246: 0.000 Mbps\\n-\\t          Bandwidth constraint CT247: 0.000 Mbps\\n-\\t          Bandwidth constraint CT248: 0.000 Mbps\\n-\\t          Bandwidth constraint CT249: 0.000 Mbps\\n-\\t          Bandwidth constraint CT250: 0.000 Mbps\\n-\\t          Bandwidth constraint CT251: 0.000 Mbps\\n-\\t          Bandwidth constraint CT252: 0.000 Mbps\\n-\\t          Bandwidth constraint CT253: 0.000 Mbps\\n-\\t          Bandwidth constraint CT254: 0.000 Mbps\\n-\\t          Bandwidth constraint CT255: 0.000 Mbps\\n-\\t          Bandwidth constraint CT256: 0.000 Mbps\\n-\\t          Bandwidth constraint CT257: 0.000 Mbps\\n-\\t          Bandwidth constraint CT258: 0.000 Mbps\\n-\\t          Bandwidth constraint CT259: 0.000 Mbps\\n-\\t          Bandwidth constraint CT260: 0.000 Mbps\\n-\\t          Bandwidth constraint CT261: 0.000 Mbps\\n-\\t          Bandwidth constraint CT262: 0.000 Mbps\\n-\\t          Bandwidth constraint CT263: 0.000 Mbps\\n-\\t          Bandwidth constraint CT264: 0.000 Mbps\\n-\\t          Bandwidth constraint CT265: 0.000 Mbps\\n-\\t          Bandwidth constraint CT266: 0.000 Mbps\\n-\\t          Bandwidth constraint CT267: 0.000 Mbps\\n-\\t          Bandwidth constraint CT268: 0.000 Mbps\\n-\\t\\t [|isis]\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #64, length: 0\\n+\\t        unknown subTLV #0, length: 189\\n+\\t\\t    0x0000:  0000 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0010:  00c2 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0020:  0000 0000 0000 0000 0000 0000 0020 0000\\n+\\t\\t    0x0030:  00f0 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0040:  0000 0000 0000 0000 0000 0000 5900 0000\\n+\\t\\t    0x0050:  0000 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0060:  0000 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0070:  0000 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x0080:  0000 0000 0000 0000 0000 7d00 0008 ff00\\n+\\t\\t    0x0090:  004a 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x00a0:  8000 0000 0000 0000 0000 0000 0000 0000\\n+\\t\\t    0x00b0:  0000 0000 0000 0000 0000 0000 00\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 3400.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.2302.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0069.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0200.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0067.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, sub-TLVs present (37)\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 7800.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0065.00, sub-TLVs present (128)\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #66, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 8\\n+\\t\\t    0x0000:  0000 0008 ff00 0000\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #121, length: 1\\n+\\t\\t    0x0000:  00\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #50, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #0, length: 0\\n+\\t        unknown subTLV #132, length: 8\\n+\\t\\t    0x0000:  0000 0000 0000 0000\\n+\\t        unknown subTLV #0, length: 0\\n+\\t      IS Neighbor: 8900.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 2500.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.2500.0000.c9, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0008.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: f700.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.004f.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 3d00.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0080.0002.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.007e.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t      IS Neighbor: 0000.0000.0000.00, no sub-TLVs present\\n+\\t    Padding TLV #8, length: 255\\n+\\t    Padding TLV #8, length: 255\\n+\\t    Padding TLV #8, length: 247\\n+\\t    unknown TLV #0, length: 0\\n+\\t    unknown TLV #0, length: 0\\n+\\t    unknown TLV #0, length: 0\\n+\\t    unknown TLV #0, length: 0\\n+\\t    Padding TLV #8, length: 155\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzBjYjFiOGE0MzRiNTk5YjhkNjM2ZGIwMjlhYWRiNzU3YzI0ZTM5ZDYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/0cb1b8a434b599b8d636db029aadb757c24e39d6", "content": "{\"sha\": \"0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjowY2IxYjhhNDM0YjU5OWI4ZDYzNmRiMDI5YWFkYjc1N2MyNGUzOWQ2\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-08-24T02:26:37Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13688/OLSR: Do bounds checks before we fetch data.\\n\\nWhile we're at it, clean up some other bounds checks, so we check that\\nwe have a complete IPv4 message header if it's IPv4 and a complete IPv6\\nmessage header if it's IPv6.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd tests using the capture files supplied by the reporter(s).\", \"tree\": {\"sha\": \"6d07ec8eda5132fb0834f858ca77a1dfe8a4f90d\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/6d07ec8eda5132fb0834f858ca77a1dfe8a4f90d\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"comment_count\": 7, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/0cb1b8a434b599b8d636db029aadb757c24e39d6/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"26b956739a77641634964e90aa765884daef0d0f\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/26b956739a77641634964e90aa765884daef0d0f\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/26b956739a77641634964e90aa765884daef0d0f\"}], \"stats\": {\"total\": 42, \"additions\": 33, \"deletions\": 9}, \"files\": [{\"sha\": \"e67988dfd8cb65177c4cab5948ee0deb269dfc45\", \"filename\": \"print-olsr.c\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 9, \"changes\": 21, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/print-olsr.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/print-olsr.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-olsr.c?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"patch\": \"@@ -359,10 +359,9 @@ olsr_print(netdissect_options *ndo,\\n         } msgptr;\\n         int msg_len_valid = 0;\\n \\n-        ND_TCHECK2(*tptr, sizeof(struct olsr_msg4));\\n-\\n         if (is_ipv6)\\n         {\\n+            ND_TCHECK2(*tptr, sizeof(struct olsr_msg6));\\n             msgptr.v6 = (const struct olsr_msg6 *) tptr;\\n             msg_type = msgptr.v6->msg_type;\\n             msg_len = EXTRACT_16BITS(msgptr.v6->msg_len);\\n@@ -393,6 +392,7 @@ olsr_print(netdissect_options *ndo,\\n         }\\n         else /* (!is_ipv6) */\\n         {\\n+            ND_TCHECK2(*tptr, sizeof(struct olsr_msg4));\\n             msgptr.v4 = (const struct olsr_msg4 *) tptr;\\n             msg_type = msgptr.v4->msg_type;\\n             msg_len = EXTRACT_16BITS(msgptr.v4->msg_len);\\n@@ -616,22 +616,25 @@ olsr_print(netdissect_options *ndo,\\n \\n         case OLSR_NAMESERVICE_MSG:\\n         {\\n-            u_int name_entries = EXTRACT_16BITS(msg_data+2);\\n-            u_int addr_size = 4;\\n-            int name_entries_valid = 0;\\n+            u_int name_entries;\\n+            u_int addr_size;\\n+            int name_entries_valid;\\n             u_int i;\\n \\n+            if (msg_tlen < 4)\\n+                goto trunc;\\n+            ND_TCHECK2(*msg_data, 4);\\n+\\n+            name_entries = EXTRACT_16BITS(msg_data+2);\\n+            addr_size = 4;\\n             if (is_ipv6)\\n                 addr_size = 16;\\n \\n+            name_entries_valid = 0;\\n             if ((name_entries > 0)\\n                     && ((name_entries * (4 + addr_size)) <= msg_tlen))\\n                 name_entries_valid = 1;\\n \\n-            if (msg_tlen < 4)\\n-                goto trunc;\\n-            ND_TCHECK2(*msg_data, 4);\\n-\\n             ND_PRINT((ndo, \\\"\\\\n\\\\t  Version %u, Entries %u%s\\\",\\n                    EXTRACT_16BITS(msg_data),\\n                    name_entries, (name_entries_valid == 0) ? \\\" (invalid)\\\" : \\\"\\\"));\"}, {\"sha\": \"7437ce763e5cd67bef053acb001745696ac39c52\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"patch\": \"@@ -575,6 +575,8 @@ lldp_8023_mtu-oobr\\tlldp_8023_mtu-oobr.pcap\\tlldp_8023_mtu-oobr.out\\t-v -c1\\n bgp_vpn_rt-oobr\\tbgp_vpn_rt-oobr.pcap\\tbgp_vpn_rt-oobr.out\\t-v -c1\\n cfm_sender_id-oobr\\tcfm_sender_id-oobr.pcap\\tcfm_sender_id-oobr.out\\t-v -c1\\n isis-extd-isreach-oobr\\tisis-extd-isreach-oobr.pcap\\tisis-extd-isreach-oobr.out -v -c4\\n+olsr-oobr-1\\t\\tolsr-oobr-1.pcap\\t\\tolsr-oobr-1.out\\t-v\\n+olsr-oobr-2\\t\\tolsr-oobr-2.pcap\\t\\tolsr-oobr-2.out\\t-v\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"1da231890b21f1063387a28b773cfce4bf6d92c5\", \"filename\": \"tests/olsr-oobr-1.out\", \"status\": \"added\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-1.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-1.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Folsr-oobr-1.out?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"patch\": \"@@ -0,0 +1,16 @@\\n+IP truncated-ip - 2315 bytes missing! (tos 0x0, ttl 18, id 4111, offset 0, flags [+, DF, rsvd], proto UDP (17), length 5373, bad cksum 8e7f (->9764)!)\\n+    15.251.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0800, length 2056\\n+\\tNameservice Message (0x82), originator 126.198.193.192, ttl 26, hop 145\\n+\\t  vtime 0.062s, msg-seq 0x0008, length 127[|olsr]\\n+IP truncated-ip - 2315 bytes missing! (tos 0x0, ttl 18, id 4111, offset 0, flags [+, DF, rsvd], proto UDP (17), length 5373, bad cksum 8e7f (->975f)!)\\n+    16.0.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0400, length 512\\n+\\tPowerinfo Message (0x80), originator 0.1.0.0, ttl 255, hop 255\\n+\\t  vtime 0.500s, msg-seq 0x0000, length 9216 (invalid)\\n+IP truncated-ip - 2315 bytes missing! (tos 0x0, ttl 18, id 4111, offset 0, flags [+, DF, rsvd], proto UDP (17), length 5373, bad cksum 8e7f (->9764)!)\\n+    15.251.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0800, length 2056\\n+\\tNameservice Message (0x82), originator 126.198.193.192, ttl 26, hop 145\\n+\\t  vtime 0.062s, msg-seq 0x0008, length 100[|olsr]\\n+IP truncated-ip - 2315 bytes missing! (tos 0x0, ttl 18, id 4111, offset 0, flags [+, DF, rsvd], proto UDP (17), length 5373, bad cksum 8e7f (->975f)!)\\n+    16.0.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0800, length 2056\\n+\\tNameservice Message (0x82), originator 126.198.193.192, ttl 26, hop 145\\n+\\t  vtime 0.062s, msg-seq 0x5c50, length 185[|olsr]\"}, {\"sha\": \"2abfe3e779ed8e7a2ef9ebdce1b7c362ff6f2397\", \"filename\": \"tests/olsr-oobr-1.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-1.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-1.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Folsr-oobr-1.pcap?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\"}, {\"sha\": \"c2d4a8fe32bc55cc0a0a3b528dbc9a9ef91e2756\", \"filename\": \"tests/olsr-oobr-2.out\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-2.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-2.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Folsr-oobr-2.out?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"patch\": \"@@ -0,0 +1,3 @@\\n+[|ether]\\n+[|ether]\\n+IP6 (flowlabel 0x06400, hlim 0, next-header UDP (17) payload length: 5401) 0:24::1e:a0a:141e.698 > 38fd:7f49:eaff:ffff:2025:7373:7562:2573.2: OLSRv6, seq 0x0201, length 5393[|olsr]\"}, {\"sha\": \"0ccd79cbd5c7fb277e9db7d277736a076c81d3d7\", \"filename\": \"tests/olsr-oobr-2.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-2.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/0cb1b8a434b599b8d636db029aadb757c24e39d6/tests%2Folsr-oobr-2.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Folsr-oobr-2.pcap?ref=0cb1b8a434b599b8d636db029aadb757c24e39d6\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGhlLXRjcGR1bXAtZ3JvdXAvdGNwZHVtcC9jb21taXRzLzA2MWU3MzcxYTk0NDU4OGYyMzFjYjFiNjZkNmZiMDcwYjY0NmUzNzYi.json", "commit": "https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/061e7371a944588f231cb1b66d6fb070b646e376", "content": "{\"sha\": \"061e7371a944588f231cb1b66d6fb070b646e376\", \"node_id\": \"MDY6Q29tbWl0OTQzNTg4MjowNjFlNzM3MWE5NDQ1ODhmMjMxY2IxYjY2ZDZmYjA3MGI2NDZlMzc2\", \"commit\": {\"author\": {\"name\": \"Guy Harris\", \"email\": \"guy@alum.mit.edu\", \"date\": \"2017-08-24T03:45:39Z\"}, \"committer\": {\"name\": \"Denis Ovsienko\", \"email\": \"denis@ovsienko.info\", \"date\": \"2017-09-13T11:25:44Z\"}, \"message\": \"CVE-2017-13689/IKEv1: Fix addr+subnet length check.\\n\\nAn IPv6 address plus subnet mask is 32 bytes, not 20 bytes.\\n16 bytes of IPv6 address, 16 bytes of subnet mask.\\n\\nThis fixes a buffer over-read discovered by Bhargava Shastry,\\nSecT/TU Berlin.\\n\\nAdd a test using the capture file supplied by the reporter(s).\", \"tree\": {\"sha\": \"7cc83035719725b3ed7a4dca54bc532400a613fd\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/trees/7cc83035719725b3ed7a4dca54bc532400a613fd\"}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/git/commits/061e7371a944588f231cb1b66d6fb070b646e376\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/061e7371a944588f231cb1b66d6fb070b646e376\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/061e7371a944588f231cb1b66d6fb070b646e376\", \"comments_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/061e7371a944588f231cb1b66d6fb070b646e376/comments\", \"author\": {\"login\": \"guyharris\", \"id\": 3599441, \"node_id\": \"MDQ6VXNlcjM1OTk0NDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3599441?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guyharris\", \"html_url\": \"https://github.com/guyharris\", \"followers_url\": \"https://api.github.com/users/guyharris/followers\", \"following_url\": \"https://api.github.com/users/guyharris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guyharris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guyharris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guyharris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guyharris/orgs\", \"repos_url\": \"https://api.github.com/users/guyharris/repos\", \"events_url\": \"https://api.github.com/users/guyharris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guyharris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"infrastation\", \"id\": 900115, \"node_id\": \"MDQ6VXNlcjkwMDExNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/900115?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/infrastation\", \"html_url\": \"https://github.com/infrastation\", \"followers_url\": \"https://api.github.com/users/infrastation/followers\", \"following_url\": \"https://api.github.com/users/infrastation/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/infrastation/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/infrastation/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/infrastation/subscriptions\", \"organizations_url\": \"https://api.github.com/users/infrastation/orgs\", \"repos_url\": \"https://api.github.com/users/infrastation/repos\", \"events_url\": \"https://api.github.com/users/infrastation/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/infrastation/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/commits/0cb1b8a434b599b8d636db029aadb757c24e39d6\", \"html_url\": \"https://github.com/the-tcpdump-group/tcpdump/commit/0cb1b8a434b599b8d636db029aadb757c24e39d6\"}], \"stats\": {\"total\": 8, \"additions\": 6, \"deletions\": 2}, \"files\": [{\"sha\": \"fbc6c542037e86303177d92601c96d7d8af84617\", \"filename\": \"print-isakmp.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/061e7371a944588f231cb1b66d6fb070b646e376/print-isakmp.c\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/061e7371a944588f231cb1b66d6fb070b646e376/print-isakmp.c\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-isakmp.c?ref=061e7371a944588f231cb1b66d6fb070b646e376\", \"patch\": \"@@ -1435,8 +1435,8 @@ ikev1_id_print(netdissect_options *ndo, u_char tpay _U_,\\n \\t\\tcase IPSECDOI_ID_IPV6_ADDR_SUBNET:\\n \\t\\t    {\\n \\t\\t\\tconst u_char *mask;\\n-\\t\\t\\tif (len < 20)\\n-\\t\\t\\t\\tND_PRINT((ndo,\\\" len=%d [bad: < 20]\\\", len));\\n+\\t\\t\\tif (len < 32)\\n+\\t\\t\\t\\tND_PRINT((ndo,\\\" len=%d [bad: < 32]\\\", len));\\n \\t\\t\\telse {\\n \\t\\t\\t\\tmask = (const u_char *)(data + sizeof(struct in6_addr));\\n \\t\\t\\t\\t/*XXX*/\"}, {\"sha\": \"0e70972101ca6138d2b7623f397c2b7ab49c9eee\", \"filename\": \"tests/TESTLIST\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/061e7371a944588f231cb1b66d6fb070b646e376/tests%2FTESTLIST\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/061e7371a944588f231cb1b66d6fb070b646e376/tests%2FTESTLIST\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2FTESTLIST?ref=061e7371a944588f231cb1b66d6fb070b646e376\", \"patch\": \"@@ -577,6 +577,7 @@ cfm_sender_id-oobr\\tcfm_sender_id-oobr.pcap\\tcfm_sender_id-oobr.out\\t-v -c1\\n isis-extd-isreach-oobr\\tisis-extd-isreach-oobr.pcap\\tisis-extd-isreach-oobr.out -v -c4\\n olsr-oobr-1\\t\\tolsr-oobr-1.pcap\\t\\tolsr-oobr-1.out\\t-v\\n olsr-oobr-2\\t\\tolsr-oobr-2.pcap\\t\\tolsr-oobr-2.out\\t-v\\n+ikev1_id_ipv6_addr_subnet-oobr\\tikev1_id_ipv6_addr_subnet-oobr.pcap\\tikev1_id_ipv6_addr_subnet-oobr.out\\t-v\\n \\n # bad packets from Katie Holly\\n mlppp-oobr\\t\\tmlppp-oobr.pcap\\t\\t\\tmlppp-oobr.out\"}, {\"sha\": \"0662f0043e56e67be04e491788132a5759d0cc30\", \"filename\": \"tests/ikev1_id_ipv6_addr_subnet-oobr.out\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/061e7371a944588f231cb1b66d6fb070b646e376/tests%2Fikev1_id_ipv6_addr_subnet-oobr.out\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/061e7371a944588f231cb1b66d6fb070b646e376/tests%2Fikev1_id_ipv6_addr_subnet-oobr.out\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fikev1_id_ipv6_addr_subnet-oobr.out?ref=061e7371a944588f231cb1b66d6fb070b646e376\", \"patch\": \"@@ -0,0 +1,3 @@\\n+IP (tos 0x0, ttl 100, id 40207, offset 0, flags [+, DF, rsvd], proto UDP (17), length 32808, bad cksum 8e7f (->bc78)!)\\n+    16.0.128.20.500 > 12.251.0.45.0: isakmp 1.0 msgid 0d101010: phase 2/others ? #16[]:\\n+    (id: idtype=IPv6net protoid=16 port=4112 len=24 [bad: < 32]) [|#145] (len mismatch: isakmp 4278190080/ip 4856)\"}, {\"sha\": \"b9cfebd2ec7761b078be3c2adad23773c996b352\", \"filename\": \"tests/ikev1_id_ipv6_addr_subnet-oobr.pcap\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/the-tcpdump-group/tcpdump/blob/061e7371a944588f231cb1b66d6fb070b646e376/tests%2Fikev1_id_ipv6_addr_subnet-oobr.pcap\", \"raw_url\": \"https://github.com/the-tcpdump-group/tcpdump/raw/061e7371a944588f231cb1b66d6fb070b646e376/tests%2Fikev1_id_ipv6_addr_subnet-oobr.pcap\", \"contents_url\": \"https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/tests%2Fikev1_id_ipv6_addr_subnet-oobr.pcap?ref=061e7371a944588f231cb1b66d6fb070b646e376\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvem5jL3puYy9jb21taXRzL2QyMjk3NjE4MjFkYTM4ZDk4NGE5ZTQwOThhZDk2ODQyNDkwZGMwMDEi.json", "commit": "https://api.github.com/repos/znc/znc/commits/d229761821da38d984a9e4098ad96842490dc001", "content": "{\"sha\": \"d229761821da38d984a9e4098ad96842490dc001\", \"node_id\": \"MDY6Q29tbWl0NDY1NjgxOmQyMjk3NjE4MjFkYTM4ZDk4NGE5ZTQwOThhZDk2ODQyNDkwZGMwMDE=\", \"commit\": {\"author\": {\"name\": \"Alexey Sokolov\", \"email\": \"alexey+znc@asokolov.org\", \"date\": \"2020-03-29T07:45:10Z\"}, \"committer\": {\"name\": \"Alexey Sokolov\", \"email\": \"alexey+znc@asokolov.org\", \"date\": \"2020-03-29T07:45:10Z\"}, \"message\": \"Fix echo-message for *status\\n\\nClose #1705\", \"tree\": {\"sha\": \"5b488932453f8f58ea9a6b75a711b1bb37ef3881\", \"url\": \"https://api.github.com/repos/znc/znc/git/trees/5b488932453f8f58ea9a6b75a711b1bb37ef3881\"}, \"url\": \"https://api.github.com/repos/znc/znc/git/commits/d229761821da38d984a9e4098ad96842490dc001\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/znc/znc/commits/d229761821da38d984a9e4098ad96842490dc001\", \"html_url\": \"https://github.com/znc/znc/commit/d229761821da38d984a9e4098ad96842490dc001\", \"comments_url\": \"https://api.github.com/repos/znc/znc/commits/d229761821da38d984a9e4098ad96842490dc001/comments\", \"author\": {\"login\": \"DarthGandalf\", \"id\": 325092, \"node_id\": \"MDQ6VXNlcjMyNTA5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/325092?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/DarthGandalf\", \"html_url\": \"https://github.com/DarthGandalf\", \"followers_url\": \"https://api.github.com/users/DarthGandalf/followers\", \"following_url\": \"https://api.github.com/users/DarthGandalf/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/DarthGandalf/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/DarthGandalf/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/DarthGandalf/subscriptions\", \"organizations_url\": \"https://api.github.com/users/DarthGandalf/orgs\", \"repos_url\": \"https://api.github.com/users/DarthGandalf/repos\", \"events_url\": \"https://api.github.com/users/DarthGandalf/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/DarthGandalf/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"DarthGandalf\", \"id\": 325092, \"node_id\": \"MDQ6VXNlcjMyNTA5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/325092?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/DarthGandalf\", \"html_url\": \"https://github.com/DarthGandalf\", \"followers_url\": \"https://api.github.com/users/DarthGandalf/followers\", \"following_url\": \"https://api.github.com/users/DarthGandalf/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/DarthGandalf/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/DarthGandalf/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/DarthGandalf/subscriptions\", \"organizations_url\": \"https://api.github.com/users/DarthGandalf/orgs\", \"repos_url\": \"https://api.github.com/users/DarthGandalf/repos\", \"events_url\": \"https://api.github.com/users/DarthGandalf/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/DarthGandalf/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6d1ef8d09923388d4d5d390a4db898ca6194a2be\", \"url\": \"https://api.github.com/repos/znc/znc/commits/6d1ef8d09923388d4d5d390a4db898ca6194a2be\", \"html_url\": \"https://github.com/znc/znc/commit/6d1ef8d09923388d4d5d390a4db898ca6194a2be\"}], \"stats\": {\"total\": 18, \"additions\": 16, \"deletions\": 2}, \"files\": [{\"sha\": \"6d8f4518ba8e82936492f9570ebaf20778c8804a\", \"filename\": \"src/Client.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/znc/znc/blob/d229761821da38d984a9e4098ad96842490dc001/src%2FClient.cpp\", \"raw_url\": \"https://github.com/znc/znc/raw/d229761821da38d984a9e4098ad96842490dc001/src%2FClient.cpp\", \"contents_url\": \"https://api.github.com/repos/znc/znc/contents/src%2FClient.cpp?ref=d229761821da38d984a9e4098ad96842490dc001\", \"patch\": \"@@ -1234,6 +1234,8 @@ bool CClient::OnTextMessage(CTextMessage& Message) {\\n         }\\n \\n         if (sTarget.TrimPrefix(m_pUser->GetStatusPrefix())) {\\n+            EchoMessage(Message);\\n+\\n             if (sTarget.Equals(\\\"status\\\")) {\\n                 CString sMsg = Message.GetText();\\n                 UserCommand(sMsg);\"}, {\"sha\": \"a3f0d4dab602052a8d8b30734e0bb5e0724217f5\", \"filename\": \"test/integration/tests/core.cpp\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 2, \"changes\": 16, \"blob_url\": \"https://github.com/znc/znc/blob/d229761821da38d984a9e4098ad96842490dc001/test%2Fintegration%2Ftests%2Fcore.cpp\", \"raw_url\": \"https://github.com/znc/znc/raw/d229761821da38d984a9e4098ad96842490dc001/test%2Fintegration%2Ftests%2Fcore.cpp\", \"contents_url\": \"https://api.github.com/repos/znc/znc/contents/test%2Fintegration%2Ftests%2Fcore.cpp?ref=d229761821da38d984a9e4098ad96842490dc001\", \"patch\": \"@@ -14,9 +14,10 @@\\n  * limitations under the License.\\n  */\\n \\n-#include \\\"znctest.h\\\"\\n #include <gmock/gmock.h>\\n \\n+#include \\\"znctest.h\\\"\\n+\\n using testing::HasSubstr;\\n \\n namespace znc_inttest {\\n@@ -244,7 +245,8 @@ TEST_F(ZNCTest, AwayNotify) {\\n     client.Write(\\\"USER user/test x x :x\\\");\\n     QByteArray cap_ls;\\n     client.ReadUntilAndGet(\\\" LS :\\\", cap_ls);\\n-    ASSERT_THAT(cap_ls.toStdString(), AllOf(HasSubstr(\\\"cap-notify\\\"), Not(HasSubstr(\\\"away-notify\\\"))));\\n+    ASSERT_THAT(cap_ls.toStdString(),\\n+                AllOf(HasSubstr(\\\"cap-notify\\\"), Not(HasSubstr(\\\"away-notify\\\"))));\\n     client.Write(\\\"CAP REQ :cap-notify\\\");\\n     client.ReadUntil(\\\"ACK :cap-notify\\\");\\n     client.Write(\\\"CAP END\\\");\\n@@ -284,5 +286,15 @@ TEST_F(ZNCTest, JoinKey) {\\n     ircd.ReadUntil(\\\"JOIN #znc secret\\\");\\n }\\n \\n+TEST_F(ZNCTest, StatusEchoMessage) {\\n+    auto znc = Run();\\n+    auto ircd = ConnectIRCd();\\n+    auto client = LoginClient();\\n+    client.Write(\\\"CAP REQ :echo-message\\\");\\n+    client.Write(\\\"PRIVMSG *status :blah\\\");\\n+    client.ReadUntil(\\\":nick!user@irc.znc.in PRIVMSG *status :blah\\\");\\n+    client.ReadUntil(\\\":*status!znc@znc.in PRIVMSG nick :Unknown command\\\");\\n+}\\n+\\n }  // namespace\\n }  // namespace znc_inttest\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvem5jL3puYy9jb21taXRzLzIzOTBhZDExMWJkZTE2YTc4Yzk4YWM0NDU3MjA5MGIzM2MzYmQyZDgi.json", "commit": "https://api.github.com/repos/znc/znc/commits/2390ad111bde16a78c98ac44572090b33c3bd2d8", "content": "{\"sha\": \"2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"node_id\": \"MDY6Q29tbWl0NDY1NjgxOjIzOTBhZDExMWJkZTE2YTc4Yzk4YWM0NDU3MjA5MGIzM2MzYmQyZDg=\", \"commit\": {\"author\": {\"name\": \"Alexey Sokolov\", \"email\": \"alexey+znc@asokolov.org\", \"date\": \"2020-05-31T10:32:04Z\"}, \"committer\": {\"name\": \"Alexey Sokolov\", \"email\": \"alexey+znc@asokolov.org\", \"date\": \"2020-05-31T10:45:40Z\"}, \"message\": \"Fix null pointer dereference in echo-message\\n\\nThe bug was introduced while fixing #1705. If a client did not enable\\necho-message, and doesn't have a network, it crashes.\\n\\nThanks to LunarBNC for reporting this\", \"tree\": {\"sha\": \"e4879c722744d71318d014701892c623e9fbbdc9\", \"url\": \"https://api.github.com/repos/znc/znc/git/trees/e4879c722744d71318d014701892c623e9fbbdc9\"}, \"url\": \"https://api.github.com/repos/znc/znc/git/commits/2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/znc/znc/commits/2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"html_url\": \"https://github.com/znc/znc/commit/2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"comments_url\": \"https://api.github.com/repos/znc/znc/commits/2390ad111bde16a78c98ac44572090b33c3bd2d8/comments\", \"author\": {\"login\": \"DarthGandalf\", \"id\": 325092, \"node_id\": \"MDQ6VXNlcjMyNTA5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/325092?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/DarthGandalf\", \"html_url\": \"https://github.com/DarthGandalf\", \"followers_url\": \"https://api.github.com/users/DarthGandalf/followers\", \"following_url\": \"https://api.github.com/users/DarthGandalf/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/DarthGandalf/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/DarthGandalf/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/DarthGandalf/subscriptions\", \"organizations_url\": \"https://api.github.com/users/DarthGandalf/orgs\", \"repos_url\": \"https://api.github.com/users/DarthGandalf/repos\", \"events_url\": \"https://api.github.com/users/DarthGandalf/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/DarthGandalf/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"DarthGandalf\", \"id\": 325092, \"node_id\": \"MDQ6VXNlcjMyNTA5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/325092?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/DarthGandalf\", \"html_url\": \"https://github.com/DarthGandalf\", \"followers_url\": \"https://api.github.com/users/DarthGandalf/followers\", \"following_url\": \"https://api.github.com/users/DarthGandalf/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/DarthGandalf/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/DarthGandalf/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/DarthGandalf/subscriptions\", \"organizations_url\": \"https://api.github.com/users/DarthGandalf/orgs\", \"repos_url\": \"https://api.github.com/users/DarthGandalf/repos\", \"events_url\": \"https://api.github.com/users/DarthGandalf/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/DarthGandalf/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c16c343da91c0cb8d4ff2dd94ecd07e5a3a640b4\", \"url\": \"https://api.github.com/repos/znc/znc/commits/c16c343da91c0cb8d4ff2dd94ecd07e5a3a640b4\", \"html_url\": \"https://github.com/znc/znc/commit/c16c343da91c0cb8d4ff2dd94ecd07e5a3a640b4\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"fb39b3fa7b0ddecf682ec8c54ba418ba976f9823\", \"filename\": \"src/Client.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/znc/znc/blob/2390ad111bde16a78c98ac44572090b33c3bd2d8/src%2FClient.cpp\", \"raw_url\": \"https://github.com/znc/znc/raw/2390ad111bde16a78c98ac44572090b33c3bd2d8/src%2FClient.cpp\", \"contents_url\": \"https://api.github.com/repos/znc/znc/contents/src%2FClient.cpp?ref=2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"patch\": \"@@ -889,7 +889,7 @@ void CClient::EchoMessage(const CMessage& Message) {\\n     CMessage EchoedMessage = Message;\\n     for (CClient* pClient : GetClients()) {\\n         if (pClient->HasEchoMessage() ||\\n-            (pClient != this && (m_pNetwork->IsChan(Message.GetParam(0)) ||\\n+            (pClient != this && ((m_pNetwork && m_pNetwork->IsChan(Message.GetParam(0))) ||\\n                                  pClient->HasSelfMessage()))) {\\n             EchoedMessage.SetNick(GetNickMask());\\n             pClient->PutClient(EchoedMessage);\"}, {\"sha\": \"f50a32c7bc2c0f71ab5c9a282dfb312a76bfb4d1\", \"filename\": \"test/integration/tests/core.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/znc/znc/blob/2390ad111bde16a78c98ac44572090b33c3bd2d8/test%2Fintegration%2Ftests%2Fcore.cpp\", \"raw_url\": \"https://github.com/znc/znc/raw/2390ad111bde16a78c98ac44572090b33c3bd2d8/test%2Fintegration%2Ftests%2Fcore.cpp\", \"contents_url\": \"https://api.github.com/repos/znc/znc/contents/test%2Fintegration%2Ftests%2Fcore.cpp?ref=2390ad111bde16a78c98ac44572090b33c3bd2d8\", \"patch\": \"@@ -297,6 +297,14 @@ TEST_F(ZNCTest, StatusEchoMessage) {\\n     client.Write(\\\"PRIVMSG *status :blah\\\");\\n     client.ReadUntil(\\\":nick!user@irc.znc.in PRIVMSG *status :blah\\\");\\n     client.ReadUntil(\\\":*status!znc@znc.in PRIVMSG nick :Unknown command\\\");\\n+    client.Write(\\\"znc delnetwork test\\\");\\n+    client.ReadUntil(\\\"Network deleted\\\");\\n+    auto client2 = LoginClient();\\n+    client2.Write(\\\"PRIVMSG *status :blah2\\\");\\n+    client2.ReadUntil(\\\":*status!znc@znc.in PRIVMSG nick :Unknown command\\\");\\n+    auto client3 = LoginClient();\\n+    client3.Write(\\\"PRIVMSG *status :blah3\\\");\\n+    client3.ReadUntil(\\\":*status!znc@znc.in PRIVMSG nick :Unknown command\\\");\\n }\\n \\n }  // namespace\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbW9uZ29kYi9tb25nby1jLWRyaXZlci9jb21taXRzLzBkOWE0ZDk4YmZkZjRhY2QyYzAxMzhkNGFhZWI0ZTJlMDkzNGJkODQi.json", "commit": "https://api.github.com/repos/mongodb/mongo-c-driver/commits/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84", "content": "{\"sha\": \"0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"node_id\": \"MDY6Q29tbWl0OTczNTA3NzowZDlhNGQ5OGJmZGY0YWNkMmMwMTM4ZDRhYWViNGUyZTA5MzRiZDg0\", \"commit\": {\"author\": {\"name\": \"Scott Gayou\", \"email\": \"sgayou@redhat.com\", \"date\": \"2018-09-14T16:55:11Z\"}, \"committer\": {\"name\": \"A. Jesse Jiryu Davis\", \"email\": \"jesse@emptysquare.net\", \"date\": \"2018-09-17T17:31:23Z\"}, \"message\": \"Fix for CVE-2018-16790 -- Verify bounds before binary length read.\\n\\nAs reported here: https://jira.mongodb.org/browse/CDRIVER-2819,\\na heap overread occurs due a failure to correctly verify data\\nbounds.\\n\\nIn the original check, len - o returns the data left including the\\nsizeof(l) we just read. Instead, the comparison should check\\nagainst the data left NOT including the binary int32, i.e. just\\nsubtype (byte*) instead of int32 subtype (byte*).\\n\\nAdded in test for corrupted BSON example.\", \"tree\": {\"sha\": \"5b27718c62a8e82df83262400fc1c624dfa7146e\", \"url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/git/trees/5b27718c62a8e82df83262400fc1c624dfa7146e\"}, \"url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/git/commits/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/commits/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"html_url\": \"https://github.com/mongodb/mongo-c-driver/commit/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"comments_url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/commits/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/comments\", \"author\": null, \"committer\": {\"login\": \"ajdavis\", \"id\": 84101, \"node_id\": \"MDQ6VXNlcjg0MTAx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/84101?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ajdavis\", \"html_url\": \"https://github.com/ajdavis\", \"followers_url\": \"https://api.github.com/users/ajdavis/followers\", \"following_url\": \"https://api.github.com/users/ajdavis/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ajdavis/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ajdavis/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ajdavis/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ajdavis/orgs\", \"repos_url\": \"https://api.github.com/users/ajdavis/repos\", \"events_url\": \"https://api.github.com/users/ajdavis/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ajdavis/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"47d0f7eb3dfd16f37e21504a8ec36bc21eb28ed4\", \"url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/commits/47d0f7eb3dfd16f37e21504a8ec36bc21eb28ed4\", \"html_url\": \"https://github.com/mongodb/mongo-c-driver/commit/47d0f7eb3dfd16f37e21504a8ec36bc21eb28ed4\"}], \"stats\": {\"total\": 7, \"additions\": 6, \"deletions\": 1}, \"files\": [{\"sha\": \"820134ea8280cd5274444d18262a03d1c636e5b6\", \"filename\": \"src/libbson/src/bson/bson-iter.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/mongodb/mongo-c-driver/blob/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Fsrc%2Fbson%2Fbson-iter.c\", \"raw_url\": \"https://github.com/mongodb/mongo-c-driver/raw/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Fsrc%2Fbson%2Fbson-iter.c\", \"contents_url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/contents/src%2Flibbson%2Fsrc%2Fbson%2Fbson-iter.c?ref=0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"patch\": \"@@ -618,7 +618,7 @@ _bson_iter_next_internal (bson_iter_t *iter,    /* INOUT */\\n       memcpy (&l, iter->raw + iter->d1, sizeof (l));\\n       l = BSON_UINT32_FROM_LE (l);\\n \\n-      if (l >= (len - o)) {\\n+      if (l >= (len - o - 4)) {\\n          iter->err_off = o;\\n          goto mark_invalid;\\n       }\"}, {\"sha\": \"5fd8be074e0a811e4d4d6004e046aac0c8711fea\", \"filename\": \"src/libbson/tests/binary/test59.bson\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/mongodb/mongo-c-driver/blob/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Ftests%2Fbinary%2Ftest59.bson\", \"raw_url\": \"https://github.com/mongodb/mongo-c-driver/raw/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Ftests%2Fbinary%2Ftest59.bson\", \"contents_url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/contents/src%2Flibbson%2Ftests%2Fbinary%2Ftest59.bson?ref=0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\"}, {\"sha\": \"6ac94f3aee70873243d42af264c181974e10deca\", \"filename\": \"src/libbson/tests/test-bson.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/mongodb/mongo-c-driver/blob/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Ftests%2Ftest-bson.c\", \"raw_url\": \"https://github.com/mongodb/mongo-c-driver/raw/0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84/src%2Flibbson%2Ftests%2Ftest-bson.c\", \"contents_url\": \"https://api.github.com/repos/mongodb/mongo-c-driver/contents/src%2Flibbson%2Ftests%2Ftest-bson.c?ref=0d9a4d98bfdf4acd2c0138d4aaeb4e2e0934bd84\", \"patch\": \"@@ -1249,6 +1249,11 @@ test_bson_validate (void)\\n                   12,\\n                   BSON_VALIDATE_NONE,\\n                   \\\"corrupt BSON\\\");\\n+   VALIDATE_TEST (\\\"test59.bson\\\",\\n+                  BSON_VALIDATE_NONE,\\n+                  9,\\n+                  BSON_VALIDATE_NONE,\\n+                  \\\"corrupt BSON\\\");\\n \\n    /* DBRef validation */\\n    b = BCON_NEW (\\\"my_dbref\\\",\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvd2VibXByb2plY3QvbGlidnB4L2NvbW1pdHMvM2ZiZDFkY2E2YTRkMmRhZDMzMmEyMTEwZDY0NmU0ZmZlZjM2ZDU5MCI=.json", "commit": "https://api.github.com/repos/webmproject/libvpx/commits/3fbd1dca6a4d2dad332a2110d646e4ffef36d590", "content": "{\"sha\": \"3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"node_id\": \"C_kwDOAV3Y-NoAKDNmYmQxZGNhNmE0ZDJkYWQzMzJhMjExMGQ2NDZlNGZmZWYzNmQ1OTA\", \"commit\": {\"author\": {\"name\": \"James Zern\", \"email\": \"jzern@google.com\", \"date\": \"2023-09-26T01:55:59Z\"}, \"committer\": {\"name\": \"James Zern\", \"email\": \"jzern@google.com\", \"date\": \"2023-09-26T02:33:07Z\"}, \"message\": \"VP8: disallow thread count changes\\n\\nCurrently allocations are done at encoder creation time. Going from\\nthreaded to non-threaded would cause a crash.\\n\\nBug: chromium:1486441\\nChange-Id: Ie301c2a70847dff2f0daae408fbef1e4d42e73d4\", \"tree\": {\"sha\": \"f756eae1ba5efc754f8afc592c6b98c8b32a5448\", \"url\": \"https://api.github.com/repos/webmproject/libvpx/git/trees/f756eae1ba5efc754f8afc592c6b98c8b32a5448\"}, \"url\": \"https://api.github.com/repos/webmproject/libvpx/git/commits/3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/webmproject/libvpx/commits/3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"html_url\": \"https://github.com/webmproject/libvpx/commit/3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"comments_url\": \"https://api.github.com/repos/webmproject/libvpx/commits/3fbd1dca6a4d2dad332a2110d646e4ffef36d590/comments\", \"author\": {\"login\": \"jzern\", \"id\": 12821284, \"node_id\": \"MDQ6VXNlcjEyODIxMjg0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12821284?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jzern\", \"html_url\": \"https://github.com/jzern\", \"followers_url\": \"https://api.github.com/users/jzern/followers\", \"following_url\": \"https://api.github.com/users/jzern/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jzern/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jzern/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jzern/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jzern/orgs\", \"repos_url\": \"https://api.github.com/users/jzern/repos\", \"events_url\": \"https://api.github.com/users/jzern/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jzern/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jzern\", \"id\": 12821284, \"node_id\": \"MDQ6VXNlcjEyODIxMjg0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12821284?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jzern\", \"html_url\": \"https://github.com/jzern\", \"followers_url\": \"https://api.github.com/users/jzern/followers\", \"following_url\": \"https://api.github.com/users/jzern/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jzern/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jzern/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jzern/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jzern/orgs\", \"repos_url\": \"https://api.github.com/users/jzern/repos\", \"events_url\": \"https://api.github.com/users/jzern/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jzern/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"af6dedd715f4307669366944cca6e0417b290282\", \"url\": \"https://api.github.com/repos/webmproject/libvpx/commits/af6dedd715f4307669366944cca6e0417b290282\", \"html_url\": \"https://github.com/webmproject/libvpx/commit/af6dedd715f4307669366944cca6e0417b290282\"}], \"stats\": {\"total\": 9, \"additions\": 5, \"deletions\": 4}, \"files\": [{\"sha\": \"f1c98b2c71c91a652c2314103dc340783206ea10\", \"filename\": \"test/encode_api_test.cc\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 4, \"changes\": 4, \"blob_url\": \"https://github.com/webmproject/libvpx/blob/3fbd1dca6a4d2dad332a2110d646e4ffef36d590/test%2Fencode_api_test.cc\", \"raw_url\": \"https://github.com/webmproject/libvpx/raw/3fbd1dca6a4d2dad332a2110d646e4ffef36d590/test%2Fencode_api_test.cc\", \"contents_url\": \"https://api.github.com/repos/webmproject/libvpx/contents/test%2Fencode_api_test.cc?ref=3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"patch\": \"@@ -370,10 +370,6 @@ TEST(EncodeAPI, ConfigResizeChangeThreadCount) {\\n \\n   for (const auto *iface : kCodecIfaces) {\\n     SCOPED_TRACE(vpx_codec_iface_name(iface));\\n-    if (!IsVP9(iface)) {\\n-      GTEST_SKIP() << \\\"TODO(https://crbug.com/1486441) remove this condition \\\"\\n-                      \\\"after VP8 is fixed.\\\";\\n-    }\\n     for (int i = 0; i < (IsVP9(iface) ? 2 : 1); ++i) {\\n       vpx_codec_enc_cfg_t cfg = {};\\n       struct Encoder {\"}, {\"sha\": \"c5e9970c3cc8c8bd7b91246f413372d7254ef713\", \"filename\": \"vp8/encoder/onyx_if.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/webmproject/libvpx/blob/3fbd1dca6a4d2dad332a2110d646e4ffef36d590/vp8%2Fencoder%2Fonyx_if.c\", \"raw_url\": \"https://github.com/webmproject/libvpx/raw/3fbd1dca6a4d2dad332a2110d646e4ffef36d590/vp8%2Fencoder%2Fonyx_if.c\", \"contents_url\": \"https://api.github.com/repos/webmproject/libvpx/contents/vp8%2Fencoder%2Fonyx_if.c?ref=3fbd1dca6a4d2dad332a2110d646e4ffef36d590\", \"patch\": \"@@ -1447,6 +1447,11 @@ void vp8_change_config(VP8_COMP *cpi, VP8_CONFIG *oxcf) {\\n   last_h = cpi->oxcf.Height;\\n   prev_number_of_layers = cpi->oxcf.number_of_layers;\\n \\n+  if (cpi->initial_width) {\\n+    // TODO(https://crbug.com/1486441): Allow changing thread counts; the\\n+    // allocation is done once in vp8_create_compressor().\\n+    oxcf->multi_threaded = cpi->oxcf.multi_threaded;\\n+  }\\n   cpi->oxcf = *oxcf;\\n \\n   switch (cpi->oxcf.Mode) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzLzUyMmViZmE3Y2VlOTZmYjMyNWEyMmVhM2EyNDY0YTYzNDg1ODg2YTgi.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/522ebfa7cee96fb325a22ea3a2464a63485886a8", "content": "{\"sha\": \"522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OjUyMmViZmE3Y2VlOTZmYjMyNWEyMmVhM2EyNDY0YTYzNDg1ODg2YTg=\", \"commit\": {\"author\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-11-21T19:37:00Z\"}, \"committer\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-11-21T19:37:00Z\"}, \"message\": \"Whenever a generated column is used, assume that all columns are used.\\n\\nFossilOrigin-Name: 6601da58032d18ae00b466c0f2077fb2b1ecd84225b56e1787724bea478eedc9\", \"tree\": {\"sha\": \"270a2eaf1b17376ee4ea60f03ca18deabe886560\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/270a2eaf1b17376ee4ea60f03ca18deabe886560\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/522ebfa7cee96fb325a22ea3a2464a63485886a8/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"57f7ece78410a8aae86aa4625fb7556897db384c\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/57f7ece78410a8aae86aa4625fb7556897db384c\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c\"}], \"stats\": {\"total\": 47, \"additions\": 33, \"deletions\": 14}, \"files\": [{\"sha\": \"e2de30a0791a18d646f136b643b4028a11ac7d2d\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/522ebfa7cee96fb325a22ea3a2464a63485886a8/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/522ebfa7cee96fb325a22ea3a2464a63485886a8/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Fix\\\\sa\\\\sproblem\\\\sthat\\\\scomes\\\\sup\\\\swhen\\\\susing\\\\sgenerated\\\\scolumns\\\\sthat\\\\sevaluate\\\\sto\\\\sa\\\\nconstant\\\\sin\\\\san\\\\sindex\\\\sand\\\\sthen\\\\smaking\\\\suse\\\\sof\\\\sthat\\\\sindex\\\\sin\\\\sa\\\\sjoin.\\n-D 2019-11-21T18:28:44.463\\n+C Whenever\\\\sa\\\\sgenerated\\\\scolumn\\\\sis\\\\sused,\\\\sassume\\\\sthat\\\\sall\\\\scolumns\\\\sare\\\\sused.\\n+D 2019-11-21T19:37:00.986\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -524,7 +524,7 @@ F src/pragma.h ec3b31eac9b1df040f1cc8cb3d89bc06605c3b4cb3d76f833de8d6d6c3f77f04\\n F src/prepare.c 6049beb71385f017af6fc320d2c75a4e50b75e280c54232442b785fbb83df057\\n F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\\n F src/random.c 80f5d666f23feb3e6665a6ce04c7197212a88384\\n-F src/resolve.c cf2391c93d425455388389e7a47674b9da107d2ed69ebf49979044d70dbeb045\\n+F src/resolve.c 023397b50d09a3587a15169b713342e2d595ab29e14e54fd8f4a86b76c461d21\\n F src/rowset.c d977b011993aaea002cab3e0bb2ce50cf346000dff94e944d547b989f4b1fe93\\n F src/select.c 50ccaf5fc3566b897fd3090b63bd60605f2f3f38ac5709fda6c482510d71aa6c\\n F src/shell.c.in 4a3a9e1c11847b1904f2b01d087af1c052f660902755abab457cab1756817ded\\n@@ -1021,7 +1021,7 @@ F test/fuzzer1.test 3d4c4b7e547aba5e5511a2991e3e3d07166cfbb8\\n F test/fuzzer2.test a85ef814ce071293bce1ad8dffa217cbbaad4c14\\n F test/fuzzerfault.test 8792cd77fd5bce765b05d0c8e01b9edcf8af8536\\n F test/gcfault.test dd28c228a38976d6336a3fc42d7e5f1ad060cb8c\\n-F test/gencol1.test cb18ae911ed157058ea030988463bd1ec3315ba889b4aff4b8711551c393afae\\n+F test/gencol1.test 6bdf7fbaa001321d01f35f7c33ccb847cf937b760877b9a32723e009983c13f7\\n F test/genesis.tcl 1e2e2e8e5cc4058549a154ff1892fe5c9de19f98\\n F test/having.test e4098a4b8962f9596035c3b87a8928a10648acc509f1bb8d6f96413bbf79a1b3\\n F test/hexlit.test 4a6a5f46e3c65c4bf1fa06f5dd5a9507a5627751\\n@@ -1850,7 +1850,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159\\n-R 916b27815e9b3d41c41616a867889cc0\\n+P 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af\\n+R e99d34ba61fb6b297b18cc8c33e9b417\\n U drh\\n-Z 2f4253a7507c4c18153791477951e376\\n+Z 29f405b4db68236e1fc771220e887d13\"}, {\"sha\": \"330cf7c4aee7f2731fe2bfd34a2de240fc93b626\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/522ebfa7cee96fb325a22ea3a2464a63485886a8/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/522ebfa7cee96fb325a22ea3a2464a63485886a8/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"patch\": \"@@ -1 +1 @@\\n-8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af\\n\\\\ No newline at end of file\\n+6601da58032d18ae00b466c0f2077fb2b1ecd84225b56e1787724bea478eedc9\\n\\\\ No newline at end of file\"}, {\"sha\": \"fbfdf118e28891f457f8ec0b6c5f4692373a9944\", \"filename\": \"src/resolve.c\", \"status\": \"modified\", \"additions\": 17, \"deletions\": 3, \"changes\": 20, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/522ebfa7cee96fb325a22ea3a2464a63485886a8/src%2Fresolve.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/522ebfa7cee96fb325a22ea3a2464a63485886a8/src%2Fresolve.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/src%2Fresolve.c?ref=522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"patch\": \"@@ -551,17 +551,31 @@ static int lookupName(\\n \\n   /* If a column from a table in pSrcList is referenced, then record\\n   ** this fact in the pSrcList.a[].colUsed bitmask.  Column 0 causes\\n-  ** bit 0 to be set.  Column 1 sets bit 1.  And so forth.  If the\\n-  ** column number is greater than the number of bits in the bitmask\\n-  ** then set the high-order bit of the bitmask.\\n+  ** bit 0 to be set.  Column 1 sets bit 1.  And so forth.\\n+  **\\n+  ** The colUsed mask is an optimization used to help determine if an\\n+  ** index is a covering index.  The correct answer is still obtained\\n+  ** if the mask contains extra bits.  But omitting bits from the mask\\n+  ** might result in an incorrect answer.\\n+  **\\n+  ** The high-order bit of the mask is a \\\"we-use-them-all\\\" bit.\\n+  ** If the column number is greater than the number of bits in the bitmask\\n+  ** then set the high-order bit of the bitmask.  Also set the high-order\\n+  ** bit if the column is a generated column, as that adds dependencies\\n+  ** that are difficult to track, so we assume that all columns are used.\\n   */\\n   if( pExpr->iColumn>=0 && pMatch!=0 ){\\n     int n = pExpr->iColumn;\\n     testcase( n==BMS-1 );\\n     if( n>=BMS ){\\n       n = BMS-1;\\n     }\\n+    assert( pExpr->y.pTab!=0 );\\n     assert( pMatch->iCursor==pExpr->iTable );\\n+    if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){\\n+      Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;\\n+      if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;\\n+    }\\n     pMatch->colUsed |= ((Bitmask)1)<<n;\\n   }\\n \"}, {\"sha\": \"15b93c72a25449a061553cf3bd97fd37aac8f4aa\", \"filename\": \"test/gencol1.test\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 3, \"changes\": 11, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/522ebfa7cee96fb325a22ea3a2464a63485886a8/test%2Fgencol1.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/522ebfa7cee96fb325a22ea3a2464a63485886a8/test%2Fgencol1.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Fgencol1.test?ref=522ebfa7cee96fb325a22ea3a2464a63485886a8\", \"patch\": \"@@ -246,14 +246,19 @@ do_catchsql_test gencol1-8.20 {\\n # 2019-11-21 Problems in the new generated column logic\\n # reported by Yongheng Chen and Rui Zhong\\n do_execsql_test gencol1-9.10 {\\n-  DROP TABLE IF EXISTS t1;\\n-  DROP TABLE IF EXISTS t2;\\n+  DROP TABLE t1;\\n   CREATE TABLE t1(aa , bb AS (17) UNIQUE);\\n   INSERT INTO t1 VALUES(17);\\n   CREATE TABLE t2(cc);\\n   INSERT INTO t2 VALUES(41);\\n   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;\\n } {41 17 17}\\n-\\n+do_execsql_test gencol1-9.20 {\\n+  CREATE TABLE t3(aa INT PRIMARY KEY, bb UNIQUE AS(aa));\\n+  INSERT INTO t3 VALUES(1);\\n+  SELECT 100, * FROM t3;\\n+  DELETE FROM t3 WHERE (SELECT bb FROM t3);\\n+  SELECT 200, * FROM t3;\\n+} {100 1 1}\\n \\n finish_test\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzL2U1OWM1NjJiM2Y2ODk0Zjg0YzcxNTc3MmM0YjExNmQ3YjVjMDEzNDgi.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/e59c562b3f6894f84c715772c4b116d7b5c01348", "content": "{\"sha\": \"e59c562b3f6894f84c715772c4b116d7b5c01348\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OmU1OWM1NjJiM2Y2ODk0Zjg0YzcxNTc3MmM0YjExNmQ3YjVjMDEzNDg=\", \"commit\": {\"author\": {\"name\": \"dan\", \"email\": \"dan@noemail.net\", \"date\": \"2019-11-22T10:14:01Z\"}, \"committer\": {\"name\": \"dan\", \"email\": \"dan@noemail.net\", \"date\": \"2019-11-22T10:14:01Z\"}, \"message\": \"Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\\n\\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba\", \"tree\": {\"sha\": \"84f583e8744ee9428ded34e993339cc68f85fabe\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/84f583e8744ee9428ded34e993339cc68f85fabe\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/e59c562b3f6894f84c715772c4b116d7b5c01348\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/e59c562b3f6894f84c715772c4b116d7b5c01348\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/e59c562b3f6894f84c715772c4b116d7b5c01348/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"c398c65bee850b6b8f24a44852872a27f114535d\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/c398c65bee850b6b8f24a44852872a27f114535d\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/c398c65bee850b6b8f24a44852872a27f114535d\"}], \"stats\": {\"total\": 32, \"additions\": 23, \"deletions\": 9}, \"files\": [{\"sha\": \"f6b23cfa866f4b268000528e0a4747a7227a0674\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 8, \"changes\": 16, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/e59c562b3f6894f84c715772c4b116d7b5c01348/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/e59c562b3f6894f84c715772c4b116d7b5c01348/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=e59c562b3f6894f84c715772c4b116d7b5c01348\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Revise\\\\sthe\\\\sSQLITE_OPEN_NOFOLLOW\\\\sso\\\\sthat\\\\sit\\\\sactually\\\\suses\\\\sO_NOFOLLOW\\\\sin\\\\sthe\\\\nopen()\\\\ssystem\\\\scall.\\\\s\\\\sThis\\\\sbacks\\\\sout\\\\sthe\\\\sSQLITE_ACCESS_SYMLINK\\\\svalue\\\\sbut\\\\sadds\\\\nthe\\\\snew\\\\sSQLITE_OK_SYMLINK\\\\sreturn\\\\scode\\\\sfrom\\\\sthe\\\\sxFullPathname\\\\smethod\\\\sof\\\\s\\\\nsqlite3_vfs\\\\swhen\\\\sthat\\\\sroutine\\\\sresolves\\\\ssymbolic\\\\slinks.\\\\sO_NOFOLLOW\\\\sis\\\\salways\\\\nincluded\\\\sin\\\\sopen()\\\\ssystem\\\\scalls\\\\sfor\\\\sjournal\\\\sfiles.\\n-D 2019-11-22T00:42:01.486\\n+C Fix\\\\sa\\\\scrash\\\\sthat\\\\scould\\\\soccur\\\\sif\\\\sa\\\\ssub-select\\\\sthat\\\\suses\\\\sboth\\\\sDISTINCT\\\\sand\\\\swindow\\\\sfunctions\\\\salso\\\\sused\\\\san\\\\sORDER\\\\sBY\\\\sthat\\\\sis\\\\sthe\\\\ssame\\\\sas\\\\sits\\\\sselect\\\\slist.\\n+D 2019-11-22T10:14:01.691\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -526,7 +526,7 @@ F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\\n F src/random.c 80f5d666f23feb3e6665a6ce04c7197212a88384\\n F src/resolve.c 023397b50d09a3587a15169b713342e2d595ab29e14e54fd8f4a86b76c461d21\\n F src/rowset.c d977b011993aaea002cab3e0bb2ce50cf346000dff94e944d547b989f4b1fe93\\n-F src/select.c 50ccaf5fc3566b897fd3090b63bd60605f2f3f38ac5709fda6c482510d71aa6c\\n+F src/select.c f403b7bd2304d4dfd5ad2614cc0ad3386a97af707922882bdabba4c14ce12975\\n F src/shell.c.in 4a3a9e1c11847b1904f2b01d087af1c052f660902755abab457cab1756817ded\\n F src/sqlite.h.in 4fe42f27a7be44586bbd94f49f2b097ef8a1053c747d82f135456c7f5381c85a\\n F src/sqlite3.rc 5121c9e10c3964d5755191c80dd1180c122fc3a8\\n@@ -1711,7 +1711,7 @@ F test/win32heap.test 10fd891266bd00af68671e702317726375e5407561d859be1aa04696f2\\n F test/win32lock.test fbf107c91d8f5512be5a5b87c4c42ab9fdd54972\\n F test/win32longpath.test 169c75a3b2e43481f4a62122510210c67b08f26d\\n F test/win32nolock.test ac4f08811a562e45a5755e661f45ca85892bdbbc\\n-F test/window1.test e88f674b5de9d3bd2787bc1ff22e8c04c10c7e9773212f3c3c3396cb8dccb096\\n+F test/window1.test 60ba11fb64122c57dfd423a5f9483fb446cc27ed5cf5526152a0decdc9a761fa\\n F test/window2.tcl 66db96fd9fd202bc31ee7f8ce7904cb469564864cff3f74e009bfef8102333f4\\n F test/window2.test af2a001ded703bb8f2474fb0edfef170d5aba00f5c1f2aa9f65935b5da13df90\\n F test/window3.tcl acea6e86a4324a210fd608d06741010ca83ded9fde438341cb978c49928faf03\\n@@ -1850,7 +1850,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e\\n-R b32992f83d3fe313532417046634561a\\n-U drh\\n-Z 3c868f0a98a5c208f527ca2b91cdb564\\n+P 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f\\n+R 6a5d6072626d6501ea14c356f9dce16a\\n+U dan\\n+Z 0f63dd080b5a1fb6658b32eaaaf6aa19\"}, {\"sha\": \"18bd00e701b2edc0514de39971fb89f053174c9b\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/e59c562b3f6894f84c715772c4b116d7b5c01348/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/e59c562b3f6894f84c715772c4b116d7b5c01348/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=e59c562b3f6894f84c715772c4b116d7b5c01348\", \"patch\": \"@@ -1 +1 @@\\n-6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f\\n\\\\ No newline at end of file\\n+bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba\\n\\\\ No newline at end of file\"}, {\"sha\": \"44fb06f48d99b7530d84fd2aee348a1dbd43bb91\", \"filename\": \"src/select.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/e59c562b3f6894f84c715772c4b116d7b5c01348/src%2Fselect.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/e59c562b3f6894f84c715772c4b116d7b5c01348/src%2Fselect.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/src%2Fselect.c?ref=e59c562b3f6894f84c715772c4b116d7b5c01348\", \"patch\": \"@@ -6064,6 +6064,7 @@ int sqlite3Select(\\n   */\\n   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct \\n    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0\\n+   && p->pWin==0\\n   ){\\n     p->selFlags &= ~SF_Distinct;\\n     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);\"}, {\"sha\": \"98a4ce4569736034afbfec5af44d40c14a123ab8\", \"filename\": \"test/window1.test\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 0, \"changes\": 13, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/e59c562b3f6894f84c715772c4b116d7b5c01348/test%2Fwindow1.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/e59c562b3f6894f84c715772c4b116d7b5c01348/test%2Fwindow1.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Fwindow1.test?ref=e59c562b3f6894f84c715772c4b116d7b5c01348\", \"patch\": \"@@ -1243,4 +1243,17 @@ do_catchsql_test 32.10 {\\n   ALTER TABLE a0 RENAME TO S;\\n } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}\\n \\n+reset_db\\n+do_execsql_test 33.1 {\\n+  CREATE TABLE t1(aa, bb);\\n+  INSERT INTO t1 VALUES(1, 2);\\n+  INSERT INTO t1 VALUES(5, 6);\\n+  CREATE TABLE t2(x);\\n+  INSERT INTO t2 VALUES(1);\\n+}\\n+do_execsql_test 33.2 {\\n+  SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2 \\n+  ORDER BY 1;\\n+} {6 1}\\n+\\n finish_test\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzL2ViZDcwZWVkZDVkNmU2YTg5MGE2NzBiNWVlODc0YTVlYWU4NmI0ZGQi.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd", "content": "{\"sha\": \"ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OmViZDcwZWVkZDVkNmU2YTg5MGE2NzBiNWVlODc0YTVlYWU4NmI0ZGQ=\", \"commit\": {\"author\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-09T15:52:07Z\"}, \"committer\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-09T15:52:07Z\"}, \"message\": \"Fix the NOT NULL verification logic in PRAGMA integrity_check so that it\\nworks for generated columns whose value is the result of a comparison operator.\\nTicket [bd8c280671ba44a7]\\n\\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400\", \"tree\": {\"sha\": \"2970ff045b83a7aec6175de8d3586c3d439a65e8\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/2970ff045b83a7aec6175de8d3586c3d439a65e8\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"7a9698456dfb800878cb4414238927fc86907f93\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/7a9698456dfb800878cb4414238927fc86907f93\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/7a9698456dfb800878cb4414238927fc86907f93\"}], \"stats\": {\"total\": 34, \"additions\": 25, \"deletions\": 9}, \"files\": [{\"sha\": \"a5efb52608b37ac52ee70326549c3102d88be109\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Fix\\\\sa\\\\sgramfuzz\\\\sfind.\\\\s\\\\sIf\\\\sa\\\\spartial\\\\sindex\\\\sthat\\\\sdoes\\\\snot\\\\sreference\\\\sany\\\\scolumn\\\\nof\\\\sits\\\\stable\\\\sis\\\\sused\\\\sby\\\\san\\\\sUPDATE\\\\sstatement\\\\sin\\\\sone-pass\\\\smode,\\\\sthen\\\\savoid\\\\sthe\\\\nuse\\\\sof\\\\sOP_DeferredSeek\\\\ssince\\\\sthe\\\\sseek\\\\smight\\\\snot\\\\sbe\\\\sresolved\\\\sprior\\\\sto\\\\sthe\\\\nOP_Delete\\\\sand\\\\sOP_Insert\\\\sthat\\\\simplement\\\\sthe\\\\sUPDATE.\\n-D 2019-12-09T14:34:37.171\\n+C Fix\\\\sthe\\\\sNOT\\\\sNULL\\\\sverification\\\\slogic\\\\sin\\\\sPRAGMA\\\\sintegrity_check\\\\sso\\\\sthat\\\\sit\\\\nworks\\\\sfor\\\\sgenerated\\\\scolumns\\\\swhose\\\\svalue\\\\sis\\\\sthe\\\\sresult\\\\sof\\\\sa\\\\scomparison\\\\soperator.\\\\nTicket\\\\s[bd8c280671ba44a7]\\n+D 2019-12-09T15:52:07.194\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -520,7 +520,7 @@ F src/parse.y 17c1ae265e1b92cb1f3f1661b020e3eb31f2d8b9588322d2b6f2b22f25b674c9\\n F src/pcache.c 385ff064bca69789d199a98e2169445dc16e4291fa807babd61d4890c3b34177\\n F src/pcache.h 4f87acd914cef5016fae3030343540d75f5b85a1877eed1a2a19b9f284248586\\n F src/pcache1.c 62714cbd1b7299a6e6a27a587b66b4fd3a836a84e1181e7f96f5c34a50917848\\n-F src/pragma.c 36c367a62a9d3415fd3d15523e794cccc2cb74e6d806662b0185b8c686f06acb\\n+F src/pragma.c 26e9ee514138b9697d4be6d8f9ca84655053026390cf10de838862238aa4aba9\\n F src/pragma.h ec3b31eac9b1df040f1cc8cb3d89bc06605c3b4cb3d76f833de8d6d6c3f77f04\\n F src/prepare.c 6049beb71385f017af6fc320d2c75a4e50b75e280c54232442b785fbb83df057\\n F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\\n@@ -1022,7 +1022,7 @@ F test/fuzzer1.test 3d4c4b7e547aba5e5511a2991e3e3d07166cfbb8\\n F test/fuzzer2.test a85ef814ce071293bce1ad8dffa217cbbaad4c14\\n F test/fuzzerfault.test 8792cd77fd5bce765b05d0c8e01b9edcf8af8536\\n F test/gcfault.test dd28c228a38976d6336a3fc42d7e5f1ad060cb8c\\n-F test/gencol1.test 037c5c26dddd984ba7ea11bd16996377f72523a4126804b1bbecafc833fccb47\\n+F test/gencol1.test 96d669ccb82d4140df6b38bfc110b98f94ac4cf8d32af42bae6349941b3eb92c\\n F test/genesis.tcl 1e2e2e8e5cc4058549a154ff1892fe5c9de19f98\\n F test/having.test e4098a4b8962f9596035c3b87a8928a10648acc509f1bb8d6f96413bbf79a1b3\\n F test/hexlit.test 4a6a5f46e3c65c4bf1fa06f5dd5a9507a5627751\\n@@ -1852,7 +1852,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5\\n-R 73f9d074ffb019cac59a96d55cf2c0bc\\n+P e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539\\n+R 214fd6f511022e08e69f40b8ca4a69e8\\n U drh\\n-Z 9b8f81a17115c4850191512c3ac99432\\n+Z 7b3cdd64628ae3e72f321ced6b81d514\"}, {\"sha\": \"fdfe085d85fd5a10c39e03e7e8cef5d89eadbcad\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"patch\": \"@@ -1 +1 @@\\n-e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539\\n\\\\ No newline at end of file\\n+f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400\\n\\\\ No newline at end of file\"}, {\"sha\": \"9b83807c61e8666cdd308cefe67cefb13438176f\", \"filename\": \"src/pragma.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/src%2Fpragma.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/src%2Fpragma.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/src%2Fpragma.c?ref=ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"patch\": \"@@ -1596,7 +1596,9 @@ void sqlite3Pragma(\\n           if( j==pTab->iPKey ) continue;\\n           if( pTab->aCol[j].notNull==0 ) continue;\\n           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);\\n-          sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);\\n+          if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){\\n+            sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);\\n+          }\\n           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);\\n           zErr = sqlite3MPrintf(db, \\\"NULL value in %s.%s\\\", pTab->zName,\\n                               pTab->aCol[j].zName);\"}, {\"sha\": \"80769222a928b18ef841fc1fc7799e4408c9569c\", \"filename\": \"test/gencol1.test\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/test%2Fgencol1.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd/test%2Fgencol1.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Fgencol1.test?ref=ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"patch\": \"@@ -328,4 +328,18 @@ do_catchsql_test gencol1-11.80 {\\n   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)\\n } {1 {FOREIGN KEY constraint failed}}\\n \\n+# 2019-12-09 ticket bd8c280671ba44a7\\n+# With generated columns, the sqlite3ExprGetColumnOfTable() routine might\\n+# generate a code sequence that does not end with OP_Column.  So check to\\n+# make sure that the last instruction generated is an OP_column prior to\\n+# applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the\\n+# PRAGMA integrity_check code.\\n+#\\n+sqlite3 db :memory:\\n+do_execsql_test gencol1-12.10 {\\n+  CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));\\n+  INSERT INTO t0(c0) VALUES (0);\\n+  PRAGMA integrity_check;\\n+} {ok}\\n+\\n finish_test\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzLzkyNmY3OTZlOGZlZWMxNWYzODM2YWEwYTA2MGVkOTA2ZjhhZTA0ZDMi.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/926f796e8feec15f3836aa0a060ed906f8ae04d3", "content": "{\"sha\": \"926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OjkyNmY3OTZlOGZlZWMxNWYzODM2YWEwYTA2MGVkOTA2ZjhhZTA0ZDM=\", \"commit\": {\"author\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-09T17:14:48Z\"}, \"committer\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-09T17:14:48Z\"}, \"message\": \"Ensure that the SrcList_item.colUsed field is set correctly (set to have a\\n1 for all columns of the table) when a generated column appears in the USING\\nclause of a join.\\n\\nFossilOrigin-Name: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3\", \"tree\": {\"sha\": \"350dcc2ad8852d1fa62dab11c4997e9477941735\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/350dcc2ad8852d1fa62dab11c4997e9477941735\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/926f796e8feec15f3836aa0a060ed906f8ae04d3/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd\"}], \"stats\": {\"total\": 52, \"additions\": 40, \"deletions\": 12}, \"files\": [{\"sha\": \"0282d726ca9b669e4fb5121bd29cc5c907acb2ca\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/926f796e8feec15f3836aa0a060ed906f8ae04d3/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/926f796e8feec15f3836aa0a060ed906f8ae04d3/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Fix\\\\sthe\\\\sNOT\\\\sNULL\\\\sverification\\\\slogic\\\\sin\\\\sPRAGMA\\\\sintegrity_check\\\\sso\\\\sthat\\\\sit\\\\nworks\\\\sfor\\\\sgenerated\\\\scolumns\\\\swhose\\\\svalue\\\\sis\\\\sthe\\\\sresult\\\\sof\\\\sa\\\\scomparison\\\\soperator.\\\\nTicket\\\\s[bd8c280671ba44a7]\\n-D 2019-12-09T15:52:07.194\\n+C Ensure\\\\sthat\\\\sthe\\\\sSrcList_item.colUsed\\\\sfield\\\\sis\\\\sset\\\\scorrectly\\\\s(set\\\\sto\\\\shave\\\\sa\\\\n1\\\\sfor\\\\sall\\\\scolumns\\\\sof\\\\sthe\\\\stable)\\\\swhen\\\\sa\\\\sgenerated\\\\scolumn\\\\sappears\\\\sin\\\\sthe\\\\sUSING\\\\nclause\\\\sof\\\\sa\\\\sjoin.\\n+D 2019-12-09T17:14:48.320\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -525,7 +525,7 @@ F src/pragma.h ec3b31eac9b1df040f1cc8cb3d89bc06605c3b4cb3d76f833de8d6d6c3f77f04\\n F src/prepare.c 6049beb71385f017af6fc320d2c75a4e50b75e280c54232442b785fbb83df057\\n F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\\n F src/random.c 80f5d666f23feb3e6665a6ce04c7197212a88384\\n-F src/resolve.c 618bf4f57fa0617cd5295117fea5f25955b76d278303405a8551c4204593011e\\n+F src/resolve.c 32b5adb26c21be0dcf7d639053f10f1a34a0a4ae10f59dd9c5b71f8d1579e76b\\n F src/rowset.c d977b011993aaea002cab3e0bb2ce50cf346000dff94e944d547b989f4b1fe93\\n F src/select.c 0fe10579de20eb8dc04ec9ed29659fa782bee2bcc85a35734637f3e2cabc2762\\n F src/shell.c.in 4a3a9e1c11847b1904f2b01d087af1c052f660902755abab457cab1756817ded\\n@@ -1022,7 +1022,7 @@ F test/fuzzer1.test 3d4c4b7e547aba5e5511a2991e3e3d07166cfbb8\\n F test/fuzzer2.test a85ef814ce071293bce1ad8dffa217cbbaad4c14\\n F test/fuzzerfault.test 8792cd77fd5bce765b05d0c8e01b9edcf8af8536\\n F test/gcfault.test dd28c228a38976d6336a3fc42d7e5f1ad060cb8c\\n-F test/gencol1.test 96d669ccb82d4140df6b38bfc110b98f94ac4cf8d32af42bae6349941b3eb92c\\n+F test/gencol1.test 891f9ac3a3acf27902767020b8667ba6168306f3f226e5c036c442caffd06dd7\\n F test/genesis.tcl 1e2e2e8e5cc4058549a154ff1892fe5c9de19f98\\n F test/having.test e4098a4b8962f9596035c3b87a8928a10648acc509f1bb8d6f96413bbf79a1b3\\n F test/hexlit.test 4a6a5f46e3c65c4bf1fa06f5dd5a9507a5627751\\n@@ -1852,7 +1852,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539\\n-R 214fd6f511022e08e69f40b8ca4a69e8\\n+P f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400\\n+R 4c75b826224c9334b1247cab793c4dea\\n U drh\\n-Z 7b3cdd64628ae3e72f321ced6b81d514\\n+Z 46d53a02a606d9b97d8ca0a567728aa1\"}, {\"sha\": \"0dec8cbdc65d511b918f7231f11f823eee994b91\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/926f796e8feec15f3836aa0a060ed906f8ae04d3/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/926f796e8feec15f3836aa0a060ed906f8ae04d3/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"patch\": \"@@ -1 +1 @@\\n-f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400\\n\\\\ No newline at end of file\\n+1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3\\n\\\\ No newline at end of file\"}, {\"sha\": \"5c01df4f8c3a608b1d582fb6e43290fd1152e7c6\", \"filename\": \"src/resolve.c\", \"status\": \"modified\", \"additions\": 17, \"deletions\": 4, \"changes\": 21, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/926f796e8feec15f3836aa0a060ed906f8ae04d3/src%2Fresolve.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/926f796e8feec15f3836aa0a060ed906f8ae04d3/src%2Fresolve.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/src%2Fresolve.c?ref=926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"patch\": \"@@ -624,15 +624,28 @@ Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){\\n   Expr *p = sqlite3ExprAlloc(db, TK_COLUMN, 0, 0);\\n   if( p ){\\n     struct SrcList_item *pItem = &pSrc->a[iSrc];\\n-    p->y.pTab = pItem->pTab;\\n+    Table *pTab = p->y.pTab = pItem->pTab;\\n     p->iTable = pItem->iCursor;\\n     if( p->y.pTab->iPKey==iCol ){\\n       p->iColumn = -1;\\n     }else{\\n       p->iColumn = (ynVar)iCol;\\n-      testcase( iCol==BMS );\\n-      testcase( iCol==BMS-1 );\\n-      pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);\\n+      if( pTab->tabFlags & TF_HasGenerated ){\\n+        Column *pColumn = pTab->aCol + iCol;\\n+        if( pColumn->colFlags & COLFLAG_GENERATED ){\\n+          testcase( pTab->nCol==63 );\\n+          testcase( pTab->nCol==64 );\\n+          if( pTab->nCol>=64 ){\\n+            pItem->colUsed = ALLBITS;\\n+          }else{\\n+            pItem->colUsed = MASKBIT(pTab->nCol)-1;\\n+          }\\n+        }\\n+      }else{\\n+        testcase( iCol==BMS );\\n+        testcase( iCol==BMS-1 );\\n+        pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);\\n+      }\\n     }\\n   }\\n   return p;\"}, {\"sha\": \"1a45767608114923ce7d8120b797af2a77c702d4\", \"filename\": \"test/gencol1.test\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/926f796e8feec15f3836aa0a060ed906f8ae04d3/test%2Fgencol1.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/926f796e8feec15f3836aa0a060ed906f8ae04d3/test%2Fgencol1.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Fgencol1.test?ref=926f796e8feec15f3836aa0a060ed906f8ae04d3\", \"patch\": \"@@ -342,4 +342,19 @@ do_execsql_test gencol1-12.10 {\\n   PRAGMA integrity_check;\\n } {ok}\\n \\n+# 2019-12-09 but report from Yongheng Chen\\n+# Ensure that the SrcList_item.colUsed field is set correctly when a\\n+# generated column appears in the USING clause of a join.\\n+#\\n+do_execsql_test gencol1-13.10 {\\n+  CREATE TABLE t1(x, y AS(x+1));\\n+  INSERT INTO t1 VALUES(10);\\n+  SELECT y FROM t1 JOIN t1 USING (y,y);\\n+} {11}\\n+do_execsql_test gencol1-13.11 {\\n+  CREATE INDEX t1y ON t1(y);\\n+  SELECT y FROM t1 JOIN t1 USING (y,y);\\n+} {11}\\n+\\n+\\n finish_test\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzLzU0ZDUwMTA5MmQ4OGMwY2Y4OWJlYzQyNzk5NTFmNTQ4ZmIwYjg2MTgi.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/54d501092d88c0cf89bec4279951f548fb0b8618", "content": "{\"sha\": \"54d501092d88c0cf89bec4279951f548fb0b8618\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OjU0ZDUwMTA5MmQ4OGMwY2Y4OWJlYzQyNzk5NTFmNTQ4ZmIwYjg2MTg=\", \"commit\": {\"author\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-19T15:15:40Z\"}, \"committer\": {\"name\": \"drh\", \"email\": \"drh@noemail.net\", \"date\": \"2019-12-19T15:15:40Z\"}, \"message\": \"Fix the zipfile extension so that INSERT works even if the pathname of\\nthe file being inserted is a NULL.  Bug discovered by the\\nYongheng and Rui fuzzer.\\n\\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06\", \"tree\": {\"sha\": \"2116124b9f3d707ddfffda250663e03805dba2f7\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/2116124b9f3d707ddfffda250663e03805dba2f7\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/54d501092d88c0cf89bec4279951f548fb0b8618\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/54d501092d88c0cf89bec4279951f548fb0b8618\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/54d501092d88c0cf89bec4279951f548fb0b8618/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"59c56796917a28041e8f315abe1a376508413961\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/59c56796917a28041e8f315abe1a376508413961\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/59c56796917a28041e8f315abe1a376508413961\"}], \"stats\": {\"total\": 31, \"additions\": 23, \"deletions\": 8}, \"files\": [{\"sha\": \"9a0345d9fdc8c4f28d2272bd8d4b6c904a2e7929\", \"filename\": \"ext/misc/zipfile.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/54d501092d88c0cf89bec4279951f548fb0b8618/ext%2Fmisc%2Fzipfile.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/54d501092d88c0cf89bec4279951f548fb0b8618/ext%2Fmisc%2Fzipfile.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/ext%2Fmisc%2Fzipfile.c?ref=54d501092d88c0cf89bec4279951f548fb0b8618\", \"patch\": \"@@ -1619,6 +1619,7 @@ static int zipfileUpdate(\\n \\n     if( rc==SQLITE_OK ){\\n       zPath = (const char*)sqlite3_value_text(apVal[2]);\\n+      if( zPath==0 ) zPath = \\\"\\\";\\n       nPath = (int)strlen(zPath);\\n       mTime = zipfileGetTime(apVal[4]);\\n     }\"}, {\"sha\": \"8c11ba89634bb7bb3d4b3ebd22d2d18cbf0c9aa7\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/54d501092d88c0cf89bec4279951f548fb0b8618/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/54d501092d88c0cf89bec4279951f548fb0b8618/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=54d501092d88c0cf89bec4279951f548fb0b8618\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Fix\\\\sincorrect\\\\sSQL\\\\sgenerated\\\\sby\\\\sthe\\\\sLemon\\\\schange\\\\sof\\\\sthe\\\\sprevious\\\\scheck-in.\\n-D 2019-12-19T13:17:07.364\\n+C Fix\\\\sthe\\\\szipfile\\\\sextension\\\\sso\\\\sthat\\\\sINSERT\\\\sworks\\\\seven\\\\sif\\\\sthe\\\\spathname\\\\sof\\\\nthe\\\\sfile\\\\sbeing\\\\sinserted\\\\sis\\\\sa\\\\sNULL.\\\\s\\\\sBug\\\\sdiscovered\\\\sby\\\\sthe\\\\nYongheng\\\\sand\\\\sRui\\\\sfuzzer.\\n+D 2019-12-19T15:15:40.450\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -324,7 +324,7 @@ F ext/misc/vfsstat.c 77b5b4235c9f7f11eddf82487c0a422944ac2f132dafd5af3be7a68a057\\n F ext/misc/vtablog.c 5538acd0c8ddaae372331bee11608d76973436b77d6a91e8635cfc9432fba5ae\\n F ext/misc/vtshim.c 1976e6dd68dd0d64508c91a6dfab8e75f8aaf6cd\\n F ext/misc/wholenumber.c 784b12543d60702ebdd47da936e278aa03076212\\n-F ext/misc/zipfile.c 7ad29133e304e40c8fe239bea10e101580ed56bc68c16d992af514cce19572d0\\n+F ext/misc/zipfile.c 8f965eb309da3ae8c30088f6c3ebdddcdbdf9e0ef24f3bc7ae0756deb93da503\\n F ext/misc/zorder.c b0ff58fa643afa1d846786d51ea8d5c4b6b35aa0254ab5a82617db92f3adda64\\n F ext/rbu/rbu.c 8681f6157db6adc82c34af24b14ea8a3be0146ad2a3b6c1d5da6cb8a5796c8ce\\n F ext/rbu/rbu1.test 221d9c18a5e600ac9ac6b1810d99d9f99163a7909ba61597876ab6e4d4beb3d6\\n@@ -1748,7 +1748,7 @@ F test/wordcount.c d721a4b6fae93e6e33449700bce1686bc23257c27425bc3ef1599dc912ade\\n F test/writecrash.test f1da7f7adfe8d7f09ea79b42e5ca6dcc41102f27f8e334ad71539501ddd910cc\\n F test/zeroblob.test 07a5b11ab591d1f26c626945fb7f228f68b993533b2ada77273edf6ee29db174\\n F test/zerodamage.test 9c41628db7e8d9e8a0181e59ea5f189df311a9f6ce99cc376dc461f66db6f8dc\\n-F test/zipfile.test b3b558639f7a103e095713ad0f57fec1fce1b7d60c8054df5789b98f7547a395\\n+F test/zipfile.test daab4c9be151934fd6bbc71a0d2520351efc61719eabbf545920f953883d172a\\n F test/zipfile2.test 9903388a602a3834189857a985106ff95c3bba6a3969e0134127df991889db5d\\n F test/zipfilefault.test 44d4d7a7f7cca7521d569d7f71026b241d65a6b1757aa409c1a168827edbbc2c\\n F tool/GetFile.cs 47852aa0d806fe47ed1ac5138bdce7f000fe87aaa7f28107d0cb1e26682aeb44\\n@@ -1852,7 +1852,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P 329cbb372d4d77f774f01a87d104c40ef42d713afbe76195b65f5ca205c5ea7b\\n-R d028a5f013795e21f082346da52e7329\\n+P fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e\\n+R 0fec610fab0a45c2e8f5600ef1cab28e\\n U drh\\n-Z 50186217141264fb7bf8cc1df4e95908\\n+Z aed8df93d89c2e0fad2b3edf29a44f34\"}, {\"sha\": \"cd30110c8159f04e6256b86702fc9a267665f5d7\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/54d501092d88c0cf89bec4279951f548fb0b8618/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/54d501092d88c0cf89bec4279951f548fb0b8618/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=54d501092d88c0cf89bec4279951f548fb0b8618\", \"patch\": \"@@ -1 +1 @@\\n-fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e\\n\\\\ No newline at end of file\\n+a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06\\n\\\\ No newline at end of file\"}, {\"sha\": \"a37e8139be024f1638efda3e4705d71017179740\", \"filename\": \"test/zipfile.test\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/54d501092d88c0cf89bec4279951f548fb0b8618/test%2Fzipfile.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/54d501092d88c0cf89bec4279951f548fb0b8618/test%2Fzipfile.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Fzipfile.test?ref=54d501092d88c0cf89bec4279951f548fb0b8618\", \"patch\": \"@@ -795,4 +795,18 @@ if {$tcl_platform(platform)!=\\\"windows\\\"} {\\n   } {. ./x1.txt ./x2.txt}\\n }\\n \\n+# 2019-12-18 Yongheng and Rui fuzzer\\n+#\\n+do_execsql_test 13.10 {\\n+  DROP TABLE IF EXISTS t0;\\n+  DROP TABLE IF EXISTS t1;\\n+  CREATE TABLE t0(a,b,c,d,e,f,g);\\n+  REPLACE INTO t0(c,b,f) VALUES(10,10,10);\\n+  CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');\\n+  REPLACE INTO t1 SELECT * FROM t0;\\n+  SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),\\n+         quote(data),quote(method) FROM t1;\\n+} {'' 10 10 2 X'3130' X'3130' 0}\\n+\\n+\\n finish_test\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc3FsaXRlL3NxbGl0ZS9jb21taXRzL2E2YzFhNzFjZGUwODJlMDk3NTA0NjVkNTY3NTY5OTA2MjkyMmUzODci.json", "commit": "https://api.github.com/repos/sqlite/sqlite/commits/a6c1a71cde082e09750465d5675699062922e387", "content": "{\"sha\": \"a6c1a71cde082e09750465d5675699062922e387\", \"node_id\": \"MDY6Q29tbWl0MTc2Mjc4NDg1OmE2YzFhNzFjZGUwODJlMDk3NTA0NjVkNTY3NTY5OTA2MjkyMmUzODc=\", \"commit\": {\"author\": {\"name\": \"dan\", \"email\": \"dan@noemail.net\", \"date\": \"2019-12-27T20:54:42Z\"}, \"committer\": {\"name\": \"dan\", \"email\": \"dan@noemail.net\", \"date\": \"2019-12-27T20:54:42Z\"}, \"message\": \"Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\\n\\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92\", \"tree\": {\"sha\": \"4c2675e59d336e86805b35bc8fd0a61eb314c69f\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/trees/4c2675e59d336e86805b35bc8fd0a61eb314c69f\"}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/git/commits/a6c1a71cde082e09750465d5675699062922e387\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/a6c1a71cde082e09750465d5675699062922e387\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387\", \"comments_url\": \"https://api.github.com/repos/sqlite/sqlite/commits/a6c1a71cde082e09750465d5675699062922e387/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"b4b36306576fcc053f3e7f9fcfd990340bdb96e8\", \"url\": \"https://api.github.com/repos/sqlite/sqlite/commits/b4b36306576fcc053f3e7f9fcfd990340bdb96e8\", \"html_url\": \"https://github.com/sqlite/sqlite/commit/b4b36306576fcc053f3e7f9fcfd990340bdb96e8\"}], \"stats\": {\"total\": 40, \"additions\": 31, \"deletions\": 9}, \"files\": [{\"sha\": \"c699cc6ae03fe68cc92f6f2b72cb6153d5044532\", \"filename\": \"manifest\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/a6c1a71cde082e09750465d5675699062922e387/manifest\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/a6c1a71cde082e09750465d5675699062922e387/manifest\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest?ref=a6c1a71cde082e09750465d5675699062922e387\", \"patch\": \"@@ -1,5 +1,5 @@\\n-C Remove\\\\sa\\\\sNEVER()\\\\sthat\\\\sis\\\\sno\\\\slonger\\\\strue.\\\\sFix\\\\sfor\\\\s[36ffedcb9].\\n-D 2019-12-27T20:06:32.777\\n+C Do\\\\snot\\\\sattempt\\\\sto\\\\sunwind\\\\sthe\\\\sWITH\\\\sstack\\\\sin\\\\sthe\\\\sParse\\\\sobject\\\\sfollowing\\\\san\\\\serror.\\\\sThis\\\\sfixes\\\\sa\\\\sseparate\\\\scase\\\\sto\\\\s[de6e6d68].\\n+D 2019-12-27T20:54:42.382\\n F .fossil-settings/empty-dirs dbb81e8fc0401ac46a1491ab34a7f2c7c0452f2f06b54ebb845d024ca8283ef1\\n F .fossil-settings/ignore-glob 35175cdfcf539b2318cb04a9901442804be81cd677d8b889fcc9149c21f239ea\\n F LICENSE.md df5091916dbb40e6e9686186587125e1b2ff51f022cc334e886c19a0e9982724\\n@@ -528,7 +528,7 @@ F src/printf.c 9be6945837c839ba57837b4bc3af349eba630920fa5532aa518816defe42a7d4\\n F src/random.c 80f5d666f23feb3e6665a6ce04c7197212a88384\\n F src/resolve.c e231da7dd307f99772c40e76096abaf05c6fedcb4f1f045de23a61c194df6da6\\n F src/rowset.c d977b011993aaea002cab3e0bb2ce50cf346000dff94e944d547b989f4b1fe93\\n-F src/select.c 83e3aba723cd50134b8af4b18433f46123c31889a39c8b4ac28cccedbdf070e8\\n+F src/select.c e18a64e8d9f468ce9c183ab27ad79658b2aad8128e0dcfcd0c5dfe0132fc1074\\n F src/shell.c.in 4a3a9e1c11847b1904f2b01d087af1c052f660902755abab457cab1756817ded\\n F src/sqlite.h.in 2a23e8161775253d9cf383c2c6aa559005dc787d350dcb0be67a6c4cc3bd1d19\\n F src/sqlite3.rc 5121c9e10c3964d5755191c80dd1180c122fc3a8\\n@@ -638,7 +638,7 @@ F test/altermalloc.test 167a47de41b5c638f5f5c6efb59784002b196fff70f98d9b4ed3cd74\\n F test/altermalloc2.test fa7b1c1139ea39b8dec407cf1feb032ca8e0076bd429574969b619175ad0174b\\n F test/altertab.test 4d8b79b0b88b62b90b710390df14fe99e0a3578345526886eaa550e28e3065dc\\n F test/altertab2.test 8883693952f6d7fb5f754dbf1d694ed780aa883027bef04cb1fb99a3b88c9272\\n-F test/altertab3.test 10c32d6251344bdc114d2df27e62cb72b5afc676f20709224d362d0cff0aa3e3\\n+F test/altertab3.test d58d41201afd64c6176dcc4e71110c600c03841dad1efcc354de2248f6126e70\\n F test/amatch1.test b5ae7065f042b7f4c1c922933f4700add50cdb9f\\n F test/analyze.test 547bb700f903107b38611b014ca645d6b5bb819f5210d7bf39c40802aafeb7d7\\n F test/analyze3.test 01f0b122e3e54ad2544f14f7cc7dcb4c2cb8753cad5e88c6b8d49615b3fd6a2b\\n@@ -1853,7 +1853,7 @@ F vsixtest/vsixtest.tcl 6a9a6ab600c25a91a7acc6293828957a386a8a93\\n F vsixtest/vsixtest.vcxproj.data 2ed517e100c66dc455b492e1a33350c1b20fbcdc\\n F vsixtest/vsixtest.vcxproj.filters 37e51ffedcdb064aad6ff33b6148725226cd608e\\n F vsixtest/vsixtest_TemporaryKey.pfx e5b1b036facdb453873e7084e1cae9102ccc67a0\\n-P e3b5fc05c00fc58be7a7c94ce1d97a5b05113f39aba03df64aab08364f85616b\\n-R a966e346a033c0ab1a88c0d109a734aa\\n+P 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330\\n+R e2fa6fb2e144752a1d4a9d45874c1bd9\\n U dan\\n-Z ba0d31a3cdb9b737f0aa85ce7fe964a5\\n+Z e36f281614de7335dc6fbd6aa6abfc9f\"}, {\"sha\": \"dd056531ff915e73cbabf8b1136d24d41c443107\", \"filename\": \"manifest.uuid\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/a6c1a71cde082e09750465d5675699062922e387/manifest.uuid\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/a6c1a71cde082e09750465d5675699062922e387/manifest.uuid\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/manifest.uuid?ref=a6c1a71cde082e09750465d5675699062922e387\", \"patch\": \"@@ -1 +1 @@\\n-597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330\\n\\\\ No newline at end of file\\n+d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92\\n\\\\ No newline at end of file\"}, {\"sha\": \"6298e331f8d679b7c59731f613586a79299a0355\", \"filename\": \"src/select.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/a6c1a71cde082e09750465d5675699062922e387/src%2Fselect.c\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/a6c1a71cde082e09750465d5675699062922e387/src%2Fselect.c\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/src%2Fselect.c?ref=a6c1a71cde082e09750465d5675699062922e387\", \"patch\": \"@@ -4978,7 +4978,7 @@ static int selectExpander(Walker *pWalker, Select *p){\\n \\n   /* Process NATURAL keywords, and ON and USING clauses of joins.\\n   */\\n-  if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){\\n+  if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){\\n     return WRC_Abort;\\n   }\\n \"}, {\"sha\": \"74b9b1a0f002a3ea7683d53f0dbc476031046fdf\", \"filename\": \"test/altertab3.test\", \"status\": \"modified\", \"additions\": 22, \"deletions\": 0, \"changes\": 22, \"blob_url\": \"https://github.com/sqlite/sqlite/blob/a6c1a71cde082e09750465d5675699062922e387/test%2Faltertab3.test\", \"raw_url\": \"https://github.com/sqlite/sqlite/raw/a6c1a71cde082e09750465d5675699062922e387/test%2Faltertab3.test\", \"contents_url\": \"https://api.github.com/repos/sqlite/sqlite/contents/test%2Faltertab3.test?ref=a6c1a71cde082e09750465d5675699062922e387\", \"patch\": \"@@ -531,4 +531,26 @@ do_catchsql_test 23.2 {\\n   ALTER TABLE t1 RENAME TO t1x;\\n } {1 {error in trigger r1: no such table: main.t2}}\\n \\n+#------------------------------------------------------------------------\\n+#\\n+reset_db\\n+do_execsql_test 23.1 {\\n+  CREATE TABLE v0 (a);\\n+  CREATE VIEW v2 (v3) AS \\n+    WITH x1 AS (SELECT * FROM v2) \\n+    SELECT v3 AS x, v3 AS y FROM v2; \\n+}\\n+\\n+do_catchsql_test 23.2 {\\n+  SELECT * FROM v2\\n+} {1 {view v2 is circularly defined}}\\n+\\n+db close\\n+sqlite3 db test.db\\n+\\n+do_catchsql_test 23.3 {\\n+  ALTER TABLE v0 RENAME TO t3 ;\\n+} {1 {error in view v2: view v2 is circularly defined}}\\n+\\n finish_test\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcmVkaXMvcmVkaXMvY29tbWl0cy9iYzdmZTQxZTU4NTdhMDg1NGQ1MjRlMmE2M2EwMjhlOTM5NGQyYTVjIg==.json", "commit": "https://api.github.com/repos/redis/redis/commits/bc7fe41e5857a0854d524e2a63a028e9394d2a5c", "content": "{\"sha\": \"bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"node_id\": \"C_kwDOAAJhctoAKGJjN2ZlNDFlNTg1N2EwODU0ZDUyNGUyYTYzYTAyOGU5Mzk0ZDJhNWM\", \"commit\": {\"author\": {\"name\": \"chendianqiang\", \"email\": \"c.d_q@163.com\", \"date\": \"2022-08-28T08:33:41Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-08-28T08:33:41Z\"}, \"message\": \"fix hincrbyfloat not to create a key if the new value is invalid (#11149)\\n\\nCheck the validity of the value before performing the create operation,\\r\\nprevents new data from being generated even if the request fails to execute.\\r\\n\\r\\nCo-authored-by: Oran Agra <oran@redislabs.com>\\r\\nCo-authored-by: chendianqiang <chendianqiang@meituan.com>\\r\\nCo-authored-by: Binbin <binloveplay1314@qq.com>\", \"tree\": {\"sha\": \"1191701153059b83e4f5216a655faaf236867aea\", \"url\": \"https://api.github.com/repos/redis/redis/git/trees/1191701153059b83e4f5216a655faaf236867aea\"}, \"url\": \"https://api.github.com/repos/redis/redis/git/commits/bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjCyhlCRBK7hj4Ov3rIwAAyWIIAEsGNS6IR0AWCsM0hXRrB2m7\\nMy6pBy90xKyC13DRdtIclt9w8f9UzkJun/4e5og8+17VE0COxzGBGiVAPv/XLWZG\\nExqcF25pR9Wxd0+g6s6n4LWuWH1teLBCx05F6Zf/oFoM79LUTrtWw19Mn7Wn/6hi\\ntBi9gRARhNUkYuocw2q2x75stAamI5d6U+Qk6GeIss+pszD3PsSNIlOCNuj6Xxhe\\nfd5rjz9WcCpw+IGEFL30yn7dSzqZielpz2bXXT/FadpQF8T5umJOhJmmYRsXkxZY\\nwSel3Dwq+tM817r/hztZXhNCpmKtqXK+loKGJz8QdqOZjEuUzrI0WM1XLRL6Ovk=\\n=IdRF\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 1191701153059b83e4f5216a655faaf236867aea\\nparent a7da7473cbd791589b943f38dcb855404a872928\\nauthor chendianqiang <c.d_q@163.com> 1661675621 +0800\\ncommitter GitHub <noreply@github.com> 1661675621 +0300\\n\\nfix hincrbyfloat not to create a key if the new value is invalid (#11149)\\n\\nCheck the validity of the value before performing the create operation,\\r\\nprevents new data from being generated even if the request fails to execute.\\r\\n\\r\\nCo-authored-by: Oran Agra <oran@redislabs.com>\\r\\nCo-authored-by: chendianqiang <chendianqiang@meituan.com>\\r\\nCo-authored-by: Binbin <binloveplay1314@qq.com>\"}}, \"url\": \"https://api.github.com/repos/redis/redis/commits/bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"html_url\": \"https://github.com/redis/redis/commit/bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"comments_url\": \"https://api.github.com/repos/redis/redis/commits/bc7fe41e5857a0854d524e2a63a028e9394d2a5c/comments\", \"author\": {\"login\": \"chendq8\", \"id\": 19504952, \"node_id\": \"MDQ6VXNlcjE5NTA0OTUy\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19504952?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/chendq8\", \"html_url\": \"https://github.com/chendq8\", \"followers_url\": \"https://api.github.com/users/chendq8/followers\", \"following_url\": \"https://api.github.com/users/chendq8/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/chendq8/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/chendq8/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/chendq8/subscriptions\", \"organizations_url\": \"https://api.github.com/users/chendq8/orgs\", \"repos_url\": \"https://api.github.com/users/chendq8/repos\", \"events_url\": \"https://api.github.com/users/chendq8/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/chendq8/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a7da7473cbd791589b943f38dcb855404a872928\", \"url\": \"https://api.github.com/repos/redis/redis/commits/a7da7473cbd791589b943f38dcb855404a872928\", \"html_url\": \"https://github.com/redis/redis/commit/a7da7473cbd791589b943f38dcb855404a872928\"}], \"stats\": {\"total\": 8, \"additions\": 8, \"deletions\": 0}, \"files\": [{\"sha\": \"a2af438aee39700889a95bf4cfb4319d23154aaf\", \"filename\": \"src/t_hash.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/redis/redis/blob/bc7fe41e5857a0854d524e2a63a028e9394d2a5c/src%2Ft_hash.c\", \"raw_url\": \"https://github.com/redis/redis/raw/bc7fe41e5857a0854d524e2a63a028e9394d2a5c/src%2Ft_hash.c\", \"contents_url\": \"https://api.github.com/repos/redis/redis/contents/src%2Ft_hash.c?ref=bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"patch\": \"@@ -666,6 +666,10 @@ void hincrbyfloatCommand(client *c) {\\n     unsigned int vlen;\\n \\n     if (getLongDoubleFromObjectOrReply(c,c->argv[3],&incr,NULL) != C_OK) return;\\n+    if (isnan(incr) || isinf(incr)) {\\n+        addReplyError(c,\\\"value is NaN or Infinity\\\");\\n+        return;\\n+    }\\n     if ((o = hashTypeLookupWriteOrCreate(c,c->argv[1])) == NULL) return;\\n     if (hashTypeGetValue(o,c->argv[2]->ptr,&vstr,&vlen,&ll) == C_OK) {\\n         if (vstr) {\"}, {\"sha\": \"613134af3475e1cf21b7d38a80e6e352c0f9eb18\", \"filename\": \"tests/unit/type/hash.tcl\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/redis/redis/blob/bc7fe41e5857a0854d524e2a63a028e9394d2a5c/tests%2Funit%2Ftype%2Fhash.tcl\", \"raw_url\": \"https://github.com/redis/redis/raw/bc7fe41e5857a0854d524e2a63a028e9394d2a5c/tests%2Funit%2Ftype%2Fhash.tcl\", \"contents_url\": \"https://api.github.com/repos/redis/redis/contents/tests%2Funit%2Ftype%2Fhash.tcl?ref=bc7fe41e5857a0854d524e2a63a028e9394d2a5c\", \"patch\": \"@@ -819,4 +819,8 @@ start_server {tags {\\\"hash\\\"}} {\\n         set _ $k\\n     } {ZIP_INT_8B 127 ZIP_INT_16B 32767 ZIP_INT_32B 2147483647 ZIP_INT_64B 9223372036854775808 ZIP_INT_IMM_MIN 0 ZIP_INT_IMM_MAX 12}\\n \\n+    test {HINCRBYFLOAT does not allow NaN or Infinity} {\\n+        assert_error \\\"*value is NaN or Infinity*\\\" {r hincrbyfloat hfoo field +inf}\\n+        assert_equal 0 [r exists hfoo]\\n+    }\\n }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcmVkaXMvaGlyZWRpcy9jb21taXRzLzc2YTdiMTAwMDVjNzBiYWJlZTM1N2E3ZDBmMmJlY2YyOGVjN2VkMWUi.json", "commit": "https://api.github.com/repos/redis/hiredis/commits/76a7b10005c70babee357a7d0f2becf28ec7ed1e", "content": "{\"sha\": \"76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"node_id\": \"C_kwDOAApF89oAKDc2YTdiMTAwMDVjNzBiYWJlZTM1N2E3ZDBmMmJlY2YyOGVjN2VkMWU\", \"commit\": {\"author\": {\"name\": \"Yossi Gottlieb\", \"email\": \"yossigo@gmail.com\", \"date\": \"2021-07-13T22:16:14Z\"}, \"committer\": {\"name\": \"michael-grunder\", \"email\": \"michael.grunder@gmail.com\", \"date\": \"2021-10-04T18:56:31Z\"}, \"message\": \"Fix for integer/buffer overflow CVE-2021-32765\\n\\nThis fix prevents hiredis from trying to allocate more than `SIZE_MAX`\\nbytes, which would result in a buffer overrun.\\n\\n[Full Details](https://github.com/redis/hiredis/security/advisories/GHSA-hfm9-39pp-55p2)\", \"tree\": {\"sha\": \"1e23e1ab45478e9651a06baffd58218f0bac1f72\", \"url\": \"https://api.github.com/repos/redis/hiredis/git/trees/1e23e1ab45478e9651a06baffd58218f0bac1f72\"}, \"url\": \"https://api.github.com/repos/redis/hiredis/git/commits/76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"comment_count\": 2, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/redis/hiredis/commits/76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"html_url\": \"https://github.com/redis/hiredis/commit/76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"comments_url\": \"https://api.github.com/repos/redis/hiredis/commits/76a7b10005c70babee357a7d0f2becf28ec7ed1e/comments\", \"author\": {\"login\": \"yossigo\", \"id\": 1481195, \"node_id\": \"MDQ6VXNlcjE0ODExOTU=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1481195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/yossigo\", \"html_url\": \"https://github.com/yossigo\", \"followers_url\": \"https://api.github.com/users/yossigo/followers\", \"following_url\": \"https://api.github.com/users/yossigo/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/yossigo/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/yossigo/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/yossigo/subscriptions\", \"organizations_url\": \"https://api.github.com/users/yossigo/orgs\", \"repos_url\": \"https://api.github.com/users/yossigo/repos\", \"events_url\": \"https://api.github.com/users/yossigo/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/yossigo/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michael-grunder\", \"id\": 468149, \"node_id\": \"MDQ6VXNlcjQ2ODE0OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/468149?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michael-grunder\", \"html_url\": \"https://github.com/michael-grunder\", \"followers_url\": \"https://api.github.com/users/michael-grunder/followers\", \"following_url\": \"https://api.github.com/users/michael-grunder/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michael-grunder/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michael-grunder/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michael-grunder/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michael-grunder/orgs\", \"repos_url\": \"https://api.github.com/users/michael-grunder/repos\", \"events_url\": \"https://api.github.com/users/michael-grunder/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michael-grunder/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d5b4c69b7113213c1da3a0ccbfd1ee1b40443c7a\", \"url\": \"https://api.github.com/repos/redis/hiredis/commits/d5b4c69b7113213c1da3a0ccbfd1ee1b40443c7a\", \"html_url\": \"https://github.com/redis/hiredis/commit/d5b4c69b7113213c1da3a0ccbfd1ee1b40443c7a\"}], \"stats\": {\"total\": 15, \"additions\": 15, \"deletions\": 0}, \"files\": [{\"sha\": \"ab0e3982211d5588f4200a9de2f1696e12dc6d38\", \"filename\": \"hiredis.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/redis/hiredis/blob/76a7b10005c70babee357a7d0f2becf28ec7ed1e/hiredis.c\", \"raw_url\": \"https://github.com/redis/hiredis/raw/76a7b10005c70babee357a7d0f2becf28ec7ed1e/hiredis.c\", \"contents_url\": \"https://api.github.com/repos/redis/hiredis/contents/hiredis.c?ref=76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"patch\": \"@@ -174,6 +174,7 @@ static void *createArrayObject(const redisReadTask *task, size_t elements) {\\n         return NULL;\\n \\n     if (elements > 0) {\\n+        if (SIZE_MAX / sizeof(redisReply*) < elements) return NULL;  /* Don't overflow */\\n         r->element = hi_calloc(elements,sizeof(redisReply*));\\n         if (r->element == NULL) {\\n             freeReplyObject(r);\"}, {\"sha\": \"397f5640e8acada74f78b4d484eebf42e3b75019\", \"filename\": \"test.c\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/redis/hiredis/blob/76a7b10005c70babee357a7d0f2becf28ec7ed1e/test.c\", \"raw_url\": \"https://github.com/redis/hiredis/raw/76a7b10005c70babee357a7d0f2becf28ec7ed1e/test.c\", \"contents_url\": \"https://api.github.com/repos/redis/hiredis/contents/test.c?ref=76a7b10005c70babee357a7d0f2becf28ec7ed1e\", \"patch\": \"@@ -493,6 +493,20 @@ static void test_reply_reader(void) {\\n     freeReplyObject(reply);\\n     redisReaderFree(reader);\\n \\n+    test(\\\"Multi-bulk never overflows regardless of maxelements: \\\");\\n+    size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;\\n+    char bad_mbulk_reply[100];\\n+    snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \\\"*%llu\\\\r\\\\n+asdf\\\\r\\\\n\\\",\\n+        (unsigned long long) bad_mbulk_len);\\n+\\n+    reader = redisReaderCreate();\\n+    reader->maxelements = 0;    /* Don't rely on default limit */\\n+    redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));\\n+    ret = redisReaderGetReply(reader,&reply);\\n+    test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \\\"Out of memory\\\") == 0);\\n+    freeReplyObject(reply);\\n+    redisReaderFree(reader);\\n+\\n #if LLONG_MAX > SIZE_MAX\\n     test(\\\"Set error when array > SIZE_MAX: \\\");\\n     reader = redisReaderCreate();\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbWRhZGFtcy9qYXNwZXIvY29tbWl0cy9mMjU0ODZjM2Q0YWE0NzJmZWM3OTE1MGYyYzQxZWQ0MzMzMzk1ZDNkIg==.json", "commit": "https://api.github.com/repos/mdadams/jasper/commits/f25486c3d4aa472fec79150f2c41ed4333395d3d", "content": "{\"sha\": \"f25486c3d4aa472fec79150f2c41ed4333395d3d\", \"node_id\": \"MDY6Q29tbWl0Njg0MDY3NTg6ZjI1NDg2YzNkNGFhNDcyZmVjNzkxNTBmMmM0MWVkNDMzMzM5NWQzZA==\", \"commit\": {\"author\": {\"name\": \"Michael Adams\", \"email\": \"mdadams@ece.uvic.ca\", \"date\": \"2016-11-27T04:54:24Z\"}, \"committer\": {\"name\": \"Michael Adams\", \"email\": \"mdadams@ece.uvic.ca\", \"date\": \"2016-11-27T04:54:24Z\"}, \"message\": \"Fixed a bug in the packet iterator code.\\nAdded a new regression test case.\", \"tree\": {\"sha\": \"627671721715a541cd31b76629e731f4bd374971\", \"url\": \"https://api.github.com/repos/jasper-software/jasper/git/trees/627671721715a541cd31b76629e731f4bd374971\"}, \"url\": \"https://api.github.com/repos/jasper-software/jasper/git/commits/f25486c3d4aa472fec79150f2c41ed4333395d3d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/jasper-software/jasper/commits/f25486c3d4aa472fec79150f2c41ed4333395d3d\", \"html_url\": \"https://github.com/jasper-software/jasper/commit/f25486c3d4aa472fec79150f2c41ed4333395d3d\", \"comments_url\": \"https://api.github.com/repos/jasper-software/jasper/commits/f25486c3d4aa472fec79150f2c41ed4333395d3d/comments\", \"author\": {\"login\": \"mdadams\", \"id\": 19838285, \"node_id\": \"MDQ6VXNlcjE5ODM4Mjg1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19838285?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mdadams\", \"html_url\": \"https://github.com/mdadams\", \"followers_url\": \"https://api.github.com/users/mdadams/followers\", \"following_url\": \"https://api.github.com/users/mdadams/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mdadams/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mdadams/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mdadams/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mdadams/orgs\", \"repos_url\": \"https://api.github.com/users/mdadams/repos\", \"events_url\": \"https://api.github.com/users/mdadams/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mdadams/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"mdadams\", \"id\": 19838285, \"node_id\": \"MDQ6VXNlcjE5ODM4Mjg1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19838285?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mdadams\", \"html_url\": \"https://github.com/mdadams\", \"followers_url\": \"https://api.github.com/users/mdadams/followers\", \"following_url\": \"https://api.github.com/users/mdadams/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mdadams/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mdadams/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mdadams/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mdadams/orgs\", \"repos_url\": \"https://api.github.com/users/mdadams/repos\", \"events_url\": \"https://api.github.com/users/mdadams/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mdadams/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"da11593fc485dd3c47af0f3118f11a102e1aa3d9\", \"url\": \"https://api.github.com/repos/jasper-software/jasper/commits/da11593fc485dd3c47af0f3118f11a102e1aa3d9\", \"html_url\": \"https://github.com/jasper-software/jasper/commit/da11593fc485dd3c47af0f3118f11a102e1aa3d9\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"6ce94dd1e096a689d092b436d0d373b55afc4c8e\", \"filename\": \"data/test/good/PoC2.jpc\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/jasper-software/jasper/blob/f25486c3d4aa472fec79150f2c41ed4333395d3d/data%2Ftest%2Fgood%2FPoC2.jpc\", \"raw_url\": \"https://github.com/jasper-software/jasper/raw/f25486c3d4aa472fec79150f2c41ed4333395d3d/data%2Ftest%2Fgood%2FPoC2.jpc\", \"contents_url\": \"https://api.github.com/repos/jasper-software/jasper/contents/data%2Ftest%2Fgood%2FPoC2.jpc?ref=f25486c3d4aa472fec79150f2c41ed4333395d3d\"}, {\"sha\": \"91114e387d96621f5d7423898861091e15eac88c\", \"filename\": \"src/libjasper/jpc/jpc_t2cod.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/jasper-software/jasper/blob/f25486c3d4aa472fec79150f2c41ed4333395d3d/src%2Flibjasper%2Fjpc%2Fjpc_t2cod.c\", \"raw_url\": \"https://github.com/jasper-software/jasper/raw/f25486c3d4aa472fec79150f2c41ed4333395d3d/src%2Flibjasper%2Fjpc%2Fjpc_t2cod.c\", \"contents_url\": \"https://api.github.com/repos/jasper-software/jasper/contents/src%2Flibjasper%2Fjpc%2Fjpc_t2cod.c?ref=f25486c3d4aa472fec79150f2c41ed4333395d3d\", \"patch\": \"@@ -249,9 +249,9 @@ static int jpc_pi_nextrpcl(register jpc_pi_t *pi)\\n \\t\\t\\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\\n \\t\\t\\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\\n \\t\\t\\t\\t// Check for the potential for overflow problems.\\n-\\t\\t\\t\\tif (pirlvl->prcwidthexpn + pi->picomp->numrlvls >\\n+\\t\\t\\t\\tif (pirlvl->prcwidthexpn + picomp->numrlvls >\\n \\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2 ||\\n-\\t\\t\\t\\t  pirlvl->prcheightexpn + pi->picomp->numrlvls >\\n+\\t\\t\\t\\t  pirlvl->prcheightexpn + picomp->numrlvls >\\n \\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2) {\\n \\t\\t\\t\\t\\treturn -1;\\n \\t\\t\\t\\t}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy8yYmI5N2Y0MDdjMTE0NWM4NTA0MTZhM2JmYmNjOGNmMTI0ZTY4YTE5Ig==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/2bb97f407c1145c850416a3bfbcc8cf124e68a19", "content": "{\"sha\": \"2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6MmJiOTdmNDA3YzExNDVjODUwNDE2YTNiZmJjYzhjZjEyNGU2OGExOQ==\", \"commit\": {\"author\": {\"name\": \"Mike Frysinger\", \"email\": \"vapier@gentoo.org\", \"date\": \"2016-04-16T07:51:22Z\"}, \"committer\": {\"name\": \"Mike Frysinger\", \"email\": \"vapier@gentoo.org\", \"date\": \"2016-04-16T07:51:22Z\"}, \"message\": \"gd2: handle corrupt images better (CVE-2016-3074)\\n\\nMake sure we do some range checking on corrupted chunks.\\n\\nThanks to Hans Jerry Illikainen <hji@dyntopia.com> for indepth report\\nand reproducer information.  Made for easy test case writing :).\", \"tree\": {\"sha\": \"472cc2a921873e4ef596b15267f17ff0332d06cb\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/472cc2a921873e4ef596b15267f17ff0332d06cb\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"html_url\": \"https://github.com/libgd/libgd/commit/2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/2bb97f407c1145c850416a3bfbcc8cf124e68a19/comments\", \"author\": {\"login\": \"vapier\", \"id\": 176950, \"node_id\": \"MDQ6VXNlcjE3Njk1MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/176950?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vapier\", \"html_url\": \"https://github.com/vapier\", \"followers_url\": \"https://api.github.com/users/vapier/followers\", \"following_url\": \"https://api.github.com/users/vapier/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vapier/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vapier/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vapier/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vapier/orgs\", \"repos_url\": \"https://api.github.com/users/vapier/repos\", \"events_url\": \"https://api.github.com/users/vapier/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vapier/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vapier\", \"id\": 176950, \"node_id\": \"MDQ6VXNlcjE3Njk1MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/176950?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vapier\", \"html_url\": \"https://github.com/vapier\", \"followers_url\": \"https://api.github.com/users/vapier/followers\", \"following_url\": \"https://api.github.com/users/vapier/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vapier/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vapier/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vapier/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vapier/orgs\", \"repos_url\": \"https://api.github.com/users/vapier/repos\", \"events_url\": \"https://api.github.com/users/vapier/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vapier/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fc14a8c1bb22542db00858a04495413f0c290001\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/fc14a8c1bb22542db00858a04495413f0c290001\", \"html_url\": \"https://github.com/libgd/libgd/commit/fc14a8c1bb22542db00858a04495413f0c290001\"}], \"stats\": {\"total\": 31, \"additions\": 30, \"deletions\": 1}, \"files\": [{\"sha\": \"35acd71dbad77a34df63513553f1be26323f1252\", \"filename\": \".gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/2bb97f407c1145c850416a3bfbcc8cf124e68a19/.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/2bb97f407c1145c850416a3bfbcc8cf124e68a19/.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/.gitignore?ref=2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"patch\": \"@@ -150,6 +150,7 @@ Makefile.in\\n /tests/gd2/gd2_im2im\\n /tests/gd2/gd2_null\\n /tests/gd2/gd2_read\\n+/tests/gd2/gd2_read_corrupt\\n /tests/gdimagearc/bug00079\\n /tests/gdimageline/gdimageline_aa\\n /tests/gdimageline/bug00072\"}, {\"sha\": \"a50b33d6d535ee6c60be6a74f788823917737db2\", \"filename\": \"src/gd_gd2.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/libgd/libgd/blob/2bb97f407c1145c850416a3bfbcc8cf124e68a19/src%2Fgd_gd2.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/2bb97f407c1145c850416a3bfbcc8cf124e68a19/src%2Fgd_gd2.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd_gd2.c?ref=2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"patch\": \"@@ -165,6 +165,8 @@ _gd2GetHeader (gdIOCtxPtr in, int *sx, int *sy,\\n \\t\\t\\tif (gdGetInt (&cidx[i].size, in) != 1) {\\n \\t\\t\\t\\tgoto fail2;\\n \\t\\t\\t};\\n+\\t\\t\\tif (cidx[i].offset < 0 || cidx[i].size < 0)\\n+\\t\\t\\t\\tgoto fail2;\\n \\t\\t};\\n \\t\\t*chunkIdx = cidx;\\n \\t};\"}, {\"sha\": \"b582266b3db7a88c104e151715e9fc1fe3089212\", \"filename\": \"tests/Makefile.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/libgd/libgd/blob/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2FMakefile.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2FMakefile.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2FMakefile.am?ref=2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"patch\": \"@@ -129,7 +129,8 @@ endif\\n \\n if HAVE_LIBZ\\n check_PROGRAMS += \\\\\\n-\\tgd2/gd2_null\\n+\\tgd2/gd2_null \\\\\\n+\\tgd2/gd2_read_corrupt\\n endif\\n \\n if HAVE_LIBPNG\"}, {\"sha\": \"11f6a67b9d32a9e83e5534fa5c0dd1928fe485e6\", \"filename\": \"tests/gd2/gd2_read_corrupt.c\", \"status\": \"added\", \"additions\": 25, \"deletions\": 0, \"changes\": 25, \"blob_url\": \"https://github.com/libgd/libgd/blob/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2Fgd2%2Fgd2_read_corrupt.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2Fgd2%2Fgd2_read_corrupt.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Fgd2_read_corrupt.c?ref=2bb97f407c1145c850416a3bfbcc8cf124e68a19\", \"patch\": \"@@ -0,0 +1,25 @@\\n+/* Just try to read the invalid gd2 image & not crash. */\\n+#include \\\"gd.h\\\"\\n+#include <stdio.h>\\n+#include <stdlib.h>\\n+#include \\\"gdtest.h\\\"\\n+\\n+int main()\\n+{\\n+\\tgdImagePtr im;\\n+\\tFILE *fp;\\n+\\tchar path[1024];\\n+\\n+\\t/* Read the corrupt image. */\\n+\\tsprintf(path, \\\"%s/gd2/invalid_neg_size.gd2\\\", GDTEST_TOP_DIR);\\n+\\tfp = fopen(path, \\\"rb\\\");\\n+\\tif (!fp) {\\n+\\t\\tprintf(\\\"failed, cannot open file\\\\n\\\");\\n+\\t\\treturn 1;\\n+\\t}\\n+\\tim = gdImageCreateFromGd2(fp);\\n+\\tfclose(fp);\\n+\\n+\\t/* Should have failed & rejected it. */\\n+\\treturn im == NULL ? 0 : 1;\\n+}\"}, {\"sha\": \"3075f15a81a5ac0312f1548ef7733726c58c1f24\", \"filename\": \"tests/gd2/invalid_neg_size.gd2\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2Fgd2%2Finvalid_neg_size.gd2\", \"raw_url\": \"https://github.com/libgd/libgd/raw/2bb97f407c1145c850416a3bfbcc8cf124e68a19/tests%2Fgd2%2Finvalid_neg_size.gd2\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Finvalid_neg_size.gd2?ref=2bb97f407c1145c850416a3bfbcc8cf124e68a19\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy83N2Y2MTlkNDgyNTkzODM2MjhjM2VjNDY1NGIxYWQ1NzhlOWViNDBlIg==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/77f619d48259383628c3ec4654b1ad578e9eb40e", "content": "{\"sha\": \"77f619d48259383628c3ec4654b1ad578e9eb40e\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6NzdmNjE5ZDQ4MjU5MzgzNjI4YzNlYzQ2NTRiMWFkNTc4ZTllYjQwZQ==\", \"commit\": {\"author\": {\"name\": \"Pierre Joye\", \"email\": \"pierre.php@gmail.com\", \"date\": \"2016-06-04T16:09:01Z\"}, \"committer\": {\"name\": \"Pierre Joye\", \"email\": \"pierre.php@gmail.com\", \"date\": \"2016-06-04T16:09:01Z\"}, \"message\": \"fix #215 gdImageFillToBorder stack-overflow when invalid color is used\", \"tree\": {\"sha\": \"59287d6bc88552fe2ea3ef1e7fab42e1b5c3fc06\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/59287d6bc88552fe2ea3ef1e7fab42e1b5c3fc06\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/77f619d48259383628c3ec4654b1ad578e9eb40e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/77f619d48259383628c3ec4654b1ad578e9eb40e\", \"html_url\": \"https://github.com/libgd/libgd/commit/77f619d48259383628c3ec4654b1ad578e9eb40e\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/77f619d48259383628c3ec4654b1ad578e9eb40e/comments\", \"author\": {\"login\": \"pierrejoye\", \"id\": 282408, \"node_id\": \"MDQ6VXNlcjI4MjQwOA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/282408?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pierrejoye\", \"html_url\": \"https://github.com/pierrejoye\", \"followers_url\": \"https://api.github.com/users/pierrejoye/followers\", \"following_url\": \"https://api.github.com/users/pierrejoye/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pierrejoye/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pierrejoye/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pierrejoye/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pierrejoye/orgs\", \"repos_url\": \"https://api.github.com/users/pierrejoye/repos\", \"events_url\": \"https://api.github.com/users/pierrejoye/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pierrejoye/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"pierrejoye\", \"id\": 282408, \"node_id\": \"MDQ6VXNlcjI4MjQwOA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/282408?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pierrejoye\", \"html_url\": \"https://github.com/pierrejoye\", \"followers_url\": \"https://api.github.com/users/pierrejoye/followers\", \"following_url\": \"https://api.github.com/users/pierrejoye/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pierrejoye/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pierrejoye/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pierrejoye/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pierrejoye/orgs\", \"repos_url\": \"https://api.github.com/users/pierrejoye/repos\", \"events_url\": \"https://api.github.com/users/pierrejoye/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pierrejoye/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"73f4e0339abda6514600c0c6a633ad8c49005437\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/73f4e0339abda6514600c0c6a633ad8c49005437\", \"html_url\": \"https://github.com/libgd/libgd/commit/73f4e0339abda6514600c0c6a633ad8c49005437\"}], \"stats\": {\"total\": 13, \"additions\": 11, \"deletions\": 2}, \"files\": [{\"sha\": \"704ce79a424bcb3472e9826d46d58f08a6a25230\", \"filename\": \"src/gd.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 1, \"changes\": 8, \"blob_url\": \"https://github.com/libgd/libgd/blob/77f619d48259383628c3ec4654b1ad578e9eb40e/src%2Fgd.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/77f619d48259383628c3ec4654b1ad578e9eb40e/src%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd.c?ref=77f619d48259383628c3ec4654b1ad578e9eb40e\", \"patch\": \"@@ -1928,11 +1928,17 @@ BGD_DECLARE(void) gdImageFillToBorder (gdImagePtr im, int x, int y, int border,\\n \\tint i;\\n \\tint restoreAlphaBleding;\\n \\n-\\tif (border < 0) {\\n+\\tif (border < 0 || color < 0) {\\n \\t\\t/* Refuse to fill to a non-solid border */\\n \\t\\treturn;\\n \\t}\\n \\n+\\tif (!im->trueColor) {\\n+\\t\\tif ((color > (im->colorsTotal - 1)) || (border > (im->colorsTotal - 1))) {\\n+\\t\\t\\treturn;\\n+\\t\\t}\\n+    }\\n+\\n \\tleftLimit = (-1);\\n \\n \\trestoreAlphaBleding = im->alphaBlendingFlag;\"}, {\"sha\": \"384299c6c96cdb198e0396fe131b711751a26bea\", \"filename\": \"tests/gdimagefilltoborder/.gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagefilltoborder%2F.gitignore?ref=77f619d48259383628c3ec4654b1ad578e9eb40e\", \"patch\": \"@@ -1 +1,2 @@\\n /bug00037\\n+/github_bug_215\"}, {\"sha\": \"f03529a6082947d9b22f14ec00b5338081b50111\", \"filename\": \"tests/gdimagefilltoborder/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagefilltoborder%2FCMakeLists.txt?ref=77f619d48259383628c3ec4654b1ad578e9eb40e\", \"patch\": \"@@ -1,5 +1,6 @@\\n SET(TESTS_FILES\\n \\tbug00037\\n+\\tgithub_bug_215\\n )\\n \\n ADD_GD_TESTS()\"}, {\"sha\": \"fc7ed3d05d669a80666ae5dfb5121b54c24afd20\", \"filename\": \"tests/gdimagefilltoborder/Makemodule.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/libgd/libgd/blob/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/77f619d48259383628c3ec4654b1ad578e9eb40e/tests%2Fgdimagefilltoborder%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagefilltoborder%2FMakemodule.am?ref=77f619d48259383628c3ec4654b1ad578e9eb40e\", \"patch\": \"@@ -1,6 +1,7 @@\\n if HAVE_LIBPNG\\n libgd_test_programs += \\\\\\n-\\tgdimagefilltoborder/bug00037\\n+\\tgdimagefilltoborder/bug00037 \\\\\\n+\\tgdimagefilltoborder/github_bug_215\\n endif\\n \\n EXTRA_DIST += \\\\\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy81OGI2ZGRlMzE5YzMwMWIwZWFlMjdkMTJlMmE2NTllMDY3ZDgwNTU4Ig==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/58b6dde319c301b0eae27d12e2a659e067d80558", "content": "{\"sha\": \"58b6dde319c301b0eae27d12e2a659e067d80558\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6NThiNmRkZTMxOWMzMDFiMGVhZTI3ZDEyZTJhNjU5ZTA2N2Q4MDU1OA==\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-08-16T14:26:19Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-13T14:51:51Z\"}, \"message\": \"Fix OOB reads of the TGA decompression buffer\\n\\nIt is possible to craft TGA files which will overflow the decompression\\nbuffer, but not the image's bitmap. Therefore we also have to check for\\npotential decompression buffer overflows.\\n\\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org;\\na modified case exposing an off-by-one error of the first patch had been\\nprovided by Konrad Beckmann.\\n\\nThis commit is an amendment to commit fb0e0cce, so we use CVE-2016-6906\\nas well.\", \"tree\": {\"sha\": \"74cdf3396c9f1d3cd9aac81f940138f3b5c8bd0f\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/74cdf3396c9f1d3cd9aac81f940138f3b5c8bd0f\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/58b6dde319c301b0eae27d12e2a659e067d80558\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/58b6dde319c301b0eae27d12e2a659e067d80558\", \"html_url\": \"https://github.com/libgd/libgd/commit/58b6dde319c301b0eae27d12e2a659e067d80558\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/58b6dde319c301b0eae27d12e2a659e067d80558/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"html_url\": \"https://github.com/libgd/libgd/commit/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\"}], \"stats\": {\"total\": 27, \"additions\": 21, \"deletions\": 6}, \"files\": [{\"sha\": \"f80f0b16fb8943770d557cbdbdc27cdb76286413\", \"filename\": \"src/gd_tga.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 1, \"changes\": 8, \"blob_url\": \"https://github.com/libgd/libgd/blob/58b6dde319c301b0eae27d12e2a659e067d80558/src%2Fgd_tga.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/58b6dde319c301b0eae27d12e2a659e067d80558/src%2Fgd_tga.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd_tga.c?ref=58b6dde319c301b0eae27d12e2a659e067d80558\", \"patch\": \"@@ -295,7 +295,13 @@ int read_image_tga( gdIOCtx *ctx, oTga *tga )\\n \\t\\tbuffer_caret = 0;\\n \\n \\t\\twhile( bitmap_caret < image_block_size ) {\\n-\\t\\t\\t\\n+\\n+\\t\\t\\tif (buffer_caret + pixel_block_size > rle_size) {\\n+\\t\\t\\t\\tgdFree( decompression_buffer );\\n+\\t\\t\\t\\tgdFree( conversion_buffer );\\n+\\t\\t\\t\\treturn -1;\\n+\\t\\t\\t}\\n+\\n \\t\\t\\tif ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {\\n \\t\\t\\t\\tencoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );\\n \\t\\t\\t\\tbuffer_caret++;\"}, {\"sha\": \"ab08dbff2b9fc3790e10d816860f9ccd0cafca4a\", \"filename\": \"tests/tga/Makemodule.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/libgd/libgd/blob/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2FMakemodule.am?ref=58b6dde319c301b0eae27d12e2a659e067d80558\", \"patch\": \"@@ -15,7 +15,8 @@ EXTRA_DIST += \\\\\\n \\ttga/bug00247a.tga \\\\\\n \\ttga/bug00248.tga \\\\\\n \\ttga/bug00248a.tga \\\\\\n-\\ttga/heap_overflow.tga \\\\\\n+\\ttga/heap_overflow_1.tga \\\\\\n+\\ttga/heap_overflow_2.tga \\\\\\n \\ttga/tga_read_rgb.png \\\\\\n \\ttga/tga_read_rgb.tga \\\\\\n \\ttga/tga_read_rgb_rle.tga\"}, {\"sha\": \"ddd4b63e953f77498e3d4e7e9d861a6a2b917267\", \"filename\": \"tests/tga/heap_overflow.c\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 4, \"changes\": 16, \"blob_url\": \"https://github.com/libgd/libgd/blob/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2Fheap_overflow.c?ref=58b6dde319c301b0eae27d12e2a659e067d80558\", \"patch\": \"@@ -1,27 +1,35 @@\\n /**\\n- * Test that the crafted TGA file doesn't trigger OOB reads.\\n+ * Test that crafted TGA files don't trigger OOB reads.\\n  */\\n \\n \\n #include \\\"gd.h\\\"\\n #include \\\"gdtest.h\\\"\\n \\n \\n+static void check_file(char *basename);\\n static size_t read_test_file(char **buffer, char *basename);\\n \\n \\n int main()\\n+{\\n+    check_file(\\\"heap_overflow_1.tga\\\");\\n+    check_file(\\\"heap_overflow_2.tga\\\");\\n+\\n+    return gdNumFailures();\\n+}\\n+\\n+\\n+static void check_file(char *basename)\\n {\\n     gdImagePtr im;\\n     char *buffer;\\n     size_t size;\\n \\n-    size = read_test_file(&buffer, \\\"heap_overflow.tga\\\");\\n+    size = read_test_file(&buffer, basename);\\n     im = gdImageCreateFromTgaPtr(size, (void *) buffer);\\n     gdTestAssert(im == NULL);\\n     free(buffer);\\n-\\n-    return gdNumFailures();\\n }\\n \\n \"}, {\"sha\": \"e9bc0ecb2a847ac6edba92dd0ff61167b49002cd\", \"filename\": \"tests/tga/heap_overflow_1.tga\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow_1.tga\", \"raw_url\": \"https://github.com/libgd/libgd/raw/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow_1.tga\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2Fheap_overflow_1.tga?ref=58b6dde319c301b0eae27d12e2a659e067d80558\"}, {\"sha\": \"2b681f2df8941d6823aa761be0a7fa3c02c92cbf\", \"filename\": \"tests/tga/heap_overflow_2.tga\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow_2.tga\", \"raw_url\": \"https://github.com/libgd/libgd/raw/58b6dde319c301b0eae27d12e2a659e067d80558/tests%2Ftga%2Fheap_overflow_2.tga\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2Fheap_overflow_2.tga?ref=58b6dde319c301b0eae27d12e2a659e067d80558\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy9mYjBlMGNjZTBiOWYyNTM4OWFiNTY2MDRjMzU0NzM1MTYxN2UxNDE1Ig==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/fb0e0cce0b9f25389ab56604c3547351617e1415", "content": "{\"sha\": \"fb0e0cce0b9f25389ab56604c3547351617e1415\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6ZmIwZTBjY2UwYjlmMjUzODlhYjU2NjA0YzM1NDczNTE2MTdlMTQxNQ==\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-08-16T14:26:19Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-13T12:31:05Z\"}, \"message\": \"Fix OOB reads of the TGA decompression buffer\\n\\nIt is possible to craft TGA files which will overflow the decompression\\nbuffer, but not the image's bitmap. Therefore we augment the check for the\\nbitmap's overflow with a check for the buffer's overflow.\\n\\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.\\n\\nCVE-2016-6906\", \"tree\": {\"sha\": \"8b37670adff598b574bdf9a4f768f68a5c10df98\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/8b37670adff598b574bdf9a4f768f68a5c10df98\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/fb0e0cce0b9f25389ab56604c3547351617e1415\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/fb0e0cce0b9f25389ab56604c3547351617e1415\", \"html_url\": \"https://github.com/libgd/libgd/commit/fb0e0cce0b9f25389ab56604c3547351617e1415\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/fb0e0cce0b9f25389ab56604c3547351617e1415/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5ebbd50cffc013a7dd0f3b1eaaa83d199e8e47fd\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/5ebbd50cffc013a7dd0f3b1eaaa83d199e8e47fd\", \"html_url\": \"https://github.com/libgd/libgd/commit/5ebbd50cffc013a7dd0f3b1eaaa83d199e8e47fd\"}], \"stats\": {\"total\": 61, \"additions\": 59, \"deletions\": 2}, \"files\": [{\"sha\": \"68e4b17da4779c0c4170254a118ed364b999ce99\", \"filename\": \"src/gd_tga.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/src%2Fgd_tga.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/src%2Fgd_tga.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd_tga.c?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\", \"patch\": \"@@ -300,7 +300,8 @@ int read_image_tga( gdIOCtx *ctx, oTga *tga )\\n \\t\\t\\t\\tencoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );\\n \\t\\t\\t\\tbuffer_caret++;\\n \\n-\\t\\t\\t\\tif ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {\\n+\\t\\t\\t\\tif ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size\\n+\\t\\t\\t\\t\\t\\t|| buffer_caret + pixel_block_size > rle_size) {\\n \\t\\t\\t\\t\\tgdFree( decompression_buffer );\\n \\t\\t\\t\\t\\tgdFree( conversion_buffer );\\n \\t\\t\\t\\t\\treturn -1;\\n@@ -316,7 +317,8 @@ int read_image_tga( gdIOCtx *ctx, oTga *tga )\\n \\t\\t\\t\\tencoded_pixels = decompression_buffer[ buffer_caret ] + 1;\\n \\t\\t\\t\\tbuffer_caret++;\\n \\n-\\t\\t\\t\\tif ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {\\n+\\t\\t\\t\\tif ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size\\n+\\t\\t\\t\\t\\t\\t|| buffer_caret + (encoded_pixels * pixel_block_size) > rle_size) {\\n \\t\\t\\t\\t\\tgdFree( decompression_buffer );\\n \\t\\t\\t\\t\\tgdFree( conversion_buffer );\\n \\t\\t\\t\\t\\treturn -1;\"}, {\"sha\": \"cf0556b552ddd52c3371fb4bb38bd9590df73088\", \"filename\": \"tests/tga/.gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2F.gitignore?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\", \"patch\": \"@@ -3,5 +3,6 @@\\n /bug00247a\\n /bug00248\\n /bug00248a\\n+/heap_overflow\\n /tga_null\\n /tga_read\"}, {\"sha\": \"11542a03ec81784e560d5b025c3f77775caae145\", \"filename\": \"tests/tga/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2FCMakeLists.txt?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\", \"patch\": \"@@ -5,6 +5,7 @@ LIST(APPEND TESTS_FILES\\n \\tbug00247a\\n \\tbug00248\\n \\tbug00248a\\n+\\theap_overflow\\n \\ttga_read\\n )\\n \"}, {\"sha\": \"916d70737c44c1921e71c62dd2b03b2ee903b6f4\", \"filename\": \"tests/tga/Makemodule.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2FMakemodule.am?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\", \"patch\": \"@@ -4,6 +4,7 @@ libgd_test_programs += \\\\\\n \\ttga/bug00247a \\\\\\n \\ttga/bug00248 \\\\\\n \\ttga/bug00248a \\\\\\n+\\ttga/heap_overflow \\\\\\n \\ttga/tga_null \\\\\\n \\ttga/tga_read\\n \\n@@ -14,6 +15,7 @@ EXTRA_DIST += \\\\\\n \\ttga/bug00247a.tga \\\\\\n \\ttga/bug00248.tga \\\\\\n \\ttga/bug00248a.tga \\\\\\n+\\ttga/heap_overflow.tga \\\\\\n \\ttga/tga_read_rgb.png \\\\\\n \\ttga/tga_read_rgb.tga \\\\\\n \\ttga/tga_read_rgb_rle.tga\"}, {\"sha\": \"0e9a2d00c8e424728a71bdc6e75609c4087d3c32\", \"filename\": \"tests/tga/heap_overflow.c\", \"status\": \"added\", \"additions\": 51, \"deletions\": 0, \"changes\": 51, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2Fheap_overflow.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2Fheap_overflow.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2Fheap_overflow.c?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\", \"patch\": \"@@ -0,0 +1,51 @@\\n+/**\\n+ * Test that the crafted TGA file doesn't trigger OOB reads.\\n+ */\\n+\\n+\\n+#include \\\"gd.h\\\"\\n+#include \\\"gdtest.h\\\"\\n+\\n+\\n+static size_t read_test_file(char **buffer, char *basename);\\n+\\n+\\n+int main()\\n+{\\n+    gdImagePtr im;\\n+    char *buffer;\\n+    size_t size;\\n+\\n+    size = read_test_file(&buffer, \\\"heap_overflow.tga\\\");\\n+    im = gdImageCreateFromTgaPtr(size, (void *) buffer);\\n+    gdTestAssert(im == NULL);\\n+    free(buffer);\\n+\\n+    return gdNumFailures();\\n+}\\n+\\n+\\n+static size_t read_test_file(char **buffer, char *basename)\\n+{\\n+    char *filename;\\n+    FILE *fp;\\n+    size_t exp_size, act_size;\\n+\\n+    filename = gdTestFilePath2(\\\"tga\\\", basename);\\n+    fp = fopen(filename, \\\"rb\\\");\\n+    gdTestAssert(fp != NULL);\\n+\\n+\\tfseek(fp, 0, SEEK_END);\\n+\\texp_size = ftell(fp);\\n+\\tfseek(fp, 0, SEEK_SET);\\n+\\n+    *buffer = malloc(exp_size);\\n+    gdTestAssert(*buffer != NULL);\\n+    act_size = fread(*buffer, sizeof(**buffer), exp_size, fp);\\n+    gdTestAssert(act_size == exp_size);\\n+\\n+    fclose(fp);\\n+    free(filename);\\n+\\n+    return act_size;\\n+}\"}, {\"sha\": \"e9bc0ecb2a847ac6edba92dd0ff61167b49002cd\", \"filename\": \"tests/tga/heap_overflow.tga\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2Fheap_overflow.tga\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fb0e0cce0b9f25389ab56604c3547351617e1415/tests%2Ftga%2Fheap_overflow.tga\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Ftga%2Fheap_overflow.tga?ref=fb0e0cce0b9f25389ab56604c3547351617e1415\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy9mZTllZDQ5ZGFmYTk5M2UzYWY5NmI2YTVhNTg5ZWZlZWE5YmZiMzZmIg==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f", "content": "{\"sha\": \"fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6ZmU5ZWQ0OWRhZmE5OTNlM2FmOTZiNmE1YTU4OWVmZWVhOWJmYjM2Zg==\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-08-16T16:23:36Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-13T14:33:42Z\"}, \"message\": \"Fix DOS vulnerability in gdImageCreateFromGd2Ctx()\\n\\nWe must not pretend that there are image data if there are none. Instead\\nwe fail reading the image file gracefully.\", \"tree\": {\"sha\": \"96e1870f69de8975d3fc6c2407807c075059a70b\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/96e1870f69de8975d3fc6c2407807c075059a70b\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"html_url\": \"https://github.com/libgd/libgd/commit/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"60bfb401ad5a4a8ae995dcd36372fe15c71e1a35\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/60bfb401ad5a4a8ae995dcd36372fe15c71e1a35\", \"html_url\": \"https://github.com/libgd/libgd/commit/60bfb401ad5a4a8ae995dcd36372fe15c71e1a35\"}], \"stats\": {\"total\": 45, \"additions\": 35, \"deletions\": 10}, \"files\": [{\"sha\": \"d07828c7800a0531880680a787dde1c790666f4d\", \"filename\": \"src/gd_gd2.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 8, \"changes\": 14, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/src%2Fgd_gd2.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/src%2Fgd_gd2.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd_gd2.c?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"patch\": \"@@ -503,18 +503,16 @@ BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Ctx (gdIOCtxPtr in)\\n \\n \\t\\t\\t\\t\\t\\tif (im->trueColor) {\\n \\t\\t\\t\\t\\t\\t\\tif (!gdGetInt (&im->tpixels[y][x], in)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*printf(\\\"EOF while reading\\\\n\\\"); */\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*gdImageDestroy(im); */\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*return 0; */\\n-\\t\\t\\t\\t\\t\\t\\t\\tim->tpixels[y][x] = 0;\\n+\\t\\t\\t\\t\\t\\t\\t\\tgd_error(\\\"gd2: EOF while reading\\\\n\\\");\\n+\\t\\t\\t\\t\\t\\t\\t\\tgdImageDestroy(im);\\n+\\t\\t\\t\\t\\t\\t\\t\\treturn NULL;\\n \\t\\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\t} else {\\n \\t\\t\\t\\t\\t\\t\\tint ch;\\n \\t\\t\\t\\t\\t\\t\\tif (!gdGetByte (&ch, in)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*printf(\\\"EOF while reading\\\\n\\\"); */\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*gdImageDestroy(im); */\\n-\\t\\t\\t\\t\\t\\t\\t\\t/*return 0; */\\n-\\t\\t\\t\\t\\t\\t\\t\\tch = 0;\\n+\\t\\t\\t\\t\\t\\t\\t\\tgd_error(\\\"gd2: EOF while reading\\\\n\\\");\\n+\\t\\t\\t\\t\\t\\t\\t\\tgdImageDestroy(im);\\n+\\t\\t\\t\\t\\t\\t\\t\\treturn NULL;\\n \\t\\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\t\\tim->pixels[y][x] = ch;\\n \\t\\t\\t\\t\\t\\t}\"}, {\"sha\": \"39d8bf4ebe5c5bb7d1fc347f0a2c30f6e401f82c\", \"filename\": \"tests/gd2/.gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2F.gitignore?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"patch\": \"@@ -6,3 +6,4 @@\\n /gd2_read\\n /gd2_read_corrupt\\n /php_bug_72339\\n+/too_few_image_data\"}, {\"sha\": \"5a61d113a34d0661ca48be4981c6ed61a9da5be2\", \"filename\": \"tests/gd2/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2FCMakeLists.txt?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"patch\": \"@@ -7,6 +7,7 @@ LIST(APPEND TESTS_FILES\\n \\tphp_bug_72339\\n \\tgd2_read\\n \\tgd2_read_corrupt\\n+\\ttoo_few_image_data\\n )\\n \\n ADD_GD_TESTS()\"}, {\"sha\": \"c1fbf440a08cf74d9d92d07e74048cacba9f9dc4\", \"filename\": \"tests/gd2/Makemodule.am\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2FMakemodule.am?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"patch\": \"@@ -3,7 +3,8 @@ libgd_test_programs += \\\\\\n \\tgd2/bug00309 \\\\\\n \\tgd2/gd2_empty_file \\\\\\n \\tgd2/php_bug_72339 \\\\\\n-\\tgd2/gd2_read_corrupt\\n+\\tgd2/gd2_read_corrupt \\\\\\n+\\tgd2/too_few_image_data\\n \\n if HAVE_LIBZ\\n libgd_test_programs += \\\\\\n@@ -23,4 +24,6 @@ EXTRA_DIST += \\\\\\n \\tgd2/conv_test_exp.png \\\\\\n \\tgd2/empty.gd2 \\\\\\n \\tgd2/invalid_header.gd2 \\\\\\n-\\tgd2/invalid_neg_size.gd2\\n+\\tgd2/invalid_neg_size.gd2 \\\\\\n+\\tgd2/php_bug_72339_exp.gd2 \\\\\\n+\\tgd2/too_few_image_data.gd2\"}, {\"sha\": \"3153a080078fe3f329544cbfe8de5889c9731200\", \"filename\": \"tests/gd2/too_few_image_data.c\", \"status\": \"added\", \"additions\": 22, \"deletions\": 0, \"changes\": 22, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2Ftoo_few_image_data.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2Ftoo_few_image_data.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Ftoo_few_image_data.c?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\", \"patch\": \"@@ -0,0 +1,22 @@\\n+/*\\n+too_few_image_data.gd2 claims to have a size of 12336x48 pixels, but doesn't\\n+provide as much image data. We test that gdImageCreateFromGd2Ctx() returns NULL\\n+in this case.\\n+*/\\n+\\n+#include \\\"gd.h\\\"\\n+#include \\\"gdtest.h\\\"\\n+\\n+int main()\\n+{\\n+    gdImagePtr im;\\n+    FILE *fp;\\n+\\n+    fp = gdTestFileOpen2(\\\"gd2\\\", \\\"too_few_image_data.gd2\\\");\\n+    gdTestAssert(fp != NULL);\\n+    im = gdImageCreateFromGd2(fp);\\n+    gdTestAssert(im == NULL);\\n+    fclose(fp);\\n+\\n+    return gdNumFailures();\\n+}\"}, {\"sha\": \"1c797d1acfae114be5505962f9f3201f01bca420\", \"filename\": \"tests/gd2/too_few_image_data.gd2\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2Ftoo_few_image_data.gd2\", \"raw_url\": \"https://github.com/libgd/libgd/raw/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f/tests%2Fgd2%2Ftoo_few_image_data.gd2\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Ftoo_few_image_data.gd2?ref=fe9ed49dafa993e3af96b6a5a589efeea9bfb36f\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy8xODQ2ZjQ4ZTVmY2RkZTk5NmU3YzI3YTRiYmFjNWQwYWVmMTgzZTRiIg==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b", "content": "{\"sha\": \"1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6MTg0NmY0OGU1ZmNkZGU5OTZlN2MyN2E0YmJhYzVkMGFlZjE4M2U0Yg==\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-11-12T14:00:31Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-13T15:02:19Z\"}, \"message\": \"Fix #340: System frozen\\n\\ngdImageCreate() doesn't check for oversized images and as such is prone\\nto DoS vulnerabilities. We fix that by applying the same overflow check\\nthat is already in place for gdImageCreateTrueColor().\\n\\nCVE-2016-9317\", \"tree\": {\"sha\": \"4731c5afba12dd09bfaba28655ca52ca3fa4d9cc\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/4731c5afba12dd09bfaba28655ca52ca3fa4d9cc\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"html_url\": \"https://github.com/libgd/libgd/commit/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"58b6dde319c301b0eae27d12e2a659e067d80558\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/58b6dde319c301b0eae27d12e2a659e067d80558\", \"html_url\": \"https://github.com/libgd/libgd/commit/58b6dde319c301b0eae27d12e2a659e067d80558\"}], \"stats\": {\"total\": 47, \"additions\": 47, \"deletions\": 0}, \"files\": [{\"sha\": \"d5d1a7ecb059d86657b04fc5950f55e200c0a34e\", \"filename\": \"src/gd.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/src%2Fgd.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/src%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd.c?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -188,6 +188,7 @@ BGD_DECLARE(gdImagePtr) gdImageCreate (int sx, int sy)\\n \\tif (overflow2(sx, sy)) {\\n \\t\\treturn NULL;\\n \\t}\\n+\\n \\tif (overflow2(sizeof (unsigned char *), sy)) {\\n \\t\\treturn NULL;\\n \\t}\"}, {\"sha\": \"7eef4bf46eb28424ea54cffe4049edfa0abeb4e1\", \"filename\": \"tests/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2FCMakeLists.txt?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -38,6 +38,7 @@ if (BUILD_TEST)\\n \\t\\tgdimagecopy\\n \\t\\tgdimagecopyresampled\\n \\t\\tgdimagecopyrotated\\n+\\t\\tgdimagecreate\\n \\t\\tgdimagecrop\\n \\t\\tgdimagefile\\n \\t\\tgdimagefill\"}, {\"sha\": \"5f8b624bc1c8ca05006996967f2a7336debce9dc\", \"filename\": \"tests/Makefile.am\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2FMakefile.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2FMakefile.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2FMakefile.am?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -33,6 +33,7 @@ include gdimageconvolution/Makemodule.am\\n include gdimagecopy/Makemodule.am\\n include gdimagecopyresampled/Makemodule.am\\n include gdimagecopyrotated/Makemodule.am\\n+include gdimagecreate/Makemodule.am\\n include gdimagecrop/Makemodule.am\\n include gdimagefile/Makemodule.am\\n include gdimagefill/Makemodule.am\"}, {\"sha\": \"6300aed1c5478cc5801b7d1e8282b48fa4917e65\", \"filename\": \"tests/gdimagecreate/.gitignore\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagecreate%2F.gitignore?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -0,0 +1 @@\\n+/bug00340\"}, {\"sha\": \"905e79c52e268598ff95bb3d580c05d09e151c51\", \"filename\": \"tests/gdimagecreate/CMakeLists.txt\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagecreate%2FCMakeLists.txt?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -0,0 +1,5 @@\\n+SET(TESTS_FILES\\n+\\tbug00340\\n+)\\n+\\n+ADD_GD_TESTS()\"}, {\"sha\": \"886608694afa46cfe65f2424845f739d7627b30a\", \"filename\": \"tests/gdimagecreate/Makemodule.am\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagecreate%2FMakemodule.am?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -0,0 +1,5 @@\\n+libgd_test_programs += \\\\\\n+\\tgdimagecreate/bug00340\\n+\\n+EXTRA_DIST += \\\\\\n+\\tgdimagecreate/CMakeLists.txt\"}, {\"sha\": \"5babcaab24049b29a3916278cfe64c6aee18809b\", \"filename\": \"tests/gdimagecreate/bug00340.c\", \"status\": \"added\", \"additions\": 33, \"deletions\": 0, \"changes\": 33, \"blob_url\": \"https://github.com/libgd/libgd/blob/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2Fbug00340.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b/tests%2Fgdimagecreate%2Fbug00340.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimagecreate%2Fbug00340.c?ref=1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"patch\": \"@@ -0,0 +1,33 @@\\n+/**\\r\\n+ * Regression test for <https://github.com/libgd/libgd/issues/340>\\r\\n+ *\\r\\n+ * We're testing that trying to create an oversized image fails early,\\r\\n+ * triggering an appropriate warning.\\r\\n+ */\\r\\n+\\r\\n+\\r\\n+#include <string.h>\\r\\n+#include \\\"gd.h\\\"\\r\\n+#include \\\"gd_errors.h\\\"\\r\\n+#include \\\"gdtest.h\\\"\\r\\n+\\r\\n+\\r\\n+#define MSG \\\"product of memory allocation multiplication would exceed INT_MAX, failing operation gracefully\\\\n\\\"\\r\\n+\\r\\n+\\r\\n+void error_handler(int priority, const char *format, ...)\\r\\n+{\\r\\n+    gdTestAssert(priority == GD_WARNING);\\r\\n+    gdTestAssert(!strcmp(format, MSG));\\r\\n+}\\r\\n+\\r\\n+\\r\\n+int main()\\r\\n+{\\r\\n+    gdImagePtr im;\\r\\n+\\r\\n+    im = gdImageCreate(64970, 65111);\\r\\n+    gdTestAssert(im == NULL);\\r\\n+\\r\\n+    return gdNumFailures();\\r\\n+}\\r\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy82OWQyZmQyYzU5N2ZmYzBjMjE3ZGUxMjM4YjliZjRkNGJjZWJhOGU2Ig==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6", "content": "{\"sha\": \"69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6NjlkMmZkMmM1OTdmZmMwYzIxN2RlMTIzOGI5YmY0ZDRiY2ViYThlNg==\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-17T16:06:58Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-12-17T16:38:02Z\"}, \"message\": \"Fix #354: Signed Integer Overflow gd_io.c\\n\\nGD2 stores the number of horizontal and vertical chunks as words (i.e. 2\\nbyte unsigned). These values are multiplied and assigned to an int when\\nreading the image, what can cause integer overflows. We have to avoid\\nthat, and also make sure that either chunk count is actually greater\\nthan zero. If illegal chunk counts are detected, we bail out from\\nreading the image.\", \"tree\": {\"sha\": \"8e0106aa3d74a69a501c169e35cd7de0c7d3ba96\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/8e0106aa3d74a69a501c169e35cd7de0c7d3ba96\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"html_url\": \"https://github.com/libgd/libgd/commit/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\", \"html_url\": \"https://github.com/libgd/libgd/commit/1846f48e5fcdde996e7c27a4bbac5d0aef183e4b\"}], \"stats\": {\"total\": 41, \"additions\": 41, \"deletions\": 0}, \"files\": [{\"sha\": \"c2904cafa192d943bd2b75f39671fa7a25ff1f49\", \"filename\": \"src/gd_gd2.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/src%2Fgd_gd2.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/src%2Fgd_gd2.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd_gd2.c?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"patch\": \"@@ -209,6 +209,10 @@ _gd2GetHeader (gdIOCtxPtr in, int *sx, int *sy,\\n \\tGD2_DBG (printf (\\\"%d Chunks vertically\\\\n\\\", *ncy));\\n \\n \\tif (gd2_compressed (*fmt)) {\\n+\\t\\tif (*ncx <= 0 || *ncy <= 0 || *ncx > INT_MAX / *ncy) {\\n+\\t\\t\\tGD2_DBG(printf (\\\"Illegal chunk counts: %d * %d\\\\n\\\", *ncx, *ncy));\\n+\\t\\t\\tgoto fail1;\\n+\\t\\t}\\n \\t\\tnc = (*ncx) * (*ncy);\\n \\n \\t\\tGD2_DBG (printf (\\\"Reading %d chunk index entries\\\\n\\\", nc));\"}, {\"sha\": \"8d3ee850ff70ea5c15299fad6115b23ae6bfe1b8\", \"filename\": \"tests/gd2/.gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2F.gitignore?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"patch\": \"@@ -1,5 +1,6 @@\\n /bug_289\\n /bug00309\\n+/bug00354\\n /gd2_empty_file\\n /gd2_im2im\\n /gd2_null\"}, {\"sha\": \"36de57378901756e8ca9ba27932cf38f07bd9ee4\", \"filename\": \"tests/gd2/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2FCMakeLists.txt?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"patch\": \"@@ -1,6 +1,7 @@\\n LIST(APPEND TESTS_FILES\\n \\tbug_289\\n \\tbug00309\\n+\\tbug00354\\n \\tgd2_empty_file\\n \\tgd2_im2im\\n \\tgd2_null\"}, {\"sha\": \"0322bd021aee12113010c15bb65e8035d5cbdf94\", \"filename\": \"tests/gd2/Makemodule.am\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2FMakemodule.am?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"patch\": \"@@ -1,6 +1,7 @@\\n libgd_test_programs += \\\\\\n \\tgd2/bug_289 \\\\\\n \\tgd2/bug00309 \\\\\\n+\\tgd2/bug00354 \\\\\\n \\tgd2/gd2_empty_file \\\\\\n \\tgd2/php_bug_72339 \\\\\\n \\tgd2/gd2_read_corrupt \\\\\\n@@ -19,6 +20,8 @@ endif\\n \\n EXTRA_DIST += \\\\\\n \\tgd2/CMakeLists.txt \\\\\\n+\\tgd2/bug00354a.gd2 \\\\\\n+\\tgd2/bug00354b.gd2 \\\\\\n \\tgd2/conv_gd2_exp.gd2 \\\\\\n \\tgd2/conv_test.gd2 \\\\\\n \\tgd2/conv_test_exp.png \\\\\"}, {\"sha\": \"cc64254d257c50e54ae59b97c5ec5577d7831d90\", \"filename\": \"tests/gd2/bug00354.c\", \"status\": \"added\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Fbug00354.c?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\", \"patch\": \"@@ -0,0 +1,32 @@\\n+/**\\r\\n+ * We're testing GD2 image files which report illegal chunk counts. These should\\r\\n+ * not cause integer overflows or other issues, but instead simply fail to be\\r\\n+ * loaded.\\r\\n+ *\\r\\n+ * See also <https://github.com/libgd/libgd/issues/354>.\\r\\n+ */\\r\\n+\\r\\n+\\r\\n+#include \\\"gd.h\\\"\\r\\n+#include \\\"gdtest.h\\\"\\r\\n+\\r\\n+\\r\\n+int main()\\r\\n+{\\r\\n+    gdImagePtr im;\\r\\n+    FILE *fp;\\r\\n+\\r\\n+    fp = gdTestFileOpen2(\\\"gd2\\\", \\\"bug00354a.gd2\\\");\\r\\n+    gdTestAssert(fp != NULL);\\r\\n+    im = gdImageCreateFromGd2(fp);\\r\\n+    gdTestAssert(im == NULL);\\r\\n+    fclose(fp);\\r\\n+\\r\\n+    fp = gdTestFileOpen2(\\\"gd2\\\", \\\"bug00354b.gd2\\\");\\r\\n+    gdTestAssert(fp != NULL);\\r\\n+    im = gdImageCreateFromGd2(fp);\\r\\n+    gdTestAssert(im == NULL);\\r\\n+    fclose(fp);\\r\\n+\\r\\n+    return gdNumFailures();\\r\\n+}\\r\"}, {\"sha\": \"5060bfde3aad5687c0a962a8eddf86c0a83dded9\", \"filename\": \"tests/gd2/bug00354a.gd2\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354a.gd2\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354a.gd2\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Fbug00354a.gd2?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\"}, {\"sha\": \"8600126becb28c0962812c00fc6f2919b9f2ba80\", \"filename\": \"tests/gd2/bug00354b.gd2\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/libgd/libgd/blob/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354b.gd2\", \"raw_url\": \"https://github.com/libgd/libgd/raw/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6/tests%2Fgd2%2Fbug00354b.gd2\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgd2%2Fbug00354b.gd2?ref=69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZ2QvbGliZ2QvY29tbWl0cy9hOTNlYWMwZTg0MzE0OGRjMmQ2MzFjM2JhODBhZjE3ZTljOGM4NjBmIg==.json", "commit": "https://api.github.com/repos/libgd/libgd/commits/a93eac0e843148dc2d631c3ba80af17e9c8c860f", "content": "{\"sha\": \"a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"node_id\": \"MDY6Q29tbWl0Mjk2Njk3MTE6YTkzZWFjMGU4NDMxNDhkYzJkNjMxYzNiYTgwYWYxN2U5YzhjODYwZg==\", \"commit\": {\"author\": {\"name\": \"F\\u00e1bio Cabral Pacheco\", \"email\": \"fcabralpacheco@gmail.com\", \"date\": \"2019-12-20T15:03:33Z\"}, \"committer\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2019-12-20T16:19:54Z\"}, \"message\": \"Fix potential NULL pointer dereference in gdImageClone()\", \"tree\": {\"sha\": \"54076f5e402c659d12eaea9ba4b3616ad098392c\", \"url\": \"https://api.github.com/repos/libgd/libgd/git/trees/54076f5e402c659d12eaea9ba4b3616ad098392c\"}, \"url\": \"https://api.github.com/repos/libgd/libgd/git/commits/a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libgd/libgd/commits/a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"html_url\": \"https://github.com/libgd/libgd/commit/a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"comments_url\": \"https://api.github.com/repos/libgd/libgd/commits/a93eac0e843148dc2d631c3ba80af17e9c8c860f/comments\", \"author\": {\"login\": \"fcabralpacheco\", \"id\": 8125433, \"node_id\": \"MDQ6VXNlcjgxMjU0MzM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8125433?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fcabralpacheco\", \"html_url\": \"https://github.com/fcabralpacheco\", \"followers_url\": \"https://api.github.com/users/fcabralpacheco/followers\", \"following_url\": \"https://api.github.com/users/fcabralpacheco/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fcabralpacheco/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fcabralpacheco/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fcabralpacheco/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fcabralpacheco/orgs\", \"repos_url\": \"https://api.github.com/users/fcabralpacheco/repos\", \"events_url\": \"https://api.github.com/users/fcabralpacheco/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fcabralpacheco/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2e886046f86d0d6bfc14aab94a881259a081e3f4\", \"url\": \"https://api.github.com/repos/libgd/libgd/commits/2e886046f86d0d6bfc14aab94a881259a081e3f4\", \"html_url\": \"https://github.com/libgd/libgd/commit/2e886046f86d0d6bfc14aab94a881259a081e3f4\"}], \"stats\": {\"total\": 44, \"additions\": 35, \"deletions\": 9}, \"files\": [{\"sha\": \"d564d1f9602dc744b0cfbc4fb5a8571e8264f3a9\", \"filename\": \"src/gd.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 8, \"changes\": 9, \"blob_url\": \"https://github.com/libgd/libgd/blob/a93eac0e843148dc2d631c3ba80af17e9c8c860f/src%2Fgd.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/a93eac0e843148dc2d631c3ba80af17e9c8c860f/src%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/src%2Fgd.c?ref=a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"patch\": \"@@ -2865,14 +2865,6 @@ BGD_DECLARE(gdImagePtr) gdImageClone (gdImagePtr src) {\\n \\t\\t}\\n \\t}\\n \\n-\\tif (src->styleLength > 0) {\\n-\\t\\tdst->styleLength = src->styleLength;\\n-\\t\\tdst->stylePos    = src->stylePos;\\n-\\t\\tfor (i = 0; i < src->styleLength; i++) {\\n-\\t\\t\\tdst->style[i] = src->style[i];\\n-\\t\\t}\\n-\\t}\\n-\\n \\tdst->interlace   = src->interlace;\\n \\n \\tdst->alphaBlendingFlag = src->alphaBlendingFlag;\\n@@ -2907,6 +2899,7 @@ BGD_DECLARE(gdImagePtr) gdImageClone (gdImagePtr src) {\\n \\n \\tif (src->style) {\\n \\t\\tgdImageSetStyle(dst, src->style, src->styleLength);\\n+\\t\\tdst->stylePos = src->stylePos;\\n \\t}\\n \\n \\tfor (i = 0; i < gdMaxColors; i++) {\"}, {\"sha\": \"f4129cc7fde58fac122005430fa1fbe5e1ea5439\", \"filename\": \"tests/gdimageclone/.gitignore\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2F.gitignore\", \"raw_url\": \"https://github.com/libgd/libgd/raw/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimageclone%2F.gitignore?ref=a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"patch\": \"@@ -1 +1,2 @@\\n /bug00300\\n+/style\"}, {\"sha\": \"662f4e966a16d6803e471acf26583e7302d00781\", \"filename\": \"tests/gdimageclone/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libgd/libgd/blob/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/libgd/libgd/raw/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimageclone%2FCMakeLists.txt?ref=a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"patch\": \"@@ -1,5 +1,6 @@\\n LIST(APPEND TESTS_FILES\\n \\tbug00300\\n+\\tstyle\\n )\\n \\n ADD_GD_TESTS()\"}, {\"sha\": \"51abf5c1171e0b568e239915400f7bca1cdb79b2\", \"filename\": \"tests/gdimageclone/Makemodule.am\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/libgd/libgd/blob/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2FMakemodule.am\", \"raw_url\": \"https://github.com/libgd/libgd/raw/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2FMakemodule.am\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimageclone%2FMakemodule.am?ref=a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"patch\": \"@@ -1,5 +1,6 @@\\n libgd_test_programs += \\\\\\n-\\tgdimageclone/bug00300\\n+\\tgdimageclone/bug00300 \\\\\\n+\\tgdimageclone/style\\n \\n EXTRA_DIST += \\\\\\n \\tgdimageclone/CMakeLists.txt\"}, {\"sha\": \"c2b246ed705f7aeab10d80c1a2273a8fcda7c1b3\", \"filename\": \"tests/gdimageclone/style.c\", \"status\": \"added\", \"additions\": 30, \"deletions\": 0, \"changes\": 30, \"blob_url\": \"https://github.com/libgd/libgd/blob/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2Fstyle.c\", \"raw_url\": \"https://github.com/libgd/libgd/raw/a93eac0e843148dc2d631c3ba80af17e9c8c860f/tests%2Fgdimageclone%2Fstyle.c\", \"contents_url\": \"https://api.github.com/repos/libgd/libgd/contents/tests%2Fgdimageclone%2Fstyle.c?ref=a93eac0e843148dc2d631c3ba80af17e9c8c860f\", \"patch\": \"@@ -0,0 +1,30 @@\\n+/**\\n+ * Cloning an image should exactly reproduce all style related data\\n+ */\\n+\\n+\\n+#include <string.h>\\n+#include \\\"gd.h\\\"\\n+#include \\\"gdtest.h\\\"\\n+\\n+\\n+int main()\\n+{\\n+    gdImagePtr im, clone;\\n+    int style[] = {0, 0, 0};\\n+\\n+    im = gdImageCreate(8, 8);\\n+    gdImageSetStyle(im, style, sizeof(style)/sizeof(style[0]));\\n+\\n+    clone = gdImageClone(im);\\n+    gdTestAssert(clone != NULL);\\n+\\n+    gdTestAssert(clone->styleLength == im->styleLength);\\n+    gdTestAssert(clone->stylePos == im->stylePos);\\n+    gdTestAssert(!memcmp(clone->style, im->style, sizeof(style)/sizeof(style[0])));\\n+\\n+    gdImageDestroy(clone);\\n+    gdImageDestroy(im);\\n+\\n+    return gdNumFailures();\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvT3BlbklEQy9jam9zZS9jb21taXRzLzczMjVlOWE1ZTcxZTJmYzBlMzUwNDg3ZWNhYzdkODRhY2RmMGVkNWUi.json", "commit": "https://api.github.com/repos/OpenIDC/cjose/commits/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e", "content": "{\"sha\": \"7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"node_id\": \"C_kwDOCQFZMNoAKDczMjVlOWE1ZTcxZTJmYzBlMzUwNDg3ZWNhYzdkODRhY2RmMGVkNWU\", \"commit\": {\"author\": {\"name\": \"Hans Zandbelt\", \"email\": \"hans.zandbelt@openidc.com\", \"date\": \"2023-07-12T08:52:45Z\"}, \"committer\": {\"name\": \"Hans Zandbelt\", \"email\": \"hans.zandbelt@openidc.com\", \"date\": \"2023-07-12T08:52:45Z\"}, \"message\": \"use fixed authentication tag length of 16 octets in AES GCM decryption\\n\\nsee: https://github.com/cisco/cjose/issues/125\\n\\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>\", \"tree\": {\"sha\": \"6a7cb2d586b19efa52c53f5155ea10a41270569e\", \"url\": \"https://api.github.com/repos/OpenIDC/cjose/git/trees/6a7cb2d586b19efa52c53f5155ea10a41270569e\"}, \"url\": \"https://api.github.com/repos/OpenIDC/cjose/git/commits/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/OpenIDC/cjose/commits/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"html_url\": \"https://github.com/OpenIDC/cjose/commit/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"comments_url\": \"https://api.github.com/repos/OpenIDC/cjose/commits/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e/comments\", \"author\": {\"login\": \"zandbelt\", \"id\": 2339879, \"node_id\": \"MDQ6VXNlcjIzMzk4Nzk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2339879?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/zandbelt\", \"html_url\": \"https://github.com/zandbelt\", \"followers_url\": \"https://api.github.com/users/zandbelt/followers\", \"following_url\": \"https://api.github.com/users/zandbelt/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/zandbelt/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/zandbelt/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/zandbelt/subscriptions\", \"organizations_url\": \"https://api.github.com/users/zandbelt/orgs\", \"repos_url\": \"https://api.github.com/users/zandbelt/repos\", \"events_url\": \"https://api.github.com/users/zandbelt/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/zandbelt/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"zandbelt\", \"id\": 2339879, \"node_id\": \"MDQ6VXNlcjIzMzk4Nzk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2339879?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/zandbelt\", \"html_url\": \"https://github.com/zandbelt\", \"followers_url\": \"https://api.github.com/users/zandbelt/followers\", \"following_url\": \"https://api.github.com/users/zandbelt/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/zandbelt/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/zandbelt/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/zandbelt/subscriptions\", \"organizations_url\": \"https://api.github.com/users/zandbelt/orgs\", \"repos_url\": \"https://api.github.com/users/zandbelt/repos\", \"events_url\": \"https://api.github.com/users/zandbelt/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/zandbelt/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"96f8cb8d1630d76630010a535ba36aecfec8e9c6\", \"url\": \"https://api.github.com/repos/OpenIDC/cjose/commits/96f8cb8d1630d76630010a535ba36aecfec8e9c6\", \"html_url\": \"https://github.com/OpenIDC/cjose/commit/96f8cb8d1630d76630010a535ba36aecfec8e9c6\"}], \"stats\": {\"total\": 64, \"additions\": 64, \"deletions\": 0}, \"files\": [{\"sha\": \"c3938e7896751d1e64483c4641da755a3cdf4e17\", \"filename\": \"src/jwe.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/OpenIDC/cjose/blob/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e/src%2Fjwe.c\", \"raw_url\": \"https://github.com/OpenIDC/cjose/raw/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e/src%2Fjwe.c\", \"contents_url\": \"https://api.github.com/repos/OpenIDC/cjose/contents/src%2Fjwe.c?ref=7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"patch\": \"@@ -1286,6 +1286,12 @@ static bool _cjose_jwe_decrypt_dat_aes_gcm(cjose_jwe_t *jwe, cjose_err *err)\\n         goto _cjose_jwe_decrypt_dat_aes_gcm_fail;\\n     }\\n \\n+    if (jwe->enc_auth_tag.raw_len != 16)\\n+    {\\n+        CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);\\n+        goto _cjose_jwe_decrypt_dat_aes_gcm_fail;\\n+    }\\n+\\n     // set the expected GCM-mode authentication tag\\n     if (EVP_CIPHER_CTX_ctrl(ctx, CJOSE_EVP_CTRL_GCM_SET_TAG, jwe->enc_auth_tag.raw_len, jwe->enc_auth_tag.raw) != 1)\\n     {\"}, {\"sha\": \"39621b1be39fad4fbe5eeea322d077860165123f\", \"filename\": \"test/check_jwe.c\", \"status\": \"modified\", \"additions\": 58, \"deletions\": 0, \"changes\": 58, \"blob_url\": \"https://github.com/OpenIDC/cjose/blob/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e/test%2Fcheck_jwe.c\", \"raw_url\": \"https://github.com/OpenIDC/cjose/raw/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e/test%2Fcheck_jwe.c\", \"contents_url\": \"https://api.github.com/repos/OpenIDC/cjose/contents/test%2Fcheck_jwe.c?ref=7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e\", \"patch\": \"@@ -967,6 +967,63 @@ START_TEST(test_cjose_jwe_decrypt_aes)\\n }\\n END_TEST\\n \\n+START_TEST(test_cjose_jwe_decrypt_aes_gcm)\\n+{\\n+    cjose_err err;\\n+\\n+    const char *key = JWK_OCT_32;\\n+    const char *plain1 = \\\"Live long and prosper.\\\";\\n+    char *compact1 = \\\"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.GpeKGEqd8KQ0v6JNea5aSA\\\";\\n+    char *compact2 = \\\"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.Gp\\\";\\n+\\n+    cjose_jwk_t *jwk = cjose_jwk_import(key, strlen(key), &err);\\n+    ck_assert_msg(NULL != jwk,\\n+                  \\\"cjose_jwk_import failed: \\\"\\n+                  \\\"%s, file: %s, function: %s, line: %ld\\\",\\n+                  err.message, err.file, err.function, err.line);\\n+\\n+    cjose_jwe_t *jwe1 = cjose_jwe_import(compact1, strlen(compact1), &err);\\n+    ck_assert_msg(NULL != jwe1,\\n+                  \\\"cjose_jwe_import failed: \\\"\\n+                  \\\"%s, file: %s, function: %s, line: %ld\\\",\\n+                  err.message, err.file, err.function, err.line);\\n+\\n+    uint8_t *plain2 = NULL;\\n+    size_t plain2_len = 0;\\n+    plain2 = cjose_jwe_decrypt(jwe1, jwk, &plain2_len, &err);\\n+    ck_assert_msg(NULL != plain2,\\n+                  \\\"cjose_jwe_decrypt failed: \\\"\\n+                  \\\"%s, file: %s, function: %s, line: %ld\\\",\\n+                  err.message, err.file, err.function, err.line);\\n+\\n+    ck_assert_msg(plain2_len == strlen(plain1),\\n+                  \\\"length of decrypted plaintext does not match length of original, \\\"\\n+                  \\\"expected: %lu, found: %lu\\\",\\n+                  strlen(plain1), plain2_len);\\n+    ck_assert_msg(strncmp(plain1, plain2, plain2_len) == 0, \\\"decrypted plaintext does not match encrypted plaintext\\\");\\n+\\n+    cjose_get_dealloc()(plain2);\\n+    cjose_jwe_release(jwe1);\\n+\\n+    cjose_jwe_t *jwe2 = cjose_jwe_import(compact2, strlen(compact2), &err);\\n+    ck_assert_msg(NULL != jwe2,\\n+                   \\\"cjose_jwe_import failed: \\\"\\n+                   \\\"%s, file: %s, function: %s, line: %ld\\\",\\n+                   err.message, err.file, err.function, err.line);\\n+\\n+    uint8_t *plain3 = NULL;\\n+    size_t plain3_len = 0;\\n+    plain3 = cjose_jwe_decrypt(jwe2, jwk, &plain3_len, &err);\\n+    ck_assert_msg(NULL == plain3,\\n+                   \\\"cjose_jwe_decrypt succeeded where it should have failed: \\\"\\n+                   \\\"%s, file: %s, function: %s, line: %ld\\\",\\n+                   err.message, err.file, err.function, err.line);\\n+\\n+    cjose_jwe_release(jwe2);\\n+    cjose_jwk_release(jwk);\\n+}\\n+END_TEST\\n+\\n START_TEST(test_cjose_jwe_decrypt_rsa)\\n {\\n     struct cjose_jwe_decrypt_rsa\\n@@ -1373,6 +1430,7 @@ Suite *cjose_jwe_suite()\\n     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_large);\\n     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_many);\\n     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes);\\n+    tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes_gcm);\\n     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_rsa);\\n     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_header);\\n     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_key);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy8yOGE2ZWQ5ZjlhMzZiOWM1MTdlNGE4YTQyOWJhZjRkZDM4MmZjNWQ1Ig==.json", "commit": "https://api.github.com/repos/php/php-src/commits/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5", "content": "{\"sha\": \"28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjoyOGE2ZWQ5ZjlhMzZiOWM1MTdlNGE4YTQyOWJhZjRkZDM4MmZjNWQ1\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-03-21T05:29:08Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-03-21T05:29:08Z\"}, \"message\": \"Fix bug #71735: Double-free in SplDoublyLinkedList::offsetSet\", \"tree\": {\"sha\": \"42f27663acbe7652ec8a5bd5dbcd5453dd3c2571\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/42f27663acbe7652ec8a5bd5dbcd5453dd3c2571\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"html_url\": \"https://github.com/php/php-src/commit/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f3309173f916e3c5cf37910975f04310706336b5\", \"url\": \"https://api.github.com/repos/php/php-src/commits/f3309173f916e3c5cf37910975f04310706336b5\", \"html_url\": \"https://github.com/php/php-src/commit/f3309173f916e3c5cf37910975f04310706336b5\"}], \"stats\": {\"total\": 17, \"additions\": 16, \"deletions\": 1}, \"files\": [{\"sha\": \"fc6a40b806e144a1475dae8e12633af7e780c7ad\", \"filename\": \"NEWS\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/php/php-src/blob/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/NEWS\", \"raw_url\": \"https://github.com/php/php-src/raw/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/NEWS\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/NEWS?ref=28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"patch\": \"@@ -30,6 +30,7 @@ PHP                                                                        NEWS\\n   . Fixed bug #52339 (SPL autoloader breaks class_exists()). (Nikita)\\n   . Fixed bug #67582 (Cloned SplObjectStorage with overwritten getHash fails\\n     offsetExists()). (Nikita)\\n+  . Fixed bug #71735 (Double-free in SplDoublyLinkedList::offsetSet). (Stas)\\n \\n - Standard:\\n   . Fixed bug #71837 (Wrong arrays behaviour). (Laruence)\"}, {\"sha\": \"1675c7eaf3a1d5b0a960512c7dd751a2f1d65a09\", \"filename\": \"ext/spl/spl_dllist.c\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 1, \"changes\": 1, \"blob_url\": \"https://github.com/php/php-src/blob/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/ext%2Fspl%2Fspl_dllist.c\", \"raw_url\": \"https://github.com/php/php-src/raw/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/ext%2Fspl%2Fspl_dllist.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fspl%2Fspl_dllist.c?ref=28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"patch\": \"@@ -830,7 +830,6 @@ SPL_METHOD(SplDoublyLinkedList, offsetSet)\\n \\t\\tindex = spl_offset_convert_to_long(zindex);\\n \\n \\t\\tif (index < 0 || index >= intern->llist->count) {\\n-\\t\\t\\tzval_ptr_dtor(value);\\n \\t\\t\\tzend_throw_exception(spl_ce_OutOfRangeException, \\\"Offset invalid or out of range\\\", 0);\\n \\t\\t\\treturn;\\n \\t\\t}\"}, {\"sha\": \"92568028c4ae200c6c6e4a679c6d43c211912a04\", \"filename\": \"ext/spl/tests/bug71735.phpt\", \"status\": \"added\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/php/php-src/blob/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/ext%2Fspl%2Ftests%2Fbug71735.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5/ext%2Fspl%2Ftests%2Fbug71735.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fspl%2Ftests%2Fbug71735.phpt?ref=28a6ed9f9a36b9c517e4a8a429baf4dd382fc5d5\", \"patch\": \"@@ -0,0 +1,15 @@\\n+--TEST--\\n+Bug #71735 (Double-free in SplDoublyLinkedList::offsetSet)\\n+--FILE--\\n+<?php\\n+try {\\n+$var_1=new SplStack();\\n+$var_1->offsetSet(100,new DateTime('2000-01-01'));\\n+} catch(OutOfRangeException $e) {\\n+\\tprint $e->getMessage().\\\"\\\\n\\\";\\n+}\\n+?>\\n+===DONE===\\n+--EXPECT--\\n+Offset invalid or out of range\\n+===DONE===\\n\\\\ No newline at end of file\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9hYmQxNTljY2U0OGYzZTM0ZjA4ZTQ3NTFjNTY4ZTA5Njc3ZDVlYzljIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/abd159cce48f3e34f08e4751c568e09677d5ec9c", "content": "{\"sha\": \"abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjphYmQxNTljY2U0OGYzZTM0ZjA4ZTQ3NTFjNTY4ZTA5Njc3ZDVlYzlj\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-05-10T04:55:29Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-05-10T04:55:29Z\"}, \"message\": \"Fix bug #72114 - int/size_t confusion in fread\", \"tree\": {\"sha\": \"d1e85639144aab8e3d315c21fe5ad262401acfea\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/d1e85639144aab8e3d315c21fe5ad262401acfea\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"html_url\": \"https://github.com/php/php-src/commit/abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/abd159cce48f3e34f08e4751c568e09677d5ec9c/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"95ed19ae28009aa7b3ed42d5760478de82640560\", \"url\": \"https://api.github.com/repos/php/php-src/commits/95ed19ae28009aa7b3ed42d5760478de82640560\", \"html_url\": \"https://github.com/php/php-src/commit/95ed19ae28009aa7b3ed42d5760478de82640560\"}], \"stats\": {\"total\": 18, \"additions\": 18, \"deletions\": 0}, \"files\": [{\"sha\": \"e39c84f1cd41e536a35b5069f74443d66bae87b5\", \"filename\": \"ext/standard/file.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/php/php-src/blob/abd159cce48f3e34f08e4751c568e09677d5ec9c/ext%2Fstandard%2Ffile.c\", \"raw_url\": \"https://github.com/php/php-src/raw/abd159cce48f3e34f08e4751c568e09677d5ec9c/ext%2Fstandard%2Ffile.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Ffile.c?ref=abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"patch\": \"@@ -1758,6 +1758,12 @@ PHPAPI PHP_FUNCTION(fread)\\n \\t\\tRETURN_FALSE;\\n \\t}\\n \\n+\\tif (len > INT_MAX) {\\n+\\t\\t/* string length is int in 5.x so we can not read more than int */\\n+\\t\\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \\\"Length parameter must be no more than %d\\\", INT_MAX);\\n+\\t\\tRETURN_FALSE;\\n+\\t}\\n+\\n \\tZ_STRVAL_P(return_value) = emalloc(len + 1);\\n \\tZ_STRLEN_P(return_value) = php_stream_read(stream, Z_STRVAL_P(return_value), len);\\n \"}, {\"sha\": \"5e591ee478e83c1a7b7b856298c7130d25d5df63\", \"filename\": \"ext/standard/tests/file/bug72114.phpt\", \"status\": \"added\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/php/php-src/blob/abd159cce48f3e34f08e4751c568e09677d5ec9c/ext%2Fstandard%2Ftests%2Ffile%2Fbug72114.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/abd159cce48f3e34f08e4751c568e09677d5ec9c/ext%2Fstandard%2Ftests%2Ffile%2Fbug72114.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Ftests%2Ffile%2Fbug72114.phpt?ref=abd159cce48f3e34f08e4751c568e09677d5ec9c\", \"patch\": \"@@ -0,0 +1,12 @@\\n+--TEST--\\n+Bug #72114 (Integer underflow / arbitrary null write in fread/gzread)\\n+--FILE--\\n+<?php\\n+ini_set('memory_limit', \\\"2500M\\\");\\n+$fp = fopen(\\\"/dev/zero\\\", \\\"r\\\");\\n+fread($fp, 2147483648);\\n+?>\\n+Done\\n+--EXPECTF--\\n+Warning: fread(): Length parameter must be no more than 2147483647 in %s/bug72114.php on line %d\\n+Done\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9hNDRjODllOGFmN2MyNDEwZjRiZmM1ZTA5N2JlMmE1ZDA2MzlhNjBjIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c", "content": "{\"sha\": \"a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjphNDRjODllOGFmN2MyNDEwZjRiZmM1ZTA5N2JlMmE1ZDA2MzlhNjBj\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-06-13T06:18:23Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-06-13T06:18:23Z\"}, \"message\": \"Fix bug #72340: Double Free Courruption in wddx_deserialize\", \"tree\": {\"sha\": \"7c28d484f3a57560e7383e56fa02e8dc3908f65c\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/7c28d484f3a57560e7383e56fa02e8dc3908f65c\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"html_url\": \"https://github.com/php/php-src/commit/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4dd03651f3c90a754600e9b76e33c9481bd9e720\", \"url\": \"https://api.github.com/repos/php/php-src/commits/4dd03651f3c90a754600e9b76e33c9481bd9e720\", \"html_url\": \"https://github.com/php/php-src/commit/4dd03651f3c90a754600e9b76e33c9481bd9e720\"}], \"stats\": {\"total\": 28, \"additions\": 28, \"deletions\": 0}, \"files\": [{\"sha\": \"8d694ca52e761a32d7190bb93e203f97240a38ce\", \"filename\": \"ext/wddx/tests/bug72340.phpt\", \"status\": \"added\", \"additions\": 24, \"deletions\": 0, \"changes\": 24, \"blob_url\": \"https://github.com/php/php-src/blob/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c/ext%2Fwddx%2Ftests%2Fbug72340.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c/ext%2Fwddx%2Ftests%2Fbug72340.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Ftests%2Fbug72340.phpt?ref=a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"patch\": \"@@ -0,0 +1,24 @@\\n+--TEST--\\n+Bug #72340: Double Free Courruption in wddx_deserialize\\n+--SKIPIF--\\n+<?php\\n+if (!extension_loaded(\\\"wddx\\\")) print \\\"skip\\\";\\n+?>\\n+--FILE--\\n+<?php\\n+$xml = <<<EOF\\n+<?xml version='1.0' ?>\\n+<!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>\\n+<wddxPacket version='1.0'>\\n+\\t<array><var name=\\\"XXXXXXXX\\\"><boolean value=\\\"none\\\">TEST</boolean></var>\\n+\\t\\t<var name=\\\"YYYYYYYY\\\"><var name=\\\"ZZZZZZZZ\\\"><var name=\\\"EZEZEZEZ\\\">\\n+\\t\\t</var></var></var>\\n+\\t</array>\\n+</wddxPacket>\\n+EOF;\\n+$array = wddx_deserialize($xml);\\n+var_dump($array);\\n+?>\\n+--EXPECT--\\n+array(0) {\\n+}\"}, {\"sha\": \"311d6aa4a567f1e04462413300342a86b5436c6c\", \"filename\": \"ext/wddx/wddx.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/php/php-src/blob/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c/ext%2Fwddx%2Fwddx.c\", \"raw_url\": \"https://github.com/php/php-src/raw/a44c89e8af7c2410f4bfc5e097be2a5d0639a60c/ext%2Fwddx%2Fwddx.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Fwddx.c?ref=a44c89e8af7c2410f4bfc5e097be2a5d0639a60c\", \"patch\": \"@@ -1096,6 +1096,9 @@ static void php_wddx_process_data(void *user_data, const XML_Char *s, int len)\\n \\t\\t\\t\\tbreak;\\n \\n \\t\\t\\tcase ST_BOOLEAN:\\n+\\t\\t\\t\\tif(!ent->data) {\\n+\\t\\t\\t\\t\\tbreak;\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\tif (!strcmp(s, \\\"true\\\")) {\\n \\t\\t\\t\\t\\tZ_LVAL_P(ent->data) = 1;\\n \\t\\t\\t\\t} else if (!strcmp(s, \\\"false\\\")) {\\n@@ -1104,6 +1107,7 @@ static void php_wddx_process_data(void *user_data, const XML_Char *s, int len)\\n \\t\\t\\t\\t\\tzval_ptr_dtor(&ent->data);\\n \\t\\t\\t\\t\\tif (ent->varname) {\\n \\t\\t\\t\\t\\t\\tefree(ent->varname);\\n+\\t\\t\\t\\t\\t\\tent->varname = NULL;\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\tent->data = NULL;\\n \\t\\t\\t\\t}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy83NzIyNDU1NzI2YmVjOGM1MzQ1OGEzMjg1MWQyYTg3OTgyY2YwZWFjIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/7722455726bec8c53458a32851d2a87982cf0eac", "content": "{\"sha\": \"7722455726bec8c53458a32851d2a87982cf0eac\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo3NzIyNDU1NzI2YmVjOGM1MzQ1OGEzMjg1MWQyYTg3OTgyY2YwZWFj\", \"commit\": {\"author\": {\"name\": \"Pierre Joye\", \"email\": \"pajoye@php.net\", \"date\": \"2016-06-18T18:15:10Z\"}, \"committer\": {\"name\": \"Anatol Belski\", \"email\": \"ab@php.net\", \"date\": \"2016-06-18T18:15:10Z\"}, \"message\": \"Fixed #72339 Integer Overflow in _gd2GetHeader() resulting in heap overflow\", \"tree\": {\"sha\": \"ee528525b6caf01315a0cdbe5c57f3576ad4454e\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/ee528525b6caf01315a0cdbe5c57f3576ad4454e\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/7722455726bec8c53458a32851d2a87982cf0eac\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/7722455726bec8c53458a32851d2a87982cf0eac\", \"html_url\": \"https://github.com/php/php-src/commit/7722455726bec8c53458a32851d2a87982cf0eac\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/7722455726bec8c53458a32851d2a87982cf0eac/comments\", \"author\": {\"login\": \"pierrejoye\", \"id\": 282408, \"node_id\": \"MDQ6VXNlcjI4MjQwOA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/282408?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pierrejoye\", \"html_url\": \"https://github.com/pierrejoye\", \"followers_url\": \"https://api.github.com/users/pierrejoye/followers\", \"following_url\": \"https://api.github.com/users/pierrejoye/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pierrejoye/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pierrejoye/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pierrejoye/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pierrejoye/orgs\", \"repos_url\": \"https://api.github.com/users/pierrejoye/repos\", \"events_url\": \"https://api.github.com/users/pierrejoye/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pierrejoye/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"weltling\", \"id\": 22016, \"node_id\": \"MDQ6VXNlcjIyMDE2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22016?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/weltling\", \"html_url\": \"https://github.com/weltling\", \"followers_url\": \"https://api.github.com/users/weltling/followers\", \"following_url\": \"https://api.github.com/users/weltling/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/weltling/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/weltling/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/weltling/subscriptions\", \"organizations_url\": \"https://api.github.com/users/weltling/orgs\", \"repos_url\": \"https://api.github.com/users/weltling/repos\", \"events_url\": \"https://api.github.com/users/weltling/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/weltling/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7245bff300d3fa8bacbef7897ff080a6f1c23eba\", \"url\": \"https://api.github.com/repos/php/php-src/commits/7245bff300d3fa8bacbef7897ff080a6f1c23eba\", \"html_url\": \"https://github.com/php/php-src/commit/7245bff300d3fa8bacbef7897ff080a6f1c23eba\"}], \"stats\": {\"total\": 18, \"additions\": 18, \"deletions\": 0}, \"files\": [{\"sha\": \"63e3aefc3f16819c7e72f1b65f273174dda79bbe\", \"filename\": \"ext/gd/libgd/gd_gd2.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/php/php-src/blob/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Flibgd%2Fgd_gd2.c\", \"raw_url\": \"https://github.com/php/php-src/raw/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Flibgd%2Fgd_gd2.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Flibgd%2Fgd_gd2.c?ref=7722455726bec8c53458a32851d2a87982cf0eac\", \"patch\": \"@@ -138,11 +138,18 @@ static int _gd2GetHeader(gdIOCtxPtr in, int *sx, int *sy, int *cs, int *vers, in\\n \\tif (gd2_compressed(*fmt)) {\\n \\t\\tnc = (*ncx) * (*ncy);\\n \\t\\tGD2_DBG(php_gd_error(\\\"Reading %d chunk index entries\\\", nc));\\n+\\t\\tif (overflow2(sidx, nc)) {\\n+\\t\\t\\tgoto fail1;\\n+\\t\\t}\\n \\t\\tsidx = sizeof(t_chunk_info) * nc;\\n \\t\\tif (sidx <= 0) {\\n \\t\\t\\tgoto fail1;\\n \\t\\t}\\n \\t\\tcidx = gdCalloc(sidx, 1);\\n+\\t\\tif (cidx == NULL) {\\n+\\t\\t\\tgoto fail1;\\n+\\t\\t}\\n+\\n \\t\\tfor (i = 0; i < nc; i++) {\\n \\t\\t\\tif (gdGetInt(&cidx[i].offset, in) != 1) {\\n \\t\\t\\t\\tgdFree(cidx);\"}, {\"sha\": \"0634c990050f339dbbdd50cc748a027b344b6ddd\", \"filename\": \"ext/gd/tests/bug72339.gd\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/php/php-src/blob/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Ftests%2Fbug72339.gd\", \"raw_url\": \"https://github.com/php/php-src/raw/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Ftests%2Fbug72339.gd\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Ftests%2Fbug72339.gd?ref=7722455726bec8c53458a32851d2a87982cf0eac\"}, {\"sha\": \"763ae71000a681eb0a67056906b2b623c0fb1114\", \"filename\": \"ext/gd/tests/bug72339.phpt\", \"status\": \"added\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/php/php-src/blob/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Ftests%2Fbug72339.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/7722455726bec8c53458a32851d2a87982cf0eac/ext%2Fgd%2Ftests%2Fbug72339.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Ftests%2Fbug72339.phpt?ref=7722455726bec8c53458a32851d2a87982cf0eac\", \"patch\": \"@@ -0,0 +1,11 @@\\n+--TEST--\\n+Bug #72339 Integer Overflow in _gd2GetHeader() resulting in heap overflow \\n+--SKIPIF--\\n+<?php if (!function_exists(\\\"imagecreatefromgd2\\\")) print \\\"skip\\\"; ?>\\n+--FILE--\\n+<?php imagecreatefromgd2(dirname(__FILE__) . DIRECTORY_SEPARATOR . \\\"bug72339.gd\\\"); ?>\\n+--EXPECTF--\\t\\n+Warning: imagecreatefromgd2(): gd warning: product of memory allocation multiplication would exceed INT_MAX, failing operation gracefully\\n+ in %sbug72339.php on line %d\\n+\\n+Warning: imagecreatefromgd2(): '%sbug72339.gd' is not a valid GD2 file in %sbug72339.php on line %d\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy80MjZhZWIyODA4OTU1ZWUzZDNmNTJlMGNmYjEwMjgzNGNkYjgzNmE1Ig==.json", "commit": "https://api.github.com/repos/php/php-src/commits/426aeb2808955ee3d3f52e0cfb102834cdb836a5", "content": "{\"sha\": \"426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo0MjZhZWIyODA4OTU1ZWUzZDNmNTJlMGNmYjEwMjgzNGNkYjgzNmE1\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-04T07:17:42Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-17T05:55:19Z\"}, \"message\": \"Fix bug #72749: wddx_deserialize allows illegal memory access\", \"tree\": {\"sha\": \"9028b8c39f9584cee6b0c3f7f5dabcd0f1f3dee2\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/9028b8c39f9584cee6b0c3f7f5dabcd0f1f3dee2\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"html_url\": \"https://github.com/php/php-src/commit/426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/426aeb2808955ee3d3f52e0cfb102834cdb836a5/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f1a0b7d690a2e89e27ccf58c19fc64fb446015b9\", \"url\": \"https://api.github.com/repos/php/php-src/commits/f1a0b7d690a2e89e27ccf58c19fc64fb446015b9\", \"html_url\": \"https://github.com/php/php-src/commit/f1a0b7d690a2e89e27ccf58c19fc64fb446015b9\"}], \"stats\": {\"total\": 54, \"additions\": 48, \"deletions\": 6}, \"files\": [{\"sha\": \"ee17d0f2295670dd9065033ae694ee48f1e4c3fe\", \"filename\": \"ext/wddx/tests/bug72749.phpt\", \"status\": \"added\", \"additions\": 34, \"deletions\": 0, \"changes\": 34, \"blob_url\": \"https://github.com/php/php-src/blob/426aeb2808955ee3d3f52e0cfb102834cdb836a5/ext%2Fwddx%2Ftests%2Fbug72749.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/426aeb2808955ee3d3f52e0cfb102834cdb836a5/ext%2Fwddx%2Ftests%2Fbug72749.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Ftests%2Fbug72749.phpt?ref=426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"patch\": \"@@ -0,0 +1,34 @@\\n+--TEST--\\n+Bug #72749: wddx_deserialize allows illegal memory access\\n+--SKIPIF--\\n+<?php\\n+if (!extension_loaded('wddx')) {\\n+    die('skip. wddx not available');\\n+}\\n+?>\\n+--FILE--\\n+<?php\\n+$xml = <<<XML\\n+<?xml version='1.0'?>\\n+<!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>\\n+<wddxPacket version='1.0'>\\n+<header/>\\n+        <data>\\n+                <struct>\\n+                     <var name='aDateTime3'>\\n+                         <dateTime>2\\\\r2004-09-10T05:52:49+00</dateTime>\\n+                     </var>\\n+                 </struct>\\n+        </data>\\n+</wddxPacket>\\n+XML;\\n+\\n+$array = wddx_deserialize($xml);\\n+var_dump($array);\\n+?>\\n+--EXPECT--\\n+array(1) {\\n+  [\\\"aDateTime3\\\"]=>\\n+  string(24) \\\"2\\n+2004-09-10T05:52:49+00\\\"\\n+}\"}, {\"sha\": \"faadbfe1dfe3dcb13302b5c165cc98fb99b4c7e5\", \"filename\": \"ext/wddx/wddx.c\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 6, \"changes\": 20, \"blob_url\": \"https://github.com/php/php-src/blob/426aeb2808955ee3d3f52e0cfb102834cdb836a5/ext%2Fwddx%2Fwddx.c\", \"raw_url\": \"https://github.com/php/php-src/raw/426aeb2808955ee3d3f52e0cfb102834cdb836a5/ext%2Fwddx%2Fwddx.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Fwddx.c?ref=426aeb2808955ee3d3f52e0cfb102834cdb836a5\", \"patch\": \"@@ -1123,18 +1123,26 @@ static void php_wddx_process_data(void *user_data, const XML_Char *s, int len)\\n \\t\\t\\tcase ST_DATETIME: {\\n \\t\\t\\t\\tchar *tmp;\\n \\n-\\t\\t\\t\\ttmp = emalloc(len + 1);\\n-\\t\\t\\t\\tmemcpy(tmp, s, len);\\n+\\t\\t\\t\\tif (Z_TYPE_P(ent->data) == IS_STRING) {\\n+\\t\\t\\t\\t\\ttmp = safe_emalloc(Z_STRLEN_P(ent->data), 1, (size_t)len + 1);\\n+\\t\\t\\t\\t\\tmemcpy(tmp, Z_STRVAL_P(ent->data), Z_STRLEN_P(ent->data));\\n+\\t\\t\\t\\t\\tmemcpy(tmp + Z_STRLEN_P(ent->data), s, len);\\n+\\t\\t\\t\\t\\tlen += Z_STRLEN_P(ent->data);\\n+\\t\\t\\t\\t\\tefree(Z_STRVAL_P(ent->data));\\n+\\t\\t\\t\\t\\tZ_TYPE_P(ent->data) = IS_LONG;\\n+\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\ttmp = emalloc(len + 1);\\n+\\t\\t\\t\\t\\tmemcpy(tmp, s, len);\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\ttmp[len] = '\\\\0';\\n \\n \\t\\t\\t\\tZ_LVAL_P(ent->data) = php_parse_date(tmp, NULL);\\n \\t\\t\\t\\t/* date out of range < 1969 or > 2038 */\\n \\t\\t\\t\\tif (Z_LVAL_P(ent->data) == -1) {\\n-\\t\\t\\t\\t\\tZ_TYPE_P(ent->data) = IS_STRING;\\n-\\t\\t\\t\\t\\tZ_STRLEN_P(ent->data) = len;\\n-\\t\\t\\t\\t\\tZ_STRVAL_P(ent->data) = estrndup(s, len);\\n+\\t\\t\\t\\t\\tZVAL_STRINGL(ent->data, tmp, len, 0);\\n+\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\tefree(tmp);\\n \\t\\t\\t\\t}\\n-\\t\\t\\t\\tefree(tmp);\\n \\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy82OThhNjkxNzI0YzBhOTQ5Mjk1OTkxZTVkZjA5MWNlMTZmODk5ZTAyIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/698a691724c0a949295991e5df091ce16f899e02", "content": "{\"sha\": \"698a691724c0a949295991e5df091ce16f899e02\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo2OThhNjkxNzI0YzBhOTQ5Mjk1OTkxZTVkZjA5MWNlMTZmODk5ZTAy\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-07T23:26:52Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-17T05:55:39Z\"}, \"message\": \"Fix bug #72750: wddx_deserialize null dereference\", \"tree\": {\"sha\": \"ac4662660ad682c7214d49f31038c2f34e5bc223\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/ac4662660ad682c7214d49f31038c2f34e5bc223\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/698a691724c0a949295991e5df091ce16f899e02\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/698a691724c0a949295991e5df091ce16f899e02\", \"html_url\": \"https://github.com/php/php-src/commit/698a691724c0a949295991e5df091ce16f899e02\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/698a691724c0a949295991e5df091ce16f899e02/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e018ff094f8505ea77f881ba11176e3ad0b4863e\", \"url\": \"https://api.github.com/repos/php/php-src/commits/e018ff094f8505ea77f881ba11176e3ad0b4863e\", \"html_url\": \"https://github.com/php/php-src/commit/e018ff094f8505ea77f881ba11176e3ad0b4863e\"}], \"stats\": {\"total\": 42, \"additions\": 40, \"deletions\": 2}, \"files\": [{\"sha\": \"3a6794df2803f71de7d23d16d261167db16ac095\", \"filename\": \"ext/wddx/tests/bug72750.phpt\", \"status\": \"added\", \"additions\": 34, \"deletions\": 0, \"changes\": 34, \"blob_url\": \"https://github.com/php/php-src/blob/698a691724c0a949295991e5df091ce16f899e02/ext%2Fwddx%2Ftests%2Fbug72750.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/698a691724c0a949295991e5df091ce16f899e02/ext%2Fwddx%2Ftests%2Fbug72750.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Ftests%2Fbug72750.phpt?ref=698a691724c0a949295991e5df091ce16f899e02\", \"patch\": \"@@ -0,0 +1,34 @@\\n+--TEST--\\n+Bug #72750: wddx_deserialize null dereference\\n+--SKIPIF--\\n+<?php\\n+if (!extension_loaded('wddx')) {\\n+    die('skip. wddx not available');\\n+}\\n+?>\\n+--FILE--\\n+<?php\\n+\\n+$xml = <<< XML\\n+<?xml version='1.0'?>\\n+<!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>\\n+<wddxPacket version='1.0'>\\n+<header/>\\n+        <data>\\n+                <struct>\\n+                     <var name='aBinary'>\\n+                         <binary length='11'>\\\\\\\\tYmluYXJRhdGE=</binary>\\n+                     </var>\\n+                 </struct>\\n+        </data>\\n+</wddxPacket>\\n+XML;\\n+\\n+$array = wddx_deserialize($xml);\\n+var_dump($array);\\n+?>\\n+--EXPECT--\\n+array(1) {\\n+  [\\\"aBinary\\\"]=>\\n+  string(0) \\\"\\\"\\n+}\"}, {\"sha\": \"1b2d103af18e3a7f12e38c1894659432ac9fc7e4\", \"filename\": \"ext/wddx/wddx.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/php/php-src/blob/698a691724c0a949295991e5df091ce16f899e02/ext%2Fwddx%2Fwddx.c\", \"raw_url\": \"https://github.com/php/php-src/raw/698a691724c0a949295991e5df091ce16f899e02/ext%2Fwddx%2Fwddx.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Fwddx.c?ref=698a691724c0a949295991e5df091ce16f899e02\", \"patch\": \"@@ -959,8 +959,12 @@ static void php_wddx_pop_element(void *user_data, const XML_Char *name)\\n \\n \\t\\t\\tnew_str = php_base64_decode(Z_STRVAL_P(ent1->data), Z_STRLEN_P(ent1->data), &new_len);\\n \\t\\t\\tSTR_FREE(Z_STRVAL_P(ent1->data));\\n-\\t\\t\\tZ_STRVAL_P(ent1->data) = new_str;\\n-\\t\\t\\tZ_STRLEN_P(ent1->data) = new_len;\\n+\\t\\t\\tif (new_str) {\\n+\\t\\t\\t\\tZ_STRVAL_P(ent1->data) = new_str;\\n+\\t\\t\\t\\tZ_STRLEN_P(ent1->data) = new_len;\\n+\\t\\t\\t} else {\\n+\\t\\t\\t\\tZVAL_EMPTY_STRING(ent1->data);\\n+\\t\\t\\t}\\n \\t\\t}\\n \\n \\t\\t/* Call __wakeup() method on the object. */\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy82ZGJiMWVlNDZiNWY0NzI1Y2M2NTE5YWJmOTFlNTEyYTJhMTBkZmVkIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed", "content": "{\"sha\": \"6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo2ZGJiMWVlNDZiNWY0NzI1Y2M2NTE5YWJmOTFlNTEyYTJhMTBkZmVk\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-08T07:49:34Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-17T05:55:40Z\"}, \"message\": \"Fixed bug #72627: Memory Leakage In exif_process_IFD_in_TIFF\", \"tree\": {\"sha\": \"e0898303087987d9bb29617d75037367d2684e2f\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/e0898303087987d9bb29617d75037367d2684e2f\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"html_url\": \"https://github.com/php/php-src/commit/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"698a691724c0a949295991e5df091ce16f899e02\", \"url\": \"https://api.github.com/repos/php/php-src/commits/698a691724c0a949295991e5df091ce16f899e02\", \"html_url\": \"https://github.com/php/php-src/commit/698a691724c0a949295991e5df091ce16f899e02\"}], \"stats\": {\"total\": 76, \"additions\": 75, \"deletions\": 1}, \"files\": [{\"sha\": \"657a2cc1f26ea75651108ab93b352771f6690ffe\", \"filename\": \"ext/exif/exif.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/php/php-src/blob/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Fexif.c\", \"raw_url\": \"https://github.com/php/php-src/raw/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Fexif.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Fexif.c?ref=6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"patch\": \"@@ -3768,8 +3768,11 @@ static int exif_process_IFD_in_TIFF(image_info_type *ImageInfo, size_t dir_offse\\n \\t\\t\\t\\t\\t\\tfgot = php_stream_read(ImageInfo->infile, ImageInfo->Thumbnail.data, ImageInfo->Thumbnail.size);\\n \\t\\t\\t\\t\\t\\tif (fgot < ImageInfo->Thumbnail.size) {\\n \\t\\t\\t\\t\\t\\t\\tEXIF_ERRLOG_THUMBEOF(ImageInfo)\\n+\\t\\t\\t\\t\\t\\t\\tefree(ImageInfo->Thumbnail.data);\\n+\\t\\t\\t\\t\\t\\t\\tImageInfo->Thumbnail.data = NULL;\\n+\\t\\t\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\t\\t\\texif_thumbnail_build(ImageInfo TSRMLS_CC);\\n \\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\texif_thumbnail_build(ImageInfo TSRMLS_CC);\\n \\t\\t\\t\\t\\t}\\n #ifdef EXIF_DEBUG\\n \\t\\t\\t\\t\\texif_error_docref(NULL EXIFERR_CC, ImageInfo, E_NOTICE, \\\"Read next IFD (THUMBNAIL) done\\\");\"}, {\"sha\": \"bb6a1fae99a1844e0de7ac71178e0514f2e5df21\", \"filename\": \"ext/exif/tests/bug72627.phpt\", \"status\": \"added\", \"additions\": 71, \"deletions\": 0, \"changes\": 71, \"blob_url\": \"https://github.com/php/php-src/blob/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Ftests%2Fbug72627.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Ftests%2Fbug72627.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Ftests%2Fbug72627.phpt?ref=6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\", \"patch\": \"@@ -0,0 +1,71 @@\\n+--TEST--\\n+Bug #72627 (Memory Leakage In exif_process_IFD_in_TIFF)\\n+--SKIPIF--\\n+<?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>\\n+--FILE--\\n+<?php\\n+\\t$exif = exif_read_data(__DIR__ . '/bug72627.tiff',0,0,true);\\n+\\tvar_dump($exif);\\n+?>\\n+--EXPECTF--\\n+Warning: exif_read_data(%s): Thumbnail goes IFD boundary or end of file reached in %sbug72627.php on line %d\\n+\\n+Warning: exif_read_data(%s): Error in TIFF: filesize(x04E2) less than start of IFD dir(x829A0004) in %sbug72627.php on line %d\\n+\\n+Warning: exif_read_data(%s): Thumbnail goes IFD boundary or end of file reached in %sbug72627.php on line %d\\n+array(11) {\\n+  [\\\"FileName\\\"]=>\\n+  string(13) \\\"bug72627.tiff\\\"\\n+  [\\\"FileDateTime\\\"]=>\\n+  int(%d)\\n+  [\\\"FileSize\\\"]=>\\n+  int(1250)\\n+  [\\\"FileType\\\"]=>\\n+  int(7)\\n+  [\\\"MimeType\\\"]=>\\n+  string(10) \\\"image/tiff\\\"\\n+  [\\\"SectionsFound\\\"]=>\\n+  string(30) \\\"ANY_TAG, IFD0, THUMBNAIL, EXIF\\\"\\n+  [\\\"COMPUTED\\\"]=>\\n+  array(10) {\\n+    [\\\"html\\\"]=>\\n+    string(24) \\\"width=\\\"128\\\" height=\\\"132\\\"\\\"\\n+    [\\\"Height\\\"]=>\\n+    int(132)\\n+    [\\\"Width\\\"]=>\\n+    int(128)\\n+    [\\\"IsColor\\\"]=>\\n+    int(0)\\n+    [\\\"ByteOrderMotorola\\\"]=>\\n+    int(0)\\n+    [\\\"ApertureFNumber\\\"]=>\\n+    string(5) \\\"f/1.0\\\"\\n+    [\\\"Thumbnail.FileType\\\"]=>\\n+    int(2)\\n+    [\\\"Thumbnail.MimeType\\\"]=>\\n+    string(10) \\\"image/jpeg\\\"\\n+    [\\\"Thumbnail.Height\\\"]=>\\n+    int(132)\\n+    [\\\"Thumbnail.Width\\\"]=>\\n+    int(128)\\n+  }\\n+  [\\\"XResolution\\\"]=>\\n+  string(21) \\\"1414812756/1414812756\\\"\\n+  [\\\"THUMBNAIL\\\"]=>\\n+  array(5) {\\n+    [\\\"ImageWidth\\\"]=>\\n+    int(128)\\n+    [\\\"ImageLength\\\"]=>\\n+    int(132)\\n+    [\\\"JPEGInterchangeFormat\\\"]=>\\n+    int(1280)\\n+    [\\\"JPEGInterchangeFormatLength\\\"]=>\\n+    int(100)\\n+    [\\\"THUMBNAIL\\\"]=>\\n+    NULL\\n+  }\\n+  [\\\"ExposureTime\\\"]=>\\n+  string(21) \\\"1414812756/1414812756\\\"\\n+  [\\\"FNumber\\\"]=>\\n+  string(21) \\\"1414812756/1414812756\\\"\\n+}\"}, {\"sha\": \"229190a6041926d960856267a5285d887eda49b5\", \"filename\": \"ext/exif/tests/bug72627.tiff\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/php/php-src/blob/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Ftests%2Fbug72627.tiff\", \"raw_url\": \"https://github.com/php/php-src/raw/6dbb1ee46b5f4725cc6519abf91e512a2a10dfed/ext%2Fexif%2Ftests%2Fbug72627.tiff\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Ftests%2Fbug72627.tiff?ref=6dbb1ee46b5f4725cc6519abf91e512a2a10dfed\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy8xYmQxMDNkZjAwZjQ5Y2Y0ZDRhZGUyY2ZlM2Y0NTZhYzA1OGE0ZWFlIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae", "content": "{\"sha\": \"1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjoxYmQxMDNkZjAwZjQ5Y2Y0ZDRhZGUyY2ZlM2Y0NTZhYzA1OGE0ZWFl\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-10T07:14:58Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-08-17T05:55:40Z\"}, \"message\": \"Fix bug #72730 - imagegammacorrect allows arbitrary write access\", \"tree\": {\"sha\": \"c8b65f7721f11f7e808edcc7235079ba22c6490b\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/c8b65f7721f11f7e808edcc7235079ba22c6490b\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"html_url\": \"https://github.com/php/php-src/commit/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a3598dd7c9b182debcb54b9322b1dece14c9b533\", \"url\": \"https://api.github.com/repos/php/php-src/commits/a3598dd7c9b182debcb54b9322b1dece14c9b533\", \"html_url\": \"https://github.com/php/php-src/commit/a3598dd7c9b182debcb54b9322b1dece14c9b533\"}], \"stats\": {\"total\": 20, \"additions\": 20, \"deletions\": 0}, \"files\": [{\"sha\": \"0fb96041087b4b18e6f0910977243bf4a001bbcd\", \"filename\": \"ext/gd/gd.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/php/php-src/blob/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae/ext%2Fgd%2Fgd.c\", \"raw_url\": \"https://github.com/php/php-src/raw/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae/ext%2Fgd%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Fgd.c?ref=1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"patch\": \"@@ -3082,6 +3082,11 @@ PHP_FUNCTION(imagegammacorrect)\\n \\t\\treturn;\\n \\t}\\n \\n+\\tif ( input <= 0.0 || output <= 0.0 ) {\\n+\\t\\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \\\"Gamma values should be positive\\\");\\n+\\t\\tRETURN_FALSE;\\n+\\t}\\n+\\n \\tZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \\\"Image\\\", le_gd);\\n \\n \\tif (gdImageTrueColor(im))\\t{\"}, {\"sha\": \"e7c13cb5e9d0a8e00eb91685603ee0b482a2d81c\", \"filename\": \"ext/gd/tests/bug72730.phpt\", \"status\": \"added\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/php/php-src/blob/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae/ext%2Fgd%2Ftests%2Fbug72730.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/1bd103df00f49cf4d4ade2cfe3f456ac058a4eae/ext%2Fgd%2Ftests%2Fbug72730.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Ftests%2Fbug72730.phpt?ref=1bd103df00f49cf4d4ade2cfe3f456ac058a4eae\", \"patch\": \"@@ -0,0 +1,15 @@\\n+--TEST--\\n+Bug #72730: imagegammacorrect allows arbitrary write access\\n+--SKIPIF--\\n+<?php \\n+if (!function_exists(\\\"imagecreatetruecolor\\\")) die(\\\"skip\\\");\\n+?>\\n+--FILE--\\n+<?php\\n+$img =  imagecreatetruecolor(1, 1);\\n+imagegammacorrect($img, -1, 1337);\\n+?>\\n+DONE\\n+--EXPECTF--\\n+Warning: imagegammacorrect(): Gamma values should be positive in %sbug72730.php on line %d\\n+DONE\\n\\\\ No newline at end of file\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy8yODAyMmM5YjFmZDkzNzQzNmFiNjdiYjNkNjFmNjUyYzEwOGJhZjk2Ig==.json", "commit": "https://api.github.com/repos/php/php-src/commits/28022c9b1fd937436ab67bb3d61f652c108baf96", "content": "{\"sha\": \"28022c9b1fd937436ab67bb3d61f652c108baf96\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjoyODAyMmM5YjFmZDkzNzQzNmFiNjdiYjNkNjFmNjUyYzEwOGJhZjk2\", \"commit\": {\"author\": {\"name\": \"Anatol Belski\", \"email\": \"ab@php.net\", \"date\": \"2016-08-16T12:37:39Z\"}, \"committer\": {\"name\": \"Anatol Belski\", \"email\": \"ab@php.net\", \"date\": \"2016-08-16T12:37:39Z\"}, \"message\": \"Fix bug#72697 - select_colors write out-of-bounds\\n\\n(cherry picked from commit b6f13a5ef9d6280cf984826a5de012a32c396cd4)\\n\\nConflicts:\\n\\text/gd/gd.c\", \"tree\": {\"sha\": \"a085d54dbb75c8a3a724df38950afe8c72333a64\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/a085d54dbb75c8a3a724df38950afe8c72333a64\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/28022c9b1fd937436ab67bb3d61f652c108baf96\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/28022c9b1fd937436ab67bb3d61f652c108baf96\", \"html_url\": \"https://github.com/php/php-src/commit/28022c9b1fd937436ab67bb3d61f652c108baf96\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/28022c9b1fd937436ab67bb3d61f652c108baf96/comments\", \"author\": {\"login\": \"weltling\", \"id\": 22016, \"node_id\": \"MDQ6VXNlcjIyMDE2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22016?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/weltling\", \"html_url\": \"https://github.com/weltling\", \"followers_url\": \"https://api.github.com/users/weltling/followers\", \"following_url\": \"https://api.github.com/users/weltling/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/weltling/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/weltling/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/weltling/subscriptions\", \"organizations_url\": \"https://api.github.com/users/weltling/orgs\", \"repos_url\": \"https://api.github.com/users/weltling/repos\", \"events_url\": \"https://api.github.com/users/weltling/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/weltling/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"weltling\", \"id\": 22016, \"node_id\": \"MDQ6VXNlcjIyMDE2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22016?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/weltling\", \"html_url\": \"https://github.com/weltling\", \"followers_url\": \"https://api.github.com/users/weltling/followers\", \"following_url\": \"https://api.github.com/users/weltling/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/weltling/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/weltling/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/weltling/subscriptions\", \"organizations_url\": \"https://api.github.com/users/weltling/orgs\", \"repos_url\": \"https://api.github.com/users/weltling/repos\", \"events_url\": \"https://api.github.com/users/weltling/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/weltling/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"b735a4419c1e796520b395a2aa0b6943d9157b73\", \"url\": \"https://api.github.com/repos/php/php-src/commits/b735a4419c1e796520b395a2aa0b6943d9157b73\", \"html_url\": \"https://github.com/php/php-src/commit/b735a4419c1e796520b395a2aa0b6943d9157b73\"}], \"stats\": {\"total\": 23, \"additions\": 20, \"deletions\": 3}, \"files\": [{\"sha\": \"0346a74634b09c1399bcd5db5643b97a7f61f07e\", \"filename\": \"ext/gd/gd.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/php/php-src/blob/28022c9b1fd937436ab67bb3d61f652c108baf96/ext%2Fgd%2Fgd.c\", \"raw_url\": \"https://github.com/php/php-src/raw/28022c9b1fd937436ab67bb3d61f652c108baf96/ext%2Fgd%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Fgd.c?ref=28022c9b1fd937436ab67bb3d61f652c108baf96\", \"patch\": \"@@ -1537,11 +1537,11 @@ PHP_FUNCTION(imagetruecolortopalette)\\n \\t\\tRETURN_FALSE;\\n \\t}\\n \\n-\\tif (ncolors <= 0) {\\n-\\t\\tphp_error_docref(NULL, E_WARNING, \\\"Number of colors has to be greater than zero\\\");\\n+\\tif (ncolors <= 0 || ZEND_LONG_INT_OVFL(ncolors)) {\\n+\\t\\tphp_error_docref(NULL, E_WARNING, \\\"Number of colors has to be greater than zero and no more than %d\\\", INT_MAX);\\n \\t\\tRETURN_FALSE;\\n \\t}\\n-\\tgdImageTrueColorToPalette(im, dither, ncolors);\\n+\\tgdImageTrueColorToPalette(im, dither, (int)ncolors);\\n \\n \\tRETURN_TRUE;\\n }\"}, {\"sha\": \"6110385fcb8077cce80508f58a66da37e4d97549\", \"filename\": \"ext/gd/tests/bug72697.phpt\", \"status\": \"added\", \"additions\": 17, \"deletions\": 0, \"changes\": 17, \"blob_url\": \"https://github.com/php/php-src/blob/28022c9b1fd937436ab67bb3d61f652c108baf96/ext%2Fgd%2Ftests%2Fbug72697.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/28022c9b1fd937436ab67bb3d61f652c108baf96/ext%2Fgd%2Ftests%2Fbug72697.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Ftests%2Fbug72697.phpt?ref=28022c9b1fd937436ab67bb3d61f652c108baf96\", \"patch\": \"@@ -0,0 +1,17 @@\\n+--TEST--\\n+Bug #72697: select_colors write out-of-bounds\\n+--SKIPIF--\\n+<?php \\n+if (!function_exists(\\\"imagecreatetruecolor\\\")) die(\\\"skip\\\");\\n+if (PHP_INT_MAX !== 9223372036854775807) die(\\\"skip for 64-bit long systems only\\\");\\n+?>\\n+--FILE--\\n+<?php\\n+\\n+$img=imagecreatetruecolor(10, 10);\\n+imagetruecolortopalette($img, false, PHP_INT_MAX / 8);\\n+?>\\n+DONE\\n+--EXPECTF--\\n+Warning: imagetruecolortopalette(): Number of colors has to be greater than zero and no more than 2147483647 in %sbug72697.php on line %d\\n+DONE\\n\\\\ No newline at end of file\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9iODgzOTNmMDhhNTU4ZWVjMTQ5NjRhNTVkM2M2ODBmZTY3NDA3NzEyIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/b88393f08a558eec14964a55d3c680fe67407712", "content": "{\"sha\": \"b88393f08a558eec14964a55d3c680fe67407712\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjpiODgzOTNmMDhhNTU4ZWVjMTQ5NjRhNTVkM2M2ODBmZTY3NDA3NzEy\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-09-06T06:42:31Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-09-13T04:04:23Z\"}, \"message\": \"Fix bug #72860: wddx_deserialize use-after-free\", \"tree\": {\"sha\": \"c6df93c81020c1b46b4007f9824985f53085d2a1\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/c6df93c81020c1b46b4007f9824985f53085d2a1\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/b88393f08a558eec14964a55d3c680fe67407712\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/b88393f08a558eec14964a55d3c680fe67407712\", \"html_url\": \"https://github.com/php/php-src/commit/b88393f08a558eec14964a55d3c680fe67407712\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/b88393f08a558eec14964a55d3c680fe67407712/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"65c8caafa83ca78a8b2fa22257b4dea85b6114e5\", \"url\": \"https://api.github.com/repos/php/php-src/commits/65c8caafa83ca78a8b2fa22257b4dea85b6114e5\", \"html_url\": \"https://github.com/php/php-src/commit/65c8caafa83ca78a8b2fa22257b4dea85b6114e5\"}], \"stats\": {\"total\": 30, \"additions\": 29, \"deletions\": 1}, \"files\": [{\"sha\": \"6385457e8ee41b58082462379a87030b1e2cfe23\", \"filename\": \"ext/wddx/tests/bug72860.phpt\", \"status\": \"added\", \"additions\": 27, \"deletions\": 0, \"changes\": 27, \"blob_url\": \"https://github.com/php/php-src/blob/b88393f08a558eec14964a55d3c680fe67407712/ext%2Fwddx%2Ftests%2Fbug72860.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/b88393f08a558eec14964a55d3c680fe67407712/ext%2Fwddx%2Ftests%2Fbug72860.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Ftests%2Fbug72860.phpt?ref=b88393f08a558eec14964a55d3c680fe67407712\", \"patch\": \"@@ -0,0 +1,27 @@\\n+--TEST--\\n+Bug #72860: wddx_deserialize use-after-free\\n+--SKIPIF--\\n+<?php\\n+if (!extension_loaded('wddx')) {\\n+    die('skip. wddx not available');\\n+}\\n+?>\\n+--FILE--\\n+<?php\\n+\\n+$xml=<<<XML\\n+<?xml version='1.0'?>\\n+<!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>\\n+<wddxPacket version='1.0'>\\n+       <recordset fieldNames='F'>\\n+               <field name='F'>\\n+       </recordset>\\n+</wddxPacket>\\n+XML;\\n+\\n+var_dump(wddx_deserialize($xml));\\n+?>\\n+DONE\\n+--EXPECT--\\n+NULL\\n+DONE\\n\\\\ No newline at end of file\"}, {\"sha\": \"b02d2f07ded469c5ed8256e422428d3ce8bee637\", \"filename\": \"ext/wddx/wddx.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/php/php-src/blob/b88393f08a558eec14964a55d3c680fe67407712/ext%2Fwddx%2Fwddx.c\", \"raw_url\": \"https://github.com/php/php-src/raw/b88393f08a558eec14964a55d3c680fe67407712/ext%2Fwddx%2Fwddx.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Fwddx.c?ref=b88393f08a558eec14964a55d3c680fe67407712\", \"patch\": \"@@ -230,7 +230,8 @@ static int wddx_stack_destroy(wddx_stack *stack)\\n \\n \\tif (stack->elements) {\\n \\t\\tfor (i = 0; i < stack->top; i++) {\\n-\\t\\t\\tif (((st_entry *)stack->elements[i])->data)\\t{\\n+\\t\\t\\tif (((st_entry *)stack->elements[i])->data\\n+\\t\\t\\t\\t\\t&& ((st_entry *)stack->elements[i])->type != ST_FIELD)\\t{\\n \\t\\t\\t\\tzval_ptr_dtor(&((st_entry *)stack->elements[i])->data);\\n \\t\\t\\t}\\n \\t\\t\\tif (((st_entry *)stack->elements[i])->varname) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9iMmFmNGU4ODY4NzI2YTA0MDIzNGRlMTEzNDM2YzZlNGY2MzcyZDE3Ig==.json", "commit": "https://api.github.com/repos/php/php-src/commits/b2af4e8868726a040234de113436c6e4f6372d17", "content": "{\"sha\": \"b2af4e8868726a040234de113436c6e4f6372d17\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjpiMmFmNGU4ODY4NzI2YTA0MDIzNGRlMTEzNDM2YzZlNGY2MzcyZDE3\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"nikic@php.net\", \"date\": \"2016-10-23T19:37:36Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"nikic@php.net\", \"date\": \"2016-11-05T22:06:27Z\"}, \"message\": \"Complete the fix of bug #70172 for PHP 7\", \"tree\": {\"sha\": \"31a3213916606f2602b6a0a821c41f2712766950\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/31a3213916606f2602b6a0a821c41f2712766950\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/b2af4e8868726a040234de113436c6e4f6372d17\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/b2af4e8868726a040234de113436c6e4f6372d17\", \"html_url\": \"https://github.com/php/php-src/commit/b2af4e8868726a040234de113436c6e4f6372d17\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/b2af4e8868726a040234de113436c6e4f6372d17/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3d73f718b2715c65be088ef6cb038d30e5d4bb86\", \"url\": \"https://api.github.com/repos/php/php-src/commits/3d73f718b2715c65be088ef6cb038d30e5d4bb86\", \"html_url\": \"https://github.com/php/php-src/commit/3d73f718b2715c65be088ef6cb038d30e5d4bb86\"}], \"stats\": {\"total\": 16, \"additions\": 7, \"deletions\": 9}, \"files\": [{\"sha\": \"2b12a78edb5be332c0fbef46a76402a58125dbcf\", \"filename\": \"ext/standard/tests/serialize/bug70172_2.phpt\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 4, \"changes\": 6, \"blob_url\": \"https://github.com/php/php-src/blob/b2af4e8868726a040234de113436c6e4f6372d17/ext%2Fstandard%2Ftests%2Fserialize%2Fbug70172_2.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/b2af4e8868726a040234de113436c6e4f6372d17/ext%2Fstandard%2Ftests%2Fserialize%2Fbug70172_2.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Ftests%2Fserialize%2Fbug70172_2.phpt?ref=b2af4e8868726a040234de113436c6e4f6372d17\", \"patch\": \"@@ -1,7 +1,5 @@\\n --TEST--\\n Bug #70172 - Use After Free Vulnerability in unserialize()\\n---XFAIL--\\n-Unfinished merge, needs fix.\\n --FILE--\\n <?php\\n class obj implements Serializable {\\n@@ -61,10 +59,10 @@ array(2) {\\n     [0]=>\\n     array(1) {\\n       [0]=>\\n-      &object(obj2)#%d (1) {\\n+      object(obj2)#%d (1) {\\n         [\\\"ryat\\\"]=>\\n         int(1)\\n       }\\n     }\\n   }\\n-}\\n\\\\ No newline at end of file\\n+}\"}, {\"sha\": \"88719ccb64dcdb8f19723775a63f079debe6261f\", \"filename\": \"ext/standard/var.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/php/php-src/blob/b2af4e8868726a040234de113436c6e4f6372d17/ext%2Fstandard%2Fvar.c\", \"raw_url\": \"https://github.com/php/php-src/raw/b2af4e8868726a040234de113436c6e4f6372d17/ext%2Fstandard%2Fvar.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Fvar.c?ref=b2af4e8868726a040234de113436c6e4f6372d17\", \"patch\": \"@@ -1036,6 +1036,7 @@ PHP_FUNCTION(unserialize)\\n \\tconst unsigned char *p;\\n \\tphp_unserialize_data_t var_hash;\\n \\tzval *options = NULL, *classes = NULL;\\n+\\tzval *retval;\\n \\tHashTable *class_hash = NULL;\\n \\n \\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \\\"s|a\\\", &buf, &buf_len, &options) == FAILURE) {\\n@@ -1067,22 +1068,21 @@ PHP_FUNCTION(unserialize)\\n \\t\\t}\\n \\t}\\n \\n-\\tif (!php_var_unserialize_ex(return_value, &p, p + buf_len, &var_hash, class_hash)) {\\n+\\tretval = var_tmp_var(&var_hash);\\n+\\tif (!php_var_unserialize_ex(retval, &p, p + buf_len, &var_hash, class_hash)) {\\n \\t\\tPHP_VAR_UNSERIALIZE_DESTROY(var_hash);\\n \\t\\tif (class_hash) {\\n \\t\\t\\tzend_hash_destroy(class_hash);\\n \\t\\t\\tFREE_HASHTABLE(class_hash);\\n \\t\\t}\\n-\\t\\tzval_ptr_dtor(return_value);\\n \\t\\tif (!EG(exception)) {\\n \\t\\t\\tphp_error_docref(NULL, E_NOTICE, \\\"Error at offset \\\" ZEND_LONG_FMT \\\" of %zd bytes\\\",\\n \\t\\t\\t\\t(zend_long)((char*)p - buf), buf_len);\\n \\t\\t}\\n \\t\\tRETURN_FALSE;\\n \\t}\\n-\\t/* We should keep an reference to return_value to prevent it from being dtor\\n-\\t   in case nesting calls to unserialize */\\n-\\tvar_push_dtor(&var_hash, return_value);\\n+\\n+\\tZVAL_COPY(return_value, retval);\\n \\n \\tPHP_VAR_UNSERIALIZE_DESTROY(var_hash);\\n \\tif (class_hash) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy84NjNkMzdlYTY2ZDVjOTYwZGIwOGQ2ZjRhMmNiZDI1MThmMGY4MGQxIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1", "content": "{\"sha\": \"863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo4NjNkMzdlYTY2ZDVjOTYwZGIwOGQ2ZjRhMmNiZDI1MThmMGY4MGQx\", \"commit\": {\"author\": {\"name\": \"Christoph M. Becker\", \"email\": \"cmbecker69@gmx.de\", \"date\": \"2016-10-25T11:23:16Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-10-30T21:31:29Z\"}, \"message\": \"Fix #72696: imagefilltoborder stackoverflow on truecolor images\\n\\nWe must not allow negative color values be passed to\\ngdImageFillToBorder(), because that can lead to infinite recursion\\nsince the recursion termination condition will not necessarily be met.\", \"tree\": {\"sha\": \"f6a7c0a3f2feac99d5e442bca2a45284be82bb0d\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/f6a7c0a3f2feac99d5e442bca2a45284be82bb0d\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"html_url\": \"https://github.com/php/php-src/commit/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1/comments\", \"author\": {\"login\": \"cmb69\", \"id\": 2306138, \"node_id\": \"MDQ6VXNlcjIzMDYxMzg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2306138?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cmb69\", \"html_url\": \"https://github.com/cmb69\", \"followers_url\": \"https://api.github.com/users/cmb69/followers\", \"following_url\": \"https://api.github.com/users/cmb69/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cmb69/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cmb69/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cmb69/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cmb69/orgs\", \"repos_url\": \"https://api.github.com/users/cmb69/repos\", \"events_url\": \"https://api.github.com/users/cmb69/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cmb69/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6499581af76cfe986e12330faabb3a7c36d45ffc\", \"url\": \"https://api.github.com/repos/php/php-src/commits/6499581af76cfe986e12330faabb3a7c36d45ffc\", \"html_url\": \"https://github.com/php/php-src/commit/6499581af76cfe986e12330faabb3a7c36d45ffc\"}], \"stats\": {\"total\": 16, \"additions\": 15, \"deletions\": 1}, \"files\": [{\"sha\": \"3e7d27a37301f28d1d7d300457ab9ea3f2795b5f\", \"filename\": \"ext/gd/libgd/gd.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/php/php-src/blob/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1/ext%2Fgd%2Flibgd%2Fgd.c\", \"raw_url\": \"https://github.com/php/php-src/raw/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1/ext%2Fgd%2Flibgd%2Fgd.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Flibgd%2Fgd.c?ref=863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"patch\": \"@@ -1747,7 +1747,7 @@ void gdImageFillToBorder (gdImagePtr im, int x, int y, int border, int color)\\n \\tint leftLimit = -1, rightLimit;\\n \\tint i, restoreAlphaBlending = 0;\\n \\n-\\tif (border < 0) {\\n+\\tif (border < 0 || color < 0) {\\n \\t\\t/* Refuse to fill to a non-solid border */\\n \\t\\treturn;\\n \\t}\"}, {\"sha\": \"4f0d9e7f1d256071cb20d82b26bd07cd612f76e0\", \"filename\": \"ext/gd/tests/bug72696.phpt\", \"status\": \"added\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/php/php-src/blob/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1/ext%2Fgd%2Ftests%2Fbug72696.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/863d37ea66d5c960db08d6f4a2cbd2518f0f80d1/ext%2Fgd%2Ftests%2Fbug72696.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fgd%2Ftests%2Fbug72696.phpt?ref=863d37ea66d5c960db08d6f4a2cbd2518f0f80d1\", \"patch\": \"@@ -0,0 +1,14 @@\\n+--TEST--\\n+Bug #72696 (imagefilltoborder stackoverflow on truecolor images)\\n+--SKIPIF--\\n+<?php\\n+if (!extension_loaded('gd')) die('skip gd extension not available');\\n+?>\\n+--FILE--\\n+<?php\\n+$im = imagecreatetruecolor(10, 10);\\n+imagefilltoborder($im, 0, 0, 1, -2);\\n+?>\\n+===DONE===\\n+--EXPECT--\\n+===DONE===\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9jYTQ2ZDBhY2JjZTU1MDE5Yjk3MGZjZDRjMWU4YTEwZWRmZGRlZDkzIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/ca46d0acbce55019b970fcd4c1e8a10edfdded93", "content": "{\"sha\": \"ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjpjYTQ2ZDBhY2JjZTU1MDE5Yjk3MGZjZDRjMWU4YTEwZWRmZGRlZDkz\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-12-30T23:34:46Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-12-30T23:39:48Z\"}, \"message\": \"Fix int overflows in phar (bug #73764)\", \"tree\": {\"sha\": \"5cd665948c6cbaa839f46da44550d9c25ba2f9e5\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/5cd665948c6cbaa839f46da44550d9c25ba2f9e5\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"html_url\": \"https://github.com/php/php-src/commit/ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/ca46d0acbce55019b970fcd4c1e8a10edfdded93/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2ba3b275948050ce600c5234b66e840b640ca5a5\", \"url\": \"https://api.github.com/repos/php/php-src/commits/2ba3b275948050ce600c5234b66e840b640ca5a5\", \"html_url\": \"https://github.com/php/php-src/commit/2ba3b275948050ce600c5234b66e840b640ca5a5\"}], \"stats\": {\"total\": 20, \"additions\": 18, \"deletions\": 2}, \"files\": [{\"sha\": \"532b4c3169ac6d31cd6c9437136004d9036ecb99\", \"filename\": \"ext/phar/phar.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/php/php-src/blob/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Fphar.c\", \"raw_url\": \"https://github.com/php/php-src/raw/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Fphar.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Fphar.c?ref=ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"patch\": \"@@ -1055,7 +1055,7 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, int fname_len, char\\n \\tentry.is_persistent = mydata->is_persistent;\\n \\n \\tfor (manifest_index = 0; manifest_index < manifest_count; ++manifest_index) {\\n-\\t\\tif (buffer + 4 > endbuffer) {\\n+\\t\\tif (buffer + 24 > endbuffer) {\\n \\t\\t\\tMAPPHAR_FAIL(\\\"internal corruption of phar \\\\\\\"%s\\\\\\\" (truncated manifest entry)\\\")\\n \\t\\t}\\n \\n@@ -1069,7 +1069,7 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, int fname_len, char\\n \\t\\t\\tentry.manifest_pos = manifest_index;\\n \\t\\t}\\n \\n-\\t\\tif (entry.filename_len + 20 > endbuffer - buffer) {\\n+\\t\\tif (entry.filename_len > endbuffer - buffer - 20) {\\n \\t\\t\\tMAPPHAR_FAIL(\\\"internal corruption of phar \\\\\\\"%s\\\\\\\" (truncated manifest entry)\\\");\\n \\t\\t}\\n \"}, {\"sha\": \"89a5ff65426d1b64a7a114c2acf499d57adf0bf9\", \"filename\": \"ext/phar/tests/bug73764.phar\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/php/php-src/blob/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Ftests%2Fbug73764.phar\", \"raw_url\": \"https://github.com/php/php-src/raw/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Ftests%2Fbug73764.phar\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Ftests%2Fbug73764.phar?ref=ca46d0acbce55019b970fcd4c1e8a10edfdded93\"}, {\"sha\": \"cab314a7317ce71b0d90826dce2fcff39e3f17d3\", \"filename\": \"ext/phar/tests/bug73764.phpt\", \"status\": \"added\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/php/php-src/blob/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Ftests%2Fbug73764.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/ca46d0acbce55019b970fcd4c1e8a10edfdded93/ext%2Fphar%2Ftests%2Fbug73764.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Ftests%2Fbug73764.phpt?ref=ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"patch\": \"@@ -0,0 +1,16 @@\\n+--TEST--\\n+Phar: PHP bug #73764: Crash while loading hostile phar archive\\n+--SKIPIF--\\n+<?php if (!extension_loaded(\\\"phar\\\")) die(\\\"skip\\\"); ?>\\n+--FILE--\\n+<?php\\n+chdir(__DIR__);\\n+try {\\n+$p = Phar::LoadPhar('bug73764.phar', 'alias.phar');\\n+echo \\\"OK\\\\n\\\";\\n+} catch(PharException $e) {\\n+\\techo $e->getMessage();\\n+}\\n+?>\\n+--EXPECTF--\\n+internal corruption of phar \\\"%sbug73764.phar\\\" (truncated manifest entry)\\n\\\\ No newline at end of file\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9iMjhiOGIyZmVlNmRmYTZmY2QxMzMwNWM1ODFiYjgzNTY4OWFjM2JlIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/b28b8b2fee6dfa6fcd13305c581bb835689ac3be", "content": "{\"sha\": \"b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjpiMjhiOGIyZmVlNmRmYTZmY2QxMzMwNWM1ODFiYjgzNTY4OWFjM2Jl\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-12-30T23:57:24Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2016-12-30T23:57:24Z\"}, \"message\": \"Fix bug #73768 - Memory corruption when loading hostile phar\", \"tree\": {\"sha\": \"bb8712c930d85db18e004d811b1478b37d211b9c\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/bb8712c930d85db18e004d811b1478b37d211b9c\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"html_url\": \"https://github.com/php/php-src/commit/b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"url\": \"https://api.github.com/repos/php/php-src/commits/ca46d0acbce55019b970fcd4c1e8a10edfdded93\", \"html_url\": \"https://github.com/php/php-src/commit/ca46d0acbce55019b970fcd4c1e8a10edfdded93\"}], \"stats\": {\"total\": 19, \"additions\": 17, \"deletions\": 2}, \"files\": [{\"sha\": \"158f41739dce396a5cf7c7167d819ba961214987\", \"filename\": \"ext/phar/phar.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/php/php-src/blob/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Fphar.c\", \"raw_url\": \"https://github.com/php/php-src/raw/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Fphar.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Fphar.c?ref=b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"patch\": \"@@ -981,15 +981,14 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, int fname_len, char\\n \\t\\t/* if the alias is stored we enforce it (implicit overrides explicit) */\\n \\t\\tif (alias && alias_len && (alias_len != (int)tmp_len || strncmp(alias, buffer, tmp_len)))\\n \\t\\t{\\n-\\t\\t\\tbuffer[tmp_len] = '\\\\0';\\n \\t\\t\\tphp_stream_close(fp);\\n \\n \\t\\t\\tif (signature) {\\n \\t\\t\\t\\tefree(signature);\\n \\t\\t\\t}\\n \\n \\t\\t\\tif (error) {\\n-\\t\\t\\t\\tspprintf(error, 0, \\\"cannot load phar \\\\\\\"%s\\\\\\\" with implicit alias \\\\\\\"%s\\\\\\\" under different alias \\\\\\\"%s\\\\\\\"\\\", fname, buffer, alias);\\n+\\t\\t\\t\\tspprintf(error, 0, \\\"cannot load phar \\\\\\\"%s\\\\\\\" with implicit alias \\\\\\\"%.*s\\\\\\\" under different alias \\\\\\\"%s\\\\\\\"\\\", fname, tmp_len, buffer, alias);\\n \\t\\t\\t}\\n \\n \\t\\t\\tefree(savebuf);\"}, {\"sha\": \"3f429c2365058b70b8f5c8202a4e40982a7874ce\", \"filename\": \"ext/phar/tests/bug73768.phar\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/php/php-src/blob/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Ftests%2Fbug73768.phar\", \"raw_url\": \"https://github.com/php/php-src/raw/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Ftests%2Fbug73768.phar\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Ftests%2Fbug73768.phar?ref=b28b8b2fee6dfa6fcd13305c581bb835689ac3be\"}, {\"sha\": \"37a4da0253acf76e767ccb3192c730c769431fe2\", \"filename\": \"ext/phar/tests/bug73768.phpt\", \"status\": \"added\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/php/php-src/blob/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Ftests%2Fbug73768.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/b28b8b2fee6dfa6fcd13305c581bb835689ac3be/ext%2Fphar%2Ftests%2Fbug73768.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fphar%2Ftests%2Fbug73768.phpt?ref=b28b8b2fee6dfa6fcd13305c581bb835689ac3be\", \"patch\": \"@@ -0,0 +1,16 @@\\n+--TEST--\\n+Phar: PHP bug #73768: Memory corruption when loading hostile phar\\n+--SKIPIF--\\n+<?php if (!extension_loaded(\\\"phar\\\")) die(\\\"skip\\\"); ?>\\n+--FILE--\\n+<?php\\n+chdir(__DIR__);\\n+try {\\n+$p = Phar::LoadPhar('bug73768.phar', 'alias.phar');\\n+echo \\\"OK\\\\n\\\";\\n+} catch(PharException $e) {\\n+\\techo $e->getMessage();\\n+}\\n+?>\\n+--EXPECTF--\\n+cannot load phar \\\"%sbug73768.phar\\\" with implicit alias \\\"\\\" under different alias \\\"alias.phar\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy8xY2RhMGQ3YzJmZmI2MmQ4MzMxYzY0ZTcwMzEzMWQ5Y2FiZGMwM2VhIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea", "content": "{\"sha\": \"1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjoxY2RhMGQ3YzJmZmI2MmQ4MzMxYzY0ZTcwMzEzMWQ5Y2FiZGMwM2Vh\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2017-01-01T03:31:49Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2017-01-01T03:31:49Z\"}, \"message\": \"Fix bug #73737 FPE when parsing a tag format\", \"tree\": {\"sha\": \"e2f8acb4a7bbaaeee18577eca4af8abeb14cc646\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/e2f8acb4a7bbaaeee18577eca4af8abeb14cc646\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"html_url\": \"https://github.com/php/php-src/commit/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e5246580a85f031e1a3b8064edbaa55c1643a451\", \"url\": \"https://api.github.com/repos/php/php-src/commits/e5246580a85f031e1a3b8064edbaa55c1643a451\", \"html_url\": \"https://github.com/php/php-src/commit/e5246580a85f031e1a3b8064edbaa55c1643a451\"}], \"stats\": {\"total\": 14, \"additions\": 13, \"deletions\": 1}, \"files\": [{\"sha\": \"83daee6f54f5d0d5f5ba3a3b0613df8c024e6555\", \"filename\": \"ext/exif/exif.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/php/php-src/blob/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Fexif.c\", \"raw_url\": \"https://github.com/php/php-src/raw/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Fexif.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Fexif.c?ref=1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"patch\": \"@@ -1303,7 +1303,7 @@ static size_t exif_convert_any_to_int(void *value, int format, int motorola_inte\\n \\t\\t\\tif (s_den == 0) {\\n \\t\\t\\t\\treturn 0;\\n \\t\\t\\t} else {\\n-\\t\\t\\t\\treturn php_ifd_get32s(value, motorola_intel) / s_den;\\n+\\t\\t\\t\\treturn (size_t)((double)php_ifd_get32s(value, motorola_intel) / s_den);\\n \\t\\t\\t}\\n \\n \\t\\tcase TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);\"}, {\"sha\": \"21eaf80585bc5042555cf3e94e7f53ec6fe1efba\", \"filename\": \"ext/exif/tests/bug73737.phpt\", \"status\": \"added\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/php/php-src/blob/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Ftests%2Fbug73737.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Ftests%2Fbug73737.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Ftests%2Fbug73737.phpt?ref=1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\", \"patch\": \"@@ -0,0 +1,12 @@\\n+--TEST--\\n+Bug #73737 (Crash when parsing a tag format)\\n+--SKIPIF--\\n+<?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>\\n+--FILE--\\n+<?php\\n+\\t$exif = exif_thumbnail(__DIR__ . '/bug73737.tiff');\\n+\\tvar_dump($exif);\\n+?>\\n+--EXPECTF--\\n+Warning: exif_thumbnail(bug73737.tiff): Error in TIFF: filesize(x0030) less than start of IFD dir(x10102) in %s line %d\\n+bool(false)\"}, {\"sha\": \"2cb036fc4730502a3e8041ab24ab12a2ad0b0327\", \"filename\": \"ext/exif/tests/bug73737.tiff\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/php/php-src/blob/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Ftests%2Fbug73737.tiff\", \"raw_url\": \"https://github.com/php/php-src/raw/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea/ext%2Fexif%2Ftests%2Fbug73737.tiff\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fexif%2Ftests%2Fbug73737.tiff?ref=1cda0d7c2ffb62d8331c64e703131d9cabdc03ea\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy84ZDI1MzlmYTBmYWYzZjYzZTFkMWU3NjM1MzQ3YzViOWU3NzdkNDdiIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b", "content": "{\"sha\": \"8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo4ZDI1MzlmYTBmYWYzZjYzZTFkMWU3NjM1MzQ3YzViOWU3NzdkNDdi\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2017-01-01T04:14:20Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2017-01-01T04:14:20Z\"}, \"message\": \"Fix bug #73831 - NULL Pointer Dereference while unserialize php object\", \"tree\": {\"sha\": \"602f5c8fa3792fbfa649357d69442c0409b9e237\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/602f5c8fa3792fbfa649357d69442c0409b9e237\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"html_url\": \"https://github.com/php/php-src/commit/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"97e16ebbe2976dad22e8238958d3d5f023cc0132\", \"url\": \"https://api.github.com/repos/php/php-src/commits/97e16ebbe2976dad22e8238958d3d5f023cc0132\", \"html_url\": \"https://github.com/php/php-src/commit/97e16ebbe2976dad22e8238958d3d5f023cc0132\"}], \"stats\": {\"total\": 59, \"additions\": 43, \"deletions\": 16}, \"files\": [{\"sha\": \"0f8b8b12649627eee5de134bb3fa43af6828d8ef\", \"filename\": \"ext/wddx/tests/bug73831.phpt\", \"status\": \"added\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/php/php-src/blob/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b/ext%2Fwddx%2Ftests%2Fbug73831.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b/ext%2Fwddx%2Ftests%2Fbug73831.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Ftests%2Fbug73831.phpt?ref=8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"patch\": \"@@ -0,0 +1,23 @@\\n+--TEST--\\n+Bug #73831 (NULL Pointer Dereference while unserialize php object)\\n+--SKIPIF--\\n+<?php if (!extension_loaded(\\\"wddx\\\")) print \\\"skip\\\"; ?>\\n+--FILE--\\n+<?php\\n+$xml = <<<EOF\\n+<?xml version=\\\"1.0\\\" ?>\\n+<wddxPacket version=\\\"1.0\\\">\\n+\\t<struct>\\n+\\t\\t<var name=\\\"php_class_name\\\">\\n+\\t\\t\\t<string>Throwable</string>\\n+                </var>\\n+        </struct>\\n+</wddxPacket>\\n+EOF;\\n+try {\\n+\\t$wddx = wddx_deserialize($xml);\\n+} catch(Error $e) { echo $e->getMessage(); }\\n+?>\\n+--EXPECTF--\\n+Warning: wddx_deserialize(): Class throwable can not be instantiated in %sbug73831.php on line %d\\n+Cannot instantiate interface Throwable\"}, {\"sha\": \"70c6213407256186aa29ddabae4fe7ead3412e2c\", \"filename\": \"ext/wddx/wddx.c\", \"status\": \"modified\", \"additions\": 20, \"deletions\": 16, \"changes\": 36, \"blob_url\": \"https://github.com/php/php-src/blob/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b/ext%2Fwddx%2Fwddx.c\", \"raw_url\": \"https://github.com/php/php-src/raw/8d2539fa0faf3f63e1d1e7635347c5b9e777d47b/ext%2Fwddx%2Fwddx.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fwddx%2Fwddx.c?ref=8d2539fa0faf3f63e1d1e7635347c5b9e777d47b\", \"patch\": \"@@ -908,7 +908,7 @@ static void php_wddx_pop_element(void *user_data, const XML_Char *name)\\n \\n \\t\\tif (!strcmp((char *)name, EL_BINARY)) {\\n \\t\\t\\tzend_string *new_str = NULL;\\n-\\t\\t\\t\\n+\\n \\t\\t\\tif (ZSTR_EMPTY_ALLOC() != Z_STR(ent1->data)) {\\n \\t\\t\\t\\tnew_str = php_base64_decode(\\n \\t\\t\\t\\t\\t(unsigned char *)Z_STRVAL(ent1->data), Z_STRLEN(ent1->data));\\n@@ -967,22 +967,26 @@ static void php_wddx_pop_element(void *user_data, const XML_Char *name)\\n \\t\\t\\t\\t\\t\\t\\tphp_error_docref(NULL, E_WARNING, \\\"Class %s can not be unserialized\\\", Z_STRVAL(ent1->data));\\n \\t\\t\\t\\t\\t\\t} else {\\n \\t\\t\\t\\t\\t\\t\\t/* Initialize target object */\\n-\\t\\t\\t\\t\\t\\t\\tobject_init_ex(&obj, pce);\\n-\\n-\\t\\t\\t\\t\\t\\t\\t/* Merge current hashtable with object's default properties */\\n-\\t\\t\\t\\t\\t\\t\\tzend_hash_merge(Z_OBJPROP(obj),\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tZ_ARRVAL(ent2->data),\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzval_add_ref, 0);\\n-\\n-\\t\\t\\t\\t\\t\\t\\tif (incomplete_class) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tphp_store_class_name(&obj, Z_STRVAL(ent1->data), Z_STRLEN(ent1->data));\\n+\\t\\t\\t\\t\\t\\t\\tif (object_init_ex(&obj, pce) != SUCCESS || EG(exception)) {\\n+\\t\\t\\t\\t\\t\\t\\t\\tzval_ptr_dtor(&ent2->data);\\n+\\t\\t\\t\\t\\t\\t\\t\\tZVAL_UNDEF(&ent2->data);\\n+\\t\\t\\t\\t\\t\\t\\t\\tphp_error_docref(NULL, E_WARNING, \\\"Class %s can not be instantiated\\\", Z_STRVAL(ent1->data));\\n+\\t\\t\\t\\t\\t\\t\\t} else {\\n+\\t\\t\\t\\t\\t\\t\\t\\t/* Merge current hashtable with object's default properties */\\n+\\t\\t\\t\\t\\t\\t\\t\\tzend_hash_merge(Z_OBJPROP(obj),\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tZ_ARRVAL(ent2->data),\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzval_add_ref, 0);\\n+\\n+\\t\\t\\t\\t\\t\\t\\t\\tif (incomplete_class) {\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\tphp_store_class_name(&obj, Z_STRVAL(ent1->data), Z_STRLEN(ent1->data));\\n+\\t\\t\\t\\t\\t\\t\\t\\t}\\n+\\n+\\t\\t\\t\\t\\t\\t\\t\\t/* Clean up old array entry */\\n+\\t\\t\\t\\t\\t\\t\\t\\tzval_ptr_dtor(&ent2->data);\\n+\\n+\\t\\t\\t\\t\\t\\t\\t\\t/* Set stack entry to point to the newly created object */\\n+\\t\\t\\t\\t\\t\\t\\t\\tZVAL_COPY_VALUE(&ent2->data, &obj);\\n \\t\\t\\t\\t\\t\\t\\t}\\n-\\n-\\t\\t\\t\\t\\t\\t\\t/* Clean up old array entry */\\n-\\t\\t\\t\\t\\t\\t\\tzval_ptr_dtor(&ent2->data);\\n-\\n-\\t\\t\\t\\t\\t\\t\\t/* Set stack entry to point to the newly created object */\\n-\\t\\t\\t\\t\\t\\t\\tZVAL_COPY_VALUE(&ent2->data, &obj);\\n \\t\\t\\t\\t\\t\\t}\\n \\n \\t\\t\\t\\t\\t\\t/* Clean up class name var entry */\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy9iYWIwYjk5ZjM3NmRhYzkxNzBhYzgxMzgyYTVlZDUyNjkzOGQ1OTVhIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/bab0b99f376dac9170ac81382a5ed526938d595a", "content": "{\"sha\": \"bab0b99f376dac9170ac81382a5ed526938d595a\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjpiYWIwYjk5ZjM3NmRhYzkxNzBhYzgxMzgyYTVlZDUyNjkzOGQ1OTVh\", \"commit\": {\"author\": {\"name\": \"Sara Golemon\", \"email\": \"pollita@php.net\", \"date\": \"2017-03-07T19:27:46Z\"}, \"committer\": {\"name\": \"Sara Golemon\", \"email\": \"pollita@php.net\", \"date\": \"2017-03-07T20:10:53Z\"}, \"message\": \"Detect invalid port in xp_socket parse ip address\\n\\nFor historical reasons, fsockopen() accepts the port and hostname\\nseparately: fsockopen('127.0.0.1', 80)\\n\\nHowever, with the introdcution of stream transports in PHP 4.3,\\nit became possible to include the port in the hostname specifier:\\n\\nfsockopen('127.0.0.1:80')\\nOr more formally: fsockopen('tcp://127.0.0.1:80')\\n\\nConfusing results when these two forms are combined, however.\\nfsockopen('127.0.0.1:80', 443) results in fsockopen() attempting\\nto connect to '127.0.0.1:80:443' which any reasonable stack would\\nconsider invalid.\\n\\nUnfortunately, PHP parses the address looking for the first colon\\n(with special handling for IPv6, don't worry) and calls atoi()\\nfrom there.  atoi() in turn, simply stops parsing at the first\\nnon-numeric character and returns the value so far.\\n\\nThe end result is that the explicitly supplied port is treated\\nas ignored garbage, rather than producing an error.\\n\\nThis diff replaces atoi() with strtol() and inspects the\\nstop character.  If additional \\\"garbage\\\" of any kind is found,\\nit fails and returns an error.\", \"tree\": {\"sha\": \"25a62afa850ec87c43eb1c0b0cd4fa9578cde6aa\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/25a62afa850ec87c43eb1c0b0cd4fa9578cde6aa\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/bab0b99f376dac9170ac81382a5ed526938d595a\", \"comment_count\": 9, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/bab0b99f376dac9170ac81382a5ed526938d595a\", \"html_url\": \"https://github.com/php/php-src/commit/bab0b99f376dac9170ac81382a5ed526938d595a\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/bab0b99f376dac9170ac81382a5ed526938d595a/comments\", \"author\": {\"login\": \"sgolemon\", \"id\": 812538, \"node_id\": \"MDQ6VXNlcjgxMjUzOA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/812538?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/sgolemon\", \"html_url\": \"https://github.com/sgolemon\", \"followers_url\": \"https://api.github.com/users/sgolemon/followers\", \"following_url\": \"https://api.github.com/users/sgolemon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/sgolemon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/sgolemon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/sgolemon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/sgolemon/orgs\", \"repos_url\": \"https://api.github.com/users/sgolemon/repos\", \"events_url\": \"https://api.github.com/users/sgolemon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/sgolemon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"sgolemon\", \"id\": 812538, \"node_id\": \"MDQ6VXNlcjgxMjUzOA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/812538?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/sgolemon\", \"html_url\": \"https://github.com/sgolemon\", \"followers_url\": \"https://api.github.com/users/sgolemon/followers\", \"following_url\": \"https://api.github.com/users/sgolemon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/sgolemon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/sgolemon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/sgolemon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/sgolemon/orgs\", \"repos_url\": \"https://api.github.com/users/sgolemon/repos\", \"events_url\": \"https://api.github.com/users/sgolemon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/sgolemon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"549a30d2cd7756abc5f5116dfebe217098ade5c5\", \"url\": \"https://api.github.com/repos/php/php-src/commits/549a30d2cd7756abc5f5116dfebe217098ade5c5\", \"html_url\": \"https://github.com/php/php-src/commit/549a30d2cd7756abc5f5116dfebe217098ade5c5\"}], \"stats\": {\"total\": 66, \"additions\": 55, \"deletions\": 11}, \"files\": [{\"sha\": \"594756db6b7cd43d0a2c6e93cb5ab2686ac1507f\", \"filename\": \"ext/standard/tests/streams/parseip-001.phpt\", \"status\": \"added\", \"additions\": 37, \"deletions\": 0, \"changes\": 37, \"blob_url\": \"https://github.com/php/php-src/blob/bab0b99f376dac9170ac81382a5ed526938d595a/ext%2Fstandard%2Ftests%2Fstreams%2Fparseip-001.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/bab0b99f376dac9170ac81382a5ed526938d595a/ext%2Fstandard%2Ftests%2Fstreams%2Fparseip-001.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Ftests%2Fstreams%2Fparseip-001.phpt?ref=bab0b99f376dac9170ac81382a5ed526938d595a\", \"patch\": \"@@ -0,0 +1,37 @@\\n+--TEST--\\n+Use of double-port in fsockopen()\\n+--FILE--\\n+<?php\\n+\\n+$try = [\\n+  '127.0.0.1:80',\\n+  'tcp://127.0.0.1:80',\\n+  '[::1]:80',\\n+  'tcp://[::1]:80',\\n+  'localhost:80',\\n+  'tcp://localhost:80',\\n+];\\n+\\n+foreach ($try as $addr) {\\n+  echo \\\"== $addr ==\\\\n\\\";\\n+  var_dump(@fsockopen($addr, 81, $errno, $errstr), $errstr);\\n+}\\n+--EXPECTF--\\n+== 127.0.0.1:80 ==\\n+bool(false)\\n+string(41) \\\"Failed to parse address \\\"127.0.0.1:80:81\\\"\\\"\\n+== tcp://127.0.0.1:80 ==\\n+bool(false)\\n+string(41) \\\"Failed to parse address \\\"127.0.0.1:80:81\\\"\\\"\\n+== [::1]:80 ==\\n+bool(false)\\n+string(37) \\\"Failed to parse address \\\"[::1]:80:81\\\"\\\"\\n+== tcp://[::1]:80 ==\\n+bool(false)\\n+string(37) \\\"Failed to parse address \\\"[::1]:80:81\\\"\\\"\\n+== localhost:80 ==\\n+bool(false)\\n+string(41) \\\"Failed to parse address \\\"localhost:80:81\\\"\\\"\\n+== tcp://localhost:80 ==\\n+bool(false)\\n+string(41) \\\"Failed to parse address \\\"localhost:80:81\\\"\\\"\\n\\\\ No newline at end of file\"}, {\"sha\": \"3ff64787aa147968261ad03c2daf85920784be81\", \"filename\": \"main/streams/xp_socket.c\", \"status\": \"modified\", \"additions\": 18, \"deletions\": 11, \"changes\": 29, \"blob_url\": \"https://github.com/php/php-src/blob/bab0b99f376dac9170ac81382a5ed526938d595a/main%2Fstreams%2Fxp_socket.c\", \"raw_url\": \"https://github.com/php/php-src/raw/bab0b99f376dac9170ac81382a5ed526938d595a/main%2Fstreams%2Fxp_socket.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/main%2Fstreams%2Fxp_socket.c?ref=bab0b99f376dac9170ac81382a5ed526938d595a\", \"patch\": \"@@ -571,37 +571,44 @@ static inline char *parse_ip_address_ex(const char *str, size_t str_len, int *po\\n \\tchar *host = NULL;\\n \\n #ifdef HAVE_IPV6\\n-\\tchar *p;\\n-\\n \\tif (*(str) == '[' && str_len > 1) {\\n \\t\\t/* IPV6 notation to specify raw address with port (i.e. [fe80::1]:80) */\\n-\\t\\tp = memchr(str + 1, ']', str_len - 2);\\n+\\t\\tchar *p = memchr(str + 1, ']', str_len - 2), *e = NULL;\\n \\t\\tif (!p || *(p + 1) != ':') {\\n \\t\\t\\tif (get_err) {\\n \\t\\t\\t\\t*err = strpprintf(0, \\\"Failed to parse IPv6 address \\\\\\\"%s\\\\\\\"\\\", str);\\n \\t\\t\\t}\\n \\t\\t\\treturn NULL;\\n \\t\\t}\\n-\\t\\t*portno = atoi(p + 2);\\n+\\t\\t*portno = strtol(p + 2, &e, 10);\\n+\\t\\tif (e && *e) {\\n+\\t\\t\\tif (get_err) {\\n+\\t\\t\\t\\t*err = strpprintf(0, \\\"Failed to parse address \\\\\\\"%s\\\\\\\"\\\", str);\\n+\\t\\t\\t}\\n+\\t\\t\\treturn NULL;\\n+\\t\\t}\\n \\t\\treturn estrndup(str + 1, p - str - 1);\\n \\t}\\n #endif\\n+\\n \\tif (str_len) {\\n \\t\\tcolon = memchr(str, ':', str_len - 1);\\n \\t} else {\\n \\t\\tcolon = NULL;\\n \\t}\\n+\\n \\tif (colon) {\\n-\\t\\t*portno = atoi(colon + 1);\\n-\\t\\thost = estrndup(str, colon - str);\\n-\\t} else {\\n-\\t\\tif (get_err) {\\n-\\t\\t\\t*err = strpprintf(0, \\\"Failed to parse address \\\\\\\"%s\\\\\\\"\\\", str);\\n+\\t\\tchar *e = NULL;\\n+\\t\\t*portno = strtol(colon + 1, &e, 10);\\n+\\t\\tif (!e || !*e) {\\n+\\t\\t\\treturn estrndup(str, colon - str);\\n \\t\\t}\\n-\\t\\treturn NULL;\\n \\t}\\n \\n-\\treturn host;\\n+\\tif (get_err) {\\n+\\t\\t*err = strpprintf(0, \\\"Failed to parse address \\\\\\\"%s\\\\\\\"\\\", str);\\n+\\t}\\n+\\treturn NULL;\\n }\\n \\n static inline char *parse_ip_address(php_stream_xport_param *xparam, int *portno)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvcGhwL3BocC1zcmMvY29tbWl0cy81MjNmMjMwYzgzMWQ3YjMzMzUzMjAzZmEzNGFlZTRlOTJhYzEyYmJhIg==.json", "commit": "https://api.github.com/repos/php/php-src/commits/523f230c831d7b33353203fa34aee4e92ac12bba", "content": "{\"sha\": \"523f230c831d7b33353203fa34aee4e92ac12bba\", \"node_id\": \"MDY6Q29tbWl0MTkwMzUyMjo1MjNmMjMwYzgzMWQ3YjMzMzUzMjAzZmEzNGFlZTRlOTJhYzEyYmJh\", \"commit\": {\"author\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2018-02-20T23:34:43Z\"}, \"committer\": {\"name\": \"Stanislav Malyshev\", \"email\": \"stas@php.net\", \"date\": \"2018-02-27T06:25:51Z\"}, \"message\": \"Fix bug #75981: prevent reading beyond buffer start\", \"tree\": {\"sha\": \"09ba7eef6800786eb6821b9c9ad4fd5a72d74b8c\", \"url\": \"https://api.github.com/repos/php/php-src/git/trees/09ba7eef6800786eb6821b9c9ad4fd5a72d74b8c\"}, \"url\": \"https://api.github.com/repos/php/php-src/git/commits/523f230c831d7b33353203fa34aee4e92ac12bba\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/php/php-src/commits/523f230c831d7b33353203fa34aee4e92ac12bba\", \"html_url\": \"https://github.com/php/php-src/commit/523f230c831d7b33353203fa34aee4e92ac12bba\", \"comments_url\": \"https://api.github.com/repos/php/php-src/commits/523f230c831d7b33353203fa34aee4e92ac12bba/comments\", \"author\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"smalyshev\", \"id\": 155000, \"node_id\": \"MDQ6VXNlcjE1NTAwMA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/155000?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/smalyshev\", \"html_url\": \"https://github.com/smalyshev\", \"followers_url\": \"https://api.github.com/users/smalyshev/followers\", \"following_url\": \"https://api.github.com/users/smalyshev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/smalyshev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/smalyshev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/smalyshev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/smalyshev/orgs\", \"repos_url\": \"https://api.github.com/users/smalyshev/repos\", \"events_url\": \"https://api.github.com/users/smalyshev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/smalyshev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1f4b057b631f9c9672cfd180090d8f52197bf806\", \"url\": \"https://api.github.com/repos/php/php-src/commits/1f4b057b631f9c9672cfd180090d8f52197bf806\", \"html_url\": \"https://github.com/php/php-src/commit/1f4b057b631f9c9672cfd180090d8f52197bf806\"}], \"stats\": {\"total\": 36, \"additions\": 34, \"deletions\": 2}, \"files\": [{\"sha\": \"78bd935a0e2bcf371980a15845f4ada578d5a188\", \"filename\": \"ext/standard/http_fopen_wrapper.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/php/php-src/blob/523f230c831d7b33353203fa34aee4e92ac12bba/ext%2Fstandard%2Fhttp_fopen_wrapper.c\", \"raw_url\": \"https://github.com/php/php-src/raw/523f230c831d7b33353203fa34aee4e92ac12bba/ext%2Fstandard%2Fhttp_fopen_wrapper.c\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Fhttp_fopen_wrapper.c?ref=523f230c831d7b33353203fa34aee4e92ac12bba\", \"patch\": \"@@ -737,9 +737,9 @@ php_stream *php_stream_url_wrap_http_ex(php_stream_wrapper *wrapper,\\n \\t\\t\\t\\t\\t\\t\\t\\ttmp_line, response_code);\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t\\tif (tmp_line[tmp_line_len - 1] == '\\\\n') {\\n+\\t\\t\\tif (tmp_line_len >= 1 && tmp_line[tmp_line_len - 1] == '\\\\n') {\\n \\t\\t\\t\\t--tmp_line_len;\\n-\\t\\t\\t\\tif (tmp_line[tmp_line_len - 1] == '\\\\r') {\\n+\\t\\t\\t\\tif (tmp_line_len >= 1 &&tmp_line[tmp_line_len - 1] == '\\\\r') {\\n \\t\\t\\t\\t\\t--tmp_line_len;\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\"}, {\"sha\": \"d415de66b9007bc1b335a3ef9964fd593c1f0e1a\", \"filename\": \"ext/standard/tests/http/bug75981.phpt\", \"status\": \"added\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/php/php-src/blob/523f230c831d7b33353203fa34aee4e92ac12bba/ext%2Fstandard%2Ftests%2Fhttp%2Fbug75981.phpt\", \"raw_url\": \"https://github.com/php/php-src/raw/523f230c831d7b33353203fa34aee4e92ac12bba/ext%2Fstandard%2Ftests%2Fhttp%2Fbug75981.phpt\", \"contents_url\": \"https://api.github.com/repos/php/php-src/contents/ext%2Fstandard%2Ftests%2Fhttp%2Fbug75981.phpt?ref=523f230c831d7b33353203fa34aee4e92ac12bba\", \"patch\": \"@@ -0,0 +1,32 @@\\n+--TEST--\\n+Bug #75981 (stack-buffer-overflow while parsing HTTP response)\\n+--INI--\\n+allow_url_fopen=1\\n+--SKIPIF--\\n+<?php require 'server.inc'; http_server_skipif('tcp://127.0.0.1:12342'); ?>\\n+--FILE--\\n+<?php\\n+require 'server.inc';\\n+\\n+$options = [\\n+  'http' => [\\n+    'protocol_version' => '1.1',\\n+    'header' => 'Connection: Close'\\n+  ],\\n+];\\n+\\n+$ctx = stream_context_create($options);\\n+\\n+$responses = [\\n+\\t\\\"data://text/plain,000000000100\\\\xA\\\\xA\\\"\\n+];\\n+$pid = http_server('tcp://127.0.0.1:12342', $responses);\\n+\\n+echo @file_get_contents('http://127.0.0.1:12342/', false, $ctx);\\n+\\n+http_server_kill($pid);\\n+\\n+?>\\n+DONE\\n+--EXPECT--\\n+DONE\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGlidXYvbGlidXYvY29tbWl0cy8wZjJkN2U3ODRhMjU2YjU0YjIzODUwNDM0Mzg4NDgwNDdiYzJhNjI5Ig==.json", "commit": "https://api.github.com/repos/libuv/libuv/commits/0f2d7e784a256b54b2385043438848047bc2a629", "content": "{\"sha\": \"0f2d7e784a256b54b2385043438848047bc2a629\", \"node_id\": \"C_kwDOAOIGQ9oAKDBmMmQ3ZTc4NGEyNTZiNTRiMjM4NTA0MzQzODg0ODA0N2JjMmE2Mjk\", \"commit\": {\"author\": {\"name\": \"Ben Noordhuis\", \"email\": \"info@bnoordhuis.nl\", \"date\": \"2024-01-18T13:51:40Z\"}, \"committer\": {\"name\": \"Santiago Gimeno\", \"email\": \"santiago.gimeno@gmail.com\", \"date\": \"2024-02-07T19:49:53Z\"}, \"message\": \"fix: always zero-terminate idna output\\n\\nFixes: https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6\", \"tree\": {\"sha\": \"a1f930a760c11c3d19f0dcea8aebd582f67429c2\", \"url\": \"https://api.github.com/repos/libuv/libuv/git/trees/a1f930a760c11c3d19f0dcea8aebd582f67429c2\"}, \"url\": \"https://api.github.com/repos/libuv/libuv/git/commits/0f2d7e784a256b54b2385043438848047bc2a629\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEYS8OrZQBYiN530QC8ow8jaM8A74FAmXD3uwACgkQ8ow8jaM8\\nA77Zpw//UDWUYAX3UEuqZy+21Swp3C3NvqajMIiyqtMqYSRStWwkgTe5HY1CUP/2\\nGYya3Q7AsLe6l/JoEFAXPno2yL2WS5AC46d6Xsu2BD+skkK6VPCt3gIkWqd25dUI\\nge3m+xC6OyfFS/c0iuAnqhkuSOMjs+Lp3vJqt1jsAeiPpjOEe3uxYGiRu3og1QGB\\nbOrpsum13OgUgPU+QCMSH5bPSexkuW9ThXlB2EKMoqcXdg6vylbEKHBcxWRCynOT\\nWOiU/LlHMQH/YTJWtwRfytlRmed7SbJQeJsUuX++y1fWSz6WPF2WT24BAz0bYv2B\\nYwsp1z2Wbpuh1RFEar1Tnn+zG1WnfI9YV8AnJ8y+AIw9nv5BZN6oPe+fTgc3/pZN\\nu6jHp2nkZDT75nQaKSo0QWnvDL714E0G5AopHebLO8Yk453ucvuAn/rY6rLxy/4t\\njdMJtbr/Wzc+UFNUnKVl/jEzRZjPSyqF5/k4GpKLrTn+dCXvI+qzDj0014Yulfva\\nnLWEyxnoTxjzRf82o0o6lz+0ltvKIMrQaJx/DvaZCEx7Ulq3KghN0m1iSHbQEbQh\\nUt5/qYB6WbBHY2TeyL04Y11rbbx4JK0xP3pQBcFazO6hr3UWDFYwmOJix9lP9MVO\\nLTB9wowa6dHKb5GmOTGLaLhK57vMN9EfXOknazdUzC3biJ2Unp4=\\n=p+Iq\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree a1f930a760c11c3d19f0dcea8aebd582f67429c2\\nparent bb6fbcf6e75201cebac30220366d4aff620b8765\\nauthor Ben Noordhuis <info@bnoordhuis.nl> 1705585900 +0100\\ncommitter Santiago Gimeno <santiago.gimeno@gmail.com> 1707335393 +0100\\n\\nfix: always zero-terminate idna output\\n\\nFixes: https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6\\n\"}}, \"url\": \"https://api.github.com/repos/libuv/libuv/commits/0f2d7e784a256b54b2385043438848047bc2a629\", \"html_url\": \"https://github.com/libuv/libuv/commit/0f2d7e784a256b54b2385043438848047bc2a629\", \"comments_url\": \"https://api.github.com/repos/libuv/libuv/commits/0f2d7e784a256b54b2385043438848047bc2a629/comments\", \"author\": {\"login\": \"bnoordhuis\", \"id\": 275871, \"node_id\": \"MDQ6VXNlcjI3NTg3MQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/275871?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bnoordhuis\", \"html_url\": \"https://github.com/bnoordhuis\", \"followers_url\": \"https://api.github.com/users/bnoordhuis/followers\", \"following_url\": \"https://api.github.com/users/bnoordhuis/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bnoordhuis/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bnoordhuis/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bnoordhuis/orgs\", \"repos_url\": \"https://api.github.com/users/bnoordhuis/repos\", \"events_url\": \"https://api.github.com/users/bnoordhuis/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bnoordhuis/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"santigimeno\", \"id\": 1084056, \"node_id\": \"MDQ6VXNlcjEwODQwNTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1084056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/santigimeno\", \"html_url\": \"https://github.com/santigimeno\", \"followers_url\": \"https://api.github.com/users/santigimeno/followers\", \"following_url\": \"https://api.github.com/users/santigimeno/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/santigimeno/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/santigimeno/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/santigimeno/subscriptions\", \"organizations_url\": \"https://api.github.com/users/santigimeno/orgs\", \"repos_url\": \"https://api.github.com/users/santigimeno/repos\", \"events_url\": \"https://api.github.com/users/santigimeno/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/santigimeno/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bb6fbcf6e75201cebac30220366d4aff620b8765\", \"url\": \"https://api.github.com/repos/libuv/libuv/commits/bb6fbcf6e75201cebac30220366d4aff620b8765\", \"html_url\": \"https://github.com/libuv/libuv/commit/bb6fbcf6e75201cebac30220366d4aff620b8765\"}], \"stats\": {\"total\": 9, \"additions\": 7, \"deletions\": 2}, \"files\": [{\"sha\": \"4638546d020e66b4078994a6fa096aee04487802\", \"filename\": \"src/idna.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/libuv/libuv/blob/0f2d7e784a256b54b2385043438848047bc2a629/src%2Fidna.c\", \"raw_url\": \"https://github.com/libuv/libuv/raw/0f2d7e784a256b54b2385043438848047bc2a629/src%2Fidna.c\", \"contents_url\": \"https://api.github.com/repos/libuv/libuv/contents/src%2Fidna.c?ref=0f2d7e784a256b54b2385043438848047bc2a629\", \"patch\": \"@@ -356,9 +356,10 @@ ssize_t uv__idna_toascii(const char* s, const char* se, char* d, char* de) {\\n       return rc;\\n   }\\n \\n-  if (d < de)\\n-    *d++ = '\\\\0';\\n+  if (d >= de)\\n+    return UV_EINVAL;\\n \\n+  *d++ = '\\\\0';\\n   return d - ds;  /* Number of bytes written. */\\n }\\n \"}, {\"sha\": \"5f8d696a7f093bb47f50f4c710b8c77ce2af267c\", \"filename\": \"test/test-idna.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/libuv/libuv/blob/0f2d7e784a256b54b2385043438848047bc2a629/test%2Ftest-idna.c\", \"raw_url\": \"https://github.com/libuv/libuv/raw/0f2d7e784a256b54b2385043438848047bc2a629/test%2Ftest-idna.c\", \"contents_url\": \"https://api.github.com/repos/libuv/libuv/contents/test%2Ftest-idna.c?ref=0f2d7e784a256b54b2385043438848047bc2a629\", \"patch\": \"@@ -100,6 +100,7 @@ TEST_IMPL(utf8_decode1) {\\n TEST_IMPL(utf8_decode1_overrun) {\\n   const char* p;\\n   char b[1];\\n+  char c[1];\\n \\n   /* Single byte. */\\n   p = b;\\n@@ -113,6 +114,9 @@ TEST_IMPL(utf8_decode1_overrun) {\\n   ASSERT_EQ((unsigned) -1, uv__utf8_decode1(&p, b + 1));\\n   ASSERT_PTR_EQ(p, b + 1);\\n \\n+  b[0] = 0x7F;\\n+  ASSERT_EQ(UV_EINVAL, uv__idna_toascii(b, b + 1, c, c + 1));\\n+\\n   return 0;\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGlidXYvbGlidXYvY29tbWl0cy8zNTMwYmNjMzAzNTBkNGE2Y2NmMzVkMmY3YjMzZTIzMjkyYjlkZTcwIg==.json", "commit": "https://api.github.com/repos/libuv/libuv/commits/3530bcc30350d4a6ccf35d2f7b33e23292b9de70", "content": "{\"sha\": \"3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"node_id\": \"C_kwDOAOIGQ9oAKDM1MzBiY2MzMDM1MGQ0YTZjY2YzNWQyZjdiMzNlMjMyOTJiOWRlNzA\", \"commit\": {\"author\": {\"name\": \"Ben Noordhuis\", \"email\": \"info@bnoordhuis.nl\", \"date\": \"2024-01-18T13:52:38Z\"}, \"committer\": {\"name\": \"Santiago Gimeno\", \"email\": \"santiago.gimeno@gmail.com\", \"date\": \"2024-02-07T19:50:04Z\"}, \"message\": \"fix: reject zero-length idna inputs\\n\\nFixes: https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6\", \"tree\": {\"sha\": \"fede83b65735fb3ab34667a03538c2b8bdefd037\", \"url\": \"https://api.github.com/repos/libuv/libuv/git/trees/fede83b65735fb3ab34667a03538c2b8bdefd037\"}, \"url\": \"https://api.github.com/repos/libuv/libuv/git/commits/3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEYS8OrZQBYiN530QC8ow8jaM8A74FAmXD3vQACgkQ8ow8jaM8\\nA77l9Q/+MZOA5J+kbd/iiQ3DoLMWdi3LqPB86NgqpCIIg/g2AB8PTyy8wLzquCVQ\\nnRIotZmAXsljpgoBMTFlcFHRs5ivjOA6JE1qimVP2owQc1xNSMaP8jmxsKmYUrTN\\nfQUFXUUX+fFuIkSB78rcKwguJ9OZeSINDrw+8WHHzI8TTCIqYbIIwqANvTwOEaJn\\nsi2bzfM8a4jGTjfA/xNU0AMa4sgc8zLTp0Ow2fCW+PcUUL9k3mWLS3TiBl1GA9S0\\ntpaU6CePCrx4woJEuZ5nLg3YS1vo3oPCeLOW9GObebYcqBtWFvtXnXOszyN35Pop\\nr5RrOKBo3EPUzGyHRoyDu4y/rSK4NcjPiEh12QU99x+J3Iniucmqpg95h95NCpkI\\n/F4ulqSJMHT03VCcaEMCNcUblNwCsiqNOvpyupstyr7IF6mjtEgOrQH81zeYzbJ0\\nIMf3B31JqtSK/0UBjpgOli1P0GelcNd+XX0xOeF04B9hROlS1GLHo1waTxlVq1aV\\nLuKU4mFW4neGYLQnziiCjKHjVs3m1OthUWG3U5nzEwB588iXU+wKGbQBth+Vunuf\\n3NR3LKF/xT2HCbRSWnr9dsww/F4gjkdm0878U+fFP1SLWcNmtgnrOeAy5o+CNk/d\\nmHLXZVHPae4jyB9TzobORPuae2BYLYUeEQTuvhXqcLD0wlKJlZM=\\n=ySMx\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree fede83b65735fb3ab34667a03538c2b8bdefd037\\nparent 0f2d7e784a256b54b2385043438848047bc2a629\\nauthor Ben Noordhuis <info@bnoordhuis.nl> 1705585958 +0100\\ncommitter Santiago Gimeno <santiago.gimeno@gmail.com> 1707335404 +0100\\n\\nfix: reject zero-length idna inputs\\n\\nFixes: https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6\\n\"}}, \"url\": \"https://api.github.com/repos/libuv/libuv/commits/3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"html_url\": \"https://github.com/libuv/libuv/commit/3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"comments_url\": \"https://api.github.com/repos/libuv/libuv/commits/3530bcc30350d4a6ccf35d2f7b33e23292b9de70/comments\", \"author\": {\"login\": \"bnoordhuis\", \"id\": 275871, \"node_id\": \"MDQ6VXNlcjI3NTg3MQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/275871?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bnoordhuis\", \"html_url\": \"https://github.com/bnoordhuis\", \"followers_url\": \"https://api.github.com/users/bnoordhuis/followers\", \"following_url\": \"https://api.github.com/users/bnoordhuis/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bnoordhuis/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bnoordhuis/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bnoordhuis/orgs\", \"repos_url\": \"https://api.github.com/users/bnoordhuis/repos\", \"events_url\": \"https://api.github.com/users/bnoordhuis/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bnoordhuis/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"santigimeno\", \"id\": 1084056, \"node_id\": \"MDQ6VXNlcjEwODQwNTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1084056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/santigimeno\", \"html_url\": \"https://github.com/santigimeno\", \"followers_url\": \"https://api.github.com/users/santigimeno/followers\", \"following_url\": \"https://api.github.com/users/santigimeno/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/santigimeno/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/santigimeno/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/santigimeno/subscriptions\", \"organizations_url\": \"https://api.github.com/users/santigimeno/orgs\", \"repos_url\": \"https://api.github.com/users/santigimeno/repos\", \"events_url\": \"https://api.github.com/users/santigimeno/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/santigimeno/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0f2d7e784a256b54b2385043438848047bc2a629\", \"url\": \"https://api.github.com/repos/libuv/libuv/commits/0f2d7e784a256b54b2385043438848047bc2a629\", \"html_url\": \"https://github.com/libuv/libuv/commit/0f2d7e784a256b54b2385043438848047bc2a629\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"efc5f283ce2ef98c80be023eb2ba5cb9a9a7e8b9\", \"filename\": \"src/idna.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/libuv/libuv/blob/3530bcc30350d4a6ccf35d2f7b33e23292b9de70/src%2Fidna.c\", \"raw_url\": \"https://github.com/libuv/libuv/raw/3530bcc30350d4a6ccf35d2f7b33e23292b9de70/src%2Fidna.c\", \"contents_url\": \"https://api.github.com/repos/libuv/libuv/contents/src%2Fidna.c?ref=3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"patch\": \"@@ -322,6 +322,9 @@ ssize_t uv__idna_toascii(const char* s, const char* se, char* d, char* de) {\\n   char* ds;\\n   int rc;\\n \\n+  if (s == se)\\n+    return UV_EINVAL;\\n+\\n   ds = d;\\n \\n   si = s;\"}, {\"sha\": \"3c4820f76592e6abf34f559c737d78354200a5dd\", \"filename\": \"test/test-idna.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/libuv/libuv/blob/3530bcc30350d4a6ccf35d2f7b33e23292b9de70/test%2Ftest-idna.c\", \"raw_url\": \"https://github.com/libuv/libuv/raw/3530bcc30350d4a6ccf35d2f7b33e23292b9de70/test%2Ftest-idna.c\", \"contents_url\": \"https://api.github.com/repos/libuv/libuv/contents/test%2Ftest-idna.c?ref=3530bcc30350d4a6ccf35d2f7b33e23292b9de70\", \"patch\": \"@@ -115,6 +115,7 @@ TEST_IMPL(utf8_decode1_overrun) {\\n   ASSERT_PTR_EQ(p, b + 1);\\n \\n   b[0] = 0x7F;\\n+  ASSERT_EQ(UV_EINVAL, uv__idna_toascii(b, b + 0, c, c + 1));\\n   ASSERT_EQ(UV_EINVAL, uv__idna_toascii(b, b + 1, c, c + 1));\\n \\n   return 0;\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvZDQ1N2M5NTQ1ZTdlNzFlYmI1YzA0NzllYjE2YjlkMzMxNzU4NTVlMiI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/d457c9545e7e71ebb5c0479eb16b9d33175855e2", "content": "{\"sha\": \"d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"node_id\": \"C_kwDOApC4O9oAKGQ0NTdjOTU0NWU3ZTcxZWJiNWMwNDc5ZWIxNmI5ZDMzMTc1ODU1ZTI\", \"commit\": {\"author\": {\"name\": \"Artem S. Povalyukhin\", \"email\": \"artem.povaluhin@gmail.com\", \"date\": \"2021-12-24T07:00:15Z\"}, \"committer\": {\"name\": \"Artem S. Povalyukhin\", \"email\": \"artem.povaluhin@gmail.com\", \"date\": \"2021-12-24T07:00:15Z\"}, \"message\": \"Added missing element in typeof table for DataView() type.\\n\\nPreviously, typeof operation for DataView object resulted\\nin out of bounds array accessing.\\n\\nThis fixes #450 issue on Github.\", \"tree\": {\"sha\": \"4610fb42a3fb66f8b10f950463f00cd7eee2ef91\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/4610fb42a3fb66f8b10f950463f00cd7eee2ef91\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"html_url\": \"https://github.com/nginx/njs/commit/d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/d457c9545e7e71ebb5c0479eb16b9d33175855e2/comments\", \"author\": {\"login\": \"drsm\", \"id\": 1048849, \"node_id\": \"MDQ6VXNlcjEwNDg4NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1048849?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/drsm\", \"html_url\": \"https://github.com/drsm\", \"followers_url\": \"https://api.github.com/users/drsm/followers\", \"following_url\": \"https://api.github.com/users/drsm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/drsm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/drsm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/drsm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/drsm/orgs\", \"repos_url\": \"https://api.github.com/users/drsm/repos\", \"events_url\": \"https://api.github.com/users/drsm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/drsm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"drsm\", \"id\": 1048849, \"node_id\": \"MDQ6VXNlcjEwNDg4NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1048849?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/drsm\", \"html_url\": \"https://github.com/drsm\", \"followers_url\": \"https://api.github.com/users/drsm/followers\", \"following_url\": \"https://api.github.com/users/drsm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/drsm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/drsm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/drsm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/drsm/orgs\", \"repos_url\": \"https://api.github.com/users/drsm/repos\", \"events_url\": \"https://api.github.com/users/drsm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/drsm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"61c91f55b925083246157ded44d54583025d115e\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/61c91f55b925083246157ded44d54583025d115e\", \"html_url\": \"https://github.com/nginx/njs/commit/61c91f55b925083246157ded44d54583025d115e\"}], \"stats\": {\"total\": 4, \"additions\": 4, \"deletions\": 0}, \"files\": [{\"sha\": \"7591125504f17ee88dfb2504a2bfc4c80ca9a458\", \"filename\": \"src/njs_vmcode.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/nginx/njs/blob/d457c9545e7e71ebb5c0479eb16b9d33175855e2/src%2Fnjs_vmcode.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/d457c9545e7e71ebb5c0479eb16b9d33175855e2/src%2Fnjs_vmcode.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_vmcode.c?ref=d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"patch\": \"@@ -1516,6 +1516,7 @@ njs_vmcode_typeof(njs_vm_t *vm, njs_value_t *value, njs_value_t *invld)\\n         &njs_string_object,\\n         &njs_string_object,\\n         &njs_string_object,\\n+        &njs_string_object,\\n     };\\n \\n     vm->retval = *types[value->type];\"}, {\"sha\": \"7470b4bd674b0f318e3a3ff73782f9bf2a315725\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/nginx/njs/blob/d457c9545e7e71ebb5c0479eb16b9d33175855e2/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/d457c9545e7e71ebb5c0479eb16b9d33175855e2/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=d457c9545e7e71ebb5c0479eb16b9d33175855e2\", \"patch\": \"@@ -6390,6 +6390,9 @@ static njs_unit_test_t  njs_test[] =\\n     { njs_str(\\\"(new DataView(new ArrayBuffer(3)))\\\"),\\n       njs_str(\\\"[object DataView]\\\") },\\n \\n+    { njs_str(\\\"var x = new ArrayBuffer(3); [typeof x, typeof new DataView(x)]\\\"),\\n+      njs_str(\\\"object,object\\\") },\\n+\\n     { njs_str(\\\"(new DataView(new ArrayBuffer(3))).buffer\\\"),\\n       njs_str(\\\"[object ArrayBuffer]\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvMzllOGZhMWI3ZGIxNjgwNjU0NTI3ZjhmYTBlOWVlOTNiMzM0ZWNiYSI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/39e8fa1b7db1680654527f8fa0e9ee93b334ecba", "content": "{\"sha\": \"39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"node_id\": \"C_kwDOApC4O9oAKDM5ZThmYTFiN2RiMTY4MDY1NDUyN2Y4ZmEwZTllZTkzYjMzNGVjYmE\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-01-19T14:03:49Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-01-19T14:03:49Z\"}, \"message\": \"Fixed Function.prototype.apply() with slow arrays.\\n\\nPreviously, the function had two issues:\\n   * array->start was referenced without checking for fast array flag\\n   * the created arguments list was not sanity-checked for its length,\\n     which can be very large.\\n\\nThe fix is to remove micro-optimization for arrays and introduce limit\\nsize for arguments list.\\n\\nThis closes #449 issue in Github.\", \"tree\": {\"sha\": \"a5cbfae5dc52ea2d1c05f5d4b4a13a8c8a8f27a2\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/a5cbfae5dc52ea2d1c05f5d4b4a13a8c8a8f27a2\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"html_url\": \"https://github.com/nginx/njs/commit/39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/39e8fa1b7db1680654527f8fa0e9ee93b334ecba/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6a40a85ff239497c6458c7dbef18f6a2736fe992\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/6a40a85ff239497c6458c7dbef18f6a2736fe992\", \"html_url\": \"https://github.com/nginx/njs/commit/6a40a85ff239497c6458c7dbef18f6a2736fe992\"}], \"stats\": {\"total\": 21, \"additions\": 11, \"deletions\": 10}, \"files\": [{\"sha\": \"ae0fa11ff8e2e6da6abab02ef7425c2c7686b4f2\", \"filename\": \"src/njs_function.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 10, \"changes\": 17, \"blob_url\": \"https://github.com/nginx/njs/blob/39e8fa1b7db1680654527f8fa0e9ee93b334ecba/src%2Fnjs_function.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/39e8fa1b7db1680654527f8fa0e9ee93b334ecba/src%2Fnjs_function.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_function.c?ref=39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"patch\": \"@@ -1385,18 +1385,10 @@ njs_function_prototype_apply(njs_vm_t *vm, njs_value_t *args, njs_uint_t nargs,\\n \\n     if (njs_is_null_or_undefined(arr_like)) {\\n         length = 0;\\n-\\n-        goto activate;\\n-\\n-    } else if (njs_is_array(arr_like)) {\\n-        arr = arr_like->data.u.array;\\n-\\n-        args = arr->start;\\n-        length = arr->length;\\n-\\n         goto activate;\\n+    }\\n \\n-    } else if (njs_slow_path(!njs_is_object(arr_like))) {\\n+    if (njs_slow_path(!njs_is_object(arr_like))) {\\n         njs_type_error(vm, \\\"second argument is not an array-like object\\\");\\n         return NJS_ERROR;\\n     }\\n@@ -1406,6 +1398,11 @@ njs_function_prototype_apply(njs_vm_t *vm, njs_value_t *args, njs_uint_t nargs,\\n         return ret;\\n     }\\n \\n+    if (njs_slow_path(length > 1024)) {\\n+        njs_internal_error(vm, \\\"argument list is too long\\\");\\n+        return NJS_ERROR;\\n+    }\\n+\\n     arr = njs_array_alloc(vm, 1, length, NJS_ARRAY_SPARE);\\n     if (njs_slow_path(arr == NULL)) {\\n         return NJS_ERROR;\"}, {\"sha\": \"35e2f13292caed3bffdf4f6652e624dc4b39d574\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/nginx/njs/blob/39e8fa1b7db1680654527f8fa0e9ee93b334ecba/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/39e8fa1b7db1680654527f8fa0e9ee93b334ecba/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=39e8fa1b7db1680654527f8fa0e9ee93b334ecba\", \"patch\": \"@@ -10063,6 +10063,10 @@ static njs_unit_test_t  njs_test[] =\\n                  \\\"f.apply(123, {})\\\"),\\n       njs_str(\\\"123\\\") },\\n \\n+    { njs_str(\\\"(function(index, ...rest){ return rest[index];})\\\"\\n+              \\\".apply({}, [1022].concat(Array(1023).fill(1).map((v,i)=>i.toString(16))))\\\"),\\n+      njs_str(\\\"3fe\\\") },\\n+\\n     { njs_str(\\\"String.prototype.concat.apply('a', \\\"\\n                  \\\"{length:2, 0:{toString:function() {return 'b'}}, 1:'c'})\\\"),\\n       njs_str(\\\"abc\\\") },\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvYWQ0ODcwNWJmMWYwNGI0MjIxYTVmNWIwNzcxNWFjNDhiMzE2MGQ1MyI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/ad48705bf1f04b4221a5f5b07715ac48b3160d53", "content": "{\"sha\": \"ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"node_id\": \"C_kwDOApC4O9oAKGFkNDg3MDViZjFmMDRiNDIyMWE1ZjViMDc3MTVhYzQ4YjMxNjBkNTM\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-02-21T16:52:59Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-02-21T16:52:59Z\"}, \"message\": \"Fixed frame allocation from an awaited frame.\\n\\nnjs_function_frame_save() is used to save the awaited frame when \\\"await\\\"\\ninstruction is encountered. The saving was done as a memcpy() of\\nexisting runtime frame.\\n\\nnjs_function_frame_alloc() is used to alloc a new function frame, this\\nfunction tries to use a spare preallocated memory from the previous\\nframe first.  Previously, this function might result in \\\"use-after-free\\\"\\nwhen invoked from a restored frame saved with njs_function_frame_save().\\nBecause njs_function_frame_save() left pointers to the spare memory of\\nthe original frame which may be already free when saved frame is\\nrestored.\\n\\nThe fix is to erase fields for the spare memory from the saved frame.\\n\\nThis closes #469 issue on Github.\", \"tree\": {\"sha\": \"33ff2dfac19e090037888601c451ff373903d884\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/33ff2dfac19e090037888601c451ff373903d884\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"html_url\": \"https://github.com/nginx/njs/commit/ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/ad48705bf1f04b4221a5f5b07715ac48b3160d53/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e673ae41a998d1391bd562edb2ed6d49db7cc716\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/e673ae41a998d1391bd562edb2ed6d49db7cc716\", \"html_url\": \"https://github.com/nginx/njs/commit/e673ae41a998d1391bd562edb2ed6d49db7cc716\"}], \"stats\": {\"total\": 32, \"additions\": 31, \"deletions\": 1}, \"files\": [{\"sha\": \"78857e01e50fa93dd7194ca326e56b8d0c1c6e89\", \"filename\": \"src/njs_function.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/nginx/njs/blob/ad48705bf1f04b4221a5f5b07715ac48b3160d53/src%2Fnjs_function.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/ad48705bf1f04b4221a5f5b07715ac48b3160d53/src%2Fnjs_function.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_function.c?ref=ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"patch\": \"@@ -811,9 +811,13 @@ njs_function_frame_save(njs_vm_t *vm, njs_frame_t *frame, u_char *pc)\\n     njs_native_frame_t  *active, *native;\\n \\n     *frame = *vm->active_frame;\\n+\\n     frame->previous_active_frame = NULL;\\n \\n     native = &frame->native;\\n+    native->size = 0;\\n+    native->free = NULL;\\n+    native->free_size = 0;\\n \\n     active = &vm->active_frame->native;\\n     value_count = njs_function_frame_value_count(active);\"}, {\"sha\": \"423e8d01ece6f9c31cf6684aa646d28e416b502c\", \"filename\": \"test/js/async_recursive_large.t.js\", \"status\": \"added\", \"additions\": 26, \"deletions\": 0, \"changes\": 26, \"blob_url\": \"https://github.com/nginx/njs/blob/ad48705bf1f04b4221a5f5b07715ac48b3160d53/test%2Fjs%2Fasync_recursive_large.t.js\", \"raw_url\": \"https://github.com/nginx/njs/raw/ad48705bf1f04b4221a5f5b07715ac48b3160d53/test%2Fjs%2Fasync_recursive_large.t.js\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/test%2Fjs%2Fasync_recursive_large.t.js?ref=ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"patch\": \"@@ -0,0 +1,26 @@\\n+/*---\\n+includes: [compareArray.js]\\n+flags: [async]\\n+---*/\\n+\\n+let stages = [];\\n+\\n+async function f(v) {\\n+    if (v == 1000) {\\n+        return;\\n+    }\\n+\\n+    stages.push(`f>${v}`);\\n+\\n+    await \\\"X\\\";\\n+\\n+    await f(v + 1);\\n+\\n+    stages.push(`f<${v}`);\\n+}\\n+\\n+f(0)\\n+.then(v => {\\n+    assert.sameValue(stages.length, 2000);\\n+})\\n+.then($DONE, $DONE);\"}, {\"sha\": \"6b67796298d6dca81fca1c58ed472fa7e4c3f36a\", \"filename\": \"test/js/async_recursive_mid.t.js\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/nginx/njs/blob/ad48705bf1f04b4221a5f5b07715ac48b3160d53/test%2Fjs%2Fasync_recursive_mid.t.js\", \"raw_url\": \"https://github.com/nginx/njs/raw/ad48705bf1f04b4221a5f5b07715ac48b3160d53/test%2Fjs%2Fasync_recursive_mid.t.js\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/test%2Fjs%2Fasync_recursive_mid.t.js?ref=ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"patch\": \"@@ -6,7 +6,7 @@ flags: [async]\\n let stages = [];\\n \\n async function f(v) {\\n-    if (v == 3) {\\n+    if (v == 1000) {\\n         return;\\n     }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvZjY1OTgxYjBiOGZjZjAyZDY5YTQwYmM5MzQ4MDNjMjVjOWY2MDdhYiI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/f65981b0b8fcf02d69a40bc934803c25c9f607ab", "content": "{\"sha\": \"f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"node_id\": \"C_kwDOApC4O9oAKGY2NTk4MWIwYjhmY2YwMmQ2OWE0MGJjOTM0ODAzYzI1YzlmNjA3YWI\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-02-21T16:53:16Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-02-21T16:53:16Z\"}, \"message\": \"Fixed allocation of large array literals.\\n\\nPreviously, allocation of large array literals may result in\\nnull-pointer dereference. The reason is that njs_array_alloc() may\\nreturn a slow array when size is large enough, but the instruction\\ncode assumes that array is always flat.\\n\\nThe fix is to check fast_array flag before accessing array->start.\\n\\nThis closes #473 issue on Github.\", \"tree\": {\"sha\": \"ccbc1b21efa013a15bed2b7e7b915949f4e725d1\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/ccbc1b21efa013a15bed2b7e7b915949f4e725d1\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"html_url\": \"https://github.com/nginx/njs/commit/f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/f65981b0b8fcf02d69a40bc934803c25c9f607ab/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/ad48705bf1f04b4221a5f5b07715ac48b3160d53\", \"html_url\": \"https://github.com/nginx/njs/commit/ad48705bf1f04b4221a5f5b07715ac48b3160d53\"}], \"stats\": {\"total\": 22, \"additions\": 14, \"deletions\": 8}, \"files\": [{\"sha\": \"ec478659cb14aae03441f35a494d7d653ba778a8\", \"filename\": \"src/njs_vmcode.c\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 8, \"changes\": 18, \"blob_url\": \"https://github.com/nginx/njs/blob/f65981b0b8fcf02d69a40bc934803c25c9f607ab/src%2Fnjs_vmcode.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/f65981b0b8fcf02d69a40bc934803c25c9f607ab/src%2Fnjs_vmcode.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_vmcode.c?ref=f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"patch\": \"@@ -1055,14 +1055,16 @@ njs_vmcode_array(njs_vm_t *vm, u_char *pc)\\n \\n         if (code->ctor) {\\n             /* Array of the form [,,,], [1,,]. */\\n-            value = array->start;\\n-            length = array->length;\\n-\\n-            do {\\n-                njs_set_invalid(value);\\n-                value++;\\n-                length--;\\n-            } while (length != 0);\\n+            if (array->object.fast_array) {\\n+                value = array->start;\\n+                length = array->length;\\n+\\n+                do {\\n+                    njs_set_invalid(value);\\n+                    value++;\\n+                    length--;\\n+                } while (length != 0);\\n+            }\\n \\n         } else {\\n             /* Array of the form [], [,,1], [1,2,3]. */\"}, {\"sha\": \"ef5b3ca452ce82445e01145cde9443fa4cd2907e\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/nginx/njs/blob/f65981b0b8fcf02d69a40bc934803c25c9f607ab/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/f65981b0b8fcf02d69a40bc934803c25c9f607ab/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=f65981b0b8fcf02d69a40bc934803c25c9f607ab\", \"patch\": \"@@ -13154,6 +13154,10 @@ static njs_unit_test_t  njs_test[] =\\n     { njs_str(\\\"(new Function('return 5' + '** 1'.repeat(2**13)))()\\\"),\\n       njs_str(\\\"5\\\") },\\n \\n+    { njs_str(\\\"var a = (new Function('return [' + ','.repeat(2**16) + ']'))();\\\"\\n+\\t\\t\\t  \\\"njs.dump(a)\\\"),\\n+      njs_str(\\\"[<65536 empty items>]\\\") },\\n+\\n     { njs_str(\\\"(new Function('var a = 7; return a' + '= a'.repeat(2**13)))()\\\"),\\n       njs_str(\\\"7\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvMjIyZDZmZGNmMGM2NDg1ZWM4ZTE3NWYzYTdiNzBkNjUwYzIzNGI0ZSI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e", "content": "{\"sha\": \"222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"node_id\": \"C_kwDOApC4O9oAKDIyMmQ2ZmRjZjBjNjQ4NWVjOGUxNzVmM2E3YjcwZDY1MGMyMzRiNGU\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-03-28T16:22:17Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-03-28T16:22:17Z\"}, \"message\": \"Fixed njs_vmcode_interpreter() when \\\"toString\\\" conversion fails.\\n\\nPreviously, while interpreting a user function, njs_vmcode_interpreter()\\nmight return prematurely when an error happens.  This is not correct\\nbecause the current frame has to be unwound (or exception caught)\\nfirst.\\n\\nThe fix is exit through only 5 appropriate exit points to ensure\\nproper unwinding.\\n\\nThis closes #467 issue on Github.\", \"tree\": {\"sha\": \"310db0e7e70329977387aad745dbce3fce1865df\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/310db0e7e70329977387aad745dbce3fce1865df\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"html_url\": \"https://github.com/nginx/njs/commit/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7723f9dc520f08d3a75adf5dac6556503a00ec87\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/7723f9dc520f08d3a75adf5dac6556503a00ec87\", \"html_url\": \"https://github.com/nginx/njs/commit/7723f9dc520f08d3a75adf5dac6556503a00ec87\"}], \"stats\": {\"total\": 19, \"additions\": 13, \"deletions\": 6}, \"files\": [{\"sha\": \"6b10200ee19eb8c17370f739b2db2a1c9ad9b71e\", \"filename\": \"src/njs_vmcode.c\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 6, \"changes\": 14, \"blob_url\": \"https://github.com/nginx/njs/blob/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e/src%2Fnjs_vmcode.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e/src%2Fnjs_vmcode.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_vmcode.c?ref=222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"patch\": \"@@ -700,7 +700,7 @@ njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,\\n                 ret = njs_object_prop_define(vm, value1, &name, function,\\n                                              accessor->type);\\n                 if (njs_slow_path(ret != NJS_OK)) {\\n-                    return NJS_ERROR;\\n+                    goto error;\\n                 }\\n \\n                 ret = sizeof(njs_vmcode_prop_accessor_t);\\n@@ -779,12 +779,12 @@ njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,\\n                 }\\n \\n                 if (njs_slow_path(!njs_is_function(&dst))) {\\n-                    ret = njs_value_to_key(vm, value2, value2);\\n+                    ret = njs_value_to_key(vm, &dst, value2);\\n                     if (njs_slow_path(ret != NJS_OK)) {\\n-                        return NJS_ERROR;\\n+                        goto error;\\n                     }\\n \\n-                    njs_key_string_get(vm, value2, &string);\\n+                    njs_key_string_get(vm, &dst, &string);\\n                     njs_type_error(vm,\\n                                \\\"(intermediate value)[\\\\\\\"%V\\\\\\\"] is not a function\\\",\\n                                &string);\\n@@ -950,7 +950,8 @@ njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,\\n                 if (njs_is_valid(value1)) {\\n                     value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));\\n                     if (njs_slow_path(value1 == NULL)) {\\n-                        return NJS_ERROR;\\n+                        njs_memory_error(vm);\\n+                        goto error;\\n                     }\\n \\n                     njs_scope_value_set(vm, var->dst, value1);\\n@@ -967,7 +968,8 @@ njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,\\n \\n                 value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));\\n                 if (njs_slow_path(value1 == NULL)) {\\n-                    return NJS_ERROR;\\n+                    njs_memory_error(vm);\\n+                    goto error;\\n                 }\\n \\n                 *value1 = *value2;\"}, {\"sha\": \"186defa1afd405d8ae3bd41a484ac1c98584b64f\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/nginx/njs/blob/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"patch\": \"@@ -3409,6 +3409,11 @@ static njs_unit_test_t  njs_test[] =\\n \\n     /**/\\n \\n+    { njs_str(\\\"function f() { Object.prototype.toString = 1; };\\\"\\n+              \\\"Object.prototype.toString = f;\\\"\\n+              \\\"(function () { try { 's'[{}](); } catch (e) { throw e; } })()\\\"),\\n+      njs_str(\\\"TypeError: Cannot convert object to primitive value\\\") },\\n+\\n     { njs_str(\\\"var i; for (i = 0; i < 10; i++) { i += 1 } i\\\"),\\n       njs_str(\\\"10\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvYWIxNzAyYzdhZjk5NTkzNjZhNWRkYzRhNzViNDM1N2Q0ZTllYmRjMSI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1", "content": "{\"sha\": \"ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"node_id\": \"C_kwDOApC4O9oAKGFiMTcwMmM3YWY5OTU5MzY2YTVkZGM0YTc1YjQzNTdkNGU5ZWJkYzE\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-11T22:55:14Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-11T22:55:14Z\"}, \"message\": \"Fixed typo while calculating module path length.\\n\\nThe issue was introduced in 77c398f26d7e (not released yet).\", \"tree\": {\"sha\": \"8c8effedb34d5db3f5b59e7f7455aea92a22970e\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/8c8effedb34d5db3f5b59e7f7455aea92a22970e\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"html_url\": \"https://github.com/nginx/njs/commit/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\", \"html_url\": \"https://github.com/nginx/njs/commit/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"78206b3babe3b0da6df7cc5a9279ed738478bdee\", \"filename\": \"src/njs_module.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/nginx/njs/blob/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1/src%2Fnjs_module.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1/src%2Fnjs_module.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_module.c?ref=ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"patch\": \"@@ -118,7 +118,7 @@ njs_module_path(njs_vm_t *vm, const njs_str_t *dir, njs_module_info_t *info)\\n     length = info->name.length;\\n \\n     if (dir != NULL) {\\n-        length = dir->length;\\n+        length += dir->length;\\n \\n         if (length == 0) {\\n             return NJS_DECLINED;\"}, {\"sha\": \"a2a3ebff54f593c2933c97e0327c0238fc3ae316\", \"filename\": \"test/js/import_very_long_path.t.js\", \"status\": \"added\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/nginx/njs/blob/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1/test%2Fjs%2Fimport_very_long_path.t.js\", \"raw_url\": \"https://github.com/nginx/njs/raw/ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1/test%2Fjs%2Fimport_very_long_path.t.js\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/test%2Fjs%2Fimport_very_long_path.t.js?ref=ab1702c7af9959366a5ddc4a75b4357d4e9ebdc1\", \"patch\": \"@@ -0,0 +1,9 @@\\n+/*---\\n+: []\\n+paths: [test/js/module/]\\n+negative:\\n+  phase: runtime\\n+---*/\\n+\\n+import name from 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';\\n+ \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvOGIzOWFmZGFkOWEwNzYxZTBhNWQ0YWYxYTc2MmJkOWE2ZGFlZjU3MiI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/8b39afdad9a0761e0a5d4af1a762bd9a6daef572", "content": "{\"sha\": \"8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"node_id\": \"C_kwDOApC4O9oAKDhiMzlhZmRhZDlhMDc2MWUwYTVkNGFmMWE3NjJiZDlhNmRhZWY1NzI\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-23T00:02:28Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-23T00:02:28Z\"}, \"message\": \"Fixed Array.prototype.sort() when arr size is changed in a comparator.\\n\\nThis fixed #468 issue on Github.\", \"tree\": {\"sha\": \"71188c99059458e65e85a15a8d85901977290988\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/71188c99059458e65e85a15a8d85901977290988\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"html_url\": \"https://github.com/nginx/njs/commit/8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/8b39afdad9a0761e0a5d4af1a762bd9a6daef572/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"675049dc2ce07a06d5e6d65ab8664e49c7659d3a\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/675049dc2ce07a06d5e6d65ab8664e49c7659d3a\", \"html_url\": \"https://github.com/nginx/njs/commit/675049dc2ce07a06d5e6d65ab8664e49c7659d3a\"}], \"stats\": {\"total\": 5, \"additions\": 4, \"deletions\": 1}, \"files\": [{\"sha\": \"0b8c7b919787cb10226b2af91f8aed02c3406920\", \"filename\": \"src/njs_array.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/nginx/njs/blob/8b39afdad9a0761e0a5d4af1a762bd9a6daef572/src%2Fnjs_array.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/8b39afdad9a0761e0a5d4af1a762bd9a6daef572/src%2Fnjs_array.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_array.c?ref=8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"patch\": \"@@ -2696,7 +2696,7 @@ njs_array_prototype_sort(njs_vm_t *vm, njs_value_t *args, njs_uint_t nargs,\\n         goto exception;\\n     }\\n \\n-    if (njs_fast_path(fast_path)) {\\n+    if (njs_fast_path(fast_path && njs_is_fast_array(this))) {\\n         array = njs_array(this);\\n         start = array->start;\\n \"}, {\"sha\": \"25e066c3205408922b140d86ba5f863dea36f852\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/nginx/njs/blob/8b39afdad9a0761e0a5d4af1a762bd9a6daef572/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/8b39afdad9a0761e0a5d4af1a762bd9a6daef572/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"patch\": \"@@ -6989,6 +6989,9 @@ static njs_unit_test_t  njs_test[] =\\n     { njs_str(\\\"[1,2].sort(1)\\\"),\\n       njs_str(\\\"TypeError: comparefn must be callable or undefined\\\") },\\n \\n+    { njs_str(\\\"var a = [1,2]; a.sort(() => {a.length = 65535}); a.length\\\"),\\n+      njs_str(\\\"65535\\\") },\\n+\\n     /*\\n       Array.prototype.keys()\\n       Array.prototype.values()\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvMmUwMGU5NTQ3Mzg2MTg0NmFhODUzOGJlODdkYjA3Njk5ZDlmNjc2ZCI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/2e00e95473861846aa8538be87db07699d9f676d", "content": "{\"sha\": \"2e00e95473861846aa8538be87db07699d9f676d\", \"node_id\": \"C_kwDOApC4O9oAKDJlMDBlOTU0NzM4NjE4NDZhYTg1MzhiZTg3ZGIwNzY5OWQ5ZjY3NmQ\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-23T00:02:36Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-23T00:02:36Z\"}, \"message\": \"Fixed Array.prototype.slice() with slow \\\"this\\\" argument.\\n\\nPreviously, when \\\"this\\\" argument was not a fast array, but the \\\"deleted\\\" array\\nwas a fast array, the \\\"deleted\\\" array may be left in uninitialized state if\\n\\\"this\\\" argument had gaps.\\n\\nThis fix is to ensure that \\\"deleted\\\" is properly initialized.\\n\\nThis fixes #485 issue on Github.\", \"tree\": {\"sha\": \"fca7be16cd6dc3878a41afe512943724fc6a0bdf\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/fca7be16cd6dc3878a41afe512943724fc6a0bdf\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/2e00e95473861846aa8538be87db07699d9f676d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/2e00e95473861846aa8538be87db07699d9f676d\", \"html_url\": \"https://github.com/nginx/njs/commit/2e00e95473861846aa8538be87db07699d9f676d\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/2e00e95473861846aa8538be87db07699d9f676d/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/8b39afdad9a0761e0a5d4af1a762bd9a6daef572\", \"html_url\": \"https://github.com/nginx/njs/commit/8b39afdad9a0761e0a5d4af1a762bd9a6daef572\"}], \"stats\": {\"total\": 14, \"additions\": 14, \"deletions\": 0}, \"files\": [{\"sha\": \"2ceb6be7e6b3725dad533a34a56ac60e7a8c2523\", \"filename\": \"src/njs_array.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/nginx/njs/blob/2e00e95473861846aa8538be87db07699d9f676d/src%2Fnjs_array.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/2e00e95473861846aa8538be87db07699d9f676d/src%2Fnjs_array.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_array.c?ref=2e00e95473861846aa8538be87db07699d9f676d\", \"patch\": \"@@ -1284,6 +1284,11 @@ njs_array_prototype_splice(njs_vm_t *vm, njs_value_t *args, njs_uint_t nargs,\\n                 if (njs_slow_path(ret == NJS_ERROR)) {\\n                     return ret;\\n                 }\\n+\\n+            } else {\\n+                if (deleted->object.fast_array) {\\n+                    njs_set_invalid(&deleted->start[i]);\\n+                }\\n             }\\n         }\\n \"}, {\"sha\": \"b28e34fef98bb76c8f08c55da6905fb7281ec480\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/nginx/njs/blob/2e00e95473861846aa8538be87db07699d9f676d/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/2e00e95473861846aa8538be87db07699d9f676d/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=2e00e95473861846aa8538be87db07699d9f676d\", \"patch\": \"@@ -4869,6 +4869,15 @@ static njs_unit_test_t  njs_test[] =\\n               \\\"Array.prototype.splice.call(obj, 2**53-2, 0, 'C');\\\"),\\n       njs_str(\\\"TypeError: Invalid length\\\") },\\n \\n+    { njs_str(\\\"var a = {1: 'B', length: 2};\\\"\\n+              \\\"Array.prototype.splice.call(a, 0)\\\"),\\n+      njs_str(\\\",B\\\") },\\n+\\n+    { njs_str(\\\"var a = new Uint8Array();\\\"\\n+              \\\"a.__proto__ = [1,2,3];\\\"\\n+              \\\"a.splice(0)\\\"),\\n+      njs_str(\\\",,\\\") },\\n+\\n     { njs_str(\\\"var a = []; a.reverse()\\\"),\\n       njs_str(\\\"\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvZWFmZTRjN2EzMjZiMTYzNjEyZjEwODYxMzkyNjIyYjVkYTViMTc5MiI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/eafe4c7a326b163612f10861392622b5da5b1792", "content": "{\"sha\": \"eafe4c7a326b163612f10861392622b5da5b1792\", \"node_id\": \"C_kwDOApC4O9oAKGVhZmU0YzdhMzI2YjE2MzYxMmYxMDg2MTM5MjYyMmI1ZGE1YjE3OTI\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-27T23:31:00Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-04-27T23:31:00Z\"}, \"message\": \"Fixed Array.prototype.lastIndexOf() with unicode string as \\\"this\\\".\\n\\nPreviously, when lastIndexOf() was called with unicode string as \\\"this\\\"\\nargument and a negative \\\"fromIndex\\\" argument null-pointer dererence\\nmight occur because njs_string_offset() was called with invalid index\\nvalue whereas njs_string_offset() should always be called with valid\\nindex argument.\\n\\nThe fix is to verify that from index is valid.\\n\\nThis closes #482 issue on Github.\", \"tree\": {\"sha\": \"1ff60f8be5dc3154f42ec9c6d6605933049226fb\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/1ff60f8be5dc3154f42ec9c6d6605933049226fb\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/eafe4c7a326b163612f10861392622b5da5b1792\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/eafe4c7a326b163612f10861392622b5da5b1792\", \"html_url\": \"https://github.com/nginx/njs/commit/eafe4c7a326b163612f10861392622b5da5b1792\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/eafe4c7a326b163612f10861392622b5da5b1792/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"982100ba56798dfc487ec9d792ce91916e14c5cc\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/982100ba56798dfc487ec9d792ce91916e14c5cc\", \"html_url\": \"https://github.com/nginx/njs/commit/982100ba56798dfc487ec9d792ce91916e14c5cc\"}], \"stats\": {\"total\": 12, \"additions\": 9, \"deletions\": 3}, \"files\": [{\"sha\": \"043e4483c7f5848bf65d5d6b24c62c9d0b5e4b24\", \"filename\": \"src/njs_iterator.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 3, \"changes\": 9, \"blob_url\": \"https://github.com/nginx/njs/blob/eafe4c7a326b163612f10861392622b5da5b1792/src%2Fnjs_iterator.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/eafe4c7a326b163612f10861392622b5da5b1792/src%2Fnjs_iterator.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_iterator.c?ref=eafe4c7a326b163612f10861392622b5da5b1792\", \"patch\": \"@@ -560,11 +560,14 @@ njs_object_iterate_reverse(njs_vm_t *vm, njs_iterator_args_t *args,\\n         } else {\\n             /* UTF-8 string. */\\n \\n-            p = njs_string_offset(string_prop.start, end, from);\\n-            p = njs_utf8_next(p, end);\\n-\\n+            p = NULL;\\n             i = from + 1;\\n \\n+            if (i > to) {\\n+                p = njs_string_offset(string_prop.start, end, from);\\n+                p = njs_utf8_next(p, end);\\n+            }\\n+\\n             while (i-- > to) {\\n                 pos = njs_utf8_prev(p);\\n \"}, {\"sha\": \"0b73c77b36683298f30d9a07898fbca775f8c9e5\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/nginx/njs/blob/eafe4c7a326b163612f10861392622b5da5b1792/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/eafe4c7a326b163612f10861392622b5da5b1792/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=eafe4c7a326b163612f10861392622b5da5b1792\", \"patch\": \"@@ -5103,6 +5103,9 @@ static njs_unit_test_t  njs_test[] =\\n     { njs_str(\\\"Array.prototype.lastIndexOf.call({0:'undefined', length:0}, 'undefined')\\\"),\\n       njs_str(\\\"-1\\\") },\\n \\n+    { njs_str(\\\"[1,0,-1,-2].map(v => Array.prototype.lastIndexOf.call('\\u0424', '\\u0424', v))\\\"),\\n+      njs_str(\\\"0,0,0,-1\\\") },\\n+\\n     { njs_str(\\\"[''].lastIndexOf.call('00000000000000000000000000000\\u043000')\\\"),\\n       njs_str(\\\"-1\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvODFhZjI2MzY0YzIxYzE5NmRkMjFmYjVlMTRjN2ZhOWNlN2RlYmQxNyI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/81af26364c21c196dd21fb5e14c7fa9ce7debd17", "content": "{\"sha\": \"81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"node_id\": \"C_kwDOApC4O9oAKDgxYWYyNjM2NGMyMWMxOTZkZDIxZmI1ZTE0YzdmYTljZTdkZWJkMTc\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-05-07T01:55:07Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-05-07T01:55:07Z\"}, \"message\": \"Fixed Object.defineProperty() when a recursive descriptor is provided.\\n\\nThis closes #481 issue on Github.\", \"tree\": {\"sha\": \"67d6847aee7a35c5cc7e85a1333dc95c47c36bf8\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/67d6847aee7a35c5cc7e85a1333dc95c47c36bf8\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"html_url\": \"https://github.com/nginx/njs/commit/81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/81af26364c21c196dd21fb5e14c7fa9ce7debd17/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"99239ae377a71a4c79213f4be69d828c399e23da\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/99239ae377a71a4c79213f4be69d828c399e23da\", \"html_url\": \"https://github.com/nginx/njs/commit/99239ae377a71a4c79213f4be69d828c399e23da\"}], \"stats\": {\"total\": 14, \"additions\": 14, \"deletions\": 0}, \"files\": [{\"sha\": \"2367420dcbdcbbe794e631ce3c3889c984a586d7\", \"filename\": \"src/njs_array.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/nginx/njs/blob/81af26364c21c196dd21fb5e14c7fa9ce7debd17/src%2Fnjs_array.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/81af26364c21c196dd21fb5e14c7fa9ce7debd17/src%2Fnjs_array.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_array.c?ref=81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"patch\": \"@@ -142,6 +142,10 @@ njs_array_convert_to_slow_array(njs_vm_t *vm, njs_array_t *array)\\n     njs_value_t        index, value;\\n     njs_object_prop_t  *prop;\\n \\n+    if (njs_slow_path(!array->object.fast_array)) {\\n+        return NJS_OK;\\n+    }\\n+\\n     njs_set_array(&value, array);\\n     array->object.fast_array = 0;\\n \"}, {\"sha\": \"77ec044e1b711207d871c9168322e064e64dcac0\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/nginx/njs/blob/81af26364c21c196dd21fb5e14c7fa9ce7debd17/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/81af26364c21c196dd21fb5e14c7fa9ce7debd17/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"patch\": \"@@ -13837,6 +13837,16 @@ static njs_unit_test_t  njs_test[] =\\n               \\\"d.enumerable && d.writable && d.configurable\\\"),\\n       njs_str(\\\"true\\\") },\\n \\n+    { njs_str(\\\"const arr = [1,2];\\\"\\n+              \\\"function f(arg) {\\\"\\n+              \\\"        const desc = {get: arg};\\\"\\n+              \\\"        Object.defineProperty(desc, 'set', desc);\\\"\\n+              \\\"        Object.defineProperty(arr, 1, desc);\\\"\\n+              \\\"}\\\"\\n+              \\\"f(f);\\\"\\n+              \\\"njs.dump(arr)\\\"),\\n+      njs_str(\\\"[1,'[Getter]']\\\") },\\n+\\n     { njs_str(\\\"Object.defineProperties()\\\"),\\n       njs_str(\\\"TypeError: Object.defineProperties is called on non-object\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmdpbngvbmpzL2NvbW1pdHMvNWM2MTMwYTJhMGI0YzQxYWI0MTVmNmI4OTkyYWEzMjM2MzYzMzhiOSI=.json", "commit": "https://api.github.com/repos/nginx/njs/commits/5c6130a2a0b4c41ab415f6b8992aa323636338b9", "content": "{\"sha\": \"5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"node_id\": \"C_kwDOApC4O9oAKDVjNjEzMGEyYTBiNGM0MWFiNDE1ZjZiODk5MmFhMzIzNjM2MzM4Yjk\", \"commit\": {\"author\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-05-07T01:55:35Z\"}, \"committer\": {\"name\": \"Dmitry Volyntsev\", \"email\": \"xeioex@nginx.com\", \"date\": \"2022-05-07T01:55:35Z\"}, \"message\": \"Fixed Array.prototype.fill() for typed-arrays.\\n\\nThis closes #478 issue on Github.\", \"tree\": {\"sha\": \"49a4ab0fcdbf37d2d4ec2de6e03523c7c16b664d\", \"url\": \"https://api.github.com/repos/nginx/njs/git/trees/49a4ab0fcdbf37d2d4ec2de6e03523c7c16b664d\"}, \"url\": \"https://api.github.com/repos/nginx/njs/git/commits/5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nginx/njs/commits/5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"html_url\": \"https://github.com/nginx/njs/commit/5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"comments_url\": \"https://api.github.com/repos/nginx/njs/commits/5c6130a2a0b4c41ab415f6b8992aa323636338b9/comments\", \"author\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"xeioex\", \"id\": 1216287, \"node_id\": \"MDQ6VXNlcjEyMTYyODc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1216287?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/xeioex\", \"html_url\": \"https://github.com/xeioex\", \"followers_url\": \"https://api.github.com/users/xeioex/followers\", \"following_url\": \"https://api.github.com/users/xeioex/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/xeioex/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/xeioex/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/xeioex/subscriptions\", \"organizations_url\": \"https://api.github.com/users/xeioex/orgs\", \"repos_url\": \"https://api.github.com/users/xeioex/repos\", \"events_url\": \"https://api.github.com/users/xeioex/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/xeioex/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"url\": \"https://api.github.com/repos/nginx/njs/commits/81af26364c21c196dd21fb5e14c7fa9ce7debd17\", \"html_url\": \"https://github.com/nginx/njs/commit/81af26364c21c196dd21fb5e14c7fa9ce7debd17\"}], \"stats\": {\"total\": 5, \"additions\": 3, \"deletions\": 2}, \"files\": [{\"sha\": \"2e8b0c8983f7f92414b57246b4eb1c010f89b929\", \"filename\": \"src/njs_typed_array.c\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 2, \"changes\": 2, \"blob_url\": \"https://github.com/nginx/njs/blob/5c6130a2a0b4c41ab415f6b8992aa323636338b9/src%2Fnjs_typed_array.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/5c6130a2a0b4c41ab415f6b8992aa323636338b9/src%2Fnjs_typed_array.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Fnjs_typed_array.c?ref=5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"patch\": \"@@ -702,8 +702,6 @@ njs_typed_array_set_value(njs_vm_t *vm, njs_typed_array_t *array,\\n \\n     njs_typed_array_prop_set(vm, array, index, num);\\n \\n-    njs_set_number(setval, num);\\n-\\n     return NJS_OK;\\n }\\n \"}, {\"sha\": \"490c0773f161278b9d9572fe90e28a159ccafaad\", \"filename\": \"src/test/njs_unit_test.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/nginx/njs/blob/5c6130a2a0b4c41ab415f6b8992aa323636338b9/src%2Ftest%2Fnjs_unit_test.c\", \"raw_url\": \"https://github.com/nginx/njs/raw/5c6130a2a0b4c41ab415f6b8992aa323636338b9/src%2Ftest%2Fnjs_unit_test.c\", \"contents_url\": \"https://api.github.com/repos/nginx/njs/contents/src%2Ftest%2Fnjs_unit_test.c?ref=5c6130a2a0b4c41ab415f6b8992aa323636338b9\", \"patch\": \"@@ -5409,6 +5409,9 @@ static njs_unit_test_t  njs_test[] =\\n                  \\\"Array.prototype.fill.call(o, 2).a\\\"),\\n       njs_str(\\\"4\\\") },\\n \\n+    { njs_str(\\\"Array.prototype.fill.call(new Int32Array(1))\\\"),\\n+      njs_str(\\\"0\\\") },\\n+\\n     { njs_str(\\\"ArrayBuffer()\\\"),\\n       njs_str(\\\"TypeError: Constructor ArrayBuffer requires 'new'\\\") },\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MveWhpcm9zZS9jcHAtcGVnbGliL2NvbW1pdHMvYjNiMjljZThmM2FjZjNhMzI3MzNkOTMwMTA1YTE3ZDdiMGJhMzQ3ZSI=.json", "commit": "https://api.github.com/repos/yhirose/cpp-peglib/commits/b3b29ce8f3acf3a32733d930105a17d7b0ba347e", "content": "{\"sha\": \"b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"node_id\": \"MDY6Q29tbWl0MzA0NzAzNjA6YjNiMjljZThmM2FjZjNhMzI3MzNkOTMwMTA1YTE3ZDdiMGJhMzQ3ZQ==\", \"commit\": {\"author\": {\"name\": \"yhirose\", \"email\": \"yuji.hirose.bug@gmail.com\", \"date\": \"2020-08-07T17:35:48Z\"}, \"committer\": {\"name\": \"yhirose\", \"email\": \"yuji.hirose.bug@gmail.com\", \"date\": \"2020-08-07T17:42:51Z\"}, \"message\": \"Fix #122\", \"tree\": {\"sha\": \"8d22dc63dd89d6aed760c10f46bacc284e1fd434\", \"url\": \"https://api.github.com/repos/yhirose/cpp-peglib/git/trees/8d22dc63dd89d6aed760c10f46bacc284e1fd434\"}, \"url\": \"https://api.github.com/repos/yhirose/cpp-peglib/git/commits/b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/yhirose/cpp-peglib/commits/b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"html_url\": \"https://github.com/yhirose/cpp-peglib/commit/b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"comments_url\": \"https://api.github.com/repos/yhirose/cpp-peglib/commits/b3b29ce8f3acf3a32733d930105a17d7b0ba347e/comments\", \"author\": {\"login\": \"yhirose\", \"id\": 357397, \"node_id\": \"MDQ6VXNlcjM1NzM5Nw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/357397?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/yhirose\", \"html_url\": \"https://github.com/yhirose\", \"followers_url\": \"https://api.github.com/users/yhirose/followers\", \"following_url\": \"https://api.github.com/users/yhirose/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/yhirose/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/yhirose/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/yhirose/subscriptions\", \"organizations_url\": \"https://api.github.com/users/yhirose/orgs\", \"repos_url\": \"https://api.github.com/users/yhirose/repos\", \"events_url\": \"https://api.github.com/users/yhirose/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/yhirose/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"yhirose\", \"id\": 357397, \"node_id\": \"MDQ6VXNlcjM1NzM5Nw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/357397?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/yhirose\", \"html_url\": \"https://github.com/yhirose\", \"followers_url\": \"https://api.github.com/users/yhirose/followers\", \"following_url\": \"https://api.github.com/users/yhirose/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/yhirose/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/yhirose/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/yhirose/subscriptions\", \"organizations_url\": \"https://api.github.com/users/yhirose/orgs\", \"repos_url\": \"https://api.github.com/users/yhirose/repos\", \"events_url\": \"https://api.github.com/users/yhirose/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/yhirose/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d84c2993af4335e2bfb1873ee631cb1eea803d15\", \"url\": \"https://api.github.com/repos/yhirose/cpp-peglib/commits/d84c2993af4335e2bfb1873ee631cb1eea803d15\", \"html_url\": \"https://github.com/yhirose/cpp-peglib/commit/d84c2993af4335e2bfb1873ee631cb1eea803d15\"}], \"stats\": {\"total\": 17, \"additions\": 14, \"deletions\": 3}, \"files\": [{\"sha\": \"89f9abcff60269773a09a2520733110701ec8a94\", \"filename\": \"peglib.h\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/yhirose/cpp-peglib/blob/b3b29ce8f3acf3a32733d930105a17d7b0ba347e/peglib.h\", \"raw_url\": \"https://github.com/yhirose/cpp-peglib/raw/b3b29ce8f3acf3a32733d930105a17d7b0ba347e/peglib.h\", \"contents_url\": \"https://api.github.com/repos/yhirose/cpp-peglib/contents/peglib.h?ref=b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"patch\": \"@@ -180,11 +180,11 @@ inline size_t codepoint_length(const char *s8, size_t l) {\\n     auto b = static_cast<uint8_t>(s8[0]);\\n     if ((b & 0x80) == 0) {\\n       return 1;\\n-    } else if ((b & 0xE0) == 0xC0) {\\n+    } else if ((b & 0xE0) == 0xC0 && l >= 2) {\\n       return 2;\\n-    } else if ((b & 0xF0) == 0xE0) {\\n+    } else if ((b & 0xF0) == 0xE0 && l >= 3) {\\n       return 3;\\n-    } else if ((b & 0xF8) == 0xF0) {\\n+    } else if ((b & 0xF8) == 0xF0 && l >= 4) {\\n       return 4;\\n     }\\n   }\"}, {\"sha\": \"a583e8189ac5f00d6ffe37c12e9aff8f7152f05d\", \"filename\": \"test/test1.cc\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/yhirose/cpp-peglib/blob/b3b29ce8f3acf3a32733d930105a17d7b0ba347e/test%2Ftest1.cc\", \"raw_url\": \"https://github.com/yhirose/cpp-peglib/raw/b3b29ce8f3acf3a32733d930105a17d7b0ba347e/test%2Ftest1.cc\", \"contents_url\": \"https://api.github.com/repos/yhirose/cpp-peglib/contents/test%2Ftest1.cc?ref=b3b29ce8f3acf3a32733d930105a17d7b0ba347e\", \"patch\": \"@@ -45,6 +45,17 @@ TEST_CASE(\\\"Start rule with ignore operator test\\\", \\\"[general]\\\")\\n     REQUIRE(ret == false);\\n }\\n \\n+TEST_CASE(\\\"Invalid UTF-8 text test\\\", \\\"[general]\\\")\\n+{\\n+    std::string s = \\\"a <- '\\\";\\n+    s += static_cast<char>(0xe8); // Make invalid utf8 text...\\n+\\n+    parser parser(s.c_str());\\n+\\n+    bool ret = parser;\\n+    REQUIRE(ret == false);\\n+}\\n+\\n TEST_CASE(\\\"Backslash escape sequence test\\\", \\\"[general]\\\")\\n {\\n     parser parser(R\\\"(\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvd2V6L2F0b21pY3BhcnNsZXkvY29tbWl0cy9kNzJjY2YwNmM5ODI1OWQ3MjYxZTBmM2FjNGZkODcxNzc3ODc4MmMxIg==.json", "commit": "https://api.github.com/repos/wez/atomicparsley/commits/d72ccf06c98259d7261e0f3ac4fd8717778782c1", "content": "{\"sha\": \"d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"node_id\": \"MDY6Q29tbWl0MTQ3MzAzNTpkNzJjY2YwNmM5ODI1OWQ3MjYxZTBmM2FjNGZkODcxNzc3ODc4MmMx\", \"commit\": {\"author\": {\"name\": \"Wez Furlong\", \"email\": \"wez@wezfurlong.org\", \"date\": \"2021-07-13T06:10:28Z\"}, \"committer\": {\"name\": \"Wez Furlong\", \"email\": \"wez@wezfurlong.org\", \"date\": \"2021-07-13T06:10:28Z\"}, \"message\": \"Avoid stack overflow\\n\\nrefs: https://github.com/wez/atomicparsley/issues/32\", \"tree\": {\"sha\": \"cff6ceb995ac35c16b4e17002e5860e50eb19207\", \"url\": \"https://api.github.com/repos/wez/atomicparsley/git/trees/cff6ceb995ac35c16b4e17002e5860e50eb19207\"}, \"url\": \"https://api.github.com/repos/wez/atomicparsley/git/commits/d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/wez/atomicparsley/commits/d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"html_url\": \"https://github.com/wez/atomicparsley/commit/d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"comments_url\": \"https://api.github.com/repos/wez/atomicparsley/commits/d72ccf06c98259d7261e0f3ac4fd8717778782c1/comments\", \"author\": {\"login\": \"wez\", \"id\": 117777, \"node_id\": \"MDQ6VXNlcjExNzc3Nw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/117777?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wez\", \"html_url\": \"https://github.com/wez\", \"followers_url\": \"https://api.github.com/users/wez/followers\", \"following_url\": \"https://api.github.com/users/wez/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wez/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wez/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wez/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wez/orgs\", \"repos_url\": \"https://api.github.com/users/wez/repos\", \"events_url\": \"https://api.github.com/users/wez/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wez/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"wez\", \"id\": 117777, \"node_id\": \"MDQ6VXNlcjExNzc3Nw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/117777?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wez\", \"html_url\": \"https://github.com/wez\", \"followers_url\": \"https://api.github.com/users/wez/followers\", \"following_url\": \"https://api.github.com/users/wez/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wez/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wez/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wez/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wez/orgs\", \"repos_url\": \"https://api.github.com/users/wez/repos\", \"events_url\": \"https://api.github.com/users/wez/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wez/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"020176f688d9efec68f1ce1b100e052bff1cfc2e\", \"url\": \"https://api.github.com/repos/wez/atomicparsley/commits/020176f688d9efec68f1ce1b100e052bff1cfc2e\", \"html_url\": \"https://github.com/wez/atomicparsley/commit/020176f688d9efec68f1ce1b100e052bff1cfc2e\"}], \"stats\": {\"total\": 18, \"additions\": 17, \"deletions\": 1}, \"files\": [{\"sha\": \"990dd2b7c4a7f33ab6f27079888bd5e0a8312038\", \"filename\": \".github/workflows/ci.yml\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 0, \"changes\": 13, \"blob_url\": \"https://github.com/wez/atomicparsley/blob/d72ccf06c98259d7261e0f3ac4fd8717778782c1/.github%2Fworkflows%2Fci.yml\", \"raw_url\": \"https://github.com/wez/atomicparsley/raw/d72ccf06c98259d7261e0f3ac4fd8717778782c1/.github%2Fworkflows%2Fci.yml\", \"contents_url\": \"https://api.github.com/repos/wez/atomicparsley/contents/.github%2Fworkflows%2Fci.yml?ref=d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"patch\": \"@@ -23,3 +23,16 @@ jobs:\\n       run: cmake .\\n     - name: build\\n       run: cmake --build . --config Release\\n+\\n+  asan:\\n+    runs-on: ubuntu-latest\\n+    strategy:\\n+      fail-fast: false\\n+    steps:\\n+    - uses: actions/checkout@v2\\n+    - name: configure\\n+      run: cmake -DASAN=on -DCMAKE_BUILD_TYPE=Debug .\\n+    - name: build\\n+      run: cmake --build .\\n+    - name: test\\n+      run: tests/test.sh\"}, {\"sha\": \"f5249c1bf06980869420171ff48bedfbbe661a4a\", \"filename\": \"src/extracts.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/wez/atomicparsley/blob/d72ccf06c98259d7261e0f3ac4fd8717778782c1/src%2Fextracts.cpp\", \"raw_url\": \"https://github.com/wez/atomicparsley/raw/d72ccf06c98259d7261e0f3ac4fd8717778782c1/src%2Fextracts.cpp\", \"contents_url\": \"https://api.github.com/repos/wez/atomicparsley/contents/src%2Fextracts.cpp?ref=d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"patch\": \"@@ -1588,7 +1588,7 @@ void APar_Print_TrackDetails(TrackInfo *track_info) {\\n }\\n \\n void APar_ExtractDetails(FILE *isofile, uint8_t optional_output) {\\n-  char uint32_buffer[5];\\n+  char uint32_buffer[8];\\n   Trackage track = {0};\\n \\n   AtomicInfo *mvhdAtom = APar_FindAtom(\\\"moov.mvhd\\\", false, VERSIONED_ATOM, 0);\"}, {\"sha\": \"bae1839de37446d1b1667e1fd1205ff322e9660f\", \"filename\": \"tests/issue-32.mp4\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/wez/atomicparsley/blob/d72ccf06c98259d7261e0f3ac4fd8717778782c1/tests%2Fissue-32.mp4\", \"raw_url\": \"https://github.com/wez/atomicparsley/raw/d72ccf06c98259d7261e0f3ac4fd8717778782c1/tests%2Fissue-32.mp4\", \"contents_url\": \"https://api.github.com/repos/wez/atomicparsley/contents/tests%2Fissue-32.mp4?ref=d72ccf06c98259d7261e0f3ac4fd8717778782c1\"}, {\"sha\": \"ed8fd9c20b3f95136f32b885f2c1eb7972c3a31d\", \"filename\": \"tests/test.sh\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/wez/atomicparsley/blob/d72ccf06c98259d7261e0f3ac4fd8717778782c1/tests%2Ftest.sh\", \"raw_url\": \"https://github.com/wez/atomicparsley/raw/d72ccf06c98259d7261e0f3ac4fd8717778782c1/tests%2Ftest.sh\", \"contents_url\": \"https://api.github.com/repos/wez/atomicparsley/contents/tests%2Ftest.sh?ref=d72ccf06c98259d7261e0f3ac4fd8717778782c1\", \"patch\": \"@@ -0,0 +1,3 @@\\n+#!/bin/bash\\n+set -xe\\n+./AtomicParsley ./tests/issue-32.mp4 -T 1 -t +\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvanFsYW5nL2pxL2NvbW1pdHMvYzlhNTE1NjUyMTRlZWNlOGYxMDUzMDg5NzM5YWVhNzMxNDViZmQ2YiI=.json", "commit": "https://api.github.com/repos/jqlang/jq/commits/c9a51565214eece8f1053089739aea73145bfd6b", "content": "{\"sha\": \"c9a51565214eece8f1053089739aea73145bfd6b\", \"node_id\": \"C_kwDOAE3WVdoAKGM5YTUxNTY1MjE0ZWVjZThmMTA1MzA4OTczOWFlYTczMTQ1YmZkNmI\", \"commit\": {\"author\": {\"name\": \"Emanuele Torre\", \"email\": \"torreemanuele6@gmail.com\", \"date\": \"2023-12-13T19:17:17Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-12-13T19:17:17Z\"}, \"message\": \"Merge pull request from GHSA-7hmr-442f-qc8j\\n\\nThe unit allocated for decNumberCompare was accidentally removed by\\ncommit 680baeffeb7983e7570b5e68db07fe47f94db8c7 (PR #2804)\\n\\nThis caused a stack overflow when comparing a nan with a payload of 1000\\nor more.\\n\\nThis bug was found by OSS-fuzz.\\nRef: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64771\\nFixes GHSA-7hmr-442f-qc8j\\n\\nIt also fixes 1e999999999 > 1e-1147483646   triggering UBSAN errors\\nFixes #2968\", \"tree\": {\"sha\": \"41897506f258105a10ca9bcdb965cd925b7446b6\", \"url\": \"https://api.github.com/repos/jqlang/jq/git/trees/41897506f258105a10ca9bcdb965cd925b7446b6\"}, \"url\": \"https://api.github.com/repos/jqlang/jq/git/commits/c9a51565214eece8f1053089739aea73145bfd6b\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlegM9CRBK7hj4Ov3rIwAAv5YIAIQCdlKsKJ6ibUgYLSO0m4zh\\nD0AHFCLZ+AWp0MvrhBx73K+V4nHQYVsIL89QW8JS5o/GbMDJXTIsulqfw23+diVu\\n5FyKk38iUpJMeFYaivbb+nA75JvFHHTyIWI9cEz/Ma8kJ+mXGuR7UllsREM/KKTT\\nXUIyhgb2MuB4oXsyLoCH0CE5B8tPhjnM2IDthU56OW1z8AVIcOBxtBhIZYGKXius\\nXD4H7KeX9kIJDUdKYfCG5HG7NF9FdjPbi6YORzZwjmsEPEqpxV1g0exqpjNJKxSn\\nmZOlKfcF7g3sm5YFSbGDSYMPXWA6K+kzA1OsuSwEYYEWlq8o97+Um2uX5zbTyww=\\n=FvBt\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 41897506f258105a10ca9bcdb965cd925b7446b6\\nparent c5fd64ba975ee35df17bb0c335efb00bffce4d91\\nauthor Emanuele Torre <torreemanuele6@gmail.com> 1702495037 +0100\\ncommitter GitHub <noreply@github.com> 1702495037 +0100\\n\\nMerge pull request from GHSA-7hmr-442f-qc8j\\n\\nThe unit allocated for decNumberCompare was accidentally removed by\\ncommit 680baeffeb7983e7570b5e68db07fe47f94db8c7 (PR #2804)\\n\\nThis caused a stack overflow when comparing a nan with a payload of 1000\\nor more.\\n\\nThis bug was found by OSS-fuzz.\\nRef: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64771\\nFixes GHSA-7hmr-442f-qc8j\\n\\nIt also fixes 1e999999999 > 1e-1147483646   triggering UBSAN errors\\nFixes #2968\"}}, \"url\": \"https://api.github.com/repos/jqlang/jq/commits/c9a51565214eece8f1053089739aea73145bfd6b\", \"html_url\": \"https://github.com/jqlang/jq/commit/c9a51565214eece8f1053089739aea73145bfd6b\", \"comments_url\": \"https://api.github.com/repos/jqlang/jq/commits/c9a51565214eece8f1053089739aea73145bfd6b/comments\", \"author\": {\"login\": \"emanuele6\", \"id\": 20175435, \"node_id\": \"MDQ6VXNlcjIwMTc1NDM1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20175435?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/emanuele6\", \"html_url\": \"https://github.com/emanuele6\", \"followers_url\": \"https://api.github.com/users/emanuele6/followers\", \"following_url\": \"https://api.github.com/users/emanuele6/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/emanuele6/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/emanuele6/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/emanuele6/subscriptions\", \"organizations_url\": \"https://api.github.com/users/emanuele6/orgs\", \"repos_url\": \"https://api.github.com/users/emanuele6/repos\", \"events_url\": \"https://api.github.com/users/emanuele6/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/emanuele6/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c5fd64ba975ee35df17bb0c335efb00bffce4d91\", \"url\": \"https://api.github.com/repos/jqlang/jq/commits/c5fd64ba975ee35df17bb0c335efb00bffce4d91\", \"html_url\": \"https://github.com/jqlang/jq/commit/c5fd64ba975ee35df17bb0c335efb00bffce4d91\"}], \"stats\": {\"total\": 19, \"additions\": 14, \"deletions\": 5}, \"files\": [{\"sha\": \"913be8987926e784429274933555c0f367e4830e\", \"filename\": \"NEWS.md\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/jqlang/jq/blob/c9a51565214eece8f1053089739aea73145bfd6b/NEWS.md\", \"raw_url\": \"https://github.com/jqlang/jq/raw/c9a51565214eece8f1053089739aea73145bfd6b/NEWS.md\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/NEWS.md?ref=c9a51565214eece8f1053089739aea73145bfd6b\", \"patch\": \"@@ -3,7 +3,7 @@\\n ## Security\\n \\n - CVE-2023-50246: ....\\n-- CVE-2023-50268: ....\\n+- CVE-2023-50268: fix stack-buffer-overflow if comparing nan with payload\\n \\n ## CLI changes\\n \"}, {\"sha\": \"6ca1e1d0fdcf38eef92c2bf6bb942faa7ddb195d\", \"filename\": \"src/jv.c\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 4, \"changes\": 12, \"blob_url\": \"https://github.com/jqlang/jq/blob/c9a51565214eece8f1053089739aea73145bfd6b/src%2Fjv.c\", \"raw_url\": \"https://github.com/jqlang/jq/raw/c9a51565214eece8f1053089739aea73145bfd6b/src%2Fjv.c\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/src%2Fjv.c?ref=c9a51565214eece8f1053089739aea73145bfd6b\", \"patch\": \"@@ -740,15 +740,19 @@ int jvp_number_cmp(jv a, jv b) {\\n \\n #ifdef USE_DECNUM\\n   if (JVP_HAS_FLAGS(a, JVP_FLAGS_NUMBER_LITERAL) && JVP_HAS_FLAGS(b, JVP_FLAGS_NUMBER_LITERAL)) {\\n-    decNumber res;\\n-    decNumberCompare(&res,\\n+    struct {\\n+      decNumber number;\\n+      decNumberUnit units[1];\\n+    } res;\\n+\\n+    decNumberCompare(&res.number,\\n                      jvp_dec_number_ptr(a),\\n                      jvp_dec_number_ptr(b),\\n                      DEC_CONTEXT()\\n                      );\\n-    if (decNumberIsZero(&res)) {\\n+    if (decNumberIsZero(&res.number)) {\\n       return 0;\\n-    } else if (decNumberIsNegative(&res)) {\\n+    } else if (decNumberIsNegative(&res.number)) {\\n       return -1;\\n     } else {\\n       return 1;\"}, {\"sha\": \"a426c79f3bf7be3789499e4d44b9634939476e4e\", \"filename\": \"tests/shtest\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/jqlang/jq/blob/c9a51565214eece8f1053089739aea73145bfd6b/tests%2Fshtest\", \"raw_url\": \"https://github.com/jqlang/jq/raw/c9a51565214eece8f1053089739aea73145bfd6b/tests%2Fshtest\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/tests%2Fshtest?ref=c9a51565214eece8f1053089739aea73145bfd6b\", \"patch\": \"@@ -594,6 +594,11 @@ if ! x=$($JQ -n \\\"1 # foo$cr + 2\\\") || [ \\\"$x\\\" != 1 ]; then\\n   exit 1\\n fi\\n \\n+# CVE-2023-50268: No stack overflow comparing a nan with a large payload\\n+$VALGRIND $Q $JQ '1 != .' <<\\\\EOF >/dev/null\\n+Nan4000\\n+EOF\\n+\\n # Allow passing the inline jq script before -- #2919\\n if ! r=$($JQ --args -rn -- '$ARGS.positional[0]' bar) || [ \\\"$r\\\" != bar ]; then\\n     echo \\\"passing the inline script after -- didn't work\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvanFsYW5nL2pxL2NvbW1pdHMvNzFjMmFiNTA5YTg2MjhkYmJhZDRiYzdiM2Y5OGE2NGFhOTBkMzI5NyI=.json", "commit": "https://api.github.com/repos/jqlang/jq/commits/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297", "content": "{\"sha\": \"71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"node_id\": \"C_kwDOAE3WVdoAKDcxYzJhYjUwOWE4NjI4ZGJiYWQ0YmM3YjNmOThhNjRhYTkwZDMyOTc\", \"commit\": {\"author\": {\"name\": \"Emanuele Torre\", \"email\": \"torreemanuele6@gmail.com\", \"date\": \"2023-12-13T19:20:22Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-12-13T19:20:22Z\"}, \"message\": \"Merge pull request from GHSA-686w-5m7m-54vc\\n\\ndecNumberToString calls for a buffer that can hold a string of digits+14\\ncharacters, not a buffer of size digits+14.\\nWe need to allocate an extra byte for the NUL byte.\\n\\n-10E-1000010001, for example, will be stringified as -1.0E-1000010000\\nand decNumberToString will currently write an extra NUL byte after the\\nallocated buffer in the heap.\\n\\nOriginally reported by @SEU-SSL on GitHub.\\n\\nRef: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64574\\n\\nFixes GHSA-686w-5m7m-54vc\", \"tree\": {\"sha\": \"fe7a1f7b4580426266209f6047adb4e9736cd06c\", \"url\": \"https://api.github.com/repos/jqlang/jq/git/trees/fe7a1f7b4580426266209f6047adb4e9736cd06c\"}, \"url\": \"https://api.github.com/repos/jqlang/jq/git/commits/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlegP2CRBK7hj4Ov3rIwAA7NIIADbb9dS0IRHbXaJ0g1Hrw7qO\\nUHE/UqXB/UAqPZV02rsy6chEfUoZuzfNzXfNa/a2R+s2BUXulCD7nkYVKSvzbh0y\\ntzhcIBGhhPYNh9rOzTIbc3u5kLFnJm/zb1F9p2/dP8lNya2nPxt6OzHZrUis1khV\\nuCHIROCjVfTrQjJrI/Yp+IjarPA12Pyc+e7nZAIXAaWkr4g1drWuJxHxd1lJ54d+\\nS+PHfbP3y49EhBiwP60CWGGL/Za+SMAl33VCQsfb/1rD3iSxW/fLcJUPjku3+uV8\\n6lKgNcks47eBrQFtVvVT02EU79uiw63yIAFGTqQNjFxV9FY3kCYg7WweJ9rq9Z4=\\n=+8fB\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree fe7a1f7b4580426266209f6047adb4e9736cd06c\\nparent c9a51565214eece8f1053089739aea73145bfd6b\\nauthor Emanuele Torre <torreemanuele6@gmail.com> 1702495222 +0100\\ncommitter GitHub <noreply@github.com> 1702495222 +0100\\n\\nMerge pull request from GHSA-686w-5m7m-54vc\\n\\ndecNumberToString calls for a buffer that can hold a string of digits+14\\ncharacters, not a buffer of size digits+14.\\nWe need to allocate an extra byte for the NUL byte.\\n\\n-10E-1000010001, for example, will be stringified as -1.0E-1000010000\\nand decNumberToString will currently write an extra NUL byte after the\\nallocated buffer in the heap.\\n\\nOriginally reported by @SEU-SSL on GitHub.\\n\\nRef: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64574\\n\\nFixes GHSA-686w-5m7m-54vc\"}}, \"url\": \"https://api.github.com/repos/jqlang/jq/commits/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"html_url\": \"https://github.com/jqlang/jq/commit/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"comments_url\": \"https://api.github.com/repos/jqlang/jq/commits/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/comments\", \"author\": {\"login\": \"emanuele6\", \"id\": 20175435, \"node_id\": \"MDQ6VXNlcjIwMTc1NDM1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20175435?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/emanuele6\", \"html_url\": \"https://github.com/emanuele6\", \"followers_url\": \"https://api.github.com/users/emanuele6/followers\", \"following_url\": \"https://api.github.com/users/emanuele6/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/emanuele6/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/emanuele6/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/emanuele6/subscriptions\", \"organizations_url\": \"https://api.github.com/users/emanuele6/orgs\", \"repos_url\": \"https://api.github.com/users/emanuele6/repos\", \"events_url\": \"https://api.github.com/users/emanuele6/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/emanuele6/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c9a51565214eece8f1053089739aea73145bfd6b\", \"url\": \"https://api.github.com/repos/jqlang/jq/commits/c9a51565214eece8f1053089739aea73145bfd6b\", \"html_url\": \"https://github.com/jqlang/jq/commit/c9a51565214eece8f1053089739aea73145bfd6b\"}], \"stats\": {\"total\": 9, \"additions\": 7, \"deletions\": 2}, \"files\": [{\"sha\": \"14a594ba70aaed238559f5bbbc783b97bd1ecabc\", \"filename\": \"NEWS.md\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/jqlang/jq/blob/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/NEWS.md\", \"raw_url\": \"https://github.com/jqlang/jq/raw/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/NEWS.md\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/NEWS.md?ref=71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"patch\": \"@@ -2,7 +2,7 @@\\n \\n ## Security\\n \\n-- CVE-2023-50246: ....\\n+- CVE-2023-50246: Fix heap buffer overflow in jvp\\\\_literal\\\\_number\\\\_literal\\n - CVE-2023-50268: fix stack-buffer-overflow if comparing nan with payload\\n \\n ## CLI changes\"}, {\"sha\": \"e23d8ec124b0b65e3e56194d527f495d8b0f5ee0\", \"filename\": \"src/jv.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/jqlang/jq/blob/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/src%2Fjv.c\", \"raw_url\": \"https://github.com/jqlang/jq/raw/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/src%2Fjv.c\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/src%2Fjv.c?ref=71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"patch\": \"@@ -635,7 +635,7 @@ static const char* jvp_literal_number_literal(jv n) {\\n   }\\n \\n   if (plit->literal_data == NULL) {\\n-    int len = jvp_dec_number_ptr(n)->digits + 14;\\n+    int len = jvp_dec_number_ptr(n)->digits + 15 /* 14 + NUL */;\\n     plit->literal_data = jv_mem_alloc(len);\\n \\n     // Preserve the actual precision as we have parsed it\"}, {\"sha\": \"14aafbf933824420d1e972fd35b1afbbd20287d7\", \"filename\": \"tests/shtest\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/jqlang/jq/blob/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/tests%2Fshtest\", \"raw_url\": \"https://github.com/jqlang/jq/raw/71c2ab509a8628dbbad4bc7b3f98a64aa90d3297/tests%2Fshtest\", \"contents_url\": \"https://api.github.com/repos/jqlang/jq/contents/tests%2Fshtest?ref=71c2ab509a8628dbbad4bc7b3f98a64aa90d3297\", \"patch\": \"@@ -609,4 +609,9 @@ if ! r=$($JQ --args -rn 1 -- '$ARGS.positional[0]' bar) || [ \\\"$r\\\" != 1 ]; then\\n     exit 1\\n fi\\n \\n+# CVE-2023-50246: No heap overflow for '-10E-1000000001'\\n+$VALGRIND $Q $JQ . <<\\\\NUM\\n+-10E-1000000001\\n+NUM\\n+\\n exit 0\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvRGF2ZUdhbWJsZS9jSlNPTi9jb21taXRzL2JlNzQ5ZDdlZmE3YzkwMjFkYTc0NmU2ODViZDZkZWM3OWY5ZGQ5OWIi.json", "commit": "https://api.github.com/repos/DaveGamble/cJSON/commits/be749d7efa7c9021da746e685bd6dec79f9dd99b", "content": "{\"sha\": \"be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"node_id\": \"MDY6Q29tbWl0NTQyODA3Nzg6YmU3NDlkN2VmYTdjOTAyMWRhNzQ2ZTY4NWJkNmRlYzc5ZjlkZDk5Yg==\", \"commit\": {\"author\": {\"name\": \"Max Bruckner\", \"email\": \"max@maxbruckner.de\", \"date\": \"2018-12-16T10:06:40Z\"}, \"committer\": {\"name\": \"Max Bruckner\", \"email\": \"max@maxbruckner.de\", \"date\": \"2018-12-16T10:06:40Z\"}, \"message\": \"Fix crash of cJSON_GetObjectItemCaseSensitive when calling it on arrays\", \"tree\": {\"sha\": \"fcf5b483fc96ccb87ebacc6a5725df1b5c6690b5\", \"url\": \"https://api.github.com/repos/DaveGamble/cJSON/git/trees/fcf5b483fc96ccb87ebacc6a5725df1b5c6690b5\"}, \"url\": \"https://api.github.com/repos/DaveGamble/cJSON/git/commits/be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/DaveGamble/cJSON/commits/be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"html_url\": \"https://github.com/DaveGamble/cJSON/commit/be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"comments_url\": \"https://api.github.com/repos/DaveGamble/cJSON/commits/be749d7efa7c9021da746e685bd6dec79f9dd99b/comments\", \"author\": {\"login\": \"FSMaxB\", \"id\": 4294942, \"node_id\": \"MDQ6VXNlcjQyOTQ5NDI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4294942?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/FSMaxB\", \"html_url\": \"https://github.com/FSMaxB\", \"followers_url\": \"https://api.github.com/users/FSMaxB/followers\", \"following_url\": \"https://api.github.com/users/FSMaxB/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/FSMaxB/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/FSMaxB/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/FSMaxB/subscriptions\", \"organizations_url\": \"https://api.github.com/users/FSMaxB/orgs\", \"repos_url\": \"https://api.github.com/users/FSMaxB/repos\", \"events_url\": \"https://api.github.com/users/FSMaxB/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/FSMaxB/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"FSMaxB\", \"id\": 4294942, \"node_id\": \"MDQ6VXNlcjQyOTQ5NDI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4294942?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/FSMaxB\", \"html_url\": \"https://github.com/FSMaxB\", \"followers_url\": \"https://api.github.com/users/FSMaxB/followers\", \"following_url\": \"https://api.github.com/users/FSMaxB/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/FSMaxB/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/FSMaxB/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/FSMaxB/subscriptions\", \"organizations_url\": \"https://api.github.com/users/FSMaxB/orgs\", \"repos_url\": \"https://api.github.com/users/FSMaxB/repos\", \"events_url\": \"https://api.github.com/users/FSMaxB/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/FSMaxB/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cb1df2f88c0d335e031ade0d52fd6a59528c622f\", \"url\": \"https://api.github.com/repos/DaveGamble/cJSON/commits/cb1df2f88c0d335e031ade0d52fd6a59528c622f\", \"html_url\": \"https://github.com/DaveGamble/cJSON/commit/cb1df2f88c0d335e031ade0d52fd6a59528c622f\"}], \"stats\": {\"total\": 30, \"additions\": 29, \"deletions\": 1}, \"files\": [{\"sha\": \"c9c5b61f8ba6ec47a333c9f0495822be0aa8fe94\", \"filename\": \"cJSON.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/DaveGamble/cJSON/blob/be749d7efa7c9021da746e685bd6dec79f9dd99b/cJSON.c\", \"raw_url\": \"https://github.com/DaveGamble/cJSON/raw/be749d7efa7c9021da746e685bd6dec79f9dd99b/cJSON.c\", \"contents_url\": \"https://api.github.com/repos/DaveGamble/cJSON/contents/cJSON.c?ref=be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"patch\": \"@@ -1781,7 +1781,7 @@ static cJSON *get_object_item(const cJSON * const object, const char * const nam\\n     current_element = object->child;\\n     if (case_sensitive)\\n     {\\n-        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))\\n+        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))\\n         {\\n             current_element = current_element->next;\\n         }\\n@@ -1794,6 +1794,10 @@ static cJSON *get_object_item(const cJSON * const object, const char * const nam\\n         }\\n     }\\n \\n+    if ((current_element == NULL) || (current_element->string == NULL)) {\\n+        return NULL;\\n+    }\\n+\\n     return current_element;\\n }\\n \"}, {\"sha\": \"1635fa30ae9f7d85fedb32be021807d689f79864\", \"filename\": \"tests/misc_tests.c\", \"status\": \"modified\", \"additions\": 24, \"deletions\": 0, \"changes\": 24, \"blob_url\": \"https://github.com/DaveGamble/cJSON/blob/be749d7efa7c9021da746e685bd6dec79f9dd99b/tests%2Fmisc_tests.c\", \"raw_url\": \"https://github.com/DaveGamble/cJSON/raw/be749d7efa7c9021da746e685bd6dec79f9dd99b/tests%2Fmisc_tests.c\", \"contents_url\": \"https://api.github.com/repos/DaveGamble/cJSON/contents/tests%2Fmisc_tests.c?ref=be749d7efa7c9021da746e685bd6dec79f9dd99b\", \"patch\": \"@@ -127,6 +127,28 @@ static void cjson_get_object_item_case_sensitive_should_get_object_items(void)\\n     cJSON_Delete(item);\\n }\\n \\n+static void cjson_get_object_item_should_not_crash_with_array(void) {\\n+    cJSON *array = NULL;\\n+    cJSON *found = NULL;\\n+    array = cJSON_Parse(\\\"[1]\\\");\\n+\\n+    found = cJSON_GetObjectItem(array, \\\"name\\\");\\n+    TEST_ASSERT_NULL(found);\\n+\\n+    cJSON_Delete(array);\\n+}\\n+\\n+static void cjson_get_object_item_case_sensitive_should_not_crash_with_array(void) {\\n+    cJSON *array = NULL;\\n+    cJSON *found = NULL;\\n+    array = cJSON_Parse(\\\"[1]\\\");\\n+\\n+    found = cJSON_GetObjectItemCaseSensitive(array, \\\"name\\\");\\n+    TEST_ASSERT_NULL(found);\\n+\\n+    cJSON_Delete(array);\\n+}\\n+\\n static void typecheck_functions_should_check_type(void)\\n {\\n     cJSON invalid[1];\\n@@ -535,6 +557,8 @@ int CJSON_CDECL main(void)\\n     RUN_TEST(cjson_array_foreach_should_not_dereference_null_pointer);\\n     RUN_TEST(cjson_get_object_item_should_get_object_items);\\n     RUN_TEST(cjson_get_object_item_case_sensitive_should_get_object_items);\\n+    RUN_TEST(cjson_get_object_item_should_not_crash_with_array);\\n+    RUN_TEST(cjson_get_object_item_case_sensitive_should_not_crash_with_array);\\n     RUN_TEST(typecheck_functions_should_check_type);\\n     RUN_TEST(cjson_should_not_parse_to_deeply_nested_jsons);\\n     RUN_TEST(cjson_set_number_value_should_set_numbers);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvVmlydXNUb3RhbC95YXJhL2NvbW1pdHMvNGEzNDJmMDFlNTQzOWI5YmI5MDFhZmYxYzZjMjNjNTM2YmFlZWIzZiI=.json", "commit": "https://api.github.com/repos/VirusTotal/yara/commits/4a342f01e5439b9bb901aff1c6c23c536baeeb3f", "content": "{\"sha\": \"4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"node_id\": \"MDY6Q29tbWl0NzAzNzk5Njo0YTM0MmYwMWU1NDM5YjliYjkwMWFmZjFjNmMyM2M1MzZiYWVlYjNm\", \"commit\": {\"author\": {\"name\": \"Victor Manuel Alvarez\", \"email\": \"vmalvarez@vmalvarez-macbookpro.roam.corp.google.com\", \"date\": \"2017-07-05T08:01:03Z\"}, \"committer\": {\"name\": \"Victor Manuel Alvarez\", \"email\": \"vmalvarez@vmalvarez-macbookpro.roam.corp.google.com\", \"date\": \"2017-07-05T08:01:03Z\"}, \"message\": \"Fix heap overflow (reported by Jurriaan Bremer)\\n\\nWhen setting a new array item with yr_object_array_set_item() the array size is doubled if the index for the new item is larger than the already allocated ones. No further checks were made to ensure that the index fits into the array after doubling its capacity. If the array capacity was for example 64, and a new object is assigned to an index larger than 128 the overflow occurs. As yr_object_array_set_item() is usually invoked with indexes that increase monotonically by one, this bug never triggered before. But the new \\\"dotnet\\\" module has the potential to allow the exploitation of this bug by scanning a specially crafted .NET binary.\", \"tree\": {\"sha\": \"ceafb57b2f307c5bce67a1e00ffc97de07f194a8\", \"url\": \"https://api.github.com/repos/VirusTotal/yara/git/trees/ceafb57b2f307c5bce67a1e00ffc97de07f194a8\"}, \"url\": \"https://api.github.com/repos/VirusTotal/yara/git/commits/4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/VirusTotal/yara/commits/4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"html_url\": \"https://github.com/VirusTotal/yara/commit/4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"comments_url\": \"https://api.github.com/repos/VirusTotal/yara/commits/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"c57c6c1d86fddb7d343d9f6c2f8d9c390fd46f6a\", \"url\": \"https://api.github.com/repos/VirusTotal/yara/commits/c57c6c1d86fddb7d343d9f6c2f8d9c390fd46f6a\", \"html_url\": \"https://github.com/VirusTotal/yara/commit/c57c6c1d86fddb7d343d9f6c2f8d9c390fd46f6a\"}], \"stats\": {\"total\": 17, \"additions\": 16, \"deletions\": 1}, \"files\": [{\"sha\": \"4eacc3654bfd5b236b8325aee6bbce4ad422c907\", \"filename\": \"libyara/modules/tests.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/VirusTotal/yara/blob/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/libyara%2Fmodules%2Ftests.c\", \"raw_url\": \"https://github.com/VirusTotal/yara/raw/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/libyara%2Fmodules%2Ftests.c\", \"contents_url\": \"https://api.github.com/repos/VirusTotal/yara/contents/libyara%2Fmodules%2Ftests.c?ref=4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"patch\": \"@@ -176,6 +176,7 @@ int module_load(\\n   set_integer(0, module_object, \\\"integer_array[%i]\\\", 0);\\n   set_integer(1, module_object, \\\"integer_array[%i]\\\", 1);\\n   set_integer(2, module_object, \\\"integer_array[%i]\\\", 2);\\n+  set_integer(256, module_object, \\\"integer_array[%i]\\\", 256);\\n \\n   set_string(\\\"foo\\\", module_object, \\\"string_array[%i]\\\", 0);\\n   set_string(\\\"bar\\\", module_object, \\\"string_array[%i]\\\", 1);\"}, {\"sha\": \"1572a131b34087ef5a2383ef46123b3ba16b8a1c\", \"filename\": \"libyara/object.c\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 1, \"changes\": 9, \"blob_url\": \"https://github.com/VirusTotal/yara/blob/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/libyara%2Fobject.c\", \"raw_url\": \"https://github.com/VirusTotal/yara/raw/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/libyara%2Fobject.c\", \"contents_url\": \"https://api.github.com/repos/VirusTotal/yara/contents/libyara%2Fobject.c?ref=4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"patch\": \"@@ -725,7 +725,10 @@ int yr_object_array_set_item(\\n \\n   if (array->items == NULL)\\n   {\\n-    count = yr_max(64, (index + 1) * 2);\\n+    count = 64;\\n+\\n+    while (count <= index)\\n+      count *= 2;\\n \\n     array->items = (YR_ARRAY_ITEMS*) yr_malloc(\\n         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));\\n@@ -740,6 +743,10 @@ int yr_object_array_set_item(\\n   else if (index >= array->items->count)\\n   {\\n     count = array->items->count * 2;\\n+\\n+    while (count <= index)\\n+      count *= 2;\\n+\\n     array->items = (YR_ARRAY_ITEMS*) yr_realloc(\\n         array->items,\\n         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));\"}, {\"sha\": \"1897499dacd8e82fb2ccbe30b6b8a400510a9049\", \"filename\": \"tests/test-rules.c\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/VirusTotal/yara/blob/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/tests%2Ftest-rules.c\", \"raw_url\": \"https://github.com/VirusTotal/yara/raw/4a342f01e5439b9bb901aff1c6c23c536baeeb3f/tests%2Ftest-rules.c\", \"contents_url\": \"https://api.github.com/repos/VirusTotal/yara/contents/tests%2Ftest-rules.c?ref=4a342f01e5439b9bb901aff1c6c23c536baeeb3f\", \"patch\": \"@@ -1395,6 +1395,13 @@ static void test_modules()\\n       }\\\",\\n       NULL);\\n \\n+  assert_true_rule(\\n+      \\\"import \\\\\\\"tests\\\\\\\" \\\\\\n+       rule test { \\\\\\n+        condition: tests.integer_array[256] == 256 \\\\\\n+      }\\\",\\n+      NULL);\\n+\\n   assert_true_rule(\\n       \\\"import \\\\\\\"tests\\\\\\\" \\\\\\n        rule test { \\\\\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQVJNbWJlZC9tYmVkdGxzL2NvbW1pdHMvZDE1Nzk1YWNkNTA3NGUwYjQ0ZTcxZjdlZGU4YmRmZTFiNDg1OTFmYyI=.json", "commit": "https://api.github.com/repos/ARMmbed/mbedtls/commits/d15795acd5074e0b44e71f7ede8bdfe1b48591fc", "content": "{\"sha\": \"d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"node_id\": \"MDY6Q29tbWl0NjY4NzkzNjpkMTU3OTVhY2Q1MDc0ZTBiNDRlNzFmN2VkZThiZGZlMWI0ODU5MWZj\", \"commit\": {\"author\": {\"name\": \"Manuel P\\u00e9gouri\\u00e9-Gonnard\", \"email\": \"manuel.pegourie-gonnard@arm.com\", \"date\": \"2017-06-22T10:19:27Z\"}, \"committer\": {\"name\": \"Manuel P\\u00e9gouri\\u00e9-Gonnard\", \"email\": \"manuel.pegourie-gonnard@arm.com\", \"date\": \"2017-07-06T09:58:41Z\"}, \"message\": \"Improve behaviour on fatal errors\\n\\nIf we didn't walk the whole chain, then there may be any kind of errors in the\\npart of the chain we didn't check, so setting all flags looks like the safe\\nthing to do.\", \"tree\": {\"sha\": \"4ec0954009a67c262dc347e20431e28959bdc03b\", \"url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/git/trees/4ec0954009a67c262dc347e20431e28959bdc03b\"}, \"url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/git/commits/d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/commits/d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"html_url\": \"https://github.com/Mbed-TLS/mbedtls/commit/d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"comments_url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/commits/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/comments\", \"author\": {\"login\": \"mpg\", \"id\": 60640, \"node_id\": \"MDQ6VXNlcjYwNjQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60640?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mpg\", \"html_url\": \"https://github.com/mpg\", \"followers_url\": \"https://api.github.com/users/mpg/followers\", \"following_url\": \"https://api.github.com/users/mpg/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mpg/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mpg/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mpg/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mpg/orgs\", \"repos_url\": \"https://api.github.com/users/mpg/repos\", \"events_url\": \"https://api.github.com/users/mpg/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mpg/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"mpg\", \"id\": 60640, \"node_id\": \"MDQ6VXNlcjYwNjQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60640?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mpg\", \"html_url\": \"https://github.com/mpg\", \"followers_url\": \"https://api.github.com/users/mpg/followers\", \"following_url\": \"https://api.github.com/users/mpg/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mpg/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mpg/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mpg/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mpg/orgs\", \"repos_url\": \"https://api.github.com/users/mpg/repos\", \"events_url\": \"https://api.github.com/users/mpg/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mpg/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1beb048316d50a0e7ed7d1c0e9a07b9ac7fe8bba\", \"url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/commits/1beb048316d50a0e7ed7d1c0e9a07b9ac7fe8bba\", \"html_url\": \"https://github.com/Mbed-TLS/mbedtls/commit/1beb048316d50a0e7ed7d1c0e9a07b9ac7fe8bba\"}], \"stats\": {\"total\": 31, \"additions\": 24, \"deletions\": 7}, \"files\": [{\"sha\": \"9bf6a1719d7be833e32a7ecac96079d8869c523c\", \"filename\": \"ChangeLog\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/Mbed-TLS/mbedtls/blob/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/ChangeLog\", \"raw_url\": \"https://github.com/Mbed-TLS/mbedtls/raw/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/ChangeLog\", \"contents_url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/contents/ChangeLog?ref=d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"patch\": \"@@ -1,5 +1,12 @@\\n mbed TLS ChangeLog (Sorted per branch, date)\\n \\n+= mbed TLS 2.y.z released YYYY-MM-DD\\n+\\n+Changes\\n+   * Certificate verification functions now set flags to -1 in case the full\\n+     chain was not verified due to an internal error (including in the verify\\n+     callback) or chain length limitations.\\n+\\n = mbed TLS 2.5.1 released 2017-06-21\\n \\n Security\"}, {\"sha\": \"ee5f27e465b9e0cc63b0f8b1b252a456a0068c86\", \"filename\": \"library/x509_crt.c\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 6, \"changes\": 22, \"blob_url\": \"https://github.com/Mbed-TLS/mbedtls/blob/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/library%2Fx509_crt.c\", \"raw_url\": \"https://github.com/Mbed-TLS/mbedtls/raw/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/library%2Fx509_crt.c\", \"contents_url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/contents/library%2Fx509_crt.c?ref=d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"patch\": \"@@ -2202,11 +2202,14 @@ int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,\\n     mbedtls_x509_sequence *cur = NULL;\\n     mbedtls_pk_type_t pk_type;\\n \\n-    if( profile == NULL )\\n-        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );\\n-\\n     *flags = 0;\\n \\n+    if( profile == NULL )\\n+    {\\n+        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;\\n+        goto exit;\\n+    }\\n+\\n     if( cn != NULL )\\n     {\\n         name = &crt->subject;\\n@@ -2280,7 +2283,7 @@ int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,\\n         ret = x509_crt_verify_top( crt, parent, ca_crl, profile,\\n                                    pathlen, selfsigned, flags, f_vrfy, p_vrfy );\\n         if( ret != 0 )\\n-            return( ret );\\n+            goto exit;\\n     }\\n     else\\n     {\\n@@ -2295,17 +2298,24 @@ int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,\\n             ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,\\n                                          pathlen, selfsigned, flags, f_vrfy, p_vrfy );\\n             if( ret != 0 )\\n-                return( ret );\\n+                goto exit;\\n         }\\n         else\\n         {\\n             ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,\\n                                        pathlen, selfsigned, flags, f_vrfy, p_vrfy );\\n             if( ret != 0 )\\n-                return( ret );\\n+                goto exit;\\n         }\\n     }\\n \\n+exit:\\n+    if( ret != 0 )\\n+    {\\n+        *flags = (uint32_t) -1;\\n+        return( ret );\\n+    }\\n+\\n     if( *flags != 0 )\\n         return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );\\n \"}, {\"sha\": \"6df52987505d5f7000eb7587e4e0d373ea844ace\", \"filename\": \"tests/suites/test_suite_x509parse.data\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/Mbed-TLS/mbedtls/blob/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/tests%2Fsuites%2Ftest_suite_x509parse.data\", \"raw_url\": \"https://github.com/Mbed-TLS/mbedtls/raw/d15795acd5074e0b44e71f7ede8bdfe1b48591fc/tests%2Fsuites%2Ftest_suite_x509parse.data\", \"contents_url\": \"https://api.github.com/repos/Mbed-TLS/mbedtls/contents/tests%2Fsuites%2Ftest_suite_x509parse.data?ref=d15795acd5074e0b44e71f7ede8bdfe1b48591fc\", \"patch\": \"@@ -1204,7 +1204,7 @@ mbedtls_x509_crt_verify_max:\\\"data_files/test-ca2.crt\\\":\\\"data_files/dir-maxpath\\\":M\\n \\n X509 CRT verify long chain (max intermediate CA + 1)\\n depends_on:MBEDTLS_SHA256_C:MBEDTLS_ECDSA_C:MBEDTLS_ECP_DP_SECP256R1_ENABLED\\n-mbedtls_x509_crt_verify_max:\\\"data_files/dir-maxpath/00.crt\\\":\\\"data_files/dir-maxpath\\\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:0\\n+mbedtls_x509_crt_verify_max:\\\"data_files/dir-maxpath/00.crt\\\":\\\"data_files/dir-maxpath\\\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1\\n \\n X509 CRT verify chain #1 (zero pathlen intermediate)\\n depends_on:MBEDTLS_SHA256_C:MBEDTLS_RSA_C\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvUENSRTJQcm9qZWN0L3BjcmUyL2NvbW1pdHMvNTBhNTFjYjdlNjcyNjhlNmFkNDE3ZWIwN2M5ZGU5YmZlYTVjYzU1YSI=.json", "commit": "https://api.github.com/repos/PCRE2Project/pcre2/commits/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a", "content": "{\"sha\": \"50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"node_id\": \"C_kwDOF7zVOdoAKDUwYTUxY2I3ZTY3MjY4ZTZhZDQxN2ViMDdjOWRlOWJmZWE1Y2M1NWE\", \"commit\": {\"author\": {\"name\": \"Zoltan Herczeg\", \"email\": \"hzmester@freemail.hu\", \"date\": \"2022-03-23T07:53:25Z\"}, \"committer\": {\"name\": \"Zoltan Herczeg\", \"email\": \"hzmester@freemail.hu\", \"date\": \"2022-03-23T07:53:58Z\"}, \"message\": \"Fixed a unicode properrty matching issue in JIT\", \"tree\": {\"sha\": \"ac45cf9b4466861895f13afcc9973e5e41b53938\", \"url\": \"https://api.github.com/repos/PCRE2Project/pcre2/git/trees/ac45cf9b4466861895f13afcc9973e5e41b53938\"}, \"url\": \"https://api.github.com/repos/PCRE2Project/pcre2/git/commits/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/PCRE2Project/pcre2/commits/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"html_url\": \"https://github.com/PCRE2Project/pcre2/commit/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"comments_url\": \"https://api.github.com/repos/PCRE2Project/pcre2/commits/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"f7a7341726f58f4660fc29bad58c7304a96c8318\", \"url\": \"https://api.github.com/repos/PCRE2Project/pcre2/commits/f7a7341726f58f4660fc29bad58c7304a96c8318\", \"html_url\": \"https://github.com/PCRE2Project/pcre2/commit/f7a7341726f58f4660fc29bad58c7304a96c8318\"}], \"stats\": {\"total\": 6, \"additions\": 5, \"deletions\": 1}, \"files\": [{\"sha\": \"ffb088053830b91471f60ef3d89436ef65cf709e\", \"filename\": \"ChangeLog\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/PCRE2Project/pcre2/blob/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/ChangeLog\", \"raw_url\": \"https://github.com/PCRE2Project/pcre2/raw/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/ChangeLog\", \"contents_url\": \"https://api.github.com/repos/PCRE2Project/pcre2/contents/ChangeLog?ref=50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"patch\": \"@@ -92,6 +92,9 @@ pattern, the optimizing \\\"must be present for a match\\\" character check was not\\n being flagged as caseless, causing some matches that should have succeeded to\\n fail.\\n \\n+23. Fixed a unicode properrty matching issue in JIT. The character was not\\n+fully read in caseless matching.\\n+\\n \\n Version 10.39 29-October-2021\\n -----------------------------\"}, {\"sha\": \"94f6a58873bf3ec80587f701c4e61ed266381e24\", \"filename\": \"src/pcre2_jit_compile.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/PCRE2Project/pcre2/blob/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/src%2Fpcre2_jit_compile.c\", \"raw_url\": \"https://github.com/PCRE2Project/pcre2/raw/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/src%2Fpcre2_jit_compile.c\", \"contents_url\": \"https://api.github.com/repos/PCRE2Project/pcre2/contents/src%2Fpcre2_jit_compile.c?ref=50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"patch\": \"@@ -7489,7 +7489,7 @@ while (*cc != XCL_END)\\n     {\\n     SLJIT_ASSERT(*cc == XCL_PROP || *cc == XCL_NOTPROP);\\n     cc++;\\n-    if (*cc == PT_CLIST)\\n+    if (*cc == PT_CLIST && *cc == XCL_PROP)\\n       {\\n       other_cases = PRIV(ucd_caseless_sets) + cc[1];\\n       while (*other_cases != NOTACHAR)\"}, {\"sha\": \"8450f0b6172332641b97574a3dc646eee47bbdc5\", \"filename\": \"src/pcre2_jit_test.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/PCRE2Project/pcre2/blob/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/src%2Fpcre2_jit_test.c\", \"raw_url\": \"https://github.com/PCRE2Project/pcre2/raw/50a51cb7e67268e6ad417eb07c9de9bfea5cc55a/src%2Fpcre2_jit_test.c\", \"contents_url\": \"https://api.github.com/repos/PCRE2Project/pcre2/contents/src%2Fpcre2_jit_test.c?ref=50a51cb7e67268e6ad417eb07c9de9bfea5cc55a\", \"patch\": \"@@ -415,6 +415,7 @@ static struct regression_test_case regression_test_cases[] = {\\n \\t{ MUP, 0, 0, 0 | F_NOMATCH, \\\"[^\\\\\\\\p{Hangul}\\\\\\\\p{Z}]\\\", \\\" \\\" },\\n \\t{ MUP, 0, 0, 0, \\\"[\\\\\\\\p{Lu}\\\\\\\\P{Latin}]+\\\", \\\"c\\\\xEA\\\\xA4\\\\xAE,A,b\\\" },\\n \\t{ MUP, 0, 0, 0, \\\"[\\\\\\\\x{a92e}\\\\\\\\p{Lu}\\\\\\\\P{Latin}]+\\\", \\\"c\\\\xEA\\\\xA4\\\\xAE,A,b\\\" },\\n+\\t{ CMUP, 0, 0, 0, \\\"[^S]\\\\\\\\B\\\", \\\"\\\\xe2\\\\x80\\\\x8a\\\" },\\n \\n \\t/* Possible empty brackets. */\\n \\t{ MU, A, 0, 0, \\\"(?:|ab||bc|a)+d\\\", \\\"abcxabcabd\\\" },\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ2x1c3RlckxhYnMvbGlicWIvY29tbWl0cy8xYmJhYTkyOWI3NzExMzUzMjc4NWM0MDhkZDFiNDFjZDA1MjFmZmM4Ig==.json", "commit": "https://api.github.com/repos/ClusterLabs/libqb/commits/1bbaa929b77113532785c408dd1b41cd0521ffc8", "content": "{\"sha\": \"1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"node_id\": \"C_kwDOABcd5toAKDFiYmFhOTI5Yjc3MTEzNTMyNzg1YzQwOGRkMWI0MWNkMDUyMWZmYzg\", \"commit\": {\"author\": {\"name\": \"Chrissie Caulfield\", \"email\": \"ccaulfie@redhat.com\", \"date\": \"2023-07-20T06:19:01Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-07-20T06:19:01Z\"}, \"message\": \"log: fix potential overflow with long log messages (#490)\\n\\nqb_vsnprintf_serialize was called with 'max_size' as the\\r\\nlimiting number for the length of the formatted log\\r\\nmessage. But the buffer also needs to contain the\\r\\nlog header (given by 'actual_size'), so we now pass\\r\\n't->max_line_length' as the maximum length of the\\r\\nformatted log message to limit space to the actual \\r\\nbytes left\\r\\n\\r\\nAlso added error checks to the blackbox calls at\\r\\nthe end of the test, as these now provide a proper\\r\\ntest that the BB is functioning. Before they were\\r\\nmasking failures.\", \"tree\": {\"sha\": \"c0faf5da5b11ef1b97f18be3f655d106c5171a41\", \"url\": \"https://api.github.com/repos/ClusterLabs/libqb/git/trees/c0faf5da5b11ef1b97f18be3f655d106c5171a41\"}, \"url\": \"https://api.github.com/repos/ClusterLabs/libqb/git/commits/1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkuNHVCRBK7hj4Ov3rIwAA4IUIAI/v6fk7zrGTRg/4i27Al6W4\\nutwuMBIcavbIGRa6tP8gJtXmI/Bk0/zROJ7hf/uU2D4qbxnMembb9AsGwHoee4rc\\n4cXrYXovK/mWmbd2VFNs1+t2hujyP7D3Ss6uyIzPcrIErSRRnxY8YLGYcTohrYf1\\nQpwLJDhrADF3tpRjy0gMtzZJLdBKIXxVZoKfEi42X8s0pSlVFAfzA/+IAPThZZsG\\npAHftIw/oEsTZcq6wX0ROfpzXHrygJy1a+4Tpfi05lKePGgHU9xBrpoZq+xr0aMo\\nEElJmVE5ViMjvMOVU2ODbTxlk+Z+maoUaxUYVsFga96UP4lRMEnQdoc7MFy4EhU=\\n=xymd\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree c0faf5da5b11ef1b97f18be3f655d106c5171a41\\nparent 92ddd7c92961e321ef96a99066924a6a395b334d\\nauthor Chrissie Caulfield <ccaulfie@redhat.com> 1689833941 +0100\\ncommitter GitHub <noreply@github.com> 1689833941 +0100\\n\\nlog: fix potential overflow with long log messages (#490)\\n\\nqb_vsnprintf_serialize was called with 'max_size' as the\\r\\nlimiting number for the length of the formatted log\\r\\nmessage. But the buffer also needs to contain the\\r\\nlog header (given by 'actual_size'), so we now pass\\r\\n't->max_line_length' as the maximum length of the\\r\\nformatted log message to limit space to the actual \\r\\nbytes left\\r\\n\\r\\nAlso added error checks to the blackbox calls at\\r\\nthe end of the test, as these now provide a proper\\r\\ntest that the BB is functioning. Before they were\\r\\nmasking failures.\"}}, \"url\": \"https://api.github.com/repos/ClusterLabs/libqb/commits/1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"html_url\": \"https://github.com/ClusterLabs/libqb/commit/1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"comments_url\": \"https://api.github.com/repos/ClusterLabs/libqb/commits/1bbaa929b77113532785c408dd1b41cd0521ffc8/comments\", \"author\": {\"login\": \"chrissie-c\", \"id\": 3415721, \"node_id\": \"MDQ6VXNlcjM0MTU3MjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3415721?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/chrissie-c\", \"html_url\": \"https://github.com/chrissie-c\", \"followers_url\": \"https://api.github.com/users/chrissie-c/followers\", \"following_url\": \"https://api.github.com/users/chrissie-c/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/chrissie-c/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/chrissie-c/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/chrissie-c/subscriptions\", \"organizations_url\": \"https://api.github.com/users/chrissie-c/orgs\", \"repos_url\": \"https://api.github.com/users/chrissie-c/repos\", \"events_url\": \"https://api.github.com/users/chrissie-c/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/chrissie-c/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"92ddd7c92961e321ef96a99066924a6a395b334d\", \"url\": \"https://api.github.com/repos/ClusterLabs/libqb/commits/92ddd7c92961e321ef96a99066924a6a395b334d\", \"html_url\": \"https://github.com/ClusterLabs/libqb/commit/92ddd7c92961e321ef96a99066924a6a395b334d\"}], \"stats\": {\"total\": 10, \"additions\": 6, \"deletions\": 4}, \"files\": [{\"sha\": \"8519a48d1a3f2fcfed29207a50789fe68ff1b3e8\", \"filename\": \"lib/log_blackbox.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/ClusterLabs/libqb/blob/1bbaa929b77113532785c408dd1b41cd0521ffc8/lib%2Flog_blackbox.c\", \"raw_url\": \"https://github.com/ClusterLabs/libqb/raw/1bbaa929b77113532785c408dd1b41cd0521ffc8/lib%2Flog_blackbox.c\", \"contents_url\": \"https://api.github.com/repos/ClusterLabs/libqb/contents/lib%2Flog_blackbox.c?ref=1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"patch\": \"@@ -110,8 +110,8 @@ _blackbox_vlogger(int32_t target,\\n \\tchunk += sizeof(uint32_t);\\n \\n \\t/* log message */\\n-\\tmsg_len = qb_vsnprintf_serialize(chunk, max_size, cs->format, ap);\\n-\\tif (msg_len >= max_size) {\\n+\\tmsg_len = qb_vsnprintf_serialize(chunk, t->max_line_length, cs->format, ap);\\n+\\tif (msg_len >= t->max_line_length) {\\n \\t    chunk = msg_len_pt + sizeof(uint32_t); /* Reset */\\n \\n \\t    /* Leave this at QB_LOG_MAX_LEN so as not to overflow the blackbox */\"}, {\"sha\": \"e5abf408ed7e2cbe5d874b39b47d755a2d6d0f61\", \"filename\": \"tests/check_log.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/ClusterLabs/libqb/blob/1bbaa929b77113532785c408dd1b41cd0521ffc8/tests%2Fcheck_log.c\", \"raw_url\": \"https://github.com/ClusterLabs/libqb/raw/1bbaa929b77113532785c408dd1b41cd0521ffc8/tests%2Fcheck_log.c\", \"contents_url\": \"https://api.github.com/repos/ClusterLabs/libqb/contents/tests%2Fcheck_log.c?ref=1bbaa929b77113532785c408dd1b41cd0521ffc8\", \"patch\": \"@@ -832,8 +832,10 @@ START_TEST(test_log_long_msg)\\n \\t\\tqb_log(LOG_INFO, \\\"Message %d %d - %s\\\", lpc, lpc%600, buffer);\\n \\t}\\n \\n-        qb_log_blackbox_write_to_file(\\\"blackbox.dump\\\");\\n-        qb_log_blackbox_print_from_file(\\\"blackbox.dump\\\");\\n+        rc = qb_log_blackbox_write_to_file(\\\"blackbox.dump\\\");\\n+\\tck_assert_int_gt(rc, 0);\\n+        rc = qb_log_blackbox_print_from_file(\\\"blackbox.dump\\\");\\n+\\tck_assert_int_le(rc, 0);\\n \\tunlink(\\\"blackbox.dump\\\");\\n \\tqb_log_fini();\\n }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYmJsYW5jaG9uL0FyZHVpbm9Kc29uL2NvbW1pdHMvNWU3YjllYzY4OGQ3OWU3YjE2ZWM3MDY0ZTFkMzdlODQ4MWEzMWU3MiI=.json", "commit": "https://api.github.com/repos/bblanchon/ArduinoJson/commits/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72", "content": "{\"sha\": \"5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"node_id\": \"MDY6Q29tbWl0MTU4MDIyNjM6NWU3YjllYzY4OGQ3OWU3YjE2ZWM3MDY0ZTFkMzdlODQ4MWEzMWU3Mg==\", \"commit\": {\"author\": {\"name\": \"Giancarlo Canales Barreto\", \"email\": \"gcanalesb@me.com\", \"date\": \"2015-06-10T19:31:22Z\"}, \"committer\": {\"name\": \"Benoit Blanchon\", \"email\": \"github@benoitblanchon.fr\", \"date\": \"2015-06-10T19:33:20Z\"}, \"message\": \"Fix buffer overflow (pull request #81)\", \"tree\": {\"sha\": \"22dd0a5166d27f4bdfec6d0a49ce06296dd4dc01\", \"url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/git/trees/22dd0a5166d27f4bdfec6d0a49ce06296dd4dc01\"}, \"url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/git/commits/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"comment_count\": 1, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/commits/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"html_url\": \"https://github.com/bblanchon/ArduinoJson/commit/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"comments_url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/commits/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/comments\", \"author\": {\"login\": \"gcanalesb\", \"id\": 37164759, \"node_id\": \"MDQ6VXNlcjM3MTY0NzU5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/37164759?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gcanalesb\", \"html_url\": \"https://github.com/gcanalesb\", \"followers_url\": \"https://api.github.com/users/gcanalesb/followers\", \"following_url\": \"https://api.github.com/users/gcanalesb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gcanalesb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gcanalesb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gcanalesb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gcanalesb/orgs\", \"repos_url\": \"https://api.github.com/users/gcanalesb/repos\", \"events_url\": \"https://api.github.com/users/gcanalesb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gcanalesb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"bblanchon\", \"id\": 5462433, \"node_id\": \"MDQ6VXNlcjU0NjI0MzM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/5462433?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bblanchon\", \"html_url\": \"https://github.com/bblanchon\", \"followers_url\": \"https://api.github.com/users/bblanchon/followers\", \"following_url\": \"https://api.github.com/users/bblanchon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bblanchon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bblanchon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bblanchon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bblanchon/orgs\", \"repos_url\": \"https://api.github.com/users/bblanchon/repos\", \"events_url\": \"https://api.github.com/users/bblanchon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bblanchon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"08d05df00e3773ffecba9c5ec45e5344cc5f90de\", \"url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/commits/08d05df00e3773ffecba9c5ec45e5344cc5f90de\", \"html_url\": \"https://github.com/bblanchon/ArduinoJson/commit/08d05df00e3773ffecba9c5ec45e5344cc5f90de\"}], \"stats\": {\"total\": 49, \"additions\": 32, \"deletions\": 17}, \"files\": [{\"sha\": \"d43202a1a489142bda1bba37263ee560db269ada\", \"filename\": \"CHANGELOG.md\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/bblanchon/ArduinoJson/blob/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/CHANGELOG.md\", \"raw_url\": \"https://github.com/bblanchon/ArduinoJson/raw/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/CHANGELOG.md\", \"contents_url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/contents/CHANGELOG.md?ref=5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"patch\": \"@@ -1,6 +1,13 @@\\n Arduino JSON: change log\\r\\n ========================\\r\\n \\r\\n+v4.5\\r\\n+----\\r\\n+\\r\\n+* Fixed buffer overflow when input contains a backslash followed by a terminator (issue #81)\\r\\n+\\r\\n+**Upgrading is recommended** since previous versions contain a potential security risk.\\r\\n+\\r\\n v4.4\\r\\n ----\\r\\n \\r\"}, {\"sha\": \"45a6c488fc5c4c54859d9505d7a340e979f526f1\", \"filename\": \"src/Internals/QuotedString.cpp\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 17, \"changes\": 32, \"blob_url\": \"https://github.com/bblanchon/ArduinoJson/blob/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/src%2FInternals%2FQuotedString.cpp\", \"raw_url\": \"https://github.com/bblanchon/ArduinoJson/raw/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/src%2FInternals%2FQuotedString.cpp\", \"contents_url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/contents/src%2FInternals%2FQuotedString.cpp?ref=5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"patch\": \"@@ -58,46 +58,44 @@ static char unescapeChar(char c) {\\n static inline bool isQuote(char c) { return c == '\\\\\\\"' || c == '\\\\''; }\\n \\n char *QuotedString::extractFrom(char *input, char **endPtr) {\\n-  char firstChar = *input;\\n-\\n-  if (!isQuote(firstChar)) {\\n-    // must start with a quote\\n-    return NULL;\\n-  }\\n-\\n-  char stopChar = firstChar;  // closing quote is the same as opening quote\\n-\\n   char *startPtr = input + 1;  // skip the quote\\n   char *readPtr = startPtr;\\n   char *writePtr = startPtr;\\n   char c;\\n \\n+  char firstChar = *input;\\n+  char stopChar = firstChar;  // closing quote is the same as opening quote\\n+\\n+  if (!isQuote(firstChar)) goto ERROR_OPENING_QUOTE_MISSING;\\n+\\n   for (;;) {\\n     c = *readPtr++;\\n \\n-    if (c == '\\\\0') {\\n-      // premature ending\\n-      return NULL;\\n-    }\\n+    if (c == '\\\\0') goto ERROR_CLOSING_QUOTE_MISSING;\\n \\n-    if (c == stopChar) {\\n-      // closing quote\\n-      break;\\n-    }\\n+    if (c == stopChar) goto SUCCESS;\\n \\n     if (c == '\\\\\\\\') {\\n       // replace char\\n       c = unescapeChar(*readPtr++);\\n+      if (c == '\\\\0') goto ERROR_ESCAPE_SEQUENCE_INTERRUPTED;\\n     }\\n \\n     *writePtr++ = c;\\n   }\\n \\n+SUCCESS:\\n   // end the string here\\n   *writePtr = '\\\\0';\\n \\n   // update end ptr\\n   *endPtr = readPtr;\\n \\n+  // return pointer to unquoted string\\n   return startPtr;\\n+\\n+ERROR_OPENING_QUOTE_MISSING:\\n+ERROR_CLOSING_QUOTE_MISSING:\\n+ERROR_ESCAPE_SEQUENCE_INTERRUPTED:\\n+  return NULL;\\n }\"}, {\"sha\": \"94d062613ca8674e755756efa490db17fa00b230\", \"filename\": \"test/QuotedString_ExtractFrom_Tests.cpp\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/bblanchon/ArduinoJson/blob/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/test%2FQuotedString_ExtractFrom_Tests.cpp\", \"raw_url\": \"https://github.com/bblanchon/ArduinoJson/raw/5e7b9ec688d79e7b16ec7064e1d37e8481a31e72/test%2FQuotedString_ExtractFrom_Tests.cpp\", \"contents_url\": \"https://api.github.com/repos/bblanchon/ArduinoJson/contents/test%2FQuotedString_ExtractFrom_Tests.cpp?ref=5e7b9ec688d79e7b16ec7064e1d37e8481a31e72\", \"patch\": \"@@ -16,6 +16,11 @@ class QuotedString_ExtractFrom_Tests : public testing::Test {\\n     _result = QuotedString::extractFrom(_jsonString, &_trailing);\\n   }\\n \\n+  void whenInputIs(const char *json, size_t len) {\\n+    memcpy(_jsonString, json, len);\\n+    _result = QuotedString::extractFrom(_jsonString, &_trailing);\\n+  }\\n+\\n   void resultMustBe(const char *expected) { EXPECT_STREQ(expected, _result); }\\n \\n   void trailingMustBe(const char *expected) {\\n@@ -134,3 +139,8 @@ TEST_F(QuotedString_ExtractFrom_Tests, AllEscapedCharsTogether) {\\n   whenInputIs(\\\"\\\\\\\"1\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\3\\\\\\\\/4\\\\\\\\b5\\\\\\\\f6\\\\\\\\n7\\\\\\\\r8\\\\\\\\t9\\\\\\\"\\\");\\n   resultMustBe(\\\"1\\\\\\\"2\\\\\\\\3/4\\\\b5\\\\f6\\\\n7\\\\r8\\\\t9\\\");\\n }\\n+\\n+TEST_F(QuotedString_ExtractFrom_Tests, UnterminatedEscapeSequence) {\\n+  whenInputIs(\\\"\\\\\\\"\\\\\\\\\\\\0\\\\\\\"\\\", 4);\\n+  resultMustBe(0);\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvWWVyYXplL3l0bmVmL2NvbW1pdHMvM2NiMGY5MTRkNjQyNzA3M2YyNjJlMWIyYjVmZDk3M2UzMDQzY2RmNyI=.json", "commit": "https://api.github.com/repos/Yeraze/ytnef/commits/3cb0f914d6427073f262e1b2b5fd973e3043cdf7", "content": "{\"sha\": \"3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"node_id\": \"MDY6Q29tbWl0MjAwNjE4OTY6M2NiMGY5MTRkNjQyNzA3M2YyNjJlMWIyYjVmZDk3M2UzMDQzY2RmNw==\", \"commit\": {\"author\": {\"name\": \"Randall Hand\", \"email\": \"randall.hand@gmail.com\", \"date\": \"2017-02-24T21:08:02Z\"}, \"committer\": {\"name\": \"Randall Hand\", \"email\": \"randall.hand@gmail.com\", \"date\": \"2017-02-24T21:08:02Z\"}, \"message\": \"BugFix - Potential OOB with Fields of Size 0\\n\\nThanks to @hannob for contributing a malformed TNEF stream with\\na Version field of size 0.  Now such files will return an error\\nindicating invalid data.\", \"tree\": {\"sha\": \"be1577a079551d6b1be93933f629605b33aa3bfc\", \"url\": \"https://api.github.com/repos/Yeraze/ytnef/git/trees/be1577a079551d6b1be93933f629605b33aa3bfc\"}, \"url\": \"https://api.github.com/repos/Yeraze/ytnef/git/commits/3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/Yeraze/ytnef/commits/3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"html_url\": \"https://github.com/Yeraze/ytnef/commit/3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"comments_url\": \"https://api.github.com/repos/Yeraze/ytnef/commits/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/comments\", \"author\": {\"login\": \"Yeraze\", \"id\": 5789309, \"node_id\": \"MDQ6VXNlcjU3ODkzMDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/5789309?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Yeraze\", \"html_url\": \"https://github.com/Yeraze\", \"followers_url\": \"https://api.github.com/users/Yeraze/followers\", \"following_url\": \"https://api.github.com/users/Yeraze/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Yeraze/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Yeraze/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Yeraze/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Yeraze/orgs\", \"repos_url\": \"https://api.github.com/users/Yeraze/repos\", \"events_url\": \"https://api.github.com/users/Yeraze/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Yeraze/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"Yeraze\", \"id\": 5789309, \"node_id\": \"MDQ6VXNlcjU3ODkzMDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/5789309?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Yeraze\", \"html_url\": \"https://github.com/Yeraze\", \"followers_url\": \"https://api.github.com/users/Yeraze/followers\", \"following_url\": \"https://api.github.com/users/Yeraze/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Yeraze/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Yeraze/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Yeraze/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Yeraze/orgs\", \"repos_url\": \"https://api.github.com/users/Yeraze/repos\", \"events_url\": \"https://api.github.com/users/Yeraze/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Yeraze/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"19818f382cdfc301ea5ce0762eb50800e1d16528\", \"url\": \"https://api.github.com/repos/Yeraze/ytnef/commits/19818f382cdfc301ea5ce0762eb50800e1d16528\", \"html_url\": \"https://github.com/Yeraze/ytnef/commit/19818f382cdfc301ea5ce0762eb50800e1d16528\"}], \"stats\": {\"total\": 6, \"additions\": 6, \"deletions\": 0}, \"files\": [{\"sha\": \"eea43b74b9182fab68f3d3a348202d9739fd0fa2\", \"filename\": \"lib/ytnef.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/Yeraze/ytnef/blob/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/lib%2Fytnef.c\", \"raw_url\": \"https://github.com/Yeraze/ytnef/raw/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/lib%2Fytnef.c\", \"contents_url\": \"https://api.github.com/repos/Yeraze/ytnef/contents/lib%2Fytnef.c?ref=3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"patch\": \"@@ -1147,6 +1147,10 @@ int TNEFParse(TNEFStruct *TNEF) {\\n   while (TNEFGetHeader(TNEF, &type, &size) == 0) {\\n     DEBUG2(TNEF->Debug, 2, \\\"Header says type=0x%X, size=%u\\\", type, size);\\n     DEBUG2(TNEF->Debug, 2, \\\"Header says type=%u, size=%u\\\", type, size);\\n+    if(size == 0) {\\n+      printf(\\\"ERROR: Field with size of 0\\\\n\\\");\\n+      return YTNEF_ERROR_READING_DATA;\\n+    }\\n     data = calloc(size, sizeof(BYTE));\\n     ALLOCCHECK(data);\\n     if (TNEFRawRead(TNEF, data, size, &header_checksum) < 0) {\"}, {\"sha\": \"81037e4bf3508d21f9d82a061144d0d8a20c578c\", \"filename\": \"test-data/test.sh\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/Yeraze/ytnef/blob/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/test-data%2Ftest.sh\", \"raw_url\": \"https://github.com/Yeraze/ytnef/raw/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/test-data%2Ftest.sh\", \"contents_url\": \"https://api.github.com/repos/Yeraze/ytnef/contents/test-data%2Ftest.sh?ref=3cb0f914d6427073f262e1b2b5fd973e3043cdf7\", \"patch\": \"@@ -21,3 +21,5 @@ diff results data\\n ../ytnefprint/ytnefprint ./winmail.dat  | grep -A 1 PR_RTF_SYNC_BODY_CRC     | grep 872404792\\n ../ytnefprint/ytnefprint ./winmail.dat  | grep -A 1 PR_RTF_SYNC_BODY_COUNT   | grep 90\\n ../ytnefprint/ytnefprint ./winmail.dat  | grep -A 18 PR_RTF_COMPRESSED       | grep '\\\\pard Casdasdfasdfasd\\\\\\\\par'\\n+\\n+../ytnefprint/ytnefprint ./ytnef-oob-TNEFVersion-SwapWord | grep 'ERROR: Field with size of 0'\"}, {\"sha\": \"4ee03bc0aa8370537d57608b1819d099d9f9d566\", \"filename\": \"test-data/ytnef-oob-TNEFVersion-SwapWord\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/Yeraze/ytnef/blob/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/test-data%2Fytnef-oob-TNEFVersion-SwapWord\", \"raw_url\": \"https://github.com/Yeraze/ytnef/raw/3cb0f914d6427073f262e1b2b5fd973e3043cdf7/test-data%2Fytnef-oob-TNEFVersion-SwapWord\", \"contents_url\": \"https://api.github.com/repos/Yeraze/ytnef/contents/test-data%2Fytnef-oob-TNEFVersion-SwapWord?ref=3cb0f914d6427073f262e1b2b5fd973e3043cdf7\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ2F1bGRyb25EZXZlbG9wbWVudExMQy9jYmFuZy9jb21taXRzLzFjMWRiYTYyYmQzZTZmYTlkMGQwYzBhYTIxOTI2MDQzYjc1MzgyYzci.json", "commit": "https://api.github.com/repos/CauldronDevelopmentLLC/cbang/commits/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7", "content": "{\"sha\": \"1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"node_id\": \"MDY6Q29tbWl0MTc1MzE1NTg6MWMxZGJhNjJiZDNlNmZhOWQwZDBjMGFhMjE5MjYwNDNiNzUzODJjNw==\", \"commit\": {\"author\": {\"name\": \"Joseph Coffland\", \"email\": \"joseph@cauldrondevelopment.com\", \"date\": \"2020-07-19T19:43:49Z\"}, \"committer\": {\"name\": \"Joseph Coffland\", \"email\": \"joseph@cauldrondevelopment.com\", \"date\": \"2020-07-19T19:43:49Z\"}, \"message\": \"Don't allow extraction of tar files outside of the target directory, added tar tests\", \"tree\": {\"sha\": \"c885299b45f92cbbc27baffc35563625e421e7fb\", \"url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/git/trees/c885299b45f92cbbc27baffc35563625e421e7fb\"}, \"url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/git/commits/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/commits/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"html_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/commit/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"comments_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/commits/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/comments\", \"author\": {\"login\": \"jcoffland\", \"id\": 1166284, \"node_id\": \"MDQ6VXNlcjExNjYyODQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1166284?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jcoffland\", \"html_url\": \"https://github.com/jcoffland\", \"followers_url\": \"https://api.github.com/users/jcoffland/followers\", \"following_url\": \"https://api.github.com/users/jcoffland/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jcoffland/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jcoffland/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jcoffland/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jcoffland/orgs\", \"repos_url\": \"https://api.github.com/users/jcoffland/repos\", \"events_url\": \"https://api.github.com/users/jcoffland/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jcoffland/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jcoffland\", \"id\": 1166284, \"node_id\": \"MDQ6VXNlcjExNjYyODQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1166284?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jcoffland\", \"html_url\": \"https://github.com/jcoffland\", \"followers_url\": \"https://api.github.com/users/jcoffland/followers\", \"following_url\": \"https://api.github.com/users/jcoffland/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jcoffland/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jcoffland/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jcoffland/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jcoffland/orgs\", \"repos_url\": \"https://api.github.com/users/jcoffland/repos\", \"events_url\": \"https://api.github.com/users/jcoffland/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jcoffland/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"71a999a1049dfb0cf745b8cd549b4fb6c5585cc3\", \"url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/commits/71a999a1049dfb0cf745b8cd549b4fb6c5585cc3\", \"html_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/commit/71a999a1049dfb0cf745b8cd549b4fb6c5585cc3\"}], \"stats\": {\"total\": 101, \"additions\": 99, \"deletions\": 2}, \"files\": [{\"sha\": \"6621642f7223efd0fd56596edd9c6d66a6c29237\", \"filename\": \"src/cbang/tar/TarFileReader.cpp\", \"status\": \"modified\", \"additions\": 17, \"deletions\": 2, \"changes\": 19, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/src%2Fcbang%2Ftar%2FTarFileReader.cpp\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/src%2Fcbang%2Ftar%2FTarFileReader.cpp\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/src%2Fcbang%2Ftar%2FTarFileReader.cpp?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -101,11 +101,26 @@ std::string TarFileReader::extract(const string &_path) {\\n   if (!hasMore()) THROW(\\\"No more tar files\\\");\\n \\n   string path = _path;\\n-  if (SystemUtilities::isDirectory(path)) path += \\\"/\\\" + getFilename();\\n+  if (SystemUtilities::isDirectory(path)) {\\n+    path += \\\"/\\\" + getFilename();\\n+\\n+    // Check that path is under the target directory\\n+    string a = SystemUtilities::getCanonicalPath(_path);\\n+    string b = SystemUtilities::getCanonicalPath(path);\\n+    if (!String::startsWith(b, a))\\n+      THROW(\\\"Tar path points outside of the extraction directory: \\\" << path);\\n+  }\\n \\n   LOG_DEBUG(5, \\\"Extracting: \\\" << path);\\n \\n-  return extract(*SystemUtilities::oopen(path));\\n+  switch (getType()) {\\n+  case NORMAL_FILE: case CONTIGUOUS_FILE:\\n+    return extract(*SystemUtilities::oopen(path));\\n+  case DIRECTORY: SystemUtilities::ensureDirectory(path); break;\\n+  default: THROW(\\\"Unsupported tar file type \\\" << getType());\\n+  }\\n+\\n+  return getFilename();\\n }\\n \\n \"}, {\"sha\": \"e7c01fbeb1f0a57709cfe80a4e3b33ca1ce257f2\", \"filename\": \"tests/tarTests/.gitignore\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2F.gitignore\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2F.gitignore\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2F.gitignore?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+/path\"}, {\"sha\": \"3275cb0cca1a7b1755418c8117eb60e92ac4a5fd\", \"filename\": \"tests/tarTests/BadExtractTest/data/args\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fdata%2Fargs\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fdata%2Fargs\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FBadExtractTest%2Fdata%2Fargs?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+--extract test.tar\"}, {\"sha\": \"d8e1ecd5e2c2596ea25f385de7b6380bfd5b5c97\", \"filename\": \"tests/tarTests/BadExtractTest/data/test.tar\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fdata%2Ftest.tar\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fdata%2Ftest.tar\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FBadExtractTest%2Fdata%2Ftest.tar?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"d00491fd7e5bb6fa28c517a0bb32b8b506539d4d\", \"filename\": \"tests/tarTests/BadExtractTest/expect/return\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Freturn\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Freturn\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Freturn?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+1\"}, {\"sha\": \"8ab2216a720c6f6c4391bbbaa5943f9a950f2ea9\", \"filename\": \"tests/tarTests/BadExtractTest/expect/stderr\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstderr\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstderr\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstderr?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+Tar path points outside of the extraction directory: ./../hello.txt\\n\\\\ No newline at end of file\"}, {\"sha\": \"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\", \"filename\": \"tests/tarTests/BadExtractTest/expect/stdout\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstdout\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstdout\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FBadExtractTest%2Fexpect%2Fstdout?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"ef6d40528a004189d66f3e8d88b00628deb44ad0\", \"filename\": \"tests/tarTests/CompressedExtractTest/data/args\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Fargs\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Fargs\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Fargs?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+--extract test.tar.bz2\"}, {\"sha\": \"0a07aa37045f0bc4bd3ea319d8146c7f8573c838\", \"filename\": \"tests/tarTests/CompressedExtractTest/data/test.tar.bz2\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Ftest.tar.bz2\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Ftest.tar.bz2\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FCompressedExtractTest%2Fdata%2Ftest.tar.bz2?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"573541ac9702dd3969c9bc859d2b91ec1f7e6e56\", \"filename\": \"tests/tarTests/CompressedExtractTest/expect/return\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Freturn\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Freturn\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Freturn?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+0\"}, {\"sha\": \"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\", \"filename\": \"tests/tarTests/CompressedExtractTest/expect/stderr\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstderr\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstderr\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstderr?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"f0ad0dec66b594ef1f8bdd71081bdad977b828d4\", \"filename\": \"tests/tarTests/CompressedExtractTest/expect/stdout\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstdout\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstdout\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FCompressedExtractTest%2Fexpect%2Fstdout?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+hello.txt\"}, {\"sha\": \"3275cb0cca1a7b1755418c8117eb60e92ac4a5fd\", \"filename\": \"tests/tarTests/ExtractTest/data/args\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fdata%2Fargs\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fdata%2Fargs\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FExtractTest%2Fdata%2Fargs?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+--extract test.tar\"}, {\"sha\": \"56cdac649963a217131c5c9097a3c56e540a1978\", \"filename\": \"tests/tarTests/ExtractTest/data/test.tar\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fdata%2Ftest.tar\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fdata%2Ftest.tar\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FExtractTest%2Fdata%2Ftest.tar?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"573541ac9702dd3969c9bc859d2b91ec1f7e6e56\", \"filename\": \"tests/tarTests/ExtractTest/expect/return\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Freturn\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Freturn\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FExtractTest%2Fexpect%2Freturn?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+0\"}, {\"sha\": \"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\", \"filename\": \"tests/tarTests/ExtractTest/expect/stderr\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstderr\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstderr\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstderr?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"f0ad0dec66b594ef1f8bdd71081bdad977b828d4\", \"filename\": \"tests/tarTests/ExtractTest/expect/stdout\", \"status\": \"added\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstdout\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstdout\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FExtractTest%2Fexpect%2Fstdout?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1 @@\\n+hello.txt\"}, {\"sha\": \"7915cbcd56e3dd22f336056d080551d7a2772a75\", \"filename\": \"tests/tarTests/SConscript\", \"status\": \"added\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FSConscript\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2FSConscript\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2FSConscript?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1,8 @@\\n+Import('*')\\n+\\n+# Local includes\\n+env.Append(CPPPATH = ['#'])\\n+\\n+prog = env.Program('tar', 'tar.cpp')\\n+\\n+Return('prog')\"}, {\"sha\": \"0fc9a64ff97316b4ff1b7b9890ce7da6757d1d11\", \"filename\": \"tests/tarTests/tar\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftar\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftar\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2Ftar?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\"}, {\"sha\": \"f2b4a0dfc47e78be3447a42f63d0c3418c5f6f66\", \"filename\": \"tests/tarTests/tar.cpp\", \"status\": \"added\", \"additions\": 61, \"deletions\": 0, \"changes\": 61, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftar.cpp\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftar.cpp\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2Ftar.cpp?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1,61 @@\\n+/******************************************************************************\\\\\\n+\\n+          This file is part of the C! library.  A.K.A the cbang library.\\n+\\n+                Copyright (c) 2003-2019, Cauldron Development LLC\\n+                   Copyright (c) 2003-2017, Stanford University\\n+                               All rights reserved.\\n+\\n+         The C! library is free software: you can redistribute it and/or\\n+        modify it under the terms of the GNU Lesser General Public License\\n+       as published by the Free Software Foundation, either version 2.1 of\\n+               the License, or (at your option) any later version.\\n+\\n+        The C! library is distributed in the hope that it will be useful,\\n+          but WITHOUT ANY WARRANTY; without even the implied warranty of\\n+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n+                 Lesser General Public License for more details.\\n+\\n+         You should have received a copy of the GNU Lesser General Public\\n+                 License along with the C! library.  If not, see\\n+                         <http://www.gnu.org/licenses/>.\\n+\\n+        In addition, BSD licensing may be granted on a case by case basis\\n+        by written permission from at least one of the copyright holders.\\n+           You may request written permission by emailing the authors.\\n+\\n+                  For information regarding this software email:\\n+                                 Joseph Coffland\\n+                          joseph@cauldrondevelopment.com\\n+\\n+\\\\******************************************************************************/\\n+\\n+#include <cbang/tar/TarFileReader.h>\\n+#include <cbang/Catch.h>\\n+\\n+#include <iostream>\\n+\\n+using namespace cb;\\n+using namespace std;\\n+\\n+\\n+int main(int argc, char *argv[]) {\\n+  try {\\n+    for (int i = 1; i < argc; i++) {\\n+      string arg = argv[i];\\n+\\n+      if (arg == \\\"--extract\\\" && i < argc - 1) {\\n+        TarFileReader reader(argv[++i]);\\n+\\n+        while (reader.hasMore())\\n+          cout << reader.extract() << endl;\\n+\\n+      } else THROWS(\\\"Invalid arg '\\\" << arg << \\\"'\\\");\\n+    }\\n+\\n+    return 0;\\n+\\n+  } catch (const Exception &e) {cerr << e.getMessage();}\\n+\\n+  return 1;\\n+}\"}, {\"sha\": \"a3dd7186442f0b9a521a88dfe3c890633cd2bc34\", \"filename\": \"tests/tarTests/test.json\", \"status\": \"added\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/blob/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftest.json\", \"raw_url\": \"https://github.com/CauldronDevelopmentLLC/cbang/raw/1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7/tests%2FtarTests%2Ftest.json\", \"contents_url\": \"https://api.github.com/repos/CauldronDevelopmentLLC/cbang/contents/tests%2FtarTests%2Ftest.json?ref=1c1dba62bd3e6fa9d0d0c0aa21926043b75382c7\", \"patch\": \"@@ -0,0 +1,3 @@\\n+{\\n+  \\\"command\\\": \\\"%(suite-dir)s/tar\\\"\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdXJpcGFyc2VyL3VyaXBhcnNlci9jb21taXRzLzg2NGY1ZDRjMTI3ZGVmMzg2ZGQ1Y2M5MjZhZDk2OTM0YjI5N2YwNGUi.json", "commit": "https://api.github.com/repos/uriparser/uriparser/commits/864f5d4c127def386dd5cc926ad96934b297f04e", "content": "{\"sha\": \"864f5d4c127def386dd5cc926ad96934b297f04e\", \"node_id\": \"MDY6Q29tbWl0MTE2NTMwNjY0Ojg2NGY1ZDRjMTI3ZGVmMzg2ZGQ1Y2M5MjZhZDk2OTM0YjI5N2YwNGU=\", \"commit\": {\"author\": {\"name\": \"Sebastian Pipping\", \"email\": \"sebastian@pipping.org\", \"date\": \"2018-09-23T18:07:25Z\"}, \"committer\": {\"name\": \"Sebastian Pipping\", \"email\": \"sebastian@pipping.org\", \"date\": \"2018-09-23T18:54:50Z\"}, \"message\": \"UriQuery.c: Fix out-of-bounds-write in ComposeQuery and ...Ex\\n\\nReported by Google Autofuzz team\", \"tree\": {\"sha\": \"93fc7413978a41ebc64234bd9f05b11f9b30d3aa\", \"url\": \"https://api.github.com/repos/uriparser/uriparser/git/trees/93fc7413978a41ebc64234bd9f05b11f9b30d3aa\"}, \"url\": \"https://api.github.com/repos/uriparser/uriparser/git/commits/864f5d4c127def386dd5cc926ad96934b297f04e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/uriparser/uriparser/commits/864f5d4c127def386dd5cc926ad96934b297f04e\", \"html_url\": \"https://github.com/uriparser/uriparser/commit/864f5d4c127def386dd5cc926ad96934b297f04e\", \"comments_url\": \"https://api.github.com/repos/uriparser/uriparser/commits/864f5d4c127def386dd5cc926ad96934b297f04e/comments\", \"author\": {\"login\": \"hartwork\", \"id\": 1577132, \"node_id\": \"MDQ6VXNlcjE1NzcxMzI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1577132?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hartwork\", \"html_url\": \"https://github.com/hartwork\", \"followers_url\": \"https://api.github.com/users/hartwork/followers\", \"following_url\": \"https://api.github.com/users/hartwork/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hartwork/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hartwork/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hartwork/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hartwork/orgs\", \"repos_url\": \"https://api.github.com/users/hartwork/repos\", \"events_url\": \"https://api.github.com/users/hartwork/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hartwork/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"hartwork\", \"id\": 1577132, \"node_id\": \"MDQ6VXNlcjE1NzcxMzI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1577132?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hartwork\", \"html_url\": \"https://github.com/hartwork\", \"followers_url\": \"https://api.github.com/users/hartwork/followers\", \"following_url\": \"https://api.github.com/users/hartwork/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hartwork/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hartwork/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hartwork/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hartwork/orgs\", \"repos_url\": \"https://api.github.com/users/hartwork/repos\", \"events_url\": \"https://api.github.com/users/hartwork/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hartwork/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f7230d6a0c1b12c9857cf8562a47e2f616713070\", \"url\": \"https://api.github.com/repos/uriparser/uriparser/commits/f7230d6a0c1b12c9857cf8562a47e2f616713070\", \"html_url\": \"https://github.com/uriparser/uriparser/commit/f7230d6a0c1b12c9857cf8562a47e2f616713070\"}], \"stats\": {\"total\": 33, \"additions\": 33, \"deletions\": 0}, \"files\": [{\"sha\": \"eb221576efd980e714cbc21ef4ce0c1230f9fc89\", \"filename\": \"src/UriQuery.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/uriparser/uriparser/blob/864f5d4c127def386dd5cc926ad96934b297f04e/src%2FUriQuery.c\", \"raw_url\": \"https://github.com/uriparser/uriparser/raw/864f5d4c127def386dd5cc926ad96934b297f04e/src%2FUriQuery.c\", \"contents_url\": \"https://api.github.com/repos/uriparser/uriparser/contents/src%2FUriQuery.c?ref=864f5d4c127def386dd5cc926ad96934b297f04e\", \"patch\": \"@@ -223,6 +223,7 @@ int URI_FUNC(ComposeQueryEngine)(URI_CHAR * dest,\\n \\n \\t\\t\\t/* Copy key */\\n \\t\\t\\tif (firstItem == URI_TRUE) {\\n+\\t\\t\\t\\tampersandLen = 1;\\n \\t\\t\\t\\tfirstItem = URI_FALSE;\\n \\t\\t\\t} else {\\n \\t\\t\\t\\twrite[0] = _UT('&');\"}, {\"sha\": \"dbb8adb570d535d923b8588280ddf36bced6a766\", \"filename\": \"test/test.cpp\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/uriparser/uriparser/blob/864f5d4c127def386dd5cc926ad96934b297f04e/test%2Ftest.cpp\", \"raw_url\": \"https://github.com/uriparser/uriparser/raw/864f5d4c127def386dd5cc926ad96934b297f04e/test%2Ftest.cpp\", \"contents_url\": \"https://api.github.com/repos/uriparser/uriparser/contents/test%2Ftest.cpp?ref=864f5d4c127def386dd5cc926ad96934b297f04e\", \"patch\": \"@@ -104,6 +104,7 @@ class UriSuite : public Suite {\\n \\t\\tTEST_ADD(UriSuite::testQueryList)\\n \\t\\tTEST_ADD(UriSuite::testQueryListPair)\\n \\t\\tTEST_ADD(UriSuite::testQueryDissection_Bug3590761)\\n+\\t\\tTEST_ADD(UriSuite::testQueryCompositionMathWrite_GoogleAutofuzz113244572)\\n \\t\\tTEST_ADD(UriSuite::testFreeCrash_Bug20080827)\\n \\t\\tTEST_ADD(UriSuite::testParseInvalid_Bug16)\\n \\t\\tTEST_ADD(UriSuite::testRangeComparison)\\n@@ -1749,6 +1750,37 @@ Rule                                | Example | hostSet | absPath | emptySeg\\n \\t\\turiFreeQueryListA(queryList);\\n \\t}\\n \\n+\\tvoid testQueryCompositionMathWrite_GoogleAutofuzz113244572() {\\n+\\t\\tUriQueryListA second = { .key = \\\"\\\\x11\\\", .value = NULL, .next = NULL };\\n+\\t\\tUriQueryListA first = { .key = \\\"\\\\x01\\\", .value = \\\"\\\\x02\\\", .next = &second };\\n+\\n+\\t\\tconst UriBool spaceToPlus = URI_TRUE;\\n+\\t\\tconst UriBool normalizeBreaks = URI_FALSE;  /* for factor 3 but 6 */\\n+\\n+\\t\\tconst int charsRequired = (3 + 1 + 3) + 1 + (3);\\n+\\n+\\t\\t{\\n+\\t\\t\\t// Minimum space to hold everything fine\\n+\\t\\t\\tconst char * const expected = \\\"%01=%02\\\" \\\"&\\\" \\\"%11\\\";\\n+\\t\\t\\tchar dest[charsRequired + 1];\\n+\\t\\t\\tint charsWritten;\\n+\\t\\t\\tTEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),\\n+\\t\\t\\t\\t\\t&charsWritten, spaceToPlus, normalizeBreaks)\\n+\\t\\t\\t\\t== URI_SUCCESS);\\n+\\t\\t\\tTEST_ASSERT(! strcmp(dest, expected));\\n+\\t\\t\\tTEST_ASSERT(charsWritten == strlen(expected) + 1);\\n+\\t\\t}\\n+\\n+\\t\\t{\\n+\\t\\t\\t// Previous math failed to take ampersand into account\\n+\\t\\t\\tchar dest[charsRequired + 1 - 1];\\n+\\t\\t\\tint charsWritten;\\n+\\t\\t\\tTEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),\\n+\\t\\t\\t\\t\\t&charsWritten, spaceToPlus, normalizeBreaks)\\n+\\t\\t\\t\\t== URI_ERROR_OUTPUT_TOO_LARGE);\\n+\\t\\t}\\n+\\t}\\n+\\n \\tvoid testFreeCrash_Bug20080827() {\\n \\t\\tchar const * const sourceUri = \\\"abc\\\";\\n \\t\\tchar const * const baseUri = \\\"http://www.example.org/\\\";\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdXJpcGFyc2VyL3VyaXBhcnNlci9jb21taXRzL2NlZjI1MDI4ZGU1ZmY4NzJjMmUxZjBhNmM1NjJlYjNlYTllY2JjZTQi.json", "commit": "https://api.github.com/repos/uriparser/uriparser/commits/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4", "content": "{\"sha\": \"cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"node_id\": \"MDY6Q29tbWl0MTE2NTMwNjY0OmNlZjI1MDI4ZGU1ZmY4NzJjMmUxZjBhNmM1NjJlYjNlYTllY2JjZTQ=\", \"commit\": {\"author\": {\"name\": \"Sebastian Pipping\", \"email\": \"sebastian@pipping.org\", \"date\": \"2018-12-08T17:44:11Z\"}, \"committer\": {\"name\": \"Sebastian Pipping\", \"email\": \"sebastian@pipping.org\", \"date\": \"2018-12-08T17:44:25Z\"}, \"message\": \"Fix uriParse*Ex* out-of-bounds read\", \"tree\": {\"sha\": \"19084c52b9c740fae21e56cff4bed4195a5b06bc\", \"url\": \"https://api.github.com/repos/uriparser/uriparser/git/trees/19084c52b9c740fae21e56cff4bed4195a5b06bc\"}, \"url\": \"https://api.github.com/repos/uriparser/uriparser/git/commits/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/uriparser/uriparser/commits/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"html_url\": \"https://github.com/uriparser/uriparser/commit/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"comments_url\": \"https://api.github.com/repos/uriparser/uriparser/commits/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/comments\", \"author\": {\"login\": \"hartwork\", \"id\": 1577132, \"node_id\": \"MDQ6VXNlcjE1NzcxMzI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1577132?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hartwork\", \"html_url\": \"https://github.com/hartwork\", \"followers_url\": \"https://api.github.com/users/hartwork/followers\", \"following_url\": \"https://api.github.com/users/hartwork/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hartwork/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hartwork/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hartwork/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hartwork/orgs\", \"repos_url\": \"https://api.github.com/users/hartwork/repos\", \"events_url\": \"https://api.github.com/users/hartwork/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hartwork/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"hartwork\", \"id\": 1577132, \"node_id\": \"MDQ6VXNlcjE1NzcxMzI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1577132?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hartwork\", \"html_url\": \"https://github.com/hartwork\", \"followers_url\": \"https://api.github.com/users/hartwork/followers\", \"following_url\": \"https://api.github.com/users/hartwork/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hartwork/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hartwork/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hartwork/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hartwork/orgs\", \"repos_url\": \"https://api.github.com/users/hartwork/repos\", \"events_url\": \"https://api.github.com/users/hartwork/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hartwork/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"499214c7f0b3935c6c14436e6aabb9e82990377d\", \"url\": \"https://api.github.com/repos/uriparser/uriparser/commits/499214c7f0b3935c6c14436e6aabb9e82990377d\", \"html_url\": \"https://github.com/uriparser/uriparser/commit/499214c7f0b3935c6c14436e6aabb9e82990377d\"}], \"stats\": {\"total\": 24, \"additions\": 24, \"deletions\": 0}, \"files\": [{\"sha\": \"1ab4552faa6011408a34cba265a887f1be011652\", \"filename\": \"ChangeLog\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/uriparser/uriparser/blob/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/ChangeLog\", \"raw_url\": \"https://github.com/uriparser/uriparser/raw/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/ChangeLog\", \"contents_url\": \"https://api.github.com/repos/uriparser/uriparser/contents/ChangeLog?ref=cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"patch\": \"@@ -4,6 +4,12 @@ NOTE: uriparser is looking for help with a few things:\\n \\n 201x-xx-xx -- x.x.x\\n \\n+  * Fixed:\\n+      Out-of-bounds read in uriParse*Ex* for incomplete URIs with IPv6\\n+      addresses with embedded IPv4 address, e.g. \\\"//[::44.1\\\";\\n+      mitigated if passed parameter <afterLast> points to readable memory\\n+      containing a '\\\\0' byte.\\n+      Thanks to Joergen Ibsen for the report!\\n   * Fixed: uriToStringCharsRequired* reported 1 more byte than actually needed\\n       for IPv4 address URIs (GitHub #41); Thanks to @gyh007 for the patch!\\n   * Fixed: Compilation with MinGW\"}, {\"sha\": \"33ac89157dfe1850b2842647ddc8a4e45765a618\", \"filename\": \"src/UriParse.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/uriparser/uriparser/blob/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/src%2FUriParse.c\", \"raw_url\": \"https://github.com/uriparser/uriparser/raw/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/src%2FUriParse.c\", \"contents_url\": \"https://api.github.com/repos/uriparser/uriparser/contents/src%2FUriParse.c?ref=cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"patch\": \"@@ -692,6 +692,11 @@ static const URI_CHAR * URI_FUNC(ParseIPv6address2)(\\n \\t\\t\\t\\t\\treturn NULL;\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tfirst++;\\n+\\n+\\t\\t\\t\\tif (first >= afterLast) {\\n+\\t\\t\\t\\t\\tURI_FUNC(StopSyntax)(state, first, memory);\\n+\\t\\t\\t\\t\\treturn NULL;\\n+\\t\\t\\t\\t}\\n \\t\\t\\t}\\n \\t\\t} else {\\n \\t\\t\\t/* Eat while no dot in sight */\"}, {\"sha\": \"8eabee6b215286ba49cef4faa2f665b135b34763\", \"filename\": \"test/test.cpp\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 0, \"changes\": 13, \"blob_url\": \"https://github.com/uriparser/uriparser/blob/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/test%2Ftest.cpp\", \"raw_url\": \"https://github.com/uriparser/uriparser/raw/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4/test%2Ftest.cpp\", \"contents_url\": \"https://api.github.com/repos/uriparser/uriparser/contents/test%2Ftest.cpp?ref=cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4\", \"patch\": \"@@ -242,6 +242,19 @@ TEST(UriSuite, TestIpSixFail) {\\n \\t\\tURI_TEST_IP_SIX_FAIL(\\\"g:0:0:0:0:0:0\\\");\\n }\\n \\n+TEST(UriSuite, TestIpSixOverread) {\\n+\\t\\tUriUriA uri;\\n+\\t\\tconst char * errorPos;\\n+\\n+\\t\\t// NOTE: This string is designed to not have a terminator\\n+\\t\\tchar uriText[2 + 3 + 2 + 1 + 1];\\n+\\t\\tstrncpy(uriText, \\\"//[::44.1\\\", sizeof(uriText));\\n+\\n+\\t\\tEXPECT_EQ(uriParseSingleUriExA(&uri, uriText,\\n+\\t\\t\\t\\turiText + sizeof(uriText), &errorPos), URI_ERROR_SYNTAX);\\n+\\t\\tEXPECT_EQ(errorPos, uriText + sizeof(uriText));\\n+}\\n+\\n TEST(UriSuite, TestUri) {\\n \\t\\tUriParserStateA stateA;\\n \\t\\tUriParserStateW stateW;\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9lYTBmOTZjZjQ1ZGVlZDM5ZmI5OGIyOGYzMGQwYWNkYzMwNGRiMjQzIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/ea0f96cf45deed39fb98b28f30d0acdc304db243", "content": "{\"sha\": \"ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"node_id\": \"C_kwDOAeqQ1NoAKGVhMGY5NmNmNDVkZWVkMzlmYjk4YjI4ZjMwZDBhY2RjMzA0ZGIyNDM\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-12-20T07:34:39Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-12-20T07:48:33Z\"}, \"message\": \"printer xml BUGFIX printing anydata tree without namespace\\n\\nRefs #1958\", \"tree\": {\"sha\": \"f6f0fa4a8c6c2ed001211e4e2c03e1dd0d54155d\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/f6f0fa4a8c6c2ed001211e4e2c03e1dd0d54155d\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"html_url\": \"https://github.com/CESNET/libyang/commit/ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/ea0f96cf45deed39fb98b28f30d0acdc304db243/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"09abf888c0f33904f05d2c93c4465a92927fd500\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/09abf888c0f33904f05d2c93c4465a92927fd500\", \"html_url\": \"https://github.com/CESNET/libyang/commit/09abf888c0f33904f05d2c93c4465a92927fd500\"}], \"stats\": {\"total\": 27, \"additions\": 25, \"deletions\": 2}, \"files\": [{\"sha\": \"e22924c491d0641d045e354ee33cf5430c9736eb\", \"filename\": \"src/printer_xml.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/CESNET/libyang/blob/ea0f96cf45deed39fb98b28f30d0acdc304db243/src%2Fprinter_xml.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/ea0f96cf45deed39fb98b28f30d0acdc304db243/src%2Fprinter_xml.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fprinter_xml.c?ref=ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"patch\": \"@@ -287,8 +287,10 @@ xml_print_opaq_open(struct xmlpr_ctx *pctx, const struct lyd_node_opaq *node)\\n     /* print node name */\\n     ly_print_(pctx->out, \\\"%*s<%s\\\", INDENT, node->name.name);\\n \\n-    /* print default namespace */\\n-    xml_print_ns_opaq(pctx, node->format, &node->name, LYXML_PREFIX_DEFAULT);\\n+    if (node->name.prefix || node->name.module_ns) {\\n+        /* print default namespace */\\n+        xml_print_ns_opaq(pctx, node->format, &node->name, LYXML_PREFIX_DEFAULT);\\n+    }\\n \\n     /* print attributes */\\n     LY_CHECK_RET(xml_print_attr(pctx, node));\"}, {\"sha\": \"76429606a345be049687a57ea94aed2e099dd98b\", \"filename\": \"tests/utests/data/test_new.c\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/CESNET/libyang/blob/ea0f96cf45deed39fb98b28f30d0acdc304db243/tests%2Futests%2Fdata%2Ftest_new.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/ea0f96cf45deed39fb98b28f30d0acdc304db243/tests%2Futests%2Fdata%2Ftest_new.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fdata%2Ftest_new.c?ref=ea0f96cf45deed39fb98b28f30d0acdc304db243\", \"patch\": \"@@ -370,6 +370,27 @@ test_path(void **state)\\n             \\\"<ll2 xmlns=\\\\\\\"urn:tests:a\\\\\\\">val3</ll2>\\\\n\\\");\\n     free(str);\\n     lyd_free_siblings(root);\\n+\\n+    /* anydata */\\n+    ret = lyd_new_path2(NULL, UTEST_LYCTX, \\\"/a:any\\\", \\\"<elem>val</elem>\\\", 0, LYD_ANYDATA_XML, 0, &root, NULL);\\n+    assert_int_equal(ret, LY_SUCCESS);\\n+    assert_non_null(root);\\n+\\n+    lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);\\n+    assert_string_equal(str,\\n+            \\\"<any xmlns=\\\\\\\"urn:tests:a\\\\\\\">\\\\n\\\"\\n+            \\\"  <elem>val</elem>\\\\n\\\"\\n+            \\\"</any>\\\\n\\\");\\n+    free(str);\\n+    lyd_print_mem(&str, root, LYD_JSON, LYD_PRINT_WITHSIBLINGS);\\n+    assert_string_equal(str,\\n+            \\\"{\\\\n\\\"\\n+            \\\"  \\\\\\\"a:any\\\\\\\": {\\\\n\\\"\\n+            \\\"    \\\\\\\"elem\\\\\\\": \\\\\\\"val\\\\\\\"\\\\n\\\"\\n+            \\\"  }\\\\n\\\"\\n+            \\\"}\\\\n\\\");\\n+    free(str);\\n+    lyd_free_siblings(root);\\n }\\n \\n static void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy81MDlkNzIxYzJiNjEwODhjMWU0OTFjMzMwYzQ4YjBjYzAxZGMxOTFlIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/509d721c2b61088c1e491c330c48b0cc01dc191e", "content": "{\"sha\": \"509d721c2b61088c1e491c330c48b0cc01dc191e\", \"node_id\": \"C_kwDOAeqQ1NoAKDUwOWQ3MjFjMmI2MTA4OGMxZTQ5MWMzMzBjNDhiMGNjMDFkYzE5MWU\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-02-21T07:47:23Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-02-21T09:00:03Z\"}, \"message\": \"tree data BUGFIX possible freed memory access\", \"tree\": {\"sha\": \"7141b3e5b2d552c5cbab97e81f8f01ce01a9d3d8\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/7141b3e5b2d552c5cbab97e81f8f01ce01a9d3d8\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/509d721c2b61088c1e491c330c48b0cc01dc191e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/509d721c2b61088c1e491c330c48b0cc01dc191e\", \"html_url\": \"https://github.com/CESNET/libyang/commit/509d721c2b61088c1e491c330c48b0cc01dc191e\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/509d721c2b61088c1e491c330c48b0cc01dc191e/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"39ed7a2d6756aba40eff2e2f6e2b7c96449aab1f\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/39ed7a2d6756aba40eff2e2f6e2b7c96449aab1f\", \"html_url\": \"https://github.com/CESNET/libyang/commit/39ed7a2d6756aba40eff2e2f6e2b7c96449aab1f\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"fe1b7d0174977d35ef8cb3b921986782bc62c4b1\", \"filename\": \"src/tree_data.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/509d721c2b61088c1e491c330c48b0cc01dc191e/src%2Ftree_data.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/509d721c2b61088c1e491c330c48b0cc01dc191e/src%2Ftree_data.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_data.c?ref=509d721c2b61088c1e491c330c48b0cc01dc191e\", \"patch\": \"@@ -84,7 +84,7 @@ lyd_value_store(const struct ly_ctx *ctx, struct lyd_value *val, const struct ly\\n             LOGVAL_ERRITEM(ctx, err);\\n             ly_err_free(err);\\n         } else {\\n-            LOGVAL(ctx, LYVE_OTHER, \\\"Storing value \\\\\\\"%.*s\\\\\\\" failed.\\\", (int)value_len, value);\\n+            LOGVAL(ctx, LYVE_OTHER, \\\"Storing value failed.\\\");\\n         }\\n         return ret;\\n     }\"}, {\"sha\": \"6b13b4c5710db247f344d1e3f6cf80ee86777223\", \"filename\": \"tests/utests/types/yang_types.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/509d721c2b61088c1e491c330c48b0cc01dc191e/tests%2Futests%2Ftypes%2Fyang_types.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/509d721c2b61088c1e491c330c48b0cc01dc191e/tests%2Futests%2Ftypes%2Fyang_types.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Ftypes%2Fyang_types.c?ref=509d721c2b61088c1e491c330c48b0cc01dc191e\", \"patch\": \"@@ -147,7 +147,7 @@ test_data_xml(void **state)\\n     CHECK_LOG_CTX(\\\"Failed to resolve prefix \\\\\\\"a\\\\\\\".\\\", \\\"Schema location /a:l2, line number 1.\\\");\\n     TEST_ERROR_XML(\\\"a\\\\\\\" xmlns:yl=\\\\\\\"urn:ietf:params:xml:ns:yang:ietf-yang-library\\\", \\\"l2\\\",\\n             \\\"/yl:yang-library/yl:datastore/yl::name\\\");\\n-    CHECK_LOG_CTX(\\\"Storing value \\\\\\\"/yl:yang-library/yl:datastore/yl::name\\\\\\\" failed.\\\", \\\"Schema location /a:l2, line number 1.\\\",\\n+    CHECK_LOG_CTX(\\\"Storing value failed.\\\", \\\"Schema location /a:l2, line number 1.\\\",\\n             \\\"Invalid character 'y'[31] of expression '/yl:yang-library/yl:datastore/yl::name'.\\\",\\n             \\\"Schema location /a:l2, line number 1.\\\");\\n }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy83Yzc3ODNkZjc1YjlhNWRmYzZjYzIyYzcwYjk0NjdkNDdhYTkxM2QyIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2", "content": "{\"sha\": \"7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6N2M3NzgzZGY3NWI5YTVkZmM2Y2MyMmM3MGI5NDY3ZDQ3YWE5MTNkMg==\", \"commit\": {\"author\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2020-04-08T13:34:39Z\"}, \"committer\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2020-04-08T13:34:39Z\"}, \"message\": \"schema compile BUGFIX applying augments only with uses statemtns\\n\\nThere is a case when parsed data node maps to no compiled data node,\\nwhich was not covered when applying augments. We were expecting some\\ndata node, but in case the augment contains only a uses statement\\nreferencing grouping with notifications or actions only (no data\\nchildren), the parsed data node (uses) actually maps to no compiled data\\nnode (actions/notifications). Expecting at least one compiled children\\nwithout checking caused NULL pointer dereference.\\n\\nFixes #1041\", \"tree\": {\"sha\": \"b620e4ec50e9548b467064a42ca2f17684829fd0\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/b620e4ec50e9548b467064a42ca2f17684829fd0\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"html_url\": \"https://github.com/CESNET/libyang/commit/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"613bc03456b9716408ba87184c266b9850f979ac\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/613bc03456b9716408ba87184c266b9850f979ac\", \"html_url\": \"https://github.com/CESNET/libyang/commit/613bc03456b9716408ba87184c266b9850f979ac\"}], \"stats\": {\"total\": 17, \"additions\": 16, \"deletions\": 1}, \"files\": [{\"sha\": \"3e0cc121063b10c3c1a1fdf037999461b35f843c\", \"filename\": \"src/tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 1, \"changes\": 7, \"blob_url\": \"https://github.com/CESNET/libyang/blob/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2/src%2Ftree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2/src%2Ftree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_schema_compile.c?ref=7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"patch\": \"@@ -4749,7 +4749,12 @@ lys_compile_augment(struct lysc_ctx *ctx, struct lysp_augment *aug_p, const stru\\n             node = ((struct lysc_node_choice*)target)->cases->prev;\\n         } else {\\n             /* the compiled node is the last child of the target */\\n-            node = lysc_node_children(target, flags)->prev;\\n+            node = (struct lysc_node*)lysc_node_children(target, flags);\\n+            if (!node) {\\n+                /* there is no data children (compiled nodes is e.g. notification or action or nothing) */\\n+                break;\\n+            }\\n+            node = node->prev;\\n         }\\n \\n         if (!allow_mandatory && (node->flags & LYS_CONFIG_W) && (node->flags & LYS_MAND_TRUE)) {\"}, {\"sha\": \"b8109f9b92b9b271a55716add168fdc16819b9cc\", \"filename\": \"tests/src/test_tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/CESNET/libyang/blob/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/7c7783df75b9a5dfc6cc22c70b9467d47aa913d2/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fsrc%2Ftest_tree_schema_compile.c?ref=7c7783df75b9a5dfc6cc22c70b9467d47aa913d2\", \"patch\": \"@@ -2770,7 +2770,9 @@ test_augment(void **state)\\n     const struct lysc_node *node;\\n     const struct lysc_node_choice *ch;\\n     const struct lysc_node_case *c;\\n+    const struct lysc_node_container *cont;\\n     const struct lysc_action *rpc;\\n+    const struct lysc_notif *notif;\\n \\n     assert_int_equal(LY_SUCCESS, ly_ctx_new(NULL, LY_CTX_DISABLE_SEARCHDIRS, &ctx));\\n \\n@@ -2873,6 +2875,14 @@ test_augment(void **state)\\n     assert_string_equal(\\\"y\\\", rpc->output.data->name);\\n     assert_null(rpc->output.data->next);\\n \\n+    assert_non_null(mod = lys_parse_mem(ctx, \\\"module j {namespace urn:j;prefix j;yang-version 1.1; container root;\\\"\\n+                                        \\\"grouping grp {notification grp-notif;}\\\"\\n+                                        \\\"augment /root {uses grp;}}\\\", LYS_IN_YANG));\\n+    assert_non_null(cont = (const struct lysc_node_container*)mod->compiled->data);\\n+    assert_null(cont->child);\\n+    assert_non_null(notif = cont->notifs);\\n+    assert_int_equal(1, LY_ARRAY_SIZE(notif));\\n+\\n     assert_null(lys_parse_mem(ctx, \\\"module aa {namespace urn:aa;prefix aa; container c {leaf a {type string;}}\\\"\\n                                         \\\"augment /x {leaf a {type int8;}}}\\\", LYS_IN_YANG));\\n     logbuf_assert(\\\"Invalid absolute-schema-nodeid value \\\\\\\"/x\\\\\\\" - target node not found. /aa:{augment='/x'}\\\");\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9jZGNhY2U3MjMwMzUyYTI1ZWIyMWE0ODhlN2Y0MmQwMDRiM2RlM2UxIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/cdcace7230352a25eb21a488e7f42d004b3de3e1", "content": "{\"sha\": \"cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6Y2RjYWNlNzIzMDM1MmEyNWViMjFhNDg4ZTdmNDJkMDA0YjNkZTNlMQ==\", \"commit\": {\"author\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2017-09-06T13:14:45Z\"}, \"committer\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2017-09-06T13:14:45Z\"}, \"message\": \"log BUGFIX provide prefix on top-level nodes\", \"tree\": {\"sha\": \"25f2ee7b946e2efac2926fbd644dbda7cbc45bce\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/25f2ee7b946e2efac2926fbd644dbda7cbc45bce\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"html_url\": \"https://github.com/CESNET/libyang/commit/cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/cdcace7230352a25eb21a488e7f42d004b3de3e1/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"054aca293617ab1c7ee48a7dca6906ecad4130ff\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/054aca293617ab1c7ee48a7dca6906ecad4130ff\", \"html_url\": \"https://github.com/CESNET/libyang/commit/054aca293617ab1c7ee48a7dca6906ecad4130ff\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"876401a1006955d4045ddb2c8ae7bd701ab0b0a0\", \"filename\": \"src/log.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/cdcace7230352a25eb21a488e7f42d004b3de3e1/src%2Flog.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/cdcace7230352a25eb21a488e7f42d004b3de3e1/src%2Flog.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Flog.c?ref=cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"patch\": \"@@ -472,7 +472,7 @@ ly_vlog_build_path_reverse(enum LY_VLOG_ELEM elem_type, const void *elem, char *\\n                 name = ((struct lys_node *)elem)->name;\\n             }\\n \\n-            if (lys_node_module((struct lys_node *)elem) != top_smodule) {\\n+            if (!((struct lys_node *)elem)->parent || lys_node_module((struct lys_node *)elem) != top_smodule) {\\n                 prefix = lys_node_module((struct lys_node *)elem)->name;\\n             } else {\\n                 prefix = NULL;\"}, {\"sha\": \"9d1a2d2fba3fad0bf778164428aefe7dad85a358\", \"filename\": \"tests/api/test_tree_schema.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/cdcace7230352a25eb21a488e7f42d004b3de3e1/tests%2Fapi%2Ftest_tree_schema.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/cdcace7230352a25eb21a488e7f42d004b3de3e1/tests%2Fapi%2Ftest_tree_schema.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fapi%2Ftest_tree_schema.c?ref=cdcace7230352a25eb21a488e7f42d004b3de3e1\", \"patch\": \"@@ -1299,7 +1299,7 @@ test_lys_path(void **state)\\n     module = lys_parse_mem(ctx, lys_module_a, yang_format);\\n     assert_ptr_not_equal(module, NULL);\\n \\n-    template = \\\"/x/bar-gggg\\\";\\n+    template = \\\"/a:x/bar-gggg\\\";\\n     set = lys_find_path(module, NULL, template);\\n     assert_ptr_not_equal(set, NULL);\\n     node = set->set.s[0];\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy8zNTBhNmJmNjllMDNkMTlmZTk5NmNiYTk5MmI0OTU1NmFlMmNlOGFiIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/350a6bf69e03d19fe996cba992b49556ae2ce8ab", "content": "{\"sha\": \"350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6MzUwYTZiZjY5ZTAzZDE5ZmU5OTZjYmE5OTJiNDk1NTZhZTJjZThhYg==\", \"commit\": {\"author\": {\"name\": \"aPiecek\", \"email\": \"piecek@cesnet.cz\", \"date\": \"2021-05-25T05:59:10Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2021-05-25T06:50:09Z\"}, \"message\": \"json BUGFIX in lyjson_number\\n\\nThe minus sign was taken as part of the number, which is not correct\\nin this expression.\", \"tree\": {\"sha\": \"dae8f9598bfb3a100014c7f8519cd97b8d46ef5b\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/dae8f9598bfb3a100014c7f8519cd97b8d46ef5b\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"html_url\": \"https://github.com/CESNET/libyang/commit/350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/350a6bf69e03d19fe996cba992b49556ae2ce8ab/comments\", \"author\": {\"login\": \"lePici\", \"id\": 13786495, \"node_id\": \"MDQ6VXNlcjEzNzg2NDk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/13786495?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/lePici\", \"html_url\": \"https://github.com/lePici\", \"followers_url\": \"https://api.github.com/users/lePici/followers\", \"following_url\": \"https://api.github.com/users/lePici/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/lePici/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/lePici/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/lePici/subscriptions\", \"organizations_url\": \"https://api.github.com/users/lePici/orgs\", \"repos_url\": \"https://api.github.com/users/lePici/repos\", \"events_url\": \"https://api.github.com/users/lePici/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/lePici/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"95485ea4036af9c93ac3bd756c8c20509a717d4e\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/95485ea4036af9c93ac3bd756c8c20509a717d4e\", \"html_url\": \"https://github.com/CESNET/libyang/commit/95485ea4036af9c93ac3bd756c8c20509a717d4e\"}], \"stats\": {\"total\": 20, \"additions\": 19, \"deletions\": 1}, \"files\": [{\"sha\": \"2ef1b5a7a97a767abab1ccfa65585802259d311e\", \"filename\": \"src/json.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/350a6bf69e03d19fe996cba992b49556ae2ce8ab/src%2Fjson.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/350a6bf69e03d19fe996cba992b49556ae2ce8ab/src%2Fjson.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fjson.c?ref=350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"patch\": \"@@ -428,7 +428,7 @@ lyjson_number(struct lyjson_ctx *jsonctx)\\n                 /* adding zeros at the end */\\n                 num_len = exponent + e_val;\\n                 dp_position = num_len; /* decimal point is behind the actual value */\\n-            } else if ((size_t)labs(e_val) < exponent) {\\n+            } else if ((size_t)labs(e_val) < (exponent - minus)) {\\n                 /* adding decimal point between the integer's digits */\\n                 num_len = exponent + 1;\\n                 dp_position = exponent + e_val;\"}, {\"sha\": \"211e50696c29cf8db156820d1e972b164f3223ad\", \"filename\": \"tests/utests/basic/test_json.c\", \"status\": \"modified\", \"additions\": 18, \"deletions\": 0, \"changes\": 18, \"blob_url\": \"https://github.com/CESNET/libyang/blob/350a6bf69e03d19fe996cba992b49556ae2ce8ab/tests%2Futests%2Fbasic%2Ftest_json.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/350a6bf69e03d19fe996cba992b49556ae2ce8ab/tests%2Futests%2Fbasic%2Ftest_json.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fbasic%2Ftest_json.c?ref=350a6bf69e03d19fe996cba992b49556ae2ce8ab\", \"patch\": \"@@ -132,6 +132,24 @@ test_number(void **state)\\n     assert_int_equal(1, jsonctx->dynamic);\\n     lyjson_ctx_free(jsonctx);\\n \\n+    str = \\\"15E-2\\\";\\n+    assert_non_null(ly_in_memory(in, str));\\n+    assert_int_equal(LY_SUCCESS, lyjson_ctx_new(UTEST_LYCTX, in, &jsonctx));\\n+    assert_int_equal(LYJSON_NUMBER, lyjson_ctx_status(jsonctx, 0));\\n+    assert_string_equal(\\\"0.15\\\", jsonctx->value);\\n+    assert_int_equal(4, jsonctx->value_len);\\n+    assert_int_equal(1, jsonctx->dynamic);\\n+    lyjson_ctx_free(jsonctx);\\n+\\n+    str = \\\"-15E-2\\\";\\n+    assert_non_null(ly_in_memory(in, str));\\n+    assert_int_equal(LY_SUCCESS, lyjson_ctx_new(UTEST_LYCTX, in, &jsonctx));\\n+    assert_int_equal(LYJSON_NUMBER, lyjson_ctx_status(jsonctx, 0));\\n+    assert_string_equal(\\\"-0.15\\\", jsonctx->value);\\n+    assert_int_equal(5, jsonctx->value_len);\\n+    assert_int_equal(1, jsonctx->dynamic);\\n+    lyjson_ctx_free(jsonctx);\\n+\\n     str = \\\"15E-3\\\";\\n     assert_non_null(ly_in_memory(in, str));\\n     assert_int_equal(LY_SUCCESS, lyjson_ctx_new(UTEST_LYCTX, in, &jsonctx));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9iNmVjYWVhYTAzOTE3NDVlYzkwNTRjYzQzNTFhYzQwNDkzMTc1NzZjIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/b6ecaeaa0391745ec9054cc4351ac4049317576c", "content": "{\"sha\": \"b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6YjZlY2FlYWEwMzkxNzQ1ZWM5MDU0Y2M0MzUxYWM0MDQ5MzE3NTc2Yw==\", \"commit\": {\"author\": {\"name\": \"Christian Hopps\", \"email\": \"chopps@gmail.com\", \"date\": \"2021-02-06T14:45:38Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2021-02-08T08:01:22Z\"}, \"message\": \"data tree BUGFIX handle when in mandatory true node\", \"tree\": {\"sha\": \"8e5623c2342ad45ce66ff8f8dd5857a496081876\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/8e5623c2342ad45ce66ff8f8dd5857a496081876\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"html_url\": \"https://github.com/CESNET/libyang/commit/b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/b6ecaeaa0391745ec9054cc4351ac4049317576c/comments\", \"author\": {\"login\": \"choppsv1\", \"id\": 3074665, \"node_id\": \"MDQ6VXNlcjMwNzQ2NjU=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3074665?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/choppsv1\", \"html_url\": \"https://github.com/choppsv1\", \"followers_url\": \"https://api.github.com/users/choppsv1/followers\", \"following_url\": \"https://api.github.com/users/choppsv1/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/choppsv1/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/choppsv1/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/choppsv1/subscriptions\", \"organizations_url\": \"https://api.github.com/users/choppsv1/orgs\", \"repos_url\": \"https://api.github.com/users/choppsv1/repos\", \"events_url\": \"https://api.github.com/users/choppsv1/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/choppsv1/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"721b6f65ed98106ea3ce94fab7be9376cf64d200\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/721b6f65ed98106ea3ce94fab7be9376cf64d200\", \"html_url\": \"https://github.com/CESNET/libyang/commit/721b6f65ed98106ea3ce94fab7be9376cf64d200\"}], \"stats\": {\"total\": 52, \"additions\": 51, \"deletions\": 1}, \"files\": [{\"sha\": \"db21634fa89588f222e11a4d794680c77171e419\", \"filename\": \"src/xpath.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/b6ecaeaa0391745ec9054cc4351ac4049317576c/src%2Fxpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/b6ecaeaa0391745ec9054cc4351ac4049317576c/src%2Fxpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fxpath.c?ref=b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"patch\": \"@@ -8432,7 +8432,7 @@ lyxp_get_root_type(const struct lyd_node *ctx_node, const struct lysc_node *ctx_\\n     if (op || !(options & LYXP_SCHEMA)) {\\n         /* general root that can access everything */\\n         return LYXP_NODE_ROOT;\\n-    } else if (!ctx_node || (ctx_node->schema->flags & LYS_CONFIG_W)) {\\n+    } else if (!ctx_node || !ctx_node->schema || (ctx_node->schema->flags & LYS_CONFIG_W)) {\\n         /* root context node can access only config data (because we said so, it is unspecified) */\\n         return LYXP_NODE_ROOT_CONFIG;\\n     }\"}, {\"sha\": \"cb0a306e9b3376c2b5113c5777b8ee3917fcd83b\", \"filename\": \"tests/utests/data/test_validation.c\", \"status\": \"modified\", \"additions\": 50, \"deletions\": 0, \"changes\": 50, \"blob_url\": \"https://github.com/CESNET/libyang/blob/b6ecaeaa0391745ec9054cc4351ac4049317576c/tests%2Futests%2Fdata%2Ftest_validation.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/b6ecaeaa0391745ec9054cc4351ac4049317576c/tests%2Futests%2Fdata%2Ftest_validation.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fdata%2Ftest_validation.c?ref=b6ecaeaa0391745ec9054cc4351ac4049317576c\", \"patch\": \"@@ -72,6 +72,55 @@ test_when(void **state)\\n     lyd_free_all(tree);\\n }\\n \\n+static void\\n+test_mandatory_when(void **state)\\n+{\\n+    struct lyd_node *tree;\\n+    const char *schema =\\n+            \\\"module a {\\\\n\\\"\\n+            \\\"    namespace urn:tests:a;\\\\n\\\"\\n+            \\\"    prefix a;\\\\n\\\"\\n+            \\\"    yang-version 1.1;\\\\n\\\"\\n+            \\\"\\\\n\\\"\\n+            \\\"    container cont {\\\\n\\\"\\n+            \\\"        leaf a {\\\\n\\\"\\n+            \\\"            type string;\\\\n\\\"\\n+            \\\"        }\\\\n\\\"\\n+            \\\"        leaf b {\\\\n\\\"\\n+            \\\"            when \\\\\\\"../a = 'val_a'\\\\\\\";\\\\n\\\"\\n+            \\\"            mandatory true;\\\\n\\\"\\n+            \\\"            type string;\\\\n\\\"\\n+            \\\"        }\\\\n\\\"\\n+            \\\"    }\\\\n\\\"\\n+            \\\"    leaf c {\\\\n\\\"\\n+            \\\"        type string;\\\\n\\\"\\n+            \\\"    }\\\\n\\\"\\n+            \\\"    leaf d {\\\\n\\\"\\n+            \\\"        when \\\\\\\"../c = 'val_c'\\\\\\\";\\\\n\\\"\\n+            \\\"        mandatory true;\\\\n\\\"\\n+            \\\"        type string;\\\\n\\\"\\n+            \\\"    }\\\\n\\\"\\n+            \\\"}\\\";\\n+\\n+    UTEST_ADD_MODULE(schema, LYS_IN_YANG, NULL, NULL);\\n+\\n+    CHECK_PARSE_LYD_PARAM(\\\"<d xmlns=\\\\\\\"urn:tests:a\\\\\\\">hey</d>\\\", LYD_XML, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);\\n+    CHECK_LOG_CTX(\\\"When condition \\\\\\\"../c = 'val_c'\\\\\\\" not satisfied.\\\", \\\"Schema location /a:d, data location /a:d.\\\");\\n+\\n+    CHECK_PARSE_LYD_PARAM(\\\"<cont xmlns=\\\\\\\"urn:tests:a\\\\\\\"><b>hey</b></cont>\\\", LYD_XML, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);\\n+    CHECK_LOG_CTX(\\\"When condition \\\\\\\"../a = 'val_a'\\\\\\\" not satisfied.\\\", \\\"Schema location /a:cont/b, data location /a:cont/b.\\\");\\n+\\n+    LYD_TREE_CREATE(\\\"<c xmlns=\\\\\\\"urn:tests:a\\\\\\\">val_c</c><d xmlns=\\\\\\\"urn:tests:a\\\\\\\">hey</d>\\\", tree);\\n+    CHECK_LYSC_NODE(tree->next->next->schema, NULL, 0, LYS_CONFIG_W | LYS_STATUS_CURR | LYS_MAND_TRUE, 1, \\\"d\\\", 0, LYS_LEAF, 0, 0, NULL, 1);\\n+    assert_int_equal(LYD_WHEN_TRUE, tree->next->next->flags);\\n+    lyd_free_all(tree);\\n+\\n+    LYD_TREE_CREATE(\\\"<cont xmlns=\\\\\\\"urn:tests:a\\\\\\\"><a>val_a</a><b>hey</b></cont>\\\", tree);\\n+    CHECK_LYSC_NODE(lyd_child(tree)->next->schema, NULL, 0, LYS_CONFIG_W | LYS_STATUS_CURR | LYS_MAND_TRUE, 1, \\\"b\\\", 0, LYS_LEAF, tree->schema, 0, NULL, 1);\\n+    assert_int_equal(LYD_WHEN_TRUE, lyd_child(tree)->next->flags);\\n+    lyd_free_all(tree);\\n+}\\n+\\n static void\\n test_mandatory(void **state)\\n {\\n@@ -1173,6 +1222,7 @@ main(void)\\n     const struct CMUnitTest tests[] = {\\n         UTEST(test_when),\\n         UTEST(test_mandatory),\\n+        UTEST(test_mandatory_when),\\n         UTEST(test_minmax),\\n         UTEST(test_unique),\\n         UTEST(test_unique_nested),\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9hMzUzY2NlODUwNTYwYmVhNzYxZDY3YTJmYmNhZjljYjI3MWY1ODZmIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/a353cce850560bea761d67a2fbcaf9cb271f586f", "content": "{\"sha\": \"a353cce850560bea761d67a2fbcaf9cb271f586f\", \"node_id\": \"C_kwDOAeqQ1NoAKGEzNTNjY2U4NTA1NjBiZWE3NjFkNjdhMmZiY2FmOWNiMjcxZjU4NmY\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-11-14T09:09:55Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-11-14T09:09:55Z\"}, \"message\": \"xpath BUGFIX child axis does not include siblings\\n\\nFixes #1938\", \"tree\": {\"sha\": \"77b593ba88916b72d2a074d4967b6e9b8c56200a\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/77b593ba88916b72d2a074d4967b6e9b8c56200a\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/a353cce850560bea761d67a2fbcaf9cb271f586f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/a353cce850560bea761d67a2fbcaf9cb271f586f\", \"html_url\": \"https://github.com/CESNET/libyang/commit/a353cce850560bea761d67a2fbcaf9cb271f586f\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/a353cce850560bea761d67a2fbcaf9cb271f586f/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cb798b15339388572ede29205112fe8d1bcf1be5\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/cb798b15339388572ede29205112fe8d1bcf1be5\", \"html_url\": \"https://github.com/CESNET/libyang/commit/cb798b15339388572ede29205112fe8d1bcf1be5\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"919ab2354c9dbd7d9d15455312ddef3c94a7380c\", \"filename\": \"src/xpath.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/a353cce850560bea761d67a2fbcaf9cb271f586f/src%2Fxpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/a353cce850560bea761d67a2fbcaf9cb271f586f/src%2Fxpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fxpath.c?ref=a353cce850560bea761d67a2fbcaf9cb271f586f\", \"patch\": \"@@ -6584,7 +6584,7 @@ moveto_axis_scnode_next(const struct lysc_node **iter, enum lyxp_node_type *iter\\n             }\\n \\n             assert(scnode);\\n-            if (!lysc_data_parent(scnode)) {\\n+            if ((axis != LYXP_AXIS_CHILD) && !lysc_data_parent(scnode)) {\\n                 /* iterating over top-level nodes, find next */\\n                 while (lysc_data_parent(*iter)) {\\n                     *iter = lysc_data_parent(*iter);\"}, {\"sha\": \"6bacb27ccc5d809b4495937b8c3e2b6181b6b622\", \"filename\": \"tests/utests/basic/test_xpath.c\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/CESNET/libyang/blob/a353cce850560bea761d67a2fbcaf9cb271f586f/tests%2Futests%2Fbasic%2Ftest_xpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/a353cce850560bea761d67a2fbcaf9cb271f586f/tests%2Futests%2Fbasic%2Ftest_xpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fbasic%2Ftest_xpath.c?ref=a353cce850560bea761d67a2fbcaf9cb271f586f\", \"patch\": \"@@ -96,6 +96,7 @@ setup(void **state)\\n     UTEST_SETUP;\\n \\n     UTEST_ADD_MODULE(schema_a, LYS_IN_YANG, NULL, NULL);\\n+    lys_parse_path(UTEST_LYCTX, TESTS_DIR_MODULES_YANG \\\"/ietf-interfaces@2014-05-08.yang\\\", LYS_IN_YANG, NULL);\\n \\n     return 0;\\n }\\n@@ -485,6 +486,14 @@ test_atomize(void **state)\\n     assert_int_equal(6, set->count);\\n     ly_set_free(set, NULL);\\n \\n+    assert_int_equal(LY_SUCCESS, lys_find_xpath_atoms(UTEST_LYCTX, NULL, \\\"/ietf-interfaces:interfaces/*\\\", 0, &set));\\n+    assert_int_equal(2, set->count);\\n+    ly_set_free(set, NULL);\\n+\\n+    assert_int_equal(LY_SUCCESS, lys_find_xpath_atoms(UTEST_LYCTX, NULL, \\\"/*\\\", 0, &set));\\n+    assert_int_equal(13, set->count);\\n+    ly_set_free(set, NULL);\\n+\\n     /*\\n      * axes\\n      */\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9mZmY0ZGNhMGRhNDU0Y2RmZjRjOGZhYjcwYjRhNjJjMDY3NGZiODYyIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/fff4dca0da454cdff4c8fab70b4a62c0674fb862", "content": "{\"sha\": \"fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"node_id\": \"C_kwDOAeqQ1NoAKGZmZjRkY2EwZGE0NTRjZGZmNGM4ZmFiNzBiNGE2MmMwNjc0ZmI4NjI\", \"commit\": {\"author\": {\"name\": \"aPiecek\", \"email\": \"piecek@cesnet.cz\", \"date\": \"2021-10-07T08:59:53Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2021-10-11T12:26:01Z\"}, \"message\": \"xpath BUGFIX in eval_predicate\\n\\nUninitialized local variable.\", \"tree\": {\"sha\": \"dd0e6cde496e0961ed17a5d46b254696c0ba9eca\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/dd0e6cde496e0961ed17a5d46b254696c0ba9eca\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"html_url\": \"https://github.com/CESNET/libyang/commit/fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/fff4dca0da454cdff4c8fab70b4a62c0674fb862/comments\", \"author\": {\"login\": \"lePici\", \"id\": 13786495, \"node_id\": \"MDQ6VXNlcjEzNzg2NDk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/13786495?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/lePici\", \"html_url\": \"https://github.com/lePici\", \"followers_url\": \"https://api.github.com/users/lePici/followers\", \"following_url\": \"https://api.github.com/users/lePici/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/lePici/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/lePici/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/lePici/subscriptions\", \"organizations_url\": \"https://api.github.com/users/lePici/orgs\", \"repos_url\": \"https://api.github.com/users/lePici/repos\", \"events_url\": \"https://api.github.com/users/lePici/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/lePici/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"320f34305dd9c7d14af5f13bec18e477b37f5db8\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/320f34305dd9c7d14af5f13bec18e477b37f5db8\", \"html_url\": \"https://github.com/CESNET/libyang/commit/320f34305dd9c7d14af5f13bec18e477b37f5db8\"}], \"stats\": {\"total\": 22, \"additions\": 21, \"deletions\": 1}, \"files\": [{\"sha\": \"7f5a0d37e6ba271f650cc47a9d3eb478cd37a454\", \"filename\": \"src/xpath.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/fff4dca0da454cdff4c8fab70b4a62c0674fb862/src%2Fxpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/fff4dca0da454cdff4c8fab70b4a62c0674fb862/src%2Fxpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fxpath.c?ref=fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"patch\": \"@@ -6781,7 +6781,7 @@ eval_predicate(const struct lyxp_expr *exp, uint16_t *tok_idx, struct lyxp_set *\\n     uint16_t orig_exp;\\n     uint32_t i, orig_pos, orig_size;\\n     int32_t pred_in_ctx;\\n-    struct lyxp_set set2;\\n+    struct lyxp_set set2 = {0};\\n     struct lyd_node *orig_parent;\\n \\n     /* '[' */\"}, {\"sha\": \"dc31cc3076123d92271ebb3821d9ccbf55503ffa\", \"filename\": \"tests/utests/basic/test_xpath.c\", \"status\": \"modified\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/CESNET/libyang/blob/fff4dca0da454cdff4c8fab70b4a62c0674fb862/tests%2Futests%2Fbasic%2Ftest_xpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/fff4dca0da454cdff4c8fab70b4a62c0674fb862/tests%2Futests%2Fbasic%2Ftest_xpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fbasic%2Ftest_xpath.c?ref=fff4dca0da454cdff4c8fab70b4a62c0674fb862\", \"patch\": \"@@ -95,6 +95,25 @@ setup(void **state)\\n     return 0;\\n }\\n \\n+static void\\n+test_predicate(void **state)\\n+{\\n+    const char *data;\\n+    struct lyd_node *tree;\\n+    struct ly_set *set;\\n+\\n+    data =\\n+            \\\"<foo2 xmlns=\\\\\\\"urn:tests:a\\\\\\\">50</foo2>\\\";\\n+    assert_int_equal(LY_SUCCESS, lyd_parse_data_mem(UTEST_LYCTX, data, LYD_XML, LYD_PARSE_STRICT, LYD_VALIDATE_PRESENT, &tree));\\n+    assert_non_null(tree);\\n+\\n+    /* Predicate after number. */\\n+    assert_int_equal(LY_SUCCESS, lyd_find_xpath(tree, \\\"/foo2[4[3 = 3]]\\\", &set));\\n+    ly_set_free(set, NULL);\\n+\\n+    lyd_free_all(tree);\\n+}\\n+\\n static void\\n test_invalid(void **state)\\n {\\n@@ -440,6 +459,7 @@ int\\n main(void)\\n {\\n     const struct CMUnitTest tests[] = {\\n+        UTEST(test_predicate, setup),\\n         UTEST(test_invalid, setup),\\n         UTEST(test_hash, setup),\\n         UTEST(test_toplevel, setup),\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy84MTJhNWJmZjQ4NTdhNDg1ZGI5NmZlNzI2OWFmOTQ0ZDBiZGI5MWIzIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/812a5bff4857a485db96fe7269af944d0bdb91b3", "content": "{\"sha\": \"812a5bff4857a485db96fe7269af944d0bdb91b3\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6ODEyYTViZmY0ODU3YTQ4NWRiOTZmZTcyNjlhZjk0NGQwYmRiOTFiMw==\", \"commit\": {\"author\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2019-09-09T07:18:05Z\"}, \"committer\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2019-09-09T07:18:05Z\"}, \"message\": \"schema compile BUGFIX memory leak\\n\\nFixes #872\", \"tree\": {\"sha\": \"c1775696590f4662e17d94dc6549bd481f4d029a\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/c1775696590f4662e17d94dc6549bd481f4d029a\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/812a5bff4857a485db96fe7269af944d0bdb91b3\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/812a5bff4857a485db96fe7269af944d0bdb91b3\", \"html_url\": \"https://github.com/CESNET/libyang/commit/812a5bff4857a485db96fe7269af944d0bdb91b3\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/812a5bff4857a485db96fe7269af944d0bdb91b3/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"b5bc93ee6e0edfc3fb4e9ffbd972037bac42a13a\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/b5bc93ee6e0edfc3fb4e9ffbd972037bac42a13a\", \"html_url\": \"https://github.com/CESNET/libyang/commit/b5bc93ee6e0edfc3fb4e9ffbd972037bac42a13a\"}], \"stats\": {\"total\": 8, \"additions\": 5, \"deletions\": 3}, \"files\": [{\"sha\": \"6155ee45db1171494d98e839add38d933572f0bd\", \"filename\": \"src/tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/CESNET/libyang/blob/812a5bff4857a485db96fe7269af944d0bdb91b3/src%2Ftree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/812a5bff4857a485db96fe7269af944d0bdb91b3/src%2Ftree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_schema_compile.c?ref=812a5bff4857a485db96fe7269af944d0bdb91b3\", \"patch\": \"@@ -3670,8 +3670,10 @@ lys_compile_node_leaf(struct lysc_ctx *ctx, struct lysp_node *node_p, struct lys\\n     /* the dflt member is just filled to avoid getting the default value from the type */\\n     leaf->dflt = (void*)leaf_p->dflt;\\n     ret = lys_compile_node_type(ctx, node_p, &leaf_p->type, leaf);\\n-    leaf->dflt = NULL;\\n-    LY_CHECK_RET(ret);\\n+    if (ret) {\\n+        leaf->dflt = NULL;\\n+        return ret;\\n+    }\\n \\n     if (leaf_p->dflt) {\\n         struct ly_err_item *err = NULL;\"}, {\"sha\": \"90fb86fa0ca8b3d7c47f38ce961d471c2a4d9d85\", \"filename\": \"tests/src/test_tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/812a5bff4857a485db96fe7269af944d0bdb91b3/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/812a5bff4857a485db96fe7269af944d0bdb91b3/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fsrc%2Ftest_tree_schema_compile.c?ref=812a5bff4857a485db96fe7269af944d0bdb91b3\", \"patch\": \"@@ -2298,7 +2298,7 @@ test_type_dflt(void **state)\\n     assert_non_null(type);\\n     assert_int_equal(3, type->refcount); /* 2x type reference, 1x default value's reference (typedf's default does not reference own type)*/\\n     assert_int_equal(LY_TYPE_STRING, type->basetype);\\n-    leaf = (struct lysc_node_leaf*)mod->compiled->data;\\n+    assert_non_null(leaf = (struct lysc_node_leaf*)mod->compiled->data);\\n     assert_string_equal(\\\"hello\\\", leaf->dflt->realtype->plugin->print(leaf->dflt, LYD_XML, NULL, NULL, &dynamic));\\n     assert_int_equal(0, dynamic);\\n     assert_string_equal(\\\"xxx\\\", leaf->units);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy8xNDBlZGU5YzA3NWM2MDQ2MzJhODdlZTNiZjBlODgxZmI0ODVkMGU3Ig==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/140ede9c075c604632a87ee3bf0e881fb485d0e7", "content": "{\"sha\": \"140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"node_id\": \"C_kwDOAeqQ1NoAKDE0MGVkZTljMDc1YzYwNDYzMmE4N2VlM2JmMGU4ODFmYjQ4NWQwZTc\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-05-10T07:27:30Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-05-10T07:27:30Z\"}, \"message\": \"tree data UPDATE use strict instead of opaq for op parsing\\n\\nOpaque nodes are actually not expected normally,\\nonly in anyxml/anydata where they are accepted\\nin any case.\", \"tree\": {\"sha\": \"463cc0ca58e30360d03d6471696bf6830ee99362\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/463cc0ca58e30360d03d6471696bf6830ee99362\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"html_url\": \"https://github.com/CESNET/libyang/commit/140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/140ede9c075c604632a87ee3bf0e881fb485d0e7/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3957b3370afc80ea33720dae9049a9a8d2df238b\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/3957b3370afc80ea33720dae9049a9a8d2df238b\", \"html_url\": \"https://github.com/CESNET/libyang/commit/3957b3370afc80ea33720dae9049a9a8d2df238b\"}], \"stats\": {\"total\": 16, \"additions\": 4, \"deletions\": 12}, \"files\": [{\"sha\": \"aa51ce90bcd6df450bdf0a8abebd6d456e978efa\", \"filename\": \"src/tree_data.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/140ede9c075c604632a87ee3bf0e881fb485d0e7/src%2Ftree_data.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/140ede9c075c604632a87ee3bf0e881fb485d0e7/src%2Ftree_data.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_data.c?ref=140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"patch\": \"@@ -558,7 +558,7 @@ lyd_parse_op_(const struct ly_ctx *ctx, const struct lysc_ext_instance *ext, str\\n         LY_CHECK_ARG_RET(ctx, format == LYD_XML, parent, parent->schema->nodetype & (LYS_RPC | LYS_ACTION), tree, !op,\\n                 LY_EINVAL);\\n     }\\n-    parse_opts = LYD_PARSE_ONLY | LYD_PARSE_OPAQ;\\n+    parse_opts = LYD_PARSE_ONLY | LYD_PARSE_STRICT;\\n     val_opts = 0;\\n \\n     /* parse the data */\"}, {\"sha\": \"af2459db9c83f8abba9bb5f6cb4c0996cea5be4c\", \"filename\": \"tests/utests/data/test_validation.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 11, \"changes\": 14, \"blob_url\": \"https://github.com/CESNET/libyang/blob/140ede9c075c604632a87ee3bf0e881fb485d0e7/tests%2Futests%2Fdata%2Ftest_validation.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/140ede9c075c604632a87ee3bf0e881fb485d0e7/tests%2Futests%2Fdata%2Ftest_validation.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fdata%2Ftest_validation.c?ref=140ede9c075c604632a87ee3bf0e881fb485d0e7\", \"patch\": \"@@ -1249,18 +1249,10 @@ test_rpc(void **state)\\n             \\\"   <new-password>123</new-password>\\\\n\\\"\\n             \\\"</modify-user-password>\\\";\\n     assert_int_equal(LY_SUCCESS, ly_in_new_memory(data, &in));\\n-    /* Success, although the validation found a violation of\\n-     * the restriction. An \\\\\\\"opaq\\\\\\\" node was created instead of\\n-     * the \\\\\\\"new-password\\\\\\\" node from schema.\\n-     */\\n-    assert_int_equal(LY_SUCCESS, lyd_parse_op(UTEST_LYCTX, NULL, in, LYD_XML, LYD_TYPE_RPC_YANG, &tree, NULL));\\n-    assert_non_null(tree);\\n-    /* Validate data as RPC request. */\\n-    assert_int_equal(LY_EVALID, lyd_validate_op(tree, NULL, LYD_TYPE_RPC_YANG, NULL));\\n-    CHECK_LOG_CTX(\\\"Unsatisfied length - string \\\\\\\"123\\\\\\\" length is not allowed.\\\",\\n-            \\\"Data location /val-str:modify-user-password/new-password.\\\");\\n+    assert_int_equal(LY_EVALID, lyd_parse_op(UTEST_LYCTX, NULL, in, LYD_XML, LYD_TYPE_RPC_YANG, &tree, NULL));\\n+    CHECK_LOG_CTX(\\\"Unsatisfied length - string \\\\\\\"123\\\\\\\" length is not allowed.\\\", \\\"Schema location \\\"\\n+            \\\"/val-str:modify-user-password/input/new-password, data location /val-str:modify-user-password, line number 3.\\\");\\n     ly_in_free(in, 0);\\n-    lyd_free_all(tree);\\n }\\n \\n static void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy85Y2RiOWU2ZjYwZDZiYWU0MjY3NWJjM2I0NmY1NzQxZTUwYjYyZTY4Ig==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68", "content": "{\"sha\": \"9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6OWNkYjllNmY2MGQ2YmFlNDI2NzViYzNiNDZmNTc0MWU1MGI2MmU2OA==\", \"commit\": {\"author\": {\"name\": \"aPiecek\", \"email\": \"piecek@cesnet.cz\", \"date\": \"2021-05-18T07:46:20Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2021-05-18T08:51:54Z\"}, \"message\": \"parser xml BUGFIX in function lydxml_data_skip\\n\\nThe xml children's elements are skipped to the parent's closing tag.\", \"tree\": {\"sha\": \"aafab867d989b548367400c2114d4a102bd7a3c5\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/aafab867d989b548367400c2114d4a102bd7a3c5\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"html_url\": \"https://github.com/CESNET/libyang/commit/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68/comments\", \"author\": {\"login\": \"lePici\", \"id\": 13786495, \"node_id\": \"MDQ6VXNlcjEzNzg2NDk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/13786495?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/lePici\", \"html_url\": \"https://github.com/lePici\", \"followers_url\": \"https://api.github.com/users/lePici/followers\", \"following_url\": \"https://api.github.com/users/lePici/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/lePici/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/lePici/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/lePici/subscriptions\", \"organizations_url\": \"https://api.github.com/users/lePici/orgs\", \"repos_url\": \"https://api.github.com/users/lePici/repos\", \"events_url\": \"https://api.github.com/users/lePici/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/lePici/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5057c2e0181de68cd43ebcc9059121bab8602107\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/5057c2e0181de68cd43ebcc9059121bab8602107\", \"html_url\": \"https://github.com/CESNET/libyang/commit/5057c2e0181de68cd43ebcc9059121bab8602107\"}], \"stats\": {\"total\": 30, \"additions\": 29, \"deletions\": 1}, \"files\": [{\"sha\": \"40193e80d19f94dd69e4657b88c2736fdc76149c\", \"filename\": \"src/parser_xml.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/CESNET/libyang/blob/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68/src%2Fparser_xml.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68/src%2Fparser_xml.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fparser_xml.c?ref=9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"patch\": \"@@ -293,6 +293,7 @@ lydxml_data_skip(struct lyxml_ctx *xmlctx)\\n \\n     /* remember current number of parents */\\n     parents_count = xmlctx->elements.count;\\n+    assert(parents_count);\\n \\n     /* skip after the content */\\n     while (xmlctx->status != LYXML_ELEM_CONTENT) {\\n@@ -301,7 +302,7 @@ lydxml_data_skip(struct lyxml_ctx *xmlctx)\\n     LY_CHECK_RET(lyxml_ctx_next(xmlctx));\\n \\n     /* skip all children elements, recursively, if any */\\n-    while (parents_count < xmlctx->elements.count) {\\n+    while (parents_count <= xmlctx->elements.count) {\\n         LY_CHECK_RET(lyxml_ctx_next(xmlctx));\\n     }\\n \"}, {\"sha\": \"b83432ce13034dd94863c895723ae3cad1c89c16\", \"filename\": \"tests/utests/data/test_parser_xml.c\", \"status\": \"modified\", \"additions\": 27, \"deletions\": 0, \"changes\": 27, \"blob_url\": \"https://github.com/CESNET/libyang/blob/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68/tests%2Futests%2Fdata%2Ftest_parser_xml.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/9cdb9e6f60d6bae42675bc3b46f5741e50b62e68/tests%2Futests%2Fdata%2Ftest_parser_xml.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fdata%2Ftest_parser_xml.c?ref=9cdb9e6f60d6bae42675bc3b46f5741e50b62e68\", \"patch\": \"@@ -726,6 +726,32 @@ test_netconf_reply_or_notification(void **state)\\n     /* TODO */\\n }\\n \\n+static void\\n+test_data_skip(void **state)\\n+{\\n+    const char *data;\\n+    struct lyd_node *tree;\\n+    struct lyd_node_term *leaf;\\n+\\n+    /* add invalid data to a module that is not implemented */\\n+    data = \\\"<foo xmlns=\\\\\\\"urn:ietf:params:xml:ns:yang:ietf-yang-metadata\\\\\\\"><u/></foo>\\\";\\n+    assert_int_equal(LY_SUCCESS, lyd_parse_data_mem(_UC->ctx, data, LYD_XML, 0, LYD_VALIDATE_PRESENT, &tree));\\n+    assert_null(tree);\\n+\\n+    /* add invalid data to a module that is implemented */\\n+    data = \\\"<fooX xmlns=\\\\\\\"urn:tests:a\\\\\\\"><u/><list><value/></list></fooX>\\\";\\n+    assert_int_equal(LY_SUCCESS, lyd_parse_data_mem(_UC->ctx, data, LYD_XML, 0, LYD_VALIDATE_PRESENT, &tree));\\n+    assert_null(tree);\\n+\\n+    /* first invalid, next valid */\\n+    data = \\\"<fooX xmlns=\\\\\\\"urn:tests:a\\\\\\\"><u/></fooX>  <foo xmlns=\\\\\\\"urn:tests:a\\\\\\\">foo value</foo>\\\";\\n+    CHECK_PARSE_LYD(data, 0, LYD_VALIDATE_PRESENT, tree);\\n+    CHECK_LYSC_NODE(tree->schema, NULL, 0, LYS_CONFIG_W | LYS_STATUS_CURR, 1, \\\"foo\\\", 1, LYS_LEAF, 0, 0, NULL, 0);\\n+    leaf = (struct lyd_node_term *)tree;\\n+    CHECK_LYD_VALUE(leaf->value, STRING, \\\"foo value\\\");\\n+    lyd_free_all(tree);\\n+}\\n+\\n int\\n main(void)\\n {\\n@@ -742,6 +768,7 @@ main(void)\\n         UTEST(test_netconf_rpc, setup),\\n         UTEST(test_netconf_action, setup),\\n         UTEST(test_netconf_reply_or_notification, setup),\\n+        UTEST(test_data_skip, setup),\\n     };\\n \\n     return cmocka_run_group_tests(tests, NULL, NULL);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy85MmNjODUxN2ZjYjg1ZGNmYmI5Mzg0Mjc1ODU3MWY3MjFjNDljOWNiIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/92cc8517fcb85dcfbb93842758571f721c49c9cb", "content": "{\"sha\": \"92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6OTJjYzg1MTdmY2I4NWRjZmJiOTM4NDI3NTg1NzFmNzIxYzQ5YzljYg==\", \"commit\": {\"author\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2019-04-25T07:57:06Z\"}, \"committer\": {\"name\": \"Radek Krejci\", \"email\": \"rkrejci@cesnet.cz\", \"date\": \"2019-04-25T07:57:06Z\"}, \"message\": \"schema compilation BUGFIX nodes mentioned in leafref path's predicates must be implemented\\n\\nNot only the nodes directly used in the leafref's path make their module\\nimplemented, but also the nodes referenced in the path's predicates\\nwork this way.\", \"tree\": {\"sha\": \"0f71d63c91cb55d5ca0ef0359ae82c48b3686d35\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/0f71d63c91cb55d5ca0ef0359ae82c48b3686d35\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"html_url\": \"https://github.com/CESNET/libyang/commit/92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/92cc8517fcb85dcfbb93842758571f721c49c9cb/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"1b1e925e40396609cadfe4e780f2adef2896d37a\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/1b1e925e40396609cadfe4e780f2adef2896d37a\", \"html_url\": \"https://github.com/CESNET/libyang/commit/1b1e925e40396609cadfe4e780f2adef2896d37a\"}], \"stats\": {\"total\": 34, \"additions\": 28, \"deletions\": 6}, \"files\": [{\"sha\": \"40c14192e999e7c7c93e481b3c22d021e04fdfac\", \"filename\": \"src/tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 3, \"changes\": 14, \"blob_url\": \"https://github.com/CESNET/libyang/blob/92cc8517fcb85dcfbb93842758571f721c49c9cb/src%2Ftree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/92cc8517fcb85dcfbb93842758571f721c49c9cb/src%2Ftree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_schema_compile.c?ref=92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"patch\": \"@@ -2017,6 +2017,10 @@ lys_compile_leafref_predicate_validate(struct lysc_ctx *ctx, const char **predic\\n                        *predicate - start, start, src_prefix_len, src_prefix, path_context->name);\\n                 goto cleanup;\\n             }\\n+            if (!mod->implemented) {\\n+                /* make the module implemented */\\n+                ly_ctx_module_implement_internal(ctx->ctx, (struct lys_module*)mod, 2);\\n+            }\\n         } else {\\n             mod = start_node->module;\\n         }\\n@@ -2127,22 +2131,26 @@ lys_compile_leafref_predicate_validate(struct lysc_ctx *ctx, const char **predic\\n             }\\n             if (!mod) {\\n                 LOGVAL(ctx->ctx, LY_VLOG_STR, ctx->path, LYVE_REFERENCE,\\n-                       \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - unable to find module of the node \\\\\\\"%.*s\\\\\\\" in rel-path_keyexpr.\\\",\\n+                       \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - unable to find module of the node \\\\\\\"%.*s\\\\\\\" in rel-path-keyexpr.\\\",\\n                        *predicate - start, start, dst_len, dst);\\n                 goto cleanup;\\n             }\\n+            if (!mod->implemented) {\\n+                /* make the module implemented */\\n+                ly_ctx_module_implement_internal(ctx->ctx, (struct lys_module*)mod, 2);\\n+            }\\n \\n             dst_node = lys_child(dst_node, mod, dst, dst_len, 0, LYS_GETNEXT_NOSTATECHECK);\\n             if (!dst_node) {\\n                 LOGVAL(ctx->ctx, LY_VLOG_STR, ctx->path, LYVE_REFERENCE,\\n-                       \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - unable to find node \\\\\\\"%.*s\\\\\\\" in the rel-path_keyexpr.\\\",\\n+                       \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - unable to find node \\\\\\\"%.*s\\\\\\\" in the rel-path-keyexpr.\\\",\\n                        *predicate - start, start, path_key_expr - pke_start, pke_start);\\n                 goto cleanup;\\n             }\\n         }\\n         if (!(dst_node->nodetype & (dst_node->module->version < LYS_VERSION_1_1 ? LYS_LEAF : LYS_LEAF | LYS_LEAFLIST))) {\\n             LOGVAL(ctx->ctx, LY_VLOG_STR, ctx->path, LYVE_REFERENCE,\\n-                   \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - rel-path_keyexpr \\\\\\\"%.*s\\\\\\\" refers %s instead of leaf.\\\",\\n+                   \\\"Invalid leafref path predicate \\\\\\\"%.*s\\\\\\\" - rel-path-keyexpr \\\\\\\"%.*s\\\\\\\" refers %s instead of leaf.\\\",\\n                    *predicate - start, start, path_key_expr - pke_start, pke_start, lys_nodetype2str(dst_node->nodetype));\\n             goto cleanup;\\n         }\"}, {\"sha\": \"6c43df564c605e0e0afa604060f4c7c6160651f1\", \"filename\": \"tests/src/test_tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 17, \"deletions\": 3, \"changes\": 20, \"blob_url\": \"https://github.com/CESNET/libyang/blob/92cc8517fcb85dcfbb93842758571f721c49c9cb/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/92cc8517fcb85dcfbb93842758571f721c49c9cb/tests%2Fsrc%2Ftest_tree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fsrc%2Ftest_tree_schema_compile.c?ref=92cc8517fcb85dcfbb93842758571f721c49c9cb\", \"patch\": \"@@ -1905,6 +1905,20 @@ test_type_leafref(void **state)\\n     assert_non_null(mod->compiled->data);\\n     assert_string_equal(\\\"h\\\", mod->compiled->data->name);\\n \\n+    ly_ctx_set_module_imp_clb(ctx, test_imp_clb, \\\"module j {namespace urn:j;prefix j; leaf j  {type string;}}\\\");\\n+    assert_non_null(mod = lys_parse_mem(ctx, \\\"module k {namespace urn:k;prefix k;import j {prefix j;}\\\"\\n+                                        \\\"leaf i {type leafref {path \\\\\\\"/ilist[name = current()/../j:j]/value\\\\\\\";}}\\\"\\n+                                        \\\"list ilist {key name; leaf name {type string;} leaf value {type uint16;}}}\\\", LYS_IN_YANG));\\n+    type = ((struct lysc_node_leaf*)mod->compiled->data)->type;\\n+    assert_non_null(type);\\n+    assert_int_equal(LY_TYPE_LEAFREF, type->basetype);\\n+    assert_non_null(((struct lysc_type_leafref*)type)->realtype);\\n+    assert_int_equal(LY_TYPE_UINT16, ((struct lysc_type_leafref*)type)->realtype->basetype);\\n+    assert_non_null(mod = ly_ctx_get_module_implemented(ctx, \\\"j\\\"));\\n+    assert_int_equal(1, mod->implemented);\\n+    assert_non_null(mod->compiled->data);\\n+    assert_string_equal(\\\"j\\\", mod->compiled->data->name);\\n+\\n     /* invalid paths */\\n     assert_null(lys_parse_mem(ctx, \\\"module aa {namespace urn:aa;prefix aa;container a {leaf target2 {type uint8;}}\\\"\\n                                         \\\"leaf ref1 {type leafref {path ../a/invalid;}}}\\\", LYS_IN_YANG));\\n@@ -2030,21 +2044,21 @@ test_type_leafref(void **state)\\n                                         \\\"leaf ifname{type leafref{ path \\\\\\\"../interface/name\\\\\\\";}}\\\"\\n                                         \\\"leaf address {type leafref{ path \\\\\\\"/interface[name=current()/../x:ifname]/ip\\\\\\\";}}}\\\",\\n                                         LYS_IN_YANG));\\n-    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../x:ifname]\\\\\\\" - unable to find module of the node \\\\\\\"ifname\\\\\\\" in rel-path_keyexpr.\\\");\\n+    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../x:ifname]\\\\\\\" - unable to find module of the node \\\\\\\"ifname\\\\\\\" in rel-path-keyexpr.\\\");\\n \\n     assert_null(lys_parse_mem(ctx, \\\"module zz {namespace urn:zz;prefix zz;\\\"\\n                                         \\\"list interface{key name;leaf name{type string;}leaf ip {type string;}}\\\"\\n                                         \\\"leaf ifname{type leafref{ path \\\\\\\"../interface/name\\\\\\\";}}\\\"\\n                                         \\\"leaf address {type leafref{ path \\\\\\\"/interface[name=current()/../xxx]/ip\\\\\\\";}}}\\\",\\n                                         LYS_IN_YANG));\\n-    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../xxx]\\\\\\\" - unable to find node \\\\\\\"current()/../xxx\\\\\\\" in the rel-path_keyexpr.\\\");\\n+    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../xxx]\\\\\\\" - unable to find node \\\\\\\"current()/../xxx\\\\\\\" in the rel-path-keyexpr.\\\");\\n \\n     assert_null(lys_parse_mem(ctx, \\\"module zza {namespace urn:zza;prefix zza;\\\"\\n                                         \\\"list interface{key name;leaf name{type string;}leaf ip {type string;}}\\\"\\n                                         \\\"leaf ifname{type leafref{ path \\\\\\\"../interface/name\\\\\\\";}}container c;\\\"\\n                                         \\\"leaf address {type leafref{ path \\\\\\\"/interface[name=current()/../c]/ip\\\\\\\";}}}\\\",\\n                                         LYS_IN_YANG));\\n-    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../c]\\\\\\\" - rel-path_keyexpr \\\\\\\"current()/../c\\\\\\\" refers container instead of leaf.\\\");\\n+    logbuf_assert(\\\"Invalid leafref path predicate \\\\\\\"[name=current()/../c]\\\\\\\" - rel-path-keyexpr \\\\\\\"current()/../c\\\\\\\" refers container instead of leaf.\\\");\\n \\n     assert_null(lys_parse_mem(ctx, \\\"module zzb {namespace urn:zzb;prefix zzb;\\\"\\n                                         \\\"list interface{key name;leaf name{type string;}leaf ip {type string;}container c;}\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy9mMTI4OTcyMDQ1YTVkNGEzNjg1NGRkYzBhNzVkOTk4MDNmZjgxZjZkIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/f128972045a5d4a36854ddc0a75d99803ff81f6d", "content": "{\"sha\": \"f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"node_id\": \"C_kwDOAeqQ1NoAKGYxMjg5NzIwNDVhNWQ0YTM2ODU0ZGRjMGE3NWQ5OTgwM2ZmODFmNmQ\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-01-24T08:42:29Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-01-24T08:42:29Z\"}, \"message\": \"plugins types BUGFIX local module of dflt ident without prefix\\n\\nTest included.\\nFixes #1777\", \"tree\": {\"sha\": \"4e0cb3dff548201f86b872e36f3df189a4aeafa9\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/4e0cb3dff548201f86b872e36f3df189a4aeafa9\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"html_url\": \"https://github.com/CESNET/libyang/commit/f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/f128972045a5d4a36854ddc0a75d99803ff81f6d/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ecdc2222aea827975871e45b153ab9aaf3f8590d\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/ecdc2222aea827975871e45b153ab9aaf3f8590d\", \"html_url\": \"https://github.com/CESNET/libyang/commit/ecdc2222aea827975871e45b153ab9aaf3f8590d\"}], \"stats\": {\"total\": 17, \"additions\": 15, \"deletions\": 2}, \"files\": [{\"sha\": \"372c7838ef2f20135ed87620a199874daf49d18c\", \"filename\": \"src/plugins_types.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/CESNET/libyang/blob/f128972045a5d4a36854ddc0a75d99803ff81f6d/src%2Fplugins_types.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/f128972045a5d4a36854ddc0a75d99803ff81f6d/src%2Fplugins_types.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fplugins_types.c?ref=f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"patch\": \"@@ -155,9 +155,11 @@ lyplg_type_identity_module(const struct ly_ctx *ctx, const struct lysc_node *ctx\\n     } else {\\n         switch (format) {\\n         case LY_VALUE_SCHEMA:\\n+            /* use local module */\\n+            return ly_schema_resolve_prefix(ctx, prefix, prefix_len, prefix_data);\\n         case LY_VALUE_SCHEMA_RESOLVED:\\n-            /* use context node module, handles augments */\\n-            return ctx_node->module;\\n+            /* use local module */\\n+            return ly_schema_resolved_resolve_prefix(ctx, prefix, prefix_len, prefix_data);\\n         case LY_VALUE_CANON:\\n         case LY_VALUE_JSON:\\n         case LY_VALUE_LYB:\"}, {\"sha\": \"fd148a9a1725edbe40711e092c02f7123ca4d6ef\", \"filename\": \"tests/utests/schema/test_tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/CESNET/libyang/blob/f128972045a5d4a36854ddc0a75d99803ff81f6d/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/f128972045a5d4a36854ddc0a75d99803ff81f6d/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c?ref=f128972045a5d4a36854ddc0a75d99803ff81f6d\", \"patch\": \"@@ -2354,6 +2354,17 @@ test_grouping(void **state)\\n             \\\"  list mylist {key \\\\\\\"name\\\\\\\"; unique \\\\\\\"value\\\\\\\"; uses z2:leafs_group;}\\\"\\n             \\\"}\\\"\\n             \\\"augment /z1:root { uses list_group;} }\\\", LYS_IN_YANG, NULL));\\n+\\n+    /* identity */\\n+    assert_int_equal(LY_SUCCESS, lys_parse_mem(UTEST_LYCTX, \\\"module y1 {namespace urn:y1;prefix y1;\\\"\\n+            \\\"identity base_identity;\\\"\\n+            \\\"identity id1 {base \\\\\\\"base_identity\\\\\\\";}\\\"\\n+            \\\"grouping attrs_group {\\\"\\n+            \\\"  leaf name {type identityref {base \\\\\\\"base_identity\\\\\\\";} default \\\\\\\"id1\\\\\\\";}\\\"\\n+            \\\"}}\\\", LYS_IN_YANG, NULL));\\n+    assert_int_equal(LY_SUCCESS, lys_parse_mem(UTEST_LYCTX, \\\"module y2 {namespace urn:y2;prefix y2;\\\"\\n+            \\\"import y1 {prefix y1;}\\\"\\n+            \\\"container root {uses y1:attrs_group;}}\\\", LYS_IN_YANG, NULL));\\n }\\n \\n static void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy8yNGJkMjJmNWU0MGYzN2ZiNmFlNzk2YmI4ZWViYzlkZTU4YmFlMDBlIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e", "content": "{\"sha\": \"24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"node_id\": \"C_kwDOAeqQ1NoAKDI0YmQyMmY1ZTQwZjM3ZmI2YWU3OTZiYjhlZWJjOWRlNThiYWUwMGU\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-02-02T10:16:56Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2022-02-02T10:16:56Z\"}, \"message\": \"xpath BUGFIX evaluation of * on schema\\n\\nAll modules of the nodes must match.\\nRefs #1780\", \"tree\": {\"sha\": \"c960606bdb966a07f958fa287579b20b4ca4bf1d\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/c960606bdb966a07f958fa287579b20b4ca4bf1d\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"html_url\": \"https://github.com/CESNET/libyang/commit/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fd86c5c742590679c4d0731e516fb6674363a003\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/fd86c5c742590679c4d0731e516fb6674363a003\", \"html_url\": \"https://github.com/CESNET/libyang/commit/fd86c5c742590679c4d0731e516fb6674363a003\"}], \"stats\": {\"total\": 44, \"additions\": 43, \"deletions\": 1}, \"files\": [{\"sha\": \"8afebb341e0e67eac728a2fe281a539226c2c8e5\", \"filename\": \"src/xpath.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CESNET/libyang/blob/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e/src%2Fxpath.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e/src%2Fxpath.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Fxpath.c?ref=24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"patch\": \"@@ -5472,7 +5472,7 @@ static LY_ERR\\n moveto_scnode_check(const struct lysc_node *node, const struct lysc_node *ctx_scnode, const struct lyxp_set *set,\\n         const char *node_name, const struct lys_module *moveto_mod)\\n {\\n-    if (!moveto_mod && (!node_name || strcmp(node_name, \\\"*\\\"))) {\\n+    if (!moveto_mod && node_name && strcmp(node_name, \\\"*\\\")) {\\n         switch (set->format) {\\n         case LY_VALUE_SCHEMA:\\n         case LY_VALUE_SCHEMA_RESOLVED:\"}, {\"sha\": \"c28bf5da28e50283e6089ae59db188adefcc9ff2\", \"filename\": \"tests/utests/schema/test_tree_schema_compile.c\", \"status\": \"modified\", \"additions\": 42, \"deletions\": 0, \"changes\": 42, \"blob_url\": \"https://github.com/CESNET/libyang/blob/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/24bd22f5e40f37fb6ae796bb8eebc9de58bae00e/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Futests%2Fschema%2Ftest_tree_schema_compile.c?ref=24bd22f5e40f37fb6ae796bb8eebc9de58bae00e\", \"patch\": \"@@ -3727,6 +3727,47 @@ test_when(void **state)\\n             LYS_IN_YANG, NULL));\\n }\\n \\n+static void\\n+test_must(void **state)\\n+{\\n+    /* \\\"*\\\" must not be restricted to any module */\\n+    ly_ctx_set_module_imp_clb(UTEST_LYCTX, test_imp_clb,\\n+            \\\"module a {\\\"\\n+            \\\"  namespace urn:a;\\\"\\n+            \\\"  prefix a;\\\"\\n+            \\\"  container cont {\\\"\\n+            \\\"    leaf l {\\\"\\n+            \\\"      type empty;\\\"\\n+            \\\"    }\\\"\\n+            \\\"    list lst {\\\"\\n+            \\\"      key \\\\\\\"k\\\\\\\";\\\"\\n+            \\\"      leaf k {\\\"\\n+            \\\"        type uint8;\\\"\\n+            \\\"      }\\\"\\n+            \\\"    }\\\"\\n+            \\\"  }\\\"\\n+            \\\"}\\\");\\n+    assert_int_equal(LY_SUCCESS, lys_parse_mem(UTEST_LYCTX,\\n+            \\\"module a-aug {\\\"\\n+            \\\"  namespace urn:aa;\\\"\\n+            \\\"  prefix aa;\\\"\\n+            \\\"  import a {\\\"\\n+            \\\"    prefix a;\\\"\\n+            \\\"  }\\\"\\n+            \\\"  augment /a:cont {\\\"\\n+            \\\"    container cont2 {\\\"\\n+            \\\"      must \\\\\\\"/a:cont/*/a:k\\\\\\\";\\\"\\n+            \\\"      leaf aug {\\\"\\n+            \\\"        type empty;\\\"\\n+            \\\"      }\\\"\\n+            \\\"    }\\\"\\n+            \\\"  }\\\"\\n+            \\\"}\\\",\\n+            LYS_IN_YANG, NULL));\\n+    /* no warnings */\\n+    CHECK_LOG_CTX(NULL, NULL);\\n+}\\n+\\n int\\n main(void)\\n {\\n@@ -3759,6 +3800,7 @@ main(void)\\n         UTEST(test_augment, setup),\\n         UTEST(test_deviation, setup),\\n         UTEST(test_when, setup),\\n+        UTEST(test_must, setup),\\n     };\\n \\n     return cmocka_run_group_tests(tests, NULL, NULL);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0VTTkVUL2xpYnlhbmcvY29tbWl0cy84MjNmYmUwZjdhN2I1MGI3YzgwY2ZkOTQ4ZWIzYzE4OTU3OTEyNmFiIg==.json", "commit": "https://api.github.com/repos/CESNET/libyang/commits/823fbe0f7a7b50b7c80cfd948eb3c189579126ab", "content": "{\"sha\": \"823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"node_id\": \"MDY6Q29tbWl0MzIxNDk3MTY6ODIzZmJlMGY3YTdiNTBiN2M4MGNmZDk0OGViM2MxODk1NzkxMjZhYg==\", \"commit\": {\"author\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2017-12-14T10:01:40Z\"}, \"committer\": {\"name\": \"Michal Vasko\", \"email\": \"mvasko@cesnet.cz\", \"date\": \"2017-12-14T10:01:40Z\"}, \"message\": \"schema tree BUGFIX removing not-supported deviation from augment\\n\\nTest for this also added.\\nFixes #404\", \"tree\": {\"sha\": \"43c1a054e0c93e6142753f8aef1a6d5bdf1b1316\", \"url\": \"https://api.github.com/repos/CESNET/libyang/git/trees/43c1a054e0c93e6142753f8aef1a6d5bdf1b1316\"}, \"url\": \"https://api.github.com/repos/CESNET/libyang/git/commits/823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"html_url\": \"https://github.com/CESNET/libyang/commit/823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"comments_url\": \"https://api.github.com/repos/CESNET/libyang/commits/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/comments\", \"author\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"michalvasko\", \"id\": 12510224, \"node_id\": \"MDQ6VXNlcjEyNTEwMjI0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12510224?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/michalvasko\", \"html_url\": \"https://github.com/michalvasko\", \"followers_url\": \"https://api.github.com/users/michalvasko/followers\", \"following_url\": \"https://api.github.com/users/michalvasko/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/michalvasko/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/michalvasko/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/michalvasko/subscriptions\", \"organizations_url\": \"https://api.github.com/users/michalvasko/orgs\", \"repos_url\": \"https://api.github.com/users/michalvasko/repos\", \"events_url\": \"https://api.github.com/users/michalvasko/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/michalvasko/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ca6801feadf5efff84bd2786893af293c770741e\", \"url\": \"https://api.github.com/repos/CESNET/libyang/commits/ca6801feadf5efff84bd2786893af293c770741e\", \"html_url\": \"https://github.com/CESNET/libyang/commit/ca6801feadf5efff84bd2786893af293c770741e\"}], \"stats\": {\"total\": 114, \"additions\": 91, \"deletions\": 23}, \"files\": [{\"sha\": \"3d0cf6d33e2fbd84532eedd74da5d003d8a430da\", \"filename\": \"src/tree_schema.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 7, \"changes\": 9, \"blob_url\": \"https://github.com/CESNET/libyang/blob/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/src%2Ftree_schema.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/src%2Ftree_schema.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/src%2Ftree_schema.c?ref=823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"patch\": \"@@ -4079,13 +4079,8 @@ lys_switch_deviation(struct lys_deviation *dev, const struct lys_module *module,\\n                     lys_node_addchild(parent, NULL, dev->orig_node);\\n                     if (reapply) {\\n                         /* augment is supposed to be applied, so fix pointers in target and the status of the original node */\\n-                        if (parent->child == dev->orig_node) {\\n-                            /* the only node in augment */\\n-                            parent->flags |= LYS_NOTAPPLIED; /* allow apply_aug() */\\n-                            apply_aug((struct lys_node_augment *)parent, unres);\\n-                            /* else other nodes from augment applied, nothing more needed in target, everything was done\\n-                             * by lys_node_addchild() */\\n-                        }\\n+                        parent->flags |= LYS_NOTAPPLIED; /* allow apply_aug() */\\n+                        apply_aug((struct lys_node_augment *)parent, unres);\\n                     }\\n                 } else {\\n                     /* non-augment, non-toplevel */\"}, {\"sha\": \"d231dbf72dd9c77d8ec426e1dfa79ae31ecc3168\", \"filename\": \"tests/schema/test_deviation.c\", \"status\": \"modified\", \"additions\": 29, \"deletions\": 16, \"changes\": 45, \"blob_url\": \"https://github.com/CESNET/libyang/blob/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Ftest_deviation.c\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Ftest_deviation.c\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fschema%2Ftest_deviation.c?ref=823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"patch\": \"@@ -30,20 +30,14 @@\\n \\n #define SCHEMA_FOLDER_YANG TESTS_DIR\\\"/schema/yang/files\\\"\\n \\n-#define MOD_COUNT 7\\n-#define YANG_MOD_IDX(idx) (idx)\\n-\\n struct ly_ctx *ctx;\\n-char *yang_modules[2 * MOD_COUNT] = {0};\\n \\n static int\\n setup_ctx_yang(void **state)\\n {\\n-    *state = malloc(strlen(TESTS_DIR) + 40);\\n-    assert_non_null(*state);\\n-    memcpy(*state, SCHEMA_FOLDER_YANG, strlen(SCHEMA_FOLDER_YANG) + 1);\\n+    (void)state;\\n \\n-    ctx = ly_ctx_new(NULL, 0);\\n+    ctx = ly_ctx_new(SCHEMA_FOLDER_YANG, 0);\\n     if (!ctx) {\\n         return -1;\\n     }\\n@@ -54,7 +48,8 @@ setup_ctx_yang(void **state)\\n static int\\n teardown_ctx(void **state)\\n {\\n-    free(*state);\\n+    (void)state;\\n+\\n     ly_ctx_destroy(ctx, NULL);\\n \\n     return 0;\\n@@ -63,17 +58,34 @@ teardown_ctx(void **state)\\n static void\\n test_deviation(void **state)\\n {\\n-    int length;\\n-    char *path = *state;\\n+    (void)state;\\n+    char *str;\\n     const struct lys_module *module;\\n \\n-    ly_ctx_set_searchdir(ctx, path);\\n-    length = strlen(path);\\n-    strcpy(path + length, \\\"/deviation1-dv.yang\\\");\\n-    if (!(module = lys_parse_path(ctx, path, LYS_IN_YANG))) {\\n+    if (!(module = ly_ctx_load_module(ctx, \\\"deviation1-dv\\\", NULL))) {\\n+        fail();\\n+    }\\n+    lys_print_mem(&str, module, LYS_OUT_YANG, NULL);\\n+    free(str);\\n+    assert_int_equal(ly_errno, 0);\\n+}\\n+\\n+static void\\n+test_augment_deviation(void **state)\\n+{\\n+    (void)state;\\n+    char *str;\\n+    const struct lys_module *mod;\\n+\\n+    if (!ly_ctx_load_module(ctx, \\\"z-dev\\\", NULL)) {\\n         fail();\\n     }\\n-    lys_print_mem(&yang_modules[YANG_MOD_IDX(0)], module, LYS_OUT_YANG, NULL);\\n+    mod = ly_ctx_get_module(ctx, \\\"z\\\", NULL, 0);\\n+    assert_ptr_not_equal(mod, NULL);\\n+\\n+    lys_print_mem(&str, mod, LYS_YANG, NULL);\\n+    free(str);\\n+    assert_int_equal(ly_errno, 0);\\n }\\n \\n int\\n@@ -82,6 +94,7 @@ main(void)\\n     ly_verb(LY_LLWRN);\\n     const struct CMUnitTest cmut[] = {\\n         cmocka_unit_test_setup_teardown(test_deviation, setup_ctx_yang, teardown_ctx),\\n+        cmocka_unit_test_setup_teardown(test_augment_deviation, setup_ctx_yang, teardown_ctx),\\n     };\\n \\n     return cmocka_run_group_tests(cmut, NULL, NULL);\"}, {\"sha\": \"45eaa5b98bd7a704b67d710de29be7e07b0d648c\", \"filename\": \"tests/schema/yang/files/z-aug.yang\", \"status\": \"added\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/CESNET/libyang/blob/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz-aug.yang\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz-aug.yang\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fschema%2Fyang%2Ffiles%2Fz-aug.yang?ref=823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"patch\": \"@@ -0,0 +1,21 @@\\n+module z-aug {\\n+\\n+  namespace \\\"urn:z-aug\\\";\\n+  prefix \\\"z-aug\\\";\\n+\\n+  import z {\\n+    prefix z;\\n+  }\\n+\\n+  augment \\\"/z:list1/z:list2\\\" {\\n+\\n+    leaf leaf1 {\\n+      type boolean;\\n+    }\\n+\\n+    leaf leaf2 {\\n+      type string;\\n+    }\\n+  }\\n+}\\n+\"}, {\"sha\": \"c6fc19ae2eb7c7f341bce0ba4856f16623660c7e\", \"filename\": \"tests/schema/yang/files/z-dev.yang\", \"status\": \"added\", \"additions\": 17, \"deletions\": 0, \"changes\": 17, \"blob_url\": \"https://github.com/CESNET/libyang/blob/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz-dev.yang\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz-dev.yang\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fschema%2Fyang%2Ffiles%2Fz-dev.yang?ref=823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"patch\": \"@@ -0,0 +1,17 @@\\n+module z-dev {\\n+\\n+    namespace \\\"urn:z-dev\\\";\\n+    prefix z-dev;\\n+\\n+    import z {\\n+      prefix z;\\n+    }\\n+\\n+    import z-aug {\\n+        prefix z-aug;\\n+    }\\n+\\n+    deviation /z:list1/z:list2/z-aug:leaf1 {\\n+        deviate not-supported;\\n+    }\\n+}\"}, {\"sha\": \"db64be7e36dcd260e03ce7db194bde5ad8cb20df\", \"filename\": \"tests/schema/yang/files/z.yang\", \"status\": \"added\", \"additions\": 22, \"deletions\": 0, \"changes\": 22, \"blob_url\": \"https://github.com/CESNET/libyang/blob/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz.yang\", \"raw_url\": \"https://github.com/CESNET/libyang/raw/823fbe0f7a7b50b7c80cfd948eb3c189579126ab/tests%2Fschema%2Fyang%2Ffiles%2Fz.yang\", \"contents_url\": \"https://api.github.com/repos/CESNET/libyang/contents/tests%2Fschema%2Fyang%2Ffiles%2Fz.yang?ref=823fbe0f7a7b50b7c80cfd948eb3c189579126ab\", \"patch\": \"@@ -0,0 +1,22 @@\\n+module z {\\n+\\n+  namespace \\\"urn:z\\\";\\n+  prefix \\\"z\\\";\\n+\\n+  list list1 {\\n+    key id;\\n+\\n+    leaf id {\\n+      type string;\\n+    }\\n+\\n+    list list2 {\\n+      key id;\\n+\\n+      leaf id {\\n+        type string;\\n+      }\\n+    }\\n+  }\\n+}\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZmFjZWJvb2svcm9ja3NkYi9jb21taXRzL2NjOGRlZDYxNTJjNTFhYzg1M2QyOTE1MjczZWVkM2U2ZjlhZjAyOWIi.json", "commit": "https://api.github.com/repos/facebook/rocksdb/commits/cc8ded6152c51ac853d2915273eed3e6f9af029b", "content": "{\"sha\": \"cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"node_id\": \"C_kwDOAGnPe9oAKGNjOGRlZDYxNTJjNTFhYzg1M2QyOTE1MjczZWVkM2U2ZjlhZjAyOWI\", \"commit\": {\"author\": {\"name\": \"Levi Tamasi\", \"email\": \"ltamasi@fb.com\", \"date\": \"2022-08-02T02:49:05Z\"}, \"committer\": {\"name\": \"Facebook GitHub Bot\", \"email\": \"facebook-github-bot@users.noreply.github.com\", \"date\": \"2022-08-02T02:49:05Z\"}, \"message\": \"Do not put blobs read during compaction into cache (#10457)\\n\\nSummary:\\nDuring compaction, blobs are currently read using the default\\n`ReadOptions`, which has the `fill_cache` flag set to true. Earlier,\\nthis didn't make any difference since we didn't have a blob cache;\\nhowever, now we have to explicitly set this flag to false to avoid\\npolluting the cache during compaction.\\n\\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10457\\n\\nTest Plan: `make check`\\n\\nReviewed By: riversand963\\n\\nDifferential Revision: D38333528\\n\\nPulled By: ltamasi\\n\\nfbshipit-source-id: 5b4d49a1e39543bee73c7df2aa9194fb101875e2\", \"tree\": {\"sha\": \"d6269184b1aa69a67665984b6a7242629825f30c\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/trees/d6269184b1aa69a67665984b6a7242629825f30c\"}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/commits/cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"comments_url\": \"https://api.github.com/repos/facebook/rocksdb/commits/cc8ded6152c51ac853d2915273eed3e6f9af029b/comments\", \"author\": {\"login\": \"ltamasi\", \"id\": 47607618, \"node_id\": \"MDQ6VXNlcjQ3NjA3NjE4\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/47607618?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ltamasi\", \"html_url\": \"https://github.com/ltamasi\", \"followers_url\": \"https://api.github.com/users/ltamasi/followers\", \"following_url\": \"https://api.github.com/users/ltamasi/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ltamasi/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ltamasi/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ltamasi/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ltamasi/orgs\", \"repos_url\": \"https://api.github.com/users/ltamasi/repos\", \"events_url\": \"https://api.github.com/users/ltamasi/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ltamasi/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"facebook-github-bot\", \"id\": 6422482, \"node_id\": \"MDQ6VXNlcjY0MjI0ODI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6422482?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/facebook-github-bot\", \"html_url\": \"https://github.com/facebook-github-bot\", \"followers_url\": \"https://api.github.com/users/facebook-github-bot/followers\", \"following_url\": \"https://api.github.com/users/facebook-github-bot/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/facebook-github-bot/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/facebook-github-bot/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/facebook-github-bot/subscriptions\", \"organizations_url\": \"https://api.github.com/users/facebook-github-bot/orgs\", \"repos_url\": \"https://api.github.com/users/facebook-github-bot/repos\", \"events_url\": \"https://api.github.com/users/facebook-github-bot/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/facebook-github-bot/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fbfcf5cbcd3b09b6de0924d3c52a744a626135c0\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/fbfcf5cbcd3b09b6de0924d3c52a744a626135c0\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/fbfcf5cbcd3b09b6de0924d3c52a744a626135c0\"}], \"stats\": {\"total\": 42, \"additions\": 41, \"deletions\": 1}, \"files\": [{\"sha\": \"c37909e75f93dbf63ebefdd1f9310810fa72bdd7\", \"filename\": \"HISTORY.md\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/cc8ded6152c51ac853d2915273eed3e6f9af029b/HISTORY.md\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/cc8ded6152c51ac853d2915273eed3e6f9af029b/HISTORY.md\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/HISTORY.md?ref=cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"patch\": \"@@ -18,6 +18,7 @@\\n * Fix a bug in `FIFOCompactionPicker::PickTTLCompaction` where total_size calculating might cause underflow\\n * Fix data race bug in hash linked list memtable. With this bug, read request might temporarily miss an old record in the memtable in a race condition to the hash bucket.\\n * Fix a bug that `best_efforts_recovery` may fail to open the db with mmap read.\\n+* Fixed a bug where blobs read during compaction would pollute the cache.\\n \\n ### Behavior Change\\n * Added checksum handshake during the copying of decompressed WAL fragment. This together with #9875, #10037, #10212, #10114 and #10319 provides end-to-end integrity protection for write batch during recovery.\"}, {\"sha\": \"eac93f232b0d1d86ac703a751529889b8ae8b40e\", \"filename\": \"db/blob/db_blob_compaction_test.cc\", \"status\": \"modified\", \"additions\": 36, \"deletions\": 0, \"changes\": 36, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/cc8ded6152c51ac853d2915273eed3e6f9af029b/db%2Fblob%2Fdb_blob_compaction_test.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/cc8ded6152c51ac853d2915273eed3e6f9af029b/db%2Fblob%2Fdb_blob_compaction_test.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/db%2Fblob%2Fdb_blob_compaction_test.cc?ref=cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"patch\": \"@@ -798,6 +798,42 @@ TEST_F(DBBlobCompactionTest, CompactionReadaheadMerge) {\\n   Close();\\n }\\n \\n+TEST_F(DBBlobCompactionTest, CompactionDoNotFillCache) {\\n+  Options options = GetDefaultOptions();\\n+\\n+  options.enable_blob_files = true;\\n+  options.min_blob_size = 0;\\n+  options.enable_blob_garbage_collection = true;\\n+  options.blob_garbage_collection_age_cutoff = 1.0;\\n+  options.disable_auto_compactions = true;\\n+  options.statistics = CreateDBStatistics();\\n+\\n+  LRUCacheOptions cache_options;\\n+  cache_options.capacity = 1 << 20;\\n+  cache_options.metadata_charge_policy = kDontChargeCacheMetadata;\\n+\\n+  options.blob_cache = NewLRUCache(cache_options);\\n+\\n+  Reopen(options);\\n+\\n+  ASSERT_OK(Put(\\\"key\\\", \\\"lime\\\"));\\n+  ASSERT_OK(Put(\\\"foo\\\", \\\"bar\\\"));\\n+  ASSERT_OK(Flush());\\n+\\n+  ASSERT_OK(Put(\\\"key\\\", \\\"pie\\\"));\\n+  ASSERT_OK(Put(\\\"foo\\\", \\\"baz\\\"));\\n+  ASSERT_OK(Flush());\\n+\\n+  constexpr Slice* begin = nullptr;\\n+  constexpr Slice* end = nullptr;\\n+\\n+  ASSERT_OK(db_->CompactRange(CompactRangeOptions(), begin, end));\\n+\\n+  ASSERT_EQ(options.statistics->getTickerCount(BLOB_DB_CACHE_ADD), 0);\\n+\\n+  Close();\\n+}\\n+\\n }  // namespace ROCKSDB_NAMESPACE\\n \\n int main(int argc, char** argv) {\"}, {\"sha\": \"0495be673f208af36ffeb53fdd5700ef28734f47\", \"filename\": \"db/compaction/compaction_iterator.cc\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/cc8ded6152c51ac853d2915273eed3e6f9af029b/db%2Fcompaction%2Fcompaction_iterator.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/cc8ded6152c51ac853d2915273eed3e6f9af029b/db%2Fcompaction%2Fcompaction_iterator.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/db%2Fcompaction%2Fcompaction_iterator.cc?ref=cc8ded6152c51ac853d2915273eed3e6f9af029b\", \"patch\": \"@@ -1284,7 +1284,10 @@ std::unique_ptr<BlobFetcher> CompactionIterator::CreateBlobFetcherIfNeeded(\\n     return nullptr;\\n   }\\n \\n-  return std::unique_ptr<BlobFetcher>(new BlobFetcher(version, ReadOptions()));\\n+  ReadOptions read_options;\\n+  read_options.fill_cache = false;\\n+\\n+  return std::unique_ptr<BlobFetcher>(new BlobFetcher(version, read_options));\\n }\\n \\n std::unique_ptr<PrefetchBufferCollection>\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZmFjZWJvb2svcm9ja3NkYi9jb21taXRzL2I4N2MzNTU3NzJjMGUxYTY0M2NiYmQ5Nzk5ODA5ZDM3NjA3M2E2ZmUi.json", "commit": "https://api.github.com/repos/facebook/rocksdb/commits/b87c355772c0e1a643cbbd9799809d376073a6fe", "content": "{\"sha\": \"b87c355772c0e1a643cbbd9799809d376073a6fe\", \"node_id\": \"C_kwDOAGnPe9oAKGI4N2MzNTU3NzJjMGUxYTY0M2NiYmQ5Nzk5ODA5ZDM3NjA3M2E2ZmU\", \"commit\": {\"author\": {\"name\": \"Yanqin Jin\", \"email\": \"yanqin@fb.com\", \"date\": \"2022-06-30T17:16:03Z\"}, \"committer\": {\"name\": \"Facebook GitHub Bot\", \"email\": \"facebook-github-bot@users.noreply.github.com\", \"date\": \"2022-06-30T17:16:03Z\"}, \"message\": \"Fix assertion error with read_opts.iter_start_ts (#10279)\\n\\nSummary:\\nIf the internal iterator is not valid, `SeekToLast` with iter_start_ts should have `valid_` is false without assertion failure.\\nTest plan\\nmake check\\n\\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10279\\n\\nReviewed By: ltamasi\\n\\nDifferential Revision: D37539393\\n\\nPulled By: riversand963\\n\\nfbshipit-source-id: 8e94057838f8a05144fad5768f4d62f1893ec315\", \"tree\": {\"sha\": \"b285fc3972c738858f303d2cff49ef7f634736a0\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/trees/b285fc3972c738858f303d2cff49ef7f634736a0\"}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/commits/b87c355772c0e1a643cbbd9799809d376073a6fe\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/b87c355772c0e1a643cbbd9799809d376073a6fe\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/b87c355772c0e1a643cbbd9799809d376073a6fe\", \"comments_url\": \"https://api.github.com/repos/facebook/rocksdb/commits/b87c355772c0e1a643cbbd9799809d376073a6fe/comments\", \"author\": {\"login\": \"riversand963\", \"id\": 20094703, \"node_id\": \"MDQ6VXNlcjIwMDk0NzAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20094703?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/riversand963\", \"html_url\": \"https://github.com/riversand963\", \"followers_url\": \"https://api.github.com/users/riversand963/followers\", \"following_url\": \"https://api.github.com/users/riversand963/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/riversand963/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/riversand963/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/riversand963/subscriptions\", \"organizations_url\": \"https://api.github.com/users/riversand963/orgs\", \"repos_url\": \"https://api.github.com/users/riversand963/repos\", \"events_url\": \"https://api.github.com/users/riversand963/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/riversand963/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"facebook-github-bot\", \"id\": 6422482, \"node_id\": \"MDQ6VXNlcjY0MjI0ODI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6422482?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/facebook-github-bot\", \"html_url\": \"https://github.com/facebook-github-bot\", \"followers_url\": \"https://api.github.com/users/facebook-github-bot/followers\", \"following_url\": \"https://api.github.com/users/facebook-github-bot/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/facebook-github-bot/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/facebook-github-bot/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/facebook-github-bot/subscriptions\", \"organizations_url\": \"https://api.github.com/users/facebook-github-bot/orgs\", \"repos_url\": \"https://api.github.com/users/facebook-github-bot/repos\", \"events_url\": \"https://api.github.com/users/facebook-github-bot/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/facebook-github-bot/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"57a0e2f304bcbdf541d7d49fa9093035f6bbd25d\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/57a0e2f304bcbdf541d7d49fa9093035f6bbd25d\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/57a0e2f304bcbdf541d7d49fa9093035f6bbd25d\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"7f2cb8f49004cb49cbcd1b4bfb4047d8111f47a4\", \"filename\": \"db/db_iter.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/b87c355772c0e1a643cbbd9799809d376073a6fe/db%2Fdb_iter.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/b87c355772c0e1a643cbbd9799809d376073a6fe/db%2Fdb_iter.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/db%2Fdb_iter.cc?ref=b87c355772c0e1a643cbbd9799809d376073a6fe\", \"patch\": \"@@ -1612,7 +1612,7 @@ void DBIter::SeekToLast() {\\n     SeekForPrev(*iterate_upper_bound_);\\n     const bool is_ikey = (timestamp_size_ > 0 && timestamp_lb_ != nullptr);\\n     Slice k = Valid() ? key() : Slice();\\n-    if (is_ikey) {\\n+    if (is_ikey && Valid()) {\\n       k.remove_suffix(kNumInternalBytes + timestamp_size_);\\n     }\\n     while (Valid() && 0 == user_comparator_.CompareWithoutTimestamp(\"}, {\"sha\": \"593dda903945ea30a2c7d95345cb99e946935f8e\", \"filename\": \"db/db_with_timestamp_basic_test.cc\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/b87c355772c0e1a643cbbd9799809d376073a6fe/db%2Fdb_with_timestamp_basic_test.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/b87c355772c0e1a643cbbd9799809d376073a6fe/db%2Fdb_with_timestamp_basic_test.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/db%2Fdb_with_timestamp_basic_test.cc?ref=b87c355772c0e1a643cbbd9799809d376073a6fe\", \"patch\": \"@@ -1193,6 +1193,14 @@ TEST_F(DBBasicTestWithTimestamp, SimpleBackwardIterateLowerTsBound) {\\n     it->SeekToLast();\\n     CheckIterEntry(it.get(), \\\"a\\\", kTypeSingleDeletion, Slice(),\\n                    Timestamp(1, 0));\\n+\\n+    key_ub_str = \\\"a\\\";  // exclusive\\n+    key_ub = key_ub_str;\\n+    read_opts.iterate_upper_bound = &key_ub;\\n+    it.reset(db_->NewIterator(read_opts));\\n+    it->SeekToLast();\\n+    ASSERT_FALSE(it->Valid());\\n+    ASSERT_OK(it->status());\\n   }\\n \\n   Close();\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZmFjZWJvb2svcm9ja3NkYi9jb21taXRzLzFkMjk1MGI4ZGQzODAwOWQwNzE5ZTRhODU3ZjVhNDJiYjFiYzk2NzUi.json", "commit": "https://api.github.com/repos/facebook/rocksdb/commits/1d2950b8dd38009d0719e4a857f5a42bb1bc9675", "content": "{\"sha\": \"1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"node_id\": \"C_kwDOAGnPe9oAKDFkMjk1MGI4ZGQzODAwOWQwNzE5ZTRhODU3ZjVhNDJiYjFiYzk2NzU\", \"commit\": {\"author\": {\"name\": \"tabokie\", \"email\": \"xy.tao@outlook.com\", \"date\": \"2022-06-14T20:20:54Z\"}, \"committer\": {\"name\": \"Facebook GitHub Bot\", \"email\": \"facebook-github-bot@users.noreply.github.com\", \"date\": \"2022-06-14T20:20:54Z\"}, \"message\": \"fix a false positive case of parsing table factory from options file (#10094)\\n\\nSummary:\\nDuring options file parsing, reset table factory before attempting to parse it\\nfrom string. This avoids mistakenly treating the default table factory as a\\nnewly created one.\\n\\nSigned-off-by: tabokie <xy.tao@outlook.com>\\n\\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10094\\n\\nReviewed By: akankshamahajan15\\n\\nDifferential Revision: D36945378\\n\\nPulled By: ajkr\\n\\nfbshipit-source-id: 94b2604e5e87682063b4b78f6370f3e8f101dc44\", \"tree\": {\"sha\": \"6fa6966843f676f67f1a95baa34696cebad9fe9e\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/trees/6fa6966843f676f67f1a95baa34696cebad9fe9e\"}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/git/commits/1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"comments_url\": \"https://api.github.com/repos/facebook/rocksdb/commits/1d2950b8dd38009d0719e4a857f5a42bb1bc9675/comments\", \"author\": {\"login\": \"tabokie\", \"id\": 27005812, \"node_id\": \"MDQ6VXNlcjI3MDA1ODEy\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/27005812?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/tabokie\", \"html_url\": \"https://github.com/tabokie\", \"followers_url\": \"https://api.github.com/users/tabokie/followers\", \"following_url\": \"https://api.github.com/users/tabokie/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/tabokie/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/tabokie/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/tabokie/subscriptions\", \"organizations_url\": \"https://api.github.com/users/tabokie/orgs\", \"repos_url\": \"https://api.github.com/users/tabokie/repos\", \"events_url\": \"https://api.github.com/users/tabokie/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/tabokie/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"facebook-github-bot\", \"id\": 6422482, \"node_id\": \"MDQ6VXNlcjY0MjI0ODI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6422482?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/facebook-github-bot\", \"html_url\": \"https://github.com/facebook-github-bot\", \"followers_url\": \"https://api.github.com/users/facebook-github-bot/followers\", \"following_url\": \"https://api.github.com/users/facebook-github-bot/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/facebook-github-bot/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/facebook-github-bot/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/facebook-github-bot/subscriptions\", \"organizations_url\": \"https://api.github.com/users/facebook-github-bot/orgs\", \"repos_url\": \"https://api.github.com/users/facebook-github-bot/repos\", \"events_url\": \"https://api.github.com/users/facebook-github-bot/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/facebook-github-bot/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d665afdbf30d8038d98e4333346fa4a5e83c0d21\", \"url\": \"https://api.github.com/repos/facebook/rocksdb/commits/d665afdbf30d8038d98e4333346fa4a5e83c0d21\", \"html_url\": \"https://github.com/facebook/rocksdb/commit/d665afdbf30d8038d98e4333346fa4a5e83c0d21\"}], \"stats\": {\"total\": 23, \"additions\": 22, \"deletions\": 1}, \"files\": [{\"sha\": \"562a7b214b137a51b5cbb294762f6e8fc52f93e3\", \"filename\": \"options/options_parser.cc\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/1d2950b8dd38009d0719e4a857f5a42bb1bc9675/options%2Foptions_parser.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/1d2950b8dd38009d0719e4a857f5a42bb1bc9675/options%2Foptions_parser.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/options%2Foptions_parser.cc?ref=1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"patch\": \"@@ -453,12 +453,13 @@ Status RocksDBOptionsParser::EndSection(\\n           section_arg);\\n     }\\n     // Ignore error as table factory deserialization is optional\\n+    cf_opt->table_factory.reset();\\n     s = TableFactory::CreateFromString(\\n         config_options,\\n         section_title.substr(\\n             opt_section_titles[kOptionSectionTableOptions].size()),\\n         &(cf_opt->table_factory));\\n-    if (s.ok()) {\\n+    if (s.ok() && cf_opt->table_factory != nullptr) {\\n       s = cf_opt->table_factory->ConfigureFromMap(config_options, opt_map);\\n       // Translate any errors (NotFound, NotSupported, to InvalidArgument\\n       if (s.ok() || s.IsInvalidArgument()) {\"}, {\"sha\": \"1992e39a54ba4c0bfccd25fdefb71f62860deb18\", \"filename\": \"options/options_test.cc\", \"status\": \"modified\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/facebook/rocksdb/blob/1d2950b8dd38009d0719e4a857f5a42bb1bc9675/options%2Foptions_test.cc\", \"raw_url\": \"https://github.com/facebook/rocksdb/raw/1d2950b8dd38009d0719e4a857f5a42bb1bc9675/options%2Foptions_test.cc\", \"contents_url\": \"https://api.github.com/repos/facebook/rocksdb/contents/options%2Foptions_test.cc?ref=1d2950b8dd38009d0719e4a857f5a42bb1bc9675\", \"patch\": \"@@ -47,6 +47,22 @@ namespace ROCKSDB_NAMESPACE {\\n \\n class OptionsTest : public testing::Test {};\\n \\n+class UnregisteredTableFactory : public TableFactory {\\n+ public:\\n+  UnregisteredTableFactory() {}\\n+  const char* Name() const override { return \\\"Unregistered\\\"; }\\n+  using TableFactory::NewTableReader;\\n+  Status NewTableReader(const ReadOptions&, const TableReaderOptions&,\\n+                        std::unique_ptr<RandomAccessFileReader>&&, uint64_t,\\n+                        std::unique_ptr<TableReader>*, bool) const override {\\n+    return Status::NotSupported();\\n+  }\\n+  TableBuilder* NewTableBuilder(const TableBuilderOptions&,\\n+                                WritableFileWriter*) const override {\\n+    return nullptr;\\n+  }\\n+};\\n+\\n #ifndef ROCKSDB_LITE  // GetOptionsFromMap is not supported in ROCKSDB_LITE\\n TEST_F(OptionsTest, GetOptionsFromMapTest) {\\n   std::unordered_map<std::string, std::string> cf_options_map = {\\n@@ -3662,6 +3678,10 @@ TEST_F(OptionsParserTest, DumpAndParse) {\\n       cf_opt.table_factory.reset(test::RandomTableFactory(&rnd, c));\\n     } else if (c == 4) {\\n       cf_opt.table_factory.reset(NewBlockBasedTableFactory(special_bbto));\\n+    } else if (c == 5) {\\n+      // A table factory that doesn't support deserialization should be\\n+      // supported.\\n+      cf_opt.table_factory.reset(new UnregisteredTableFactory());\\n     }\\n     base_cf_opts.emplace_back(cf_opt);\\n   }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXdzbGFicy9hd3MtYy1jb21tb24vY29tbWl0cy8zMzY3ZDVkMTMxNzM2NjRiYzUwMThmNTQwNWFkZmE0ZDM5NWM4N2NlIg==.json", "commit": "https://api.github.com/repos/awslabs/aws-c-common/commits/3367d5d13173664bc5018f5405adfa4d395c87ce", "content": "{\"sha\": \"3367d5d13173664bc5018f5405adfa4d395c87ce\", \"node_id\": \"MDY6Q29tbWl0MTE3MTQyNTE3OjMzNjdkNWQxMzE3MzY2NGJjNTAxOGY1NDA1YWRmYTRkMzk1Yzg3Y2U=\", \"commit\": {\"author\": {\"name\": \"bdonlan\", \"email\": \"bdonlan@gmail.com\", \"date\": \"2018-09-14T17:43:44Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2018-09-14T17:43:44Z\"}, \"message\": \"Fix buffer underrun in base64 encoder (#142)\\n\\nDue to a sign-extended character type bring used as the index for the base64 decoder table,\\r\\nthe base64 decoder could behave incorrectly (accepting invalid base64, etc) when presented\\r\\nwith \\\"base64\\\" input with characters over 0x80.\", \"tree\": {\"sha\": \"85e3df529c8f3ae8139ae6e53bd36a477de916a6\", \"url\": \"https://api.github.com/repos/awslabs/aws-c-common/git/trees/85e3df529c8f3ae8139ae6e53bd36a477de916a6\"}, \"url\": \"https://api.github.com/repos/awslabs/aws-c-common/git/commits/3367d5d13173664bc5018f5405adfa4d395c87ce\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJbm/NQCRBK7hj4Ov3rIwAAdHIIAH8dp3p8W75gOWR0uOfRNZ1L\\nsKc5BfvcoW7nNWED6pDkEUi1Rc8J8ysNP0ZrUf//WxTyW3qj2v3N5bXyfRsEip3K\\nE1ao9lOekBHAvQEZCuN75RbfuQ7DsPqUoH2QmQj2w2khxqGR5zUyBHaxZTflb+sR\\ncy6onweIjig3zNJGuOIQUfrfRDPUkBF8ELvJ8ngeylQlFPNn476XnnQ+j83eVMtb\\n6Izezt7zpGHbzB/qJN8l3nnry88KkjR7Zwi+alDq8JtF0UvweF+wpzsCj9uBwVLs\\nXdaQFnxR28PG8tQwhe3McrzLngYcTktTgNB+QFZWPkJSim4vwTn6hVVcxzeTyzw=\\n=A5Gl\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 85e3df529c8f3ae8139ae6e53bd36a477de916a6\\nparent cc67f311d124e90951f99133ce6eb2321dadf3ee\\nauthor bdonlan <bdonlan@gmail.com> 1536947024 -0700\\ncommitter GitHub <noreply@github.com> 1536947024 -0700\\n\\nFix buffer underrun in base64 encoder (#142)\\n\\nDue to a sign-extended character type bring used as the index for the base64 decoder table,\\r\\nthe base64 decoder could behave incorrectly (accepting invalid base64, etc) when presented\\r\\nwith \\\"base64\\\" input with characters over 0x80.\"}}, \"url\": \"https://api.github.com/repos/awslabs/aws-c-common/commits/3367d5d13173664bc5018f5405adfa4d395c87ce\", \"html_url\": \"https://github.com/awslabs/aws-c-common/commit/3367d5d13173664bc5018f5405adfa4d395c87ce\", \"comments_url\": \"https://api.github.com/repos/awslabs/aws-c-common/commits/3367d5d13173664bc5018f5405adfa4d395c87ce/comments\", \"author\": {\"login\": \"bdonlan\", \"id\": 9473, \"node_id\": \"MDQ6VXNlcjk0NzM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/9473?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bdonlan\", \"html_url\": \"https://github.com/bdonlan\", \"followers_url\": \"https://api.github.com/users/bdonlan/followers\", \"following_url\": \"https://api.github.com/users/bdonlan/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bdonlan/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bdonlan/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bdonlan/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bdonlan/orgs\", \"repos_url\": \"https://api.github.com/users/bdonlan/repos\", \"events_url\": \"https://api.github.com/users/bdonlan/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bdonlan/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cc67f311d124e90951f99133ce6eb2321dadf3ee\", \"url\": \"https://api.github.com/repos/awslabs/aws-c-common/commits/cc67f311d124e90951f99133ce6eb2321dadf3ee\", \"html_url\": \"https://github.com/awslabs/aws-c-common/commit/cc67f311d124e90951f99133ce6eb2321dadf3ee\"}], \"stats\": {\"total\": 36, \"additions\": 35, \"deletions\": 1}, \"files\": [{\"sha\": \"8a3519ddd070fb8cf6f84bb8e8470f7708b86341\", \"filename\": \"source/encoding.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/awslabs/aws-c-common/blob/3367d5d13173664bc5018f5405adfa4d395c87ce/source%2Fencoding.c\", \"raw_url\": \"https://github.com/awslabs/aws-c-common/raw/3367d5d13173664bc5018f5405adfa4d395c87ce/source%2Fencoding.c\", \"contents_url\": \"https://api.github.com/repos/awslabs/aws-c-common/contents/source%2Fencoding.c?ref=3367d5d13173664bc5018f5405adfa4d395c87ce\", \"patch\": \"@@ -264,7 +264,7 @@ int aws_base64_encode(const struct aws_byte_buf *AWS_RESTRICT to_encode, struct\\n     return AWS_OP_SUCCESS;\\n }\\n \\n-static inline int s_base64_get_decoded_value(char to_decode, uint8_t *value, int8_t allow_sentinal) {\\n+static inline int s_base64_get_decoded_value(unsigned char to_decode, uint8_t *value, int8_t allow_sentinal) {\\n \\n     uint8_t decode_value = BASE64_DECODING_TABLE[(size_t)to_decode];\\n     if (decode_value != 0xDD && (decode_value != BASE64_SENTIANAL_VALUE || allow_sentinal)) {\"}, {\"sha\": \"24ca0b088781ba976b985dd63cdec43606f48b71\", \"filename\": \"tests/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/awslabs/aws-c-common/blob/3367d5d13173664bc5018f5405adfa4d395c87ce/tests%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/awslabs/aws-c-common/raw/3367d5d13173664bc5018f5405adfa4d395c87ce/tests%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/awslabs/aws-c-common/contents/tests%2FCMakeLists.txt?ref=3367d5d13173664bc5018f5405adfa4d395c87ce\", \"patch\": \"@@ -87,6 +87,7 @@ add_test_case(hex_encoding_test_case_fooba_test)\\n add_test_case(hex_encoding_test_case_foobar_test)\\n add_test_case(hex_encoding_test_case_missing_leading_zero)\\n add_test_case(hex_encoding_invalid_buffer_size_test)\\n+add_test_case(hex_encoding_highbyte_string_test)\\n add_test_case(hex_encoding_overflow_test)\\n add_test_case(hex_encoding_invalid_string_test)\\n add_test_case(base64_encoding_test_case_empty_test)\\n@@ -100,6 +101,7 @@ add_test_case(base64_encoding_buffer_size_too_small_test)\\n add_test_case(base64_encoding_buffer_size_overflow_test)\\n add_test_case(base64_encoding_buffer_size_invalid_test)\\n add_test_case(base64_encoding_invalid_buffer_test)\\n+add_test_case(base64_encoding_highbyte_string_test)\\n add_test_case(base64_encoding_invalid_padding_test)\\n add_test_case(base64_encoding_test_zeros)\\n add_test_case(base64_encoding_test_all_values)\"}, {\"sha\": \"25bcdc6ce8e304576bff7b52e3c529dd442db229\", \"filename\": \"tests/encoding_test.c\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/awslabs/aws-c-common/blob/3367d5d13173664bc5018f5405adfa4d395c87ce/tests%2Fencoding_test.c\", \"raw_url\": \"https://github.com/awslabs/aws-c-common/raw/3367d5d13173664bc5018f5405adfa4d395c87ce/tests%2Fencoding_test.c\", \"contents_url\": \"https://api.github.com/repos/awslabs/aws-c-common/contents/tests%2Fencoding_test.c?ref=3367d5d13173664bc5018f5405adfa4d395c87ce\", \"patch\": \"@@ -213,6 +213,22 @@ static int s_hex_encoding_invalid_buffer_size_test_fn(struct aws_allocator *allo\\n \\n AWS_TEST_CASE(hex_encoding_invalid_buffer_size_test, s_hex_encoding_invalid_buffer_size_test_fn)\\n \\n+static int s_hex_encoding_highbyte_string_test_fn(struct aws_allocator *allocator, void *ctx) {\\n+    (void)allocator;\\n+    (void)ctx;\\n+\\n+    char bad_input[] = \\\"66\\\\xb6\\\\xb6\\\"\\n+                       \\\"6f6f6617\\\";\\n+    uint8_t output[sizeof(bad_input)] = {0};\\n+\\n+    struct aws_byte_buf bad_buf = aws_byte_buf_from_c_str(bad_input);\\n+    struct aws_byte_buf output_buf = aws_byte_buf_from_array(output, sizeof(output));\\n+\\n+    ASSERT_ERROR(AWS_ERROR_INVALID_HEX_STR, aws_hex_decode(&bad_buf, &output_buf));\\n+    return 0;\\n+}\\n+AWS_TEST_CASE(hex_encoding_highbyte_string_test, s_hex_encoding_highbyte_string_test_fn)\\n+\\n static int s_hex_encoding_overflow_test_fn(struct aws_allocator *allocator, void *ctx) {\\n     (void)allocator;\\n     (void)ctx;\\n@@ -537,6 +553,22 @@ static int s_base64_encoding_invalid_buffer_test_fn(struct aws_allocator *alloca\\n \\n AWS_TEST_CASE(base64_encoding_invalid_buffer_test, s_base64_encoding_invalid_buffer_test_fn)\\n \\n+static int s_base64_encoding_highbyte_string_test_fn(struct aws_allocator *allocator, void *ctx) {\\n+    (void)allocator;\\n+    (void)ctx;\\n+\\n+    char bad_input[] = \\\"AAAA\\\\xC1\\\"\\n+                       \\\"AAA\\\";\\n+    uint8_t output[sizeof(bad_input)] = {0};\\n+\\n+    struct aws_byte_buf bad_buf = aws_byte_buf_from_c_str(bad_input);\\n+    struct aws_byte_buf output_buf = aws_byte_buf_from_array(output, sizeof(output));\\n+\\n+    ASSERT_ERROR(AWS_ERROR_INVALID_BASE64_STR, aws_base64_decode(&bad_buf, &output_buf));\\n+    return 0;\\n+}\\n+AWS_TEST_CASE(base64_encoding_highbyte_string_test, s_base64_encoding_highbyte_string_test_fn)\\n+\\n static int s_base64_encoding_invalid_padding_test_fn(struct aws_allocator *allocator, void *ctx) {\\n     (void)allocator;\\n     (void)ctx;\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZXZlbnQvbGliZXZlbnQvY29tbWl0cy80NDUwMjdhNWRjZmUwYWNjZTQzMWI3ZDQwNjVkMmFjMWY2YjI3MGQ3Ig==.json", "commit": "https://api.github.com/repos/libevent/libevent/commits/445027a5dcfe0acce431b7d4065d2ac1f6b270d7", "content": "{\"sha\": \"445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"node_id\": \"MDY6Q29tbWl0MTg1Njk3Njo0NDUwMjdhNWRjZmUwYWNjZTQzMWI3ZDQwNjVkMmFjMWY2YjI3MGQ3\", \"commit\": {\"author\": {\"name\": \"Jan Kasiak\", \"email\": \"jan@cybojanek.net\", \"date\": \"2019-08-22T20:36:12Z\"}, \"committer\": {\"name\": \"Azat Khuzhin\", \"email\": \"azat@libevent.org\", \"date\": \"2019-08-27T22:15:39Z\"}, \"message\": \"Fix memory corruption in EV_CLOSURE_EVENT_FINALIZE with debug enabled\\n\\nCall event_debug_note_teardown_ before evcb_evfinalize to avoid possible\\nUAF (if finalizer free's event).\", \"tree\": {\"sha\": \"4e196d73f22cf1697584d8fbf9042075a618393f\", \"url\": \"https://api.github.com/repos/libevent/libevent/git/trees/4e196d73f22cf1697584d8fbf9042075a618393f\"}, \"url\": \"https://api.github.com/repos/libevent/libevent/git/commits/445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libevent/libevent/commits/445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"html_url\": \"https://github.com/libevent/libevent/commit/445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"comments_url\": \"https://api.github.com/repos/libevent/libevent/commits/445027a5dcfe0acce431b7d4065d2ac1f6b270d7/comments\", \"author\": {\"login\": \"cybojanek\", \"id\": 427283, \"node_id\": \"MDQ6VXNlcjQyNzI4Mw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/427283?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cybojanek\", \"html_url\": \"https://github.com/cybojanek\", \"followers_url\": \"https://api.github.com/users/cybojanek/followers\", \"following_url\": \"https://api.github.com/users/cybojanek/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cybojanek/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cybojanek/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cybojanek/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cybojanek/orgs\", \"repos_url\": \"https://api.github.com/users/cybojanek/repos\", \"events_url\": \"https://api.github.com/users/cybojanek/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cybojanek/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"azat\", \"id\": 430798, \"node_id\": \"MDQ6VXNlcjQzMDc5OA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/430798?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/azat\", \"html_url\": \"https://github.com/azat\", \"followers_url\": \"https://api.github.com/users/azat/followers\", \"following_url\": \"https://api.github.com/users/azat/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/azat/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/azat/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/azat/subscriptions\", \"organizations_url\": \"https://api.github.com/users/azat/orgs\", \"repos_url\": \"https://api.github.com/users/azat/repos\", \"events_url\": \"https://api.github.com/users/azat/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/azat/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"70daa93a514075eb0102eec4c6e5002b114264a9\", \"url\": \"https://api.github.com/repos/libevent/libevent/commits/70daa93a514075eb0102eec4c6e5002b114264a9\", \"html_url\": \"https://github.com/libevent/libevent/commit/70daa93a514075eb0102eec4c6e5002b114264a9\"}], \"stats\": {\"total\": 50, \"additions\": 49, \"deletions\": 1}, \"files\": [{\"sha\": \"8cae318d16358a5aec41738d65f7570ff5e20829\", \"filename\": \"event.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/libevent/libevent/blob/445027a5dcfe0acce431b7d4065d2ac1f6b270d7/event.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/445027a5dcfe0acce431b7d4065d2ac1f6b270d7/event.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/event.c?ref=445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"patch\": \"@@ -1728,8 +1728,8 @@ event_process_active_single_queue(struct event_base *base,\\n \\t\\t\\tevcb_evfinalize = ev->ev_evcallback.evcb_cb_union.evcb_evfinalize;\\n \\t\\t\\tEVUTIL_ASSERT((evcb->evcb_flags & EVLIST_FINALIZING));\\n \\t\\t\\tEVBASE_RELEASE_LOCK(base, th_base_lock);\\n-\\t\\t\\tevcb_evfinalize(ev, ev->ev_arg);\\n \\t\\t\\tevent_debug_note_teardown_(ev);\\n+\\t\\t\\tevcb_evfinalize(ev, ev->ev_arg);\\n \\t\\t\\tif (evcb_closure == EV_CLOSURE_EVENT_FINALIZE_FREE)\\n \\t\\t\\t\\tmm_free(ev);\\n \\t\\t}\"}, {\"sha\": \"9e57188121d1174d51a5b9be52c71e9b696ac43e\", \"filename\": \"test/regress_finalize.c\", \"status\": \"modified\", \"additions\": 48, \"deletions\": 0, \"changes\": 48, \"blob_url\": \"https://github.com/libevent/libevent/blob/445027a5dcfe0acce431b7d4065d2ac1f6b270d7/test%2Fregress_finalize.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/445027a5dcfe0acce431b7d4065d2ac1f6b270d7/test%2Fregress_finalize.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/test%2Fregress_finalize.c?ref=445027a5dcfe0acce431b7d4065d2ac1f6b270d7\", \"patch\": \"@@ -290,6 +290,53 @@ test_fin_within_cb(void *arg)\\n \\t;\\n }\\n \\n+static void\\n+event_finalize_callback_free(struct event *ev, void *arg)\\n+{\\n+\\tstruct event_base *base = arg;\\n+\\tint err;\\n+\\tif (base) {\\n+\\t\\terr = event_assign(ev, base, -1, EV_TIMEOUT, NULL, NULL);\\n+\\t\\ttt_int_op(err, ==, 0);\\n+\\t\\ttest_ok += 1;\\n+\\t} else {\\n+\\t\\tfree(ev);\\n+\\t\\ttest_ok += 1;\\n+\\t}\\n+\\n+end:\\n+\\t;\\n+}\\n+static void\\n+test_fin_debug_use_after_free(void *arg)\\n+{\\n+\\tstruct basic_test_data *data = arg;\\n+\\tstruct event_base *base = data->base;\\n+\\tstruct event *ev;\\n+\\n+\\ttt_ptr_op(ev = event_new(base, -1, EV_TIMEOUT, NULL, base), !=, NULL);\\n+\\ttt_int_op(event_add(ev, NULL), ==, 0);\\n+\\ttt_int_op(event_finalize(0, ev, event_finalize_callback_free), ==, 0);\\n+\\n+\\t// Dispatch base to trigger callbacks\\n+\\tevent_base_dispatch(base);\\n+\\tevent_base_assert_ok_(base);\\n+\\ttt_int_op(test_ok, ==, 1);\\n+\\n+\\t// Now add again, since we did event_assign in event_finalize_callback_free\\n+\\t// This used to fail in event_debug_assert_is_setup_\\n+\\ttt_int_op(event_add(ev, NULL), ==, 0);\\n+\\n+\\t// Finalize and dispatch again\\n+\\ttt_int_op(event_finalize(0, ev, event_finalize_callback_free), ==, 0);\\n+\\tevent_base_dispatch(base);\\n+\\tevent_base_assert_ok_(base);\\n+\\ttt_int_op(test_ok, ==, 2);\\n+\\n+end:\\n+\\t;\\n+}\\n+\\n #if 0\\n static void\\n timer_callback_3(evutil_socket_t *fd, short what, void *arg)\\n@@ -339,6 +386,7 @@ struct testcase_t finalize_testcases[] = {\\n \\tTEST(cb_invoked, TT_FORK|TT_NEED_BASE),\\n \\tTEST(free_finalize, TT_FORK),\\n \\tTEST(within_cb, TT_FORK|TT_NEED_BASE),\\n+\\tTEST(debug_use_after_free, TT_FORK|TT_NEED_BASE|TT_ENABLE_DEBUG_MODE),\\n //\\tTEST(many, TT_FORK|TT_NEED_BASE),\\n \\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZXZlbnQvbGliZXZlbnQvY29tbWl0cy80ZGE5Zjg3Y2NiZTcxZWRiM2IzYWFmNzRiOGI2NGQ3ZTljNDFkY2FmIg==.json", "commit": "https://api.github.com/repos/libevent/libevent/commits/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf", "content": "{\"sha\": \"4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"node_id\": \"MDY6Q29tbWl0MTg1Njk3Njo0ZGE5Zjg3Y2NiZTcxZWRiM2IzYWFmNzRiOGI2NGQ3ZTljNDFkY2Fm\", \"commit\": {\"author\": {\"name\": \"ayuseleznev\", \"email\": \"ayuseleznev@iponweb.net\", \"date\": \"2020-02-27T13:59:45Z\"}, \"committer\": {\"name\": \"ayuseleznev\", \"email\": \"ayuseleznev@iponweb.net\", \"date\": \"2020-02-28T12:06:24Z\"}, \"message\": \"evdns: fix a crash when evdns_base with waiting requests is freed\\n\\nFix undefined behaviour and application crash that might take\\nplace in some rare cases after calling evdns_base_free when\\nthere are requests in the waiting queue.\\n\\nCurrent cleanup procedure in evdns_base_free_and_unlock\\nfunction includes 2 steps:\\n1. Finish all inflight requests.\\n2. Finish all waiting requests.\\nDuring the first step we iterate over each list in req_heads\\nstructure and finish all requests in these lists. With current\\nlogic finishing an inflight request (function request_finished)\\nremoves it from the inflight requests container and forces\\na wating connection to be sent (by calling\\nevdns_requests_pump_waiting_queue). When these new requests are\\nsent it is possible that they will be inserted to the list in\\nreq_heads that we've already cleaned.\\nSo in some cases container of the inflight requests is not empty\\nafter this procedure and some requests are not finished and\\ndeleted. When timeouts for these requests expire\\nevdns_request_timeout_callback is called but corresponding\\nevdns_base has been already deleted which causes undefined\\nbehaviour and possible applicaton crash.\\n\\nIt is interesting to note that in old versions of libevent such\\nsituation was not possible. This bug was introduced by the commit\\n14f84bbdc77d90b1d936076661443cdbf516c593. Before this commit\\nnameservers were deleted before finishing the requests. Therefore\\nit was not possible that requests from the waiting queue be sent\\nwhile we finish the inflight requests.\", \"tree\": {\"sha\": \"ea92006eaff93e1ee4f32289c0af07c9c0314ef8\", \"url\": \"https://api.github.com/repos/libevent/libevent/git/trees/ea92006eaff93e1ee4f32289c0af07c9c0314ef8\"}, \"url\": \"https://api.github.com/repos/libevent/libevent/git/commits/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libevent/libevent/commits/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"html_url\": \"https://github.com/libevent/libevent/commit/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"comments_url\": \"https://api.github.com/repos/libevent/libevent/commits/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"968bbd5c918568eb95b493af05c464ddfc36671b\", \"url\": \"https://api.github.com/repos/libevent/libevent/commits/968bbd5c918568eb95b493af05c464ddfc36671b\", \"html_url\": \"https://github.com/libevent/libevent/commit/968bbd5c918568eb95b493af05c464ddfc36671b\"}], \"stats\": {\"total\": 16, \"additions\": 11, \"deletions\": 5}, \"files\": [{\"sha\": \"d820aa70ba3f9cbee9a5c39acef72256e750b75f\", \"filename\": \"evdns.c\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/libevent/libevent/blob/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf/evdns.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf/evdns.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/evdns.c?ref=4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"patch\": \"@@ -4106,18 +4106,18 @@ evdns_base_free_and_unlock(struct evdns_base *base, int fail_requests)\\n \\n \\t/* TODO(nickm) we might need to refcount here. */\\n \\n+\\twhile (base->req_waiting_head) {\\n+\\t\\tif (fail_requests)\\n+\\t\\t\\treply_schedule_callback(base->req_waiting_head, 0, DNS_ERR_SHUTDOWN, NULL);\\n+\\t\\trequest_finished(base->req_waiting_head, &base->req_waiting_head, 1);\\n+\\t}\\n \\tfor (i = 0; i < base->n_req_heads; ++i) {\\n \\t\\twhile (base->req_heads[i]) {\\n \\t\\t\\tif (fail_requests)\\n \\t\\t\\t\\treply_schedule_callback(base->req_heads[i], 0, DNS_ERR_SHUTDOWN, NULL);\\n \\t\\t\\trequest_finished(base->req_heads[i], &REQ_HEAD(base, base->req_heads[i]->trans_id), 1);\\n \\t\\t}\\n \\t}\\n-\\twhile (base->req_waiting_head) {\\n-\\t\\tif (fail_requests)\\n-\\t\\t\\treply_schedule_callback(base->req_waiting_head, 0, DNS_ERR_SHUTDOWN, NULL);\\n-\\t\\trequest_finished(base->req_waiting_head, &base->req_waiting_head, 1);\\n-\\t}\\n \\tbase->global_requests_inflight = base->global_requests_waiting = 0;\\n \\n \\tfor (server = base->server_head; server; server = server_next) {\"}, {\"sha\": \"865738fa43ac636849d3bb7e073202adfec58d6c\", \"filename\": \"test/regress_dns.c\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/libevent/libevent/blob/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf/test%2Fregress_dns.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf/test%2Fregress_dns.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/test%2Fregress_dns.c?ref=4da9f87ccbe71edb3b3aaf74b8b64d7e9c41dcaf\", \"patch\": \"@@ -2127,6 +2127,7 @@ dns_client_fail_requests_test(void *arg)\\n {\\n \\tstruct basic_test_data *data = arg;\\n \\tstruct event_base *base = data->base;\\n+\\tint limit_inflight = data->setup_data && !strcmp(data->setup_data, \\\"limit-inflight\\\");\\n \\tstruct evdns_base *dns = NULL;\\n \\tstruct evdns_server_port *dns_port = NULL;\\n \\tev_uint16_t portnum = 0;\\n@@ -2144,6 +2145,9 @@ dns_client_fail_requests_test(void *arg)\\n \\tdns = evdns_base_new(base, EVDNS_BASE_DISABLE_WHEN_INACTIVE);\\n \\ttt_assert(!evdns_base_nameserver_ip_add(dns, buf));\\n \\n+\\tif (limit_inflight)\\n+\\t\\ttt_assert(!evdns_base_set_option(dns, \\\"max-inflight:\\\", \\\"11\\\"));\\n+\\n \\tfor (i = 0; i < 20; ++i)\\n \\t\\tevdns_base_resolve_ipv4(dns, \\\"foof.example.com\\\", 0, generic_dns_callback, &r[i]);\\n \\n@@ -2437,6 +2441,8 @@ struct testcase_t dns_testcases[] = {\\n \\n \\t{ \\\"client_fail_requests\\\", dns_client_fail_requests_test,\\n \\t  TT_FORK|TT_NEED_BASE|TT_NO_LOGS, &basic_setup, NULL },\\n+\\t{ \\\"client_fail_waiting_requests\\\", dns_client_fail_requests_test,\\n+\\t  TT_FORK|TT_NEED_BASE|TT_NO_LOGS, &basic_setup, (char*)\\\"limit-inflight\\\" },\\n \\t{ \\\"client_fail_requests_getaddrinfo\\\",\\n \\t  dns_client_fail_requests_getaddrinfo_test,\\n \\t  TT_FORK|TT_NEED_BASE|TT_NO_LOGS, &basic_setup, NULL },\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGliZXZlbnQvbGliZXZlbnQvY29tbWl0cy85NzJiNDU2YmY2MGU5YTJmNTUwZWM0NWExNDkyMWMwNmUyNTJjNzkzIg==.json", "commit": "https://api.github.com/repos/libevent/libevent/commits/972b456bf60e9a2f550ec45a14921c06e252c793", "content": "{\"sha\": \"972b456bf60e9a2f550ec45a14921c06e252c793\", \"node_id\": \"MDY6Q29tbWl0MTg1Njk3Njo5NzJiNDU2YmY2MGU5YTJmNTUwZWM0NWExNDkyMWMwNmUyNTJjNzkz\", \"commit\": {\"author\": {\"name\": \"Azat Khuzhin\", \"email\": \"azat@libevent.org\", \"date\": \"2020-05-04T21:21:18Z\"}, \"committer\": {\"name\": \"Azat Khuzhin\", \"email\": \"azat@libevent.org\", \"date\": \"2020-05-04T21:25:23Z\"}, \"message\": \"Fix EV_CLOSED detection/reporting (epoll only)\\n\\n- EV_CLOSED is EPOLLRDHUP in epoll\\n- EPOLLRDHUP reported w/o EPOLLHUP if the socket closed with shutdown(SHUT_WR)\\n- EPOLLRDHUP reported w/  EPOLLHUP if the socket closed with close()\\n  so in this case epoll backend will detect this event as error\\n  (EV_READ|EV_WRITE), since the epoll_ctl() will return EPOLLRDHUP with\\n  EPOLLHUP set, but this is not correct, let's fix this.\\n\\nFixes: #984\", \"tree\": {\"sha\": \"1a2618212597dd1f9919f68a22612564320ed7d1\", \"url\": \"https://api.github.com/repos/libevent/libevent/git/trees/1a2618212597dd1f9919f68a22612564320ed7d1\"}, \"url\": \"https://api.github.com/repos/libevent/libevent/git/commits/972b456bf60e9a2f550ec45a14921c06e252c793\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/libevent/libevent/commits/972b456bf60e9a2f550ec45a14921c06e252c793\", \"html_url\": \"https://github.com/libevent/libevent/commit/972b456bf60e9a2f550ec45a14921c06e252c793\", \"comments_url\": \"https://api.github.com/repos/libevent/libevent/commits/972b456bf60e9a2f550ec45a14921c06e252c793/comments\", \"author\": {\"login\": \"azat\", \"id\": 430798, \"node_id\": \"MDQ6VXNlcjQzMDc5OA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/430798?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/azat\", \"html_url\": \"https://github.com/azat\", \"followers_url\": \"https://api.github.com/users/azat/followers\", \"following_url\": \"https://api.github.com/users/azat/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/azat/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/azat/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/azat/subscriptions\", \"organizations_url\": \"https://api.github.com/users/azat/orgs\", \"repos_url\": \"https://api.github.com/users/azat/repos\", \"events_url\": \"https://api.github.com/users/azat/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/azat/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"azat\", \"id\": 430798, \"node_id\": \"MDQ6VXNlcjQzMDc5OA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/430798?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/azat\", \"html_url\": \"https://github.com/azat\", \"followers_url\": \"https://api.github.com/users/azat/followers\", \"following_url\": \"https://api.github.com/users/azat/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/azat/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/azat/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/azat/subscriptions\", \"organizations_url\": \"https://api.github.com/users/azat/orgs\", \"repos_url\": \"https://api.github.com/users/azat/repos\", \"events_url\": \"https://api.github.com/users/azat/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/azat/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c10cde4c617979e951352775a9685a47bf9c6acd\", \"url\": \"https://api.github.com/repos/libevent/libevent/commits/c10cde4c617979e951352775a9685a47bf9c6acd\", \"html_url\": \"https://github.com/libevent/libevent/commit/c10cde4c617979e951352775a9685a47bf9c6acd\"}], \"stats\": {\"total\": 13, \"additions\": 5, \"deletions\": 8}, \"files\": [{\"sha\": \"4b1e3963d1e059d972f6ad1f555d1390205db0ad\", \"filename\": \"epoll.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/libevent/libevent/blob/972b456bf60e9a2f550ec45a14921c06e252c793/epoll.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/972b456bf60e9a2f550ec45a14921c06e252c793/epoll.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/epoll.c?ref=972b456bf60e9a2f550ec45a14921c06e252c793\", \"patch\": \"@@ -487,7 +487,9 @@ epoll_dispatch(struct event_base *base, struct timeval *tv)\\n \\t\\t\\tcontinue;\\n #endif\\n \\n-\\t\\tif (what & (EPOLLHUP|EPOLLERR)) {\\n+\\t\\tif (what & EPOLLERR) {\\n+\\t\\t\\tev = EV_READ | EV_WRITE;\\n+\\t\\t} else if ((what & EPOLLHUP) && !(what & EPOLLRDHUP)) {\\n \\t\\t\\tev = EV_READ | EV_WRITE;\\n \\t\\t} else {\\n \\t\\t\\tif (what & EPOLLIN)\"}, {\"sha\": \"fe2a8fd1e1acaf741b68615dc35bb2857eddac1c\", \"filename\": \"test/regress.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 7, \"changes\": 9, \"blob_url\": \"https://github.com/libevent/libevent/blob/972b456bf60e9a2f550ec45a14921c06e252c793/test%2Fregress.c\", \"raw_url\": \"https://github.com/libevent/libevent/raw/972b456bf60e9a2f550ec45a14921c06e252c793/test%2Fregress.c\", \"contents_url\": \"https://api.github.com/repos/libevent/libevent/contents/test%2Fregress.c?ref=972b456bf60e9a2f550ec45a14921c06e252c793\", \"patch\": \"@@ -512,13 +512,8 @@ test_simpleclose(void *ptr)\\n \\t\\ttt_assert(!event_base_loopexit(base, &tv));\\n \\t}\\n \\n-\\t/* via close() */\\n-\\tif (pair[1] == -1) {\\n-\\t\\ttt_int_op(event_base_loop(base, EVLOOP_NONBLOCK), ==, 0);\\n-\\t} else {\\n-\\t\\ttt_int_op(event_base_loop(base, EVLOOP_NONBLOCK), ==, !persist);\\n-\\t\\ttt_int_op(got_event, ==, (events & ~EV_PERSIST));\\n-\\t}\\n+\\ttt_int_op(event_base_loop(base, EVLOOP_NONBLOCK), ==, !persist);\\n+\\ttt_int_op(got_event, ==, (events & ~EV_PERSIST));\\n \\n end:\\n \\tif (ev)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvNjhlMGZhNzQ5OTg3NmZjMGNmODZiOGJlNzg0YTg5MDIyNjY0ODY0NSI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/68e0fa7499876fc0cf86b8be784a890226648645", "content": "{\"sha\": \"68e0fa7499876fc0cf86b8be784a890226648645\", \"node_id\": \"C_kwDOAxgDSdoAKDY4ZTBmYTc0OTk4NzZmYzBjZjg2YjhiZTc4NGE4OTAyMjY2NDg2NDU\", \"commit\": {\"author\": {\"name\": \"Rasmus Johansen\", \"email\": \"rasnjo@gmail.com\", \"date\": \"2022-09-16T12:58:41Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-09-16T12:58:41Z\"}, \"message\": \"ARROW-17733: [C++] Take index_width into account when filling nulls in index buffer (#14129)\\n\\nTake into account index_width when offsetting by position into out_data. Otherwise we offset position bytes into the array, but we want to offset position places into the array.\\n\\nAuthored-by: Rasmus Johansen <rasnjo@gmail.com>\\nSigned-off-by: David Li <li.davidm96@gmail.com>\", \"tree\": {\"sha\": \"d85a4b22f92e672b6fd622ca3ceacce69f4edb50\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/d85a4b22f92e672b6fd622ca3ceacce69f4edb50\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/68e0fa7499876fc0cf86b8be784a890226648645\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjJHMBCRBK7hj4Ov3rIwAA06AIAJS23i2AW69cpvR3r97etWfu\\nGjGE8fmt74D0S242C8UXB8KWf/iogt3PPmPRqr5lJ8PIOA5yU7OSZ7Nf+Q7az+Ox\\nSY019TBUtkVLy1E0IiyruXB2ZjW1qXlvEFlpke4vvGImHnqTupkr8MucDCA/bes9\\nNDGIJFZCKeu5339xHqZ93t103klOjnIvJcLQB2YwOFX7YN8XlVlCWYe00rlYNCEY\\nWeES7a8vdcTMMXRrnmehaeiTdnDPcE74f6+SatiV5ImHFBRwbaO1XF/tT+G4PvL2\\nj/3F9YTUDyjtpuEb7ZwMpFuBkn7jSqd3I8XNevTMEdCA9GytjI5zXK0GIFZtnf8=\\n=eZFO\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree d85a4b22f92e672b6fd622ca3ceacce69f4edb50\\nparent 69266721472725f37095880a9b87d88f395462b6\\nauthor Rasmus Johansen <rasnjo@gmail.com> 1663333121 +0100\\ncommitter GitHub <noreply@github.com> 1663333121 -0400\\n\\nARROW-17733: [C++] Take index_width into account when filling nulls in index buffer (#14129)\\n\\nTake into account index_width when offsetting by position into out_data. Otherwise we offset position bytes into the array, but we want to offset position places into the array.\\n\\nAuthored-by: Rasmus Johansen <rasnjo@gmail.com>\\nSigned-off-by: David Li <li.davidm96@gmail.com>\"}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/68e0fa7499876fc0cf86b8be784a890226648645\", \"html_url\": \"https://github.com/apache/arrow/commit/68e0fa7499876fc0cf86b8be784a890226648645\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/68e0fa7499876fc0cf86b8be784a890226648645/comments\", \"author\": {\"login\": \"rasnjo\", \"id\": 4934446, \"node_id\": \"MDQ6VXNlcjQ5MzQ0NDY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4934446?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rasnjo\", \"html_url\": \"https://github.com/rasnjo\", \"followers_url\": \"https://api.github.com/users/rasnjo/followers\", \"following_url\": \"https://api.github.com/users/rasnjo/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rasnjo/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rasnjo/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rasnjo/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rasnjo/orgs\", \"repos_url\": \"https://api.github.com/users/rasnjo/repos\", \"events_url\": \"https://api.github.com/users/rasnjo/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rasnjo/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"69266721472725f37095880a9b87d88f395462b6\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/69266721472725f37095880a9b87d88f395462b6\", \"html_url\": \"https://github.com/apache/arrow/commit/69266721472725f37095880a9b87d88f395462b6\"}], \"stats\": {\"total\": 15, \"additions\": 13, \"deletions\": 2}, \"files\": [{\"sha\": \"aab734284fa97debe48f707d0a44c508e500fdfc\", \"filename\": \"cpp/src/arrow/array/concatenate.cc\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/apache/arrow/blob/68e0fa7499876fc0cf86b8be784a890226648645/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/68e0fa7499876fc0cf86b8be784a890226648645/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate.cc?ref=68e0fa7499876fc0cf86b8be784a890226648645\", \"patch\": \"@@ -311,8 +311,8 @@ class ConcatenateImpl {\\n                                                   /*dest_offset=*/position, run.length,\\n                                                   transpose_map));\\n           } else {\\n-            std::fill(out_data + position,\\n-                      out_data + position + (run.length * index_width), 0x00);\\n+            std::fill(out_data + (position * index_width),\\n+                      out_data + (position + run.length) * index_width, 0x00);\\n           }\\n \\n           position += run.length;\"}, {\"sha\": \"bff5d7eec1e1b8bd8ec043e5541690e782e87eb6\", \"filename\": \"cpp/src/arrow/array/concatenate_test.cc\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/apache/arrow/blob/68e0fa7499876fc0cf86b8be784a890226648645/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/68e0fa7499876fc0cf86b8be784a890226648645/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Farray%2Fconcatenate_test.cc?ref=68e0fa7499876fc0cf86b8be784a890226648645\", \"patch\": \"@@ -539,4 +539,15 @@ TEST_F(ConcatenateTest, OffsetOverflow) {\\n   ASSERT_RAISES(Invalid, Concatenate({fake_long, fake_long}).status());\\n }\\n \\n+TEST_F(ConcatenateTest, DictionaryConcatenateWithEmptyUint16) {\\n+  // Regression test for ARROW-17733\\n+  auto dict_type = dictionary(uint16(), utf8());\\n+  auto dict_one = DictArrayFromJSON(dict_type, \\\"[]\\\", \\\"[]\\\");\\n+  auto dict_two =\\n+      DictArrayFromJSON(dict_type, \\\"[0, 1, null, null, null, null]\\\", \\\"[\\\\\\\"A0\\\\\\\", \\\\\\\"A1\\\\\\\"]\\\");\\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\\n+\\n+  AssertArraysEqual(*dict_two, *concat_actual);\\n+}\\n+\\n }  // namespace arrow\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvZWVhNGE1NGY2NmEzNjEzN2Y0MjA0ODc2YTY4ZTZkNWVkOTEzY2JjNSI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/eea4a54f66a36137f4204876a68e6d5ed913cbc5", "content": "{\"sha\": \"eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"node_id\": \"C_kwDOAxgDSdoAKGVlYTRhNTRmNjZhMzYxMzdmNDIwNDg3NmE2OGU2ZDVlZDkxM2NiYzU\", \"commit\": {\"author\": {\"name\": \"LouisClt\", \"email\": \"louis1110@hotmail.fr\", \"date\": \"2022-10-18T20:27:15Z\"}, \"committer\": {\"name\": \"Sutou Kouhei\", \"email\": \"kou@clear-code.com\", \"date\": \"2022-10-20T21:42:37Z\"}, \"message\": \"ARROW-17524: [C++] Correction for fields included when reading an ORC table (#13962)\\n\\nI think there is a bug in the ORC reader : when we specify the fields indexes that we want to keep, it does not work correctly. Looking at the code, it seems to be because we do \\\"includeTypes\\\" in lieue of \\\"include\\\" when setting the ORC options.\\r\\nIt can be problematic when we want to import an ORC table containing Union types as it will do an error at the import, even if we try not to import these specific fields.\\r\\n\\r\\nThe definitions of the corresponding ORC methods are here : \\r\\nhttps://github.com/apache/orc/blob/72220851cbde164a22706f8d47741fd1ad3db190/c%2B%2B/src/Options.hh#L185-L191\\r\\n\\r\\nand \\r\\nhttps://github.com/apache/orc/blob/72220851cbde164a22706f8d47741fd1ad3db190/c%2B%2B/src/Options.hh#L201-L207\\n\\nLead-authored-by: LouisClt <louis1110@hotmail.fr>\\nCo-authored-by: Antoine Pitrou <antoine@python.org>\\nCo-authored-by: Antoine Pitrou <pitrou@free.fr>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\", \"tree\": {\"sha\": \"64e46e09545352714638e6ff5794c0d5f6c9e4ce\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/64e46e09545352714638e6ff5794c0d5f6c9e4ce\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"html_url\": \"https://github.com/apache/arrow/commit/eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/eea4a54f66a36137f4204876a68e6d5ed913cbc5/comments\", \"author\": {\"login\": \"LouisClt\", \"id\": 30007232, \"node_id\": \"MDQ6VXNlcjMwMDA3MjMy\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/30007232?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LouisClt\", \"html_url\": \"https://github.com/LouisClt\", \"followers_url\": \"https://api.github.com/users/LouisClt/followers\", \"following_url\": \"https://api.github.com/users/LouisClt/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LouisClt/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LouisClt/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LouisClt/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LouisClt/orgs\", \"repos_url\": \"https://api.github.com/users/LouisClt/repos\", \"events_url\": \"https://api.github.com/users/LouisClt/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LouisClt/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"kou\", \"id\": 27350, \"node_id\": \"MDQ6VXNlcjI3MzUw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/27350?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kou\", \"html_url\": \"https://github.com/kou\", \"followers_url\": \"https://api.github.com/users/kou/followers\", \"following_url\": \"https://api.github.com/users/kou/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kou/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kou/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kou/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kou/orgs\", \"repos_url\": \"https://api.github.com/users/kou/repos\", \"events_url\": \"https://api.github.com/users/kou/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kou/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ff80b30ea6424f21d15ca9511107a869a2f956b0\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/ff80b30ea6424f21d15ca9511107a869a2f956b0\", \"html_url\": \"https://github.com/apache/arrow/commit/ff80b30ea6424f21d15ca9511107a869a2f956b0\"}], \"stats\": {\"total\": 56, \"additions\": 45, \"deletions\": 11}, \"files\": [{\"sha\": \"6626c67c3abe4b65d8843bd57eade5229652e9b7\", \"filename\": \"c_glib/test/test-orc-file-reader.rb\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 6, \"changes\": 10, \"blob_url\": \"https://github.com/apache/arrow/blob/eea4a54f66a36137f4204876a68e6d5ed913cbc5/c_glib%2Ftest%2Ftest-orc-file-reader.rb\", \"raw_url\": \"https://github.com/apache/arrow/raw/eea4a54f66a36137f4204876a68e6d5ed913cbc5/c_glib%2Ftest%2Ftest-orc-file-reader.rb\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/c_glib%2Ftest%2Ftest-orc-file-reader.rb?ref=eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"patch\": \"@@ -185,8 +185,8 @@ def all_columns\\n     test(\\\"select fields\\\") do\\n       require_gi_bindings(3, 2, 6)\\n       @reader.field_indices = [1, 3]\\n-      assert_equal(build_table(\\\"boolean1\\\" => build_boolean_array([false, true]),\\n-                               \\\"short1\\\" => build_int16_array([1024, 2048])),\\n+      assert_equal(build_table(\\\"byte1\\\" => build_int8_array([1, 100]),\\n+                               \\\"int1\\\" => build_int32_array([65536, 65536])),\\n                    @reader.read_stripes)\\n     end\\n   end\\n@@ -200,10 +200,8 @@ def all_columns\\n     test(\\\"select fields\\\") do\\n       require_gi_bindings(3, 2, 6)\\n       @reader.field_indices = [1, 3]\\n-      boolean1 = build_boolean_array([false, true])\\n-      short1 = build_int16_array([1024, 2048])\\n-      assert_equal(build_record_batch(\\\"boolean1\\\" => boolean1,\\n-                                      \\\"short1\\\" => short1),\\n+      assert_equal(build_record_batch(\\\"byte1\\\" => build_int8_array([1, 100]),\\n+                                      \\\"int1\\\" => build_int32_array([65536, 65536])),\\n                    @reader.read_stripe(0))\\n     end\\n   end\"}, {\"sha\": \"18f88bc6dfb91d13bf66b532cfe27eadc8ef56a4\", \"filename\": \"cpp/src/arrow/adapters/orc/adapter.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/apache/arrow/blob/eea4a54f66a36137f4204876a68e6d5ed913cbc5/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/eea4a54f66a36137f4204876a68e6d5ed913cbc5/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter.cc?ref=eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"patch\": \"@@ -411,7 +411,7 @@ class ORCFileReader::Impl {\\n       ARROW_RETURN_IF(*it < 0, Status::Invalid(\\\"Negative field index\\\"));\\n       include_indices_list.push_back(*it);\\n     }\\n-    opts->includeTypes(include_indices_list);\\n+    opts->include(include_indices_list);\\n     return Status::OK();\\n   }\\n \"}, {\"sha\": \"afc4bdb1d3b24c82f53c86e8a24c32640b579662\", \"filename\": \"cpp/src/arrow/adapters/orc/adapter_test.cc\", \"status\": \"modified\", \"additions\": 38, \"deletions\": 2, \"changes\": 40, \"blob_url\": \"https://github.com/apache/arrow/blob/eea4a54f66a36137f4204876a68e6d5ed913cbc5/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/eea4a54f66a36137f4204876a68e6d5ed913cbc5/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fadapters%2Forc%2Fadapter_test.cc?ref=eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"patch\": \"@@ -226,7 +226,8 @@ std::shared_ptr<Table> GenerateRandomTable(const std::shared_ptr<Schema>& schema\\n \\n void AssertTableWriteReadEqual(const std::shared_ptr<Table>& input_table,\\n                                const std::shared_ptr<Table>& expected_output_table,\\n-                               const int64_t max_size = kDefaultSmallMemStreamSize) {\\n+                               const int64_t max_size = kDefaultSmallMemStreamSize,\\n+                               std::vector<int>* opt_selected_read_indices = nullptr) {\\n   EXPECT_OK_AND_ASSIGN(auto buffer_output_stream,\\n                        io::BufferOutputStream::Create(max_size));\\n   auto write_options = adapters::orc::WriteOptions();\\n@@ -250,7 +251,11 @@ void AssertTableWriteReadEqual(const std::shared_ptr<Table>& input_table,\\n   ASSERT_EQ(reader->GetCompression(), write_options.compression);\\n   ASSERT_EQ(reader->GetCompressionSize(), write_options.compression_block_size);\\n   ASSERT_EQ(reader->GetRowIndexStride(), write_options.row_index_stride);\\n-  EXPECT_OK_AND_ASSIGN(auto actual_output_table, reader->Read());\\n+  EXPECT_OK_AND_ASSIGN(auto actual_output_table,\\n+                       opt_selected_read_indices == nullptr\\n+                           ? reader->Read()\\n+                           : reader->Read(*opt_selected_read_indices));\\n+  ASSERT_OK(actual_output_table->ValidateFull());\\n   AssertTablesEqual(*expected_output_table, *actual_output_table, false, false);\\n }\\n \\n@@ -451,6 +456,37 @@ TEST_F(TestORCWriterTrivialNoConversion, writeChunkless) {\\n   std::shared_ptr<Table> table = TableFromJSON(table_schema, {});\\n   AssertTableWriteReadEqual(table, table, kDefaultSmallMemStreamSize / 16);\\n }\\n+TEST_F(TestORCWriterTrivialNoConversion, writeTrivialChunkAndSelectField) {\\n+  std::shared_ptr<Table> table = TableFromJSON(table_schema, {R\\\"([])\\\"});\\n+  std::shared_ptr<Schema> schema_selected =\\n+      schema({field(\\\"int8\\\", int8()), field(\\\"int32\\\", int32())});\\n+  std::shared_ptr<Table> table_selected = TableFromJSON(schema_selected, {R\\\"([])\\\"});\\n+  std::vector<int> selected_indices = {1, 3};\\n+  AssertTableWriteReadEqual(table, table_selected, kDefaultSmallMemStreamSize / 16,\\n+                            &selected_indices);\\n+}\\n+TEST_F(TestORCWriterTrivialNoConversion, writeFilledChunkAndSelectField) {\\n+  std::vector<int> selected_indices = {1, 7};\\n+  random::RandomArrayGenerator rand(kRandomSeed);\\n+  std::shared_ptr<Schema> local_schema = schema({\\n+      field(\\\"bool\\\", boolean()),\\n+      field(\\\"int32\\\", int32()),\\n+      field(\\\"int64\\\", int64()),\\n+      field(\\\"float\\\", float32()),\\n+      field(\\\"struct\\\", struct_({field(\\\"a\\\", utf8()), field(\\\"b\\\", int64())})),\\n+      field(\\\"double\\\", float64()),\\n+      field(\\\"date32\\\", date32()),\\n+      field(\\\"ts3\\\", timestamp(TimeUnit::NANO)),\\n+      field(\\\"string\\\", utf8()),\\n+      field(\\\"binary\\\", binary()),\\n+  });\\n+  auto batch = rand.BatchOf(local_schema->fields(), 100);\\n+  std::shared_ptr<Table> table = Table::Make(local_schema, batch->columns());\\n+  EXPECT_OK_AND_ASSIGN(auto table_selected, table->SelectColumns(selected_indices));\\n+  AssertTableWriteReadEqual(table, table_selected, kDefaultSmallMemStreamSize,\\n+                            &selected_indices);\\n+}\\n+\\n class TestORCWriterTrivialWithConversion : public ::testing::Test {\\n  public:\\n   TestORCWriterTrivialWithConversion() {\"}, {\"sha\": \"4670350a09dbcf8a44fc6d7c25f1b02aea737de9\", \"filename\": \"ruby/red-arrow/test/test-orc.rb\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/apache/arrow/blob/eea4a54f66a36137f4204876a68e6d5ed913cbc5/ruby%2Fred-arrow%2Ftest%2Ftest-orc.rb\", \"raw_url\": \"https://github.com/apache/arrow/raw/eea4a54f66a36137f4204876a68e6d5ed913cbc5/ruby%2Fred-arrow%2Ftest%2Ftest-orc.rb\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/ruby%2Fred-arrow%2Ftest%2Ftest-orc.rb?ref=eea4a54f66a36137f4204876a68e6d5ed913cbc5\", \"patch\": \"@@ -164,8 +164,8 @@ def pp_values(values)\\n         ]\\n       end\\n       assert_equal([\\n-                     [\\\"boolean1: bool\\\", [pp_values([false, true])]],\\n-                     [\\\"short1: int16\\\", [pp_values([1024, 2048])]],\\n+                     [\\\"byte1: int8\\\", [pp_values([1, 100])]],\\n+                     [\\\"int1: int32\\\", [pp_values([65536, 65536])]],\\n                    ],\\n                    dump)\\n     end\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvMGI0ZmEyYTJiZjgwYmYzYTkxZjlmOGY0MmZlMzEzZjc4YjhhMTI4MiI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282", "content": "{\"sha\": \"0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"node_id\": \"MDY6Q29tbWl0NTE5MDUzNTM6MGI0ZmEyYTJiZjgwYmYzYTkxZjlmOGY0MmZlMzEzZjc4YjhhMTI4Mg==\", \"commit\": {\"author\": {\"name\": \"Troels Nielsen\", \"email\": \"bn.troels@gmail.com\", \"date\": \"2020-09-21T13:00:22Z\"}, \"committer\": {\"name\": \"Antoine Pitrou\", \"email\": \"antoine@python.org\", \"date\": \"2020-09-21T13:00:22Z\"}, \"message\": \"ARROW-9969: [C++] Fix RecordBatchBuilder with dictionary types\\n\\nSome types, such as some dictionary types, can not be fully determined\\nbefore a RecordBatch has been built.\\n\\nEnsure that the RecordBatch schema contains the correct types, when\\nthe RecordBatchBuilder has finished building the RecordBatch.\\n\\nCloses #8178 from troels/recordbatch-schema-correct-types\\n\\nAuthored-by: Troels Nielsen <bn.troels@gmail.com>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\", \"tree\": {\"sha\": \"58e3b010ae8ddd784baa6f340767cb777a5c393d\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/58e3b010ae8ddd784baa6f340767cb777a5c393d\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"html_url\": \"https://github.com/apache/arrow/commit/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282/comments\", \"author\": {\"login\": \"troels\", \"id\": 3203, \"node_id\": \"MDQ6VXNlcjMyMDM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3203?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/troels\", \"html_url\": \"https://github.com/troels\", \"followers_url\": \"https://api.github.com/users/troels/followers\", \"following_url\": \"https://api.github.com/users/troels/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/troels/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/troels/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/troels/subscriptions\", \"organizations_url\": \"https://api.github.com/users/troels/orgs\", \"repos_url\": \"https://api.github.com/users/troels/repos\", \"events_url\": \"https://api.github.com/users/troels/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/troels/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"pitrou\", \"id\": 1721820, \"node_id\": \"MDQ6VXNlcjE3MjE4MjA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1721820?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pitrou\", \"html_url\": \"https://github.com/pitrou\", \"followers_url\": \"https://api.github.com/users/pitrou/followers\", \"following_url\": \"https://api.github.com/users/pitrou/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pitrou/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pitrou/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pitrou/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pitrou/orgs\", \"repos_url\": \"https://api.github.com/users/pitrou/repos\", \"events_url\": \"https://api.github.com/users/pitrou/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pitrou/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a17717fa528bb7d495cfba5c6b5fb67866934a63\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/a17717fa528bb7d495cfba5c6b5fb67866934a63\", \"html_url\": \"https://github.com/apache/arrow/commit/a17717fa528bb7d495cfba5c6b5fb67866934a63\"}], \"stats\": {\"total\": 43, \"additions\": 42, \"deletions\": 1}, \"files\": [{\"sha\": \"2f0d8b7d7780be0bc6545a5c06f28cba3667cbb4\", \"filename\": \"cpp/src/arrow/table_builder.cc\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 1, \"changes\": 16, \"blob_url\": \"https://github.com/apache/arrow/blob/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282/cpp%2Fsrc%2Farrow%2Ftable_builder.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282/cpp%2Fsrc%2Farrow%2Ftable_builder.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Ftable_builder.cc?ref=0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"patch\": \"@@ -62,7 +62,21 @@ Status RecordBatchBuilder::Flush(bool reset_builders,\\n     }\\n     length = fields[i]->length();\\n   }\\n-  *batch = RecordBatch::Make(schema_, length, std::move(fields));\\n+\\n+  // For certain types like dictionaries, types may not be fully\\n+  // determined before we have flushed. Make sure that the RecordBatch\\n+  // gets the correct types in schema.\\n+  // See: #ARROW-9969\\n+  std::vector<std::shared_ptr<Field>> schema_fields(schema_->fields());\\n+  for (int i = 0; i < this->num_fields(); ++i) {\\n+    if (!schema_fields[i]->type()->Equals(fields[i]->type())) {\\n+      schema_fields[i] = schema_fields[i]->WithType(fields[i]->type());\\n+    }\\n+  }\\n+  std::shared_ptr<Schema> schema =\\n+      std::make_shared<Schema>(schema_fields, schema_->metadata());\\n+\\n+  *batch = RecordBatch::Make(schema, length, std::move(fields));\\n   if (reset_builders) {\\n     return InitBuilders();\\n   } else {\"}, {\"sha\": \"c6a25812a2def025426f3b19414cc9a84831f6a1\", \"filename\": \"cpp/src/arrow/table_builder_test.cc\", \"status\": \"modified\", \"additions\": 27, \"deletions\": 0, \"changes\": 27, \"blob_url\": \"https://github.com/apache/arrow/blob/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282/cpp%2Fsrc%2Farrow%2Ftable_builder_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282/cpp%2Fsrc%2Farrow%2Ftable_builder_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Ftable_builder_test.cc?ref=0b4fa2a2bf80bf3a91f9f8f42fe313f78b8a1282\", \"patch\": \"@@ -151,4 +151,31 @@ TEST_F(TestRecordBatchBuilder, InvalidFieldLength) {\\n   ASSERT_RAISES(Invalid, builder->Flush(&dummy));\\n }\\n \\n+// In #ARROW-9969 dictionary types were not updated\\n+// in schema when the index width grew.\\n+TEST_F(TestRecordBatchBuilder, DictionaryTypes) {\\n+  const int num_rows = static_cast<int>(UINT8_MAX) + 2;\\n+  std::vector<std::string> f0_values;\\n+  std::vector<bool> is_valid(num_rows, true);\\n+  for (int i = 0; i < num_rows; i++) {\\n+    f0_values.push_back(std::to_string(i));\\n+  }\\n+\\n+  auto f0 = field(\\\"f0\\\", dictionary(int8(), utf8()));\\n+\\n+  auto schema = ::arrow::schema({f0});\\n+\\n+  std::unique_ptr<RecordBatchBuilder> builder;\\n+  ASSERT_OK(RecordBatchBuilder::Make(schema, pool_, &builder));\\n+\\n+  auto b0 = builder->GetFieldAs<StringDictionaryBuilder>(0);\\n+\\n+  AppendValues<StringDictionaryBuilder, std::string>(b0, f0_values, is_valid);\\n+\\n+  std::shared_ptr<RecordBatch> batch;\\n+  ASSERT_OK(builder->Flush(&batch));\\n+\\n+  AssertTypeEqual(batch->column(0)->type(), batch->schema()->field(0)->type());\\n+}\\n+\\n }  // namespace arrow\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvZGIwMDQ0NDNlNjMxZmQ3MmMwZmQ5YTE2YTAyMjk0Y2QxNGI0NTZlNSI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/db004443e631fd72c0fd9a16a02294cd14b456e5", "content": "{\"sha\": \"db004443e631fd72c0fd9a16a02294cd14b456e5\", \"node_id\": \"C_kwDOAxgDSdoAKGRiMDA0NDQzZTYzMWZkNzJjMGZkOWExNmEwMjI5NGNkMTRiNDU2ZTU\", \"commit\": {\"author\": {\"name\": \"Vibhatha Lakmal Abeykoon\", \"email\": \"vibhatha@users.noreply.github.com\", \"date\": \"2022-12-05T14:36:05Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-12-05T14:36:05Z\"}, \"message\": \"ARROW-18269: [C++] Handle slash character in Hive-style partition values (#14646)\\n\\nThis PR includes a modification to the partition key generation. Expecting input data column with URI data for partition, the URI encoding is added to consider that situation. \\n\\nLead-authored-by: Vibhatha Lakmal Abeykoon <vibhatha@gmail.com>\\nCo-authored-by: Antoine Pitrou <antoine@python.org>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\", \"tree\": {\"sha\": \"f8be808db61aef4290d33520cb73eb9281de05e5\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/f8be808db61aef4290d33520cb73eb9281de05e5\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/db004443e631fd72c0fd9a16a02294cd14b456e5\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjjgHVCRBK7hj4Ov3rIwAAjRkIACB9MRIsKW6NPynQ2PI2L/pA\\nQ8nxQ3LqDQUWYKQOZsBxmSvmR3PcdwBkh8tW7BXCjWFKqnzJpzJezwVnWtMAyKho\\nM4spoavF6k0G6V+OWa+jH4iwfbb473iuaMroOWq3g7PYlOC/Y6z55b7Yh6gkKaRY\\nx4aoiL1WVBoj8IKKZAy/r5kj8g6JnrrVIJy5DTk8TGfzj2SU+c8eoAd9rIdMiSMP\\neDq3gV0EnQJsyM4MadgVNHQBNYz1phqFWJqfuutPHymTJURBed+5bMPgHkKQzh6t\\nt5v9pw3xaL+Q3KOF0D7b6627i+nxrRDCIoZUXYWCtdjhrWyvjTrUDL8fkomLN8o=\\n=dXIC\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree f8be808db61aef4290d33520cb73eb9281de05e5\\nparent 51213261982799e9bd4b191ab961137cca6299e9\\nauthor Vibhatha Lakmal Abeykoon <vibhatha@users.noreply.github.com> 1670250965 +0530\\ncommitter GitHub <noreply@github.com> 1670250965 +0100\\n\\nARROW-18269: [C++] Handle slash character in Hive-style partition values (#14646)\\n\\nThis PR includes a modification to the partition key generation. Expecting input data column with URI data for partition, the URI encoding is added to consider that situation. \\n\\nLead-authored-by: Vibhatha Lakmal Abeykoon <vibhatha@gmail.com>\\nCo-authored-by: Antoine Pitrou <antoine@python.org>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\"}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/db004443e631fd72c0fd9a16a02294cd14b456e5\", \"html_url\": \"https://github.com/apache/arrow/commit/db004443e631fd72c0fd9a16a02294cd14b456e5\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/db004443e631fd72c0fd9a16a02294cd14b456e5/comments\", \"author\": {\"login\": \"vibhatha\", \"id\": 12179219, \"node_id\": \"MDQ6VXNlcjEyMTc5MjE5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/12179219?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vibhatha\", \"html_url\": \"https://github.com/vibhatha\", \"followers_url\": \"https://api.github.com/users/vibhatha/followers\", \"following_url\": \"https://api.github.com/users/vibhatha/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vibhatha/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vibhatha/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vibhatha/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vibhatha/orgs\", \"repos_url\": \"https://api.github.com/users/vibhatha/repos\", \"events_url\": \"https://api.github.com/users/vibhatha/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vibhatha/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"51213261982799e9bd4b191ab961137cca6299e9\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/51213261982799e9bd4b191ab961137cca6299e9\", \"html_url\": \"https://github.com/apache/arrow/commit/51213261982799e9bd4b191ab961137cca6299e9\"}], \"stats\": {\"total\": 100, \"additions\": 99, \"deletions\": 1}, \"files\": [{\"sha\": \"46cdf9023ce0d73b1a043d1722e700b583636715\", \"filename\": \"cpp/src/arrow/dataset/partition.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/apache/arrow/blob/db004443e631fd72c0fd9a16a02294cd14b456e5/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/db004443e631fd72c0fd9a16a02294cd14b456e5/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition.cc?ref=db004443e631fd72c0fd9a16a02294cd14b456e5\", \"patch\": \"@@ -780,7 +780,7 @@ Result<PartitionPathFormat> HivePartitioning::FormatValues(\\n       // field_index <-> path nesting relation\\n       segments[i] = name + \\\"=\\\" + hive_options_.null_fallback;\\n     } else {\\n-      segments[i] = name + \\\"=\\\" + values[i]->ToString();\\n+      segments[i] = name + \\\"=\\\" + arrow::internal::UriEscape(values[i]->ToString());\\n     }\\n   }\\n \"}, {\"sha\": \"69402816f30b2af21e5f641ab573f056b2e36d3a\", \"filename\": \"cpp/src/arrow/dataset/partition_test.cc\", \"status\": \"modified\", \"additions\": 59, \"deletions\": 0, \"changes\": 59, \"blob_url\": \"https://github.com/apache/arrow/blob/db004443e631fd72c0fd9a16a02294cd14b456e5/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/db004443e631fd72c0fd9a16a02294cd14b456e5/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fdataset%2Fpartition_test.cc?ref=db004443e631fd72c0fd9a16a02294cd14b456e5\", \"patch\": \"@@ -28,12 +28,15 @@\\n \\n #include \\\"arrow/compute/api_scalar.h\\\"\\n #include \\\"arrow/compute/api_vector.h\\\"\\n+#include \\\"arrow/dataset/dataset.h\\\"\\n+#include \\\"arrow/dataset/file_ipc.h\\\"\\n #include \\\"arrow/dataset/test_util.h\\\"\\n #include \\\"arrow/filesystem/path_util.h\\\"\\n #include \\\"arrow/status.h\\\"\\n #include \\\"arrow/testing/builder.h\\\"\\n #include \\\"arrow/testing/gtest_util.h\\\"\\n #include \\\"arrow/util/range.h\\\"\\n+#include \\\"arrow/util/uri.h\\\"\\n \\n namespace arrow {\\n \\n@@ -862,6 +865,62 @@ TEST_F(TestPartitioning, UrlEncodedHiveWithKeyEncoded) {\\n       partitioning_->Parse(\\\"/%AF=2021-05-04/%BF=2021-05-04 07%3A27%3A00/str=%24/\\\"));\\n }\\n \\n+TEST_F(TestPartitioning, WriteHiveWithSlashesInValues) {\\n+  // ARROW-18269: partition values should be URI-encoded when writing a Hive-like dataset\\n+  fs::TimePoint mock_now = std::chrono::system_clock::now();\\n+  ASSERT_OK_AND_ASSIGN(std::shared_ptr<fs::FileSystem> filesystem,\\n+                       fs::internal::MockFileSystem::Make(mock_now, {}));\\n+  auto base_path = \\\"\\\";\\n+  ASSERT_OK(filesystem->CreateDir(base_path));\\n+  // Create an Arrow Table\\n+  auto schema = arrow::schema(\\n+      {arrow::field(\\\"a\\\", arrow::int64()), arrow::field(\\\"part\\\", arrow::utf8())});\\n+\\n+  auto table = TableFromJSON(schema, {\\n+                                         R\\\"([\\n+    [0, \\\"experiment/A/f.csv\\\"],\\n+    [1, \\\"experiment/B/f.csv\\\"],\\n+    [2, \\\"experiment/A/f.csv\\\"],\\n+    [3, \\\"experiment/C/k.csv\\\"],\\n+    [4, \\\"experiment/M/i.csv\\\"]\\n+  ])\\\",\\n+                                     });\\n+\\n+  // Write it using Datasets\\n+  auto dataset = std::make_shared<dataset::InMemoryDataset>(table);\\n+  ASSERT_OK_AND_ASSIGN(auto scanner_builder, dataset->NewScan());\\n+  ASSERT_OK_AND_ASSIGN(auto scanner, scanner_builder->Finish());\\n+\\n+  auto partition_schema = arrow::schema({arrow::field(\\\"part\\\", arrow::utf8())});\\n+  auto partitioning = std::make_shared<dataset::HivePartitioning>(partition_schema);\\n+  auto ipc_format = std::make_shared<dataset::IpcFileFormat>();\\n+  dataset::FileSystemDatasetWriteOptions write_options;\\n+  write_options.file_write_options = ipc_format->DefaultWriteOptions();\\n+  write_options.filesystem = filesystem;\\n+  write_options.base_dir = base_path;\\n+  write_options.partitioning = partitioning;\\n+  write_options.basename_template = \\\"part{i}.arrow\\\";\\n+  ASSERT_OK(dataset::FileSystemDataset::Write(write_options, scanner));\\n+\\n+  auto mockfs =\\n+      arrow::internal::checked_pointer_cast<fs::internal::MockFileSystem>(filesystem);\\n+  auto all_dirs = mockfs->AllDirs();\\n+\\n+  std::vector<std::string> encoded_paths;\\n+  std::vector<std::string> unique_partitions = {\\n+      \\\"experiment/A/f.csv\\\", \\\"experiment/B/f.csv\\\", \\\"experiment/C/k.csv\\\",\\n+      \\\"experiment/M/i.csv\\\"};\\n+  for (auto partition : unique_partitions) {\\n+    encoded_paths.push_back(\\\"part=\\\" + arrow::internal::UriEscape(partition));\\n+  }\\n+\\n+  ASSERT_EQ(all_dirs.size(), encoded_paths.size());\\n+\\n+  for (size_t i = 0; i < all_dirs.size(); i++) {\\n+    ASSERT_EQ(all_dirs[i].full_path, encoded_paths[i]);\\n+  }\\n+}\\n+\\n TEST_F(TestPartitioning, EtlThenHive) {\\n   FieldVector etl_fields{field(\\\"year\\\", int16()), field(\\\"month\\\", int8()),\\n                          field(\\\"day\\\", int8()), field(\\\"hour\\\", int8())};\"}, {\"sha\": \"0c51119932ccd5f6695449b8eceab8aa765d611b\", \"filename\": \"python/pyarrow/tests/test_dataset.py\", \"status\": \"modified\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/apache/arrow/blob/db004443e631fd72c0fd9a16a02294cd14b456e5/python%2Fpyarrow%2Ftests%2Ftest_dataset.py\", \"raw_url\": \"https://github.com/apache/arrow/raw/db004443e631fd72c0fd9a16a02294cd14b456e5/python%2Fpyarrow%2Ftests%2Ftest_dataset.py\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/python%2Fpyarrow%2Ftests%2Ftest_dataset.py?ref=db004443e631fd72c0fd9a16a02294cd14b456e5\", \"patch\": \"@@ -27,6 +27,8 @@\\n import threading\\n import time\\n \\n+from urllib.parse import quote\\n+\\n import numpy as np\\n import pytest\\n \\n@@ -4912,3 +4914,40 @@ def test_read_table_nested_columns(tempdir, format):\\n         {'user_id': 'qrs456', 'type': 'scroll', 'values': [None, 3, 4],\\n          'structs': [{'fizz': 'buzz', 'foo': None}], 'a.dotted.field': 2}\\n     ]\\n+\\n+\\n+def test_dataset_partition_with_slash(tmpdir):\\n+    from pyarrow import dataset as ds\\n+\\n+    path = tmpdir / \\\"slash-writer-x\\\"\\n+\\n+    dt_table = pa.Table.from_arrays([\\n+        pa.array([1, 2, 3, 4, 5], pa.int32()),\\n+        pa.array([\\\"experiment/A/f.csv\\\", \\\"experiment/B/f.csv\\\",\\n+                  \\\"experiment/A/f.csv\\\", \\\"experiment/C/k.csv\\\",\\n+                  \\\"experiment/M/i.csv\\\"], pa.utf8())], [\\\"exp_id\\\", \\\"exp_meta\\\"])\\n+\\n+    ds.write_dataset(\\n+        data=dt_table,\\n+        base_dir=path,\\n+        format='ipc',\\n+        partitioning=['exp_meta'],\\n+        partitioning_flavor='hive',\\n+    )\\n+\\n+    read_table = ds.dataset(\\n+        source=path,\\n+        format='ipc',\\n+        partitioning='hive',\\n+        schema=pa.schema([pa.field(\\\"exp_id\\\", pa.int32()),\\n+                          pa.field(\\\"exp_meta\\\", pa.utf8())])\\n+    ).to_table().combine_chunks()\\n+\\n+    assert dt_table == read_table.sort_by(\\\"exp_id\\\")\\n+\\n+    exp_meta = dt_table.column(1).to_pylist()\\n+    exp_meta = sorted(set(exp_meta))  # take unique\\n+    encoded_paths = [\\\"exp_meta=\\\" + quote(path, safe='') for path in exp_meta]\\n+    file_paths = sorted(os.listdir(path))\\n+\\n+    assert encoded_paths == file_paths\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvMTcxZThiZmU1ZmUxMzQ2N2ExNzYzMjI3ZTQ5NWZhZTZiYzVkMDExZCI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/171e8bfe5fe13467a1763227e495fae6bc5d011d", "content": "{\"sha\": \"171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"node_id\": \"MDY6Q29tbWl0NTE5MDUzNTM6MTcxZThiZmU1ZmUxMzQ2N2ExNzYzMjI3ZTQ5NWZhZTZiYzVkMDExZA==\", \"commit\": {\"author\": {\"name\": \"Joris Van den Bossche\", \"email\": \"jorisvandenbossche@gmail.com\", \"date\": \"2020-09-24T09:48:20Z\"}, \"committer\": {\"name\": \"Antoine Pitrou\", \"email\": \"antoine@python.org\", \"date\": \"2020-09-24T09:48:20Z\"}, \"message\": \"ARROW-10027: [C++] Fix Take array kernel for NullType\\n\\nCloses #8209 from jorisvandenbossche/ARROW-10027-filter-null\\n\\nAuthored-by: Joris Van den Bossche <jorisvandenbossche@gmail.com>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\", \"tree\": {\"sha\": \"c1e3d9f809d5cad0117e69eab0bf0b9939612964\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/c1e3d9f809d5cad0117e69eab0bf0b9939612964\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"html_url\": \"https://github.com/apache/arrow/commit/171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/171e8bfe5fe13467a1763227e495fae6bc5d011d/comments\", \"author\": {\"login\": \"jorisvandenbossche\", \"id\": 1020496, \"node_id\": \"MDQ6VXNlcjEwMjA0OTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1020496?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jorisvandenbossche\", \"html_url\": \"https://github.com/jorisvandenbossche\", \"followers_url\": \"https://api.github.com/users/jorisvandenbossche/followers\", \"following_url\": \"https://api.github.com/users/jorisvandenbossche/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jorisvandenbossche/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jorisvandenbossche/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jorisvandenbossche/orgs\", \"repos_url\": \"https://api.github.com/users/jorisvandenbossche/repos\", \"events_url\": \"https://api.github.com/users/jorisvandenbossche/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jorisvandenbossche/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"pitrou\", \"id\": 1721820, \"node_id\": \"MDQ6VXNlcjE3MjE4MjA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1721820?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pitrou\", \"html_url\": \"https://github.com/pitrou\", \"followers_url\": \"https://api.github.com/users/pitrou/followers\", \"following_url\": \"https://api.github.com/users/pitrou/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pitrou/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pitrou/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pitrou/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pitrou/orgs\", \"repos_url\": \"https://api.github.com/users/pitrou/repos\", \"events_url\": \"https://api.github.com/users/pitrou/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pitrou/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"04eb733d9f38ad2fdf61352aa955aa6200f23a7f\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/04eb733d9f38ad2fdf61352aa955aa6200f23a7f\", \"html_url\": \"https://github.com/apache/arrow/commit/04eb733d9f38ad2fdf61352aa955aa6200f23a7f\"}], \"stats\": {\"total\": 33, \"additions\": 32, \"deletions\": 1}, \"files\": [{\"sha\": \"a49cda4cb01621e2a08e94bca4a9355cdcfcaf1c\", \"filename\": \"cpp/src/arrow/compute/kernels/vector_selection.cc\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/apache/arrow/blob/171e8bfe5fe13467a1763227e495fae6bc5d011d/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/171e8bfe5fe13467a1763227e495fae6bc5d011d/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection.cc?ref=171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"patch\": \"@@ -1171,7 +1171,9 @@ void NullTake(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\\n   if (TakeState::Get(ctx).boundscheck) {\\n     KERNEL_RETURN_IF_ERROR(ctx, CheckIndexBounds(*batch[1].array(), batch[0].length()));\\n   }\\n-  out->value = std::make_shared<NullArray>(batch.length)->data();\\n+  // batch.length doesn't take into account the take indices\\n+  auto new_length = batch[1].array()->length;\\n+  out->value = std::make_shared<NullArray>(new_length)->data();\\n }\\n \\n void NullFilter(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\"}, {\"sha\": \"f71c867a96a1843aee40f0fd08c1e8609e46b795\", \"filename\": \"cpp/src/arrow/compute/kernels/vector_selection_test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/apache/arrow/blob/171e8bfe5fe13467a1763227e495fae6bc5d011d/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/171e8bfe5fe13467a1763227e495fae6bc5d011d/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fcompute%2Fkernels%2Fvector_selection_test.cc?ref=171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"patch\": \"@@ -928,6 +928,7 @@ class TestTakeKernel : public ::testing::Test {};\\n \\n TEST(TestTakeKernel, TakeNull) {\\n   AssertTakeNull(\\\"[null, null, null]\\\", \\\"[0, 1, 0]\\\", \\\"[null, null, null]\\\");\\n+  AssertTakeNull(\\\"[null, null, null]\\\", \\\"[0, 2]\\\", \\\"[null, null]\\\");\\n \\n   std::shared_ptr<Array> arr;\\n   ASSERT_RAISES(IndexError,\"}, {\"sha\": \"8b0859ccf39cc0be67badf30024f067541d92d75\", \"filename\": \"python/pyarrow/tests/test_compute.py\", \"status\": \"modified\", \"additions\": 28, \"deletions\": 0, \"changes\": 28, \"blob_url\": \"https://github.com/apache/arrow/blob/171e8bfe5fe13467a1763227e495fae6bc5d011d/python%2Fpyarrow%2Ftests%2Ftest_compute.py\", \"raw_url\": \"https://github.com/apache/arrow/raw/171e8bfe5fe13467a1763227e495fae6bc5d011d/python%2Fpyarrow%2Ftests%2Ftest_compute.py\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/python%2Fpyarrow%2Ftests%2Ftest_compute.py?ref=171e8bfe5fe13467a1763227e495fae6bc5d011d\", \"patch\": \"@@ -518,6 +518,20 @@ def test_take_dictionary(ordered):\\n     assert result.type.ordered is ordered\\n \\n \\n+def test_take_null_type():\\n+    # ARROW-10027\\n+    arr = pa.array([None] * 10)\\n+    chunked_arr = pa.chunked_array([[None] * 5] * 2)\\n+    batch = pa.record_batch([arr], names=['a'])\\n+    table = pa.table({'a': arr})\\n+\\n+    indices = pa.array([1, 3, 7, None])\\n+    assert len(arr.take(indices)) == 4\\n+    assert len(chunked_arr.take(indices)) == 4\\n+    assert len(batch.take(indices).column(0)) == 4\\n+    assert len(table.take(indices).column(0)) == 4\\n+\\n+\\n @pytest.mark.parametrize(('ty', 'values'), all_array_types)\\n def test_filter(ty, values):\\n     arr = pa.array(values, type=ty)\\n@@ -613,6 +627,20 @@ def test_filter_errors():\\n             obj.filter(mask)\\n \\n \\n+def test_filter_null_type():\\n+    # ARROW-10027\\n+    arr = pa.array([None] * 10)\\n+    chunked_arr = pa.chunked_array([[None] * 5] * 2)\\n+    batch = pa.record_batch([arr], names=['a'])\\n+    table = pa.table({'a': arr})\\n+\\n+    mask = pa.array([True, False] * 5)\\n+    assert len(arr.filter(mask)) == 5\\n+    assert len(chunked_arr.filter(mask)) == 5\\n+    assert len(batch.filter(mask).column(0)) == 5\\n+    assert len(table.filter(mask).column(0)) == 5\\n+\\n+\\n @pytest.mark.parametrize(\\\"typ\\\", [\\\"array\\\", \\\"chunked_array\\\"])\\n def test_compare_array(typ):\\n     if typ == \\\"array\\\":\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvNGE3ZTE5ZTExODkwN2QwYjFjN2UxNTA1Njk3YTViNzRhNTQxYzlmNyI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/4a7e19e118907d0b1c7e1505697a5b74a541c9f7", "content": "{\"sha\": \"4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"node_id\": \"MDY6Q29tbWl0NTE5MDUzNTM6NGE3ZTE5ZTExODkwN2QwYjFjN2UxNTA1Njk3YTViNzRhNTQxYzlmNw==\", \"commit\": {\"author\": {\"name\": \"Wes McKinney\", \"email\": \"wesm+git@apache.org\", \"date\": \"2020-06-02T01:39:30Z\"}, \"committer\": {\"name\": \"Wes McKinney\", \"email\": \"wesm+git@apache.org\", \"date\": \"2020-06-02T01:39:30Z\"}, \"message\": \"ARROW-8929: [C++] Set the default for compute::Arity::VarArgs to 0\\n\\nAs Micah pointed out, 0 is a more reasonable default for the minimum number of arguments than 1 is.\\n\\nCloses #7322 from wesm/ARROW-8929\\n\\nAuthored-by: Wes McKinney <wesm+git@apache.org>\\nSigned-off-by: Wes McKinney <wesm+git@apache.org>\", \"tree\": {\"sha\": \"875c492f42aa1fdedb9df8f715f60963d4322f83\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/875c492f42aa1fdedb9df8f715f60963d4322f83\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"html_url\": \"https://github.com/apache/arrow/commit/4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/4a7e19e118907d0b1c7e1505697a5b74a541c9f7/comments\", \"author\": {\"login\": \"wesm\", \"id\": 329591, \"node_id\": \"MDQ6VXNlcjMyOTU5MQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/329591?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wesm\", \"html_url\": \"https://github.com/wesm\", \"followers_url\": \"https://api.github.com/users/wesm/followers\", \"following_url\": \"https://api.github.com/users/wesm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wesm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wesm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wesm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wesm/orgs\", \"repos_url\": \"https://api.github.com/users/wesm/repos\", \"events_url\": \"https://api.github.com/users/wesm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wesm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"wesm\", \"id\": 329591, \"node_id\": \"MDQ6VXNlcjMyOTU5MQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/329591?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wesm\", \"html_url\": \"https://github.com/wesm\", \"followers_url\": \"https://api.github.com/users/wesm/followers\", \"following_url\": \"https://api.github.com/users/wesm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wesm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wesm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wesm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wesm/orgs\", \"repos_url\": \"https://api.github.com/users/wesm/repos\", \"events_url\": \"https://api.github.com/users/wesm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wesm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"58d5bf5053ee26b2b7f7bb26f1252467cd6b2ee6\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/58d5bf5053ee26b2b7f7bb26f1252467cd6b2ee6\", \"html_url\": \"https://github.com/apache/arrow/commit/58d5bf5053ee26b2b7f7bb26f1252467cd6b2ee6\"}], \"stats\": {\"total\": 7, \"additions\": 5, \"deletions\": 2}, \"files\": [{\"sha\": \"90b529be10e5aa1aff11c95f6e5abba650a370cc\", \"filename\": \"cpp/src/arrow/compute/function.h\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/apache/arrow/blob/4a7e19e118907d0b1c7e1505697a5b74a541c9f7/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction.h\", \"raw_url\": \"https://github.com/apache/arrow/raw/4a7e19e118907d0b1c7e1505697a5b74a541c9f7/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction.h\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction.h?ref=4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"patch\": \"@@ -60,7 +60,10 @@ struct ARROW_EXPORT Arity {\\n   static Arity Ternary() { return Arity(3, false); }\\n \\n   /// \\\\brief A function taking a variable number of arguments\\n-  static Arity VarArgs(int min_args = 1) { return Arity(min_args, true); }\\n+  ///\\n+  /// \\\\param[in] min_args the minimum number of arguments required when\\n+  /// invoking the function\\n+  static Arity VarArgs(int min_args = 0) { return Arity(min_args, true); }\\n \\n   explicit Arity(int num_args, bool is_varargs = false)\\n       : num_args(num_args), is_varargs(is_varargs) {}\"}, {\"sha\": \"576659d933185fcd67ea73344dfb048cb2886425\", \"filename\": \"cpp/src/arrow/compute/function_test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/apache/arrow/blob/4a7e19e118907d0b1c7e1505697a5b74a541c9f7/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/4a7e19e118907d0b1c7e1505697a5b74a541c9f7/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fcompute%2Ffunction_test.cc?ref=4a7e19e118907d0b1c7e1505697a5b74a541c9f7\", \"patch\": \"@@ -48,7 +48,7 @@ TEST(Arity, Basics) {\\n   ASSERT_EQ(3, ternary.num_args);\\n \\n   auto varargs = Arity::VarArgs();\\n-  ASSERT_EQ(1, varargs.num_args);\\n+  ASSERT_EQ(0, varargs.num_args);\\n   ASSERT_TRUE(varargs.is_varargs);\\n \\n   auto varargs2 = Arity::VarArgs(2);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvM2QwYTlkNThiNmZlMjlkY2IyMDhjM2ZhMjQ0Yzc4OTQ0OTUxNzk4OCI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/3d0a9d58b6fe29dcb208c3fa244c789449517988", "content": "{\"sha\": \"3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"node_id\": \"MDY6Q29tbWl0NTE5MDUzNTM6M2QwYTlkNThiNmZlMjlkY2IyMDhjM2ZhMjQ0Yzc4OTQ0OTUxNzk4OA==\", \"commit\": {\"author\": {\"name\": \"Mingyu Zhong\", \"email\": \"myzhong@google.com\", \"date\": \"2020-08-08T02:56:01Z\"}, \"committer\": {\"name\": \"Micah Kornfield\", \"email\": \"emkornfield@gmail.com\", \"date\": \"2020-08-08T02:56:01Z\"}, \"message\": \"ARROW-9671: [C++] Fix a bug in BasicDecimal128 constructor that interprets uint64_t integers with highest bit set as negative.\\n\\nCloses #7915 from MingyuZhong/bn\\n\\nLead-authored-by: Mingyu Zhong <myzhong@google.com>\\nCo-authored-by: Micah Kornfield <micahk@google.com>\\nSigned-off-by: Micah Kornfield <emkornfield@gmail.com>\", \"tree\": {\"sha\": \"975c98957e9f972d85155d0c352a8b075bc620ae\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/975c98957e9f972d85155d0c352a8b075bc620ae\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"html_url\": \"https://github.com/apache/arrow/commit/3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/3d0a9d58b6fe29dcb208c3fa244c789449517988/comments\", \"author\": {\"login\": \"MingyuZhong\", \"id\": 69326943, \"node_id\": \"MDQ6VXNlcjY5MzI2OTQz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/69326943?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MingyuZhong\", \"html_url\": \"https://github.com/MingyuZhong\", \"followers_url\": \"https://api.github.com/users/MingyuZhong/followers\", \"following_url\": \"https://api.github.com/users/MingyuZhong/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MingyuZhong/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MingyuZhong/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MingyuZhong/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MingyuZhong/orgs\", \"repos_url\": \"https://api.github.com/users/MingyuZhong/repos\", \"events_url\": \"https://api.github.com/users/MingyuZhong/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MingyuZhong/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"emkornfield\", \"id\": 17869838, \"node_id\": \"MDQ6VXNlcjE3ODY5ODM4\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/17869838?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/emkornfield\", \"html_url\": \"https://github.com/emkornfield\", \"followers_url\": \"https://api.github.com/users/emkornfield/followers\", \"following_url\": \"https://api.github.com/users/emkornfield/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/emkornfield/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/emkornfield/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/emkornfield/subscriptions\", \"organizations_url\": \"https://api.github.com/users/emkornfield/orgs\", \"repos_url\": \"https://api.github.com/users/emkornfield/repos\", \"events_url\": \"https://api.github.com/users/emkornfield/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/emkornfield/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f40e2871919b577995a8e9e2419af2e494f574cb\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/f40e2871919b577995a8e9e2419af2e494f574cb\", \"html_url\": \"https://github.com/apache/arrow/commit/f40e2871919b577995a8e9e2419af2e494f574cb\"}], \"stats\": {\"total\": 29, \"additions\": 20, \"deletions\": 9}, \"files\": [{\"sha\": \"23c38bbb9d34b6c4ffd8c59e3968ca2b3001efe0\", \"filename\": \"cpp/src/arrow/util/basic_decimal.h\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/apache/arrow/blob/3d0a9d58b6fe29dcb208c3fa244c789449517988/cpp%2Fsrc%2Farrow%2Futil%2Fbasic_decimal.h\", \"raw_url\": \"https://github.com/apache/arrow/raw/3d0a9d58b6fe29dcb208c3fa244c789449517988/cpp%2Fsrc%2Farrow%2Futil%2Fbasic_decimal.h\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Futil%2Fbasic_decimal.h?ref=3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"patch\": \"@@ -51,10 +51,11 @@ class ARROW_EXPORT BasicDecimal128 {\\n \\n   /// \\\\brief Convert any integer value into a BasicDecimal128.\\n   template <typename T,\\n-            typename = typename std::enable_if<std::is_integral<T>::value, T>::type>\\n+            typename = typename std::enable_if<\\n+                std::is_integral<T>::value && (sizeof(T) <= sizeof(uint64_t)), T>::type>\\n   constexpr BasicDecimal128(T value) noexcept\\n-      : BasicDecimal128(static_cast<int64_t>(value) >= 0 ? 0 : -1,\\n-                        static_cast<uint64_t>(value)) {}\\n+      : BasicDecimal128(value >= T{0} ? 0 : -1, static_cast<uint64_t>(value)) {  // NOLINT\\n+  }\\n \\n   /// \\\\brief Create a BasicDecimal128 from an array of bytes. Bytes are assumed to be in\\n   /// native-endian byte order.\"}, {\"sha\": \"856f10e626b4f523dd11c99daf14f50a21fd749b\", \"filename\": \"cpp/src/arrow/util/decimal_test.cc\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 6, \"changes\": 22, \"blob_url\": \"https://github.com/apache/arrow/blob/3d0a9d58b6fe29dcb208c3fa244c789449517988/cpp%2Fsrc%2Farrow%2Futil%2Fdecimal_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/3d0a9d58b6fe29dcb208c3fa244c789449517988/cpp%2Fsrc%2Farrow%2Futil%2Fdecimal_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Futil%2Fdecimal_test.cc?ref=3d0a9d58b6fe29dcb208c3fa244c789449517988\", \"patch\": \"@@ -218,8 +218,7 @@ TEST(DecimalZerosTest, NoLeadingZerosDecimalPoint) {\\n template <typename T>\\n class Decimal128Test : public ::testing::Test {\\n  public:\\n-  Decimal128Test() : value_(42) {}\\n-  const T value_;\\n+  Decimal128Test() {}\\n };\\n \\n using Decimal128Types =\\n@@ -231,18 +230,29 @@ using Decimal128Types =\\n TYPED_TEST_SUITE(Decimal128Test, Decimal128Types);\\n \\n TYPED_TEST(Decimal128Test, ConstructibleFromAnyIntegerType) {\\n-  Decimal128 value(this->value_);\\n-  ASSERT_EQ(42, value.low_bits());\\n+  Decimal128 value(TypeParam{42});\\n+  EXPECT_EQ(42, value.low_bits());\\n+  EXPECT_EQ(0, value.high_bits());\\n+\\n+  Decimal128 max_value(std::numeric_limits<TypeParam>::max());\\n+  EXPECT_EQ(std::numeric_limits<TypeParam>::max(), max_value.low_bits());\\n+  EXPECT_EQ(0, max_value.high_bits());\\n+\\n+  Decimal128 min_value(std::numeric_limits<TypeParam>::min());\\n+  EXPECT_EQ(std::numeric_limits<TypeParam>::min(), min_value.low_bits());\\n+  EXPECT_EQ((std::is_signed<TypeParam>::value ? -1 : 0), min_value.high_bits());\\n }\\n \\n TEST(Decimal128TestTrue, ConstructibleFromBool) {\\n   Decimal128 value(true);\\n-  ASSERT_EQ(1, value.low_bits());\\n+  EXPECT_EQ(1, value.low_bits());\\n+  EXPECT_EQ(0, value.high_bits());\\n }\\n \\n TEST(Decimal128TestFalse, ConstructibleFromBool) {\\n   Decimal128 value(false);\\n-  ASSERT_EQ(0, value.low_bits());\\n+  EXPECT_EQ(0, value.low_bits());\\n+  EXPECT_EQ(0, value.high_bits());\\n }\\n \\n TEST(Decimal128Test, Division) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvYzRmODQzNmUyNTMyNTI0YzJhMmY5Y2MyNmY3M2M2YjdkZmFiYWJhYSI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa", "content": "{\"sha\": \"c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"node_id\": \"MDY6Q29tbWl0NTE5MDUzNTM6YzRmODQzNmUyNTMyNTI0YzJhMmY5Y2MyNmY3M2M2YjdkZmFiYWJhYQ==\", \"commit\": {\"author\": {\"name\": \"liyafan82\", \"email\": \"fan_li_ya@foxmail.com\", \"date\": \"2020-08-17T14:27:46Z\"}, \"committer\": {\"name\": \"Antoine Pitrou\", \"email\": \"antoine@python.org\", \"date\": \"2020-08-17T14:27:46Z\"}, \"message\": \"ARROW-9495: [C++] Equality assertions don't handle Inf / -Inf properly\\n\\nSee https://issues.apache.org/jira/browse/ARROW-9495\\n\\nCloses #7826 from liyafan82/fly_0724_eq\\n\\nAuthored-by: liyafan82 <fan_li_ya@foxmail.com>\\nSigned-off-by: Antoine Pitrou <antoine@python.org>\", \"tree\": {\"sha\": \"bf2f6ed3d92f1c3d63d1250d88e444cbf8e172b0\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/bf2f6ed3d92f1c3d63d1250d88e444cbf8e172b0\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"html_url\": \"https://github.com/apache/arrow/commit/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa/comments\", \"author\": {\"login\": \"liyafan82\", \"id\": 42827532, \"node_id\": \"MDQ6VXNlcjQyODI3NTMy\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/42827532?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/liyafan82\", \"html_url\": \"https://github.com/liyafan82\", \"followers_url\": \"https://api.github.com/users/liyafan82/followers\", \"following_url\": \"https://api.github.com/users/liyafan82/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/liyafan82/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/liyafan82/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/liyafan82/subscriptions\", \"organizations_url\": \"https://api.github.com/users/liyafan82/orgs\", \"repos_url\": \"https://api.github.com/users/liyafan82/repos\", \"events_url\": \"https://api.github.com/users/liyafan82/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/liyafan82/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"pitrou\", \"id\": 1721820, \"node_id\": \"MDQ6VXNlcjE3MjE4MjA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1721820?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pitrou\", \"html_url\": \"https://github.com/pitrou\", \"followers_url\": \"https://api.github.com/users/pitrou/followers\", \"following_url\": \"https://api.github.com/users/pitrou/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pitrou/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pitrou/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pitrou/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pitrou/orgs\", \"repos_url\": \"https://api.github.com/users/pitrou/repos\", \"events_url\": \"https://api.github.com/users/pitrou/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pitrou/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"18181fe3022d5142511f507fa3047796c627d88b\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/18181fe3022d5142511f507fa3047796c627d88b\", \"html_url\": \"https://github.com/apache/arrow/commit/18181fe3022d5142511f507fa3047796c627d88b\"}], \"stats\": {\"total\": 81, \"additions\": 77, \"deletions\": 4}, \"files\": [{\"sha\": \"7af1a3d3bacefa38364c858ef7e2ab9cdaac006e\", \"filename\": \"cpp/src/arrow/array/array_test.cc\", \"status\": \"modified\", \"additions\": 73, \"deletions\": 1, \"changes\": 74, \"blob_url\": \"https://github.com/apache/arrow/blob/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa/cpp%2Fsrc%2Farrow%2Farray%2Farray_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa/cpp%2Fsrc%2Farrow%2Farray%2Farray_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Farray%2Farray_test.cc?ref=c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"patch\": \"@@ -1501,7 +1501,7 @@ void CheckFloatingNanEquality() {\\n \\n   // NaN != non-NaN\\n   ArrayFromVector<TYPE>(type, {false, true}, {0.5, nan_value}, &a);\\n-  ArrayFromVector<TYPE>(type, {false, true}, {0.5, 0.0}, &a);\\n+  ArrayFromVector<TYPE>(type, {false, true}, {0.5, 0.0}, &b);\\n   ASSERT_FALSE(a->Equals(b));\\n   ASSERT_FALSE(b->Equals(a));\\n   ASSERT_FALSE(a->Equals(b, EqualOptions().nans_equal(true)));\\n@@ -1520,6 +1520,73 @@ void CheckFloatingNanEquality() {\\n   ASSERT_TRUE(b->RangeEquals(a, 0, 1, 0));\\n }\\n \\n+template <typename TYPE>\\n+void CheckFloatingInfinityEquality() {\\n+  std::shared_ptr<Array> a, b;\\n+  std::shared_ptr<DataType> type = TypeTraits<TYPE>::type_singleton();\\n+\\n+  const auto infinity = std::numeric_limits<typename TYPE::c_type>::infinity();\\n+\\n+  for (auto nans_equal : {false, true}) {\\n+    // Infinity in a null entry\\n+    ArrayFromVector<TYPE>(type, {true, false}, {0.5, infinity}, &a);\\n+    ArrayFromVector<TYPE>(type, {true, false}, {0.5, -infinity}, &b);\\n+    ASSERT_TRUE(a->Equals(b));\\n+    ASSERT_TRUE(b->Equals(a));\\n+    ASSERT_TRUE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_TRUE(b->ApproxEquals(a, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_TRUE(a->RangeEquals(b, 0, 2, 0));\\n+    ASSERT_TRUE(b->RangeEquals(a, 0, 2, 0));\\n+    ASSERT_TRUE(a->RangeEquals(b, 1, 2, 1));\\n+    ASSERT_TRUE(b->RangeEquals(a, 1, 2, 1));\\n+\\n+    // Infinity in a valid entry\\n+    ArrayFromVector<TYPE>(type, {false, true}, {0.5, infinity}, &a);\\n+    ArrayFromVector<TYPE>(type, {false, true}, {0.5, infinity}, &b);\\n+    ASSERT_TRUE(a->Equals(b));\\n+    ASSERT_TRUE(b->Equals(a));\\n+    ASSERT_TRUE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_TRUE(b->ApproxEquals(a, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_TRUE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_TRUE(b->ApproxEquals(a, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    // Infinity in tested range\\n+    ASSERT_TRUE(a->RangeEquals(b, 0, 2, 0));\\n+    ASSERT_TRUE(b->RangeEquals(a, 0, 2, 0));\\n+    ASSERT_TRUE(a->RangeEquals(b, 1, 2, 1));\\n+    ASSERT_TRUE(b->RangeEquals(a, 1, 2, 1));\\n+    // Infinity not in tested range\\n+    ASSERT_TRUE(a->RangeEquals(b, 0, 1, 0));\\n+    ASSERT_TRUE(b->RangeEquals(a, 0, 1, 0));\\n+\\n+    // Infinity != non-infinity\\n+    ArrayFromVector<TYPE>(type, {false, true}, {0.5, -infinity}, &a);\\n+    ArrayFromVector<TYPE>(type, {false, true}, {0.5, 0.0}, &b);\\n+    ASSERT_FALSE(a->Equals(b));\\n+    ASSERT_FALSE(b->Equals(a));\\n+    ASSERT_FALSE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_FALSE(b->ApproxEquals(a));\\n+    ASSERT_FALSE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_FALSE(b->ApproxEquals(a, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    // Infinity != Negative infinity\\n+    ArrayFromVector<TYPE>(type, {true, true}, {0.5, -infinity}, &a);\\n+    ArrayFromVector<TYPE>(type, {true, true}, {0.5, infinity}, &b);\\n+    ASSERT_FALSE(a->Equals(b));\\n+    ASSERT_FALSE(b->Equals(a));\\n+    ASSERT_FALSE(a->ApproxEquals(b));\\n+    ASSERT_FALSE(b->ApproxEquals(a));\\n+    ASSERT_FALSE(a->ApproxEquals(b, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    ASSERT_FALSE(b->ApproxEquals(a, EqualOptions().atol(1e-5).nans_equal(nans_equal)));\\n+    // Infinity in tested range\\n+    ASSERT_FALSE(a->RangeEquals(b, 0, 2, 0));\\n+    ASSERT_FALSE(b->RangeEquals(a, 0, 2, 0));\\n+    ASSERT_FALSE(a->RangeEquals(b, 1, 2, 1));\\n+    ASSERT_FALSE(b->RangeEquals(a, 1, 2, 1));\\n+    // Infinity not in tested range\\n+    ASSERT_TRUE(a->RangeEquals(b, 0, 1, 0));\\n+    ASSERT_TRUE(b->RangeEquals(a, 0, 1, 0));\\n+  }\\n+}\\n+\\n TEST(TestPrimitiveAdHoc, FloatingApproxEquals) {\\n   CheckApproxEquals<FloatType>();\\n   CheckApproxEquals<DoubleType>();\\n@@ -1535,6 +1602,11 @@ TEST(TestPrimitiveAdHoc, FloatingNanEquality) {\\n   CheckFloatingNanEquality<DoubleType>();\\n }\\n \\n+TEST(TestPrimitiveAdHoc, FloatingInfinityEquality) {\\n+  CheckFloatingInfinityEquality<FloatType>();\\n+  CheckFloatingInfinityEquality<DoubleType>();\\n+}\\n+\\n // ----------------------------------------------------------------------\\n // FixedSizeBinary tests\\n \"}, {\"sha\": \"e0c23a31eaca0af7c1d16f3ae4031729ff51a7a5\", \"filename\": \"cpp/src/arrow/compare.cc\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/apache/arrow/blob/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa/cpp%2Fsrc%2Farrow%2Fcompare.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/c4f8436e2532524c2a2f9cc26f73c6b7dfababaa/cpp%2Fsrc%2Farrow%2Fcompare.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fcompare.cc?ref=c4f8436e2532524c2a2f9cc26f73c6b7dfababaa\", \"patch\": \"@@ -110,11 +110,12 @@ inline bool FloatingApproxEquals(const NumericArray<ArrowType>& left,\\n \\n   if (opts.nans_equal()) {\\n     return BaseFloatingEquals<ArrowType>(left, right, [epsilon](T x, T y) -> bool {\\n-      return (fabs(x - y) <= epsilon) || (std::isnan(x) && std::isnan(y));\\n+      return (fabs(x - y) <= epsilon) || (x == y) || (std::isnan(x) && std::isnan(y));\\n     });\\n   } else {\\n-    return BaseFloatingEquals<ArrowType>(\\n-        left, right, [epsilon](T x, T y) -> bool { return fabs(x - y) <= epsilon; });\\n+    return BaseFloatingEquals<ArrowType>(left, right, [epsilon](T x, T y) -> bool {\\n+      return (fabs(x - y) <= epsilon) || (x == y);\\n+    });\\n   }\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvYXBhY2hlL2Fycm93L2NvbW1pdHMvOTEyZTJiYjMzNDU1MzZjMjcxNTgwZTNhOWU4OGJhYWZmYjdmMjgzNiI=.json", "commit": "https://api.github.com/repos/apache/arrow/commits/912e2bb3345536c271580e3a9e88baaffb7f2836", "content": "{\"sha\": \"912e2bb3345536c271580e3a9e88baaffb7f2836\", \"node_id\": \"C_kwDOAxgDSdoAKDkxMmUyYmIzMzQ1NTM2YzI3MTU4MGUzYTllODhiYWFmZmI3ZjI4MzY\", \"commit\": {\"author\": {\"name\": \"Joris Van den Bossche\", \"email\": \"jorisvandenbossche@gmail.com\", \"date\": \"2022-04-22T16:11:51Z\"}, \"committer\": {\"name\": \"Joris Van den Bossche\", \"email\": \"jorisvandenbossche@gmail.com\", \"date\": \"2022-04-22T16:11:51Z\"}, \"message\": \"ARROW-16204: [C++][Dataset] Default error existing_data_behaviour for writing dataset ignores a single file\\n\\nCloses #12898 from jorisvandenbossche/ARROW-16204\\n\\nAuthored-by: Joris Van den Bossche <jorisvandenbossche@gmail.com>\\nSigned-off-by: Joris Van den Bossche <jorisvandenbossche@gmail.com>\", \"tree\": {\"sha\": \"90900f218fe935af99ad7ffb5de3912e46bbf430\", \"url\": \"https://api.github.com/repos/apache/arrow/git/trees/90900f218fe935af99ad7ffb5de3912e46bbf430\"}, \"url\": \"https://api.github.com/repos/apache/arrow/git/commits/912e2bb3345536c271580e3a9e88baaffb7f2836\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/apache/arrow/commits/912e2bb3345536c271580e3a9e88baaffb7f2836\", \"html_url\": \"https://github.com/apache/arrow/commit/912e2bb3345536c271580e3a9e88baaffb7f2836\", \"comments_url\": \"https://api.github.com/repos/apache/arrow/commits/912e2bb3345536c271580e3a9e88baaffb7f2836/comments\", \"author\": {\"login\": \"jorisvandenbossche\", \"id\": 1020496, \"node_id\": \"MDQ6VXNlcjEwMjA0OTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1020496?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jorisvandenbossche\", \"html_url\": \"https://github.com/jorisvandenbossche\", \"followers_url\": \"https://api.github.com/users/jorisvandenbossche/followers\", \"following_url\": \"https://api.github.com/users/jorisvandenbossche/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jorisvandenbossche/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jorisvandenbossche/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jorisvandenbossche/orgs\", \"repos_url\": \"https://api.github.com/users/jorisvandenbossche/repos\", \"events_url\": \"https://api.github.com/users/jorisvandenbossche/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jorisvandenbossche/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jorisvandenbossche\", \"id\": 1020496, \"node_id\": \"MDQ6VXNlcjEwMjA0OTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1020496?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jorisvandenbossche\", \"html_url\": \"https://github.com/jorisvandenbossche\", \"followers_url\": \"https://api.github.com/users/jorisvandenbossche/followers\", \"following_url\": \"https://api.github.com/users/jorisvandenbossche/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jorisvandenbossche/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jorisvandenbossche/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jorisvandenbossche/orgs\", \"repos_url\": \"https://api.github.com/users/jorisvandenbossche/repos\", \"events_url\": \"https://api.github.com/users/jorisvandenbossche/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jorisvandenbossche/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"16638a445201e7bf61358c96a6e70ab81df8a001\", \"url\": \"https://api.github.com/repos/apache/arrow/commits/16638a445201e7bf61358c96a6e70ab81df8a001\", \"html_url\": \"https://github.com/apache/arrow/commit/16638a445201e7bf61358c96a6e70ab81df8a001\"}], \"stats\": {\"total\": 18, \"additions\": 15, \"deletions\": 3}, \"files\": [{\"sha\": \"3af44b36a9b3c87b7b66d16e00980f1899b625b5\", \"filename\": \"cpp/src/arrow/dataset/dataset_writer.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/apache/arrow/blob/912e2bb3345536c271580e3a9e88baaffb7f2836/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/912e2bb3345536c271580e3a9e88baaffb7f2836/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer.cc?ref=912e2bb3345536c271580e3a9e88baaffb7f2836\", \"patch\": \"@@ -423,7 +423,7 @@ Status EnsureDestinationValid(const FileSystemDatasetWriteOptions& options) {\\n       // If the path doesn't exist then continue\\n       return Status::OK();\\n     }\\n-    if (maybe_files->size() > 1) {\\n+    if (maybe_files->size() > 0) {\\n       return Status::Invalid(\\n           \\\"Could not write to \\\", options.base_dir,\\n           \\\" as the directory is not empty and existing_data_behavior is to error\\\");\"}, {\"sha\": \"dc23c43a189e3adf8d8704991b3469eb5cd073c1\", \"filename\": \"cpp/src/arrow/dataset/dataset_writer_test.cc\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/apache/arrow/blob/912e2bb3345536c271580e3a9e88baaffb7f2836/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer_test.cc\", \"raw_url\": \"https://github.com/apache/arrow/raw/912e2bb3345536c271580e3a9e88baaffb7f2836/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer_test.cc\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/cpp%2Fsrc%2Farrow%2Fdataset%2Fdataset_writer_test.cc?ref=912e2bb3345536c271580e3a9e88baaffb7f2836\", \"patch\": \"@@ -453,6 +453,18 @@ TEST_F(DatasetWriterTestFixture, ErrOnExistingData) {\\n   ASSERT_RAISES(Invalid, DatasetWriter::Make(write_options_));\\n   AssertEmptyFiles(\\n       {\\\"testdir/chunk-0.arrow\\\", \\\"testdir/chunk-5.arrow\\\", \\\"testdir/blah.txt\\\"});\\n+\\n+  // only a single file in the target directory\\n+  fs::TimePoint mock_now2 = std::chrono::system_clock::now();\\n+  ASSERT_OK_AND_ASSIGN(\\n+      std::shared_ptr<fs::FileSystem> fs2,\\n+      MockFileSystem::Make(\\n+          mock_now2, {::arrow::fs::Dir(\\\"testdir\\\"), fs::File(\\\"testdir/part-0.arrow\\\")}));\\n+  filesystem_ = std::dynamic_pointer_cast<MockFileSystem>(fs2);\\n+  write_options_.filesystem = filesystem_;\\n+  write_options_.base_dir = \\\"testdir\\\";\\n+  ASSERT_RAISES(Invalid, DatasetWriter::Make(write_options_));\\n+  AssertEmptyFiles({\\\"testdir/part-0.arrow\\\"});\\n }\\n \\n }  // namespace internal\"}, {\"sha\": \"cfbfeae737be5805df63835fd1916c0cf67aae53\", \"filename\": \"docs/source/python/dataset.rst\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/apache/arrow/blob/912e2bb3345536c271580e3a9e88baaffb7f2836/docs%2Fsource%2Fpython%2Fdataset.rst\", \"raw_url\": \"https://github.com/apache/arrow/raw/912e2bb3345536c271580e3a9e88baaffb7f2836/docs%2Fsource%2Fpython%2Fdataset.rst\", \"contents_url\": \"https://api.github.com/repos/apache/arrow/contents/docs%2Fsource%2Fpython%2Fdataset.rst?ref=912e2bb3345536c271580e3a9e88baaffb7f2836\", \"patch\": \"@@ -570,7 +570,7 @@ dataset to be partitioned.  For example:\\n     part = ds.partitioning(\\n         pa.schema([(\\\"c\\\", pa.int16())]), flavor=\\\"hive\\\"\\n     )\\n-    ds.write_dataset(table, \\\"sample_dataset\\\", format=\\\"parquet\\\", partitioning=part)\\n+    ds.write_dataset(table, \\\"partitioned_dataset\\\", format=\\\"parquet\\\", partitioning=part)\\n \\n This will create two files.  Half our data will be in the dataset_root/c=1 directory and\\n the other half will be in the dataset_root/c=2 directory.\\n@@ -701,7 +701,7 @@ into memory:\\n     new_part = ds.partitioning(\\n         pa.schema([(\\\"c\\\", pa.int16())]), flavor=None\\n     )\\n-    input_dataset = ds.dataset(\\\"sample_dataset\\\", partitioning=old_part)\\n+    input_dataset = ds.dataset(\\\"partitioned_dataset\\\", partitioning=old_part)\\n     # A scanner can act as an iterator of record batches but you could also receive\\n     # data from the network (e.g. via flight), from your own scanning, or from any\\n     # other method that yields record batches.  In addition, you can pass a dataset\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvU09DSS9zb2NpL2NvbW1pdHMvOWZmMzAxNmMwMDEwOGYyMTc2MGQ0MzhiZmJiNDUxMTg4ODg2Mjc0YyI=.json", "commit": "https://api.github.com/repos/SOCI/soci/commits/9ff3016c00108f21760d438bfbb451188886274c", "content": "{\"sha\": \"9ff3016c00108f21760d438bfbb451188886274c\", \"node_id\": \"MDY6Q29tbWl0MjczODczMTo5ZmYzMDE2YzAwMTA4ZjIxNzYwZDQzOGJmYmI0NTExODg4ODYyNzRj\", \"commit\": {\"author\": {\"name\": \"Davy Durham\", \"email\": \"ddurham@bomgar.com\", \"date\": \"2020-05-12T23:47:56Z\"}, \"committer\": {\"name\": \"Vadim Zeitlin\", \"email\": \"vz-soci@zeitlins.org\", \"date\": \"2021-04-07T00:53:54Z\"}, \"message\": \"Fix use()-ing custom types with an explicitly null indicator\\n\\nThis fixes a bug caused by calling that soci::type_conversion::to_base()\\nunconditionally, even if the caller explicitly passed i_null for the\\nindicator, which is unnecessary work, but worse, actually resulted in\\nwrong data being inserted into the database when using boost::optional\\nconversion (and other similar custom type conversions) as it would set\\nthe ind argument to i_ok, overriding the caller's explicit i_null passed\\nto use().\\n\\nAdd (previously) failing test which now passes for most backends.\", \"tree\": {\"sha\": \"1e7de575c595e9dff3f05f36eb83b40f6e781d83\", \"url\": \"https://api.github.com/repos/SOCI/soci/git/trees/1e7de575c595e9dff3f05f36eb83b40f6e781d83\"}, \"url\": \"https://api.github.com/repos/SOCI/soci/git/commits/9ff3016c00108f21760d438bfbb451188886274c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/SOCI/soci/commits/9ff3016c00108f21760d438bfbb451188886274c\", \"html_url\": \"https://github.com/SOCI/soci/commit/9ff3016c00108f21760d438bfbb451188886274c\", \"comments_url\": \"https://api.github.com/repos/SOCI/soci/commits/9ff3016c00108f21760d438bfbb451188886274c/comments\", \"author\": null, \"committer\": {\"login\": \"vadz\", \"id\": 146917, \"node_id\": \"MDQ6VXNlcjE0NjkxNw==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/146917?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vadz\", \"html_url\": \"https://github.com/vadz\", \"followers_url\": \"https://api.github.com/users/vadz/followers\", \"following_url\": \"https://api.github.com/users/vadz/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vadz/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vadz/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vadz/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vadz/orgs\", \"repos_url\": \"https://api.github.com/users/vadz/repos\", \"events_url\": \"https://api.github.com/users/vadz/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vadz/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f8044b88e963409641aa1bfe8a92c31a03550cd8\", \"url\": \"https://api.github.com/repos/SOCI/soci/commits/f8044b88e963409641aa1bfe8a92c31a03550cd8\", \"html_url\": \"https://github.com/SOCI/soci/commit/f8044b88e963409641aa1bfe8a92c31a03550cd8\"}], \"stats\": {\"total\": 95, \"additions\": 95, \"deletions\": 0}, \"files\": [{\"sha\": \"52b866fe6a703b29f055a319781dbd1a5c401bea\", \"filename\": \"include/soci/type-conversion.h\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/SOCI/soci/blob/9ff3016c00108f21760d438bfbb451188886274c/include%2Fsoci%2Ftype-conversion.h\", \"raw_url\": \"https://github.com/SOCI/soci/raw/9ff3016c00108f21760d438bfbb451188886274c/include%2Fsoci%2Ftype-conversion.h\", \"contents_url\": \"https://api.github.com/repos/SOCI/soci/contents/include%2Fsoci%2Ftype-conversion.h?ref=9ff3016c00108f21760d438bfbb451188886274c\", \"patch\": \"@@ -147,6 +147,17 @@ class conversion_use_type\\n \\n     void convert_to_base() SOCI_OVERRIDE\\n     {\\n+        if (&ind_ != &(base_value_holder<T>::ownInd_) && ind_ == i_null) {\\n+            // An indicator was explicitly passed to use(val, ind), and it was i_null.\\n+            // Therefore, NULL should be put into the DB, and there is no reason to\\n+            // convert the value.\\n+            // Furthermore, if ind_ were ownInd_ itself, and if a prepared statement\\n+            // were repeatedly executed, and if we were to call the user-supplied impl,\\n+            // and that impl were to set its value to i_null, then it will never get set\\n+            // back to i_ok before the next execution.\\n+            return;\\n+        }\\n+\\n         type_conversion<T>::to_base(value_,\\n             base_value_holder<T>::val_, ind_);\\n     }\"}, {\"sha\": \"0284b3dddcf8ea6d6dd01de5c2acb9f5b349c5b7\", \"filename\": \"tests/common-tests.h\", \"status\": \"modified\", \"additions\": 84, \"deletions\": 0, \"changes\": 84, \"blob_url\": \"https://github.com/SOCI/soci/blob/9ff3016c00108f21760d438bfbb451188886274c/tests%2Fcommon-tests.h\", \"raw_url\": \"https://github.com/SOCI/soci/raw/9ff3016c00108f21760d438bfbb451188886274c/tests%2Fcommon-tests.h\", \"contents_url\": \"https://api.github.com/repos/SOCI/soci/contents/tests%2Fcommon-tests.h?ref=9ff3016c00108f21760d438bfbb451188886274c\", \"patch\": \"@@ -3588,6 +3588,90 @@ TEST_CASE_METHOD(common_tests, \\\"NULL with optional\\\", \\\"[core][boost][null]\\\")\\n             CHECK((*pos).is_initialized());\\n             CHECK(13 == (*pos).get());\\n         }\\n+\\n+        // inserting using an i_null indicator with a populated boost::optional (should insert null per docs)\\n+\\n+        {\\n+            auto_table_creator tableCreator(tc_.table_creator_1(sql));\\n+\\n+            {\\n+                indicator ind = i_null;\\n+                boost::optional<int> v1(10);\\n+                sql << \\\"insert into soci_test(id, val) values(1, :val)\\\", use(v1, ind);\\n+            }\\n+\\n+            // verify the value is fetched correctly as null\\n+            {\\n+                indicator ind;\\n+                boost::optional<int> opt;\\n+\\n+                ind = (indicator)-1;\\n+                opt = 0;\\n+                sql << \\\"select val from soci_test where id = 1\\\", into(opt, ind);\\n+                CHECK(ind == i_null);\\n+                CHECK(!opt.is_initialized());\\n+            }\\n+        }\\n+\\n+        // prepared statement inserting non-null and null values alternatively (without passing an explicit indicator)\\n+\\n+        {\\n+            auto_table_creator tableCreator(tc_.table_creator_1(sql));\\n+\\n+            {\\n+            #if 0 // non-prepared method\\n+                boost::optional<int> v1(10);\\n+                sql << \\\"insert into soci_test(id, val) values(1, :val)\\\", use(v1);\\n+                boost::optional<int> v2; // null\\n+                sql << \\\"insert into soci_test(id, val) values(2, :val)\\\", use(v2);\\n+                boost::optional<int> v3(11);\\n+                sql << \\\"insert into soci_test(id, val) values(3, :val)\\\", use(v3);\\n+            #else\\n+                int id;\\n+                boost::optional<int> val;\\n+                statement st = (sql.prepare\\n+                    << \\\"insert into soci_test(id, val) values (:id, :val)\\\", use(id), use(val));\\n+\\n+                id = 1;\\n+                val = 10;\\n+                st.execute(true);\\n+\\n+                id = 2;\\n+                val = boost::optional<int>();\\n+                st.execute(true);\\n+\\n+                id = 3;\\n+                val = 11;\\n+                st.execute(true);\\n+            #endif\\n+            }\\n+\\n+            // verify values are fetched correctly\\n+            {\\n+                indicator ind;\\n+                boost::optional<int> opt;\\n+\\n+                ind = (indicator)-1;\\n+                opt = 0;\\n+                sql << \\\"select val from soci_test where id = 1\\\", into(opt, ind);\\n+                CHECK(ind == i_ok);\\n+                CHECK(opt.is_initialized());\\n+                CHECK(opt.get() == 10);\\n+\\n+                ind = (indicator)-1;\\n+                opt = 0;\\n+                sql << \\\"select val from soci_test where id = 2\\\", into(opt, ind);\\n+                CHECK(ind == i_null);\\n+                CHECK(!opt.is_initialized());\\n+\\n+                ind = (indicator)-1;\\n+                opt = 0;\\n+                sql << \\\"select val from soci_test where id = 3\\\", into(opt, ind);\\n+                CHECK(ind == i_ok);\\n+                CHECK(opt.is_initialized());\\n+                CHECK(opt.get() == 11);\\n+            }\\n+        }\\n     }\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvNmE5YmU2MjdjNzYwY2YxZWZhNDNkMTU1ZDRlNmVlNWU4MDFkZWJhMyI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/6a9be627c760cf1efa43d155d4e6ee5e801deba3", "content": "{\"sha\": \"6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6NmE5YmU2MjdjNzYwY2YxZWZhNDNkMTU1ZDRlNmVlNWU4MDFkZWJhMw==\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2019-10-18T13:53:29Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2019-10-18T13:53:29Z\"}, \"message\": \"Keep NOPs when comparing with original binary (#2931)\\n\\nWe have a check that ensures that the optimizer did not change the\\r\\nbinary when it says that it did not.  However, when the binary is\\r\\nconverted back to a binary, we made a decision to remove OpNop\\r\\ninstructions.  This means that any spv file that contains a NOP\\r\\noriginally will fail this check.\\r\\n\\r\\nTo get around this, we convert the module to a second binary that keeps\\r\\nthe OpNop instructions.  That binary is compared against the original.\\r\\n\\r\\nFixes https://crbug.com/1010191\", \"tree\": {\"sha\": \"39cadde88b8fa0894268fcf75cf79ab4e1c077ef\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/39cadde88b8fa0894268fcf75cf79ab4e1c077ef\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJdqcPZCRBK7hj4Ov3rIwAAdHIIAJQXaZD+EA9E7eOy6L5WcYUl\\nDt39nmV7S+UImjJGxJFgTUKCFl7quGWNEZIrbl1hSmlR3wiHNHeq8/ToEz80nER7\\nMsGK4y3Nyf4kn0/6AxSpc7WPEmCAVqFMbCTFZKzU5DSy9yQsgQu5P5iutVW1eyWU\\nEPOeXFy4tKyONZ717Ce/0egNde2z8G33JREee71SK2yWRrGCDY41qOQS9gYHyr4S\\nivtsf0EQpNwQs/OUohzvHOUB89l59N6QGC4sdlswuujQyA/Fc5pJnSc8pNTS5H3f\\nyhUm1TA9oFdLhNwq7Zzhf2uIZ9TnwdcH/OZBqJzj0h94BslsGm/sN5vW/mliWlE=\\n=ZvBQ\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 39cadde88b8fa0894268fcf75cf79ab4e1c077ef\\nparent 2a3cbe7c3f8254aad3fda82a69014f7cba19585e\\nauthor Steven Perron <stevenperron@google.com> 1571406809 -0400\\ncommitter GitHub <noreply@github.com> 1571406809 -0400\\n\\nKeep NOPs when comparing with original binary (#2931)\\n\\nWe have a check that ensures that the optimizer did not change the\\r\\nbinary when it says that it did not.  However, when the binary is\\r\\nconverted back to a binary, we made a decision to remove OpNop\\r\\ninstructions.  This means that any spv file that contains a NOP\\r\\noriginally will fail this check.\\r\\n\\r\\nTo get around this, we convert the module to a second binary that keeps\\r\\nthe OpNop instructions.  That binary is compared against the original.\\r\\n\\r\\nFixes https://crbug.com/1010191\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/6a9be627c760cf1efa43d155d4e6ee5e801deba3/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2a3cbe7c3f8254aad3fda82a69014f7cba19585e\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/2a3cbe7c3f8254aad3fda82a69014f7cba19585e\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/2a3cbe7c3f8254aad3fda82a69014f7cba19585e\"}], \"stats\": {\"total\": 55, \"additions\": 53, \"deletions\": 2}, \"files\": [{\"sha\": \"b9db4c6c8a0944fc7bae0f995f424baeaa618f09\", \"filename\": \"source/opt/optimizer.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/6a9be627c760cf1efa43d155d4e6ee5e801deba3/source%2Fopt%2Foptimizer.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/6a9be627c760cf1efa43d155d4e6ee5e801deba3/source%2Fopt%2Foptimizer.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Foptimizer.cpp?ref=6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"patch\": \"@@ -565,8 +565,11 @@ bool Optimizer::Run(const uint32_t* original_binary,\\n \\n #ifndef NDEBUG\\n   if (status == opt::Pass::Status::SuccessWithoutChange) {\\n-    auto changed = optimized_binary->size() != original_binary_size ||\\n-                   memcmp(optimized_binary->data(), original_binary,\\n+    std::vector<uint32_t> optimized_binary_with_nop;\\n+    context->module()->ToBinary(&optimized_binary_with_nop,\\n+                                /* skip_nop = */ false);\\n+    auto changed = optimized_binary_with_nop.size() != original_binary_size ||\\n+                   memcmp(optimized_binary_with_nop.data(), original_binary,\\n                           original_binary_size) != 0;\\n     assert(!changed &&\\n            \\\"Binary unexpectedly changed despite optimizer saying there was no \\\"\"}, {\"sha\": \"5c0707d73f1fefba02981a3eb1a39bf1cf946b0f\", \"filename\": \"test/opt/optimizer_test.cpp\", \"status\": \"modified\", \"additions\": 48, \"deletions\": 0, \"changes\": 48, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/6a9be627c760cf1efa43d155d4e6ee5e801deba3/test%2Fopt%2Foptimizer_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/6a9be627c760cf1efa43d155d4e6ee5e801deba3/test%2Fopt%2Foptimizer_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Foptimizer_test.cpp?ref=6a9be627c760cf1efa43d155d4e6ee5e801deba3\", \"patch\": \"@@ -744,6 +744,54 @@ INSTANTIATE_TEST_SUITE_P(\\n          // pass\\n          \\\"compact-ids\\\"}}));\\n \\n+TEST(Optimizer, RemoveNop) {\\n+  // Test that OpNops are removed even if no optimizations are run.\\n+  const std::string before = R\\\"(OpCapability Shader\\n+OpCapability Linkage\\n+OpMemoryModel Logical GLSL450\\n+%void = OpTypeVoid\\n+%2 = OpTypeFunction %void\\n+%3 = OpFunction %void None %2\\n+%4 = OpLabel\\n+OpNop\\n+OpReturn\\n+OpFunctionEnd\\n+)\\\";\\n+\\n+  const std::string after = R\\\"(OpCapability Shader\\n+OpCapability Linkage\\n+OpMemoryModel Logical GLSL450\\n+%void = OpTypeVoid\\n+%2 = OpTypeFunction %void\\n+%3 = OpFunction %void None %2\\n+%4 = OpLabel\\n+OpReturn\\n+OpFunctionEnd\\n+)\\\";\\n+\\n+  std::vector<uint32_t> binary;\\n+  {\\n+    SpirvTools tools(SPV_ENV_VULKAN_1_1);\\n+    tools.Assemble(before, &binary);\\n+  }\\n+\\n+  Optimizer opt(SPV_ENV_VULKAN_1_1);\\n+\\n+  std::vector<uint32_t> optimized;\\n+  class ValidatorOptions validator_options;\\n+  ASSERT_TRUE(opt.Run(binary.data(), binary.size(), &optimized,\\n+                      validator_options, true))\\n+      << before << \\\"\\\\n\\\";\\n+  std::string disassembly;\\n+  {\\n+    SpirvTools tools(SPV_ENV_WEBGPU_0);\\n+    tools.Disassemble(optimized.data(), optimized.size(), &disassembly);\\n+  }\\n+\\n+  EXPECT_EQ(after, disassembly)\\n+      << \\\"Was expecting the OpNop to have been removed.\\\";\\n+}\\n+\\n }  // namespace\\n }  // namespace opt\\n }  // namespace spvtools\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvOTQ4NTc3YzVkZjNhNmYwZDMzN2FiNDE3YjI2ZWRjYzM0NGViNjVlMiI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/948577c5df3a6f0d337ab417b26edcc344eb65e2", "content": "{\"sha\": \"948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6OTQ4NTc3YzVkZjNhNmYwZDMzN2FiNDE3YjI2ZWRjYzM0NGViNjVlMg==\", \"commit\": {\"author\": {\"name\": \"Vasyl Teliman\", \"email\": \"vasniktel@gmail.com\", \"date\": \"2020-08-13T13:09:57Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-08-13T13:09:57Z\"}, \"message\": \"Fix the bug (#3680)\", \"tree\": {\"sha\": \"8a890658290d98401c799e69473a60c94d1548f7\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/8a890658290d98401c799e69473a60c94d1548f7\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJfNTulCRBK7hj4Ov3rIwAAdHIIAESlGzJNhhAepeGv0ZFofYEZ\\nDW1O1Os/p+58m6l9c3Be7bMDOzYG2MxGjUfq0p87B3CM97ZVWrGL2YksvDW75iyV\\nYmr9RlBwMYTXxKAIc2+Mf/S30vd+wEtY+IGjFx5wGWeY4NHp7JfMTCsU/MZZ0gCr\\n/KVX1jN+BL0stvUrlUed8SSMDS6hDbP4mxiRLjJ5Wf02GYsjVOI2KtpDPUXOfNJB\\nDUTijk+3oEXuUJ49VTMPYVfimYHZtilr/BY5ssPKLjV6aA7e7Y5N/Azgp2wvdSmJ\\nNXd/RbrbSrDvRN8D8F1d2QBmcMxVvpLUOFyiH6C+w+uyuprnu/llmrrLISUL6Oo=\\n=KsM5\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 8a890658290d98401c799e69473a60c94d1548f7\\nparent df859f77dab392dbc78c213d36ba19216b3d068e\\nauthor Vasyl Teliman <vasniktel@gmail.com> 1597324197 +0300\\ncommitter GitHub <noreply@github.com> 1597324197 -0400\\n\\nFix the bug (#3680)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/948577c5df3a6f0d337ab417b26edcc344eb65e2/comments\", \"author\": {\"login\": \"Vasniktel\", \"id\": 23561899, \"node_id\": \"MDQ6VXNlcjIzNTYxODk5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/23561899?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Vasniktel\", \"html_url\": \"https://github.com/Vasniktel\", \"followers_url\": \"https://api.github.com/users/Vasniktel/followers\", \"following_url\": \"https://api.github.com/users/Vasniktel/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Vasniktel/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Vasniktel/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Vasniktel/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Vasniktel/orgs\", \"repos_url\": \"https://api.github.com/users/Vasniktel/repos\", \"events_url\": \"https://api.github.com/users/Vasniktel/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Vasniktel/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"df859f77dab392dbc78c213d36ba19216b3d068e\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/df859f77dab392dbc78c213d36ba19216b3d068e\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/df859f77dab392dbc78c213d36ba19216b3d068e\"}], \"stats\": {\"total\": 15, \"additions\": 13, \"deletions\": 2}, \"files\": [{\"sha\": \"010eec9c1acb32bb2bdeb8498a71e4a608949fec\", \"filename\": \"source/opt/folding_rules.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/948577c5df3a6f0d337ab417b26edcc344eb65e2/source%2Fopt%2Ffolding_rules.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/948577c5df3a6f0d337ab417b26edcc344eb65e2/source%2Fopt%2Ffolding_rules.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Ffolding_rules.cpp?ref=948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"patch\": \"@@ -1467,7 +1467,7 @@ FoldingRule CompositeConstructFeedingExtract() {\\n             type_mgr->GetType(element_def->type_id())->AsVector();\\n         if (element_type) {\\n           uint32_t vector_size = element_type->element_count();\\n-          if (vector_size < element_index) {\\n+          if (vector_size <= element_index) {\\n             // The element we want comes after this vector.\\n             element_index -= vector_size;\\n           } else {\"}, {\"sha\": \"bb6098ccc1e2c92f6a69cc2190707a8abdf0e94d\", \"filename\": \"test/opt/fold_test.cpp\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 1, \"changes\": 13, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/948577c5df3a6f0d337ab417b26edcc344eb65e2/test%2Fopt%2Ffold_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/948577c5df3a6f0d337ab417b26edcc344eb65e2/test%2Fopt%2Ffold_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Ffold_test.cpp?ref=948577c5df3a6f0d337ab417b26edcc344eb65e2\", \"patch\": \"@@ -3464,7 +3464,18 @@ ::testing::Values(\\n             \\\"%3 = OpCompositeExtract %float %2 4\\\\n\\\" +\\n             \\\"OpReturn\\\\n\\\" +\\n             \\\"OpFunctionEnd\\\",\\n-        3, 0)\\n+        3, 0),\\n+    // Test case 14: https://github.com/KhronosGroup/SPIRV-Tools/issues/3631\\n+    // Extract the component right after the vector constituent.\\n+    InstructionFoldingCase<uint32_t>(\\n+        Header() + \\\"%main = OpFunction %void None %void_func\\\\n\\\" +\\n+            \\\"%main_lab = OpLabel\\\\n\\\" +\\n+            \\\"%2 = OpCompositeConstruct %v2int %int_0 %int_0\\\\n\\\" +\\n+            \\\"%3 = OpCompositeConstruct %v4int %2 %100 %int_0\\\\n\\\" +\\n+            \\\"%4 = OpCompositeExtract %int %3 2\\\\n\\\" +\\n+            \\\"OpReturn\\\\n\\\" +\\n+            \\\"OpFunctionEnd\\\",\\n+        4, INT_0_ID)\\n ));\\n \\n INSTANTIATE_TEST_SUITE_P(CompositeConstructFoldingTest, GeneralInstructionFoldingTest,\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvNTQzODU0NThjYTJmN2E3YjA2Njk5ZTQ0MTgyMjc1M2RiYzJkMDE4ZCI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/54385458ca2f7a7b06699e441822753dbc2d018d", "content": "{\"sha\": \"54385458ca2f7a7b06699e441822753dbc2d018d\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6NTQzODU0NThjYTJmN2E3YjA2Njk5ZTQ0MTgyMjc1M2RiYzJkMDE4ZA==\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2019-11-27T14:45:17Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2019-11-27T14:45:17Z\"}, \"message\": \"Handle unreachable block when computing register pressure (#3070)\\n\\nFixes #3053\", \"tree\": {\"sha\": \"77305db788a72f0e3fa37fcb23d905574159644d\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/77305db788a72f0e3fa37fcb23d905574159644d\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/54385458ca2f7a7b06699e441822753dbc2d018d\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJd3ov+CRBK7hj4Ov3rIwAAdHIIAK+ajb+kcJGpCr8V0qCV1EIv\\nqGt7XnJe50NKGwjQfIFmXEeNGS60F5Lr2PZQAxag0l+ej2WWag/Nc0WCIIZvrPiz\\nIQl6f3eGrW8I5hrB4FFkFxaqdUCHLCPGTEIShmWnGd/lc4EAfaJe0lBB/b0VHx01\\nPM8On5w70BOT65fwI68abTDqDqmT6iL8IBs4mavyQ4EdrnQf7sJxt+QAqIWmva+M\\napmAJ9ootVhsxp5dLPCRahfuOI6lCXCkmceascFDii/CiwKh3tIyW1mLOInxRjmr\\nyBJdKt/DNMfFchnmtp2BHrYNTU1MQoH0NANlJPK4H+L3C+J30HnMZWOiuOz17A4=\\n=WxEz\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 77305db788a72f0e3fa37fcb23d905574159644d\\nparent 868ca3954c2ee1aad3b52c6eb8f45e09d1d35995\\nauthor Steven Perron <stevenperron@google.com> 1574865917 -0500\\ncommitter GitHub <noreply@github.com> 1574865917 -0500\\n\\nHandle unreachable block when computing register pressure (#3070)\\n\\nFixes #3053\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/54385458ca2f7a7b06699e441822753dbc2d018d\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/54385458ca2f7a7b06699e441822753dbc2d018d\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/54385458ca2f7a7b06699e441822753dbc2d018d/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"868ca3954c2ee1aad3b52c6eb8f45e09d1d35995\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/868ca3954c2ee1aad3b52c6eb8f45e09d1d35995\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/868ca3954c2ee1aad3b52c6eb8f45e09d1d35995\"}], \"stats\": {\"total\": 53, \"additions\": 50, \"deletions\": 3}, \"files\": [{\"sha\": \"cb2467441dd97c95e6ebdeac525f04cd66682a51\", \"filename\": \"source/opt/register_pressure.cpp\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 3, \"changes\": 13, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/54385458ca2f7a7b06699e441822753dbc2d018d/source%2Fopt%2Fregister_pressure.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/54385458ca2f7a7b06699e441822753dbc2d018d/source%2Fopt%2Fregister_pressure.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Fregister_pressure.cpp?ref=54385458ca2f7a7b06699e441822753dbc2d018d\", \"patch\": \"@@ -78,9 +78,16 @@ class ComputeRegisterLiveness {\\n   //   - Second, walk loop forest to propagate registers crossing back-edges\\n   //   (add iterative values into the liveness set).\\n   void Compute() {\\n-    cfg_.ForEachBlockInPostOrder(&*function_->begin(), [this](BasicBlock* bb) {\\n-      ComputePartialLiveness(bb);\\n-    });\\n+    for (BasicBlock& start_bb : *function_) {\\n+      if (reg_pressure_->Get(start_bb.id()) != nullptr) {\\n+        continue;\\n+      }\\n+      cfg_.ForEachBlockInPostOrder(&start_bb, [this](BasicBlock* bb) {\\n+        if (reg_pressure_->Get(bb->id()) == nullptr) {\\n+          ComputePartialLiveness(bb);\\n+        }\\n+      });\\n+    }\\n     DoLoopLivenessUnification();\\n     EvaluateRegisterRequirements();\\n   }\"}, {\"sha\": \"7cb210f1e5dd1d42f39b57939435437348fb012b\", \"filename\": \"test/opt/register_liveness.cpp\", \"status\": \"modified\", \"additions\": 40, \"deletions\": 0, \"changes\": 40, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/54385458ca2f7a7b06699e441822753dbc2d018d/test%2Fopt%2Fregister_liveness.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/54385458ca2f7a7b06699e441822753dbc2d018d/test%2Fopt%2Fregister_liveness.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Fregister_liveness.cpp?ref=54385458ca2f7a7b06699e441822753dbc2d018d\", \"patch\": \"@@ -1277,6 +1277,46 @@ TEST_F(PassClassTest, FissionSimulation) {\\n   }\\n }\\n \\n+// Test that register liveness does not fail when there is an unreachable block.\\n+// We are not testing if the liveness is computed correctly because the specific\\n+// results do not matter for unreachable blocks.\\n+TEST_F(PassClassTest, RegisterLivenessWithUnreachableBlock) {\\n+  const std::string text = R\\\"(\\n+               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint Fragment %2 \\\"main\\\"\\n+               OpExecutionMode %2 OriginLowerLeft\\n+               OpSource GLSL 330\\n+               OpSourceExtension \\\"GL_ARB_shading_language_420pack\\\"\\n+       %void = OpTypeVoid\\n+          %4 = OpTypeFunction %void\\n+          %2 = OpFunction %void None %4\\n+          %5 = OpLabel\\n+               OpBranch %6\\n+          %6 = OpLabel\\n+               OpLoopMerge %7 %8 None\\n+               OpBranch %9\\n+          %9 = OpLabel\\n+               OpBranch %7\\n+          %8 = OpLabel\\n+               OpBranch %6\\n+          %7 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\\n+  )\\\";\\n+\\n+  std::unique_ptr<IRContext> context =\\n+      BuildModule(SPV_ENV_UNIVERSAL_1_1, nullptr, text,\\n+                  SPV_TEXT_TO_BINARY_OPTION_PRESERVE_NUMERIC_IDS);\\n+  Module* module = context->module();\\n+  EXPECT_NE(nullptr, module) << \\\"Assembling failed for shader:\\\\n\\\"\\n+                             << text << std::endl;\\n+  Function* f = &*module->begin();\\n+  LivenessAnalysis* liveness_analysis = context->GetLivenessAnalysis();\\n+  liveness_analysis->Get(f);\\n+}\\n+\\n }  // namespace\\n }  // namespace opt\\n }  // namespace spvtools\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvYWIzY2RjYWVmNTZlOTMxMWYyOTllZWJmZDA0NGY5NjQ2MTAwYzlkYyI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/ab3cdcaef56e9311f299eebfd044f9646100c9dc", "content": "{\"sha\": \"ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6YWIzY2RjYWVmNTZlOTMxMWYyOTllZWJmZDA0NGY5NjQ2MTAwYzlkYw==\", \"commit\": {\"author\": {\"name\": \"alan-baker\", \"email\": \"alanbaker@google.com\", \"date\": \"2019-11-12T18:41:38Z\"}, \"committer\": {\"name\": \"David Neto\", \"email\": \"dneto@google.com\", \"date\": \"2019-11-12T18:41:38Z\"}, \"message\": \"Fix operand access of composite in upgrade memory model (#3021)\\n\\nFixes #2992\\r\\n\\r\\n* Accessing aggregate subtype used the wrong operand\\r\\n* Added a test\", \"tree\": {\"sha\": \"9ae193f1da1777c217ee37f87e12d311eeb93941\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/9ae193f1da1777c217ee37f87e12d311eeb93941\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/ab3cdcaef56e9311f299eebfd044f9646100c9dc/comments\", \"author\": {\"login\": \"alan-baker\", \"id\": 33432579, \"node_id\": \"MDQ6VXNlcjMzNDMyNTc5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/33432579?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/alan-baker\", \"html_url\": \"https://github.com/alan-baker\", \"followers_url\": \"https://api.github.com/users/alan-baker/followers\", \"following_url\": \"https://api.github.com/users/alan-baker/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/alan-baker/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/alan-baker/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/alan-baker/subscriptions\", \"organizations_url\": \"https://api.github.com/users/alan-baker/orgs\", \"repos_url\": \"https://api.github.com/users/alan-baker/repos\", \"events_url\": \"https://api.github.com/users/alan-baker/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/alan-baker/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dneto0\", \"id\": 13054574, \"node_id\": \"MDQ6VXNlcjEzMDU0NTc0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/13054574?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dneto0\", \"html_url\": \"https://github.com/dneto0\", \"followers_url\": \"https://api.github.com/users/dneto0/followers\", \"following_url\": \"https://api.github.com/users/dneto0/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dneto0/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dneto0/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dneto0/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dneto0/orgs\", \"repos_url\": \"https://api.github.com/users/dneto0/repos\", \"events_url\": \"https://api.github.com/users/dneto0/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dneto0/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1a18d491f2a45b90faf911f50103392e2d5f32b5\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/1a18d491f2a45b90faf911f50103392e2d5f32b5\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/1a18d491f2a45b90faf911f50103392e2d5f32b5\"}], \"stats\": {\"total\": 35, \"additions\": 34, \"deletions\": 1}, \"files\": [{\"sha\": \"ab252059fac417db13015114183d236c3a7ddc19\", \"filename\": \"source/opt/upgrade_memory_model.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/ab3cdcaef56e9311f299eebfd044f9646100c9dc/source%2Fopt%2Fupgrade_memory_model.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/ab3cdcaef56e9311f299eebfd044f9646100c9dc/source%2Fopt%2Fupgrade_memory_model.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Fupgrade_memory_model.cpp?ref=ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"patch\": \"@@ -429,7 +429,7 @@ std::pair<bool, bool> UpgradeMemoryModel::CheckType(\\n     } else {\\n       assert(spvOpcodeIsComposite(element_inst->opcode()));\\n       element_inst = context()->get_def_use_mgr()->GetDef(\\n-          element_inst->GetSingleWordInOperand(1u));\\n+          element_inst->GetSingleWordInOperand(0u));\\n     }\\n   }\\n \"}, {\"sha\": \"7f64ffd7cfa4795deadb7b9d869e363134f4f149\", \"filename\": \"test/opt/upgrade_memory_model_test.cpp\", \"status\": \"modified\", \"additions\": 33, \"deletions\": 0, \"changes\": 33, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/ab3cdcaef56e9311f299eebfd044f9646100c9dc/test%2Fopt%2Fupgrade_memory_model_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/ab3cdcaef56e9311f299eebfd044f9646100c9dc/test%2Fopt%2Fupgrade_memory_model_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Fupgrade_memory_model_test.cpp?ref=ab3cdcaef56e9311f299eebfd044f9646100c9dc\", \"patch\": \"@@ -2236,4 +2236,37 @@ OpFunctionEnd\\n   SinglePassRunAndMatch<opt::UpgradeMemoryModel>(text, true);\\n }\\n \\n+TEST_F(UpgradeMemoryModelTest, CoherentStructMemberInArray) {\\n+  const std::string text = R\\\"(\\n+; CHECK-NOT: OpMemberDecorate\\n+; CHECK: [[int:%[a-zA-Z0-9_]+]] = OpTypeInt 32 0\\n+; CHECK: [[device:%[a-zA-Z0-9_]+]] = OpConstant [[int]] 1\\n+; CHECK: OpLoad [[int]] {{.*}} MakePointerVisible|NonPrivatePointer\\n+OpCapability Shader\\n+OpCapability Linkage\\n+OpMemoryModel Logical GLSL450\\n+OpMemberDecorate %inner 1 Coherent\\n+%void = OpTypeVoid\\n+%int = OpTypeInt 32 0\\n+%int_0 = OpConstant %int 0\\n+%int_1 = OpConstant %int 1\\n+%int_4 = OpConstant %int 4\\n+%inner = OpTypeStruct %int %int\\n+%array = OpTypeArray %inner %int_4\\n+%struct = OpTypeStruct %array\\n+%ptr_ssbo_struct = OpTypePointer StorageBuffer %struct\\n+%ptr_ssbo_int = OpTypePointer StorageBuffer %int\\n+%ssbo_var = OpVariable %ptr_ssbo_struct StorageBuffer\\n+%void_fn = OpTypeFunction %void\\n+%func = OpFunction %void None %void_fn\\n+%entry = OpLabel\\n+%gep = OpAccessChain %ptr_ssbo_int %ssbo_var %int_0 %int_0 %int_1\\n+%ld = OpLoad %int %gep\\n+OpReturn\\n+OpFunctionEnd\\n+)\\\";\\n+\\n+  SinglePassRunAndMatch<opt::UpgradeMemoryModel>(text, true);\\n+}\\n+\\n }  // namespace\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvMjg2YjMwOTVkZDE4N2RhNzQ3Zjg1YmFmOWNlMzEyMDU4MDU2NWRmMCI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/286b3095dd187da747f85baf9ce3120580565df0", "content": "{\"sha\": \"286b3095dd187da747f85baf9ce3120580565df0\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6Mjg2YjMwOTVkZDE4N2RhNzQ3Zjg1YmFmOWNlMzEyMDU4MDU2NWRmMA==\", \"commit\": {\"author\": {\"name\": \"Diego Novillo\", \"email\": \"dnovillo@google.com\", \"date\": \"2020-09-14T13:00:38Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-09-14T13:00:38Z\"}, \"message\": \"Properly mark IR changed if instruction folder creates more than one constant. (#3799)\\n\\nIn #3636, I missed that the instruction folder may create more than a\\r\\nsingle constant per call.  Since CCP was only checking whether one\\r\\nconstant had been created after folding, it was wrongly thinking that\\r\\nthe IR had not changed.\\r\\n\\r\\nFixes #3738.\", \"tree\": {\"sha\": \"b363467e4a01e1b9591aac927078bf54df1c85fa\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/b363467e4a01e1b9591aac927078bf54df1c85fa\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/286b3095dd187da747f85baf9ce3120580565df0\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJfX2l2CRBK7hj4Ov3rIwAAdHIIAIJBDgsxqeTRbcw3vXyeEHyU\\np4iITHIpzvXT2nGeUgab5HydYmDxzbOwqMLly02qQjVAoKmXwxcpD57kiR0jdoHp\\n3LdWT8WpShEgzYxTUtGlEkk6HylV9PbQwDgE0nbzHCy9P2WDByB0iLu8BD894Qmi\\nNr8s448IA+89RNthof91ouB8cEdmkdMzQ5BsAI5DY/WJBeVjtG64hrST0ScL6C6p\\n6FSI4dSDDTnPYUJvTmV1ndxO6jJZkywu22PpaCZqypM3iibPopRMpr4KuPs5jiuO\\nqDdbuKrATJXfD/g9gxTxR7EJdHYCnZkhpfEwj1finWZ4hnVVzSVqvZm4Q9eO/0c=\\n=Pf0B\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree b363467e4a01e1b9591aac927078bf54df1c85fa\\nparent 726af6f78f80988271c8b558ae9cc84fa5a65016\\nauthor Diego Novillo <dnovillo@google.com> 1600088438 -0400\\ncommitter GitHub <noreply@github.com> 1600088438 -0400\\n\\nProperly mark IR changed if instruction folder creates more than one constant. (#3799)\\n\\nIn #3636, I missed that the instruction folder may create more than a\\r\\nsingle constant per call.  Since CCP was only checking whether one\\r\\nconstant had been created after folding, it was wrongly thinking that\\r\\nthe IR had not changed.\\r\\n\\r\\nFixes #3738.\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/286b3095dd187da747f85baf9ce3120580565df0\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/286b3095dd187da747f85baf9ce3120580565df0\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/286b3095dd187da747f85baf9ce3120580565df0/comments\", \"author\": {\"login\": \"dnovillo\", \"id\": 7295335, \"node_id\": \"MDQ6VXNlcjcyOTUzMzU=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7295335?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dnovillo\", \"html_url\": \"https://github.com/dnovillo\", \"followers_url\": \"https://api.github.com/users/dnovillo/followers\", \"following_url\": \"https://api.github.com/users/dnovillo/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dnovillo/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dnovillo/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dnovillo/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dnovillo/orgs\", \"repos_url\": \"https://api.github.com/users/dnovillo/repos\", \"events_url\": \"https://api.github.com/users/dnovillo/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dnovillo/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"726af6f78f80988271c8b558ae9cc84fa5a65016\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/726af6f78f80988271c8b558ae9cc84fa5a65016\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/726af6f78f80988271c8b558ae9cc84fa5a65016\"}], \"stats\": {\"total\": 55, \"additions\": 54, \"deletions\": 1}, \"files\": [{\"sha\": \"2d19bcb38f125faf4db3f2f444190b57bac35f8d\", \"filename\": \"source/opt/ccp_pass.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/286b3095dd187da747f85baf9ce3120580565df0/source%2Fopt%2Fccp_pass.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/286b3095dd187da747f85baf9ce3120580565df0/source%2Fopt%2Fccp_pass.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Fccp_pass.cpp?ref=286b3095dd187da747f85baf9ce3120580565df0\", \"patch\": \"@@ -150,7 +150,7 @@ SSAPropagator::PropStatus CCPPass::VisitAssignment(Instruction* instr) {\\n     // that CCP has modified the IR, independently of whether the constant is\\n     // actually propagated. See\\n     // https://github.com/KhronosGroup/SPIRV-Tools/issues/3636 for details.\\n-    if (folded_inst->result_id() == next_id) created_new_constant_ = true;\\n+    if (folded_inst->result_id() >= next_id) created_new_constant_ = true;\\n \\n     return SSAPropagator::kInteresting;\\n   }\"}, {\"sha\": \"943bc6c0825cf0f742f069ade0eaed230e9b8052\", \"filename\": \"test/opt/ccp_test.cpp\", \"status\": \"modified\", \"additions\": 53, \"deletions\": 0, \"changes\": 53, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/286b3095dd187da747f85baf9ce3120580565df0/test%2Fopt%2Fccp_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/286b3095dd187da747f85baf9ce3120580565df0/test%2Fopt%2Fccp_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Fccp_test.cpp?ref=286b3095dd187da747f85baf9ce3120580565df0\", \"patch\": \"@@ -1105,6 +1105,59 @@ TEST_F(CCPTest, CCPNoChangeFailure) {\\n   EXPECT_EQ(std::get<1>(result), Pass::Status::SuccessWithChange);\\n }\\n \\n+// Test from https://github.com/KhronosGroup/SPIRV-Tools/issues/3738\\n+// Similar to the previous one but more than one constant is generated in a\\n+// single call to the instruction folder.\\n+TEST_F(CCPTest, CCPNoChangeFailureSeveralConstantsDuringFolding) {\\n+  const std::string text = R\\\"(\\n+               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint Fragment %2 \\\"main\\\"\\n+               OpExecutionMode %2 OriginUpperLeft\\n+       %void = OpTypeVoid\\n+          %4 = OpTypeFunction %void\\n+      %float = OpTypeFloat 32\\n+    %v3float = OpTypeVector %float 3\\n+       %uint = OpTypeInt 32 0\\n+     %uint_0 = OpConstant %uint 0\\n+       %bool = OpTypeBool\\n+     %v3bool = OpTypeVector %bool 3\\n+    %float_0 = OpConstant %float 0\\n+         %12 = OpConstantComposite %v3float %float_0 %float_0 %float_0\\n+%float_0_300000012 = OpConstant %float 0.300000012\\n+         %14 = OpConstantComposite %v3float %float_0_300000012 %float_0_300000012 %float_0_300000012\\n+\\n+; CCP is generating several constants during a single instruction evaluation.\\n+; When folding %19, it generates the constants %true and %24.  They are dead\\n+; because they cannot be replaced anywhere in the IR.  CCP was wrongly\\n+; considering the IR to be unmodified because of this.\\n+;\\n+; CHECK: %true = OpConstantTrue %bool\\n+; CHECK: %24 = OpConstantComposite %v3bool %true %true %true\\n+; CHECK: %float_1 = OpConstant %float 1\\n+; CHECK: %float_0_699999988 = OpConstant %float 0.699999988\\n+\\n+          %2 = OpFunction %void None %4\\n+         %15 = OpLabel\\n+               OpBranch %16\\n+         %16 = OpLabel\\n+         %17 = OpPhi %v3float %12 %15 %14 %18\\n+         %19 = OpFOrdLessThan %v3bool %17 %14\\n+         %20 = OpAll %bool %19\\n+               OpLoopMerge %21 %18 None\\n+               OpBranchConditional %20 %18 %21\\n+         %18 = OpLabel\\n+               OpBranch %16\\n+         %21 = OpLabel\\n+         %22 = OpExtInst %v3float %1 FMix %12 %17 %14\\n+               OpReturn\\n+               OpFunctionEnd\\n+)\\\";\\n+\\n+  auto result = SinglePassRunAndMatch<CCPPass>(text, true);\\n+  EXPECT_EQ(std::get<1>(result), Pass::Status::SuccessWithChange);\\n+}\\n }  // namespace\\n }  // namespace opt\\n }  // namespace spvtools\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvNGZhMWE2ZjliNDk3MTkzZTU0YTgxNDExMmYxN2FiM2MyY2Y1ODA1MyI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/4fa1a6f9b497193e54a814112f17ab3c2cf58053", "content": "{\"sha\": \"4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"node_id\": \"C_kwDOAr2gadoAKDRmYTFhNmY5YjQ5NzE5M2U1NGE4MTQxMTJmMTdhYjNjMmNmNTgwNTM\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2022-03-07T19:33:10Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-03-07T19:33:10Z\"}, \"message\": \"Generalize assert in ccp (#4735)\\n\\nCCP does not want to fold an instruction unless it folds to a constant.\\r\\nThere is an asser to check for this.  The question if a spec constant\\r\\ncounts as a constant.  The constant folder considers a spec constant a\\r\\nconstand, but CCP does not.  I've fixed the assert in CCP to match what\\r\\nthe folder does.  It should not require any new changes to CCP.\", \"tree\": {\"sha\": \"d377936ec97eaa7e4f9f3ec0615749d361130eb6\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/d377936ec97eaa7e4f9f3ec0615749d361130eb6\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiJl32CRBK7hj4Ov3rIwAAQx0IAAllz9GOsYkCgPkxBaTlENgY\\n9rdPtivmwRw1Rs0r2yqJlJu1P3NfDotQ9NbbJPEahBFuyAVv6iEkmv04Na3YtGjP\\naKlUQioW3IZV5GDLcz1UxRVhORAFzbGkzo79P+I6GyFpqo/Tu5hDodlA1jiMxBkN\\nf20eHoSndLV5EWHgtg5C/T+KaS9uk5zi4fmCllc+6uFJe6P9HUPC0zUyOf6ySy2j\\nonFByonSCFGsKD/Igq0YzdF3q8X0mk5BWUvXZYVbKbLCx/iobLgFgB55M+RDi4Lv\\npj9V/XVN732ma5sNtRuiDCzL3aMVAuQ3aM82/B1bIxo7eLOk6fiCF6UnTBSoPXE=\\n=SLxG\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree d377936ec97eaa7e4f9f3ec0615749d361130eb6\\nparent 196f638d73ef0a55ce7d99b71f525a8baee3c57e\\nauthor Steven Perron <stevenperron@google.com> 1646681590 +0000\\ncommitter GitHub <noreply@github.com> 1646681590 +0000\\n\\nGeneralize assert in ccp (#4735)\\n\\nCCP does not want to fold an instruction unless it folds to a constant.\\r\\nThere is an asser to check for this.  The question if a spec constant\\r\\ncounts as a constant.  The constant folder considers a spec constant a\\r\\nconstand, but CCP does not.  I've fixed the assert in CCP to match what\\r\\nthe folder does.  It should not require any new changes to CCP.\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/4fa1a6f9b497193e54a814112f17ab3c2cf58053/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"196f638d73ef0a55ce7d99b71f525a8baee3c57e\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/196f638d73ef0a55ce7d99b71f525a8baee3c57e\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/196f638d73ef0a55ce7d99b71f525a8baee3c57e\"}], \"stats\": {\"total\": 32, \"additions\": 31, \"deletions\": 1}, \"files\": [{\"sha\": \"5f8550276026e1f3f947f9b3421f8b6abfe49c1b\", \"filename\": \"source/opt/ccp_pass.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/4fa1a6f9b497193e54a814112f17ab3c2cf58053/source%2Fopt%2Fccp_pass.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/4fa1a6f9b497193e54a814112f17ab3c2cf58053/source%2Fopt%2Fccp_pass.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Fccp_pass.cpp?ref=4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"patch\": \"@@ -172,7 +172,8 @@ SSAPropagator::PropStatus CCPPass::VisitAssignment(Instruction* instr) {\\n   if (folded_inst != nullptr) {\\n     // We do not want to change the body of the function by adding new\\n     // instructions.  When folding we can only generate new constants.\\n-    assert(folded_inst->IsConstant() &&\\n+    assert((folded_inst->IsConstant() ||\\n+            IsSpecConstantInst(folded_inst->opcode())) &&\\n            \\\"CCP is only interested in constant values.\\\");\\n     uint32_t new_val = ComputeLatticeMeet(instr, folded_inst->result_id());\\n     values_[instr->result_id()] = new_val;\"}, {\"sha\": \"f0f243624020fe9f16d7622da3926c42549171ac\", \"filename\": \"test/opt/ccp_test.cpp\", \"status\": \"modified\", \"additions\": 29, \"deletions\": 0, \"changes\": 29, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/4fa1a6f9b497193e54a814112f17ab3c2cf58053/test%2Fopt%2Fccp_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/4fa1a6f9b497193e54a814112f17ab3c2cf58053/test%2Fopt%2Fccp_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Fccp_test.cpp?ref=4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"patch\": \"@@ -582,6 +582,35 @@ TEST_F(CCPTest, SkipSpecConstantInstrucitons) {\\n   EXPECT_EQ(std::get<1>(res), Pass::Status::SuccessWithoutChange);\\n }\\n \\n+TEST_F(CCPTest, FoldConstantCompositeInstrucitonsWithSpecConst) {\\n+  const std::string spv_asm = R\\\"(\\n+               OpCapability Shader\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint Fragment %1 \\\"main\\\"\\n+               OpExecutionMode %1 OriginUpperLeft\\n+       %void = OpTypeVoid\\n+          %4 = OpTypeFunction %void\\n+       %bool = OpTypeBool\\n+     %v3bool = OpTypeVector %bool 3\\n+  %_struct_8 = OpTypeStruct %v3bool\\n+       %true = OpConstantTrue %bool\\n+; CHECK: [[spec_const:%\\\\w+]] = OpSpecConstantComposite %v3bool\\n+         %11 = OpSpecConstantComposite %v3bool %true %true %true\\n+         %12 = OpConstantComposite %_struct_8 %11\\n+; CHECK: OpFunction\\n+          %1 = OpFunction %void None %4\\n+         %29 = OpLabel\\n+         %31 = OpCompositeExtract %v3bool %12 0\\n+; CHECK: OpCompositeExtract %bool [[spec_const]] 0\\n+         %32 = OpCompositeExtract %bool %31 0\\n+               OpReturn\\n+               OpFunctionEnd\\n+  )\\\";\\n+\\n+  auto result = SinglePassRunAndMatch<CCPPass>(spv_asm, true);\\n+  EXPECT_EQ(std::get<1>(result), Pass::Status::SuccessWithChange);\\n+}\\n+\\n TEST_F(CCPTest, UpdateSubsequentPhisToVarying) {\\n   const std::string text = R\\\"(\\n OpCapability Shader\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvMGE0M2E4NGUwMjI0NWNjYTQwY2UxODdkMWU0MjdhNWQwYjRmM2QxMyI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a43a84e02245cca40ce187d1e427a5d0b4f3d13", "content": "{\"sha\": \"0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"node_id\": \"C_kwDOAr2gadoAKDBhNDNhODRlMDIyNDVjY2E0MGNlMTg3ZDFlNDI3YTVkMGI0ZjNkMTM\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2022-08-10T13:04:35Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-08-10T13:04:35Z\"}, \"message\": \"Fix shuffle feeding shuffle with undef literal (#4883)\\n\\nWhen folding a vector shuffle with an undef literal, it is possible that the\\r\\nliteral is adjusted so that it will then be interpreted as an index into\\r\\nthe input operands.  This is fixed by special casing that case, and not\\r\\nadjusting those operands.\\r\\n\\r\\nFixes #4859\", \"tree\": {\"sha\": \"b8d2b05a276b05719d6a86ad17ae5e7704a88196\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/b8d2b05a276b05719d6a86ad17ae5e7704a88196\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJi86zjCRBK7hj4Ov3rIwAAkQ0IAD+603Xf11oTgahI9WCd/ikD\\nUjMc+RM8HOnCS3RoJ3aCQCwQRuBE5Q8VncCMuwiBcWgK4/+enRcmiIVl14McEMxm\\nPHd+sAKBkxtHtkp0snOmCZbNF1/PKswRFM9UikC17Ji3lMOeLz5MeMGZxvDfQuJr\\nJWZnca21W5WKQ945nKtu+bHrTG+TM4kUD/kFrHNiiDvtQ433mdWVjF+uqInzxw3p\\nHvSdezx4CULJ8iZQHy1bwheeLzFNU9OPaPKvK2lhW8/8ich4F88EVrMZ1RNJ8kJu\\nwo7MDYwTsfVyIJKX8fDIVqtANyrn25Uxm0lS8H9AkSUkXMgRCJbkefMyu+/xgL0=\\n=5Qon\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree b8d2b05a276b05719d6a86ad17ae5e7704a88196\\nparent 0ebcdc4d19de627023d538826672c816e3e90f32\\nauthor Steven Perron <stevenperron@google.com> 1660136675 -0400\\ncommitter GitHub <noreply@github.com> 1660136675 -0400\\n\\nFix shuffle feeding shuffle with undef literal (#4883)\\n\\nWhen folding a vector shuffle with an undef literal, it is possible that the\\r\\nliteral is adjusted so that it will then be interpreted as an index into\\r\\nthe input operands.  This is fixed by special casing that case, and not\\r\\nadjusting those operands.\\r\\n\\r\\nFixes #4859\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a43a84e02245cca40ce187d1e427a5d0b4f3d13/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0ebcdc4d19de627023d538826672c816e3e90f32\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0ebcdc4d19de627023d538826672c816e3e90f32\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/0ebcdc4d19de627023d538826672c816e3e90f32\"}], \"stats\": {\"total\": 24, \"additions\": 23, \"deletions\": 1}, \"files\": [{\"sha\": \"3f10bd00921a115af217cbbe26a2f2558d0af7fd\", \"filename\": \"source/opt/folding_rules.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0a43a84e02245cca40ce187d1e427a5d0b4f3d13/source%2Fopt%2Ffolding_rules.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0a43a84e02245cca40ce187d1e427a5d0b4f3d13/source%2Fopt%2Ffolding_rules.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Ffolding_rules.cpp?ref=0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"patch\": \"@@ -2748,7 +2748,8 @@ FoldingRule VectorShuffleFeedingShuffle() {\\n \\n       if (adjustment != 0) {\\n         for (uint32_t i = 2; i < new_operands.size(); i++) {\\n-          if (inst->GetSingleWordInOperand(i) >= op0_length) {\\n+          uint32_t operand = inst->GetSingleWordInOperand(i);\\n+          if (operand >= op0_length && operand != undef_literal) {\\n             new_operands[i].words[0] -= adjustment;\\n           }\\n         }\"}, {\"sha\": \"a034e959a44c23c864cb90fe4f7aecc852cf5213\", \"filename\": \"test/opt/fold_test.cpp\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0a43a84e02245cca40ce187d1e427a5d0b4f3d13/test%2Fopt%2Ffold_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0a43a84e02245cca40ce187d1e427a5d0b4f3d13/test%2Fopt%2Ffold_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Ffold_test.cpp?ref=0a43a84e02245cca40ce187d1e427a5d0b4f3d13\", \"patch\": \"@@ -7963,6 +7963,27 @@ ::testing::Values(\\n             \\\"%9 = OpVectorShuffle %v4double %7 %8 2 0 1 4294967295\\\\n\\\" +\\n             \\\"OpReturn\\\\n\\\" +\\n             \\\"OpFunctionEnd\\\",\\n+        9, true),\\n+    // Test case 14: Shuffle with undef literal and change size of first input vector.\\n+    InstructionFoldingCase<bool>(\\n+        Header() +\\n+            \\\"; CHECK: [[double:%\\\\\\\\w+]] = OpTypeFloat 64\\\\n\\\" +\\n+            \\\"; CHECK: [[v4double:%\\\\\\\\w+]] = OpTypeVector [[double]] 2\\\\n\\\" +\\n+            \\\"; CHECK: OpVectorShuffle\\\\n\\\" +\\n+            \\\"; CHECK: OpVectorShuffle {{%\\\\\\\\w+}} %5 %7 0 1 4 4294967295\\\\n\\\" +\\n+            \\\"; CHECK: OpReturn\\\\n\\\" +\\n+            \\\"%main = OpFunction %void None %void_func\\\\n\\\" +\\n+            \\\"%main_lab = OpLabel\\\\n\\\" +\\n+            \\\"%2 = OpVariable %_ptr_v4double Function\\\\n\\\" +\\n+            \\\"%3 = OpVariable %_ptr_v4double Function\\\\n\\\" +\\n+            \\\"%4 = OpVariable %_ptr_v4double Function\\\\n\\\" +\\n+            \\\"%5 = OpLoad %v4double %2\\\\n\\\" +\\n+            \\\"%6 = OpLoad %v4double %3\\\\n\\\" +\\n+            \\\"%7 = OpLoad %v4double %4\\\\n\\\" +\\n+            \\\"%8 = OpVectorShuffle %v2double %5 %5 0 1\\\\n\\\" +\\n+            \\\"%9 = OpVectorShuffle %v4double %8 %7 0 1 2 4294967295\\\\n\\\" +\\n+            \\\"OpReturn\\\\n\\\" +\\n+            \\\"OpFunctionEnd\\\",\\n         9, true)\\n ));\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvMDM5MWQwODIzZWJmZDdjMzdjMDdhNTRiODcyNmNjNDE3MTgzYTk1ZiI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0391d0823ebfd7c37c07a54b8726cc417183a95f", "content": "{\"sha\": \"0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6MDM5MWQwODIzZWJmZDdjMzdjMDdhNTRiODcyNmNjNDE3MTgzYTk1Zg==\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2019-11-19T14:45:39Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2019-11-19T14:45:39Z\"}, \"message\": \"Handle OpPhi with no in operands in value numbering (#3056)\\n\\nFixes #3043\", \"tree\": {\"sha\": \"17417b932bec06f99a4a4007b915785872e6f854\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/17417b932bec06f99a4a4007b915785872e6f854\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJd1AATCRBK7hj4Ov3rIwAAdHIIAEnRUOk6UtjjGanU779KMhCv\\nOr01vjowBjMQrOm1uQKG68M+LV5n0x6eotCeVhttRdZpvZAGNW97fG8T0ycEhQmC\\nQzyHKSqB765DmckLfqidP5Js/rzvjIF3mxdnjA3HyOvt/P+rt8s41knJp0arLcLm\\nJjJXNggnhOiVOjE9gfjJAbqbkfuYCd2jZ+nE3yyuS57meiRv9XXDVtWcJ7gTsn9g\\nHo9J1DNfvx/yIyhsWKzB9NraEDKcdwVEyiFLxIjcga4jm6mq+c2sABq72McS2Ole\\nD+PXnRvaOw3hVu9Dd91dciK/IC0XSHVhOLrqsO7aGVY09/+p2ZwTX0XTc5K2rAA=\\n=XQix\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 17417b932bec06f99a4a4007b915785872e6f854\\nparent ca703c8877743001468f96eb01eeccb2a5dc2a20\\nauthor Steven Perron <stevenperron@google.com> 1574174739 -0500\\ncommitter GitHub <noreply@github.com> 1574174739 -0500\\n\\nHandle OpPhi with no in operands in value numbering (#3056)\\n\\nFixes #3043\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0391d0823ebfd7c37c07a54b8726cc417183a95f/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ca703c8877743001468f96eb01eeccb2a5dc2a20\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/ca703c8877743001468f96eb01eeccb2a5dc2a20\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/ca703c8877743001468f96eb01eeccb2a5dc2a20\"}], \"stats\": {\"total\": 33, \"additions\": 32, \"deletions\": 1}, \"files\": [{\"sha\": \"82549a6dc9e7832594dce63c764ca20dc6ced90e\", \"filename\": \"source/opt/value_number_table.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0391d0823ebfd7c37c07a54b8726cc417183a95f/source%2Fopt%2Fvalue_number_table.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0391d0823ebfd7c37c07a54b8726cc417183a95f/source%2Fopt%2Fvalue_number_table.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Fvalue_number_table.cpp?ref=0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"patch\": \"@@ -93,7 +93,7 @@ uint32_t ValueNumberTable::AssignValueNumber(Instruction* inst) {\\n \\n   // Phi nodes are a type of copy.  If all of the inputs have the same value\\n   // number, then we can assign the result of the phi the same value number.\\n-  if (inst->opcode() == SpvOpPhi &&\\n+  if (inst->opcode() == SpvOpPhi && inst->NumInOperands() > 0 &&\\n       dec_mgr->HaveTheSameDecorations(inst->result_id(),\\n                                       inst->GetSingleWordInOperand(0))) {\\n     value = GetValueNumber(inst->GetSingleWordInOperand(0));\"}, {\"sha\": \"a0942ccdc03794963d6c9627e43fe98d25037826\", \"filename\": \"test/opt/value_table_test.cpp\", \"status\": \"modified\", \"additions\": 31, \"deletions\": 0, \"changes\": 31, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0391d0823ebfd7c37c07a54b8726cc417183a95f/test%2Fopt%2Fvalue_table_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0391d0823ebfd7c37c07a54b8726cc417183a95f/test%2Fopt%2Fvalue_table_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Fvalue_table_test.cpp?ref=0391d0823ebfd7c37c07a54b8726cc417183a95f\", \"patch\": \"@@ -653,6 +653,37 @@ TEST_F(ValueTableTest, PhiLoopTest) {\\n   EXPECT_NE(vtable.GetValueNumber(phi1), vtable.GetValueNumber(phi2));\\n }\\n \\n+// Test to make sure that OpPhi instructions with no in operands are handled\\n+// correctly.\\n+TEST_F(ValueTableTest, EmptyPhiTest) {\\n+  const std::string text = R\\\"(\\n+               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint Fragment %2 \\\"main\\\"\\n+               OpExecutionMode %2 OriginUpperLeft\\n+               OpSource GLSL 430\\n+       %void = OpTypeVoid\\n+          %4 = OpTypeFunction %void\\n+       %bool = OpTypeBool\\n+       %true = OpConstantTrue %bool\\n+          %2 = OpFunction %void None %4\\n+          %7 = OpLabel\\n+               OpSelectionMerge %8 None\\n+               OpBranchConditional %true %9 %8\\n+          %9 = OpLabel\\n+               OpKill\\n+          %8 = OpLabel\\n+         %10 = OpPhi %bool\\n+               OpReturn\\n+               OpFunctionEnd\\n+  )\\\";\\n+  auto context = BuildModule(SPV_ENV_UNIVERSAL_1_2, nullptr, text);\\n+  ValueNumberTable vtable(context.get());\\n+  Instruction* inst = context->get_def_use_mgr()->GetDef(10);\\n+  vtable.GetValueNumber(inst);\\n+}\\n+\\n }  // namespace\\n }  // namespace opt\\n }  // namespace spvtools\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvMGE1ZDk5ZDAyY2I4YzBlZGQ0MWM3YTlkNGYzMDljMDk3NGQwNzZkMCI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0", "content": "{\"sha\": \"0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"node_id\": \"MDY6Q29tbWl0NDU5ODE4MDE6MGE1ZDk5ZDAyY2I4YzBlZGQ0MWM3YTlkNGYzMDljMDk3NGQwNzZkMA==\", \"commit\": {\"author\": {\"name\": \"Sarah\", \"email\": \"9856269+sarahM0@users.noreply.github.com\", \"date\": \"2019-12-03T16:21:26Z\"}, \"committer\": {\"name\": \"dan sinclair\", \"email\": \"dsinclair@google.com\", \"date\": \"2019-12-03T16:21:26Z\"}, \"message\": \"Permit the debug instructions in WebGPU SPIR-V - remove from the optimizer (#3083)\\n\\ncontinuing #3063\\r\\nfixing #3052\", \"tree\": {\"sha\": \"7d1fa04dc87a0487e5f8cc6fe2633bce16bbf11d\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/7d1fa04dc87a0487e5f8cc6fe2633bce16bbf11d\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0/comments\", \"author\": {\"login\": \"sarahM0\", \"id\": 9856269, \"node_id\": \"MDQ6VXNlcjk4NTYyNjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/9856269?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/sarahM0\", \"html_url\": \"https://github.com/sarahM0\", \"followers_url\": \"https://api.github.com/users/sarahM0/followers\", \"following_url\": \"https://api.github.com/users/sarahM0/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/sarahM0/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/sarahM0/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/sarahM0/subscriptions\", \"organizations_url\": \"https://api.github.com/users/sarahM0/orgs\", \"repos_url\": \"https://api.github.com/users/sarahM0/repos\", \"events_url\": \"https://api.github.com/users/sarahM0/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/sarahM0/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dj2\", \"id\": 9611, \"node_id\": \"MDQ6VXNlcjk2MTE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/9611?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dj2\", \"html_url\": \"https://github.com/dj2\", \"followers_url\": \"https://api.github.com/users/dj2/followers\", \"following_url\": \"https://api.github.com/users/dj2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dj2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dj2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dj2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dj2/orgs\", \"repos_url\": \"https://api.github.com/users/dj2/repos\", \"events_url\": \"https://api.github.com/users/dj2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dj2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"af7410597e3869ebba56dfe5067abc3bb2dc5dbc\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/af7410597e3869ebba56dfe5067abc3bb2dc5dbc\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/af7410597e3869ebba56dfe5067abc3bb2dc5dbc\"}], \"stats\": {\"total\": 33, \"additions\": 1, \"deletions\": 32}, \"files\": [{\"sha\": \"241aa75bef3da3c2914eb8245efc23b76206e40d\", \"filename\": \"source/opt/optimizer.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0/source%2Fopt%2Foptimizer.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0/source%2Fopt%2Foptimizer.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Foptimizer.cpp?ref=0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"patch\": \"@@ -230,8 +230,7 @@ Optimizer& Optimizer::RegisterSizePasses() {\\n }\\n \\n Optimizer& Optimizer::RegisterVulkanToWebGPUPasses() {\\n-  return RegisterPass(CreateStripDebugInfoPass())\\n-      .RegisterPass(CreateStripAtomicCounterMemoryPass())\\n+  return RegisterPass(CreateStripAtomicCounterMemoryPass())\\n       .RegisterPass(CreateGenerateWebGPUInitializersPass())\\n       .RegisterPass(CreateLegalizeVectorShufflePass())\\n       .RegisterPass(CreateSplitInvalidUnreachablePass())\"}, {\"sha\": \"945aa7826544467cd189c9eeb06f04b45a1e9e67\", \"filename\": \"test/opt/optimizer_test.cpp\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 30, \"changes\": 30, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0/test%2Fopt%2Foptimizer_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0/test%2Fopt%2Foptimizer_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Foptimizer_test.cpp?ref=0a5d99d02cb8c0edd41c7a9d4f309c0974d076d0\", \"patch\": \"@@ -234,7 +234,6 @@ TEST(Optimizer, VulkanToWebGPUSetsCorrectPasses) {\\n                                               \\\"eliminate-dead-code-aggressive\\\",\\n                                               \\\"eliminate-dead-const\\\",\\n                                               \\\"flatten-decorations\\\",\\n-                                              \\\"strip-debug\\\",\\n                                               \\\"strip-atomic-counter-memory\\\",\\n                                               \\\"generate-webgpu-initializers\\\",\\n                                               \\\"legalize-vector-shuffle\\\",\\n@@ -330,35 +329,6 @@ INSTANTIATE_TEST_SUITE_P(\\n          \\\"OpFunctionEnd\\\\n\\\",\\n          // pass\\n          \\\"flatten-decorations\\\"},\\n-        // Strip Debug\\n-        {// input\\n-         \\\"OpCapability Shader\\\\n\\\"\\n-         \\\"OpCapability VulkanMemoryModel\\\\n\\\"\\n-         \\\"OpExtension \\\\\\\"SPV_KHR_vulkan_memory_model\\\\\\\"\\\\n\\\"\\n-         \\\"OpMemoryModel Logical Vulkan\\\\n\\\"\\n-         \\\"OpEntryPoint Vertex %func \\\\\\\"shader\\\\\\\"\\\\n\\\"\\n-         \\\"OpName %main \\\\\\\"main\\\\\\\"\\\\n\\\"\\n-         \\\"OpName %void_fn \\\\\\\"void_fn\\\\\\\"\\\\n\\\"\\n-         \\\"%void = OpTypeVoid\\\\n\\\"\\n-         \\\"%void_f = OpTypeFunction %void\\\\n\\\"\\n-         \\\"%func = OpFunction %void None %void_f\\\\n\\\"\\n-         \\\"%label = OpLabel\\\\n\\\"\\n-         \\\"OpReturn\\\\n\\\"\\n-         \\\"OpFunctionEnd\\\\n\\\",\\n-         // expected\\n-         \\\"OpCapability Shader\\\\n\\\"\\n-         \\\"OpCapability VulkanMemoryModel\\\\n\\\"\\n-         \\\"OpExtension \\\\\\\"SPV_KHR_vulkan_memory_model\\\\\\\"\\\\n\\\"\\n-         \\\"OpMemoryModel Logical Vulkan\\\\n\\\"\\n-         \\\"OpEntryPoint Vertex %1 \\\\\\\"shader\\\\\\\"\\\\n\\\"\\n-         \\\"%void = OpTypeVoid\\\\n\\\"\\n-         \\\"%3 = OpTypeFunction %void\\\\n\\\"\\n-         \\\"%1 = OpFunction %void None %3\\\\n\\\"\\n-         \\\"%4 = OpLabel\\\\n\\\"\\n-         \\\"OpReturn\\\\n\\\"\\n-         \\\"OpFunctionEnd\\\\n\\\",\\n-         // pass\\n-         \\\"strip-debug\\\"},\\n         // Eliminate Dead Constants\\n         {// input\\n          \\\"OpCapability Shader\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvZDVhM2JmY2YyZmZkMTU0YTI0NGU3ZmZhZTU0ZGQxNzY2ZDk4ZWZhNCI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4", "content": "{\"sha\": \"d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"node_id\": \"C_kwDOAr2gadoAKGQ1YTNiZmNmMmZmZDE1NGEyNDRlN2ZmYWU1NGRkMTc2NmQ5OGVmYTQ\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2022-07-05T18:14:29Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-07-05T18:14:29Z\"}, \"message\": \"Avoid undefined behaviour when getting debug opcode (#4842)\\n\\nIf the `instruction` operand in an extended instruction instruction is\\r\\ntoo large, it causes undefined behaviour when that value is cast to the\\r\\nenum for the corresponding set.  This is done with the\\r\\nNonSemanticDebug100 instruction set.  We need to avoid the undefined\\r\\nbehaviour.\\r\\n\\r\\nFixes #4727\", \"tree\": {\"sha\": \"e66681a4e2a25a2de672013ed784b2e842d34824\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/e66681a4e2a25a2de672013ed784b2e842d34824\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJixH+FCRBK7hj4Ov3rIwAA5eAIAFCH7AeI0mNzTty8m7JPFsVz\\nxaHIzWPQmttBfbwUuvfhVpoNEO0dJxVEMlq3rZ/MRFejwfjm9wV6rz8KHwvWPIbi\\nuSdEg8U/pkrg3VjEEgVmv6geY36Htto1gfshq1D3gYLJn7fbNvZclc/Ngrk9xIiF\\n5P70FeH8DyVCt/tXn2XC270SefDSusBn/zuzMML56PSJ6mawhiGquhrZDw4etYZA\\nNskta6UrT0UofJhsyAOBMi9nkQh2BcYltVXdBNoC0x02c6vnZf2PoSexkIwmJu0O\\nozafuyQKig0tMerfd+ThL+o6EHrong3GDEejqr4UuKi5JOmYUI4nFU/uK8gKt6k=\\n=w0bt\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree e66681a4e2a25a2de672013ed784b2e842d34824\\nparent 6803cc51268a56ec6d6b622fb91fac012cb589ef\\nauthor Steven Perron <stevenperron@google.com> 1657044869 -0400\\ncommitter GitHub <noreply@github.com> 1657044869 -0400\\n\\nAvoid undefined behaviour when getting debug opcode (#4842)\\n\\nIf the `instruction` operand in an extended instruction instruction is\\r\\ntoo large, it causes undefined behaviour when that value is cast to the\\r\\nenum for the corresponding set.  This is done with the\\r\\nNonSemanticDebug100 instruction set.  We need to avoid the undefined\\r\\nbehaviour.\\r\\n\\r\\nFixes #4727\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6803cc51268a56ec6d6b622fb91fac012cb589ef\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/6803cc51268a56ec6d6b622fb91fac012cb589ef\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/6803cc51268a56ec6d6b622fb91fac012cb589ef\"}], \"stats\": {\"total\": 47, \"additions\": 45, \"deletions\": 2}, \"files\": [{\"sha\": \"6a8daea31ed7f202e5a0dc52b64da2fb5c18a9b1\", \"filename\": \"source/opt/instruction.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4/source%2Fopt%2Finstruction.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4/source%2Fopt%2Finstruction.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Finstruction.cpp?ref=d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"patch\": \"@@ -693,8 +693,12 @@ NonSemanticShaderDebugInfo100Instructions Instruction::GetShader100DebugOpcode()\\n     return NonSemanticShaderDebugInfo100InstructionsMax;\\n   }\\n \\n-  return NonSemanticShaderDebugInfo100Instructions(\\n-      GetSingleWordInOperand(kExtInstInstructionInIdx));\\n+  uint32_t opcode = GetSingleWordInOperand(kExtInstInstructionInIdx);\\n+  if (opcode >= NonSemanticShaderDebugInfo100InstructionsMax) {\\n+    return NonSemanticShaderDebugInfo100InstructionsMax;\\n+  }\\n+\\n+  return NonSemanticShaderDebugInfo100Instructions(opcode);\\n }\\n \\n CommonDebugInfoInstructions Instruction::GetCommonDebugOpcode() const {\"}, {\"sha\": \"dd749ab48632a36f81e2c0d3e4fecb2034da5601\", \"filename\": \"test/opt/instruction_test.cpp\", \"status\": \"modified\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4/test%2Fopt%2Finstruction_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4/test%2Fopt%2Finstruction_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Finstruction_test.cpp?ref=d5a3bfcf2ffd154a244e7ffae54dd1766d98efa4\", \"patch\": \"@@ -1525,6 +1525,45 @@ OpFunctionEnd\\n   EXPECT_EQ(false, inst->IsVulkanStorageTexelBuffer());\\n }\\n \\n+TEST_F(DescriptorTypeTest, GetShader100DebugOpcode) {\\n+  const std::string text = R\\\"(\\n+              OpCapability Shader\\n+         %1 = OpExtInstImport \\\"NonSemantic.Shader.DebugInfo.100\\\"\\n+         %2 = OpString \\\"ps.hlsl\\\"\\n+         %3 = OpString \\\"#line 1 \\\\\\\"ps.hlsl\\\\\\\"\\\"\\n+      %void = OpTypeVoid\\n+         %5 = OpExtInst %void %1 DebugExpression\\n+         %6 = OpExtInst %void %1 DebugSource %2 %3\\n+)\\\";\\n+\\n+  SetAssembleOptions(SPV_TEXT_TO_BINARY_OPTION_PRESERVE_NUMERIC_IDS);\\n+  std::unique_ptr<IRContext> context =\\n+      BuildModule(SPV_ENV_UNIVERSAL_1_2, nullptr, text);\\n+  Instruction* debug_expression = context->get_def_use_mgr()->GetDef(5);\\n+  EXPECT_EQ(debug_expression->GetShader100DebugOpcode(),\\n+            NonSemanticShaderDebugInfo100DebugExpression);\\n+  Instruction* debug_source = context->get_def_use_mgr()->GetDef(6);\\n+  EXPECT_EQ(debug_source->GetShader100DebugOpcode(),\\n+            NonSemanticShaderDebugInfo100DebugSource);\\n+\\n+  // Test that an opcode larger than the max will return Max.  This instruction\\n+  // cannot be in the assembly above because the assembler expects the string\\n+  // for the opcode, so we cannot use an arbitrary number.  However, a binary\\n+  // file could have an arbitrary number.\\n+  std::unique_ptr<Instruction> past_max(debug_expression->Clone(context.get()));\\n+  const uint32_t kExtInstOpcodeInIndex = 1;\\n+  uint32_t large_opcode = NonSemanticShaderDebugInfo100InstructionsMax + 2;\\n+  past_max->SetInOperand(kExtInstOpcodeInIndex, {large_opcode});\\n+  EXPECT_EQ(past_max->GetShader100DebugOpcode(),\\n+            NonSemanticShaderDebugInfo100InstructionsMax);\\n+\\n+  // Test that an opcode without a value in the enum, but less than Max returns\\n+  // the same value.\\n+  uint32_t opcode = NonSemanticShaderDebugInfo100InstructionsMax - 2;\\n+  past_max->SetInOperand(kExtInstOpcodeInIndex, {opcode});\\n+  EXPECT_EQ(past_max->GetShader100DebugOpcode(), opcode);\\n+}\\n+\\n }  // namespace\\n }  // namespace opt\\n }  // namespace spvtools\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvNDhhMzZjNzJlNGQzNThlZDlmMGE1ZTUzZmU3NzVhN2ViYjJmOGYyYiI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b", "content": "{\"sha\": \"48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"node_id\": \"C_kwDOAr2gadoAKDQ4YTM2YzcyZTRkMzU4ZWQ5ZjBhNWU1M2ZlNzc1YTdlYmIyZjhmMmI\", \"commit\": {\"author\": {\"name\": \"Steven Perron\", \"email\": \"stevenperron@google.com\", \"date\": \"2022-03-07T19:35:57Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-03-07T19:35:57Z\"}, \"message\": \"Better handling of 0xFFFFFFFF when folding vector shuffle (#4743)\\n\\nWhen folding a vector shuffle feeding a vector shuffle, we do not\\r\\npropagate an 0xFFFFFFFF, which has a special meaning, correctly.  We\\r\\nadjust the value making it lose it meaning as an undefined value.\\r\\n\\r\\nFixes #4581\", \"tree\": {\"sha\": \"c66f33ca208e566c1c96ef4cd9e882c725597175\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/c66f33ca208e566c1c96ef4cd9e882c725597175\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiJl6dCRBK7hj4Ov3rIwAAfboIAGEPgfFcvCly41BxVmMPH4WN\\nl47uPcHQRa+vdXePvO/WB4OaybHKflgn1OTCTkxgtOhbspHyirJb+3kcrlRmqsEe\\nBaqBjzpbzF/hdmxRS3reBhbUkdH+/D4Agnb9fiXReKJpb8V0QicSJ9kc7T4TZtBc\\nPgavKhUKj3htLl+o/A0e8oqx8tnY0AgseVNv1OMS0fo9d4dvAiVTmZ8ofymR/DgC\\nXLRM+OXNtl5oji9EOAj+nTFEtRytXd+v7ml5gX/APgo3H24DS+XryyY0L9cSHcrs\\nvCqMadARo4Vr5bK5omyJKx2mg1lXva5Pgfld7rD0RpBfdjpaCcYIgX5GZBb16XI=\\n=nP6z\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree c66f33ca208e566c1c96ef4cd9e882c725597175\\nparent 4fa1a6f9b497193e54a814112f17ab3c2cf58053\\nauthor Steven Perron <stevenperron@google.com> 1646681757 +0000\\ncommitter GitHub <noreply@github.com> 1646681757 +0000\\n\\nBetter handling of 0xFFFFFFFF when folding vector shuffle (#4743)\\n\\nWhen folding a vector shuffle feeding a vector shuffle, we do not\\r\\npropagate an 0xFFFFFFFF, which has a special meaning, correctly.  We\\r\\nadjust the value making it lose it meaning as an undefined value.\\r\\n\\r\\nFixes #4581\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b/comments\", \"author\": {\"login\": \"s-perron\", \"id\": 31666470, \"node_id\": \"MDQ6VXNlcjMxNjY2NDcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/31666470?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/s-perron\", \"html_url\": \"https://github.com/s-perron\", \"followers_url\": \"https://api.github.com/users/s-perron/followers\", \"following_url\": \"https://api.github.com/users/s-perron/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/s-perron/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/s-perron/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/s-perron/subscriptions\", \"organizations_url\": \"https://api.github.com/users/s-perron/orgs\", \"repos_url\": \"https://api.github.com/users/s-perron/repos\", \"events_url\": \"https://api.github.com/users/s-perron/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/s-perron/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/4fa1a6f9b497193e54a814112f17ab3c2cf58053\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/4fa1a6f9b497193e54a814112f17ab3c2cf58053\"}], \"stats\": {\"total\": 25, \"additions\": 23, \"deletions\": 2}, \"files\": [{\"sha\": \"c879a0c50ef9cf4eac834d98ed44e7fb6cf03f71\", \"filename\": \"source/opt/folding_rules.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b/source%2Fopt%2Ffolding_rules.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b/source%2Fopt%2Ffolding_rules.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fopt%2Ffolding_rules.cpp?ref=48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"patch\": \"@@ -2368,7 +2368,7 @@ FoldingRule VectorShuffleFeedingShuffle() {\\n             // fold.\\n             return false;\\n           }\\n-        } else {\\n+        } else if (component_index != undef_literal) {\\n           if (new_feeder_id == 0) {\\n             // First time through, save the id of the operand the element comes\\n             // from.\\n@@ -2382,7 +2382,7 @@ FoldingRule VectorShuffleFeedingShuffle() {\\n           component_index -= feeder_op0_length;\\n         }\\n \\n-        if (!feeder_is_op0) {\\n+        if (!feeder_is_op0 && component_index != undef_literal) {\\n           component_index += op0_length;\\n         }\\n       }\"}, {\"sha\": \"7565ca7f252a7ad7efd552f9931a62be303333cb\", \"filename\": \"test/opt/fold_test.cpp\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b/test%2Fopt%2Ffold_test.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b/test%2Fopt%2Ffold_test.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fopt%2Ffold_test.cpp?ref=48a36c72e4d358ed9f0a5e53fe775a7ebb2f8f2b\", \"patch\": \"@@ -7087,6 +7087,27 @@ ::testing::Values(\\n         3, true)\\n ));\\n \\n+INSTANTIATE_TEST_SUITE_P(VectorShuffleMatchingTest, MatchingInstructionFoldingTest,\\n+::testing::Values(\\n+    // Test case 0: Using OpDot to extract last element.\\n+    InstructionFoldingCase<bool>(\\n+        Header() +\\n+            \\\"; CHECK: [[int:%\\\\\\\\w+]] = OpTypeInt 32 1\\\\n\\\" +\\n+            \\\"; CHECK: [[v2int:%\\\\\\\\w+]] = OpTypeVector [[int]] 2{{[[:space:]]}}\\\\n\\\" +\\n+            \\\"; CHECK: [[null:%\\\\\\\\w+]] = OpConstantNull [[v2int]]\\\\n\\\" +\\n+            \\\"; CHECK: OpVectorShuffle\\\\n\\\" +\\n+            \\\"; CHECK: %3 = OpVectorShuffle [[v2int]] [[null]] {{%\\\\\\\\w+}} 4294967295 2\\\\n\\\" +\\n+            \\\"%main = OpFunction %void None %void_func\\\\n\\\" +\\n+            \\\"%main_lab = OpLabel\\\\n\\\" +\\n+            \\\"%n = OpVariable %_ptr_int Function\\\\n\\\" +\\n+            \\\"%load = OpLoad %int %n\\\\n\\\" +\\n+            \\\"%2 = OpVectorShuffle %v2int %v2int_null %v2int_2_3 3 0xFFFFFFFF \\\\n\\\" +\\n+            \\\"%3 = OpVectorShuffle %v2int %2 %v2int_2_3 1 2 \\\\n\\\" +\\n+            \\\"OpReturn\\\\n\\\" +\\n+            \\\"OpFunctionEnd\\\",\\n+        3, true)\\n+ ));\\n+\\n using MatchingInstructionWithNoResultFoldingTest =\\n ::testing::TestWithParam<InstructionFoldingCase<bool>>;\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvS2hyb25vc0dyb3VwL1NQSVJWLVRvb2xzL2NvbW1pdHMvMGFkODNmOTEzOWRhZjcwYTc5MTU2MGY1YzcyZjk0YjBiZTViODM5MCI=.json", "commit": "https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0ad83f9139daf70a791560f5c72f94b0be5b8390", "content": "{\"sha\": \"0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"node_id\": \"C_kwDOAr2gadoAKDBhZDgzZjkxMzlkYWY3MGE3OTE1NjBmNWM3MmY5NGIwYmU1YjgzOTA\", \"commit\": {\"author\": {\"name\": \"Shahbaz Youssefi\", \"email\": \"syoussefi@google.com\", \"date\": \"2022-02-11T15:29:42Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-02-11T15:29:42Z\"}, \"message\": \"spirv-diff: Match OpSpecConstantComposite correctly (#4704)\\n\\nOpSpecConstantComposite is not decorated with SpecId, and so is matched\\r\\nsimilarly to OpConstantComposite.\", \"tree\": {\"sha\": \"e2a3dd52504cf5d906364ab4c0535c9060c6a35a\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/trees/e2a3dd52504cf5d906364ab4c0535c9060c6a35a\"}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/git/commits/0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiBoDmCRBK7hj4Ov3rIwAAFn0IAIffrh8/iEBw/cu413Mh7HO4\\n509TGXb/kM+F+dRsMBKo58wBKjX1Y4kBINg++0BVH4gt7HJWJdhOgrHMZ6VYBePZ\\n96uuk7K5En56j33ZIoWURgcq+DULobaVY9rGMp5P4Oyp7LdNvVYffjm2FNwXDyT0\\nNE5InLNYKUh+LdNHPYgzaiz+5xZq7KU1NuxHW4lsnlABqUpbl71s3zngIrRIQK60\\nRuRMYA85QhoBcs2fw71a7zg5mQaitDDZghXTOhyYvWsSH8zh19VsHX9yEGLHmKc2\\ngXQUQyUAZ01Po1soIlS2uy2CkQsl+9YWIagXWseNwFOArTSX6Kx7UKU+sSFPW+4=\\n=FTIv\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree e2a3dd52504cf5d906364ab4c0535c9060c6a35a\\nparent 940127a77d3ad795a4a1422fbeaad50c9f19f2ea\\nauthor Shahbaz Youssefi <syoussefi@google.com> 1644593382 -0500\\ncommitter GitHub <noreply@github.com> 1644593382 +0000\\n\\nspirv-diff: Match OpSpecConstantComposite correctly (#4704)\\n\\nOpSpecConstantComposite is not decorated with SpecId, and so is matched\\r\\nsimilarly to OpConstantComposite.\"}}, \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"comments_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/0ad83f9139daf70a791560f5c72f94b0be5b8390/comments\", \"author\": {\"login\": \"ShabbyX\", \"id\": 1067408, \"node_id\": \"MDQ6VXNlcjEwNjc0MDg=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1067408?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ShabbyX\", \"html_url\": \"https://github.com/ShabbyX\", \"followers_url\": \"https://api.github.com/users/ShabbyX/followers\", \"following_url\": \"https://api.github.com/users/ShabbyX/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ShabbyX/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ShabbyX/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ShabbyX/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ShabbyX/orgs\", \"repos_url\": \"https://api.github.com/users/ShabbyX/repos\", \"events_url\": \"https://api.github.com/users/ShabbyX/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ShabbyX/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"940127a77d3ad795a4a1422fbeaad50c9f19f2ea\", \"url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/commits/940127a77d3ad795a4a1422fbeaad50c9f19f2ea\", \"html_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/commit/940127a77d3ad795a4a1422fbeaad50c9f19f2ea\"}], \"stats\": {\"total\": 234, \"additions\": 233, \"deletions\": 1}, \"files\": [{\"sha\": \"12172bf11daa0378f388ddcdd8216b827b1a04c5\", \"filename\": \"source/diff/diff.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0ad83f9139daf70a791560f5c72f94b0be5b8390/source%2Fdiff%2Fdiff.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0ad83f9139daf70a791560f5c72f94b0be5b8390/source%2Fdiff%2Fdiff.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/source%2Fdiff%2Fdiff.cpp?ref=0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"patch\": \"@@ -2064,6 +2064,7 @@ void Differ::MatchConstants() {\\n         case SpvOpConstant:\\n           return MatchOpConstant(src_inst, dst_inst, flexibility);\\n         case SpvOpConstantComposite:\\n+        case SpvOpSpecConstantComposite:\\n           // Composite constants must match in type and value.\\n           //\\n           // TODO: match OpConstantNull with OpConstantComposite with all zeros\\n@@ -2092,7 +2093,6 @@ void Differ::MatchConstants() {\\n         case SpvOpSpecConstantTrue:\\n         case SpvOpSpecConstantFalse:\\n         case SpvOpSpecConstant:\\n-        case SpvOpSpecConstantComposite:\\n         case SpvOpSpecConstantOp:\\n           // Match spec constants by name if available, then by the SpecId\\n           // decoration.\"}, {\"sha\": \"f4724802222d2987878130583525bec218854f56\", \"filename\": \"test/diff/diff_files/diff_test_files_autogen.cmake\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fdiff_test_files_autogen.cmake\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fdiff_test_files_autogen.cmake\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fdiff%2Fdiff_files%2Fdiff_test_files_autogen.cmake?ref=0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"patch\": \"@@ -33,5 +33,6 @@ list(APPEND DIFF_TEST_FILES\\n \\\"diff_files/reordered_switch_blocks_autogen.cpp\\\"\\n \\\"diff_files/small_functions_small_diffs_autogen.cpp\\\"\\n \\\"diff_files/spec_constant_array_size_autogen.cpp\\\"\\n+\\\"diff_files/spec_constant_composite_autogen.cpp\\\"\\n \\\"diff_files/unrelated_shaders_autogen.cpp\\\"\\n )\"}, {\"sha\": \"e4b52cb658c85442887cc2c1be7400bb2033cfcd\", \"filename\": \"test/diff/diff_files/spec_constant_composite_autogen.cpp\", \"status\": \"added\", \"additions\": 186, \"deletions\": 0, \"changes\": 186, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_autogen.cpp\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_autogen.cpp\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_autogen.cpp?ref=0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"patch\": \"@@ -0,0 +1,186 @@\\n+// GENERATED FILE - DO NOT EDIT.\\n+// Generated by generate_tests.py\\n+//\\n+// Copyright (c) 2022 Google LLC.\\n+//\\n+// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n+// you may not use this file except in compliance with the License.\\n+// You may obtain a copy of the License at\\n+//\\n+//     http://www.apache.org/licenses/LICENSE-2.0\\n+//\\n+// Unless required by applicable law or agreed to in writing, software\\n+// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n+// See the License for the specific language governing permissions and\\n+// limitations under the License.\\n+\\n+#include \\\"../diff_test_utils.h\\\"\\n+\\n+#include \\\"gtest/gtest.h\\\"\\n+\\n+namespace spvtools {\\n+namespace diff {\\n+namespace {\\n+\\n+// Tests OpSpecConstantComposite matching.\\n+constexpr char kSrc[] = R\\\"(               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpName %main \\\"main\\\"\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 1\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd)\\\";\\n+constexpr char kDst[] = R\\\"(               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpName %main \\\"main\\\"\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 2048\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\\n+)\\\";\\n+\\n+TEST(DiffTest, SpecConstantComposite) {\\n+  constexpr char kDiff[] = R\\\"( ; SPIR-V\\n+ ; Version: 1.6\\n+ ; Generator: Khronos SPIR-V Tools Assembler; 0\\n+ ; Bound: 12\\n+ ; Schema: 0\\n+ OpCapability Shader\\n+ %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+ OpMemoryModel Logical GLSL450\\n+ OpEntryPoint GLCompute %2 \\\"main\\\"\\n+ OpExecutionMode %2 LocalSize 1 1 1\\n+ OpSource GLSL 450\\n+ OpName %2 \\\"main\\\"\\n+ OpDecorate %7 SpecId 3\\n+ OpDecorate %8 SpecId 4\\n+ OpDecorate %4 BuiltIn WorkgroupSize\\n+ %6 = OpTypeVoid\\n+ %3 = OpTypeFunction %6\\n+ %9 = OpTypeInt 32 0\\n+-%7 = OpSpecConstant %9 1\\n++%7 = OpSpecConstant %9 2048\\n+ %8 = OpSpecConstant %9 1\\n+ %10 = OpConstant %9 1\\n+ %11 = OpTypeVector %9 3\\n+ %4 = OpSpecConstantComposite %11 %7 %8 %10\\n+ %2 = OpFunction %6 None %3\\n+ %5 = OpLabel\\n+ OpReturn\\n+ OpFunctionEnd\\n+)\\\";\\n+  Options options;\\n+  DoStringDiffTest(kSrc, kDst, kDiff, options);\\n+}\\n+\\n+TEST(DiffTest, SpecConstantCompositeNoDebug) {\\n+  constexpr char kSrcNoDebug[] = R\\\"(               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 1\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\\n+)\\\";\\n+  constexpr char kDstNoDebug[] = R\\\"(               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 2048\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\\n+)\\\";\\n+  constexpr char kDiff[] = R\\\"( ; SPIR-V\\n+ ; Version: 1.6\\n+ ; Generator: Khronos SPIR-V Tools Assembler; 0\\n+ ; Bound: 12\\n+ ; Schema: 0\\n+ OpCapability Shader\\n+ %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+ OpMemoryModel Logical GLSL450\\n+ OpEntryPoint GLCompute %2 \\\"main\\\"\\n+ OpExecutionMode %2 LocalSize 1 1 1\\n+ OpSource GLSL 450\\n+ OpDecorate %7 SpecId 3\\n+ OpDecorate %8 SpecId 4\\n+ OpDecorate %4 BuiltIn WorkgroupSize\\n+ %6 = OpTypeVoid\\n+ %3 = OpTypeFunction %6\\n+ %9 = OpTypeInt 32 0\\n+-%7 = OpSpecConstant %9 1\\n++%7 = OpSpecConstant %9 2048\\n+ %8 = OpSpecConstant %9 1\\n+ %10 = OpConstant %9 1\\n+ %11 = OpTypeVector %9 3\\n+ %4 = OpSpecConstantComposite %11 %7 %8 %10\\n+ %2 = OpFunction %6 None %3\\n+ %5 = OpLabel\\n+ OpReturn\\n+ OpFunctionEnd\\n+)\\\";\\n+  Options options;\\n+  DoStringDiffTest(kSrcNoDebug, kDstNoDebug, kDiff, options);\\n+}\\n+\\n+}  // namespace\\n+}  // namespace diff\\n+}  // namespace spvtools\"}, {\"sha\": \"3ab8d4d3116e0ba546634cb3e010cb6574109d55\", \"filename\": \"test/diff/diff_files/spec_constant_composite_dst.spvasm\", \"status\": \"added\", \"additions\": 22, \"deletions\": 0, \"changes\": 22, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_dst.spvasm\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_dst.spvasm\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_dst.spvasm?ref=0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"patch\": \"@@ -0,0 +1,22 @@\\n+               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpName %main \\\"main\\\"\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 2048\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\"}, {\"sha\": \"ee48ef9dbc67294270146d5ac14624332de4fe2c\", \"filename\": \"test/diff/diff_files/spec_constant_composite_src.spvasm\", \"status\": \"added\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/blob/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_src.spvasm\", \"raw_url\": \"https://github.com/KhronosGroup/SPIRV-Tools/raw/0ad83f9139daf70a791560f5c72f94b0be5b8390/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_src.spvasm\", \"contents_url\": \"https://api.github.com/repos/KhronosGroup/SPIRV-Tools/contents/test%2Fdiff%2Fdiff_files%2Fspec_constant_composite_src.spvasm?ref=0ad83f9139daf70a791560f5c72f94b0be5b8390\", \"patch\": \"@@ -0,0 +1,23 @@\\n+;; Tests OpSpecConstantComposite matching.\\n+               OpCapability Shader\\n+          %1 = OpExtInstImport \\\"GLSL.std.450\\\"\\n+               OpMemoryModel Logical GLSL450\\n+               OpEntryPoint GLCompute %main \\\"main\\\"\\n+               OpExecutionMode %main LocalSize 1 1 1\\n+               OpSource GLSL 450\\n+               OpName %main \\\"main\\\"\\n+               OpDecorate %7 SpecId 3\\n+               OpDecorate %8 SpecId 4\\n+               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize\\n+       %void = OpTypeVoid\\n+          %3 = OpTypeFunction %void\\n+       %uint = OpTypeInt 32 0\\n+          %7 = OpSpecConstant %uint 1\\n+          %8 = OpSpecConstant %uint 1\\n+     %uint_1 = OpConstant %uint 1\\n+     %v3uint = OpTypeVector %uint 3\\n+%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %7 %8 %uint_1\\n+       %main = OpFunction %void None %3\\n+          %5 = OpLabel\\n+               OpReturn\\n+               OpFunctionEnd\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvRHluYW1vUklPL2R5bmFtb3Jpby9jb21taXRzLzQ1MmMxN2FiZmQxOWZkZWZmZjUyZDNmM2Q0ZTJiNzZhZjgwOWM5M2Qi.json", "commit": "https://api.github.com/repos/DynamoRIO/dynamorio/commits/452c17abfd19fdefff52d3f3d4e2b76af809c93d", "content": "{\"sha\": \"452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"node_id\": \"C_kwDOAZ-xt9oAKDQ1MmMxN2FiZmQxOWZkZWZmZjUyZDNmM2Q0ZTJiNzZhZjgwOWM5M2Q\", \"commit\": {\"author\": {\"name\": \"Kyle Huey\", \"email\": \"khuey@kylehuey.com\", \"date\": \"2022-09-12T22:54:53Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-09-12T22:54:53Z\"}, \"message\": \"i#5644 Apply EVEX compressed disp when segment prefixes are present (#5647)\\n\\nThe current behavior is simply a bug, the compressed displacement\\r\\nadjustment needs to be performed whether segment prefixes are present\\r\\nor not.\\r\\n\\r\\nFixes #5644\", \"tree\": {\"sha\": \"b0512219f07d8f783795c1424c8a0b71f99c45e7\", \"url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/git/trees/b0512219f07d8f783795c1424c8a0b71f99c45e7\"}, \"url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/git/commits/452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjH7i9CRBK7hj4Ov3rIwAAm1IIAH2HKMRNAoKsQNOsi2xXhCxO\\nogSbyszdHIaae8aaAMT5KJEf08A9zIUgcWMtlpaWXzrhEFglJ8TW5qgc87hdEHRO\\ntvomv95tZPY4GnoVnr3dmTCNysC5uMat7QjTjtXUvSNlPMkdhlTccSRp4GdJpOpM\\nRTCd4w+4ySqRfp198g5mAf/+MK+Szrj/an/d5d1K2WJ/aRtjgj45N3Q7F+k5Gqf+\\nM5TVUkVnK3JSFlJaaknHZBCbTztKlPkEOPI3x4Nnih9H0zvpoLR/T7wwoVSNVCXu\\nY3+KGxQqjjyIzpXgYrW5+gS+fxsW0XwFekhHmT0fRBrlP44tjicCS6g0REDIyTQ=\\n=/cOF\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree b0512219f07d8f783795c1424c8a0b71f99c45e7\\nparent b73a792ab8625994d0d0bfc6224e2eab0f18a9f6\\nauthor Kyle Huey <khuey@kylehuey.com> 1663023293 -0700\\ncommitter GitHub <noreply@github.com> 1663023293 -0700\\n\\ni#5644 Apply EVEX compressed disp when segment prefixes are present (#5647)\\n\\nThe current behavior is simply a bug, the compressed displacement\\r\\nadjustment needs to be performed whether segment prefixes are present\\r\\nor not.\\r\\n\\r\\nFixes #5644\"}}, \"url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/commits/452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"html_url\": \"https://github.com/DynamoRIO/dynamorio/commit/452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"comments_url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/commits/452c17abfd19fdefff52d3f3d4e2b76af809c93d/comments\", \"author\": {\"login\": \"khuey\", \"id\": 325892, \"node_id\": \"MDQ6VXNlcjMyNTg5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/325892?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/khuey\", \"html_url\": \"https://github.com/khuey\", \"followers_url\": \"https://api.github.com/users/khuey/followers\", \"following_url\": \"https://api.github.com/users/khuey/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/khuey/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/khuey/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/khuey/subscriptions\", \"organizations_url\": \"https://api.github.com/users/khuey/orgs\", \"repos_url\": \"https://api.github.com/users/khuey/repos\", \"events_url\": \"https://api.github.com/users/khuey/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/khuey/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"b73a792ab8625994d0d0bfc6224e2eab0f18a9f6\", \"url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/commits/b73a792ab8625994d0d0bfc6224e2eab0f18a9f6\", \"html_url\": \"https://github.com/DynamoRIO/dynamorio/commit/b73a792ab8625994d0d0bfc6224e2eab0f18a9f6\"}], \"stats\": {\"total\": 32, \"additions\": 27, \"deletions\": 5}, \"files\": [{\"sha\": \"c203ece6ffdb54ec22a4fb4c999af43392ae0c13\", \"filename\": \"core/ir/x86/decode.c\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 5, \"changes\": 9, \"blob_url\": \"https://github.com/DynamoRIO/dynamorio/blob/452c17abfd19fdefff52d3f3d4e2b76af809c93d/core%2Fir%2Fx86%2Fdecode.c\", \"raw_url\": \"https://github.com/DynamoRIO/dynamorio/raw/452c17abfd19fdefff52d3f3d4e2b76af809c93d/core%2Fir%2Fx86%2Fdecode.c\", \"contents_url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/contents/core%2Fir%2Fx86%2Fdecode.c?ref=452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"patch\": \"@@ -1757,7 +1757,10 @@ decode_modrm(decode_info_t *di, byte optype, opnd_size_t opsize, opnd_t *reg_opn\\n             compressed_disp_scale = decode_get_compressed_disp_scale(di);\\n             if (compressed_disp_scale == -1)\\n                 return false;\\n-            needs_full_disp = disp % compressed_disp_scale != 0;\\n+            if (di->mod == 1)\\n+                disp *= compressed_disp_scale;\\n+            else\\n+                needs_full_disp = disp % compressed_disp_scale != 0;\\n         }\\n         force_full_disp = !needs_full_disp && di->has_disp && disp >= INT8_MIN &&\\n             disp <= INT8_MAX && di->mod == 2;\\n@@ -1772,10 +1775,6 @@ decode_modrm(decode_info_t *di, byte optype, opnd_size_t opsize, opnd_t *reg_opn\\n              * specify a segment selector and address.  The opcode must be\\n              * examined to know how to interpret those 6 bytes.\\n              */\\n-            if (di->evex_encoded) {\\n-                if (di->mod == 1)\\n-                    disp *= compressed_disp_scale;\\n-            }\\n             *rm_opnd = opnd_create_base_disp_ex(base_reg, index_reg, scale, disp,\\n                                                 resolve_variable_size(di, opsize, false),\\n                                                 encode_zero_disp, force_full_disp,\"}, {\"sha\": \"35380d848bde30e3075245ff3fe2a132f0ef6a2e\", \"filename\": \"suite/tests/api/ir_x86.c\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/DynamoRIO/dynamorio/blob/452c17abfd19fdefff52d3f3d4e2b76af809c93d/suite%2Ftests%2Fapi%2Fir_x86.c\", \"raw_url\": \"https://github.com/DynamoRIO/dynamorio/raw/452c17abfd19fdefff52d3f3d4e2b76af809c93d/suite%2Ftests%2Fapi%2Fir_x86.c\", \"contents_url\": \"https://api.github.com/repos/DynamoRIO/dynamorio/contents/suite%2Ftests%2Fapi%2Fir_x86.c?ref=452c17abfd19fdefff52d3f3d4e2b76af809c93d\", \"patch\": \"@@ -2707,6 +2707,27 @@ test_simd_zeroes_upper(void *dc)\\n     instr_destroy(dc, instr);\\n }\\n \\n+static void\\n+test_evex_compressed_disp_with_segment_prefix(void *dc)\\n+{\\n+#ifdef X64\\n+    byte *pc;\\n+    const byte b[] = { 0x2e, 0x67, 0x62, 0x01, 0xc5, 0x00, 0xc4, 0x62, 0x21, 0x00 };\\n+    char dbuf[512];\\n+    int len;\\n+\\n+    pc =\\n+        disassemble_to_buffer(dc, (byte *)b, (byte *)b, false /*no pc*/,\\n+                              false /*no bytes*/, dbuf, BUFFER_SIZE_ELEMENTS(dbuf), &len);\\n+    ASSERT(pc == &b[0] + sizeof(b));\\n+    ASSERT(\\n+        strcmp(\\n+            dbuf,\\n+            \\\"addr32 vpinsrw %xmm23[14byte] %cs:0x42(%r10d)[2byte] $0x00 -> %xmm28\\\\n\\\") ==\\n+        0);\\n+#endif\\n+}\\n+\\n int\\n main(int argc, char *argv[])\\n {\\n@@ -2794,6 +2815,8 @@ main(int argc, char *argv[])\\n \\n     test_simd_zeroes_upper(dcontext);\\n \\n+    test_evex_compressed_disp_with_segment_prefix(dcontext);\\n+\\n #ifndef STANDALONE_DECODER /* speed up compilation */\\n     test_all_opcodes_2_avx512_vex(dcontext);\\n     test_all_opcodes_3_avx512_vex(dcontext);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81NDVhOWIwZjUxZDEwNTA0MWI0NzJmODY0OWE4MTc5NTUwNTc2YzcyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/545a9b0f51d105041b472f8649a8179550576c72", "content": "{\"sha\": \"545a9b0f51d105041b472f8649a8179550576c72\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NTQ1YTliMGY1MWQxMDUwNDFiNDcyZjg2NDlhODE3OTU1MDU3NmM3Mg==\", \"commit\": {\"author\": {\"name\": \"Duncan P. N. Exon Smith\", \"email\": \"dexonsmith@apple.com\", \"date\": \"2014-12-07T17:56:16Z\"}, \"committer\": {\"name\": \"Duncan P. N. Exon Smith\", \"email\": \"dexonsmith@apple.com\", \"date\": \"2014-12-07T17:56:16Z\"}, \"message\": \"IR: Add missing tests for function-local metadata\\n\\nAdd assembly and bitcode tests that I neglected to add in r223564 (IR:\\nDisallow complicated function-local metadata) and r223574 (IR: Disallow\\nfunction-local metadata attachments).\\n\\nFound a couple of bugs:\\n\\n  - The error message for function-local attachments gave the wrong line\\n    number -- it indicated the next token (typically on the next line)\\n    instead of the token that started the attachment.  Fixed.\\n\\n  - Metadata arguments of the form `!{i32 0, i32 %v}` (or with the\\n    arguments reversed) fired an assertion in `ValueEnumerator` in LLVM\\n    v3.5, so I suppose this never really worked.  I suppose this was\\n    \\\"fixed\\\" by r223564.\\n\\n(Thanks to dblaikie for pointing out my omission.)\\n\\nPart of PR21532.\\n\\nllvm-svn: 223616\", \"tree\": {\"sha\": \"571cfd5a6080e245379ddeef481e2d3927653456\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/571cfd5a6080e245379ddeef481e2d3927653456\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/545a9b0f51d105041b472f8649a8179550576c72\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/545a9b0f51d105041b472f8649a8179550576c72\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/545a9b0f51d105041b472f8649a8179550576c72\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/545a9b0f51d105041b472f8649a8179550576c72/comments\", \"author\": {\"login\": \"dexonsmith\", \"id\": 1334620, \"node_id\": \"MDQ6VXNlcjEzMzQ2MjA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1334620?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dexonsmith\", \"html_url\": \"https://github.com/dexonsmith\", \"followers_url\": \"https://api.github.com/users/dexonsmith/followers\", \"following_url\": \"https://api.github.com/users/dexonsmith/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dexonsmith/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dexonsmith/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dexonsmith/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dexonsmith/orgs\", \"repos_url\": \"https://api.github.com/users/dexonsmith/repos\", \"events_url\": \"https://api.github.com/users/dexonsmith/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dexonsmith/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dexonsmith\", \"id\": 1334620, \"node_id\": \"MDQ6VXNlcjEzMzQ2MjA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1334620?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dexonsmith\", \"html_url\": \"https://github.com/dexonsmith\", \"followers_url\": \"https://api.github.com/users/dexonsmith/followers\", \"following_url\": \"https://api.github.com/users/dexonsmith/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dexonsmith/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dexonsmith/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dexonsmith/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dexonsmith/orgs\", \"repos_url\": \"https://api.github.com/users/dexonsmith/repos\", \"events_url\": \"https://api.github.com/users/dexonsmith/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dexonsmith/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fa58e5e111d97c63886df3ca1d5a0af3f221e45e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fa58e5e111d97c63886df3ca1d5a0af3f221e45e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fa58e5e111d97c63886df3ca1d5a0af3f221e45e\"}], \"stats\": {\"total\": 74, \"additions\": 73, \"deletions\": 1}, \"files\": [{\"sha\": \"e1c00cc4af0e9626e04b498b1535954f865a1db1\", \"filename\": \"llvm/lib/AsmParser/LLParser.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Flib%2FAsmParser%2FLLParser.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Flib%2FAsmParser%2FLLParser.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAsmParser%2FLLParser.cpp?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -1532,7 +1532,7 @@ bool LLParser::ParseInstructionMetadata(Instruction *Inst,\\n         return true;\\n       assert(ID.Kind == ValID::t_MDNode);\\n       if (ID.MDNodeVal->isFunctionLocal())\\n-        return TokError(\\\"unexpected function-local metadata\\\");\\n+        return Error(Loc, \\\"unexpected function-local metadata\\\");\\n       Inst->setMetadata(MDK, ID.MDNodeVal);\\n     } else {\\n       unsigned NodeID = 0;\"}, {\"sha\": \"71d8fa1b0e1fa508563dd099f65e8589b88fde20\", \"filename\": \"llvm/test/Assembler/functionlocal-metadata-attachments.ll\", \"status\": \"added\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-attachments.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-attachments.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-attachments.ll?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -0,0 +1,7 @@\\n+; RUN: not llvm-as < %s -disable-output 2>&1 | FileCheck %s\\n+\\n+define void @foo(i32 %v) {\\n+entry:\\n+; CHECK: <stdin>:[[@LINE+1]]:{{[0-9]+}}: error: unexpected function-local metadata\\n+  ret void, !foo !{i32 %v}\\n+}\"}, {\"sha\": \"81337db39fe6e4eee1f474fa7f1dc785b4d11db1\", \"filename\": \"llvm/test/Assembler/functionlocal-metadata-complex-1.ll\", \"status\": \"added\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-1.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-1.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-1.ll?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -0,0 +1,10 @@\\n+; RUN: not llvm-as < %s -disable-output 2>&1 | FileCheck %s\\n+\\n+define void @foo(i32 %v) {\\n+entry:\\n+; CHECK: <stdin>:[[@LINE+1]]:{{[0-9]+}}: error: unexpected operand after function-local metadata\\n+  call void @llvm.bar(metadata !{i32 %v, i32 0})\\n+  ret void\\n+}\\n+\\n+declare void @llvm.bar(metadata)\"}, {\"sha\": \"15a4412c53510ef106135f900a0fafff442c1a4f\", \"filename\": \"llvm/test/Assembler/functionlocal-metadata-complex-2.ll\", \"status\": \"added\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-2.ll?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -0,0 +1,10 @@\\n+; RUN: not llvm-as < %s -disable-output 2>&1 | FileCheck %s\\n+\\n+define void @foo(i32 %v) {\\n+entry:\\n+; CHECK: <stdin>:[[@LINE+1]]:{{[0-9]+}}: error: unexpected function-local metadata\\n+  call void @llvm.bar(metadata !{i32 0, i32 %v})\\n+  ret void\\n+}\\n+\\n+declare void @llvm.bar(metadata)\"}, {\"sha\": \"1590efa72b6d570ed48eadf2dd152e4b61f242eb\", \"filename\": \"llvm/test/Assembler/functionlocal-metadata-complex-3.ll\", \"status\": \"added\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-3.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-3.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAssembler%2Ffunctionlocal-metadata-complex-3.ll?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -0,0 +1,10 @@\\n+; RUN: not llvm-as < %s -disable-output 2>&1 | FileCheck %s\\n+\\n+define void @foo(i32 %v) {\\n+entry:\\n+; CHECK: <stdin>:[[@LINE+1]]:{{[0-9]+}}: error: unexpected nested function-local metadata\\n+  call void @llvm.bar(metadata !{metadata !{i32 %v}})\\n+  ret void\\n+}\\n+\\n+declare void @llvm.bar(metadata)\"}, {\"sha\": \"58fb64c9b4bf4c922928efcded60ea1197c880e5\", \"filename\": \"llvm/test/Bitcode/function-local-metadata.ll\", \"status\": \"added\", \"additions\": 35, \"deletions\": 0, \"changes\": 35, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll?ref=545a9b0f51d105041b472f8649a8179550576c72\", \"patch\": \"@@ -0,0 +1,35 @@\\n+; RUN: llvm-dis < %s.bc | FileCheck %s\\n+\\n+; Check that function-local metadata is dropped correctly when it's not a\\n+; direct argument to a call instruction.\\n+;\\n+; Bitcode assembled by llvm-as v3.5.0.\\n+\\n+define void @foo(i32 %v) {\\n+; CHECK: entry:\\n+entry:\\n+; CHECK-NEXT: call void @llvm.bar(metadata !{i32 %v})\\n+  call void @llvm.bar(metadata !{i32 %v})\\n+\\n+; Note: these supposedly legal instructions fired an assertion in llvm-as:\\n+;\\n+; Assertion failed: (I != ValueMap.end() && \\\"Value not in slotcalculator!\\\"), function getValueID, file lib/Bitcode/Writer/ValueEnumerator.cpp, line 138.\\n+;\\n+; So, I didn't test them; it looks like bitcode compatability is irrelevant.\\n+  ; call void @llvm.bar(metadata !{i32 0, i32 %v})\\n+  ; call void @llvm.bar(metadata !{i32 %v, i32 0})\\n+  ; call void @llvm.bar(metadata !{metadata !{}, i32 %v})\\n+  ; call void @llvm.bar(metadata !{i32 %v, metadata !{}})\\n+\\n+; CHECK-NEXT: call void @llvm.bar(metadata !0)\\n+; CHECK-NEXT: call void @llvm.bar(metadata !0)\\n+  call void @llvm.bar(metadata !{i32 %v, i32 %v})\\n+  call void @llvm.bar(metadata !{metadata !{i32 %v}})\\n+\\n+; CHECK-NEXT: ret void{{$}}\\n+  ret void, !baz !{i32 %v}\\n+}\\n+\\n+declare void @llvm.bar(metadata)\\n+\\n+; CHECK: !0 = metadata !{}\"}, {\"sha\": \"6323ca4a6a30af02888744d0285cff3283a0e607\", \"filename\": \"llvm/test/Bitcode/function-local-metadata.ll.bc\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll.bc\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/545a9b0f51d105041b472f8649a8179550576c72/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll.bc\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Ffunction-local-metadata.ll.bc?ref=545a9b0f51d105041b472f8649a8179550576c72\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yN2RlOWIwZjcwMDFkM2RhOTQyM2UzZTliN2IxNzU2NWEzOGMxYjUxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/27de9b0f7001d3da9423e3e9b7b17565a38c1b51", "content": "{\"sha\": \"27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MjdkZTliMGY3MDAxZDNkYTk0MjNlM2U5YjdiMTc1NjVhMzhjMWI1MQ==\", \"commit\": {\"author\": {\"name\": \"Bruno Cardoso Lopes\", \"email\": \"bruno.cardoso@gmail.com\", \"date\": \"2014-12-08T18:18:32Z\"}, \"committer\": {\"name\": \"Bruno Cardoso Lopes\", \"email\": \"bruno.cardoso@gmail.com\", \"date\": \"2014-12-08T18:18:32Z\"}, \"message\": \"[CompactUnwind] Fix register encoding logic\\n\\nFix a compact unwind encoding logic bug which would try to encode\\nmore callee saved registers than it should, leading to early bail out\\nin the encoding logic and abusive use of DWARF frame mode unnecessarily.\\n\\nAlso remove no-compact-unwind.ll which was testing the wrong thing\\nbased on this bug and move it to valid 'compact unwind' tests. Added\\nother few more tests too.\\n\\nllvm-svn: 223676\", \"tree\": {\"sha\": \"b8509f3ef715d1c2d955bf7c25de5676ab9de17a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/b8509f3ef715d1c2d955bf7c25de5676ab9de17a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/comments\", \"author\": {\"login\": \"bcardosolopes\", \"id\": 7115212, \"node_id\": \"MDQ6VXNlcjcxMTUyMTI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7115212?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bcardosolopes\", \"html_url\": \"https://github.com/bcardosolopes\", \"followers_url\": \"https://api.github.com/users/bcardosolopes/followers\", \"following_url\": \"https://api.github.com/users/bcardosolopes/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bcardosolopes/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bcardosolopes/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bcardosolopes/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bcardosolopes/orgs\", \"repos_url\": \"https://api.github.com/users/bcardosolopes/repos\", \"events_url\": \"https://api.github.com/users/bcardosolopes/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bcardosolopes/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"bcardosolopes\", \"id\": 7115212, \"node_id\": \"MDQ6VXNlcjcxMTUyMTI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7115212?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bcardosolopes\", \"html_url\": \"https://github.com/bcardosolopes\", \"followers_url\": \"https://api.github.com/users/bcardosolopes/followers\", \"following_url\": \"https://api.github.com/users/bcardosolopes/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bcardosolopes/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bcardosolopes/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bcardosolopes/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bcardosolopes/orgs\", \"repos_url\": \"https://api.github.com/users/bcardosolopes/repos\", \"events_url\": \"https://api.github.com/users/bcardosolopes/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bcardosolopes/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c02393604bc898100e4c2f2b8b01074f28c81432\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c02393604bc898100e4c2f2b8b01074f28c81432\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c02393604bc898100e4c2f2b8b01074f28c81432\"}], \"stats\": {\"total\": 226, \"additions\": 152, \"deletions\": 74}, \"files\": [{\"sha\": \"03a1e02f188dab651949a967c0907f3477f76de4\", \"filename\": \"llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Flib%2FTarget%2FX86%2FMCTargetDesc%2FX86AsmBackend.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Flib%2FTarget%2FX86%2FMCTargetDesc%2FX86AsmBackend.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FMCTargetDesc%2FX86AsmBackend.cpp?ref=27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"patch\": \"@@ -682,7 +682,7 @@ class DarwinX86AsmBackend : public X86AsmBackend {\\n     //     4       3\\n     //     5       3\\n     //\\n-    for (unsigned i = 0; i != CU_NUM_SAVED_REGS; ++i) {\\n+    for (unsigned i = 0; i < RegCount; ++i) {\\n       int CUReg = getCompactUnwindRegNum(SavedRegs[i]);\\n       if (CUReg == -1) return ~0U;\\n       SavedRegs[i] = CUReg;\"}, {\"sha\": \"d3b89a54e0b8491a26e918e196756f16023180f4\", \"filename\": \"llvm/test/CodeGen/X86/compact-unwind.ll\", \"status\": \"modified\", \"additions\": 79, \"deletions\": 9, \"changes\": 88, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Ftest%2FCodeGen%2FX86%2Fcompact-unwind.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Ftest%2FCodeGen%2FX86%2Fcompact-unwind.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fcompact-unwind.ll?ref=27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"patch\": \"@@ -1,12 +1,20 @@\\n ; RUN: llc < %s -disable-fp-elim -mtriple x86_64-apple-darwin11 -mcpu corei7 | FileCheck -check-prefix=ASM %s\\n ; RUN: llc < %s -disable-fp-elim -mtriple x86_64-apple-darwin11 -mcpu corei7 -filetype=obj -o - \\\\\\n-; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -s - \\\\\\n+; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -unwind-info - \\\\\\n ; RUN:  | FileCheck -check-prefix=CU %s\\n ; RUN: llc < %s -disable-fp-elim -mtriple x86_64-apple-darwin11 -mcpu corei7 \\\\\\n ; RUN:  | llvm-mc -triple x86_64-apple-darwin11 -filetype=obj -o - \\\\\\n-; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -s - \\\\\\n+; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -unwind-info - \\\\\\n ; RUN:  | FileCheck -check-prefix=FROM-ASM %s\\n \\n+; RUN: llc < %s -mtriple x86_64-apple-macosx10.8.0 -mcpu corei7 -filetype=obj -o - \\\\\\n+; RUN:  | llvm-objdump -triple x86_64-apple-macosx10.8.0 -unwind-info - \\\\\\n+; RUN:  | FileCheck -check-prefix=NOFP-CU %s\\n+; RUN: llc < %s -mtriple x86_64-apple-darwin11 -mcpu corei7 \\\\\\n+; RUN:  | llvm-mc -triple x86_64-apple-darwin11 -filetype=obj -o - \\\\\\n+; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -unwind-info - \\\\\\n+; RUN:  | FileCheck -check-prefix=NOFP-FROM-ASM %s\\n+\\n %ty = type { i8* }\\n \\n @gv = external global i32\\n@@ -17,15 +25,19 @@\\n ; Even though we can't encode %rax into the compact unwind, We still want to be\\n ; able to generate a compact unwind encoding in this particular case.\\n \\n-; CU:      Contents of section __compact_unwind:\\n-; CU-NEXT: 0020 00000000 00000000 1e000000 01000101\\n-; CU-NEXT: 0030 00000000 00000000 00000000 00000000\\n+; CU:    Contents of __compact_unwind section:\\n+; CU-NEXT:      Entry at offset 0x0:\\n+; CU-NEXT:        start:                0x0 _test0\\n+; CU-NEXT:        length:               0x1e\\n+; CU-NEXT:        compact encoding:     0x01010001\\n \\n-; FROM-ASM:      Contents of section __compact_unwind:\\n-; FROM-ASM-NEXT: 0020 00000000 00000000 1e000000 01000101\\n-; FROM-ASM-NEXT: 0030 00000000 00000000 00000000 00000000\\n+; FROM-ASM:    Contents of __compact_unwind section:\\n+; FROM-ASM-NEXT:      Entry at offset 0x0:\\n+; FROM-ASM-NEXT:        start:                0x0 _test0\\n+; FROM-ASM-NEXT:        length:               0x1e\\n+; FROM-ASM-NEXT:        compact encoding:     0x01010001\\n \\n-define i8* @foo(i64 %size) {\\n+define i8* @test0(i64 %size) {\\n   %addr = alloca i64, align 8\\n   %tmp20 = load i32* @gv, align 4\\n   %tmp21 = call i32 @bar()\\n@@ -39,3 +51,61 @@ define i8* @foo(i64 %size) {\\n }\\n \\n declare i32 @bar()\\n+\\n+%\\\"struct.dyld::MappedRanges\\\" = type { [400 x %struct.anon], %\\\"struct.dyld::MappedRanges\\\"* }\\n+%struct.anon = type { %class.ImageLoader*, i64, i64 }\\n+%class.ImageLoader = type { i32 (...)**, i8*, i8*, i32, i64, i64, i32, i32, %\\\"struct.ImageLoader::recursive_lock\\\"*, i16, i16, [4 x i8] }\\n+%\\\"struct.ImageLoader::recursive_lock\\\" = type { i32, i32 }\\n+\\n+@G1 = external hidden global %\\\"struct.dyld::MappedRanges\\\", align 8\\n+\\n+declare void @OSMemoryBarrier() optsize\\n+\\n+; Test the code below uses UNWIND_X86_64_MODE_STACK_IMMD compact unwind\\n+; encoding.\\n+\\n+; NOFP-CU:      Entry at offset 0x20:\\n+; NOFP-CU-NEXT:        start:                0x1d _test1\\n+; NOFP-CU-NEXT:        length:               0x42\\n+; NOFP-CU-NEXT:        compact encoding:     0x02040c0a\\n+\\n+; NOFP-FROM-ASM:      Entry at offset 0x20:\\n+; NOFP-FROM-ASM-NEXT:        start:                0x1d _test1\\n+; NOFP-FROM-ASM-NEXT:        length:               0x42\\n+; NOFP-FROM-ASM-NEXT:        compact encoding:     0x02040c0a\\n+\\n+define void @test1(%class.ImageLoader* %image) optsize ssp uwtable {\\n+entry:\\n+  br label %for.cond1.preheader\\n+\\n+for.cond1.preheader:                              ; preds = %for.inc10, %entry\\n+  %p.019 = phi %\\\"struct.dyld::MappedRanges\\\"* [ @G1, %entry ], [ %1, %for.inc10 ]\\n+  br label %for.body3\\n+\\n+for.body3:                                        ; preds = %for.inc, %for.cond1.preheader\\n+  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.inc ]\\n+  %image4 = getelementptr inbounds %\\\"struct.dyld::MappedRanges\\\"* %p.019, i64 0, i32 0, i64 %indvars.iv, i32 0\\n+  %0 = load %class.ImageLoader** %image4, align 8\\n+  %cmp5 = icmp eq %class.ImageLoader* %0, %image\\n+  br i1 %cmp5, label %if.then, label %for.inc\\n+\\n+if.then:                                          ; preds = %for.body3\\n+  tail call void @OSMemoryBarrier() optsize\\n+  store %class.ImageLoader* null, %class.ImageLoader** %image4, align 8\\n+  br label %for.inc\\n+\\n+for.inc:                                          ; preds = %if.then, %for.body3\\n+  %indvars.iv.next = add i64 %indvars.iv, 1\\n+  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\\n+  %exitcond = icmp eq i32 %lftr.wideiv, 400\\n+  br i1 %exitcond, label %for.inc10, label %for.body3\\n+\\n+for.inc10:                                        ; preds = %for.inc\\n+  %next = getelementptr inbounds %\\\"struct.dyld::MappedRanges\\\"* %p.019, i64 0, i32 1\\n+  %1 = load %\\\"struct.dyld::MappedRanges\\\"** %next, align 8\\n+  %cmp = icmp eq %\\\"struct.dyld::MappedRanges\\\"* %1, null\\n+  br i1 %cmp, label %for.end11, label %for.cond1.preheader\\n+\\n+for.end11:                                        ; preds = %for.inc10\\n+  ret void\\n+}\"}, {\"sha\": \"991cd4ed736306909b3d5f0a1eadeca5e5ce6d28\", \"filename\": \"llvm/test/CodeGen/X86/no-compact-unwind.ll\", \"status\": \"removed\", \"additions\": 0, \"deletions\": 64, \"changes\": 64, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/c02393604bc898100e4c2f2b8b01074f28c81432/llvm%2Ftest%2FCodeGen%2FX86%2Fno-compact-unwind.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/c02393604bc898100e4c2f2b8b01074f28c81432/llvm%2Ftest%2FCodeGen%2FX86%2Fno-compact-unwind.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fno-compact-unwind.ll?ref=c02393604bc898100e4c2f2b8b01074f28c81432\", \"patch\": \"@@ -1,64 +0,0 @@\\n-; RUN: llc < %s -mtriple x86_64-apple-macosx10.8.0 -mcpu corei7 -filetype=obj -o - \\\\\\n-; RUN:  | llvm-objdump -triple x86_64-apple-macosx10.8.0 -s - \\\\\\n-; RUN:  | FileCheck -check-prefix=CU %s\\n-; RUN: llc < %s -mtriple x86_64-apple-darwin11 -mcpu corei7 \\\\\\n-; RUN:  | llvm-mc -triple x86_64-apple-darwin11 -filetype=obj -o - \\\\\\n-; RUN:  | llvm-objdump -triple x86_64-apple-darwin11 -s - \\\\\\n-; RUN:  | FileCheck -check-prefix=FROM-ASM %s\\n-\\n-%\\\"struct.dyld::MappedRanges\\\" = type { [400 x %struct.anon], %\\\"struct.dyld::MappedRanges\\\"* }\\n-%struct.anon = type { %class.ImageLoader*, i64, i64 }\\n-%class.ImageLoader = type { i32 (...)**, i8*, i8*, i32, i64, i64, i32, i32, %\\\"struct.ImageLoader::recursive_lock\\\"*, i16, i16, [4 x i8] }\\n-%\\\"struct.ImageLoader::recursive_lock\\\" = type { i32, i32 }\\n-\\n-@G1 = external hidden global %\\\"struct.dyld::MappedRanges\\\", align 8\\n-\\n-declare void @OSMemoryBarrier() optsize\\n-\\n-; This compact unwind encoding indicates that we could not generate correct\\n-; compact unwind encodings for this function. This then defaults to using the\\n-; DWARF EH frame.\\n-\\n-; CU:      Contents of section __compact_unwind:\\n-; CU-NEXT: 0048 00000000 00000000 42000000 00000004\\n-; CU-NEXT: 0058 00000000 00000000 00000000 00000000\\n-\\n-; FROM-ASM:      Contents of section __compact_unwind:\\n-; FROM-ASM-NEXT: 0048 00000000 00000000 42000000 00000004\\n-; FROM-ASM-NEXT: 0058 00000000 00000000 00000000 00000000\\n-\\n-define void @func(%class.ImageLoader* %image) optsize ssp uwtable {\\n-entry:\\n-  br label %for.cond1.preheader\\n-\\n-for.cond1.preheader:                              ; preds = %for.inc10, %entry\\n-  %p.019 = phi %\\\"struct.dyld::MappedRanges\\\"* [ @G1, %entry ], [ %1, %for.inc10 ]\\n-  br label %for.body3\\n-\\n-for.body3:                                        ; preds = %for.inc, %for.cond1.preheader\\n-  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.inc ]\\n-  %image4 = getelementptr inbounds %\\\"struct.dyld::MappedRanges\\\"* %p.019, i64 0, i32 0, i64 %indvars.iv, i32 0\\n-  %0 = load %class.ImageLoader** %image4, align 8\\n-  %cmp5 = icmp eq %class.ImageLoader* %0, %image\\n-  br i1 %cmp5, label %if.then, label %for.inc\\n-\\n-if.then:                                          ; preds = %for.body3\\n-  tail call void @OSMemoryBarrier() optsize\\n-  store %class.ImageLoader* null, %class.ImageLoader** %image4, align 8\\n-  br label %for.inc\\n-\\n-for.inc:                                          ; preds = %if.then, %for.body3\\n-  %indvars.iv.next = add i64 %indvars.iv, 1\\n-  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\\n-  %exitcond = icmp eq i32 %lftr.wideiv, 400\\n-  br i1 %exitcond, label %for.inc10, label %for.body3\\n-\\n-for.inc10:                                        ; preds = %for.inc\\n-  %next = getelementptr inbounds %\\\"struct.dyld::MappedRanges\\\"* %p.019, i64 0, i32 1\\n-  %1 = load %\\\"struct.dyld::MappedRanges\\\"** %next, align 8\\n-  %cmp = icmp eq %\\\"struct.dyld::MappedRanges\\\"* %1, null\\n-  br i1 %cmp, label %for.end11, label %for.cond1.preheader\\n-\\n-for.end11:                                        ; preds = %for.inc10\\n-  ret void\\n-}\"}, {\"sha\": \"82be239d79c4ea2cf7b144827be7c6b6faa57959\", \"filename\": \"llvm/test/MC/X86/compact-unwind.s\", \"status\": \"added\", \"additions\": 72, \"deletions\": 0, \"changes\": 72, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Ftest%2FMC%2FX86%2Fcompact-unwind.s\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/27de9b0f7001d3da9423e3e9b7b17565a38c1b51/llvm%2Ftest%2FMC%2FX86%2Fcompact-unwind.s\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FMC%2FX86%2Fcompact-unwind.s?ref=27de9b0f7001d3da9423e3e9b7b17565a38c1b51\", \"patch\": \"@@ -0,0 +1,72 @@\\n+# RUN: llvm-mc -filetype=obj -triple=x86_64-apple-darwin10.0 %s | llvm-objdump -unwind-info - | FileCheck %s\\n+\\n+\\t.section\\t__TEXT,__text,regular,pure_instructions\\n+\\t.macosx_version_min 10, 10\\n+\\n+# Check that we emit compact-unwind info with UNWIND_X86_MODE_STACK_IND encoding\\n+\\n+# CHECK: Contents of __compact_unwind section:\\n+# CHECK-NEXT:   Entry at offset 0x0:\\n+# CHECK-NEXT:     start:                0x0 _test0\\n+# CHECK-NEXT:     length:               0x15\\n+# CHECK-NEXT:     compact encoding:     0x03056804\\n+\\t.globl\\t_test0\\n+_test0:                                  ## @test0\\n+\\t.cfi_startproc\\n+## BB#0:                                ## %entry\\n+\\tpushq\\t%rbp\\n+Ltmp0:\\n+\\t.cfi_def_cfa_offset 16\\n+\\tpushq\\t%rbx\\n+Ltmp1:\\n+\\t.cfi_def_cfa_offset 24\\n+\\tsubq\\t$14408, %rsp            ## imm = 0x3848\\n+Ltmp2:\\n+\\t.cfi_def_cfa_offset 14432\\n+Ltmp3:\\n+\\t.cfi_offset %rbx, -24\\n+Ltmp4:\\n+\\t.cfi_offset %rbp, -16\\n+\\txorl\\t%eax, %eax\\n+\\taddq\\t$14408, %rsp            ## imm = 0x3848\\n+\\tpopq\\t%rbx\\n+\\tpopq\\t%rbp\\n+\\tretq\\n+\\t.cfi_endproc\\n+\\n+# Check that we emit compact-unwind info with UNWIND_X86_MODE_STACK_IMMD encoding\\n+\\n+# CHECK:   Entry at offset 0x20:\\n+# CHECK-NEXT:     start:                0x15 _test1\\n+# CHECK-NEXT:     length:               0x15\\n+# CHECK-NEXT:     compact encoding:     0x02360804\\n+\\t.globl\\t_test1\\n+_test1:                                  ## @test1\\n+\\t.cfi_startproc\\n+## BB#0:                                ## %entry\\n+\\tpushq\\t%rbp\\n+Ltmp10:\\n+\\t.cfi_def_cfa_offset 16\\n+\\tpushq\\t%rbx\\n+Ltmp11:\\n+\\t.cfi_def_cfa_offset 24\\n+\\tsubq\\t$408, %rsp              ## imm = 0x198\\n+Ltmp12:\\n+\\t.cfi_def_cfa_offset 432\\n+Ltmp13:\\n+\\t.cfi_offset %rbx, -24\\n+Ltmp14:\\n+\\t.cfi_offset %rbp, -16\\n+\\txorl\\t%eax, %eax\\n+\\taddq\\t$408, %rsp              ## imm = 0x198\\n+\\tpopq\\t%rbx\\n+\\tpopq\\t%rbp\\n+\\tretq\\n+\\t.cfi_endproc\\n+\\n+\\t.section\\t__TEXT,__cstring,cstring_literals\\n+L_.str:                                 ## @.str\\n+\\t.asciz\\t\\\"%d\\\\n\\\"\\n+\\n+\\n+.subsections_via_symbols\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mMzc5YTZjNjg0ZDQ3NDg0ZmIxYTBlNDdkZjQzMjFmZWUyMWY0ZjZlIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f379a6c684d47484fb1a0e47df4321fee21f4f6e", "content": "{\"sha\": \"f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZjM3OWE2YzY4NGQ0NzQ4NGZiMWEwZTQ3ZGY0MzIxZmVlMjFmNGY2ZQ==\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2016-04-24T15:05:04Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2016-04-24T15:05:04Z\"}, \"message\": \"[X86][XOP] Fixed VPPERM permute op decoding (PR27472).\\n\\nFixed issue with VPPERM target shuffle mask decoding that was incorrectly masking off the 3-bit permute op with a 2-bit mask.\\n\\nllvm-svn: 267346\", \"tree\": {\"sha\": \"3f650beb57bb037c5b3be52570c125af5478fa60\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/3f650beb57bb037c5b3be52570c125af5478fa60\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f379a6c684d47484fb1a0e47df4321fee21f4f6e/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"03a04a58ea4a1200ce6773735f44c2d26e4d88a5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/03a04a58ea4a1200ce6773735f44c2d26e4d88a5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/03a04a58ea4a1200ce6773735f44c2d26e4d88a5\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"472474d566c0d78008a4f087e3cefcf64c1ceda2\", \"filename\": \"llvm/lib/Target/X86/Utils/X86ShuffleDecode.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f379a6c684d47484fb1a0e47df4321fee21f4f6e/llvm%2Flib%2FTarget%2FX86%2FUtils%2FX86ShuffleDecode.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f379a6c684d47484fb1a0e47df4321fee21f4f6e/llvm%2Flib%2FTarget%2FX86%2FUtils%2FX86ShuffleDecode.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FUtils%2FX86ShuffleDecode.cpp?ref=f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"patch\": \"@@ -367,7 +367,7 @@ void DecodeVPPERMMask(ArrayRef<uint64_t> RawMask,\\n       continue;\\n     }\\n \\n-    uint64_t PermuteOp = (M >> 5) & 0x3;\\n+    uint64_t PermuteOp = (M >> 5) & 0x7;\\n     if (PermuteOp == 4) {\\n       ShuffleMask.push_back(SM_SentinelZero);\\n       continue;\"}, {\"sha\": \"dda93aca9b8eceb1bc3f0bf6286eba6ac02b2700\", \"filename\": \"llvm/test/CodeGen/X86/vector-shuffle-combining-xop.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f379a6c684d47484fb1a0e47df4321fee21f4f6e/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining-xop.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f379a6c684d47484fb1a0e47df4321fee21f4f6e/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining-xop.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining-xop.ll?ref=f379a6c684d47484fb1a0e47df4321fee21f4f6e\", \"patch\": \"@@ -23,7 +23,7 @@ define <16 x i8> @combine_vpperm_identity(<16 x i8> %a0, <16 x i8> %a1) {\\n define <16 x i8> @combine_vpperm_zero(<16 x i8> %a0, <16 x i8> %a1) {\\n ; CHECK-LABEL: combine_vpperm_zero:\\n ; CHECK:       # BB#0:\\n-; CHECK-NEXT:    vpshufb {{.*#+}} xmm0 = xmm0[0],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero\\n+; CHECK-NEXT:    vxorps %xmm0, %xmm0, %xmm0\\n ; CHECK-NEXT:    retq\\n   %res0 = call <16 x i8> @llvm.x86.xop.vpperm(<16 x i8> %a0, <16 x i8> %a1, <16 x i8> <i8 128, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>)\\n   %res1 = call <16 x i8> @llvm.x86.xop.vpperm(<16 x i8> %res0, <16 x i8> undef, <16 x i8> <i8 0, i8 128, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85MzAzNWM4ZjQ3NTg5NTkwYjY1MDQxNjAzNTI0ZjQ4YTdjMDA3ZTFmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/93035c8f47589590b65041603524f48a7c007e1f", "content": "{\"sha\": \"93035c8f47589590b65041603524f48a7c007e1f\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OTMwMzVjOGY0NzU4OTU5MGI2NTA0MTYwMzUyNGY0OGE3YzAwN2UxZg==\", \"commit\": {\"author\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-04-24T22:23:13Z\"}, \"committer\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-04-24T22:23:13Z\"}, \"message\": \"Verifier: Verify that each inlinable callsite of a debug-info-bearing function\\nin a debug-info-bearing function has a debug location attached to it. Failure to\\ndo so causes an \\\"!dbg attachment points at wrong subprogram for function\\\"\\nassertion failure when the inliner sets up inline scope info.\\n\\nrdar://problem/25878916\\n\\nThis reaplies r267320 without changes after fixing an issue in the OpenMP IR\\ngenerator in clang.\\n\\nllvm-svn: 267370\", \"tree\": {\"sha\": \"59a23b722e790e923a44f3896d1dd1dbb2afb8d9\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/59a23b722e790e923a44f3896d1dd1dbb2afb8d9\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/93035c8f47589590b65041603524f48a7c007e1f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/93035c8f47589590b65041603524f48a7c007e1f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/93035c8f47589590b65041603524f48a7c007e1f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/93035c8f47589590b65041603524f48a7c007e1f/comments\", \"author\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1858c664de64fc8829bf09571aa82f6f4cea49b9\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/1858c664de64fc8829bf09571aa82f6f4cea49b9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/1858c664de64fc8829bf09571aa82f6f4cea49b9\"}], \"stats\": {\"total\": 77, \"additions\": 75, \"deletions\": 2}, \"files\": [{\"sha\": \"f8dd08239021bb08acc3d4435de698274132da29\", \"filename\": \"llvm/lib/IR/Verifier.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Flib%2FIR%2FVerifier.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Flib%2FIR%2FVerifier.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FVerifier.cpp?ref=93035c8f47589590b65041603524f48a7c007e1f\", \"patch\": \"@@ -2579,6 +2579,15 @@ void Verifier::verifyCallSite(CallSite CS) {\\n     }\\n   }\\n \\n+  // Verify that each inlinable callsite of a debug-info-bearing function in a\\n+  // debug-info-bearing function has a debug location attached to it. Failure to\\n+  // do so causes assertion failures when the inliner sets up inline scope info.\\n+  if (I->getFunction()->getSubprogram() && CS.getCalledFunction() &&\\n+      CS.getCalledFunction()->getSubprogram())\\n+    Assert(I->getDebugLoc(), \\\"inlinable function call in a function with debug \\\"\\n+                             \\\"info must have a !dbg location\\\",\\n+           I);\\n+\\n   visitInstruction(*I);\\n }\\n \"}, {\"sha\": \"891429e3ef19c233c75f923beec191b977998952\", \"filename\": \"llvm/test/DebugInfo/X86/arange-and-stub.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FDebugInfo%2FX86%2Farange-and-stub.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FDebugInfo%2FX86%2Farange-and-stub.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Farange-and-stub.ll?ref=93035c8f47589590b65041603524f48a7c007e1f\", \"patch\": \"@@ -18,7 +18,7 @@ define void @foo() !dbg !4 {\\n \\n define void @bar() personality i8* bitcast (void ()* @foo to i8*) !dbg !9 {\\n   invoke void @foo()\\n-          to label %invoke.cont unwind label %lpad\\n+          to label %invoke.cont unwind label %lpad, !dbg !19\\n \\n invoke.cont:                                      ; preds = %0\\n   ret void\\n@@ -50,3 +50,4 @@ lpad:                                             ; preds = %0\\n !16 = !DISubrange(count: 1)\\n !17 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n !18 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!19 = !DILocation(line: 0, scope: !9)\"}, {\"sha\": \"7fd6296c7ee170ef650d5aee9d23130359edb712\", \"filename\": \"llvm/test/DebugInfo/X86/dbg-declare-arg.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg-declare-arg.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg-declare-arg.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg-declare-arg.ll?ref=93035c8f47589590b65041603524f48a7c007e1f\", \"patch\": \"@@ -54,7 +54,7 @@ entry:\\n   store %class.A* %this, %class.A** %this.addr, align 8\\n   call void @llvm.dbg.declare(metadata %class.A** %this.addr, metadata !43, metadata !DIExpression()), !dbg !44\\n   %this1 = load %class.A*, %class.A** %this.addr\\n-  call void @_ZN1AD2Ev(%class.A* %this1)\\n+  call void @_ZN1AD2Ev(%class.A* %this1), !dbg !53\\n   ret void, !dbg !45\\n }\\n \\n@@ -124,3 +124,4 @@ entry:\\n !49 = distinct !DILexicalBlock(line: 2, column: 52, file: !51, scope: !25)\\n !51 = !DIFile(filename: \\\"a.cc\\\", directory: \\\"/private/tmp\\\")\\n !52 = !{i32 1, !\\\"Debug Info Version\\\", i32 3}\\n+!53 = !DILocation(line: 0, scope: !22)\"}, {\"sha\": \"2e7473917ec33deeb1842581769da76fdd1abf89\", \"filename\": \"llvm/test/Verifier/callsite-dbgloc.ll\", \"status\": \"added\", \"additions\": 62, \"deletions\": 0, \"changes\": 62, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FVerifier%2Fcallsite-dbgloc.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/93035c8f47589590b65041603524f48a7c007e1f/llvm%2Ftest%2FVerifier%2Fcallsite-dbgloc.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FVerifier%2Fcallsite-dbgloc.ll?ref=93035c8f47589590b65041603524f48a7c007e1f\", \"patch\": \"@@ -0,0 +1,62 @@\\n+; RUN: not llvm-as %s -o %t 2>&1 | FileCheck %s\\n+; Created and then edited from\\n+;   extern void i();\\n+;   void h() { i(); }\\n+;   void g() { h(); }\\n+;   void f() { g(); }\\n+;\\n+; Compiling this with inlining runs into the\\n+; \\\"!dbg attachment points at wrong subprogram for function\\\"\\n+; assertion.\\n+\\n+target datalayout = \\\"e-m:o-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-apple-macosx\\\"\\n+\\n+; Function Attrs: nounwind ssp uwtable\\n+define void @h() #0 !dbg !7 {\\n+entry:\\n+  call void (...) @i(), !dbg !9\\n+  ret void, !dbg !10\\n+}\\n+\\n+declare void @i(...) #1\\n+\\n+; Function Attrs: nounwind ssp uwtable\\n+define void @g() #0 !dbg !11 {\\n+entry:\\n+; Manually removed !dbg.\\n+; CHECK: inlinable function call in a function with debug info must have a !dbg location\\n+  call void @h()\\n+  ret void, !dbg !13\\n+}\\n+\\n+; Function Attrs: nounwind ssp uwtable\\n+define void @f() #0 !dbg !14 {\\n+entry:\\n+  call void @g(), !dbg !15\\n+  ret void, !dbg !16\\n+}\\n+\\n+attributes #0 = { nounwind ssp uwtable }\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4, !5}\\n+!llvm.ident = !{!6}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: \\\"clang version 3.9.0 (trunk 267186)\\\", isOptimized: false, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2)\\n+!1 = !DIFile(filename: \\\"test.c\\\", directory: \\\"/Volumes/Data/llvm\\\")\\n+!2 = !{}\\n+!3 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!5 = !{i32 1, !\\\"PIC Level\\\", i32 2}\\n+!6 = !{!\\\"clang version 3.9.0 (trunk 267186)\\\"}\\n+!7 = distinct !DISubprogram(name: \\\"h\\\", scope: !1, file: !1, line: 2, type: !8, isLocal: false, isDefinition: true, scopeLine: 2, isOptimized: false, unit: !0, variables: !2)\\n+!8 = !DISubroutineType(types: !2)\\n+!9 = !DILocation(line: 2, column: 12, scope: !7)\\n+!10 = !DILocation(line: 2, column: 17, scope: !7)\\n+!11 = distinct !DISubprogram(name: \\\"g\\\", scope: !1, file: !1, line: 3, type: !8, isLocal: false, isDefinition: true, scopeLine: 3, isOptimized: false, unit: !0, variables: !2)\\n+!12 = !DILocation(line: 3, column: 12, scope: !11)\\n+!13 = !DILocation(line: 3, column: 17, scope: !11)\\n+!14 = distinct !DISubprogram(name: \\\"f\\\", scope: !1, file: !1, line: 4, type: !8, isLocal: false, isDefinition: true, scopeLine: 4, isOptimized: false, unit: !0, variables: !2)\\n+!15 = !DILocation(line: 4, column: 12, scope: !14)\\n+!16 = !DILocation(line: 4, column: 17, scope: !14)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wYzM1MThlODRiNjY4OTc1ZGYwM2FjOGI5NjIwZDdiZjE4MWJkMzQ5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0c3518e84b668975df03ac8b9620d7bf181bd349", "content": "{\"sha\": \"0c3518e84b668975df03ac8b9620d7bf181bd349\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGMzNTE4ZTg0YjY2ODk3NWRmMDNhYzhiOTYyMGQ3YmYxODFiZDM0OQ==\", \"commit\": {\"author\": {\"name\": \"Hans Wennborg\", \"email\": \"hans@hanshq.net\", \"date\": \"2016-05-04T15:40:57Z\"}, \"committer\": {\"name\": \"Hans Wennborg\", \"email\": \"hans@hanshq.net\", \"date\": \"2016-05-04T15:40:57Z\"}, \"message\": \"[SimplifyCFG] isSafeToSpeculateStore now ignores debug info\\n\\nThis patch fixes PR27615.\\n\\n@llvm.dbg.value instructions no longer count towards the maximum number of\\ninstructions to look back at in the instruction list when searching for a\\nstore instruction. This should make the output consistent between debug and\\nnon-debug build.\\n\\nPatch by Henric Karlsson <henric.karlsson@ericsson.com>!\\n\\nDifferential Revision: http://reviews.llvm.org/D19912\\n\\nllvm-svn: 268512\", \"tree\": {\"sha\": \"1a167bf2ee58ca52258c82ee47bd568cb832c2fb\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/1a167bf2ee58ca52258c82ee47bd568cb832c2fb\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0c3518e84b668975df03ac8b9620d7bf181bd349\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0c3518e84b668975df03ac8b9620d7bf181bd349\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0c3518e84b668975df03ac8b9620d7bf181bd349\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0c3518e84b668975df03ac8b9620d7bf181bd349/comments\", \"author\": {\"login\": \"zmodem\", \"id\": 1148786, \"node_id\": \"MDQ6VXNlcjExNDg3ODY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1148786?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/zmodem\", \"html_url\": \"https://github.com/zmodem\", \"followers_url\": \"https://api.github.com/users/zmodem/followers\", \"following_url\": \"https://api.github.com/users/zmodem/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/zmodem/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/zmodem/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/zmodem/subscriptions\", \"organizations_url\": \"https://api.github.com/users/zmodem/orgs\", \"repos_url\": \"https://api.github.com/users/zmodem/repos\", \"events_url\": \"https://api.github.com/users/zmodem/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/zmodem/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"zmodem\", \"id\": 1148786, \"node_id\": \"MDQ6VXNlcjExNDg3ODY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1148786?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/zmodem\", \"html_url\": \"https://github.com/zmodem\", \"followers_url\": \"https://api.github.com/users/zmodem/followers\", \"following_url\": \"https://api.github.com/users/zmodem/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/zmodem/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/zmodem/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/zmodem/subscriptions\", \"organizations_url\": \"https://api.github.com/users/zmodem/orgs\", \"repos_url\": \"https://api.github.com/users/zmodem/repos\", \"events_url\": \"https://api.github.com/users/zmodem/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/zmodem/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0a7c9d110c9e755c535741d42dfc4c266e3aee7b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0a7c9d110c9e755c535741d42dfc4c266e3aee7b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0a7c9d110c9e755c535741d42dfc4c266e3aee7b\"}], \"stats\": {\"total\": 76, \"additions\": 74, \"deletions\": 2}, \"files\": [{\"sha\": \"6d347d624e2ce359bcf1bbd879c0ef5c165951d4\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0c3518e84b668975df03ac8b9620d7bf181bd349/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0c3518e84b668975df03ac8b9620d7bf181bd349/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=0c3518e84b668975df03ac8b9620d7bf181bd349\", \"patch\": \"@@ -1448,10 +1448,14 @@ static Value *isSafeToSpeculateStore(Instruction *I, BasicBlock *BrBB,\\n   Value *StorePtr = StoreToHoist->getPointerOperand();\\n \\n   // Look for a store to the same pointer in BrBB.\\n-  unsigned MaxNumInstToLookAt = 10;\\n+  unsigned MaxNumInstToLookAt = 9;\\n   for (BasicBlock::reverse_iterator RI = BrBB->rbegin(),\\n-       RE = BrBB->rend(); RI != RE && (--MaxNumInstToLookAt); ++RI) {\\n+       RE = BrBB->rend(); RI != RE && MaxNumInstToLookAt; ++RI) {\\n     Instruction *CurI = &*RI;\\n+    // Skip debug info.\\n+    if (isa<DbgInfoIntrinsic>(CurI))\\n+      continue;\\n+    --MaxNumInstToLookAt;\\n \\n     // Could be calling an instruction that effects memory like free().\\n     if (CurI->mayHaveSideEffects() && !isa<StoreInst>(CurI))\"}, {\"sha\": \"872444d01655c949fbca9e49280795bf21792578\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/PR27615-simplify-cond-br.ll\", \"status\": \"added\", \"additions\": 68, \"deletions\": 0, \"changes\": 68, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0c3518e84b668975df03ac8b9620d7bf181bd349/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FPR27615-simplify-cond-br.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0c3518e84b668975df03ac8b9620d7bf181bd349/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FPR27615-simplify-cond-br.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FPR27615-simplify-cond-br.ll?ref=0c3518e84b668975df03ac8b9620d7bf181bd349\", \"patch\": \"@@ -0,0 +1,68 @@\\n+; RUN: opt -S -simplifycfg -strip-debug < %s | FileCheck %s\\n+; RUN: opt -S -simplifycfg < %s | FileCheck %s\\n+\\n+; Test case for BUG-27615\\n+; Test that simplify cond branch produce same result for debug and non-debug builds\\n+; CHECK: select i1 %or.cond, i32 -1, i32 5\\n+; CHECK-NOT: bb1:\\n+\\n+; ModuleID = './csmith107.i.debug.ll'\\n+source_filename = \\\"./csmith107.i.debug.ll\\\"\\n+\\n+@a = global i16 0\\n+@b = global i32 0\\n+@c = global i16* null\\n+\\n+\\n+; Function Attrs: nounwind\\n+define i16 @fn1() #3 !dbg !15 {\\n+bb2:\\n+  store i32 -1, i32* @b, align 1\\n+  %_tmp1.pre = load i16, i16* @a, align 1, !dbg !19\\n+  %_tmp2.pre = load i16*, i16** @c, align 1\\n+  tail call void @llvm.dbg.value(metadata i16 6, i64 0, metadata !22, metadata !23), !dbg !24\\n+  tail call void @llvm.dbg.value(metadata i16 %_tmp1.pre, i64 0, metadata !25, metadata !23), !dbg !19\\n+  %_tmp3 = load i16, i16* %_tmp2.pre, align 1\\n+  %_tmp4 = icmp ne i16 %_tmp3, 0\\n+  %_tmp6 = icmp ne i16 %_tmp1.pre, 0\\n+  %or.cond = and i1 %_tmp6, %_tmp4\\n+  br i1 %or.cond, label %bb5, label %bb1\\n+\\n+bb1:                                              ; preds = %bb2\\n+  store i32 5, i32* @b, align 1\\n+  br label %bb5\\n+\\n+bb5:                                              ; preds = %bb1, %bb2\\n+  ret i16 0\\n+}\\n+\\n+; Function Attrs: nounwind readnone\\n+declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #4\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!12, !13}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: \\\"FlexC Compiler v6.36 (LLVM)\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !2, globals: !3)\\n+!1 = !DIFile(filename: \\\"csmith107.i.c\\\", directory: \\\"/tmp\\\")\\n+!2 = !{}\\n+!3 = !{!4, !6, !10}\\n+!4 = !DIGlobalVariable(name: \\\"a\\\", scope: null, file: !1, line: 2, type: !5, isLocal: false, isDefinition: true, variable: i16* @a)\\n+!5 = !DIBasicType(name: \\\"int\\\", size: 16, align: 16, encoding: DW_ATE_signed)\\n+!6 = !DIGlobalVariable(name: \\\"b\\\", scope: null, file: !1, line: 3, type: !7, isLocal: false, isDefinition: true, variable: i32* @b)\\n+!7 = !DIDerivedType(tag: DW_TAG_typedef, name: \\\"uint32_t\\\", file: !1, line: 1, baseType: !8)\\n+!8 = !DIDerivedType(tag: DW_TAG_typedef, name: \\\"__u32_t\\\", file: !1, baseType: !9)\\n+!9 = !DIBasicType(name: \\\"unsigned long\\\", size: 32, align: 16, encoding: DW_ATE_unsigned)\\n+!10 = !DIGlobalVariable(name: \\\"c\\\", scope: null, file: !1, line: 4, type: !11, isLocal: false, isDefinition: true, variable: i16** @c)\\n+!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 16, align: 16)\\n+!12 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!13 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!15 = distinct !DISubprogram(name: \\\"fn1\\\", scope: !1, file: !1, line: 5, type: !16, isLocal: false, isDefinition: true, scopeLine: 5, isOptimized: false, unit: !0, variables: !2)\\n+!16 = !DISubroutineType(types: !17)\\n+!17 = !{!5}\\n+!19 = !DILocation(line: 8, column: 16, scope: !20)\\n+!20 = !DILexicalBlock(scope: !15, file: !1, line: 7, column: 29)\\n+!22 = !DILocalVariable(name: \\\"d\\\", scope: !20, line: 8, type: !5)\\n+!23 = !DIExpression()\\n+!24 = !DILocation(line: 8, column: 9, scope: !20)\\n+!25 = !DILocalVariable(name: \\\"e\\\", scope: !20, line: 8, type: !5)\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lZTIwMjk0YWY1NWU3M2YxMjgyOWFlZmQwYjY1MTljZjgxZWZlOTNkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ee20294af55e73f12829aefd0b6519cf81efe93d", "content": "{\"sha\": \"ee20294af55e73f12829aefd0b6519cf81efe93d\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWUyMDI5NGFmNTVlNzNmMTI4MjlhZWZkMGI2NTE5Y2Y4MWVmZTkzZA==\", \"commit\": {\"author\": {\"name\": \"Vedant Kumar\", \"email\": \"vsk@apple.com\", \"date\": \"2016-05-11T15:45:43Z\"}, \"committer\": {\"name\": \"Vedant Kumar\", \"email\": \"vsk@apple.com\", \"date\": \"2016-05-11T15:45:43Z\"}, \"message\": \"[BasicAA] Compare GEP indices based on value (Fix PR27418)\\n\\nEquivalent GEP indices with different types are treated as different\\nindices altogether, leading to an incorrect AA result. Fix the issue\\nby comparing indices based on their values.\\n\\nThanks to Mikael Holm\\u00e9n for reporting the issue!\\n\\nDifferential Revision: http://reviews.llvm.org/D19935\\n\\nllvm-svn: 269197\", \"tree\": {\"sha\": \"77be1cf4e8cecb08ca9aca9adbc6daad5f2aeb99\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/77be1cf4e8cecb08ca9aca9adbc6daad5f2aeb99\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ee20294af55e73f12829aefd0b6519cf81efe93d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ee20294af55e73f12829aefd0b6519cf81efe93d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ee20294af55e73f12829aefd0b6519cf81efe93d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ee20294af55e73f12829aefd0b6519cf81efe93d/comments\", \"author\": {\"login\": \"vedantk\", \"id\": 97683, \"node_id\": \"MDQ6VXNlcjk3Njgz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/97683?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vedantk\", \"html_url\": \"https://github.com/vedantk\", \"followers_url\": \"https://api.github.com/users/vedantk/followers\", \"following_url\": \"https://api.github.com/users/vedantk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vedantk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vedantk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vedantk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vedantk/orgs\", \"repos_url\": \"https://api.github.com/users/vedantk/repos\", \"events_url\": \"https://api.github.com/users/vedantk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vedantk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vedantk\", \"id\": 97683, \"node_id\": \"MDQ6VXNlcjk3Njgz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/97683?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vedantk\", \"html_url\": \"https://github.com/vedantk\", \"followers_url\": \"https://api.github.com/users/vedantk/followers\", \"following_url\": \"https://api.github.com/users/vedantk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vedantk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vedantk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vedantk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vedantk/orgs\", \"repos_url\": \"https://api.github.com/users/vedantk/repos\", \"events_url\": \"https://api.github.com/users/vedantk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vedantk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"45533b4060c781a7925faec9f9a933e568e0480b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/45533b4060c781a7925faec9f9a933e568e0480b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/45533b4060c781a7925faec9f9a933e568e0480b\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"73dc0457ea8ceec29e1563a33d62bbcbbaa0b2bf\", \"filename\": \"llvm/lib/Analysis/BasicAliasAnalysis.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ee20294af55e73f12829aefd0b6519cf81efe93d/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ee20294af55e73f12829aefd0b6519cf81efe93d/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp?ref=ee20294af55e73f12829aefd0b6519cf81efe93d\", \"patch\": \"@@ -847,7 +847,7 @@ static AliasResult aliasSameBasePointerGEPs(const GEPOperator *GEP1,\\n \\n   // If the last (struct) indices are constants and are equal, the other indices\\n   // might be also be dynamically equal, so the GEPs can alias.\\n-  if (C1 && C2 && C1 == C2)\\n+  if (C1 && C2 && C1->getSExtValue() == C2->getSExtValue())\\n     return MayAlias;\\n \\n   // Find the last-indexed type of the GEP, i.e., the type you'd get if\"}, {\"sha\": \"2d85e1dd0173de7b16f3254ad6b1a012263cd8ba\", \"filename\": \"llvm/test/Analysis/BasicAA/struct-geps.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ee20294af55e73f12829aefd0b6519cf81efe93d/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fstruct-geps.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ee20294af55e73f12829aefd0b6519cf81efe93d/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fstruct-geps.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fstruct-geps.ll?ref=ee20294af55e73f12829aefd0b6519cf81efe93d\", \"patch\": \"@@ -162,3 +162,12 @@ define void @test_struct_in_array(%struct2* %st, i64 %i, i64 %j, i64 %k) {\\n   %y = getelementptr %struct2, %struct2* %st, i32 0, i32 0, i32 1, i32 1\\n   ret void\\n }\\n+\\n+; PR27418 - Treat GEP indices with the same value but different types the same\\n+; CHECK-LABEL: test_different_index_types\\n+; CHECK: MustAlias: i16* %tmp1, i16* %tmp2\\n+define void @test_different_index_types([2 x i16]* %arr) {\\n+  %tmp1 = getelementptr [2 x i16], [2 x i16]* %arr, i16 0, i32 1\\n+  %tmp2 = getelementptr [2 x i16], [2 x i16]* %arr, i16 0, i16 1\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mMjhiZWFjNDE5NjE2N2IwY2E2MTg0NjI1YmVjZTEwMmIwNTg5YjAzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f28beac4196167b0ca6184625bece102b0589b03", "content": "{\"sha\": \"f28beac4196167b0ca6184625bece102b0589b03\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZjI4YmVhYzQxOTYxNjdiMGNhNjE4NDYyNWJlY2UxMDJiMDU4OWIwMw==\", \"commit\": {\"author\": {\"name\": \"Jun Bum Lim\", \"email\": \"junbuml@codeaurora.org\", \"date\": \"2016-05-13T16:52:24Z\"}, \"committer\": {\"name\": \"Jun Bum Lim\", \"email\": \"junbuml@codeaurora.org\", \"date\": \"2016-05-13T16:52:24Z\"}, \"message\": \"[MemCpyOpt] Use MaxIntSize in byte instead of bit\\n\\nSummary: This change fix the bug in isProfitableToUseMemset() where MaxIntSize shoule be in byte, not bit.\\n\\nReviewers: arsenm, joker.eph, mcrosier\\n\\nSubscribers: mcrosier, llvm-commits\\n\\nDifferential Revision: http://reviews.llvm.org/D20176\\n\\nllvm-svn: 269433\", \"tree\": {\"sha\": \"70cc1244863b11fad37c8ff58f04f3156e9f478e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/70cc1244863b11fad37c8ff58f04f3156e9f478e\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f28beac4196167b0ca6184625bece102b0589b03\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f28beac4196167b0ca6184625bece102b0589b03\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f28beac4196167b0ca6184625bece102b0589b03\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f28beac4196167b0ca6184625bece102b0589b03/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"e9fa3585c5929b1c5646140a5cce3f096ca64d1f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e9fa3585c5929b1c5646140a5cce3f096ca64d1f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e9fa3585c5929b1c5646140a5cce3f096ca64d1f\"}], \"stats\": {\"total\": 22, \"additions\": 21, \"deletions\": 1}, \"files\": [{\"sha\": \"d8f6c2a36cf257f76073927e86ffe1701f72c5bc\", \"filename\": \"llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f28beac4196167b0ca6184625bece102b0589b03/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f28beac4196167b0ca6184625bece102b0589b03/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp?ref=f28beac4196167b0ca6184625bece102b0589b03\", \"patch\": \"@@ -185,7 +185,7 @@ bool MemsetRange::isProfitableToUseMemset(const DataLayout &DL) const {\\n   // size. If so, check to see whether we will end up actually reducing the\\n   // number of stores used.\\n   unsigned Bytes = unsigned(End-Start);\\n-  unsigned MaxIntSize = DL.getLargestLegalIntTypeSize();\\n+  unsigned MaxIntSize = DL.getLargestLegalIntTypeSize() / 8;\\n   if (MaxIntSize == 0)\\n     MaxIntSize = 1;\\n   unsigned NumPointerStores = Bytes / MaxIntSize;\"}, {\"sha\": \"bbef1244ee362c545f7372290eabe05a8cbf16a9\", \"filename\": \"llvm/test/Transforms/MemCpyOpt/profitable-memset.ll\", \"status\": \"added\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f28beac4196167b0ca6184625bece102b0589b03/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fprofitable-memset.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f28beac4196167b0ca6184625bece102b0589b03/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fprofitable-memset.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fprofitable-memset.ll?ref=f28beac4196167b0ca6184625bece102b0589b03\", \"patch\": \"@@ -0,0 +1,20 @@\\n+; RUN: opt < %s -memcpyopt -S | FileCheck %s\\n+\\n+target datalayout = \\\"e-m:e-i64:64-i128:128-n32:64-S128\\\"\\n+\\n+; CHECK-LABEL: @foo(\\n+; CHECK-NOT: store\\n+; CHECK: call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 8, i32 2, i1 false)\\n+\\n+define void @foo(i64* nocapture %P) {\\n+entry:\\n+  %0 = bitcast i64* %P to i16*\\n+  %arrayidx = getelementptr inbounds i16, i16* %0, i64 1\\n+  %1 = bitcast i16* %arrayidx to i32*\\n+  %arrayidx1 = getelementptr inbounds i16, i16* %0, i64 3\\n+  store i16 0, i16* %0, align 2\\n+  store i32 0, i32* %1, align 4\\n+  store i16 0, i16* %arrayidx1, align 2\\n+  ret void\\n+}\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wYzhmM2Y5MzMyOTI5YjEyYzBmODFkY2YwNzE2OWMxODY5MDk4YzNiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0c8f3f9332929b12c0f81dcf07169c1869098c3b", "content": "{\"sha\": \"0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGM4ZjNmOTMzMjkyOWIxMmMwZjgxZGNmMDcxNjljMTg2OTA5OGMzYg==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2016-05-13T17:28:12Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2016-05-13T17:28:12Z\"}, \"message\": \"[InstCombine] handle zero constant vectors for LE/GE comparisons too\\n\\nEnhancement to: http://reviews.llvm.org/rL269426\\nWith discussion in: http://reviews.llvm.org/D17859\\n\\nThis should complete the fixes for: PR26701, PR26819:\\nhttps://llvm.org/bugs/show_bug.cgi?id=26701\\nhttps://llvm.org/bugs/show_bug.cgi?id=26819\\n \\n\\nllvm-svn: 269439\", \"tree\": {\"sha\": \"5dc927ce2f023135d6d4b8e7a8fef592fb6466fe\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/5dc927ce2f023135d6d4b8e7a8fef592fb6466fe\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0c8f3f9332929b12c0f81dcf07169c1869098c3b/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"27dba61ff313d68c9c3dcb2ea3f769477a8b789e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/27dba61ff313d68c9c3dcb2ea3f769477a8b789e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/27dba61ff313d68c9c3dcb2ea3f769477a8b789e\"}], \"stats\": {\"total\": 42, \"additions\": 40, \"deletions\": 2}, \"files\": [{\"sha\": \"e06ec3945e3d260a9ada904260028fac370c704e\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0c8f3f9332929b12c0f81dcf07169c1869098c3b/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0c8f3f9332929b12c0f81dcf07169c1869098c3b/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp?ref=0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"patch\": \"@@ -3130,8 +3130,9 @@ static ICmpInst *canonicalizeCmpWithConstant(ICmpInst &I,\\n   }\\n \\n   // The usual vector types are ConstantDataVector. Exotic vector types are\\n-  // ConstantVector. They both derive from Constant.\\n-  if (isa<ConstantDataVector>(Op1) || isa<ConstantVector>(Op1)) {\\n+  // ConstantVector. Zeros are special. They all derive from Constant.\\n+  if (isa<ConstantDataVector>(Op1) || isa<ConstantVector>(Op1) ||\\n+      isa<ConstantAggregateZero>(Op1)) {\\n     Constant *Op1C = cast<Constant>(Op1);\\n     Type *Op1Type = Op1->getType();\\n     unsigned NumElts = Op1Type->getVectorNumElements();\"}, {\"sha\": \"df653caa56d7783e2e1075b1857b50891ddeb3f4\", \"filename\": \"llvm/test/Transforms/InstCombine/icmp-vec.ll\", \"status\": \"modified\", \"additions\": 37, \"deletions\": 0, \"changes\": 37, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0c8f3f9332929b12c0f81dcf07169c1869098c3b/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-vec.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0c8f3f9332929b12c0f81dcf07169c1869098c3b/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-vec.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-vec.ll?ref=0c8f3f9332929b12c0f81dcf07169c1869098c3b\", \"patch\": \"@@ -42,6 +42,43 @@ define <2 x i1> @ule(<2 x i8> %x) {\\n   ret <2 x i1> %cmp\\n }\\n \\n+; Zeros are special: they're ConstantAggregateZero.\\n+\\n+define <2 x i1> @sge_zero(<2 x i8> %x) {\\n+; CHECK-LABEL: @sge_zero(\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt <2 x i8> %x, <i8 -1, i8 -1>\\n+; CHECK-NEXT:    ret <2 x i1> [[CMP]]\\n+;\\n+  %cmp = icmp sge <2 x i8> %x, <i8 0, i8 0>\\n+  ret <2 x i1> %cmp\\n+}\\n+\\n+define <2 x i1> @uge_zero(<2 x i8> %x) {\\n+; CHECK-LABEL: @uge_zero(\\n+; CHECK-NEXT:    ret <2 x i1> <i1 true, i1 true>\\n+;\\n+  %cmp = icmp uge <2 x i8> %x, <i8 0, i8 0>\\n+  ret <2 x i1> %cmp\\n+}\\n+\\n+define <2 x i1> @sle_zero(<2 x i8> %x) {\\n+; CHECK-LABEL: @sle_zero(\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp slt <2 x i8> %x, <i8 1, i8 1>\\n+; CHECK-NEXT:    ret <2 x i1> [[CMP]]\\n+;\\n+  %cmp = icmp sle <2 x i8> %x, <i8 0, i8 0>\\n+  ret <2 x i1> %cmp\\n+}\\n+\\n+define <2 x i1> @ule_zero(<2 x i8> %x) {\\n+; CHECK-LABEL: @ule_zero(\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp ult <2 x i8> %x, <i8 1, i8 1>\\n+; CHECK-NEXT:    ret <2 x i1> [[CMP]]\\n+;\\n+  %cmp = icmp ule <2 x i8> %x, <i8 0, i8 0>\\n+  ret <2 x i1> %cmp\\n+}\\n+\\n ; Weird types are ConstantVectors, not ConstantDataVectors. For an i3 type:\\n ; Signed min = -4\\n ; Unsigned min = 0\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lN2Q4MzNkZWZiNjJjMWU0YTE5NDRjYmFkNzQwZjU0MGMwYWI0NGQyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e7d833defb62c1e4a1944cbad740f540c0ab44d2", "content": "{\"sha\": \"e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTdkODMzZGVmYjYyYzFlNGExOTQ0Y2JhZDc0MGY1NDBjMGFiNDRkMg==\", \"commit\": {\"author\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-05-16T22:45:10Z\"}, \"committer\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-05-16T22:45:10Z\"}, \"message\": \"Debug info: Don't emit a DW_AT_byte_size when emitting a DWARF4 bit field.\\nThe DWARF spec clearly states that a bit field member should have either a\\nDW_AT_byte_size or a DW_AT_bit_size, but not both.\\nAlso the DW_AT_byte_size is redundant with the size of the type of the member.\\n\\nThis fixes a bug found in PR 27758.\\n\\nllvm-svn: 269714\", \"tree\": {\"sha\": \"8879ad66559a854ebbeef2669ea2d6bf9cd55ade\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/8879ad66559a854ebbeef2669ea2d6bf9cd55ade\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e7d833defb62c1e4a1944cbad740f540c0ab44d2/comments\", \"author\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"85df931dea607ef0c411ce6c01fe60afb5aa8d6a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/85df931dea607ef0c411ce6c01fe60afb5aa8d6a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/85df931dea607ef0c411ce6c01fe60afb5aa8d6a\"}], \"stats\": {\"total\": 12, \"additions\": 9, \"deletions\": 3}, \"files\": [{\"sha\": \"4011934c26f9ced8c5580862446e00de8e8d6017\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e7d833defb62c1e4a1944cbad740f540c0ab44d2/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e7d833defb62c1e4a1944cbad740f540c0ab44d2/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp?ref=e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"patch\": \"@@ -1393,7 +1393,8 @@ void DwarfUnit::constructMemberDIE(DIE &Buffer, const DIDerivedType *DT) {\\n \\n     if (FieldSize && Size != FieldSize) {\\n       // Handle bitfield, assume bytes are 8 bits.\\n-      addUInt(MemberDie, dwarf::DW_AT_byte_size, None, FieldSize/8);\\n+      if (DD->getDwarfVersion() < 4)\\n+        addUInt(MemberDie, dwarf::DW_AT_byte_size, None, FieldSize/8);\\n       addUInt(MemberDie, dwarf::DW_AT_bit_size, None, Size);\\n \\n       uint64_t Offset = DT->getOffsetInBits();\"}, {\"sha\": \"23b8bca7580d10254d0ed353d7f80f226bd11595\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields-dwarf4.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 2, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e7d833defb62c1e4a1944cbad740f540c0ab44d2/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e7d833defb62c1e4a1944cbad740f540c0ab44d2/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll?ref=e7d833defb62c1e4a1944cbad740f540c0ab44d2\", \"patch\": \"@@ -46,7 +46,10 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"b\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK-NOT:  DW_AT_bit_offset\\n-; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x08)\\n+; CHECK-NOT:  DW_AT_byte_size\\n+; CHECK:      DW_AT_bit_size             [DW_FORM_data1]\\t(0x05)\\n+; CHECK-NOT:  DW_AT_byte_size\\n+; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x08)\\n ; CHECK-NEXT: DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !9 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !5, file: !1, line: 6, baseType: !10, size: 5, align: 32, offset: 8)\\n \\n@@ -58,7 +61,9 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"c\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK-NOT:  DW_AT_bit_offset\\n-; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x0d)\\n+; CHECK-NOT:  DW_AT_byte_size\\n+; CHECK:      DW_AT_bit_size             [DW_FORM_data1]\\t(0x1b)\\n+; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x0d)\\n ; CHECK-NEXT: DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !13 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !5, file: !1, line: 7, baseType: !10, size: 27, align: 32, offset: 13)\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83YWEzNGM4Y2JiN2Y4MTczNzY2NmQwODIxNzc2OWQ2ZWY4MTE4MWQ1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/7aa34c8cbb7f81737666d08217769d6ef81181d5", "content": "{\"sha\": \"7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6N2FhMzRjOGNiYjdmODE3Mzc2NjZkMDgyMTc3NjlkNmVmODExODFkNQ==\", \"commit\": {\"author\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-05-17T02:37:53Z\"}, \"committer\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2016-05-17T02:37:53Z\"}, \"message\": \"Debug Info: Don't emit a DW_AT_data_member_location for DWARF bitfields.\\nThe DWARF spec states that a member entry may have either a\\nDW_AT_data_member_location or a DW_AT_data_bit_offset, but not both.\\n\\nThis fixes a bug found in PR 27758.\\n\\nllvm-svn: 269731\", \"tree\": {\"sha\": \"a1bf5bbd492ac2c356f920d099ea74b8d5178bf4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a1bf5bbd492ac2c356f920d099ea74b8d5178bf4\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7aa34c8cbb7f81737666d08217769d6ef81181d5/comments\", \"author\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e4a5d37d6bed0fc503099c64ea6c65761cbb6518\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e4a5d37d6bed0fc503099c64ea6c65761cbb6518\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e4a5d37d6bed0fc503099c64ea6c65761cbb6518\"}], \"stats\": {\"total\": 15, \"additions\": 6, \"deletions\": 9}, \"files\": [{\"sha\": \"f8c3f489ca4aec7119b5c366f79bf92985cab8b8\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp?ref=7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"patch\": \"@@ -1390,8 +1390,8 @@ void DwarfUnit::constructMemberDIE(DIE &Buffer, const DIDerivedType *DT) {\\n     uint64_t Size = DT->getSizeInBits();\\n     uint64_t FieldSize = getBaseTypeSize(DD, DT);\\n     uint64_t OffsetInBytes;\\n-\\n-    if (FieldSize && Size != FieldSize) {\\n+    bool IsBitfield = FieldSize && Size != FieldSize;\\n+    if (IsBitfield) {\\n       // Handle bitfield, assume bytes are 8 bits.\\n       if (DD->getDwarfVersion() < 4)\\n         addUInt(MemberDie, dwarf::DW_AT_byte_size, None, FieldSize/8);\\n@@ -1428,7 +1428,7 @@ void DwarfUnit::constructMemberDIE(DIE &Buffer, const DIDerivedType *DT) {\\n       addUInt(*MemLocationDie, dwarf::DW_FORM_data1, dwarf::DW_OP_plus_uconst);\\n       addUInt(*MemLocationDie, dwarf::DW_FORM_udata, OffsetInBytes);\\n       addBlock(MemberDie, dwarf::DW_AT_data_member_location, MemLocationDie);\\n-    } else\\n+    } else if (!IsBitfield || DD->getDwarfVersion() < 4)\\n       addUInt(MemberDie, dwarf::DW_AT_data_member_location, None,\\n               OffsetInBytes);\\n   }\"}, {\"sha\": \"ba89b1414bf85c15c57aba6b44bdcdddca1a621a\", \"filename\": \"llvm/test/DebugInfo/ARM/big-endian-bitfield.ll\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 4, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll?ref=7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"patch\": \"@@ -29,26 +29,22 @@ target datalayout = \\\"E-m:e-p:32:32-i64:64-v128:64:128-n32-S64\\\"\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"j\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x00)\\n-; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !7 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !5, file: !1, line: 2, baseType: !8, size: 5, align: 32)\\n !8 = !DIBasicType(name: \\\"int\\\", size: 32, align: 32, encoding: DW_ATE_signed)\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"k\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x05)\\n-; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !9 = !DIDerivedType(tag: DW_TAG_member, name: \\\"k\\\", scope: !5, file: !1, line: 3, baseType: !8, size: 6, align: 32, offset: 5)\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"m\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x0b)\\n-; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"m\\\", scope: !5, file: !1, line: 4, baseType: !8, size: 5, align: 32, offset: 11)\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"n\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x10)\\n-; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"n\\\", scope: !5, file: !1, line: 5, baseType: !8, size: 8, align: 32, offset: 16)\\n !12 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n !13 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\"}, {\"sha\": \"cefe61663d40a9efbf5197b41b356d5afa503e14\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields-dwarf4.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7aa34c8cbb7f81737666d08217769d6ef81181d5/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll?ref=7aa34c8cbb7f81737666d08217769d6ef81181d5\", \"patch\": \"@@ -50,7 +50,7 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK:      DW_AT_bit_size             [DW_FORM_data1]\\t(0x05)\\n ; CHECK-NOT:  DW_AT_byte_size\\n ; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x08)\\n-; CHECK-NEXT: DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n+; CHECK-NOT:  DW_AT_data_member_location\\n !9 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !5, file: !1, line: 6, baseType: !10, size: 5, align: 32, offset: 8)\\n \\n !10 = !DIDerivedType(tag: DW_TAG_typedef, name: \\\"uint32_t\\\", file: !11, line: 183, baseType: !12)\\n@@ -64,7 +64,8 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NOT:  DW_AT_byte_size\\n ; CHECK:      DW_AT_bit_size             [DW_FORM_data1]\\t(0x1b)\\n ; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x0d)\\n-; CHECK-NEXT: DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n+; CHECK-NOT:  DW_AT_data_member_location\\n+; CHECK: DW_TAG\\n !13 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !5, file: !1, line: 7, baseType: !10, size: 27, align: 32, offset: 13)\\n \\n !14 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83MDA4Y2UzZjk4OTEwNWE2NjdlYWI1ZjM0ZjdiYTZmY2RjMWJhM2Q4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8", "content": "{\"sha\": \"7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NzAwOGNlM2Y5ODkxMDVhNjY3ZWFiNWYzNGY3YmE2ZmNkYzFiYTNkOA==\", \"commit\": {\"author\": {\"name\": \"Xinliang David Li\", \"email\": \"davidxl@google.com\", \"date\": \"2016-06-02T16:33:41Z\"}, \"committer\": {\"name\": \"Xinliang David Li\", \"email\": \"davidxl@google.com\", \"date\": \"2016-06-02T16:33:41Z\"}, \"message\": \"[profile] value profiling bug fix -- missing icall targets in profile-use\\n\\nInline virtual functions has linkeonceodr linkage (emitted in comdat on \\nsupporting targets). If the vtable for the class is not emitted in the\\ndefining module, function won't be address taken thus its address is not\\nrecorded. At the mercy of the linker, if the per-func prf_data from this\\nmodule (in comdat) is picked at link time, we will lose mapping from\\nfunction address to its hash val. This leads to missing icall promotion.\\nThe second test case (currently disabled) in compiler_rt (r271528): \\ninstrprof-icall-prom.test demostrates the bug. The first profile-use\\nsubtest is fine due to linker order difference.\\n\\nWith this change, no missing icall targets is found in instrumented clang's\\nraw profile.\\n\\nllvm-svn: 271532\", \"tree\": {\"sha\": \"5e5101c906e152ec37571679fc7e6361377cf99e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/5e5101c906e152ec37571679fc7e6361377cf99e\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/comments\", \"author\": {\"login\": \"david-xl\", \"id\": 57157229, \"node_id\": \"MDQ6VXNlcjU3MTU3MjI5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57157229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/david-xl\", \"html_url\": \"https://github.com/david-xl\", \"followers_url\": \"https://api.github.com/users/david-xl/followers\", \"following_url\": \"https://api.github.com/users/david-xl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/david-xl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/david-xl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/david-xl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/david-xl/orgs\", \"repos_url\": \"https://api.github.com/users/david-xl/repos\", \"events_url\": \"https://api.github.com/users/david-xl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/david-xl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"david-xl\", \"id\": 57157229, \"node_id\": \"MDQ6VXNlcjU3MTU3MjI5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57157229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/david-xl\", \"html_url\": \"https://github.com/david-xl\", \"followers_url\": \"https://api.github.com/users/david-xl/followers\", \"following_url\": \"https://api.github.com/users/david-xl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/david-xl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/david-xl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/david-xl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/david-xl/orgs\", \"repos_url\": \"https://api.github.com/users/david-xl/repos\", \"events_url\": \"https://api.github.com/users/david-xl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/david-xl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fd7ddf1479f1f401a8159d37e6058273f67b20c8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fd7ddf1479f1f401a8159d37e6058273f67b20c8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fd7ddf1479f1f401a8159d37e6058273f67b20c8\"}], \"stats\": {\"total\": 23, \"additions\": 20, \"deletions\": 3}, \"files\": [{\"sha\": \"cf8f93d04072341c87d51b57ae327afd0e057c8d\", \"filename\": \"llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 1, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Flib%2FTransforms%2FInstrumentation%2FInstrProfiling.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Flib%2FTransforms%2FInstrumentation%2FInstrProfiling.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstrumentation%2FInstrProfiling.cpp?ref=7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"patch\": \"@@ -258,7 +258,13 @@ static inline bool shouldRecordFunctionAddr(Function *F) {\\n   if (F->hasLocalLinkage() && F->hasComdat())\\n     return false;\\n   // Check uses of this function for other than direct calls or invokes to it.\\n-  return F->hasAddressTaken();\\n+  // Inline virtual functions have linkeOnceODR linkage. When a key method\\n+  // exists, the vtable will only be emitted in the TU where the key method\\n+  // is defined. In a TU where vtable is not available, the function won't\\n+  // be 'addresstaken'. If its address is not recorded here, the profile counter\\n+  // comdat group with missing address may be picked by the linker leading\\n+  // to missing indirect call target info.\\n+  return F->hasAddressTaken() || (F->hasLinkOnceLinkage() && F->hasComdat());\\n }\\n \\n static inline bool needsComdatForCounter(Function &F, Module &M) {\"}, {\"sha\": \"df32d6560cd43a79181be10181e04b48d727490c\", \"filename\": \"llvm/test/Instrumentation/InstrProfiling/PR23499.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Ftest%2FInstrumentation%2FInstrProfiling%2FPR23499.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Ftest%2FInstrumentation%2FInstrProfiling%2FPR23499.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FInstrumentation%2FInstrProfiling%2FPR23499.ll?ref=7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"patch\": \"@@ -15,13 +15,13 @@ $_Z3barIvEvv = comdat any\\n \\n ; CHECK: @__profn__Z3barIvEvv = private constant [11 x i8] c\\\"_Z3barIvEvv\\\", align 1\\n ; CHECK: @__profc__Z3barIvEvv = linkonce_odr hidden global [1 x i64] zeroinitializer, section \\\"{{.*}}__llvm_prf_cnts\\\", comdat($__profv__Z3barIvEvv), align 8\\n-; CHECK: @__profd__Z3barIvEvv = linkonce_odr hidden global { i64, i64, i64*, i8*, i8*, i32, [1 x i16] } { i64 4947693190065689389, i64 0, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc__Z3barIvEvv, i32 0, i32 0), i8* null, i8* null, i32 1, [1 x i16] zeroinitializer }, section \\\"{{.*}}__llvm_prf_data\\\", comdat($__profv__Z3barIvEvv), align 8\\n+; CHECK: @__profd__Z3barIvEvv = linkonce_odr hidden global { i64, i64, i64*, i8*, i8*, i32, [1 x i16] } { i64 4947693190065689389, i64 0, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc__Z3barIvEvv, i32 0, i32 0), i8*{{.*}}, i8* null, i32 1, [1 x i16] zeroinitializer }, section \\\"{{.*}}__llvm_prf_data\\\", comdat($__profv__Z3barIvEvv), align 8\\n ; CHECK: @__llvm_prf_nm = private constant [{{.*}} x i8] c\\\"{{.*}}\\\", section \\\"{{.*}}__llvm_prf_names\\\"\\n \\n \\n ; COFF: @__profn__Z3barIvEvv = private constant [11 x i8] c\\\"_Z3barIvEvv\\\", align 1\\n ; COFF: @__profc__Z3barIvEvv = linkonce_odr hidden global [1 x i64] zeroinitializer, section \\\"{{.*}}__llvm_prf_cnts\\\", comdat, align 8\\n-; COFF: @__profd__Z3barIvEvv = linkonce_odr hidden global { i64, i64, i64*, i8*, i8*, i32, [1 x i16] } { i64 4947693190065689389, i64 0, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc__Z3barIvEvv, i32 0, i32 0), i8* null, i8* null, i32 1, [1 x i16] zeroinitializer }, section \\\"{{.*}}__llvm_prf_data\\\", comdat($__profc__Z3barIvEvv), align 8\\n+; COFF: @__profd__Z3barIvEvv = linkonce_odr hidden global { i64, i64, i64*, i8*, i8*, i32, [1 x i16] } { i64 4947693190065689389, i64 0, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc__Z3barIvEvv, i32 0, i32 0), i8*{{.*}}, i8* null, i32 1, [1 x i16] zeroinitializer }, section \\\"{{.*}}__llvm_prf_data\\\", comdat($__profc__Z3barIvEvv), align 8\\n \\n \\n declare void @llvm.instrprof.increment(i8*, i64, i32, i32) #1\"}, {\"sha\": \"e1753acb7c7466cb8679216b5ec3d0281deef591\", \"filename\": \"llvm/test/Transforms/PGOProfile/indirect_call_profile.ll\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Ftest%2FTransforms%2FPGOProfile%2Findirect_call_profile.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8/llvm%2Ftest%2FTransforms%2FPGOProfile%2Findirect_call_profile.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPGOProfile%2Findirect_call_profile.ll?ref=7008ce3f989105a667eab5f34f7ba6fcdc1ba3d8\", \"patch\": \"@@ -1,8 +1,12 @@\\n ; RUN: opt < %s -pgo-instr-gen -S | FileCheck %s --check-prefix=GEN\\n ; RUN: opt < %s -passes=pgo-instr-gen -S | FileCheck %s --check-prefix=GEN\\n+; RUN: opt < %s -passes=pgo-instr-gen,instrprof -S | FileCheck %s --check-prefix=LOWER\\n+\\n target datalayout = \\\"e-m:e-i64:64-f80:128-n8:16:32:64-S128\\\"\\n target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n \\n+$foo3 = comdat any\\n+\\n @bar = external global void ()*, align 8\\n ; GEN: @__profn_foo = private constant [3 x i8] c\\\"foo\\\"\\n \\n@@ -49,6 +53,13 @@ bb11:                                             ; preds = %bb2\\n   resume { i8*, i32 } %tmp3\\n }\\n \\n+; Test that comdat function's address is recorded.\\n+; LOWER: @__profd_foo3 = linkonce_odr{{.*}}@foo3\\n+; Function Attrs: nounwind uwtable\\n+define linkonce_odr i32 @foo3()  comdat  {\\n+  ret i32 1\\n+}\\n+\\n declare i32 @__gxx_personality_v0(...)\\n \\n ; Function Attrs: nounwind readnone\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lYThhMjExMTY5MGFiNTY0NTBmN2FiM2NlZGNiY2RiYWUxN2E4N2FhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa", "content": "{\"sha\": \"ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWE4YTIxMTE2OTBhYjU2NDUwZjdhYjNjZWRjYmNkYmFlMTdhODdhYQ==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2016-06-04T22:04:05Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2016-06-04T22:04:05Z\"}, \"message\": \"[InstCombine] allow vector constants for cast+icmp fold\\n\\nThis is step 1 of unknown towards fixing PR28001:\\nhttps://llvm.org/bugs/show_bug.cgi?id=28001\\n\\nllvm-svn: 271810\", \"tree\": {\"sha\": \"4958cab8961f38b880dbf2e8f8ca81930d07752f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/4958cab8961f38b880dbf2e8f8ca81930d07752f\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2ead861d074da501e5f6c5dca75324c86fbabb64\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2ead861d074da501e5f6c5dca75324c86fbabb64\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2ead861d074da501e5f6c5dca75324c86fbabb64\"}], \"stats\": {\"total\": 22, \"additions\": 13, \"deletions\": 9}, \"files\": [{\"sha\": \"e7f87d44aea3356cd1b1d2a6cb9e96e6c36c143f\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp?ref=ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"patch\": \"@@ -2439,7 +2439,7 @@ Instruction *InstCombiner::visitICmpInstWithCastAndCast(ICmpInst &ICI) {\\n   }\\n \\n   // If we aren't dealing with a constant on the RHS, exit early.\\n-  auto *CI = dyn_cast<ConstantInt>(ICI.getOperand(1));\\n+  auto *CI = dyn_cast<Constant>(ICI.getOperand(1));\\n   if (!CI)\\n     return nullptr;\\n \"}, {\"sha\": \"e062896e43e444ae39f667b2d31701df91050ffb\", \"filename\": \"llvm/test/Transforms/InstCombine/cast.ll\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 4, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast.ll?ref=ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"patch\": \"@@ -214,19 +214,26 @@ define i1 @test19(i32 %X) {\\n   ret i1 %Z\\n }\\n \\n-; FIXME: Vector should be the same as scalar.\\n-\\n define <2 x i1> @test19vec(<2 x i32> %X) {\\n ; CHECK-LABEL: @test19vec(\\n-; CHECK-NEXT:    [[C:%.*]] = sext <2 x i32> %X to <2 x i64>\\n-; CHECK-NEXT:    [[Z:%.*]] = icmp slt <2 x i64> [[C]], <i64 12345, i64 2147483647>\\n+; CHECK-NEXT:    [[Z:%.*]] = icmp slt <2 x i32> %X, <i32 12345, i32 2147483647>\\n ; CHECK-NEXT:    ret <2 x i1> [[Z]]\\n ;\\n   %c = sext <2 x i32> %X to <2 x i64>\\n   %Z = icmp slt <2 x i64> %c, <i64 12345, i64 2147483647>\\n   ret <2 x i1> %Z\\n }\\n \\n+define <3 x i1> @test19vec2(<3 x i1> %X) {\\n+; CHECK-LABEL: @test19vec2(\\n+; CHECK-NEXT:    [[CMPEQ:%.*]] = icmp eq <3 x i1> %X, zeroinitializer\\n+; CHECK-NEXT:    ret <3 x i1> [[CMPEQ]]\\n+;\\n+  %sext = sext <3 x i1> %X to <3 x i32>\\n+  %cmpeq = icmp eq <3 x i32> %sext, zeroinitializer\\n+  ret <3 x i1> %cmpeq\\n+}\\n+\\n define i1 @test20(i1 %B) {\\n ; CHECK-LABEL: @test20(\\n ; CHECK-NEXT:    ret i1 false\"}, {\"sha\": \"1fbfc2d146331c93a94007a3fb24e7a402a1e769\", \"filename\": \"llvm/test/Transforms/InstCombine/signed-comparison.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 4, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Ftest%2FTransforms%2FInstCombine%2Fsigned-comparison.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea8a2111690ab56450f7ab3cedcbcdbae17a87aa/llvm%2Ftest%2FTransforms%2FInstCombine%2Fsigned-comparison.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fsigned-comparison.ll?ref=ea8a2111690ab56450f7ab3cedcbcdbae17a87aa\", \"patch\": \"@@ -13,12 +13,9 @@ define i1 @scalar_zext_slt(i16 %t4) {\\n   ret i1 %t6\\n }\\n \\n-; FIXME: Vector compare should work the same as scalar.\\n-\\n define <4 x i1> @vector_zext_slt(<4 x i16> %t4) {\\n ; CHECK-LABEL: @vector_zext_slt(\\n-; CHECK-NEXT:    [[T5:%.*]] = zext <4 x i16> %t4 to <4 x i32>\\n-; CHECK-NEXT:    [[T6:%.*]] = icmp ult <4 x i32> [[T5]], <i32 500, i32 0, i32 501, i32 65535>\\n+; CHECK-NEXT:    [[T6:%.*]] = icmp ult <4 x i16> %t4, <i16 500, i16 0, i16 501, i16 -1>\\n ; CHECK-NEXT:    ret <4 x i1> [[T6]]\\n ;\\n   %t5 = zext <4 x i16> %t4 to <4 x i32>\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80YTY5N2MzMTJmOTAxYTNhMWVjOTJlMjRjOTFjZWZkNjRmNmI0MzQ2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/4a697c312f901a3a1ec92e24c91cefd64f6b4346", "content": "{\"sha\": \"4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NGE2OTdjMzEyZjkwMWEzYTFlYzkyZTI0YzkxY2VmZDY0ZjZiNDM0Ng==\", \"commit\": {\"author\": {\"name\": \"David Majnemer\", \"email\": \"david.majnemer@gmail.com\", \"date\": \"2016-06-15T00:19:56Z\"}, \"committer\": {\"name\": \"David Majnemer\", \"email\": \"david.majnemer@gmail.com\", \"date\": \"2016-06-15T00:19:56Z\"}, \"message\": \"[LoopUnroll] Don't crash trying to unroll loop with EH pad exit\\n\\nWe do not support splitting cleanuppad or catchswitches.  This is\\nproblematic for passes which assume that a loop is in loop simplify\\nform (the loop would have a dedicated exit block instead of sharing it).\\n\\nWhile it isn't great that we don't support this for cleanups, we still\\ncannot make loop-simplify form an assertable precondition because\\nindirectbr will also disable these sorts of CFG cleanups.\\n\\nThis fixes PR28132.\\n\\nllvm-svn: 272739\", \"tree\": {\"sha\": \"fe31b6f1dc9a8e0035d4f76c30e0f9ef0466d375\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/fe31b6f1dc9a8e0035d4f76c30e0f9ef0466d375\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4a697c312f901a3a1ec92e24c91cefd64f6b4346/comments\", \"author\": {\"login\": \"majnemer\", \"id\": 353625, \"node_id\": \"MDQ6VXNlcjM1MzYyNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/353625?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/majnemer\", \"html_url\": \"https://github.com/majnemer\", \"followers_url\": \"https://api.github.com/users/majnemer/followers\", \"following_url\": \"https://api.github.com/users/majnemer/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/majnemer/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/majnemer/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/majnemer/subscriptions\", \"organizations_url\": \"https://api.github.com/users/majnemer/orgs\", \"repos_url\": \"https://api.github.com/users/majnemer/repos\", \"events_url\": \"https://api.github.com/users/majnemer/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/majnemer/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"majnemer\", \"id\": 353625, \"node_id\": \"MDQ6VXNlcjM1MzYyNQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/353625?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/majnemer\", \"html_url\": \"https://github.com/majnemer\", \"followers_url\": \"https://api.github.com/users/majnemer/followers\", \"following_url\": \"https://api.github.com/users/majnemer/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/majnemer/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/majnemer/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/majnemer/subscriptions\", \"organizations_url\": \"https://api.github.com/users/majnemer/orgs\", \"repos_url\": \"https://api.github.com/users/majnemer/repos\", \"events_url\": \"https://api.github.com/users/majnemer/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/majnemer/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"577be0fed36f4d26e767a39a7838c63e90574e13\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/577be0fed36f4d26e767a39a7838c63e90574e13\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/577be0fed36f4d26e767a39a7838c63e90574e13\"}], \"stats\": {\"total\": 82, \"additions\": 82, \"deletions\": 0}, \"files\": [{\"sha\": \"91af4a1922ce11ed864149858bbda2b06a544859\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4a697c312f901a3a1ec92e24c91cefd64f6b4346/llvm%2Flib%2FTransforms%2FScalar%2FLoopUnrollPass.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4a697c312f901a3a1ec92e24c91cefd64f6b4346/llvm%2Flib%2FTransforms%2FScalar%2FLoopUnrollPass.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopUnrollPass.cpp?ref=4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"patch\": \"@@ -922,6 +922,11 @@ static bool tryToUnrollLoop(Loop *L, DominatorTree &DT, LoopInfo *LI,\\n     DEBUG(dbgs() << \\\"  Not unrolling loop with inlinable calls.\\\\n\\\");\\n     return false;\\n   }\\n+  if (!L->isLoopSimplifyForm()) {\\n+    DEBUG(\\n+        dbgs() << \\\"  Not unrolling loop which is not in loop-simplify form.\\\\n\\\");\\n+    return false;\\n+  }\\n \\n   // Find trip count and trip multiple if count is not available\\n   unsigned TripCount = 0;\"}, {\"sha\": \"dc2c0b880239d3f59ca71688821a5db79e097bca\", \"filename\": \"llvm/test/Transforms/LoopUnroll/pr28132.ll\", \"status\": \"added\", \"additions\": 77, \"deletions\": 0, \"changes\": 77, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4a697c312f901a3a1ec92e24c91cefd64f6b4346/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpr28132.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4a697c312f901a3a1ec92e24c91cefd64f6b4346/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpr28132.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpr28132.ll?ref=4a697c312f901a3a1ec92e24c91cefd64f6b4346\", \"patch\": \"@@ -0,0 +1,77 @@\\n+; RUN: opt -loop-unroll -S < %s | FileCheck %s\\n+target datalayout = \\\"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\\\"\\n+target triple = \\\"i686-pc-windows-msvc\\\"\\n+\\n+declare void @fn1(i8*)\\n+\\n+declare i1 @fn2(i8*, i8*)\\n+\\n+define void @fn4() personality i32 (...)* @__CxxFrameHandler3 {\\n+entry:\\n+  br label %for.body\\n+\\n+for.body:                                         ; preds = %for.inc, %entry\\n+  %i.05 = phi i8 [ 0, %entry ], [ %inc, %for.inc ]\\n+  store i8 undef, i8* undef, align 4\\n+  invoke void @fn1(i8* undef)\\n+          to label %call.i.noexc unwind label %ehcleanup\\n+\\n+call.i.noexc:                                     ; preds = %for.body\\n+  %call1.i2 = invoke i1 @fn2(i8* undef, i8* undef)\\n+          to label %call1.i.noexc unwind label %ehcleanup\\n+\\n+call1.i.noexc:                                    ; preds = %call.i.noexc\\n+  br i1 undef, label %if.then.i, label %if.end4.i\\n+\\n+if.then.i:                                        ; preds = %call1.i.noexc\\n+  %tmp1 = load i8, i8* undef, align 4\\n+  %tobool.i = icmp eq i8 undef, undef\\n+  br i1 undef, label %if.end4.i, label %if.then2.i\\n+\\n+if.then2.i:                                       ; preds = %if.then.i\\n+  %call3.i3 = invoke i1 @fn2(i8* undef, i8* null)\\n+          to label %call3.i.noexc unwind label %ehcleanup\\n+\\n+call3.i.noexc:                                    ; preds = %if.then2.i\\n+  br label %if.end4.i\\n+\\n+if.end4.i:                                        ; preds = %call3.i.noexc, %if.then.i, %call1.i.noexc\\n+  %tmp2 = load i8, i8* undef, align 4\\n+  br label %if.then6.i\\n+\\n+if.then6.i:                                       ; preds = %if.end4.i\\n+  %call7.i4 = invoke i1 @fn2(i8* undef, i8* null)\\n+          to label %call7.i.noexc unwind label %ehcleanup\\n+\\n+call7.i.noexc:                                    ; preds = %if.then6.i\\n+  br label %fn3\\n+\\n+fn3:                                              ; preds = %call7.i.noexc\\n+  %tmp3 = load i8, i8* undef, align 4\\n+  %inc.i = add nsw i8 undef, undef\\n+  store i8 undef, i8* undef, align 4\\n+  br label %for.inc\\n+\\n+for.inc:                                          ; preds = %fn3\\n+  %inc = add nsw i8 %i.05, 1\\n+  %cmp = icmp slt i8 %inc, 6\\n+  br i1 %cmp, label %for.body, label %for.end\\n+\\n+for.end:                                          ; preds = %for.inc\\n+  invoke void @throw()\\n+          to label %unreachable unwind label %ehcleanup\\n+\\n+ehcleanup:                                        ; preds = %for.end, %if.then6.i, %if.then2.i, %call.i.noexc, %for.body\\n+  %cp = cleanuppad within none []\\n+  cleanupret from %cp unwind to caller\\n+\\n+; CHECK: cleanuppad\\n+; CHECK-NOT: cleanuppad\\n+\\n+unreachable:                                      ; preds = %for.end\\n+  unreachable\\n+}\\n+\\n+declare i32 @__CxxFrameHandler3(...)\\n+\\n+declare void @throw()\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81OTZhM2JkOWVjZTMzNTMwM2MxNGNkM2QzM2NiYzRjYjE3MTdkYjg4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/596a3bd9ece335303c14cd3d33cbc4cb1717db88", "content": "{\"sha\": \"596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NTk2YTNiZDllY2UzMzUzMDNjMTRjZDNkMzNjYmM0Y2IxNzE3ZGI4OA==\", \"commit\": {\"author\": {\"name\": \"Jun Bum Lim\", \"email\": \"junbuml@codeaurora.org\", \"date\": \"2016-06-30T15:32:20Z\"}, \"committer\": {\"name\": \"Jun Bum Lim\", \"email\": \"junbuml@codeaurora.org\", \"date\": \"2016-06-30T15:32:20Z\"}, \"message\": \"[DSE] Fix bug in partial overwrite tracking\\n\\nSummary:\\nFound cases where DSE incorrectly add partially-overwritten intervals.\\nPlease see the test case for details.\\n\\nReviewers: mcrosier, eeckstein, hfinkel\\n\\nSubscribers: mcrosier, llvm-commits\\n\\nDifferential Revision: http://reviews.llvm.org/D21859\\n\\nllvm-svn: 274237\", \"tree\": {\"sha\": \"f41f1113f4d8ee96c5317c8b3edf214da13e31e4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f41f1113f4d8ee96c5317c8b3edf214da13e31e4\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/596a3bd9ece335303c14cd3d33cbc4cb1717db88/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"e766a87b0170fe9a1ecc1a776fef43bf27aa1294\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e766a87b0170fe9a1ecc1a776fef43bf27aa1294\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e766a87b0170fe9a1ecc1a776fef43bf27aa1294\"}], \"stats\": {\"total\": 60, \"additions\": 53, \"deletions\": 7}, \"files\": [{\"sha\": \"6b648ee23cc1554c60aadb983deb33c2aedb98d7\", \"filename\": \"llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 7, \"changes\": 21, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/596a3bd9ece335303c14cd3d33cbc4cb1717db88/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/596a3bd9ece335303c14cd3d33cbc4cb1717db88/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp?ref=596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"patch\": \"@@ -385,18 +385,25 @@ static OverwriteResult isOverwrite(const MemoryLocation &Later,\\n     // Find any intervals ending at, or after, LaterIntStart which start\\n     // before LaterIntEnd.\\n     auto ILI = IM.lower_bound(LaterIntStart);\\n-    if (ILI != IM.end() && ILI->second < LaterIntEnd) {\\n-      // This existing interval ends in the middle of\\n-      // [LaterIntStart, LaterIntEnd), erase it adjusting our start.\\n+    if (ILI != IM.end() && ILI->second <= LaterIntEnd) {\\n+      // This existing interval is overlapped with the current store somewhere\\n+      // in [LaterIntStart, LaterIntEnd]. Merge them by erasing the existing\\n+      // intervals and adjusting our start and end.\\n       LaterIntStart = std::min(LaterIntStart, ILI->second);\\n       LaterIntEnd = std::max(LaterIntEnd, ILI->first);\\n       ILI = IM.erase(ILI);\\n \\n-      while (ILI != IM.end() && ILI->first <= LaterIntEnd)\\n-        ILI = IM.erase(ILI);\\n-\\n-      if (ILI != IM.end() && ILI->second < LaterIntEnd)\\n+      // Continue erasing and adjusting our end in case other previous\\n+      // intervals are also overlapped with the current store.\\n+      //\\n+      // |--- ealier 1 ---|  |--- ealier 2 ---|\\n+      //     |------- later---------|\\n+      //\\n+      while (ILI != IM.end() && ILI->second <= LaterIntEnd) {\\n+        assert(ILI->second > LaterIntStart && \\\"Unexpected interval\\\");\\n         LaterIntEnd = std::max(LaterIntEnd, ILI->first);\\n+        ILI = IM.erase(ILI);\\n+      }\\n     }\\n \\n     IM[LaterIntEnd] = LaterIntStart;\"}, {\"sha\": \"cb015b2d1ce957777b4585f3035a1aa21ed2fc8a\", \"filename\": \"llvm/test/Transforms/DeadStoreElimination/combined-partial-overwrites.ll\", \"status\": \"modified\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/596a3bd9ece335303c14cd3d33cbc4cb1717db88/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Fcombined-partial-overwrites.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/596a3bd9ece335303c14cd3d33cbc4cb1717db88/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Fcombined-partial-overwrites.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Fcombined-partial-overwrites.ll?ref=596a3bd9ece335303c14cd3d33cbc4cb1717db88\", \"patch\": \"@@ -198,3 +198,42 @@ entry:\\n   ret i8 0\\n }\\n \\n+define signext i8 @test6(i32 *%ptr) {\\n+entry:\\n+; CHECK-LABEL: @test6\\n+\\n+  store i32 0, i32* %ptr\\n+\\n+  %bptr = bitcast i32* %ptr to i16*\\n+  %bptr1 = getelementptr inbounds i16, i16* %bptr, i64 0\\n+  %bptr2 = getelementptr inbounds i16, i16* %bptr, i64 1\\n+\\n+  store i16 1456, i16* %bptr2, align 1\\n+  store i16 65535, i16* %bptr1, align 1\\n+\\n+; CHECK-NOT: store i32 0, i32* %ptr\\n+\\n+  ret i8 0\\n+}\\n+\\n+define signext i8 @test7(i64 *%ptr) {\\n+entry:\\n+; CHECK-LABEL: @test7\\n+\\n+  store i64 0, i64* %ptr\\n+\\n+  %bptr = bitcast i64* %ptr to i16*\\n+  %bptr1 = getelementptr inbounds i16, i16* %bptr, i64 0\\n+  %bptr2 = getelementptr inbounds i16, i16* %bptr, i64 1\\n+  %bptr3 = getelementptr inbounds i16, i16* %bptr, i64 2\\n+  %bptr4 = getelementptr inbounds i16, i16* %bptr, i64 3\\n+\\n+  store i16 1346, i16* %bptr1, align 1\\n+  store i16 1756, i16* %bptr3, align 1\\n+  store i16 1456, i16* %bptr2, align 1\\n+  store i16 5656, i16* %bptr4, align 1\\n+\\n+; CHECK-NOT: store i64 0, i64* %ptr\\n+\\n+  ret i8 0\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jMWZhMTYzMzkyZjUyZDIxMTlkZWM2NDVmNGYxMjdlZjc5YjgzMzEwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/c1fa163392f52d2119dec645f4f127ef79b83310", "content": "{\"sha\": \"c1fa163392f52d2119dec645f4f127ef79b83310\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YzFmYTE2MzM5MmY1MmQyMTE5ZGVjNjQ1ZjRmMTI3ZWY3OWI4MzMxMA==\", \"commit\": {\"author\": {\"name\": \"Marina Yatsina\", \"email\": \"marina.yatsina@intel.com\", \"date\": \"2016-07-21T12:37:07Z\"}, \"committer\": {\"name\": \"Marina Yatsina\", \"email\": \"marina.yatsina@intel.com\", \"date\": \"2016-07-21T12:37:07Z\"}, \"message\": \"ExecutionDepsFix - Fix bug in clearance calculation\\n\\nThe clearance calculation did not take into account registers defined as outputs or clobbers in inline assembly machine instructions because these register defs are implicit.\\n\\nDifferential Revision: http://reviews.llvm.org/D22580\\n\\nllvm-svn: 276266\", \"tree\": {\"sha\": \"2f6985de132bf3468ddc1354f9a9e48ac4ee3173\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2f6985de132bf3468ddc1354f9a9e48ac4ee3173\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/c1fa163392f52d2119dec645f4f127ef79b83310\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c1fa163392f52d2119dec645f4f127ef79b83310\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c1fa163392f52d2119dec645f4f127ef79b83310\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c1fa163392f52d2119dec645f4f127ef79b83310/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"2a185a2547caccd5e969e2c5e704ee9733aaa2fc\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2a185a2547caccd5e969e2c5e704ee9733aaa2fc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2a185a2547caccd5e969e2c5e704ee9733aaa2fc\"}], \"stats\": {\"total\": 12, \"additions\": 10, \"deletions\": 2}, \"files\": [{\"sha\": \"1fe5f459b691f2ca860040de0c85e8c1f85da5fd\", \"filename\": \"llvm/lib/CodeGen/ExecutionDepsFix.cpp\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 2, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/c1fa163392f52d2119dec645f4f127ef79b83310/llvm%2Flib%2FCodeGen%2FExecutionDepsFix.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/c1fa163392f52d2119dec645f4f127ef79b83310/llvm%2Flib%2FCodeGen%2FExecutionDepsFix.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FExecutionDepsFix.cpp?ref=c1fa163392f52d2119dec645f4f127ef79b83310\", \"patch\": \"@@ -520,8 +520,6 @@ void ExeDepsFix::processDefs(MachineInstr *MI, bool Kill) {\\n     MachineOperand &MO = MI->getOperand(i);\\n     if (!MO.isReg())\\n       continue;\\n-    if (MO.isImplicit())\\n-      break;\\n     if (MO.isUse())\\n       continue;\\n     for (int rx : regIndices(MO.getReg())) {\"}, {\"sha\": \"a7cda499dabacf2b8efb04dcaa48a9fd88b0815f\", \"filename\": \"llvm/test/CodeGen/X86/break-false-dep.ll\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/c1fa163392f52d2119dec645f4f127ef79b83310/llvm%2Ftest%2FCodeGen%2FX86%2Fbreak-false-dep.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/c1fa163392f52d2119dec645f4f127ef79b83310/llvm%2Ftest%2FCodeGen%2FX86%2Fbreak-false-dep.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fbreak-false-dep.ll?ref=c1fa163392f52d2119dec645f4f127ef79b83310\", \"patch\": \"@@ -199,3 +199,13 @@ for.end16:                                        ; preds = %for.inc14\\n ;AVX-NEXT: vmulsd {{.*}}, [[XMM0]], [[XMM0]]\\n ;AVX-NEXT: vmovsd [[XMM0]],\\n }\\n+\\n+define double @inlineasmdep(i64 %arg) {\\n+top:\\n+  tail call void asm sideeffect \\\"\\\", \\\"~{xmm0},~{dirflag},~{fpsr},~{flags}\\\"()\\n+  %tmp1 = sitofp i64 %arg to double\\n+  ret double %tmp1\\n+;AVX-LABEL:@inlineasmdep\\n+;AVX: vxorps  [[XMM0:%xmm[0-9]+]], [[XMM0]], [[XMM0]]\\n+;AVX-NEXT: vcvtsi2sdq {{.*}}, [[XMM0]], {{%xmm[0-9]+}}\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iNTNiNjJlYjY5Y2Q1NzY4NDIzNzg2YzVjZWQ3MDBiYzJkMWQyZTIwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/b53b62eb69cd5768423786c5ced700bc2d1d2e20", "content": "{\"sha\": \"b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YjUzYjYyZWI2OWNkNTc2ODQyMzc4NmM1Y2VkNzAwYmMyZDFkMmUyMA==\", \"commit\": {\"author\": {\"name\": \"Mehdi Amini\", \"email\": \"mehdi.amini@apple.com\", \"date\": \"2016-09-16T00:38:18Z\"}, \"committer\": {\"name\": \"Mehdi Amini\", \"email\": \"mehdi.amini@apple.com\", \"date\": \"2016-09-16T00:38:18Z\"}, \"message\": \"Fix autoupgrade logic for Objective-C class properties module flag\\n\\nPrevious we were issuing an error when linking a module containing\\nthe new Objective-C metadata structure for class properties with an\\n\\\"old\\\" one.\\nNow instead we downgrade the module flag so that the Objective-C\\nruntime does not expect the new metadata structure.\\n\\nThis is consistent with what ld64 is doing on binary files.\\n\\nDifferential Revision: https://reviews.llvm.org/D24620\\n\\nllvm-svn: 281685\", \"tree\": {\"sha\": \"cd0b7f050e0efcf5c203a86dc9be0e4ffd253f38\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/cd0b7f050e0efcf5c203a86dc9be0e4ffd253f38\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b53b62eb69cd5768423786c5ced700bc2d1d2e20/comments\", \"author\": {\"login\": \"joker-eph\", \"id\": 3372300, \"node_id\": \"MDQ6VXNlcjMzNzIzMDA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3372300?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/joker-eph\", \"html_url\": \"https://github.com/joker-eph\", \"followers_url\": \"https://api.github.com/users/joker-eph/followers\", \"following_url\": \"https://api.github.com/users/joker-eph/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/joker-eph/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/joker-eph/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/joker-eph/subscriptions\", \"organizations_url\": \"https://api.github.com/users/joker-eph/orgs\", \"repos_url\": \"https://api.github.com/users/joker-eph/repos\", \"events_url\": \"https://api.github.com/users/joker-eph/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/joker-eph/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"joker-eph\", \"id\": 3372300, \"node_id\": \"MDQ6VXNlcjMzNzIzMDA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3372300?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/joker-eph\", \"html_url\": \"https://github.com/joker-eph\", \"followers_url\": \"https://api.github.com/users/joker-eph/followers\", \"following_url\": \"https://api.github.com/users/joker-eph/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/joker-eph/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/joker-eph/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/joker-eph/subscriptions\", \"organizations_url\": \"https://api.github.com/users/joker-eph/orgs\", \"repos_url\": \"https://api.github.com/users/joker-eph/repos\", \"events_url\": \"https://api.github.com/users/joker-eph/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/joker-eph/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1fbaf535d6a4555a751d1285889a7a1f52dfafc5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/1fbaf535d6a4555a751d1285889a7a1f52dfafc5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/1fbaf535d6a4555a751d1285889a7a1f52dfafc5\"}], \"stats\": {\"total\": 31, \"additions\": 26, \"deletions\": 5}, \"files\": [{\"sha\": \"8a5170fb631369da79d096fe3e42fa2ab6c914cf\", \"filename\": \"llvm/lib/IR/AutoUpgrade.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Flib%2FIR%2FAutoUpgrade.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Flib%2FIR%2FAutoUpgrade.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FAutoUpgrade.cpp?ref=b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"patch\": \"@@ -1587,11 +1587,11 @@ bool llvm::UpgradeModuleFlags(Module &M) {\\n   }\\n   // \\\"Objective-C Class Properties\\\" is recently added for Objective-C. We\\n   // upgrade ObjC bitcodes to contain a \\\"Objective-C Class Properties\\\" module\\n-  // flag of value 0, so we can correclty report error when trying to link\\n-  // an ObjC bitcode without this module flag with an ObjC bitcode with this\\n-  // module flag.\\n+  // flag of value 0, so we can correclty downgrade this flag when trying to\\n+  // link an ObjC bitcode without this module flag with an ObjC bitcode with\\n+  // this module flag.\\n   if (HasObjCFlag && !HasClassProperties) {\\n-    M.addModuleFlag(llvm::Module::Error, \\\"Objective-C Class Properties\\\",\\n+    M.addModuleFlag(llvm::Module::Override, \\\"Objective-C Class Properties\\\",\\n                     (uint32_t)0);\\n     return true;\\n   }\"}, {\"sha\": \"d6741faa837ff0b92f90c7beebc872ba0393de32\", \"filename\": \"llvm/test/Bitcode/upgrade-module-flag.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FBitcode%2Fupgrade-module-flag.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FBitcode%2Fupgrade-module-flag.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Fupgrade-module-flag.ll?ref=b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"patch\": \"@@ -6,4 +6,4 @@\\n !0 = !{i32 1, !\\\"Objective-C Image Info Version\\\", i32 0}\\n \\n ; CHECK: !0 = !{i32 1, !\\\"Objective-C Image Info Version\\\", i32 0}\\n-; CHECK: !1 = !{i32 1, !\\\"Objective-C Class Properties\\\", i32 0}\\n+; CHECK: !1 = !{i32 4, !\\\"Objective-C Class Properties\\\", i32 0}\"}, {\"sha\": \"93a5fbefe889e20f1c72afb8399ab0c3859f363e\", \"filename\": \"llvm/test/Linker/Inputs/objectivec-class-property-flag-mismatch.ll\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FLinker%2FInputs%2Fobjectivec-class-property-flag-mismatch.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FLinker%2FInputs%2Fobjectivec-class-property-flag-mismatch.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FLinker%2FInputs%2Fobjectivec-class-property-flag-mismatch.ll?ref=b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"patch\": \"@@ -0,0 +1,5 @@\\n+\\n+!llvm.module.flags = !{!0, !1}\\n+\\n+!0 = !{i32 1, !\\\"Objective-C Image Info Version\\\", i32 0}\\n+!1 = !{i32 1, !\\\"Objective-C Class Properties\\\", i32 64}\"}, {\"sha\": \"9dd82c5d9ba2de1426a6aa70d9832d625d6204b2\", \"filename\": \"llvm/test/Linker/objectivec-class-property-flag-mismatch.ll\", \"status\": \"added\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FLinker%2Fobjectivec-class-property-flag-mismatch.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b53b62eb69cd5768423786c5ced700bc2d1d2e20/llvm%2Ftest%2FLinker%2Fobjectivec-class-property-flag-mismatch.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FLinker%2Fobjectivec-class-property-flag-mismatch.ll?ref=b53b62eb69cd5768423786c5ced700bc2d1d2e20\", \"patch\": \"@@ -0,0 +1,16 @@\\n+; RUN: llvm-as < %s -o %t1.bc\\n+; RUN: llvm-as < %p/Inputs/objectivec-class-property-flag-mismatch.ll -o %t2.bc\\n+\\n+\\n+; RUN: llvm-link %t1.bc %t2.bc -S | FileCheck %s\\n+; RUN: llvm-link %t2.bc %t1.bc -S | FileCheck %s\\n+\\n+\\n+; CHECK: !0 = !{i32 1, !\\\"Objective-C Image Info Version\\\", i32 0}\\n+; CHECK: !1 = !{i32 4, !\\\"Objective-C Class Properties\\\", i32 0}\\n+\\n+\\n+\\n+!llvm.module.flags = !{!0}\\n+\\n+!0 = !{i32 1, !\\\"Objective-C Image Info Version\\\", i32 0}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wZWZiOTZhOGVlMWI1N2MzOWZiNzMyYTA5OGY4OGIzNDEwZmM0YWViIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb", "content": "{\"sha\": \"0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGVmYjk2YThlZTFiNTdjMzlmYjczMmEwOThmODhiMzQxMGZjNGFlYg==\", \"commit\": {\"author\": {\"name\": \"James Molloy\", \"email\": \"james.molloy@arm.com\", \"date\": \"2016-09-19T08:23:08Z\"}, \"committer\": {\"name\": \"James Molloy\", \"email\": \"james.molloy@arm.com\", \"date\": \"2016-09-19T08:23:08Z\"}, \"message\": \"[SimplifyCFG] Update (AND) IR flags when CSE'ing instructions\\n\\nWe were updating metadata but not IR flags. Because we pick an arbitrary instruction to be the CSE candidate, it comes down to luck (50% or less chance) if this results in broken codegen or not, which is why PR30373 which is actually not the fault of the commit it was bisected down to.\\n\\nFixes PR30373.\\n\\nllvm-svn: 281889\", \"tree\": {\"sha\": \"a0ed85b6649a692209b7bc4c07664de85ae45256\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a0ed85b6649a692209b7bc4c07664de85ae45256\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"63014581aad3a4ac37d2f53674a46dcae5b34f09\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/63014581aad3a4ac37d2f53674a46dcae5b34f09\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/63014581aad3a4ac37d2f53674a46dcae5b34f09\"}], \"stats\": {\"total\": 62, \"additions\": 60, \"deletions\": 2}, \"files\": [{\"sha\": \"90ce672018292e9493031a584eff829bcc45f0ab\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"patch\": \"@@ -1527,10 +1527,12 @@ static bool sinkLastInstruction(ArrayRef<BasicBlock*> Blocks) {\\n     I0->getOperandUse(O).set(NewOperands[O]);\\n   I0->moveBefore(&*BBEnd->getFirstInsertionPt());\\n \\n-  // Update metadata.\\n+  // Update metadata and IR flags.\\n   for (auto *I : Insts)\\n-    if (I != I0)\\n+    if (I != I0) {\\n       combineMetadataForCSE(I0, I);\\n+      I0->andIRFlags(I);\\n+    }\\n \\n   if (!isa<StoreInst>(I0)) {\\n     // canSinkLastInstruction checked that all instructions were used by\"}, {\"sha\": \"54f87052c7aecbb16fb44bd5599b7b9271e9a098\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/sink-common-code.ll\", \"status\": \"modified\", \"additions\": 56, \"deletions\": 0, \"changes\": 56, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fsink-common-code.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0efb96a8ee1b57c39fb732a098f88b3410fc4aeb/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fsink-common-code.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fsink-common-code.ll?ref=0efb96a8ee1b57c39fb732a098f88b3410fc4aeb\", \"patch\": \"@@ -699,6 +699,62 @@ if.end:\\n ; CHECK: store\\n ; CHECK: store\\n \\n+define i32 @test_pr30373a(i1 zeroext %flag, i32 %x, i32 %y) {\\n+entry:\\n+  br i1 %flag, label %if.then, label %if.else\\n+\\n+if.then:\\n+  %x0 = call i32 @foo(i32 %x, i32 0) nounwind readnone\\n+  %y0 = call i32 @foo(i32 %x, i32 1) nounwind readnone\\n+  %z0 = lshr i32 %y0, 8\\n+  br label %if.end\\n+\\n+if.else:\\n+  %x1 = call i32 @foo(i32 %y, i32 0) nounwind readnone\\n+  %y1 = call i32 @foo(i32 %y, i32 1) nounwind readnone\\n+  %z1 = lshr exact i32 %y1, 8\\n+  br label %if.end\\n+\\n+if.end:\\n+  %xx = phi i32 [ %x0, %if.then ], [ %x1, %if.else ]\\n+  %yy = phi i32 [ %z0, %if.then ], [ %z1, %if.else ]\\n+  %ret = add i32 %xx, %yy\\n+  ret i32 %ret\\n+}\\n+\\n+; CHECK-LABEL: test_pr30373a\\n+; CHECK: lshr\\n+; CHECK-NOT: exact\\n+; CHECK: }\\n+\\n+define i32 @test_pr30373b(i1 zeroext %flag, i32 %x, i32 %y) {\\n+entry:\\n+  br i1 %flag, label %if.then, label %if.else\\n+\\n+if.then:\\n+  %x0 = call i32 @foo(i32 %x, i32 0) nounwind readnone\\n+  %y0 = call i32 @foo(i32 %x, i32 1) nounwind readnone\\n+  %z0 = lshr exact i32 %y0, 8\\n+  br label %if.end\\n+\\n+if.else:\\n+  %x1 = call i32 @foo(i32 %y, i32 0) nounwind readnone\\n+  %y1 = call i32 @foo(i32 %y, i32 1) nounwind readnone\\n+  %z1 = lshr i32 %y1, 8\\n+  br label %if.end\\n+\\n+if.end:\\n+  %xx = phi i32 [ %x0, %if.then ], [ %x1, %if.else ]\\n+  %yy = phi i32 [ %z0, %if.then ], [ %z1, %if.else ]\\n+  %ret = add i32 %xx, %yy\\n+  ret i32 %ret\\n+}\\n+\\n+; CHECK-LABEL: test_pr30373b\\n+; CHECK: lshr\\n+; CHECK-NOT: exact\\n+; CHECK: }\\n+\\n ; CHECK: !0 = !{!1, !1, i64 0}\\n ; CHECK: !1 = !{!\\\"float\\\", !2}\\n ; CHECK: !2 = !{!\\\"an example type tree\\\"}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mZDBkN2IyMWUwYjk3NGRjYjhlZTYyNTdhZTRlZjRmYTczOThlODBiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b", "content": "{\"sha\": \"fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZmQwZDdiMjFlMGI5NzRkY2I4ZWU2MjU3YWU0ZWY0ZmE3Mzk4ZTgwYg==\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2016-10-12T10:20:15Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2016-10-12T10:20:15Z\"}, \"message\": \"[InstCombine] Fix constexpr issue in select combining\\n\\nAs discussed by Andrea on PR30486, we have an unsafe cast to an Instruction type in the select combine which doesn't take into account that it could be a ConstantExpr instead.\\n\\nDifferential Revision: https://reviews.llvm.org/D25466\\n\\nllvm-svn: 284000\", \"tree\": {\"sha\": \"ee961ca9d3d8742be18054e98111dd1e42866821\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/ee961ca9d3d8742be18054e98111dd1e42866821\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6ce45e0840bed276887787749ee7f83fbec65ab9\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6ce45e0840bed276887787749ee7f83fbec65ab9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6ce45e0840bed276887787749ee7f83fbec65ab9\"}], \"stats\": {\"total\": 53, \"additions\": 49, \"deletions\": 4}, \"files\": [{\"sha\": \"6b31a5449f74dcce8c656422c3b18a5541138660\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 4, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp?ref=fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"patch\": \"@@ -2271,9 +2271,9 @@ Instruction *InstCombiner::visitSwitchInst(SwitchInst &SI) {\\n           SI.getContext(), C.getCaseValue()->getValue().trunc(NewWidth)));\\n   }\\n \\n+  Value *Op0 = nullptr;\\n   ConstantInt *AddRHS = nullptr;\\n-  if (match(Cond, m_Add(m_Value(), m_ConstantInt(AddRHS)))) {\\n-    Instruction *I = cast<Instruction>(Cond);\\n+  if (match(Cond, m_Add(m_Value(Op0), m_ConstantInt(AddRHS)))) {\\n     // Change 'switch (X+4) case 1:' into 'switch (X) case -3'.\\n     for (SwitchInst::CaseIt i = SI.case_begin(), e = SI.case_end(); i != e;\\n          ++i) {\\n@@ -2289,8 +2289,9 @@ Instruction *InstCombiner::visitSwitchInst(SwitchInst &SI) {\\n              \\\"Result of expression should be constant\\\");\\n       i.setValue(cast<ConstantInt>(NewCaseVal));\\n     }\\n-    SI.setCondition(I->getOperand(0));\\n-    Worklist.Add(I);\\n+    SI.setCondition(Op0);\\n+    if (auto *CondI = dyn_cast<Instruction>(Cond))\\n+      Worklist.Add(CondI);\\n     return &SI;\\n   }\\n \"}, {\"sha\": \"c2ea83b2adbd3291039c706189fd293c7e8f366a\", \"filename\": \"llvm/test/Transforms/InstCombine/switch-constant-expr.ll\", \"status\": \"added\", \"additions\": 44, \"deletions\": 0, \"changes\": 44, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b/llvm%2Ftest%2FTransforms%2FInstCombine%2Fswitch-constant-expr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b/llvm%2Ftest%2FTransforms%2FInstCombine%2Fswitch-constant-expr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fswitch-constant-expr.ll?ref=fd0d7b21e0b974dcb8ee6257ae4ef4fa7398e80b\", \"patch\": \"@@ -0,0 +1,44 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt < %s -instcombine -S | FileCheck %s\\n+\\n+@g = global i32 0\\n+\\n+; PR30486\\n+define i32 @single_case() {\\n+; CHECK-LABEL: @single_case(\\n+; CHECK-NEXT:    switch i32 ptrtoint (i32* @g to i32), label %x [\\n+; CHECK-NEXT:    ]\\n+; CHECK:       x:\\n+; CHECK-NEXT:    ret i32 0\\n+;\\n+  switch i32 add (i32 ptrtoint (i32* @g to i32), i32 -1), label %x []\\n+x:\\n+  ret i32 0\\n+}\\n+\\n+define i32 @multiple_cases() {\\n+; CHECK-LABEL: @multiple_cases(\\n+; CHECK-NEXT:    switch i32 ptrtoint (i32* @g to i32), label %x [\\n+; CHECK-NEXT:    i32 2, label %one\\n+; CHECK-NEXT:    i32 3, label %two\\n+; CHECK-NEXT:    ]\\n+; CHECK:       x:\\n+; CHECK-NEXT:    ret i32 0\\n+; CHECK:       one:\\n+; CHECK-NEXT:    ret i32 1\\n+; CHECK:       two:\\n+; CHECK-NEXT:    ret i32 2\\n+;\\n+  switch i32 add (i32 ptrtoint (i32* @g to i32), i32 -1), label %x [\\n+  i32 1, label %one\\n+  i32 2, label %two\\n+  ]\\n+x:\\n+  ret i32 0\\n+\\n+one:\\n+  ret i32 1\\n+\\n+two:\\n+  ret i32 2\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84OWFmMTEyY2Y1OTBlNzZmYmIxZmQ5NjQwODZhMzg4MmI3ZjkzNWY5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/89af112cf590e76fbb1fd964086a3882b7f935f9", "content": "{\"sha\": \"89af112cf590e76fbb1fd964086a3882b7f935f9\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ODlhZjExMmNmNTkwZTc2ZmJiMWZkOTY0MDg2YTM4ODJiN2Y5MzVmOQ==\", \"commit\": {\"author\": {\"name\": \"Reid Kleckner\", \"email\": \"rnk@google.com\", \"date\": \"2017-09-13T21:54:20Z\"}, \"committer\": {\"name\": \"Reid Kleckner\", \"email\": \"rnk@google.com\", \"date\": \"2017-09-13T21:54:20Z\"}, \"message\": \"[codeview] VLAs and unsized arrays should use a size of zero\\n\\nPreviously we used a size of '1' for VLAs because we weren't sure what\\nMSVC did. However, MSVC does support declaring an array without a size,\\nfor which it emits an array type with a size of zero. Clang emits the\\nsame DI metadata for VLAs and arrays without bound, so we would describe\\narrays without bound as having one element. This lead to Microsoft\\ndebuggers only printing a single element.\\n\\nEmitting a size of zero appears to cause these debuggers to search the\\nsymbol information to find a definition of the variable with accurate\\narray bounds.\\n\\nFixes http://crbug.com/763580\\n\\nllvm-svn: 313203\", \"tree\": {\"sha\": \"dc78d36091bb9fd87f5161b311f992fca4acbcf4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/dc78d36091bb9fd87f5161b311f992fca4acbcf4\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/89af112cf590e76fbb1fd964086a3882b7f935f9\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/89af112cf590e76fbb1fd964086a3882b7f935f9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/89af112cf590e76fbb1fd964086a3882b7f935f9\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/89af112cf590e76fbb1fd964086a3882b7f935f9/comments\", \"author\": {\"login\": \"rnk\", \"id\": 50126, \"node_id\": \"MDQ6VXNlcjUwMTI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/50126?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rnk\", \"html_url\": \"https://github.com/rnk\", \"followers_url\": \"https://api.github.com/users/rnk/followers\", \"following_url\": \"https://api.github.com/users/rnk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rnk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rnk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rnk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rnk/orgs\", \"repos_url\": \"https://api.github.com/users/rnk/repos\", \"events_url\": \"https://api.github.com/users/rnk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rnk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rnk\", \"id\": 50126, \"node_id\": \"MDQ6VXNlcjUwMTI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/50126?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rnk\", \"html_url\": \"https://github.com/rnk\", \"followers_url\": \"https://api.github.com/users/rnk/followers\", \"following_url\": \"https://api.github.com/users/rnk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rnk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rnk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rnk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rnk/orgs\", \"repos_url\": \"https://api.github.com/users/rnk/repos\", \"events_url\": \"https://api.github.com/users/rnk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rnk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"be707f2930ceceb001557834b0e6940a5a81ce7b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/be707f2930ceceb001557834b0e6940a5a81ce7b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/be707f2930ceceb001557834b0e6940a5a81ce7b\"}], \"stats\": {\"total\": 93, \"additions\": 89, \"deletions\": 4}, \"files\": [{\"sha\": \"6eba00be00e06e75e49b50609c115f6f30726e4a\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp?ref=89af112cf590e76fbb1fd964086a3882b7f935f9\", \"patch\": \"@@ -1277,11 +1277,12 @@ TypeIndex CodeViewDebug::lowerTypeArray(const DICompositeType *Ty) {\\n            \\\"codeview doesn't support subranges with lower bounds\\\");\\n     int64_t Count = Subrange->getCount();\\n \\n-    // Variable Length Array (VLA) has Count equal to '-1'.\\n-    // Replace with Count '1', assume it is the minimum VLA length.\\n+    // Variable length arrays and forward declarations of arrays without a size\\n+    // use a count of -1. Emit a count (and overall size) or zero in these cases\\n+    // to match what MSVC does for array declarations with no count.\\n     // FIXME: Make front-end support VLA subrange and emit LF_DIMVARLU.\\n     if (Count == -1)\\n-      Count = 1;\\n+      Count = 0;\\n \\n     // Update the element size and element type index for subsequent subranges.\\n     ElementSize *= Count;\"}, {\"sha\": \"f13aa6ac853bc78f5659d4f34c766218b778ff50\", \"filename\": \"llvm/test/DebugInfo/COFF/types-array-advanced.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-advanced.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-advanced.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-advanced.ll?ref=89af112cf590e76fbb1fd964086a3882b7f935f9\", \"patch\": \"@@ -47,7 +47,7 @@\\n ; CHECK:     TypeLeafKind: LF_ARRAY (0x1503)\\n ; CHECK:     ElementType: int (0x74)\\n ; CHECK:     IndexType: unsigned long (0x22)\\n-; CHECK:     SizeOf: 4\\n+; CHECK:     SizeOf: 0\\n ; CHECK:     Name: \\n ; CHECK:   }\\n ; CHECK:   Pointer (0x1004) {\"}, {\"sha\": \"694e0a77b2cf40839b469b70ab83d561511f9c1d\", \"filename\": \"llvm/test/DebugInfo/COFF/types-array-unsized.ll\", \"status\": \"added\", \"additions\": 84, \"deletions\": 0, \"changes\": 84, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-unsized.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/89af112cf590e76fbb1fd964086a3882b7f935f9/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-unsized.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ftypes-array-unsized.ll?ref=89af112cf590e76fbb1fd964086a3882b7f935f9\", \"patch\": \"@@ -0,0 +1,84 @@\\n+; RUN: llc -filetype=obj < %s | llvm-readobj -codeview | FileCheck %s\\n+\\n+; We should emit two array types: one used to describe the static data member,\\n+; and the other used by the S_GDATA32 for the definition.\\n+\\n+; C++ source:\\n+; struct Foo {\\n+;   static const char str[];\\n+; };\\n+; const char Foo::str[] = \\\"asdf\\\";\\n+; Foo f; // FIXME: only needed to force emit 'Foo'\\n+\\n+; CHECK:      CodeViewTypes [\\n+; CHECK:        Array ([[ARRAY_COMPLETE:0x.*]]) {\\n+; CHECK-NEXT:     TypeLeafKind: LF_ARRAY (0x1503)\\n+; CHECK-NEXT:     ElementType: const char ({{.*}})\\n+; CHECK-NEXT:     IndexType: unsigned __int64 (0x23)\\n+; CHECK-NEXT:     SizeOf: 5\\n+; CHECK-NEXT:     Name: \\n+; CHECK-NEXT:   }\\n+; CHECK:        Array ([[ARRAY_FWD:0x.*]]) {\\n+; CHECK-NEXT:     TypeLeafKind: LF_ARRAY (0x1503)\\n+; CHECK-NEXT:     ElementType: const char ({{.*}})\\n+; CHECK-NEXT:     IndexType: unsigned __int64 (0x23)\\n+; CHECK-NEXT:     SizeOf: 0\\n+; CHECK-NEXT:     Name: \\n+; CHECK-NEXT:   }\\n+; CHECK:        FieldList (0x1004) {\\n+; CHECK-NEXT:     TypeLeafKind: LF_FIELDLIST (0x1203)\\n+; CHECK-NEXT:     StaticDataMember {\\n+; CHECK-NEXT:       TypeLeafKind: LF_STMEMBER (0x150E)\\n+; CHECK-NEXT:       AccessSpecifier: Public (0x3)\\n+; CHECK-NEXT:       Type: [[ARRAY_FWD]]\\n+; CHECK-NEXT:       Name: str\\n+; CHECK-NEXT:     }\\n+; CHECK-NEXT:   }\\n+; CHECK:      ]\\n+\\n+; CHECK:          GlobalData {\\n+; CHECK-NEXT:       Kind: S_GDATA32 (0x110D)\\n+; CHECK-NEXT:       DataOffset: ?str@Foo@@2QBDB+0x0\\n+; CHECK-NEXT:       Type: [[ARRAY_COMPLETE]]\\n+; CHECK-NEXT:       DisplayName: str\\n+; CHECK-NEXT:       LinkageName: ?str@Foo@@2QBDB\\n+; CHECK-NEXT:     }\\n+\\n+; ModuleID = 't.cpp'\\n+source_filename = \\\"t.cpp\\\"\\n+target datalayout = \\\"e-m:w-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-pc-windows-msvc19.0.24215\\\"\\n+\\n+%struct.Foo = type { i8 }\\n+\\n+@\\\"\\\\01?str@Foo@@2QBDB\\\" = constant [5 x i8] c\\\"asdf\\\\00\\\", align 1, !dbg !0\\n+@\\\"\\\\01?f@@3UFoo@@A\\\" = global %struct.Foo zeroinitializer, align 1, !dbg !6\\n+\\n+!llvm.dbg.cu = !{!2}\\n+!llvm.module.flags = !{!19, !20, !21, !22}\\n+!llvm.ident = !{!23}\\n+\\n+!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())\\n+!1 = distinct !DIGlobalVariable(name: \\\"str\\\", linkageName: \\\"\\\\01?str@Foo@@2QBDB\\\", scope: !2, file: !3, line: 4, type: !16, isLocal: false, isDefinition: true, declaration: !10)\\n+!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: \\\"clang version 6.0.0 \\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5)\\n+!3 = !DIFile(filename: \\\"t.cpp\\\", directory: \\\"C:\\\\5Csrc\\\\5Cllvm-project\\\\5Cbuild\\\", checksumkind: CSK_MD5, checksum: \\\"15aa843c5a80301928caf03e71f87a54\\\")\\n+!4 = !{}\\n+!5 = !{!0, !6}\\n+!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())\\n+!7 = distinct !DIGlobalVariable(name: \\\"f\\\", linkageName: \\\"\\\\01?f@@3UFoo@@A\\\", scope: !2, file: !3, line: 5, type: !8, isLocal: false, isDefinition: true)\\n+!8 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"Foo\\\", file: !3, line: 1, size: 8, elements: !9, identifier: \\\".?AUFoo@@\\\")\\n+!9 = !{!10}\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"str\\\", scope: !8, file: !3, line: 2, baseType: !11, flags: DIFlagStaticMember)\\n+!11 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, elements: !14)\\n+!12 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)\\n+!13 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n+!14 = !{!15}\\n+!15 = !DISubrange(count: -1)\\n+!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 40, elements: !17)\\n+!17 = !{!18}\\n+!18 = !DISubrange(count: 5)\\n+!19 = !{i32 2, !\\\"CodeView\\\", i32 1}\\n+!20 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!21 = !{i32 1, !\\\"wchar_size\\\", i32 2}\\n+!22 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+!23 = !{!\\\"clang version 6.0.0 \\\"}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wMWZkN2M4YmQ0ZmIzMzg1MjE1YmZmNzU4YjBiZjY4ZjE3OWU4NDJiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/01fd7c8bd4fb3385215bff758b0bf68f179e842b", "content": "{\"sha\": \"01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDFmZDdjOGJkNGZiMzM4NTIxNWJmZjc1OGIwYmY2OGYxNzllODQyYg==\", \"commit\": {\"author\": {\"name\": \"Dean Michael Berris\", \"email\": \"dberris@google.com\", \"date\": \"2017-09-14T07:08:23Z\"}, \"committer\": {\"name\": \"Dean Michael Berris\", \"email\": \"dberris@google.com\", \"date\": \"2017-09-14T07:08:23Z\"}, \"message\": \"[XRay][CodeGen] Use the current function symbol as the associated symbol for the instrumentation map\\n\\nSummary:\\nXRay had been assuming that the previous section is the \\\"text\\\" section\\nof the function when lowering the instrumentation map. Unfortunately\\nthis is not a safe assumption, because we may be coming from lowering\\ndebug type information for the function being lowered.\\n\\nThis fixes an issue with combining -gsplit-dwarf, -generate-type-units,\\n-debug-compile and -fxray-instrument for sole member functions. When the\\nsplit dwarf section is stripped, we're left with references from the\\nxray_instr_map to the debug section. The change now uses the function's\\nsymbol instead of the previous section's start symbol.\\n\\nWe found the bug while attempting to strip the split debug sections off\\nan XRay-instrumented object file, which had a peculiar edge-case for\\nsingle-function classes where the single function is being lowered.\\nBecause XRay had assocaited the instrumentation map for a function to\\nthe debug types section instead of the function's section, the objcopy\\ncall will fail due to the misplaced reference from the xray_instr_map\\nsection.\\n\\nReviewers: pcc, dblaikie, echristo\\n\\nSubscribers: llvm-commits, aprantl\\n\\nDifferential Revision: https://reviews.llvm.org/D37791\\n\\nllvm-svn: 313233\", \"tree\": {\"sha\": \"5011a57d546211e2955c54ddc93ff7067684cded\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/5011a57d546211e2955c54ddc93ff7067684cded\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/01fd7c8bd4fb3385215bff758b0bf68f179e842b/comments\", \"author\": {\"login\": \"deanberris\", \"id\": 839088, \"node_id\": \"MDQ6VXNlcjgzOTA4OA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/839088?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/deanberris\", \"html_url\": \"https://github.com/deanberris\", \"followers_url\": \"https://api.github.com/users/deanberris/followers\", \"following_url\": \"https://api.github.com/users/deanberris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/deanberris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/deanberris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/deanberris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/deanberris/orgs\", \"repos_url\": \"https://api.github.com/users/deanberris/repos\", \"events_url\": \"https://api.github.com/users/deanberris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/deanberris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"deanberris\", \"id\": 839088, \"node_id\": \"MDQ6VXNlcjgzOTA4OA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/839088?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/deanberris\", \"html_url\": \"https://github.com/deanberris\", \"followers_url\": \"https://api.github.com/users/deanberris/followers\", \"following_url\": \"https://api.github.com/users/deanberris/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/deanberris/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/deanberris/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/deanberris/subscriptions\", \"organizations_url\": \"https://api.github.com/users/deanberris/orgs\", \"repos_url\": \"https://api.github.com/users/deanberris/repos\", \"events_url\": \"https://api.github.com/users/deanberris/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/deanberris/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0fd7c5ccd6a15198c0cce4e8b83728ede7b7c7e4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0fd7c5ccd6a15198c0cce4e8b83728ede7b7c7e4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0fd7c5ccd6a15198c0cce4e8b83728ede7b7c7e4\"}], \"stats\": {\"total\": 98, \"additions\": 91, \"deletions\": 7}, \"files\": [{\"sha\": \"ee5cb35fa9d4f987d3583de513a47b424e93c560\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp?ref=01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"patch\": \"@@ -2785,7 +2785,7 @@ void AsmPrinter::emitXRayTable() {\\n   MCSection *InstMap = nullptr;\\n   MCSection *FnSledIndex = nullptr;\\n   if (MF->getSubtarget().getTargetTriple().isOSBinFormatELF()) {\\n-    auto Associated = dyn_cast<MCSymbolELF>(PrevSection->getBeginSymbol());\\n+    auto Associated = dyn_cast<MCSymbolELF>(CurrentFnSym);\\n     assert(Associated != nullptr);\\n     auto Flags = ELF::SHF_WRITE | ELF::SHF_ALLOC | ELF::SHF_LINK_ORDER;\\n     std::string GroupName;\"}, {\"sha\": \"d295ff39e523145bd77e789b12273133c4e14984\", \"filename\": \"llvm/test/CodeGen/Mips/xray-section-group.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FMips%2Fxray-section-group.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FMips%2Fxray-section-group.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FMips%2Fxray-section-group.ll?ref=01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"patch\": \"@@ -14,7 +14,7 @@\\n define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" {\\n ; CHECK: .section .text.foo,\\\"ax\\\",@progbits\\n   ret i32 0\\n-; CHECK: .section xray_instr_map,\\\"awo\\\",@progbits,.text.foo,unique,1\\n+; CHECK: .section xray_instr_map,\\\"awo\\\",@progbits,foo,unique,1\\n }\\n \\n ; CHECK-OBJ: Section {\\n@@ -24,7 +24,7 @@ $bar = comdat any\\n define i32 @bar() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" comdat($bar) {\\n ; CHECK: .section .text.bar,\\\"axG\\\",@progbits,bar,comdat\\n   ret i32 1\\n-; CHECK: .section xray_instr_map,\\\"aGwo\\\",@progbits,bar,comdat,.text.bar,unique,2\\n+; CHECK: .section xray_instr_map,\\\"aGwo\\\",@progbits,bar,comdat,bar,unique,2\\n }\\n \\n ; CHECK-OBJ: Section {\"}, {\"sha\": \"875c1775216bce10a17e16fc836932f838fb2cc0\", \"filename\": \"llvm/test/CodeGen/PowerPC/xray-attribute-instrumentation.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-attribute-instrumentation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-attribute-instrumentation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-attribute-instrumentation.ll?ref=01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"patch\": \"@@ -22,7 +22,7 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-NEXT:         nop\\n ; CHECK-NEXT:         mtlr 0\\n }\\n-; CHECK-LABEL: xray_instr_map,\\\"awo\\\",@progbits,.text,unique,1\\n+; CHECK-LABEL: xray_instr_map,\\\"awo\\\",@progbits,foo,unique,1\\n ; CHECK:      .Lxray_sleds_start0:\\n ; CHECK-NEXT:         .quad   .Ltmp0\\n ; CHECK-NEXT:         .quad   foo\\n@@ -37,7 +37,7 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-NEXT:         .byte   0x00\\n ; CHECK-NEXT:         .space  13\\n ; CHECK-NEXT: .Lxray_sleds_end0:\\n-; CHECK-LABEL: xray_fn_idx,\\\"awo\\\",@progbits,.text,unique,1\\n+; CHECK-LABEL: xray_fn_idx,\\\"awo\\\",@progbits,foo,unique,1\\n ; CHECK:              .p2align        4\\n ; CHECK-NEXT:         .quad   .Lxray_sleds_start0\\n ; CHECK-NEXT:         .quad   .Lxray_sleds_end0\"}, {\"sha\": \"fc06fd4a0dd34b5d480e924c6ec45b8478f48bca\", \"filename\": \"llvm/test/CodeGen/X86/xray-section-group.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-section-group.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-section-group.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-section-group.ll?ref=01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"patch\": \"@@ -5,14 +5,14 @@\\n define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" {\\n ; CHECK: .section .text.foo,\\\"ax\\\",@progbits\\n   ret i32 0\\n-; CHECK: .section xray_instr_map,\\\"awo\\\",@progbits,.text.foo,unique,1\\n+; CHECK: .section xray_instr_map,\\\"awo\\\",@progbits,foo,unique,1\\n }\\n \\n $bar = comdat any\\n define i32 @bar() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" comdat($bar) {\\n ; CHECK: .section .text.bar,\\\"axG\\\",@progbits,bar,comdat\\n   ret i32 1\\n-; CHECK: .section xray_instr_map,\\\"aGwo\\\",@progbits,bar,comdat,.text.bar,unique,2\\n+; CHECK: .section xray_instr_map,\\\"aGwo\\\",@progbits,bar,comdat,bar,unique,2\\n }\\n \\n ; CHECK-OBJ:      section xray_instr_map:\"}, {\"sha\": \"2696e50014603c298e763195eb05189d0568bfec\", \"filename\": \"llvm/test/DebugInfo/X86/xray-split-dwarf-interaction.ll\", \"status\": \"added\", \"additions\": 84, \"deletions\": 0, \"changes\": 84, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FDebugInfo%2FX86%2Fxray-split-dwarf-interaction.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01fd7c8bd4fb3385215bff758b0bf68f179e842b/llvm%2Ftest%2FDebugInfo%2FX86%2Fxray-split-dwarf-interaction.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fxray-split-dwarf-interaction.ll?ref=01fd7c8bd4fb3385215bff758b0bf68f179e842b\", \"patch\": \"@@ -0,0 +1,84 @@\\n+; RUN: %llc_dwarf -split-dwarf-file=input.dwo -O3 \\\\\\n+; RUN:     -function-sections -data-sections \\\\\\n+; RUN:     -relocation-model=pic -filetype=asm \\\\\\n+; RUN:     -generate-type-units -debug-compile -o - %s | \\\\\\n+; RUN:     FileCheck %s --check-prefix=CHECK-ASM\\n+; RUN: %llc_dwarf -split-dwarf-file=input.dwo -O3 \\\\\\n+; RUN:     -function-sections -data-sections \\\\\\n+; RUN:     -relocation-model=pic -filetype=obj \\\\\\n+; RUN:     -generate-type-units -debug-compile -o - %s | \\\\\\n+; RUN:     llvm-readelf -sections | \\\\\\n+; RUN:     FileCheck %s --check-prefix=CHECK-ELF\\n+; Created from `clang++ -fxray-instrument -gsplit-dwarf -fdebug-types-section\\n+; -ffunction-sections -fdata-sections -emit-llvm -S input.cc`:\\n+; input.cc:\\n+;\\n+; class a {\\n+;   int b();\\n+; };\\n+; int a::b() {\\n+;   for (;;)\\n+;     ;\\n+; }\\n+;\\n+; In this test we want to make sure that the xray_instr_map section for\\n+; `a::b()` is actually associated with the function's symbol instead of the\\n+; .debug_types.dwo section.\\n+;\\n+; CHECK-ASM: xray_fn_idx,\\\"awo\\\",@progbits,_ZN1a1bEv,unique,1\\n+;\\n+; CHECK-ELF-DAG: [[FSECT:[0-9]+]]] .text._ZN1a1bEv PROGBITS\\n+; CHECK-ELF-DAG: [{{.*}}] .debug_types.dwo PROGBITS\\n+; CHECK-ELF-DAG: [{{.*}}] xray_instr_map PROGBITS {{.*}} {{.*}} {{.*}} {{.*}} WAL [[FSECT]]\\n+target triple = \\\"x86_64-pc-linux\\\"\\n+\\n+%class.a = type { i8 }\\n+\\n+; Function Attrs: nounwind readnone uwtable\\n+define i32 @_ZN1a1bEv(%class.a* nocapture readnone) local_unnamed_addr #0 align 2 !dbg !8 {\\n+  tail call void @llvm.dbg.value(metadata %class.a* %0, metadata !17, metadata !DIExpression()), !dbg !19\\n+  br label %2, !dbg !20\\n+\\n+; <label>:2:                                      ; preds = %2, %1\\n+  br label %2, !dbg !21, !llvm.loop !25\\n+}\\n+\\n+\\n+; Function Attrs: nounwind readnone speculatable\\n+declare void @llvm.dbg.value(metadata, metadata, metadata) #1\\n+\\n+attributes #0 = { nounwind readnone uwtable \\\"xray-instruction-threshold\\\"=\\\"200\\\" }\\n+attributes #1 = { nounwind readnone speculatable }\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4, !5, !6}\\n+!llvm.ident = !{!7}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: \\\"clang version trunk (trunk r312634)\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, debugInfoForProfiling: true)\\n+!1 = !DIFile(filename: \\\"input.cc\\\", directory: \\\"/usr/local/google/home/dberris/tmp\\\")\\n+!2 = !{}\\n+!3 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!4 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!5 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+!6 = !{i32 7, !\\\"PIE Level\\\", i32 2}\\n+!7 = !{!\\\"clang version trunk (trunk r312634)\\\"}\\n+!8 = distinct !DISubprogram(name: \\\"b\\\", linkageName: \\\"_ZN1a1bEv\\\", scope: !9, file: !1, line: 4, type: !12, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, unit: !0, declaration: !11, variables: !16)\\n+!9 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"a\\\", file: !1, line: 1, size: 8, elements: !10, identifier: \\\"_ZTS1a\\\")\\n+!10 = !{!11}\\n+!11 = !DISubprogram(name: \\\"b\\\", linkageName: \\\"_ZN1a1bEv\\\", scope: !9, file: !1, line: 2, type: !12, isLocal: false, isDefinition: false, scopeLine: 2, flags: DIFlagPrototyped, isOptimized: true)\\n+!12 = !DISubroutineType(types: !13)\\n+!13 = !{!14, !15}\\n+!14 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!16 = !{!17}\\n+!17 = !DILocalVariable(name: \\\"this\\\", arg: 1, scope: !8, type: !18, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)\\n+!19 = !DILocation(line: 0, scope: !8)\\n+!20 = !DILocation(line: 5, column: 3, scope: !8)\\n+!21 = !DILocation(line: 5, column: 3, scope: !22)\\n+!22 = !DILexicalBlockFile(scope: !23, file: !1, discriminator: 2)\\n+!23 = distinct !DILexicalBlock(scope: !24, file: !1, line: 5, column: 3)\\n+!24 = distinct !DILexicalBlock(scope: !8, file: !1, line: 5, column: 3)\\n+!25 = distinct !{!25, !26, !27}\\n+!26 = !DILocation(line: 5, column: 3, scope: !24)\\n+!27 = !DILocation(line: 6, column: 5, scope: !24)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83ZmRhYTVlNjQxMTRiZDViNjE0Y2ZmODdiYzM1MGU0MzU4Yjk1MjAwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/7fdaa5e64114bd5b614cff87bc350e4358b95200", "content": "{\"sha\": \"7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6N2ZkYWE1ZTY0MTE0YmQ1YjYxNGNmZjg3YmMzNTBlNDM1OGI5NTIwMA==\", \"commit\": {\"author\": {\"name\": \"Quentin Colombet\", \"email\": \"qcolombet@apple.com\", \"date\": \"2017-09-19T21:55:51Z\"}, \"committer\": {\"name\": \"Quentin Colombet\", \"email\": \"qcolombet@apple.com\", \"date\": \"2017-09-19T21:55:51Z\"}, \"message\": \"[MIRPrinter] Print empty successor lists when they cannot be guessed\\n\\nUnreachable blocks in the machine instr representation are these\\nweird empty blocks with no successors.\\nThe MIR printer used to not print empty lists of successors. However,\\nthe MIR parser now treats non-printed list of successors as \\\"please\\nguess it for me\\\". As a result, the parser tries to guess the list of\\nsuccessors and given the block is empty, just assumes it falls through\\nthe next block (if any).\\n\\nFor instance, the following test case used to fail the verifier.\\nThe MIR printer would print\\n          entry\\n         /      \\\\\\n    true (def)   false (no list of successors)\\n        |\\n  split.true (use)\\n\\nThe MIR parser would understand this:\\n          entry\\n         /      \\\\\\n    true (def)   false\\n        |        /  <-- invalid edge\\n  split.true (use)\\n\\nBecause of the invalid edge, we get the \\\"def does not\\ndominate all uses\\\" error.\\n\\nThe fix consists in printing empty successor lists, so that the parser\\nknows what to do for unreachable blocks.\\n\\nrdar://problem/34022159\\n\\nllvm-svn: 313685\", \"tree\": {\"sha\": \"b1ac6890a305d45e78ccd72b7c57c7de903090ac\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/b1ac6890a305d45e78ccd72b7c57c7de903090ac\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7fdaa5e64114bd5b614cff87bc350e4358b95200/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"21a2aa72037649bfd64bda08706c06fb3fc0e9b7\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/21a2aa72037649bfd64bda08706c06fb3fc0e9b7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/21a2aa72037649bfd64bda08706c06fb3fc0e9b7\"}], \"stats\": {\"total\": 51, \"additions\": 49, \"deletions\": 2}, \"files\": [{\"sha\": \"6347e6da9422949be71b132fb7799ef2622edd05\", \"filename\": \"llvm/lib/CodeGen/MIRPrinter.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7fdaa5e64114bd5b614cff87bc350e4358b95200/llvm%2Flib%2FCodeGen%2FMIRPrinter.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7fdaa5e64114bd5b614cff87bc350e4358b95200/llvm%2Flib%2FCodeGen%2FMIRPrinter.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FMIRPrinter.cpp?ref=7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"patch\": \"@@ -598,8 +598,7 @@ void MIPrinter::print(const MachineBasicBlock &MBB) {\\n   bool HasLineAttributes = false;\\n   // Print the successors\\n   bool canPredictProbs = canPredictBranchProbabilities(MBB);\\n-  if (!MBB.succ_empty() && (!SimplifyMIR || !canPredictProbs ||\\n-                            !canPredictSuccessors(MBB))) {\\n+  if (!SimplifyMIR || !canPredictProbs || !canPredictSuccessors(MBB)) {\\n     OS.indent(2) << \\\"successors: \\\";\\n     for (auto I = MBB.succ_begin(), E = MBB.succ_end(); I != E; ++I) {\\n       if (I != MBB.succ_begin())\"}, {\"sha\": \"4cea0392255c6f33303b1a48657eac8c4d27a120\", \"filename\": \"llvm/test/CodeGen/MIR/X86/unreachable_block.ll\", \"status\": \"added\", \"additions\": 48, \"deletions\": 0, \"changes\": 48, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7fdaa5e64114bd5b614cff87bc350e4358b95200/llvm%2Ftest%2FCodeGen%2FMIR%2FX86%2Funreachable_block.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7fdaa5e64114bd5b614cff87bc350e4358b95200/llvm%2Ftest%2FCodeGen%2FMIR%2FX86%2Funreachable_block.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FMIR%2FX86%2Funreachable_block.ll?ref=7fdaa5e64114bd5b614cff87bc350e4358b95200\", \"patch\": \"@@ -0,0 +1,48 @@\\n+; RUN: llc -mtriple x86_64-- -stop-before peephole-opt -o %t.mir %s\\n+; RUN: llc -mtriple x86_64-- -run-pass none %t.mir -verify-machineinstrs -o - | FileCheck %s\\n+\\n+; Unreachable blocks in the machine instr representation are these\\n+; weird empty blocks with no successors.\\n+; The MIR printer used to not print empty lists of successors. However,\\n+; the MIR parser now treats non-printed list of successors as \\\"please\\n+; guess it for me\\\". As a result, the parser tries to guess the list of\\n+; successors and given the block is empty, just assumes it falls through\\n+; the next block.\\n+;\\n+; The following test case used to fail the verifier because the false\\n+; path ended up falling through split.true and now, the definition of\\n+; %v does not dominate all its uses.\\n+; Indeed, we go from the following CFG:\\n+;          entry\\n+;         /      \\\\\\n+;    true (def)   false\\n+;        |\\n+;  split.true (use)\\n+;\\n+; To this one:\\n+;          entry\\n+;         /      \\\\\\n+;    true (def)   false\\n+;        |        /  <-- invalid edge\\n+;  split.true (use)\\n+;\\n+; Because of the invalid edge, we get the \\\"def does not\\n+; dominate all uses\\\" error.\\n+;\\n+; CHECK-LABEL: name: foo\\n+; CHECK-LABEL: bb.{{[0-9]+}}.false:\\n+; CHECK-NEXT: successors:\\n+; CHECK-NOT: %bb.{{[0-9]+}}.split.true\\n+; CHECK-LABEL: bb.{{[0-9]+}}.split.true:\\n+define void @foo(i32* %bar) {\\n+  br i1 undef, label %true, label %false\\n+true:\\n+  %v = load i32, i32* %bar\\n+  br label %split.true\\n+false:\\n+  unreachable\\n+split.true:\\n+  %vInc = add i32 %v, 1\\n+  store i32 %vInc, i32* %bar\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xN2IwYzc4NDQ3ZTA5NGU4NDY1YWJjNWRmYjNhNDkxZjAyNTIxNjQ3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/17b0c78447e094e8465abc5dfb3a491f02521647", "content": "{\"sha\": \"17b0c78447e094e8465abc5dfb3a491f02521647\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MTdiMGM3ODQ0N2UwOTRlODQ2NWFiYzVkZmIzYTQ5MWYwMjUyMTY0Nw==\", \"commit\": {\"author\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2017-10-05T07:59:11Z\"}, \"committer\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2017-10-05T07:59:11Z\"}, \"message\": \"[InstCombine] Fix a vector splat handling bug in transformZExtICmp.\\n\\nWe were using an i1 type and then zero extending to a vector. Instead just create the 0/1 directly as a ConstantInt with the correct type. No need to ask ConstantExpr to zero extend for us.\\n\\nThis bug is a bit tricky to hit because it requires us to visit a zext of an icmp that would normally be simplified to true/false, but that icmp hasnt' been visited yet. In the test case this zext and icmp were created by visiting a udiv and due to worklist ordering we got to the zext first.\\n\\nFixes PR34841.\\n\\nllvm-svn: 314971\", \"tree\": {\"sha\": \"3588e463f87b1faad7bcb684f75f5808997c927f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/3588e463f87b1faad7bcb684f75f5808997c927f\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/17b0c78447e094e8465abc5dfb3a491f02521647\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/17b0c78447e094e8465abc5dfb3a491f02521647\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/17b0c78447e094e8465abc5dfb3a491f02521647\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/17b0c78447e094e8465abc5dfb3a491f02521647/comments\", \"author\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"902eef32ebd1f272d54e0eb615f3c1e427a04b0b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/902eef32ebd1f272d54e0eb615f3c1e427a04b0b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/902eef32ebd1f272d54e0eb615f3c1e427a04b0b\"}], \"stats\": {\"total\": 13, \"additions\": 10, \"deletions\": 3}, \"files\": [{\"sha\": \"5e4fd8c265679b7a95060b21c2448676634420dd\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 3, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/17b0c78447e094e8465abc5dfb3a491f02521647/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/17b0c78447e094e8465abc5dfb3a491f02521647/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp?ref=17b0c78447e094e8465abc5dfb3a491f02521647\", \"patch\": \"@@ -818,9 +818,7 @@ Instruction *InstCombiner::transformZExtICmp(ICmpInst *ICI, ZExtInst &CI,\\n         if (!Op1CV->isNullValue() && (*Op1CV != KnownZeroMask)) {\\n           // (X&4) == 2 --> false\\n           // (X&4) != 2 --> true\\n-          Constant *Res = ConstantInt::get(Type::getInt1Ty(CI.getContext()),\\n-                                           isNE);\\n-          Res = ConstantExpr::getZExt(Res, CI.getType());\\n+          Constant *Res = ConstantInt::get(CI.getType(), isNE);\\n           return replaceInstUsesWith(CI, Res);\\n         }\\n \"}, {\"sha\": \"42da1382f976a69b67c0972c937dff118009fc23\", \"filename\": \"llvm/test/Transforms/InstCombine/div.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/17b0c78447e094e8465abc5dfb3a491f02521647/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdiv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/17b0c78447e094e8465abc5dfb3a491f02521647/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdiv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdiv.ll?ref=17b0c78447e094e8465abc5dfb3a491f02521647\", \"patch\": \"@@ -553,3 +553,12 @@ define i32 @shrink_no3(i16 %x) {\\n   ret i32 %div\\n }\\n \\n+; This previously crashed when trying to simplify the zext/icmp this becomes.\\n+define <2 x i8> @PR34841(<2 x i8> %x) {\\n+; CHECK-LABEL: @PR34841(\\n+; CHECK-NEXT:    ret <2 x i8> zeroinitializer\\n+;\\n+  %neg = and <2 x i8> %x, <i8 2, i8 2>\\n+  %div = udiv <2 x i8> <i8 1, i8 1>, %neg\\n+  ret <2 x i8> %div\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83N2Q5MGIwYzM5ZjA3OWI4ODcxYzM5NzcyYTViYWQ4YjhiZmFjMzIyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/77d90b0c39f079b8871c39772a5bad8b8bfac322", "content": "{\"sha\": \"77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NzdkOTBiMGMzOWYwNzliODg3MWMzOTc3MmE1YmFkOGI4YmZhYzMyMg==\", \"commit\": {\"author\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2017-11-28T21:30:38Z\"}, \"committer\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2017-11-28T21:30:38Z\"}, \"message\": \"SROA: Don't create variable fragments that are outside of the variable.\\n\\nAn alloca may be larger than a variable that is described to be stored\\nthere. Don't create a dbg.value for fragments that are outside of the\\nvariable.\\n\\nThis fixes PR35447.\\nhttps://bugs.llvm.org/show_bug.cgi?id=35447\\n\\nllvm-svn: 319230\", \"tree\": {\"sha\": \"bb4f0e3da1e4ca11a7753d425c305b12ae1f3159\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/bb4f0e3da1e4ca11a7753d425c305b12ae1f3159\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/77d90b0c39f079b8871c39772a5bad8b8bfac322/comments\", \"author\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bcf7f290ffc57ae6bc4ff7a14bbf90b83b47844c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bcf7f290ffc57ae6bc4ff7a14bbf90b83b47844c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bcf7f290ffc57ae6bc4ff7a14bbf90b83b47844c\"}], \"stats\": {\"total\": 94, \"additions\": 94, \"deletions\": 0}, \"files\": [{\"sha\": \"bd064978b645d504052b852f79a970e6e6cddd5d\", \"filename\": \"llvm/lib/Transforms/Scalar/SROA.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/77d90b0c39f079b8871c39772a5bad8b8bfac322/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/77d90b0c39f079b8871c39772a5bad8b8bfac322/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp?ref=77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"patch\": \"@@ -4134,6 +4134,15 @@ bool SROA::splitAlloca(AllocaInst &AI, AllocaSlices &AS) {\\n                  \\\"new fragment is outside of original fragment\\\");\\n           Start -= OrigFragment->OffsetInBits;\\n         }\\n+\\n+        // The alloca may be larger than the variable.\\n+        if (VarSize) {\\n+          if (Size > *VarSize)\\n+            Size = *VarSize;\\n+          if (Size == 0 || Start + Size > *VarSize)\\n+            continue;\\n+        }\\n+\\n         // Avoid creating a fragment expression that covers the entire variable.\\n         if (!VarSize || *VarSize != Size) {\\n           if (auto E =\"}, {\"sha\": \"db76647197e8cdbb0d4e58c32a2df96e5912b6c4\", \"filename\": \"llvm/test/DebugInfo/Generic/sroa-larger.ll\", \"status\": \"added\", \"additions\": 85, \"deletions\": 0, \"changes\": 85, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/77d90b0c39f079b8871c39772a5bad8b8bfac322/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fsroa-larger.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/77d90b0c39f079b8871c39772a5bad8b8bfac322/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fsroa-larger.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fsroa-larger.ll?ref=77d90b0c39f079b8871c39772a5bad8b8bfac322\", \"patch\": \"@@ -0,0 +1,85 @@\\n+; RUN: opt -sroa -S -o - %s | FileCheck %s\\n+; Generated from clang -c  -O2 -g -target x86_64-pc-windows-msvc\\n+; struct A {\\n+;   int _Myval2;\\n+;   A() : _Myval2() {}\\n+; };\\n+; struct B {\\n+;   double buffer[];\\n+; };\\n+; struct C {\\n+;   C(int) {}\\n+;   A _Mypair;\\n+; };\\n+; int getPtr();\\n+; struct D {\\n+;   C takePayload() {\\n+;     C Tmp(getPtr());\\n+;     return Tmp;\\n+;   }\\n+; } Dd;\\n+; void *operator new(size_t, void *);\\n+; struct F {\\n+;   F(D Err) : HasError() {\\n+;     C *e = (C *)(ErrorStorage.buffer);\\n+;     new (e) C(Err.takePayload());\\n+;   }\\n+;   B ErrorStorage;\\n+;   bool HasError;\\n+; };\\n+; F fn2() { return Dd; }\\n+; void fn3() { fn2(); }\\n+source_filename = \\\"test.ll\\\"\\n+\\n+%struct.F = type { %struct.B, i8 }\\n+%struct.B = type { [0 x double], [8 x i8] }\\n+\\n+define void @\\\"\\\\01?fn3@@YAXXZ\\\"() local_unnamed_addr !dbg !6 {\\n+entry:\\n+  %tmp = alloca %struct.F, align 8\\n+  %0 = bitcast %struct.F* %tmp to i8*\\n+  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0)\\n+  call void @llvm.dbg.declare(metadata %struct.F* %tmp, metadata !10, metadata !DIExpression()), !dbg !14\\n+  ; CHECK-NOT: !DIExpression(DW_OP_LLVM_fragment, 32, 96)\\n+  ; CHECK: call void @llvm.dbg.value(metadata i32 0, metadata !10, metadata !DIExpression())\\n+  %_Myval2.i.i.i.i.i = bitcast %struct.F* %tmp to i32*\\n+  store i32 0, i32* %_Myval2.i.i.i.i.i, align 8\\n+  ret void\\n+}\\n+\\n+; Function Attrs: argmemonly nounwind\\n+declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #0\\n+\\n+; Function Attrs: nounwind readnone speculatable\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata) #1\\n+\\n+attributes #0 = { argmemonly nounwind }\\n+attributes #1 = { nounwind readnone speculatable }\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!2, !3, !4, !5}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: \\\"clang version 6.0.0 (trunk 319178) (llvm/trunk 319187)\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)\\n+!1 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\"/\\\")\\n+!2 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!3 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!4 = !{i32 1, !\\\"wchar_size\\\", i32 2}\\n+!5 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+!6 = distinct !DISubprogram(name: \\\"fn3\\\", linkageName: \\\"\\\\01?fn3@@YAXXZ\\\", scope: !1, file: !1, line: 30, type: !7, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !9)\\n+!7 = !DISubroutineType(types: !8)\\n+!8 = !{null}\\n+!9 = !{}\\n+!10 = !DILocalVariable(name: \\\"Tmp\\\", scope: !11, file: !1, line: 16, type: !23)\\n+!11 = distinct !DISubprogram(name: \\\"takePayload\\\", linkageName: \\\"\\\\01?takePayload@D@@QEAA?AUC@@XZ\\\", scope: !12, file: !1, line: 15, type: !7, isLocal: false, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: true, unit: !0, declaration: !13, variables: !9)\\n+!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"D\\\", file: !1, line: 14, size: 8, elements: !9, identifier: \\\".?AUD@@\\\")\\n+!13 = !DISubprogram(name: \\\"takePayload\\\", linkageName: \\\"\\\\01?takePayload@D@@QEAA?AUC@@XZ\\\", scope: !12, file: !1, line: 15, type: !7, isLocal: false, isDefinition: false, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: true)\\n+!14 = !DILocation(line: 16, column: 7, scope: !11, inlinedAt: !15)\\n+!15 = distinct !DILocation(line: 24, column: 19, scope: !16, inlinedAt: !20)\\n+!16 = distinct !DILexicalBlock(scope: !17, file: !1, line: 22, column: 25)\\n+!17 = distinct !DISubprogram(name: \\\"F\\\", linkageName: \\\"\\\\01??0F@@QEAA@UD@@@Z\\\", scope: !18, file: !1, line: 22, type: !7, isLocal: false, isDefinition: true, scopeLine: 22, flags: DIFlagPrototyped, isOptimized: true, unit: !0, declaration: !19, variables: !9)\\n+!18 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"F\\\", file: !1, line: 21, size: 128, elements: !9, identifier: \\\".?AUF@@\\\")\\n+!19 = !DISubprogram(name: \\\"F\\\", scope: !18, file: !1, line: 22, type: !7, isLocal: false, isDefinition: false, scopeLine: 22, flags: DIFlagPrototyped, isOptimized: true)\\n+!20 = distinct !DILocation(line: 29, column: 18, scope: !21, inlinedAt: !22)\\n+!21 = distinct !DISubprogram(name: \\\"fn2\\\", linkageName: \\\"\\\\01?fn2@@YA?AUF@@XZ\\\", scope: !1, file: !1, line: 29, type: !7, isLocal: false, isDefinition: true, scopeLine: 29, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !9)\\n+!22 = distinct !DILocation(line: 30, column: 14, scope: !6)\\n+!23 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"C\\\", file: !1, line: 9, size: 32, elements: !9, identifier: \\\".?AUC@@\\\")\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mM2NlZmRkMzUwNWViYmEwYmQyYzE2MjUyMjgwMzNmMmQzNzQ1NTY0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f3cefdd3505ebba0bd2c1625228033f2d3745564", "content": "{\"sha\": \"f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZjNjZWZkZDM1MDVlYmJhMGJkMmMxNjI1MjI4MDMzZjJkMzc0NTU2NA==\", \"commit\": {\"author\": {\"name\": \"Guy Blank\", \"email\": \"guy.blank@intel.com\", \"date\": \"2017-12-05T09:08:24Z\"}, \"committer\": {\"name\": \"Guy Blank\", \"email\": \"guy.blank@intel.com\", \"date\": \"2017-12-05T09:08:24Z\"}, \"message\": \"[X86] Fix a bug in handling GRXX subclasses in Domain Reassignment pass\\n\\nWhen trying to determine the correct Mask register class corresponding\\nto a GPR register class, not all register classes were handled.\\nThis caused an assertion to be raised on some scenarios.\\n\\nDifferential Revision:\\nhttps://reviews.llvm.org/D40290\\n\\nllvm-svn: 319745\", \"tree\": {\"sha\": \"10ea798ef1fe450f30669825581bbb80c90efe72\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/10ea798ef1fe450f30669825581bbb80c90efe72\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f3cefdd3505ebba0bd2c1625228033f2d3745564/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"98495291a7f236d356d851509adb7d7b4fd530ff\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/98495291a7f236d356d851509adb7d7b4fd530ff\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/98495291a7f236d356d851509adb7d7b4fd530ff\"}], \"stats\": {\"total\": 520, \"additions\": 360, \"deletions\": 160}, \"files\": [{\"sha\": \"573b7caf29c0afb53e05ec7e1d2d4185ab738fc4\", \"filename\": \"llvm/lib/Target/X86/X86DomainReassignment.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f3cefdd3505ebba0bd2c1625228033f2d3745564/llvm%2Flib%2FTarget%2FX86%2FX86DomainReassignment.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f3cefdd3505ebba0bd2c1625228033f2d3745564/llvm%2Flib%2FTarget%2FX86%2FX86DomainReassignment.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86DomainReassignment.cpp?ref=f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"patch\": \"@@ -70,13 +70,13 @@ static RegDomain getDomain(const TargetRegisterClass *RC,\\n static const TargetRegisterClass *getDstRC(const TargetRegisterClass *SrcRC,\\n                                            RegDomain Domain) {\\n   assert(Domain == MaskDomain && \\\"add domain\\\");\\n-  if (SrcRC == &X86::GR8RegClass)\\n+  if (X86::GR8RegClass.hasSubClassEq(SrcRC))\\n     return &X86::VK8RegClass;\\n-  if (SrcRC == &X86::GR16RegClass)\\n+  if (X86::GR16RegClass.hasSubClassEq(SrcRC))\\n     return &X86::VK16RegClass;\\n-  if (SrcRC == &X86::GR32RegClass)\\n+  if (X86::GR32RegClass.hasSubClassEq(SrcRC))\\n     return &X86::VK32RegClass;\\n-  if (SrcRC == &X86::GR64RegClass)\\n+  if (X86::GR64RegClass.hasSubClassEq(SrcRC))\\n     return &X86::VK64RegClass;\\n   llvm_unreachable(\\\"add register class\\\");\\n   return nullptr;\"}, {\"sha\": \"f558541416a0ade87833ec9150d7955704f0fdb7\", \"filename\": \"llvm/test/CodeGen/X86/gpr-to-mask.ll\", \"status\": \"modified\", \"additions\": 356, \"deletions\": 156, \"changes\": 512, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f3cefdd3505ebba0bd2c1625228033f2d3745564/llvm%2Ftest%2FCodeGen%2FX86%2Fgpr-to-mask.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f3cefdd3505ebba0bd2c1625228033f2d3745564/llvm%2Ftest%2FCodeGen%2FX86%2Fgpr-to-mask.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fgpr-to-mask.ll?ref=f3cefdd3505ebba0bd2c1625228033f2d3745564\", \"patch\": \"@@ -1,20 +1,40 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n-; RUN: llc -mtriple=x86_64-unknown-unknown -mattr=+avx512f,+avx512bw,+avx512dq < %s | FileCheck %s\\n+; RUN: llc -mtriple=x86_64-unknown-unknown -mattr=+avx512f,+avx512bw,+avx512dq < %s | FileCheck %s --check-prefix=X86-64\\n+; RUN: llc -mtriple=i386-unknown-unknown -mattr=+avx512f,+avx512bw,+avx512dq < %s | FileCheck %s --check-prefix=X86-32\\n \\n define void @test_fcmp_storefloat(i1 %cond, float* %fptr, float %f1, float %f2, float %f3, float %f4, float %f5, float %f6) {\\n-; CHECK-LABEL: test_fcmp_storefloat:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB0_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    vcmpeqss %xmm3, %xmm2, %k1\\n-; CHECK-NEXT:    jmp .LBB0_3\\n-; CHECK-NEXT:  .LBB0_2: # %else\\n-; CHECK-NEXT:    vcmpeqss %xmm5, %xmm4, %k1\\n-; CHECK-NEXT:  .LBB0_3: # %exit\\n-; CHECK-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n-; CHECK-NEXT:    vmovss %xmm1, (%rsi)\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_fcmp_storefloat:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB0_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    vcmpeqss %xmm3, %xmm2, %k1\\n+; X86-64-NEXT:    jmp .LBB0_3\\n+; X86-64-NEXT:  .LBB0_2: # %else\\n+; X86-64-NEXT:    vcmpeqss %xmm5, %xmm4, %k1\\n+; X86-64-NEXT:  .LBB0_3: # %exit\\n+; X86-64-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n+; X86-64-NEXT:    vmovss %xmm1, (%rsi)\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_fcmp_storefloat:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB0_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vcmpeqss {{[0-9]+}}(%esp), %xmm2, %k1\\n+; X86-32-NEXT:    jmp .LBB0_3\\n+; X86-32-NEXT:  .LBB0_2: # %else\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vcmpeqss {{[0-9]+}}(%esp), %xmm2, %k1\\n+; X86-32-NEXT:  .LBB0_3: # %exit\\n+; X86-32-NEXT:    vmovss %xmm1, %xmm0, %xmm0 {%k1}\\n+; X86-32-NEXT:    vmovss %xmm0, (%eax)\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -34,20 +54,38 @@ exit:\\n }\\n \\n define void @test_fcmp_storei1(i1 %cond, float* %fptr, i1* %iptr, float %f1, float %f2, float %f3, float %f4) {\\n-; CHECK-LABEL: test_fcmp_storei1:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB1_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0\\n-; CHECK-NEXT:    jmp .LBB1_3\\n-; CHECK-NEXT:  .LBB1_2: # %else\\n-; CHECK-NEXT:    vcmpeqss %xmm3, %xmm2, %k0\\n-; CHECK-NEXT:  .LBB1_3: # %exit\\n-; CHECK-NEXT:    kmovd %k0, %eax\\n-; CHECK-NEXT:    andb $1, %al\\n-; CHECK-NEXT:    movb %al, (%rdx)\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_fcmp_storei1:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB1_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    vcmpeqss %xmm1, %xmm0, %k0\\n+; X86-64-NEXT:    jmp .LBB1_3\\n+; X86-64-NEXT:  .LBB1_2: # %else\\n+; X86-64-NEXT:    vcmpeqss %xmm3, %xmm2, %k0\\n+; X86-64-NEXT:  .LBB1_3: # %exit\\n+; X86-64-NEXT:    kmovd %k0, %eax\\n+; X86-64-NEXT:    andb $1, %al\\n+; X86-64-NEXT:    movb %al, (%rdx)\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_fcmp_storei1:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB1_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vcmpeqss {{[0-9]+}}(%esp), %xmm0, %k0\\n+; X86-32-NEXT:    jmp .LBB1_3\\n+; X86-32-NEXT:  .LBB1_2: # %else\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vcmpeqss {{[0-9]+}}(%esp), %xmm0, %k0\\n+; X86-32-NEXT:  .LBB1_3: # %exit\\n+; X86-32-NEXT:    kmovd %k0, %ecx\\n+; X86-32-NEXT:    andb $1, %cl\\n+; X86-32-NEXT:    movb %cl, (%eax)\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -66,21 +104,42 @@ exit:\\n }\\n \\n define void @test_load_add(i1 %cond, float* %fptr, i1* %iptr1, i1* %iptr2, float %f1, float %f2)  {\\n-; CHECK-LABEL: test_load_add:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB2_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kmovb (%rdx), %k0\\n-; CHECK-NEXT:    kmovb (%rcx), %k1\\n-; CHECK-NEXT:    kaddb %k1, %k0, %k1\\n-; CHECK-NEXT:    jmp .LBB2_3\\n-; CHECK-NEXT:  .LBB2_2: # %else\\n-; CHECK-NEXT:    kmovb (%rcx), %k1\\n-; CHECK-NEXT:  .LBB2_3: # %exit\\n-; CHECK-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n-; CHECK-NEXT:    vmovss %xmm1, (%rsi)\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_load_add:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB2_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kmovb (%rdx), %k0\\n+; X86-64-NEXT:    kmovb (%rcx), %k1\\n+; X86-64-NEXT:    kaddb %k1, %k0, %k1\\n+; X86-64-NEXT:    jmp .LBB2_3\\n+; X86-64-NEXT:  .LBB2_2: # %else\\n+; X86-64-NEXT:    kmovb (%rcx), %k1\\n+; X86-64-NEXT:  .LBB2_3: # %exit\\n+; X86-64-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n+; X86-64-NEXT:    vmovss %xmm1, (%rsi)\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_load_add:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB2_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n+; X86-32-NEXT:    kmovb (%edx), %k0\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:    kaddb %k1, %k0, %k1\\n+; X86-32-NEXT:    jmp .LBB2_3\\n+; X86-32-NEXT:  .LBB2_2: # %else\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:  .LBB2_3: # %exit\\n+; X86-32-NEXT:    vmovss %xmm1, %xmm0, %xmm0 {%k1}\\n+; X86-32-NEXT:    vmovss %xmm0, (%eax)\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -102,19 +161,37 @@ exit:\\n }\\n \\n define void @test_load_i1(i1 %cond, float* %fptr, i1* %iptr1, i1* %iptr2, float %f1, float %f2)  {\\n-; CHECK-LABEL: test_load_i1:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB3_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kmovb (%rdx), %k1\\n-; CHECK-NEXT:    jmp .LBB3_3\\n-; CHECK-NEXT:  .LBB3_2: # %else\\n-; CHECK-NEXT:    kmovb (%rcx), %k1\\n-; CHECK-NEXT:  .LBB3_3: # %exit\\n-; CHECK-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n-; CHECK-NEXT:    vmovss %xmm1, (%rsi)\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_load_i1:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB3_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kmovb (%rdx), %k1\\n+; X86-64-NEXT:    jmp .LBB3_3\\n+; X86-64-NEXT:  .LBB3_2: # %else\\n+; X86-64-NEXT:    kmovb (%rcx), %k1\\n+; X86-64-NEXT:  .LBB3_3: # %exit\\n+; X86-64-NEXT:    vmovss %xmm0, %xmm0, %xmm1 {%k1}\\n+; X86-64-NEXT:    vmovss %xmm1, (%rsi)\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_load_i1:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB3_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    jmp .LBB3_3\\n+; X86-32-NEXT:  .LBB3_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:  .LBB3_3: # %exit\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:    vmovss %xmm1, %xmm0, %xmm0 {%k1}\\n+; X86-32-NEXT:    vmovss %xmm0, (%eax)\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -134,19 +211,35 @@ exit:\\n }\\n \\n define void @test_loadi1_storei1(i1 %cond, i1* %iptr1, i1* %iptr2, i1* %iptr3)  {\\n-; CHECK-LABEL: test_loadi1_storei1:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB4_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    movb (%rsi), %al\\n-; CHECK-NEXT:    jmp .LBB4_3\\n-; CHECK-NEXT:  .LBB4_2: # %else\\n-; CHECK-NEXT:    movb (%rdx), %al\\n-; CHECK-NEXT:  .LBB4_3: # %exit\\n-; CHECK-NEXT:    andb $1, %al\\n-; CHECK-NEXT:    movb %al, (%rcx)\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_loadi1_storei1:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB4_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    movb (%rsi), %al\\n+; X86-64-NEXT:    jmp .LBB4_3\\n+; X86-64-NEXT:  .LBB4_2: # %else\\n+; X86-64-NEXT:    movb (%rdx), %al\\n+; X86-64-NEXT:  .LBB4_3: # %exit\\n+; X86-64-NEXT:    andb $1, %al\\n+; X86-64-NEXT:    movb %al, (%rcx)\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_loadi1_storei1:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB4_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    jmp .LBB4_3\\n+; X86-32-NEXT:  .LBB4_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:  .LBB4_3: # %exit\\n+; X86-32-NEXT:    movb (%ecx), %cl\\n+; X86-32-NEXT:    andb $1, %cl\\n+; X86-32-NEXT:    movb %cl, (%eax)\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -165,23 +258,44 @@ exit:\\n }\\n \\n define void @test_shl1(i1 %cond, i8* %ptr1, i8* %ptr2, <8 x float> %fvec1, <8 x float> %fvec2, <8 x float>* %fptrvec) {\\n-; CHECK-LABEL: test_shl1:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n-; CHECK-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB5_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kmovb (%rsi), %k0\\n-; CHECK-NEXT:    kaddb %k0, %k0, %k1\\n-; CHECK-NEXT:    jmp .LBB5_3\\n-; CHECK-NEXT:  .LBB5_2: # %else\\n-; CHECK-NEXT:    kmovb (%rdx), %k1\\n-; CHECK-NEXT:  .LBB5_3: # %exit\\n-; CHECK-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n-; CHECK-NEXT:    vmovaps %ymm1, (%rcx)\\n-; CHECK-NEXT:    vzeroupper\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_shl1:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-64-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB5_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kmovb (%rsi), %k0\\n+; X86-64-NEXT:    kaddb %k0, %k0, %k1\\n+; X86-64-NEXT:    jmp .LBB5_3\\n+; X86-64-NEXT:  .LBB5_2: # %else\\n+; X86-64-NEXT:    kmovb (%rdx), %k1\\n+; X86-64-NEXT:  .LBB5_3: # %exit\\n+; X86-64-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-64-NEXT:    vmovaps %ymm1, (%rcx)\\n+; X86-64-NEXT:    vzeroupper\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_shl1:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-32-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB5_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k0\\n+; X86-32-NEXT:    kaddb %k0, %k0, %k1\\n+; X86-32-NEXT:    jmp .LBB5_3\\n+; X86-32-NEXT:  .LBB5_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:  .LBB5_3: # %exit\\n+; X86-32-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-32-NEXT:    vmovaps %ymm1, (%eax)\\n+; X86-32-NEXT:    vzeroupper\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -203,24 +317,46 @@ exit:\\n }\\n \\n define void @test_shr1(i1 %cond, i8* %ptr1, i8* %ptr2, <8 x float> %fvec1, <8 x float> %fvec2, <8 x float>* %fptrvec) {\\n-; CHECK-LABEL: test_shr1:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n-; CHECK-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB6_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    movb (%rsi), %al\\n-; CHECK-NEXT:    shrb %al\\n-; CHECK-NEXT:    jmp .LBB6_3\\n-; CHECK-NEXT:  .LBB6_2: # %else\\n-; CHECK-NEXT:    movb (%rdx), %al\\n-; CHECK-NEXT:  .LBB6_3: # %exit\\n-; CHECK-NEXT:    kmovd %eax, %k1\\n-; CHECK-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n-; CHECK-NEXT:    vmovaps %ymm1, (%rcx)\\n-; CHECK-NEXT:    vzeroupper\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_shr1:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-64-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB6_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    movb (%rsi), %al\\n+; X86-64-NEXT:    shrb %al\\n+; X86-64-NEXT:    jmp .LBB6_3\\n+; X86-64-NEXT:  .LBB6_2: # %else\\n+; X86-64-NEXT:    movb (%rdx), %al\\n+; X86-64-NEXT:  .LBB6_3: # %exit\\n+; X86-64-NEXT:    kmovd %eax, %k1\\n+; X86-64-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-64-NEXT:    vmovaps %ymm1, (%rcx)\\n+; X86-64-NEXT:    vzeroupper\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_shr1:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-32-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB6_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    movb (%ecx), %cl\\n+; X86-32-NEXT:    shrb %cl\\n+; X86-32-NEXT:    jmp .LBB6_3\\n+; X86-32-NEXT:  .LBB6_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    movb (%ecx), %cl\\n+; X86-32-NEXT:  .LBB6_3: # %exit\\n+; X86-32-NEXT:    kmovd %ecx, %k1\\n+; X86-32-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-32-NEXT:    vmovaps %ymm1, (%eax)\\n+; X86-32-NEXT:    vzeroupper\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -242,23 +378,44 @@ exit:\\n }\\n \\n define void @test_shr2(i1 %cond, i8* %ptr1, i8* %ptr2, <8 x float> %fvec1, <8 x float> %fvec2, <8 x float>* %fptrvec) {\\n-; CHECK-LABEL: test_shr2:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n-; CHECK-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB7_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kmovb (%rsi), %k0\\n-; CHECK-NEXT:    kshiftrb $2, %k0, %k1\\n-; CHECK-NEXT:    jmp .LBB7_3\\n-; CHECK-NEXT:  .LBB7_2: # %else\\n-; CHECK-NEXT:    kmovb (%rdx), %k1\\n-; CHECK-NEXT:  .LBB7_3: # %exit\\n-; CHECK-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n-; CHECK-NEXT:    vmovaps %ymm1, (%rcx)\\n-; CHECK-NEXT:    vzeroupper\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_shr2:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-64-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB7_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kmovb (%rsi), %k0\\n+; X86-64-NEXT:    kshiftrb $2, %k0, %k1\\n+; X86-64-NEXT:    jmp .LBB7_3\\n+; X86-64-NEXT:  .LBB7_2: # %else\\n+; X86-64-NEXT:    kmovb (%rdx), %k1\\n+; X86-64-NEXT:  .LBB7_3: # %exit\\n+; X86-64-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-64-NEXT:    vmovaps %ymm1, (%rcx)\\n+; X86-64-NEXT:    vzeroupper\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_shr2:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-32-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB7_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k0\\n+; X86-32-NEXT:    kshiftrb $2, %k0, %k1\\n+; X86-32-NEXT:    jmp .LBB7_3\\n+; X86-32-NEXT:  .LBB7_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:  .LBB7_3: # %exit\\n+; X86-32-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-32-NEXT:    vmovaps %ymm1, (%eax)\\n+; X86-32-NEXT:    vzeroupper\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -280,23 +437,44 @@ exit:\\n }\\n \\n define void @test_shl(i1 %cond, i8* %ptr1, i8* %ptr2, <8 x float> %fvec1, <8 x float> %fvec2, <8 x float>* %fptrvec) {\\n-; CHECK-LABEL: test_shl:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n-; CHECK-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB8_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kmovb (%rsi), %k0\\n-; CHECK-NEXT:    kshiftlb $6, %k0, %k1\\n-; CHECK-NEXT:    jmp .LBB8_3\\n-; CHECK-NEXT:  .LBB8_2: # %else\\n-; CHECK-NEXT:    kmovb (%rdx), %k1\\n-; CHECK-NEXT:  .LBB8_3: # %exit\\n-; CHECK-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n-; CHECK-NEXT:    vmovaps %ymm1, (%rcx)\\n-; CHECK-NEXT:    vzeroupper\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_shl:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-64-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB8_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kmovb (%rsi), %k0\\n+; X86-64-NEXT:    kshiftlb $6, %k0, %k1\\n+; X86-64-NEXT:    jmp .LBB8_3\\n+; X86-64-NEXT:  .LBB8_2: # %else\\n+; X86-64-NEXT:    kmovb (%rdx), %k1\\n+; X86-64-NEXT:  .LBB8_3: # %exit\\n+; X86-64-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-64-NEXT:    vmovaps %ymm1, (%rcx)\\n+; X86-64-NEXT:    vzeroupper\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_shl:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-32-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB8_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k0\\n+; X86-32-NEXT:    kshiftlb $6, %k0, %k1\\n+; X86-32-NEXT:    jmp .LBB8_3\\n+; X86-32-NEXT:  .LBB8_2: # %else\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:  .LBB8_3: # %exit\\n+; X86-32-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-32-NEXT:    vmovaps %ymm1, (%eax)\\n+; X86-32-NEXT:    vzeroupper\\n+; X86-32-NEXT:    retl\\n entry:\\n   br i1 %cond, label %if, label %else\\n \\n@@ -318,24 +496,46 @@ exit:\\n }\\n \\n define void @test_add(i1 %cond, i8* %ptr1, i8* %ptr2, <8 x float> %fvec1, <8 x float> %fvec2, <8 x float>* %fptrvec) {\\n-; CHECK-LABEL: test_add:\\n-; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n-; CHECK-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n-; CHECK-NEXT:    kmovb (%rsi), %k0\\n-; CHECK-NEXT:    kmovb (%rdx), %k1\\n-; CHECK-NEXT:    testb $1, %dil\\n-; CHECK-NEXT:    je .LBB9_2\\n-; CHECK-NEXT:  # %bb.1: # %if\\n-; CHECK-NEXT:    kandb %k1, %k0, %k1\\n-; CHECK-NEXT:    jmp .LBB9_3\\n-; CHECK-NEXT:  .LBB9_2: # %else\\n-; CHECK-NEXT:    kaddb %k1, %k0, %k1\\n-; CHECK-NEXT:  .LBB9_3: # %exit\\n-; CHECK-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n-; CHECK-NEXT:    vmovaps %ymm1, (%rcx)\\n-; CHECK-NEXT:    vzeroupper\\n-; CHECK-NEXT:    retq\\n+; X86-64-LABEL: test_add:\\n+; X86-64:       # %bb.0: # %entry\\n+; X86-64-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-64-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-64-NEXT:    kmovb (%rsi), %k0\\n+; X86-64-NEXT:    kmovb (%rdx), %k1\\n+; X86-64-NEXT:    testb $1, %dil\\n+; X86-64-NEXT:    je .LBB9_2\\n+; X86-64-NEXT:  # %bb.1: # %if\\n+; X86-64-NEXT:    kandb %k1, %k0, %k1\\n+; X86-64-NEXT:    jmp .LBB9_3\\n+; X86-64-NEXT:  .LBB9_2: # %else\\n+; X86-64-NEXT:    kaddb %k1, %k0, %k1\\n+; X86-64-NEXT:  .LBB9_3: # %exit\\n+; X86-64-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-64-NEXT:    vmovaps %ymm1, (%rcx)\\n+; X86-64-NEXT:    vzeroupper\\n+; X86-64-NEXT:    retq\\n+;\\n+; X86-32-LABEL: test_add:\\n+; X86-32:       # %bb.0: # %entry\\n+; X86-32-NEXT:    # kill: %ymm1<def> %ymm1<kill> %zmm1<def>\\n+; X86-32-NEXT:    # kill: %ymm0<def> %ymm0<kill> %zmm0<def>\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n+; X86-32-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n+; X86-32-NEXT:    kmovb (%edx), %k0\\n+; X86-32-NEXT:    kmovb (%ecx), %k1\\n+; X86-32-NEXT:    testb $1, {{[0-9]+}}(%esp)\\n+; X86-32-NEXT:    je .LBB9_2\\n+; X86-32-NEXT:  # %bb.1: # %if\\n+; X86-32-NEXT:    kandb %k1, %k0, %k1\\n+; X86-32-NEXT:    jmp .LBB9_3\\n+; X86-32-NEXT:  .LBB9_2: # %else\\n+; X86-32-NEXT:    kaddb %k1, %k0, %k1\\n+; X86-32-NEXT:  .LBB9_3: # %exit\\n+; X86-32-NEXT:    vmovaps %zmm0, %zmm1 {%k1}\\n+; X86-32-NEXT:    vmovaps %ymm1, (%eax)\\n+; X86-32-NEXT:    vzeroupper\\n+; X86-32-NEXT:    retl\\n entry:\\n   %loaded1 = load i8, i8* %ptr1\\n   %loaded2 = load i8, i8* %ptr2\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iNjllNWI3MzkzNTJkNzVmOGFkY2UyM2MzMjMwZTNiZTMwNGFkODlhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/b69e5b739352d75f8adce23c3230e3be304ad89a", "content": "{\"sha\": \"b69e5b739352d75f8adce23c3230e3be304ad89a\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YjY5ZTViNzM5MzUyZDc1ZjhhZGNlMjNjMzIzMGUzYmUzMDRhZDg5YQ==\", \"commit\": {\"author\": {\"name\": \"Mikael Holmen\", \"email\": \"mikael.holmen@ericsson.com\", \"date\": \"2018-02-02T10:34:13Z\"}, \"committer\": {\"name\": \"Mikael Holmen\", \"email\": \"mikael.holmen@ericsson.com\", \"date\": \"2018-02-02T10:34:13Z\"}, \"message\": \"[GlobalOpt] Include padding in debug fragments\\n\\nSummary:\\nWhen creating the debug fragments for a SRA'd variable, use the types'\\nallocation sizes. This fixes issues where the pass would emit too small\\nfragments, placed at the wrong offset, for padded types.\\n\\nAn example of this is long double on x86. The type is represented using\\nx86_fp80, which is 10 bytes, but the value is aligned to 12/16 bytes.\\nThe padding is included in the type's DW_AT_byte_size attribute;\\ntherefore, the fragments should also include that. Newer GCC releases\\n(I tested 7.2.0) emit 12/16-byte pieces for long double. Earlier\\nreleases, e.g. GCC 5.5.0, behaved as LLVM did, i.e. by emitting a\\n10-byte piece, followed by an empty 2/6-byte piece for the padding.\\n\\nFailing to cover all `DW_AT_byte_size' bytes of a value with non-empty\\npieces results in the value being printed as <optimized out> by GDB.\\n\\nPatch by: David Stenberg\\n\\nReviewers: aprantl, JDevlieghere\\n\\nReviewed By: aprantl, JDevlieghere\\n\\nSubscribers: llvm-commits\\n\\nTags: #debug-info\\n\\nDifferential Revision: https://reviews.llvm.org/D42807\\n\\nllvm-svn: 324066\", \"tree\": {\"sha\": \"9722cfedadd1c1a9f7af33e866d43b5b7232efdb\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9722cfedadd1c1a9f7af33e866d43b5b7232efdb\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/b69e5b739352d75f8adce23c3230e3be304ad89a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b69e5b739352d75f8adce23c3230e3be304ad89a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b69e5b739352d75f8adce23c3230e3be304ad89a\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b69e5b739352d75f8adce23c3230e3be304ad89a/comments\", \"author\": {\"login\": \"mikaelholmen\", \"id\": 55733087, \"node_id\": \"MDQ6VXNlcjU1NzMzMDg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/55733087?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mikaelholmen\", \"html_url\": \"https://github.com/mikaelholmen\", \"followers_url\": \"https://api.github.com/users/mikaelholmen/followers\", \"following_url\": \"https://api.github.com/users/mikaelholmen/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mikaelholmen/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mikaelholmen/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mikaelholmen/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mikaelholmen/orgs\", \"repos_url\": \"https://api.github.com/users/mikaelholmen/repos\", \"events_url\": \"https://api.github.com/users/mikaelholmen/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mikaelholmen/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"mikaelholmen\", \"id\": 55733087, \"node_id\": \"MDQ6VXNlcjU1NzMzMDg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/55733087?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mikaelholmen\", \"html_url\": \"https://github.com/mikaelholmen\", \"followers_url\": \"https://api.github.com/users/mikaelholmen/followers\", \"following_url\": \"https://api.github.com/users/mikaelholmen/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mikaelholmen/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mikaelholmen/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mikaelholmen/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mikaelholmen/orgs\", \"repos_url\": \"https://api.github.com/users/mikaelholmen/repos\", \"events_url\": \"https://api.github.com/users/mikaelholmen/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mikaelholmen/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cf1773826fd815bf1c8ddc964f4c9f1b5b47b978\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cf1773826fd815bf1c8ddc964f4c9f1b5b47b978\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cf1773826fd815bf1c8ddc964f4c9f1b5b47b978\"}], \"stats\": {\"total\": 267, \"additions\": 265, \"deletions\": 2}, \"files\": [{\"sha\": \"9dfb61d3d739d6c0346616e8e375ff7138c2bc45\", \"filename\": \"llvm/lib/Transforms/IPO/GlobalOpt.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp?ref=b69e5b739352d75f8adce23c3230e3be304ad89a\", \"patch\": \"@@ -526,7 +526,7 @@ static GlobalVariable *SRAGlobal(GlobalVariable *GV, const DataLayout &DL) {\\n         NGV->setAlignment(NewAlign);\\n \\n       // Copy over the debug info for the variable.\\n-      uint64_t Size = DL.getTypeSizeInBits(NGV->getValueType());\\n+      uint64_t Size = DL.getTypeAllocSizeInBits(NGV->getValueType());\\n       uint64_t FragmentOffsetInBits = Layout.getElementOffsetInBits(i);\\n       transferSRADebugInfo(GV, NGV, FragmentOffsetInBits, Size, NumElements);\\n     }\\n@@ -538,7 +538,7 @@ static GlobalVariable *SRAGlobal(GlobalVariable *GV, const DataLayout &DL) {\\n     auto ElTy = STy->getElementType();\\n     uint64_t EltSize = DL.getTypeAllocSize(ElTy);\\n     unsigned EltAlign = DL.getABITypeAlignment(ElTy);\\n-    uint64_t FragmentSizeInBits = DL.getTypeSizeInBits(ElTy);\\n+    uint64_t FragmentSizeInBits = DL.getTypeAllocSizeInBits(ElTy);\\n     for (unsigned i = 0, e = NumElements; i != e; ++i) {\\n       Constant *In = Init->getAggregateElement(i);\\n       assert(In && \\\"Couldn't get element of initializer?\\\");\"}, {\"sha\": \"a643127da5dcdec499349765604d48775a3c6b26\", \"filename\": \"llvm/test/DebugInfo/X86/global-sra-fp80-array.ll\", \"status\": \"added\", \"additions\": 129, \"deletions\": 0, \"changes\": 129, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-array.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-array.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-array.ll?ref=b69e5b739352d75f8adce23c3230e3be304ad89a\", \"patch\": \"@@ -0,0 +1,129 @@\\n+; RUN: opt -S -globalopt < %s | FileCheck %s\\n+source_filename = \\\"array.c\\\"\\n+target datalayout = \\\"e-m:e-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+%struct.mystruct = type { i32, i64 }\\n+\\n+; Generated from:\\n+;\\n+; static long double array[2];\\n+; void __attribute__((nodebug)) foo(int in) { array[0] = in; }\\n+; void __attribute__((nodebug)) bar(int in) { array[1] = in; }\\n+; int main(int argc, char **argv)\\n+; {\\n+;   foo(argv[0][1]);\\n+;   bar(argv[0][1]);\\n+;   return (array[0] + array[1]) > 0;\\n+; }\\n+;\\n+; using clang -O0 -g2 -S -emit-llvm\\n+\\n+@array = internal global [2 x x86_fp80] zeroinitializer, align 16, !dbg !0\\n+\\n+; CHECK: @array.0 = internal unnamed_addr global x86_fp80 0xK00000000000000000000, align 16, !dbg ![[EL0:.*]]\\n+; CHECK: @array.1 = internal unnamed_addr global x86_fp80 0xK00000000000000000000, align 16, !dbg ![[EL1:.*]]\\n+;\\n+; CHECK: ![[EL0]] = !DIGlobalVariableExpression(var: ![[VAR:.*]], expr: !DIExpression(DW_OP_LLVM_fragment, 0, 128))\\n+; CHECK: ![[VAR]] = distinct !DIGlobalVariable(name: \\\"array\\\"\\n+; CHECK: ![[EL1]] = !DIGlobalVariableExpression(var: ![[VAR]], expr: !DIExpression(DW_OP_LLVM_fragment, 128, 128))\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define void @foo(i32 %in) #0 {\\n+entry:\\n+  %in.addr = alloca i32, align 4\\n+  store i32 %in, i32* %in.addr, align 4\\n+  %0 = load i32, i32* %in.addr, align 4\\n+  %conv = sitofp i32 %0 to x86_fp80\\n+  store x86_fp80 %conv, x86_fp80* getelementptr inbounds ([2 x x86_fp80], [2 x x86_fp80]* @array, i64 0, i64 0), align 16\\n+  ret void\\n+}\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define void @bar(i32 %in) #0 {\\n+entry:\\n+  %in.addr = alloca i32, align 4\\n+  store i32 %in, i32* %in.addr, align 4\\n+  %0 = load i32, i32* %in.addr, align 4\\n+  %conv = sitofp i32 %0 to x86_fp80\\n+  store x86_fp80 %conv, x86_fp80* getelementptr inbounds ([2 x x86_fp80], [2 x x86_fp80]* @array, i64 0, i64 1), align 16\\n+  ret void\\n+}\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define i32 @main(i32 %argc, i8** %argv) #0 !dbg !14 {\\n+entry:\\n+  %retval = alloca i32, align 4\\n+  %argc.addr = alloca i32, align 4\\n+  %argv.addr = alloca i8**, align 8\\n+  store i32 0, i32* %retval, align 4\\n+  store i32 %argc, i32* %argc.addr, align 4\\n+  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !21, metadata !DIExpression()), !dbg !22\\n+  store i8** %argv, i8*** %argv.addr, align 8\\n+  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !23, metadata !DIExpression()), !dbg !24\\n+  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !25\\n+  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0, !dbg !25\\n+  %1 = load i8*, i8** %arrayidx, align 8, !dbg !25\\n+  %arrayidx1 = getelementptr inbounds i8, i8* %1, i64 1, !dbg !25\\n+  %2 = load i8, i8* %arrayidx1, align 1, !dbg !25\\n+  %conv = sext i8 %2 to i32, !dbg !25\\n+  call void @foo(i32 %conv), !dbg !26\\n+  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !27\\n+  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i64 0, !dbg !27\\n+  %4 = load i8*, i8** %arrayidx2, align 8, !dbg !27\\n+  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !27\\n+  %5 = load i8, i8* %arrayidx3, align 1, !dbg !27\\n+  %conv4 = sext i8 %5 to i32, !dbg !27\\n+  call void @bar(i32 %conv4), !dbg !28\\n+  %6 = load x86_fp80, x86_fp80* getelementptr inbounds ([2 x x86_fp80], [2 x x86_fp80]* @array, i64 0, i64 0), align 16, !dbg !29\\n+  %7 = load x86_fp80, x86_fp80* getelementptr inbounds ([2 x x86_fp80], [2 x x86_fp80]* @array, i64 0, i64 1), align 16, !dbg !30\\n+  %add = fadd x86_fp80 %6, %7, !dbg !31\\n+  %cmp = fcmp ogt x86_fp80 %add, 0xK00000000000000000000, !dbg !32\\n+  %conv5 = zext i1 %cmp to i32, !dbg !32\\n+  ret i32 %conv5, !dbg !33\\n+}\\n+\\n+; Function Attrs: nounwind readnone speculatable\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata) #1\\n+\\n+attributes #0 = { noinline nounwind optnone uwtable }\\n+attributes #1 = { nounwind readnone speculatable }\\n+\\n+!llvm.dbg.cu = !{!2}\\n+!llvm.module.flags = !{!10, !11, !12}\\n+!llvm.ident = !{!13}\\n+\\n+!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())\\n+!1 = distinct !DIGlobalVariable(name: \\\"array\\\", scope: !2, file: !3, line: 1, type: !6, isLocal: true, isDefinition: true)\\n+!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: \\\"clang version 7.0.0\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5)\\n+!3 = !DIFile(filename: \\\"array.c\\\", directory: \\\"/\\\")\\n+!4 = !{}\\n+!5 = !{!0}\\n+!6 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 256, elements: !8)\\n+!7 = !DIBasicType(name: \\\"long double\\\", size: 128, encoding: DW_ATE_float)\\n+!8 = !{!9}\\n+!9 = !DISubrange(count: 2)\\n+!10 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!11 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!12 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!13 = !{!\\\"clang version 7.0.0\\\"}\\n+!14 = distinct !DISubprogram(name: \\\"main\\\", scope: !3, file: !3, line: 4, type: !15, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)\\n+!15 = !DISubroutineType(types: !16)\\n+!16 = !{!17, !17, !18}\\n+!17 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)\\n+!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)\\n+!20 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n+!21 = !DILocalVariable(name: \\\"argc\\\", arg: 1, scope: !14, file: !3, line: 4, type: !17)\\n+!22 = !DILocation(line: 4, column: 14, scope: !14)\\n+!23 = !DILocalVariable(name: \\\"argv\\\", arg: 2, scope: !14, file: !3, line: 4, type: !18)\\n+!24 = !DILocation(line: 4, column: 27, scope: !14)\\n+!25 = !DILocation(line: 6, column: 7, scope: !14)\\n+!26 = !DILocation(line: 6, column: 3, scope: !14)\\n+!27 = !DILocation(line: 7, column: 7, scope: !14)\\n+!28 = !DILocation(line: 7, column: 3, scope: !14)\\n+!29 = !DILocation(line: 8, column: 11, scope: !14)\\n+!30 = !DILocation(line: 8, column: 22, scope: !14)\\n+!31 = !DILocation(line: 8, column: 20, scope: !14)\\n+!32 = !DILocation(line: 8, column: 32, scope: !14)\\n+!33 = !DILocation(line: 8, column: 3, scope: !14)\"}, {\"sha\": \"22543969bcad6ac244d49b4e6dd41b28e0ef44b8\", \"filename\": \"llvm/test/DebugInfo/X86/global-sra-fp80-struct.ll\", \"status\": \"added\", \"additions\": 134, \"deletions\": 0, \"changes\": 134, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-struct.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b69e5b739352d75f8adce23c3230e3be304ad89a/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-struct.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fglobal-sra-fp80-struct.ll?ref=b69e5b739352d75f8adce23c3230e3be304ad89a\", \"patch\": \"@@ -0,0 +1,134 @@\\n+; RUN: opt -S -globalopt < %s | FileCheck %s\\n+source_filename = \\\"struct.c\\\"\\n+target datalayout = \\\"e-m:e-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+%struct.mystruct = type { x86_fp80, i32, [12 x i8] }\\n+\\n+; Generated from:\\n+;\\n+; static struct mystruct {\\n+;     long double a;\\n+;     int b;\\n+; } static_struct;\\n+; void __attribute__((nodebug)) foo(int in) { static_struct.a = in; }\\n+; void __attribute__((nodebug)) bar(int in) { static_struct.b = in; }\\n+; int main(int argc, char **argv)\\n+; {\\n+;     foo(argv[0][1]);\\n+;     bar(argv[0][1]);\\n+;     return (static_struct.a + static_struct.b) > 0;\\n+; }\\n+;\\n+; using clang -O0 -g2 -S -emit-llvm\\n+\\n+@static_struct = internal global %struct.mystruct zeroinitializer, align 16, !dbg !0\\n+\\n+; CHECK: @static_struct.0 = internal unnamed_addr global x86_fp80 0xK00000000000000000000, align 16, !dbg ![[EL0:.*]]\\n+; CHECK: @static_struct.1 = internal unnamed_addr global i32 0, align 16, !dbg ![[EL1:.*]]\\n+\\n+; CHECK: ![[EL0]] = !DIGlobalVariableExpression(var: ![[VAR:.*]], expr: !DIExpression(DW_OP_LLVM_fragment, 0, 128))\\n+; CHECK: ![[VAR]] = distinct !DIGlobalVariable(name: \\\"static_struct\\\"\\n+; CHECK: ![[EL1]] = !DIGlobalVariableExpression(var: ![[VAR]], expr: !DIExpression(DW_OP_LLVM_fragment, 128, 32))\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define void @foo(i32 %in) #0 {\\n+entry:\\n+  %in.addr = alloca i32, align 4\\n+  store i32 %in, i32* %in.addr, align 4\\n+  %0 = load i32, i32* %in.addr, align 4\\n+  %conv = sitofp i32 %0 to x86_fp80\\n+  store x86_fp80 %conv, x86_fp80* getelementptr inbounds (%struct.mystruct, %struct.mystruct* @static_struct, i32 0, i32 0), align 16\\n+  ret void\\n+}\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define void @bar(i32 %in) #0 {\\n+entry:\\n+  %in.addr = alloca i32, align 4\\n+  store i32 %in, i32* %in.addr, align 4\\n+  %0 = load i32, i32* %in.addr, align 4\\n+  store i32 %0, i32* getelementptr inbounds (%struct.mystruct, %struct.mystruct* @static_struct, i32 0, i32 1), align 16\\n+  ret void\\n+}\\n+\\n+; Function Attrs: noinline nounwind optnone uwtable\\n+define i32 @main(i32 %argc, i8** %argv) #0 !dbg !16 {\\n+entry:\\n+  %retval = alloca i32, align 4\\n+  %argc.addr = alloca i32, align 4\\n+  %argv.addr = alloca i8**, align 8\\n+  store i32 0, i32* %retval, align 4\\n+  store i32 %argc, i32* %argc.addr, align 4\\n+  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !22, metadata !DIExpression()), !dbg !23\\n+  store i8** %argv, i8*** %argv.addr, align 8\\n+  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !24, metadata !DIExpression()), !dbg !25\\n+  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !26\\n+  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0, !dbg !26\\n+  %1 = load i8*, i8** %arrayidx, align 8, !dbg !26\\n+  %arrayidx1 = getelementptr inbounds i8, i8* %1, i64 1, !dbg !26\\n+  %2 = load i8, i8* %arrayidx1, align 1, !dbg !26\\n+  %conv = sext i8 %2 to i32, !dbg !26\\n+  call void @foo(i32 %conv), !dbg !27\\n+  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !28\\n+  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i64 0, !dbg !28\\n+  %4 = load i8*, i8** %arrayidx2, align 8, !dbg !28\\n+  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !28\\n+  %5 = load i8, i8* %arrayidx3, align 1, !dbg !28\\n+  %conv4 = sext i8 %5 to i32, !dbg !28\\n+  call void @bar(i32 %conv4), !dbg !29\\n+  %6 = load x86_fp80, x86_fp80* getelementptr inbounds (%struct.mystruct, %struct.mystruct* @static_struct, i32 0, i32 0), align 16, !dbg !30\\n+  %7 = load i32, i32* getelementptr inbounds (%struct.mystruct, %struct.mystruct* @static_struct, i32 0, i32 1), align 16, !dbg !31\\n+  %conv5 = sitofp i32 %7 to x86_fp80, !dbg !32\\n+  %add = fadd x86_fp80 %6, %conv5, !dbg !33\\n+  %cmp = fcmp ogt x86_fp80 %add, 0xK00000000000000000000, !dbg !34\\n+  %conv6 = zext i1 %cmp to i32, !dbg !34\\n+  ret i32 %conv6, !dbg !35\\n+}\\n+\\n+; Function Attrs: nounwind readnone speculatable\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata) #1\\n+\\n+attributes #0 = { noinline nounwind optnone uwtable }\\n+attributes #1 = { nounwind readnone speculatable }\\n+\\n+!llvm.dbg.cu = !{!2}\\n+!llvm.module.flags = !{!12, !13, !14}\\n+!llvm.ident = !{!15}\\n+\\n+!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())\\n+!1 = distinct !DIGlobalVariable(name: \\\"static_struct\\\", scope: !2, file: !3, line: 4, type: !6, isLocal: true, isDefinition: true)\\n+!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: \\\"clang version 7.0.0\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5)\\n+!3 = !DIFile(filename: \\\"struct.c\\\", directory: \\\"/\\\")\\n+!4 = !{}\\n+!5 = !{!0}\\n+!6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"mystruct\\\", file: !3, line: 1, size: 256, elements: !7)\\n+!7 = !{!8, !10}\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 128)\\n+!9 = !DIBasicType(name: \\\"long double\\\", size: 128, encoding: DW_ATE_float)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !11, size: 32, offset: 128)\\n+!11 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!12 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!13 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!14 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!15 = !{!\\\"clang version 7.0.0\\\"}\\n+!16 = distinct !DISubprogram(name: \\\"main\\\", scope: !3, file: !3, line: 7, type: !17, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)\\n+!17 = !DISubroutineType(types: !18)\\n+!18 = !{!11, !11, !19}\\n+!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)\\n+!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)\\n+!21 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n+!22 = !DILocalVariable(name: \\\"argc\\\", arg: 1, scope: !16, file: !3, line: 7, type: !11)\\n+!23 = !DILocation(line: 7, column: 14, scope: !16)\\n+!24 = !DILocalVariable(name: \\\"argv\\\", arg: 2, scope: !16, file: !3, line: 7, type: !19)\\n+!25 = !DILocation(line: 7, column: 27, scope: !16)\\n+!26 = !DILocation(line: 9, column: 9, scope: !16)\\n+!27 = !DILocation(line: 9, column: 5, scope: !16)\\n+!28 = !DILocation(line: 10, column: 9, scope: !16)\\n+!29 = !DILocation(line: 10, column: 5, scope: !16)\\n+!30 = !DILocation(line: 11, column: 27, scope: !16)\\n+!31 = !DILocation(line: 11, column: 45, scope: !16)\\n+!32 = !DILocation(line: 11, column: 31, scope: !16)\\n+!33 = !DILocation(line: 11, column: 29, scope: !16)\\n+!34 = !DILocation(line: 11, column: 48, scope: !16)\\n+!35 = !DILocation(line: 11, column: 5, scope: !16)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jY2ZhNTI1N2E2NTljZjFmNTRkZDNmODUxOGM4YzQyMjE4MzY5YzQxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ccfa5257a659cf1f54dd3f8518c8c42218369c41", "content": "{\"sha\": \"ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6Y2NmYTUyNTdhNjU5Y2YxZjU0ZGQzZjg1MThjOGM0MjIxODM2OWM0MQ==\", \"commit\": {\"author\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2018-03-01T00:08:38Z\"}, \"committer\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2018-03-01T00:08:38Z\"}, \"message\": \"[X86] Make sure we don't combine (fneg (fma X, Y, Z)) to a target specific node when there are no FMA instructions.\\n\\nThis would cause a 'cannot select' error at isel when we should have emitted a lib call and an xor.\\n\\nFixes PR36553.\\n\\nllvm-svn: 326393\", \"tree\": {\"sha\": \"e710a1096658dea1ca7787f8749a0e78ee82ae3e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e710a1096658dea1ca7787f8749a0e78ee82ae3e\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ccfa5257a659cf1f54dd3f8518c8c42218369c41/comments\", \"author\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"75c649c96029a540466010525c36b5f20df25f2f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/75c649c96029a540466010525c36b5f20df25f2f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/75c649c96029a540466010525c36b5f20df25f2f\"}], \"stats\": {\"total\": 22, \"additions\": 21, \"deletions\": 1}, \"files\": [{\"sha\": \"8921bd44b346248d830d57fe0acb63d03adb1a3a\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ccfa5257a659cf1f54dd3f8518c8c42218369c41/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ccfa5257a659cf1f54dd3f8518c8c42218369c41/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"patch\": \"@@ -35737,7 +35737,7 @@ static SDValue combineFneg(SDNode *N, SelectionDAG &DAG,\\n   // If we're negating an FMA node, then we can adjust the\\n   // instruction to include the extra negation.\\n   unsigned NewOpcode = 0;\\n-  if (Arg.hasOneUse()) {\\n+  if (Arg.hasOneUse() && Subtarget.hasAnyFMA()) {\\n     switch (Arg.getOpcode()) {\\n     case ISD::FMA:             NewOpcode = X86ISD::FNMSUB;       break;\\n     case X86ISD::FMSUB:        NewOpcode = X86ISD::FNMADD;       break;\"}, {\"sha\": \"827f80a3e07e10cf5e6684b4e00e05183b1a5ef8\", \"filename\": \"llvm/test/CodeGen/X86/pr36553.ll\", \"status\": \"added\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ccfa5257a659cf1f54dd3f8518c8c42218369c41/llvm%2Ftest%2FCodeGen%2FX86%2Fpr36553.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ccfa5257a659cf1f54dd3f8518c8c42218369c41/llvm%2Ftest%2FCodeGen%2FX86%2Fpr36553.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fpr36553.ll?ref=ccfa5257a659cf1f54dd3f8518c8c42218369c41\", \"patch\": \"@@ -0,0 +1,20 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc < %s -mtriple=x86_64-apple-darwin10 | FileCheck %s\\n+\\n+; Make sure we don't crash because we negated an fma when we didn't have any fma instructions.\\n+\\n+define float @pr36553(float %a, float %b, float %c) nounwind {\\n+; CHECK-LABEL: pr36553:\\n+; CHECK:       ## %bb.0: ## %entry\\n+; CHECK-NEXT:    pushq %rax\\n+; CHECK-NEXT:    callq _fmaf\\n+; CHECK-NEXT:    xorps {{.*}}(%rip), %xmm0\\n+; CHECK-NEXT:    popq %rax\\n+; CHECK-NEXT:    retq\\n+entry:\\n+  %0 = tail call float @llvm.fma.f32(float %a, float %b, float %c)\\n+  %sub = fsub float -0.000000e+00, %0\\n+  ret float %sub\\n+}\\n+\\n+declare float @llvm.fma.f32(float, float, float)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81N2ZlZWVkMzA3NjEzN2RhNDhjNDMwMTAxMzBlZGRiYjhlODFjYjU0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/57feeed3076137da48c43010130eddbb8e81cb54", "content": "{\"sha\": \"57feeed3076137da48c43010130eddbb8e81cb54\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NTdmZWVlZDMwNzYxMzdkYTQ4YzQzMDEwMTMwZWRkYmI4ZTgxY2I1NA==\", \"commit\": {\"author\": {\"name\": \"Derek Schuff\", \"email\": \"dschuff@google.com\", \"date\": \"2018-03-02T17:46:39Z\"}, \"committer\": {\"name\": \"Derek Schuff\", \"email\": \"dschuff@google.com\", \"date\": \"2018-03-02T17:46:39Z\"}, \"message\": \"[X86][x32] Save callee-save register used as base pointer for x32 ABI\\n\\nFor the x32 ABI, since the base pointer register (EBX) is a callee save register\\nit should be saved before use.\\n\\nThis fixes https://bugs.llvm.org/show_bug.cgi?id=36011\\n\\nDifferential Revision: https://reviews.llvm.org/D42358\\n\\nPatch by Pratik Bhatu\\n\\nllvm-svn: 326593\", \"tree\": {\"sha\": \"964b051cb0612658345e22886c5c5e03680bf9d4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/964b051cb0612658345e22886c5c5e03680bf9d4\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/57feeed3076137da48c43010130eddbb8e81cb54\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/57feeed3076137da48c43010130eddbb8e81cb54\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/57feeed3076137da48c43010130eddbb8e81cb54\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/57feeed3076137da48c43010130eddbb8e81cb54/comments\", \"author\": {\"login\": \"dschuff\", \"id\": 1122856, \"node_id\": \"MDQ6VXNlcjExMjI4NTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1122856?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dschuff\", \"html_url\": \"https://github.com/dschuff\", \"followers_url\": \"https://api.github.com/users/dschuff/followers\", \"following_url\": \"https://api.github.com/users/dschuff/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dschuff/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dschuff/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dschuff/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dschuff/orgs\", \"repos_url\": \"https://api.github.com/users/dschuff/repos\", \"events_url\": \"https://api.github.com/users/dschuff/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dschuff/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dschuff\", \"id\": 1122856, \"node_id\": \"MDQ6VXNlcjExMjI4NTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1122856?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dschuff\", \"html_url\": \"https://github.com/dschuff\", \"followers_url\": \"https://api.github.com/users/dschuff/followers\", \"following_url\": \"https://api.github.com/users/dschuff/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dschuff/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dschuff/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dschuff/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dschuff/orgs\", \"repos_url\": \"https://api.github.com/users/dschuff/repos\", \"events_url\": \"https://api.github.com/users/dschuff/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dschuff/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4925653555942acbafbb936ccf81cc6e5b384868\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4925653555942acbafbb936ccf81cc6e5b384868\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4925653555942acbafbb936ccf81cc6e5b384868\"}], \"stats\": {\"total\": 12, \"additions\": 9, \"deletions\": 3}, \"files\": [{\"sha\": \"34febe679dbe307047d3b180641f48e3fcd17917\", \"filename\": \"llvm/lib/Target/X86/X86FrameLowering.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/57feeed3076137da48c43010130eddbb8e81cb54/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/57feeed3076137da48c43010130eddbb8e81cb54/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp?ref=57feeed3076137da48c43010130eddbb8e81cb54\", \"patch\": \"@@ -2108,8 +2108,12 @@ void X86FrameLowering::determineCalleeSaves(MachineFunction &MF,\\n   TargetFrameLowering::determineCalleeSaves(MF, SavedRegs, RS);\\n \\n   // Spill the BasePtr if it's used.\\n-  if (TRI->hasBasePointer(MF))\\n-    SavedRegs.set(TRI->getBaseRegister());\\n+  if (TRI->hasBasePointer(MF)){\\n+    unsigned BasePtr = TRI->getBaseRegister();\\n+    if (STI.isTarget64BitILP32())\\n+      BasePtr = getX86SubSuperRegister(BasePtr, 64);\\n+    SavedRegs.set(BasePtr);\\n+  }\\n }\\n \\n static bool\"}, {\"sha\": \"30855e60e1d8e162db7b05580bda276e0420e1fe\", \"filename\": \"llvm/test/CodeGen/X86/x86-64-baseptr.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/57feeed3076137da48c43010130eddbb8e81cb54/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-64-baseptr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/57feeed3076137da48c43010130eddbb8e81cb54/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-64-baseptr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-64-baseptr.ll?ref=57feeed3076137da48c43010130eddbb8e81cb54\", \"patch\": \"@@ -39,6 +39,7 @@ define void @base() #0 {\\n ; X32ABI:       # %bb.0: # %entry\\n ; X32ABI-NEXT:    pushq %rbp\\n ; X32ABI-NEXT:    movl %esp, %ebp\\n+; X32ABI-NEXT:    pushq  %rbx\\n ; X32ABI-NEXT:    andl $-32, %esp\\n ; X32ABI-NEXT:    subl $32, %esp\\n ; X32ABI-NEXT:    movl %esp, %ebx\\n@@ -52,7 +53,8 @@ define void @base() #0 {\\n ; X32ABI-NEXT:    movl %edx, %esp\\n ; X32ABI-NEXT:    negl %eax\\n ; X32ABI-NEXT:    movl $0, (%ecx,%eax)\\n-; X32ABI-NEXT:    movl %ebp, %esp\\n+; X32ABI-NEXT:    leal -8(%ebp), %esp\\n+; X32ABI-NEXT:    popq %rbx\\n ; X32ABI-NEXT:    popq %rbp\\n ; X32ABI-NEXT:    retq\\n entry:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lNGVjNDczYjNmZjk0ZWNlYzZmZTJjODI4NzcwYTEyNGIxMzllMWE1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e4ec473b3ff94ecec6fe2c828770a124b139e1a5", "content": "{\"sha\": \"e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTRlYzQ3M2IzZmY5NGVjZWM2ZmUyYzgyODc3MGExMjRiMTM5ZTFhNQ==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2018-04-27T20:44:01Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2018-04-27T20:44:01Z\"}, \"message\": \"[MustExecute/LICM] Special case first instruction in throwing header\\n\\nWe currently have a hard to solve analysis problem around the order of instructions within a potentially throwing block.  We can't cheaply determine whether a given instruction is before the first potential throw in the block.  While we're working on that in the background, special case the first instruction within the header.\\n\\nwhy this particular special case?  Well, headers are guaranteed to execute if the loop does, and it turns out we tend to produce this form in practice.\\n\\nIn a follow on patch, I tend to extend LICM with an alternate approach which works for any instruction in the header before the first throw, but this is the best I can come up with other users of the analysis (such as store promotion.)\\n\\nNote: I can't show the difference in the analysis result since we're ORing in the expensive instruction walk used by SCEV.  Using the full walk is not suitable for a general solution.\\nllvm-svn: 331079\", \"tree\": {\"sha\": \"2b42b09ac5f8bb08114ac91382d391b236454916\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2b42b09ac5f8bb08114ac91382d391b236454916\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e4ec473b3ff94ecec6fe2c828770a124b139e1a5/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"201a1086cf3ca3dfa949b26087a5b05610e66f8e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/201a1086cf3ca3dfa949b26087a5b05610e66f8e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/201a1086cf3ca3dfa949b26087a5b05610e66f8e\"}], \"stats\": {\"total\": 50, \"additions\": 45, \"deletions\": 5}, \"files\": [{\"sha\": \"1e922fd44c4740b62da5297cc460bb79307f95df\", \"filename\": \"llvm/lib/Analysis/MustExecute.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e4ec473b3ff94ecec6fe2c828770a124b139e1a5/llvm%2Flib%2FAnalysis%2FMustExecute.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e4ec473b3ff94ecec6fe2c828770a124b139e1a5/llvm%2Flib%2FAnalysis%2FMustExecute.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FMustExecute.cpp?ref=e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"patch\": \"@@ -109,8 +109,11 @@ bool llvm::isGuaranteedToExecute(const Instruction &Inst,\\n   // is a common case, and can save some work, check it now.\\n   if (Inst.getParent() == CurLoop->getHeader())\\n     // If there's a throw in the header block, we can't guarantee we'll reach\\n-    // Inst.\\n-    return !SafetyInfo->HeaderMayThrow;\\n+    // Inst unless we can prove that Inst comes before the potential implicit\\n+    // exit.  At the moment, we use a (cheap) hack for the common case where\\n+    // the instruction of interest is the first one in the block.\\n+    return !SafetyInfo->HeaderMayThrow ||\\n+      Inst.getParent()->getFirstNonPHI() == &Inst;\\n \\n   // Somewhere in this loop there is an instruction which may throw and make us\\n   // exit the loop.\"}, {\"sha\": \"9aa8e00bcfa2834e0aabe5f224ed643083b0a8b8\", \"filename\": \"llvm/test/Transforms/LICM/preheader-safe.ll\", \"status\": \"modified\", \"additions\": 40, \"deletions\": 3, \"changes\": 43, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e4ec473b3ff94ecec6fe2c828770a124b139e1a5/llvm%2Ftest%2FTransforms%2FLICM%2Fpreheader-safe.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e4ec473b3ff94ecec6fe2c828770a124b139e1a5/llvm%2Ftest%2FTransforms%2FLICM%2Fpreheader-safe.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLICM%2Fpreheader-safe.ll?ref=e4ec473b3ff94ecec6fe2c828770a124b139e1a5\", \"patch\": \"@@ -3,6 +3,7 @@\\n \\n declare void @use_nothrow(i64 %a) nounwind\\n declare void @use(i64 %a)\\n+declare void @maythrow()\\n \\n define void @nothrow(i64 %x, i64 %y, i1* %cond) {\\n ; CHECK-LABEL: nothrow\\n@@ -21,16 +22,52 @@ loop2:\\n   call void @use_nothrow(i64 %div)\\n   br label %loop\\n }\\n+\\n+; The udiv is guarantee to execute if the loop is\\n+define void @throw_header_after(i64 %x, i64 %y, i1* %cond) {\\n+; CHECK-LABEL: throw_header_after\\n+; CHECK: %div = udiv i64 %x, %y\\n+; CHECK-LABEL: loop\\n+; CHECK: call void @use(i64 %div)\\n+entry:\\n+  br label %loop\\n+\\n+loop:                                         ; preds = %entry, %for.inc\\n+  %div = udiv i64 %x, %y\\n+  call void @use(i64 %div)\\n+  br label %loop\\n+}\\n+define void @throw_header_after_rec(i64* %xp, i64* %yp, i1* %cond) {\\n+; CHECK-LABEL: throw_header_after_rec\\n+; CHECK: %x = load i64, i64* %xp\\n+; CHECK: %y = load i64, i64* %yp\\n+; CHECK: %div = udiv i64 %x, %y\\n+; CHECK-LABEL: loop\\n+; CHECK: call void @use(i64 %div)\\n+entry:\\n+  br label %loop\\n+\\n+loop:                                         ; preds = %entry, %for.inc\\n+  %x = load i64, i64* %xp\\n+  %y = load i64, i64* %yp\\n+  %div = udiv i64 %x, %y\\n+  call void @use(i64 %div) readonly\\n+  br label %loop\\n+}\\n+\\n+\\n+\\n ; Negative test\\n-define void @throw_header(i64 %x, i64 %y, i1* %cond) {\\n-; CHECK-LABEL: throw_header\\n+define void @throw_header_before(i64 %x, i64 %y, i1* %cond) {\\n+; CHECK-LABEL: throw_header_before\\n ; CHECK-LABEL: loop\\n ; CHECK: %div = udiv i64 %x, %y\\n ; CHECK: call void @use(i64 %div)\\n entry:\\n   br label %loop\\n \\n loop:                                         ; preds = %entry, %for.inc\\n+  call void @maythrow()\\n   %div = udiv i64 %x, %y\\n   call void @use(i64 %div)\\n   br label %loop\\n@@ -43,7 +80,7 @@ define void @nothrow_header(i64 %x, i64 %y, i1 %cond) {\\n ; CHECK-LABEL: entry\\n ; CHECK: %div = udiv i64 %x, %y\\n ; CHECK-LABEL: loop\\n-; CHECK: call void @use(i64 %div)\\n+  ; CHECK: call void @use(i64 %div)\\n entry:\\n   br label %loop\\n loop:                                         ; preds = %entry, %for.inc\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80Zjc5OWMwMjdlMDlkYWZhMGQxMTg4NTA5YjI1NmY3NWRhMzYwOWE1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/4f799c027e09dafa0d1188509b256f75da3609a5", "content": "{\"sha\": \"4f799c027e09dafa0d1188509b256f75da3609a5\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NGY3OTljMDI3ZTA5ZGFmYTBkMTE4ODUwOWIyNTZmNzVkYTM2MDlhNQ==\", \"commit\": {\"author\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse.llvm@gmail.com\", \"date\": \"2018-05-08T09:18:01Z\"}, \"committer\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse.llvm@gmail.com\", \"date\": \"2018-05-08T09:18:01Z\"}, \"message\": \"[X86] Mark all byval parameters as aliased\\n\\nThis is a fix for PR30290: by marking all byval stack slots as being aliased,\\nthe instruction scheduler is more conservative about rescheduling memory\\naccesses to such stack slots as an LLVM Value* might alias it. This fixes\\nerrors such as in the patched test case, where reads and writes to a data\\nstructure are illegally mixed.\\n\\nThis could be fixed better in the future with better analysis for the\\ninstruction scheduler to know what Values alias what stack slots.\\n\\nDifferential Revision: https://reviews.llvm.org/D45022\\n\\nllvm-svn: 331749\", \"tree\": {\"sha\": \"81d48449f90dba915d54028b36cb6e1f61792f96\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/81d48449f90dba915d54028b36cb6e1f61792f96\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/4f799c027e09dafa0d1188509b256f75da3609a5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4f799c027e09dafa0d1188509b256f75da3609a5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4f799c027e09dafa0d1188509b256f75da3609a5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4f799c027e09dafa0d1188509b256f75da3609a5/comments\", \"author\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c47f79928952f1925b8c8ccbc6c53863bddcf998\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c47f79928952f1925b8c8ccbc6c53863bddcf998\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c47f79928952f1925b8c8ccbc6c53863bddcf998\"}], \"stats\": {\"total\": 12, \"additions\": 6, \"deletions\": 6}, \"files\": [{\"sha\": \"b448e3bec37d5e876b40b196845cef74221c3407\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f799c027e09dafa0d1188509b256f75da3609a5/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f799c027e09dafa0d1188509b256f75da3609a5/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=4f799c027e09dafa0d1188509b256f75da3609a5\", \"patch\": \"@@ -2839,7 +2839,11 @@ X86TargetLowering::LowerMemArgument(SDValue Chain, CallingConv::ID CallConv,\\n   if (Flags.isByVal()) {\\n     unsigned Bytes = Flags.getByValSize();\\n     if (Bytes == 0) Bytes = 1; // Don't create zero-sized stack objects.\\n-    int FI = MFI.CreateFixedObject(Bytes, VA.getLocMemOffset(), isImmutable);\\n+\\n+    // FIXME: For now, all byval parameter objects are marked as aliasing. This\\n+    // can be improved with deeper analysis.\\n+    int FI = MFI.CreateFixedObject(Bytes, VA.getLocMemOffset(), isImmutable,\\n+                                   /*isAliased=*/true);\\n     // Adjust SP offset of interrupt parameter.\\n     if (CallConv == CallingConv::X86_INTR) {\\n       MFI.setObjectOffset(FI, Offset);\"}, {\"sha\": \"12b3a88eafe78cd83607081a77f0aadbb36a7b9e\", \"filename\": \"llvm/test/CodeGen/X86/pr30290.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 5, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f799c027e09dafa0d1188509b256f75da3609a5/llvm%2Ftest%2FCodeGen%2FX86%2Fpr30290.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f799c027e09dafa0d1188509b256f75da3609a5/llvm%2Ftest%2FCodeGen%2FX86%2Fpr30290.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fpr30290.ll?ref=4f799c027e09dafa0d1188509b256f75da3609a5\", \"patch\": \"@@ -5,10 +5,6 @@\\n ; When broken, five \\\"1\\\" constants are written into the byval %struct.face,\\n ; but the subsequent byval read of that struct (call to bar) gets re-ordered\\n ; before those writes, illegally.\\n-;\\n-; FIXME: the output shown below is the broken output of llc, \\\"movl $1\\\" is\\n-; scheduled after the copy between byval arguments starts. This will be fixed\\n-; with the patch in review D45022.\\n source_filename = \\\"test.c\\\"\\n target datalayout = \\\"e-m:e-i64:64-f80:128-n8:16:32:64-S128\\\"\\n target triple = \\\"x86_64-pc-linux-gnu\\\"\\n@@ -26,8 +22,8 @@ define void @foo(%struct.face* byval nocapture align 8) local_unnamed_addr {\\n ; CHECK-NEXT:    .cfi_def_cfa_offset 48\\n ; CHECK-NEXT:    vmovaps {{.*#+}} xmm0 = [1,1,1,1]\\n ; CHECK-NEXT:    vmovaps %xmm0, {{[0-9]+}}(%rsp)\\n-; CHECK-NEXT:    vmovups {{[0-9]+}}(%rsp), %xmm0\\n ; CHECK-NEXT:    movl $1, {{[0-9]+}}(%rsp)\\n+; CHECK-NEXT:    vmovups {{[0-9]+}}(%rsp), %xmm0\\n ; CHECK-NEXT:    vmovups %xmm0, {{[0-9]+}}(%rsp)\\n ; CHECK-NEXT:    vmovaps {{[0-9]+}}(%rsp), %xmm0\\n ; CHECK-NEXT:    vmovups %xmm0, (%rsp)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80MGU3NjYzYjFmY2E1OGIwOTljMWNiMWQ1Mjc4ZjM2ODQ5NGVhNDZkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/40e7663b1fca58b099c1cb1d5278f368494ea46d", "content": "{\"sha\": \"40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NDBlNzY2M2IxZmNhNThiMDk5YzFjYjFkNTI3OGYzNjg0OTRlYTQ2ZA==\", \"commit\": {\"author\": {\"name\": \"Reid Kleckner\", \"email\": \"rnk@google.com\", \"date\": \"2018-08-14T01:24:35Z\"}, \"committer\": {\"name\": \"Reid Kleckner\", \"email\": \"rnk@google.com\", \"date\": \"2018-08-14T01:24:35Z\"}, \"message\": \"[BasicAA] Don't assume tail calls with byval don't alias allocas\\n\\nSummary:\\nCalls marked 'tail' cannot read or write allocas from the current frame\\nbecause the current frame might be destroyed by the time they run.\\nHowever, a tail call may use an alloca with byval. Calling with byval\\ncopies the contents of the alloca into argument registers or stack\\nslots, so there is no lifetime issue. Tail calls never modify allocas,\\nso we can return just ModRefInfo::Ref.\\n\\nFixes PR38466, a longstanding bug.\\n\\nReviewers: hfinkel, nlewycky, gbiv, george.burgess.iv\\n\\nSubscribers: hiraditya, llvm-commits\\n\\nDifferential Revision: https://reviews.llvm.org/D50679\\n\\nllvm-svn: 339636\", \"tree\": {\"sha\": \"750fb33cbc8c3c041a8444e5d7d6eb0285dd4f7d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/750fb33cbc8c3c041a8444e5d7d6eb0285dd4f7d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/40e7663b1fca58b099c1cb1d5278f368494ea46d/comments\", \"author\": {\"login\": \"rnk\", \"id\": 50126, \"node_id\": \"MDQ6VXNlcjUwMTI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/50126?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rnk\", \"html_url\": \"https://github.com/rnk\", \"followers_url\": \"https://api.github.com/users/rnk/followers\", \"following_url\": \"https://api.github.com/users/rnk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rnk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rnk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rnk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rnk/orgs\", \"repos_url\": \"https://api.github.com/users/rnk/repos\", \"events_url\": \"https://api.github.com/users/rnk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rnk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rnk\", \"id\": 50126, \"node_id\": \"MDQ6VXNlcjUwMTI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/50126?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rnk\", \"html_url\": \"https://github.com/rnk\", \"followers_url\": \"https://api.github.com/users/rnk/followers\", \"following_url\": \"https://api.github.com/users/rnk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rnk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rnk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rnk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rnk/orgs\", \"repos_url\": \"https://api.github.com/users/rnk/repos\", \"events_url\": \"https://api.github.com/users/rnk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rnk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5a778aa79f08990b6c5c4ad3ba6948c745663fe6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5a778aa79f08990b6c5c4ad3ba6948c745663fe6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5a778aa79f08990b6c5c4ad3ba6948c745663fe6\"}], \"stats\": {\"total\": 51, \"additions\": 45, \"deletions\": 6}, \"files\": [{\"sha\": \"f9ecbc0432612ac0e67d61f2a45a3b2ba227596a\", \"filename\": \"llvm/lib/Analysis/BasicAliasAnalysis.cpp\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 6, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp?ref=40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"patch\": \"@@ -801,14 +801,15 @@ ModRefInfo BasicAAResult::getModRefInfo(ImmutableCallSite CS,\\n \\n   const Value *Object = GetUnderlyingObject(Loc.Ptr, DL);\\n \\n-  // If this is a tail call and Loc.Ptr points to a stack location, we know that\\n-  // the tail call cannot access or modify the local stack.\\n-  // We cannot exclude byval arguments here; these belong to the caller of\\n-  // the current function not to the current function, and a tail callee\\n-  // may reference them.\\n+  // Calls marked 'tail' cannot read or write allocas from the current frame\\n+  // because the current frame might be destroyed by the time they run. However,\\n+  // a tail call may use an alloca with byval. Calling with byval copies the\\n+  // contents of the alloca into argument registers or stack slots, so there is\\n+  // no lifetime issue.\\n   if (isa<AllocaInst>(Object))\\n     if (const CallInst *CI = dyn_cast<CallInst>(CS.getInstruction()))\\n-      if (CI->isTailCall())\\n+      if (CI->isTailCall() &&\\n+          !CI->getAttributes().hasAttrSomewhere(Attribute::ByVal))\\n         return ModRefInfo::NoModRef;\\n \\n   // If the pointer is to a locally allocated object that does not escape,\"}, {\"sha\": \"0aa8dfdaedff2b222ec3f8ac7e0253373a83c477\", \"filename\": \"llvm/test/Analysis/BasicAA/tail-byval.ll\", \"status\": \"added\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Ftest%2FAnalysis%2FBasicAA%2Ftail-byval.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Ftest%2FAnalysis%2FBasicAA%2Ftail-byval.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FBasicAA%2Ftail-byval.ll?ref=40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"patch\": \"@@ -0,0 +1,15 @@\\n+; RUN: opt -basicaa -aa-eval -print-all-alias-modref-info -disable-output < %s 2>&1 | FileCheck %s\\n+\\n+declare void @takebyval(i32* byval %p)\\n+\\n+define i32 @tailbyval() {\\n+entry:\\n+  %p = alloca i32\\n+  store i32 42, i32* %p\\n+  tail call void @takebyval(i32* byval %p)\\n+  %rv = load i32, i32* %p\\n+  ret i32 %rv\\n+}\\n+; FIXME: This should be Just Ref.\\n+; CHECK-LABEL: Function: tailbyval: 1 pointers, 1 call sites\\n+; CHECK-NEXT:   Both ModRef:  Ptr: i32* %p       <->  tail call void @takebyval(i32* byval %p)\"}, {\"sha\": \"ed2fbd434a75d4d7061e228fbfa07cb5c257440a\", \"filename\": \"llvm/test/Transforms/DeadStoreElimination/tail-byval.ll\", \"status\": \"added\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Ftail-byval.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/40e7663b1fca58b099c1cb1d5278f368494ea46d/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Ftail-byval.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2Ftail-byval.ll?ref=40e7663b1fca58b099c1cb1d5278f368494ea46d\", \"patch\": \"@@ -0,0 +1,23 @@\\n+; RUN: opt -dse -S < %s | FileCheck %s\\n+\\n+; Don't eliminate stores to allocas before tail calls to functions that use\\n+; byval. It's correct to mark calls like these as 'tail'. To implement this tail\\n+; call, the backend should copy the bytes from the alloca into the argument area\\n+; before clearing the stack.\\n+\\n+target datalayout = \\\"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\\\"\\n+target triple = \\\"i386-unknown-linux-gnu\\\"\\n+\\n+declare void @g(i32* byval %p)\\n+\\n+define void @f(i32* byval %x) {\\n+entry:\\n+  %p = alloca i32\\n+  %v = load i32, i32* %x\\n+  store i32 %v, i32* %p\\n+  tail call void @g(i32* byval %p)\\n+  ret void\\n+}\\n+; CHECK-LABEL: define void @f(i32* byval %x)\\n+; CHECK:   store i32 %v, i32* %p\\n+; CHECK:   tail call void @g(i32* byval %p)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xNmY1OGQxODUwNmJmM2MwYmY4OWNmMjRlM2ZlYTg4ZDVhODE1NGRjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc", "content": "{\"sha\": \"16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MTZmNThkMTg1MDZiZjNjMGJmODljZjI0ZTNmZWE4OGQ1YTgxNTRkYw==\", \"commit\": {\"author\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2018-09-14T19:38:45Z\"}, \"committer\": {\"name\": \"Adrian Prantl\", \"email\": \"aprantl@apple.com\", \"date\": \"2018-09-14T19:38:45Z\"}, \"message\": \"Fix debug info for SelectionDAG legalization of DAG nodes with two results.\\n\\nThis patch fixes the debug info handling for SelectionDAG legalization\\nof DAG nodes with two results. When an replaced SDNode has more than\\none result, transferDbgValues was always copying the SDDbgValue from\\nthe first result and attaching them to all members. In reality\\nSelectionDAG::ReplaceAllUsesWith() is given an array of SDNodes\\n(though the type signature doesn't make this obvious (cf. the call\\nsite code in ReplaceNode()).\\n\\nrdar://problem/44162227\\n\\nDifferential Revision: https://reviews.llvm.org/D52112\\n\\nllvm-svn: 342264\", \"tree\": {\"sha\": \"69eaf7a8a90a6cff82db9467a4f9d80e694f4f54\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/69eaf7a8a90a6cff82db9467a4f9d80e694f4f54\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc/comments\", \"author\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"adrian-prantl\", \"id\": 2251653, \"node_id\": \"MDQ6VXNlcjIyNTE2NTM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2251653?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/adrian-prantl\", \"html_url\": \"https://github.com/adrian-prantl\", \"followers_url\": \"https://api.github.com/users/adrian-prantl/followers\", \"following_url\": \"https://api.github.com/users/adrian-prantl/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/adrian-prantl/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/adrian-prantl/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/adrian-prantl/subscriptions\", \"organizations_url\": \"https://api.github.com/users/adrian-prantl/orgs\", \"repos_url\": \"https://api.github.com/users/adrian-prantl/repos\", \"events_url\": \"https://api.github.com/users/adrian-prantl/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/adrian-prantl/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ec53c89fde3aff5247cac753c84629d07507b418\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ec53c89fde3aff5247cac753c84629d07507b418\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ec53c89fde3aff5247cac753c84629d07507b418\"}], \"stats\": {\"total\": 49, \"additions\": 48, \"deletions\": 1}, \"files\": [{\"sha\": \"afe7bfbf9f5dcf7a2f9fffa632e218d90b474873\", \"filename\": \"llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAG.cpp?ref=16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"patch\": \"@@ -7797,7 +7797,7 @@ void SelectionDAG::ReplaceAllUsesWith(SDNode *From, const SDValue *To) {\\n \\n   // Preserve Debug Info.\\n   for (unsigned i = 0, e = From->getNumValues(); i != e; ++i)\\n-    transferDbgValues(SDValue(From, i), *To);\\n+    transferDbgValues(SDValue(From, i), To[i]);\\n \\n   // Iterate over just the existing users of From. See the comments in\\n   // the ReplaceAllUsesWith above.\"}, {\"sha\": \"0ceace388e96d7a91e77c165ba1d82bc7865e05c\", \"filename\": \"llvm/test/DebugInfo/X86/sdag-legalize-multires.ll\", \"status\": \"added\", \"additions\": 47, \"deletions\": 0, \"changes\": 47, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc/llvm%2Ftest%2FDebugInfo%2FX86%2Fsdag-legalize-multires.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/16f58d18506bf3c0bf89cf24e3fea88d5a8154dc/llvm%2Ftest%2FDebugInfo%2FX86%2Fsdag-legalize-multires.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fsdag-legalize-multires.ll?ref=16f58d18506bf3c0bf89cf24e3fea88d5a8154dc\", \"patch\": \"@@ -0,0 +1,47 @@\\n+; RUN: llc -O0 %s -stop-after=livedebugvars -o - | FileCheck %s\\n+; This is a hand-crafted example modified after some Swift compiler output.\\n+; Test that SelectionDAG legalization of DAG nodes with two results\\n+; transfers debug info correctly.\\n+\\n+source_filename = \\\"/tmp/sincos.ll\\\"\\n+target datalayout = \\\"e-m:o-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-apple-macosx10.13.0\\\"\\n+\\n+declare float @llvm.cos.f32(float)\\n+declare float @llvm.sin.f32(float)\\n+declare void @llvm.dbg.value(metadata, metadata, metadata)\\n+declare swiftcc void @g(float, float)\\n+\\n+; CHECK: ![[RCOS:.*]] = !DILocalVariable(name: \\\"rcos\\\"\\n+; CHECK: ![[RSIN:.*]] = !DILocalVariable(name: \\\"rsin\\\"\\n+\\n+define hidden swiftcc void @f() #0 !dbg !8 {\\n+entry:\\n+  ; CHECK: CALL64pcrel32 &__sincosf_stret\\n+  %0 = call float @llvm.cos.f32(float 1.500000e+00), !dbg !13\\n+  ; CHECK: $xmm1 = MOVAPSrr $xmm0\\n+  call void @llvm.dbg.value(metadata float %0, metadata !15, metadata !DIExpression()), !dbg !13\\n+  ; CHECK: DBG_VALUE debug-use {{.*}}$xmm1, {{.*}}, ![[RSIN]], !DIExpression(),\\n+  %1 = call float @llvm.sin.f32(float 1.500000e+00), !dbg !13\\n+  call void @llvm.dbg.value(metadata float %1, metadata !11, metadata !DIExpression()), !dbg !13\\n+  ; CHECK: DBG_VALUE debug-use {{.*}}$xmm0, {{.*}}, ![[RCOS]], !DIExpression(),\\n+  call void @g(float %0, float %1), !dbg !13\\n+  ret void, !dbg !13\\n+}\\n+\\n+attributes #0 = { noinline nounwind optnone ssp uwtable \\\"target-features\\\"=\\\"+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87\\\" }\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, emissionKind: FullDebug)\\n+!1 = !DIFile(filename: \\\"sincos.ll\\\", directory: \\\"/\\\")\\n+!3 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!8 = distinct !DISubprogram(name: \\\"f\\\", scope: !1, file: !1, line: 2, type: !9, isLocal: false, isDefinition: true, scopeLine: 2, isOptimized: false, unit: !0)\\n+!9 = !DISubroutineType(types: !10)\\n+!10 = !{null}\\n+!11 = !DILocalVariable(name: \\\"rsin\\\", scope: !8, file: !1, line: 3, type: !12)\\n+!12 = !DIBasicType(name: \\\"float\\\", size: 32, encoding: DW_ATE_float)\\n+!13 = !DILocation(line: 3, scope: !8)\\n+!15 = !DILocalVariable(name: \\\"rcos\\\", scope: !8, file: !1, line: 4, type: !12)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iZmVlNWE5YjQyZDNiNDE5MGQ2YTQxZDg0ODMwM2QxZmVhMWJkYmYyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2", "content": "{\"sha\": \"bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YmZlZTVhOWI0MmQzYjQxOTBkNmE0MWQ4NDgzMDNkMWZlYTFiZGJmMg==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2018-09-16T15:41:56Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2018-09-16T15:41:56Z\"}, \"message\": \"[x86] fix uses check in broadcast transform (PR38949)\\n\\nhttps://bugs.llvm.org/show_bug.cgi?id=38949\\n\\nIt's not clear to me that we even need a one-use check in this fold.\\nIe, 2 independent loads might be better than a load+dependent shuffle.\\n\\nNote that the existing re-use tests are not affected. We actually do form a\\nbroadcast node in those tests now because there's no extra use of the \\ninsert_subvector node in those cases. But something later in isel pattern \\nmatching decides that it is not worth using a broadcast for the full load in \\nthose tests:\\n\\nLegalized selection DAG: %bb.0 'test_broadcast_2f64_4f64_reuse:'\\n  t7: v2f64,ch = load<(load 16 from %ir.p0)> t0, t2, undef:i64\\n      t4: i64,ch = CopyFromReg t0, Register:i64 %1\\n    t10: ch = store<(store 16 into %ir.p1)> t7:1, t7, t4, undef:i64\\n      t18: v4f64 = insert_subvector undef:v4f64, t7, Constant:i64<0>\\n    t20: v4f64 = insert_subvector t18, t7, Constant:i64<2>\\n\\nBecomes:\\n  t7: v2f64,ch = load<(load 16 from %ir.p0)> t0, t2, undef:i64\\n      t4: i64,ch = CopyFromReg t0, Register:i64 %1\\n    t10: ch = store<(store 16 into %ir.p1)> t7:1, t7, t4, undef:i64\\n    t21: v4f64 = X86ISD::SUBV_BROADCAST t7\\n\\nISEL: Starting selection on root node: t21: v4f64 = X86ISD::SUBV_BROADCAST t7\\n...\\n  Created node: t27: v4f64 = INSERT_SUBREG IMPLICIT_DEF:v4f64, t7, TargetConstant:i32<7>\\n  Morphed node: t21: v4f64 = VINSERTF128rr t27, t7, TargetConstant:i8<1>\\n\\nllvm-svn: 342347\", \"tree\": {\"sha\": \"4f105fa463b28845c1dea8c176356c21072fab80\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/4f105fa463b28845c1dea8c176356c21072fab80\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3e095174b0f0d690dfbded13957df17cbb6f1ef6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3e095174b0f0d690dfbded13957df17cbb6f1ef6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/3e095174b0f0d690dfbded13957df17cbb6f1ef6\"}], \"stats\": {\"total\": 13, \"additions\": 5, \"deletions\": 8}, \"files\": [{\"sha\": \"c6a79a2df5f8642cd4896b92b14e38c20471ec1a\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 4, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"patch\": \"@@ -40114,11 +40114,10 @@ static SDValue combineInsertSubvector(SDNode *N, SelectionDAG &DAG,\\n             return Ld;\\n         }\\n       }\\n-      // If lower/upper loads are the same and the only users of the load, then\\n-      // lower to a VBROADCASTF128/VBROADCASTI128/etc.\\n+      // If lower/upper loads are the same and there's no other use of the lower\\n+      // load, then splat the loaded value with a broadcast.\\n       if (auto *Ld = dyn_cast<LoadSDNode>(peekThroughOneUseBitcasts(SubVec2)))\\n-        if (SubVec2 == SubVec && ISD::isNormalLoad(Ld) &&\\n-            SDNode::areOnlyUsersOf({N, Vec.getNode()}, SubVec2.getNode()))\\n+        if (SubVec2 == SubVec && ISD::isNormalLoad(Ld) && Vec.hasOneUse())\\n           return DAG.getNode(X86ISD::SUBV_BROADCAST, dl, OpVT, SubVec);\\n \\n       // If this is subv_broadcast insert into both halves, use a larger\"}, {\"sha\": \"9bd41796e58fa738ee6196c66a8606edeba5b7c2\", \"filename\": \"llvm/test/CodeGen/X86/avx-vbroadcastf128.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 4, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2/llvm%2Ftest%2FCodeGen%2FX86%2Favx-vbroadcastf128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2/llvm%2Ftest%2FCodeGen%2FX86%2Favx-vbroadcastf128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Favx-vbroadcastf128.ll?ref=bfee5a9b42d3b4190d6a41d848303d1fea1bdbf2\", \"patch\": \"@@ -106,16 +106,14 @@ define void @subv_reuse_is_ok(<4 x float>* %a, <8 x float>* %b) {\\n ; X32:       # %bb.0:\\n ; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n ; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n-; X32-NEXT:    vmovups (%ecx), %xmm0\\n-; X32-NEXT:    vinsertf128 $1, %xmm0, %ymm0, %ymm0\\n+; X32-NEXT:    vbroadcastf128 {{.*#+}} ymm0 = mem[0,1,0,1]\\n ; X32-NEXT:    vmovups %ymm0, (%eax)\\n ; X32-NEXT:    vzeroupper\\n ; X32-NEXT:    retl\\n ;\\n ; X64-LABEL: subv_reuse_is_ok:\\n ; X64:       # %bb.0:\\n-; X64-NEXT:    vmovups (%rdi), %xmm0\\n-; X64-NEXT:    vinsertf128 $1, %xmm0, %ymm0, %ymm0\\n+; X64-NEXT:    vbroadcastf128 {{.*#+}} ymm0 = mem[0,1,0,1]\\n ; X64-NEXT:    vmovups %ymm0, (%rsi)\\n ; X64-NEXT:    vzeroupper\\n ; X64-NEXT:    retq\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lNjJmYzNkMGI2Y2U5MjNkY2JjMjllZWI2ZWJjNTgwOGU2NzI0ZjkwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90", "content": "{\"sha\": \"e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTYyZmMzZDBiNmNlOTIzZGNiYzI5ZWViNmViYzU4MDhlNjcyNGY5MA==\", \"commit\": {\"author\": {\"name\": \"Matt Morehouse\", \"email\": \"mascasa@google.com\", \"date\": \"2018-09-19T19:37:24Z\"}, \"committer\": {\"name\": \"Matt Morehouse\", \"email\": \"mascasa@google.com\", \"date\": \"2018-09-19T19:37:24Z\"}, \"message\": \"[InstCombine] Disable strcmp->memcmp transform for MSan.\\n\\nSummary:\\nThe strcmp->memcmp transform can make the resulting memcmp read\\nuninitialized data, which MSan doesn't like.\\n\\nResolves https://github.com/google/sanitizers/issues/993.\\n\\nReviewers: eugenis, xbolva00\\n\\nReviewed By: eugenis\\n\\nSubscribers: hiraditya, llvm-commits\\n\\nDifferential Revision: https://reviews.llvm.org/D52272\\n\\nllvm-svn: 342582\", \"tree\": {\"sha\": \"e5fadc259b3b063b9ddb6a12d82ce1c5b67a9c81\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e5fadc259b3b063b9ddb6a12d82ce1c5b67a9c81\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90/comments\", \"author\": {\"login\": \"morehouse\", \"id\": 19176026, \"node_id\": \"MDQ6VXNlcjE5MTc2MDI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19176026?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/morehouse\", \"html_url\": \"https://github.com/morehouse\", \"followers_url\": \"https://api.github.com/users/morehouse/followers\", \"following_url\": \"https://api.github.com/users/morehouse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/morehouse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/morehouse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/morehouse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/morehouse/orgs\", \"repos_url\": \"https://api.github.com/users/morehouse/repos\", \"events_url\": \"https://api.github.com/users/morehouse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/morehouse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"morehouse\", \"id\": 19176026, \"node_id\": \"MDQ6VXNlcjE5MTc2MDI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19176026?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/morehouse\", \"html_url\": \"https://github.com/morehouse\", \"followers_url\": \"https://api.github.com/users/morehouse/followers\", \"following_url\": \"https://api.github.com/users/morehouse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/morehouse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/morehouse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/morehouse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/morehouse/orgs\", \"repos_url\": \"https://api.github.com/users/morehouse/repos\", \"events_url\": \"https://api.github.com/users/morehouse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/morehouse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a4526d77c9921c86a29889fc09de17f7d5ccb210\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a4526d77c9921c86a29889fc09de17f7d5ccb210\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a4526d77c9921c86a29889fc09de17f7d5ccb210\"}], \"stats\": {\"total\": 20, \"additions\": 19, \"deletions\": 1}, \"files\": [{\"sha\": \"3789181a898252eeee20216f78a2e1b016ead4b0\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp?ref=e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"patch\": \"@@ -171,7 +171,10 @@ static bool canTransformToMemCmp(CallInst *CI, Value *Str, uint64_t Len,\\n \\n   if (!isDereferenceableAndAlignedPointer(Str, 1, APInt(64, Len), DL))\\n     return false;\\n-    \\n+\\n+  if (CI->getFunction()->hasFnAttribute(Attribute::SanitizeMemory))\\n+    return false;\\n+\\n   return true;\\n }\\n \"}, {\"sha\": \"092a47fe1dbe2019b1bf3f69185b3850375a8f1c\", \"filename\": \"llvm/test/Transforms/InstCombine/strcmp-memcmp.ll\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrcmp-memcmp.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrcmp-memcmp.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrcmp-memcmp.ll?ref=e62fc3d0b6ce923dcbc29eeb6ebc5808e6724f90\", \"patch\": \"@@ -542,4 +542,19 @@ define i32 @strncmp_memcmp_bad4([4 x i8]* dereferenceable (4) %buf) {\\n   ret i32 0\\n }\\n \\n+define i32 @strcmp_memcmp_msan([12 x i8]* dereferenceable (12) %buf) sanitize_memory {\\n+; CHECK-LABEL: @strcmp_memcmp_msan(\\n+; CHECK-NEXT:    [[STRING:%.*]] = getelementptr inbounds [12 x i8], [12 x i8]* [[BUF:%.*]], i64 0, i64 0\\n+; CHECK-NEXT:    [[CALL:%.*]] = call i32 @strcmp(i8* nonnull [[STRING]], i8* getelementptr inbounds ([4 x i8], [4 x i8]* @key, i64 0, i64 0))\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0\\n+; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CMP]] to i32\\n+; CHECK-NEXT:    ret i32 [[CONV]]\\n+;\\n+  %string = getelementptr inbounds [12 x i8], [12 x i8]* %buf, i64 0, i64 0\\n+  %call = call i32 @strcmp(i8* nonnull %string, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @key, i64 0, i64 0))\\n+  %cmp = icmp eq i32 %call, 0\\n+  %conv = zext i1 %cmp to i32\\n+  ret i32 %conv\\n+}\\n+\\n declare i32 @memcmp(i8* nocapture, i8* nocapture, i64)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81NTMyMWQ4MmJkMzI5YmI4ODc5OWU1YTg1M2EyNTZiNGE3MGU0MTA2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/55321d82bd329bb88799e5a853a256b4a70e4106", "content": "{\"sha\": \"55321d82bd329bb88799e5a853a256b4a70e4106\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NTUzMjFkODJiZDMyOWJiODg3OTllNWE4NTNhMjU2YjRhNzBlNDEwNg==\", \"commit\": {\"author\": {\"name\": \"Hsiangkai Wang\", \"email\": \"hsiangkai@gmail.com\", \"date\": \"2018-09-26T04:19:23Z\"}, \"committer\": {\"name\": \"Hsiangkai Wang\", \"email\": \"hsiangkai@gmail.com\", \"date\": \"2018-09-26T04:19:23Z\"}, \"message\": \"[DebugInfo] Do not generate address info for removed debug labels.\\n\\nIn some senario, LLVM will remove llvm.dbg.labels in IR. For example,\\nwhen the labels are in unreachable blocks, these labels will not\\nbe generated in LLVM IR. In the case, these debug labels will have\\naddress zero as their address. It is not legal address for debugger to\\nset breakpoints or query sources. So, the patch inhibits the address info\\n(DW_AT_low_pc) of removed labels.\\n\\nFix build failed in BuildBot, clang-stage1-cmake-RA-incremental, on macOS.\\n\\nDifferential Revision: https://reviews.llvm.org/D51908\\n\\nllvm-svn: 343062\", \"tree\": {\"sha\": \"ce15be46afb513db09febfef69cef0e41b2b3cdd\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/ce15be46afb513db09febfef69cef0e41b2b3cdd\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/55321d82bd329bb88799e5a853a256b4a70e4106\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/55321d82bd329bb88799e5a853a256b4a70e4106\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/55321d82bd329bb88799e5a853a256b4a70e4106\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/55321d82bd329bb88799e5a853a256b4a70e4106/comments\", \"author\": {\"login\": \"Hsiangkai\", \"id\": 1555806, \"node_id\": \"MDQ6VXNlcjE1NTU4MDY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1555806?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Hsiangkai\", \"html_url\": \"https://github.com/Hsiangkai\", \"followers_url\": \"https://api.github.com/users/Hsiangkai/followers\", \"following_url\": \"https://api.github.com/users/Hsiangkai/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Hsiangkai/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Hsiangkai/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Hsiangkai/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Hsiangkai/orgs\", \"repos_url\": \"https://api.github.com/users/Hsiangkai/repos\", \"events_url\": \"https://api.github.com/users/Hsiangkai/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Hsiangkai/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"Hsiangkai\", \"id\": 1555806, \"node_id\": \"MDQ6VXNlcjE1NTU4MDY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1555806?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Hsiangkai\", \"html_url\": \"https://github.com/Hsiangkai\", \"followers_url\": \"https://api.github.com/users/Hsiangkai/followers\", \"following_url\": \"https://api.github.com/users/Hsiangkai/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Hsiangkai/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Hsiangkai/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Hsiangkai/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Hsiangkai/orgs\", \"repos_url\": \"https://api.github.com/users/Hsiangkai/repos\", \"events_url\": \"https://api.github.com/users/Hsiangkai/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Hsiangkai/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c1275e72cb47b7a9ef5a6a2ffe1961f3e0025528\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c1275e72cb47b7a9ef5a6a2ffe1961f3e0025528\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c1275e72cb47b7a9ef5a6a2ffe1961f3e0025528\"}], \"stats\": {\"total\": 46, \"additions\": 42, \"deletions\": 4}, \"files\": [{\"sha\": \"496c80a08e32a47cc1e88cdecbab55a878068786\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 4, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/55321d82bd329bb88799e5a853a256b4a70e4106/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/55321d82bd329bb88799e5a853a256b4a70e4106/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp?ref=55321d82bd329bb88799e5a853a256b4a70e4106\", \"patch\": \"@@ -865,10 +865,9 @@ void DwarfCompileUnit::finishEntityDefinition(const DbgEntity *Entity) {\\n       llvm_unreachable(\\\"DbgEntity must be DbgVariable or DbgLabel.\\\");\\n   }\\n \\n-  if (Label) {\\n-    const MCSymbol *Sym = Label->getSymbol();\\n-    addLabelAddress(*Die, dwarf::DW_AT_low_pc, Sym);\\n-  }\\n+  if (Label)\\n+    if (const auto *Sym = Label->getSymbol())\\n+      addLabelAddress(*Die, dwarf::DW_AT_low_pc, Sym);\\n }\\n \\n DbgEntity *DwarfCompileUnit::getExistingAbstractEntity(const DINode *Node) {\"}, {\"sha\": \"b84fb07d93ea61ae14cb1e708f5effe6dd52ffb7\", \"filename\": \"llvm/test/DebugInfo/X86/debug-label-unreached.ll\", \"status\": \"added\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/55321d82bd329bb88799e5a853a256b4a70e4106/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-label-unreached.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/55321d82bd329bb88799e5a853a256b4a70e4106/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-label-unreached.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-label-unreached.ll?ref=55321d82bd329bb88799e5a853a256b4a70e4106\", \"patch\": \"@@ -0,0 +1,39 @@\\n+; Test unreachable llvm.dbg.label\\n+;\\n+; RUN: llc -filetype=obj -split-dwarf-file debug.dwo -mtriple=x86_64-unknown-linux-gnu -o - %s | llvm-dwarfdump -v - | FileCheck %s\\n+;\\n+; CHECK: .debug_info.dwo contents:\\n+; CHECK: DW_TAG_label\\n+; CHECK-NEXT: DW_AT_name {{.*}}\\\"done\\\"\\n+; CHECK-NOT: {{DW_TAG|NULL}}\\n+; CHECK: DW_AT_low_pc\\n+; CHECK: DW_TAG_label\\n+; CHECK-NEXT: DW_AT_name {{.*}}\\\"removed\\\"\\n+; CHECK-NOT: DW_AT_low_pc\\n+source_filename = \\\"debug-label-unreached.c\\\"\\n+\\n+define dso_local i32 @foo(i32 %a, i32 %b) !dbg !8 {\\n+entry:\\n+  %sum = add nsw i32 %a, %b, !dbg !12\\n+  call void @llvm.dbg.label(metadata !11), !dbg !12\\n+  ret i32 %sum, !dbg !13\\n+}\\n+\\n+declare void @llvm.dbg.label(metadata)\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!4}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, isOptimized: true, emissionKind: FullDebug, enums: !2)\\n+!1 = !DIFile(filename: \\\"debug-label-unreached.c\\\", directory: \\\"./\\\")\\n+!2 = !{}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!5 = !DISubroutineType(types: !6)\\n+!6 = !{!7}\\n+!7 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!8 = distinct !DISubprogram(name: \\\"foo\\\", scope: !1, file: !1, line: 8, type: !5, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !9)\\n+!9 = !{!10, !11}\\n+!10 = !DILabel(scope: !8, name: \\\"removed\\\", file: !1, line: 11)\\n+!11 = !DILabel(scope: !8, name: \\\"done\\\", file: !1, line: 13)\\n+!12 = !DILocation(line: 13, column: 1, scope: !8)\\n+!13 = !DILocation(line: 14, column: 5, scope: !8)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82OWJmYTQwMjAwNmZhN2ZhYmU2ZWFmMTY2MGM5ZWNhY2I3NjNhOTY2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/69bfa402006fa7fabe6eaf1660c9ecacb763a966", "content": "{\"sha\": \"69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NjliZmE0MDIwMDZmYTdmYWJlNmVhZjE2NjBjOWVjYWNiNzYzYTk2Ng==\", \"commit\": {\"author\": {\"name\": \"Hiroshi Inoue\", \"email\": \"inouehrs@jp.ibm.com\", \"date\": \"2018-09-28T05:27:32Z\"}, \"committer\": {\"name\": \"Hiroshi Inoue\", \"email\": \"inouehrs@jp.ibm.com\", \"date\": \"2018-09-28T05:27:32Z\"}, \"message\": \"[CodeGen] fix broken successor probability in MBB dump\\n\\nWhen printing successor probabilities for a MBB, a human readable value is sometimes shown as 200.0%.\\nThe human readable output is based on getProbabilityIterator, which returns 0xFFFFFFFF for getNumerator() and 0x80000000 for getDenominator() for unknown BranchProbability.\\nBy using getSuccProbability as we do for the non-human readable part, we can avoid this problem.\\n\\nDifferential Revision: https://reviews.llvm.org/D52605\\n\\nllvm-svn: 343297\", \"tree\": {\"sha\": \"97708202b9130d1603ba14586af4eaa90182268a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/97708202b9130d1603ba14586af4eaa90182268a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/69bfa402006fa7fabe6eaf1660c9ecacb763a966/comments\", \"author\": {\"login\": \"inouehrs\", \"id\": 6196943, \"node_id\": \"MDQ6VXNlcjYxOTY5NDM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6196943?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/inouehrs\", \"html_url\": \"https://github.com/inouehrs\", \"followers_url\": \"https://api.github.com/users/inouehrs/followers\", \"following_url\": \"https://api.github.com/users/inouehrs/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/inouehrs/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/inouehrs/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/inouehrs/subscriptions\", \"organizations_url\": \"https://api.github.com/users/inouehrs/orgs\", \"repos_url\": \"https://api.github.com/users/inouehrs/repos\", \"events_url\": \"https://api.github.com/users/inouehrs/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/inouehrs/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"inouehrs\", \"id\": 6196943, \"node_id\": \"MDQ6VXNlcjYxOTY5NDM=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6196943?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/inouehrs\", \"html_url\": \"https://github.com/inouehrs\", \"followers_url\": \"https://api.github.com/users/inouehrs/followers\", \"following_url\": \"https://api.github.com/users/inouehrs/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/inouehrs/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/inouehrs/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/inouehrs/subscriptions\", \"organizations_url\": \"https://api.github.com/users/inouehrs/orgs\", \"repos_url\": \"https://api.github.com/users/inouehrs/repos\", \"events_url\": \"https://api.github.com/users/inouehrs/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/inouehrs/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"73d18aa028b367ef68c543f15f10427a4d1cb471\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/73d18aa028b367ef68c543f15f10427a4d1cb471\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/73d18aa028b367ef68c543f15f10427a4d1cb471\"}], \"stats\": {\"total\": 27, \"additions\": 26, \"deletions\": 1}, \"files\": [{\"sha\": \"0b9ee462d1ae7af7283d07e281b60c262a8e39be\", \"filename\": \"llvm/lib/CodeGen/MachineBasicBlock.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/69bfa402006fa7fabe6eaf1660c9ecacb763a966/llvm%2Flib%2FCodeGen%2FMachineBasicBlock.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/69bfa402006fa7fabe6eaf1660c9ecacb763a966/llvm%2Flib%2FCodeGen%2FMachineBasicBlock.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FMachineBasicBlock.cpp?ref=69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"patch\": \"@@ -362,7 +362,7 @@ void MachineBasicBlock::print(raw_ostream &OS, ModuleSlotTracker &MST,\\n       // Print human readable probabilities as comments.\\n       OS << \\\"; \\\";\\n       for (auto I = succ_begin(), E = succ_end(); I != E; ++I) {\\n-        const BranchProbability &BP = *getProbabilityIterator(I);\\n+        const BranchProbability &BP = getSuccProbability(I);\\n         if (I != succ_begin())\\n           OS << \\\", \\\";\\n         OS << printMBBReference(**I) << '('\"}, {\"sha\": \"382e81661818c71a860b8ca20ba2bcd361ca20bd\", \"filename\": \"llvm/test/Other/X86/mbb-dump.ll\", \"status\": \"added\", \"additions\": 25, \"deletions\": 0, \"changes\": 25, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/69bfa402006fa7fabe6eaf1660c9ecacb763a966/llvm%2Ftest%2FOther%2FX86%2Fmbb-dump.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/69bfa402006fa7fabe6eaf1660c9ecacb763a966/llvm%2Ftest%2FOther%2FX86%2Fmbb-dump.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FOther%2FX86%2Fmbb-dump.ll?ref=69bfa402006fa7fabe6eaf1660c9ecacb763a966\", \"patch\": \"@@ -0,0 +1,25 @@\\n+; RUN: llc < %s 2>&1 -print-after=machine-scheduler -mtriple=x86_64-unknown-unknown | FileCheck %s\\n+\\n+; expected MBB dump output\\n+; # *** IR Dump After Machine Instruction Scheduler ***:\\n+; # Machine code for function foo: NoPHIs, TracksLiveness\\n+; \\n+; 0B\\tbb.0 (%ir-block.0):\\n+; \\t  successors: %bb.1(0x80000000); %bb.1(100.00%)\\n+; \\n+; 16B\\tbb.1.next:\\n+; \\t; predecessors: %bb.0\\n+\\n+; previously, it was broken as\\n+; \\t  successors: %bb.1(0x80000000); %bb.1(200.00%)\\n+\\n+define void @foo(){\\n+; CHECK: IR Dump After Machine Instruction Scheduler\\n+; CHECK: bb.0\\n+; CHECK: 100.0\\n+; CHECK: bb.1\\n+  br label %next\\n+\\n+next:\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82Y2NhOGFmMjI3MGJlOGJjNTQ5NGI0NGJiODg1NmFmNTkxZDAzODViIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/6cca8af2270be8bc5494b44bb8856af591d0385b", "content": "{\"sha\": \"6cca8af2270be8bc5494b44bb8856af591d0385b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NmNjYThhZjIyNzBiZThiYzU0OTRiNDRiYjg4NTZhZjU5MWQwMzg1Yg==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2018-10-10T13:39:59Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2018-10-10T13:39:59Z\"}, \"message\": \"[x86] allow single source horizontal op matching (PR39195)\\n\\nThis is intended to restore horizontal codegen to what it looked like before IR demanded elements improved in:\\nrL343727\\n\\nAs noted in PR39195:\\nhttps://bugs.llvm.org/show_bug.cgi?id=39195\\n...horizontal ops can be worse for performance than a shuffle+regular binop, so I've added a TODO. Ideally, we'd \\nsolve that in a machine instruction pass, but a quicker solution will be adding a 'HasFastHorizontalOp' feature\\nbit to deal with it here in the DAG.\\n\\nDifferential Revision: https://reviews.llvm.org/D52997\\n\\nllvm-svn: 344141\", \"tree\": {\"sha\": \"f875071a18f0d27152814e086f606837ff94485f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f875071a18f0d27152814e086f606837ff94485f\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/6cca8af2270be8bc5494b44bb8856af591d0385b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6cca8af2270be8bc5494b44bb8856af591d0385b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6cca8af2270be8bc5494b44bb8856af591d0385b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6cca8af2270be8bc5494b44bb8856af591d0385b/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fc51490baf1d6ad5796d8cb8bb0792de13ce8fce\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fc51490baf1d6ad5796d8cb8bb0792de13ce8fce\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fc51490baf1d6ad5796d8cb8bb0792de13ce8fce\"}], \"stats\": {\"total\": 226, \"additions\": 79, \"deletions\": 147}, \"files\": [{\"sha\": \"67f98d8ee72d1214842e2abeecaec6efe5c58385\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=6cca8af2270be8bc5494b44bb8856af591d0385b\", \"patch\": \"@@ -37026,9 +37026,13 @@ static bool isHorizontalBinOp(SDValue &LHS, SDValue &RHS, bool IsCommutative) {\\n         continue;\\n \\n       // The  low half of the 128-bit result must choose from A.\\n-      // The high half of the 128-bit result must choose from B.\\n+      // The high half of the 128-bit result must choose from B,\\n+      // unless B is undef. In that case, we are always choosing from A.\\n+      // TODO: Using a horizontal op on a single input is likely worse for\\n+      // performance on many CPUs, so this should be limited here or reversed\\n+      // in a later pass.\\n       unsigned NumEltsPer64BitChunk = NumEltsPer128BitChunk / 2;\\n-      unsigned Src = i >= NumEltsPer64BitChunk;\\n+      unsigned Src = B.getNode() ? i >= NumEltsPer64BitChunk : 0;\\n \\n       // Check that successive elements are being operated on. If not, this is\\n       // not a horizontal operation.\"}, {\"sha\": \"20c509732c8d7d1c773010ac6e648bf811f04e29\", \"filename\": \"llvm/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 8, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Favx512-intrinsics-fast-isel.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Favx512-intrinsics-fast-isel.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Favx512-intrinsics-fast-isel.ll?ref=6cca8af2270be8bc5494b44bb8856af591d0385b\", \"patch\": \"@@ -7210,8 +7210,7 @@ define double @test_mm512_reduce_add_pd(<8 x double> %__W) {\\n ; X86-NEXT:    vaddpd %ymm1, %ymm0, %ymm0\\n ; X86-NEXT:    vextractf128 $1, %ymm0, %xmm1\\n ; X86-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n-; X86-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm0[1,0]\\n-; X86-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n+; X86-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; X86-NEXT:    vmovlpd %xmm0, (%esp)\\n ; X86-NEXT:    fldl (%esp)\\n ; X86-NEXT:    movl %ebp, %esp\\n@@ -7226,8 +7225,7 @@ define double @test_mm512_reduce_add_pd(<8 x double> %__W) {\\n ; X64-NEXT:    vaddpd %ymm1, %ymm0, %ymm0\\n ; X64-NEXT:    vextractf128 $1, %ymm0, %xmm1\\n ; X64-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n-; X64-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm0[1,0]\\n-; X64-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n+; X64-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; X64-NEXT:    vzeroupper\\n ; X64-NEXT:    retq\\n entry:\\n@@ -7407,8 +7405,7 @@ define double @test_mm512_mask_reduce_add_pd(i8 zeroext %__M, <8 x double> %__W)\\n ; X86-NEXT:    vaddpd %ymm1, %ymm0, %ymm0\\n ; X86-NEXT:    vextractf128 $1, %ymm0, %xmm1\\n ; X86-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n-; X86-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm0[1,0]\\n-; X86-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n+; X86-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; X86-NEXT:    vmovlpd %xmm0, (%esp)\\n ; X86-NEXT:    fldl (%esp)\\n ; X86-NEXT:    movl %ebp, %esp\\n@@ -7425,8 +7422,7 @@ define double @test_mm512_mask_reduce_add_pd(i8 zeroext %__M, <8 x double> %__W)\\n ; X64-NEXT:    vaddpd %ymm1, %ymm0, %ymm0\\n ; X64-NEXT:    vextractf128 $1, %ymm0, %xmm1\\n ; X64-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n-; X64-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm0[1,0]\\n-; X64-NEXT:    vaddpd %xmm1, %xmm0, %xmm0\\n+; X64-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; X64-NEXT:    vzeroupper\\n ; X64-NEXT:    retq\\n entry:\"}, {\"sha\": \"d7c0936a4741c744d872de13494758d9efbbc57e\", \"filename\": \"llvm/test/CodeGen/X86/haddsub-undef.ll\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 52, \"changes\": 71, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fhaddsub-undef.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fhaddsub-undef.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fhaddsub-undef.ll?ref=6cca8af2270be8bc5494b44bb8856af591d0385b\", \"patch\": \"@@ -453,14 +453,12 @@ define <8 x i32> @test17_undef(<8 x i32> %a, <8 x i32> %b) {\\n define <2 x double> @add_pd_003(<2 x double> %x) {\\n ; SSE-LABEL: add_pd_003:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; SSE-NEXT:    addpd %xmm1, %xmm0\\n+; SSE-NEXT:    haddpd %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_pd_003:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; AVX-NEXT:    vaddpd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <2 x double> %x, <2 x double> undef, <2 x i32> <i32 undef, i32 0>\\n   %add = fadd <2 x double> %l, %x\\n@@ -472,16 +470,12 @@ define <2 x double> @add_pd_003(<2 x double> %x) {\\n define <2 x double> @add_pd_003_2(<2 x double> %x) {\\n ; SSE-LABEL: add_pd_003_2:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movapd %xmm0, %xmm1\\n-; SSE-NEXT:    shufpd {{.*#+}} xmm1 = xmm1[1],xmm0[0]\\n-; SSE-NEXT:    addpd %xmm0, %xmm1\\n-; SSE-NEXT:    movapd %xmm1, %xmm0\\n+; SSE-NEXT:    haddpd %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_pd_003_2:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm0[1,0]\\n-; AVX-NEXT:    vaddpd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <2 x double> %x, <2 x double> undef, <2 x i32> <i32 1, i32 0>\\n   %add = fadd <2 x double> %l, %x\\n@@ -491,16 +485,12 @@ define <2 x double> @add_pd_003_2(<2 x double> %x) {\\n define <2 x double> @add_pd_010(<2 x double> %x) {\\n ; SSE-LABEL: add_pd_010:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; SSE-NEXT:    addpd %xmm0, %xmm1\\n-; SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1,1]\\n-; SSE-NEXT:    movapd %xmm1, %xmm0\\n+; SSE-NEXT:    haddpd %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_pd_010:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; AVX-NEXT:    vaddpd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddpd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpermilpd {{.*#+}} xmm0 = xmm0[1,0]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <2 x double> %x, <2 x double> undef, <2 x i32> <i32 undef, i32 0>\\n@@ -512,17 +502,12 @@ define <2 x double> @add_pd_010(<2 x double> %x) {\\n define <4 x float> @add_ps_007(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_007:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movaps %xmm0, %xmm1\\n-; SSE-NEXT:    shufps {{.*#+}} xmm1 = xmm1[0,1],xmm0[0,2]\\n-; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSE-NEXT:    addps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_007:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>\\n   %r = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>\\n@@ -533,18 +518,13 @@ define <4 x float> @add_ps_007(<4 x float> %x) {\\n define <4 x float> @add_ps_030(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_030:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movaps %xmm0, %xmm1\\n-; SSE-NEXT:    shufps {{.*#+}} xmm1 = xmm1[0,1],xmm0[0,2]\\n-; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSE-NEXT:    addps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n ; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,2,2,3]\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_030:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[3,2,2,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>\\n@@ -557,16 +537,12 @@ define <4 x float> @add_ps_030(<4 x float> %x) {\\n define <4 x float> @add_ps_007_2(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_007_2:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSE-NEXT:    addps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_007_2:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 undef>\\n   %r = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 undef>\\n@@ -577,14 +553,12 @@ define <4 x float> @add_ps_007_2(<4 x float> %x) {\\n define <4 x float> @add_ps_008(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_008:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movsldup {{.*#+}} xmm1 = xmm0[0,0,2,2]\\n-; SSE-NEXT:    addps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_008:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovsldup {{.*#+}} xmm1 = xmm0[0,0,2,2]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 undef, i32 2>\\n   %add = fadd <4 x float> %l, %x\\n@@ -594,16 +568,13 @@ define <4 x float> @add_ps_008(<4 x float> %x) {\\n define <4 x float> @add_ps_017(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_017:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movsldup {{.*#+}} xmm1 = xmm0[0,0,2,2]\\n-; SSE-NEXT:    addps %xmm0, %xmm1\\n-; SSE-NEXT:    shufps {{.*#+}} xmm1 = xmm1[3,1,2,3]\\n-; SSE-NEXT:    movaps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n+; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,1,2,3]\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_017:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovsldup {{.*#+}} xmm1 = xmm0[0,0,2,2]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[3,1,2,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 undef, i32 2>\\n@@ -615,17 +586,13 @@ define <4 x float> @add_ps_017(<4 x float> %x) {\\n define <4 x float> @add_ps_018(<4 x float> %x) {\\n ; SSE-LABEL: add_ps_018:\\n ; SSE:       # %bb.0:\\n-; SSE-NEXT:    movddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSE-NEXT:    addps %xmm1, %xmm0\\n+; SSE-NEXT:    haddps %xmm0, %xmm0\\n ; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2,2,3]\\n ; SSE-NEXT:    retq\\n ;\\n ; AVX-LABEL: add_ps_018:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vmovddup {{.*#+}} xmm1 = xmm0[0,0]\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,2,2,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x float> %x, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 undef>\"}, {\"sha\": \"7b3f8db76c4290bed5eec3848f5369b53144b1d6\", \"filename\": \"llvm/test/CodeGen/X86/phaddsub.ll\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 73, \"changes\": 96, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fphaddsub.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fphaddsub.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fphaddsub.ll?ref=6cca8af2270be8bc5494b44bb8856af591d0385b\", \"patch\": \"@@ -286,16 +286,12 @@ define <4 x i32> @phsubd1_reverse(<4 x i32> %x, <4 x i32> %y) {\\n define <4 x i32> @phaddd_single_source1(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source1:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSSE3-NEXT:    paddd %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source1:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>\\n   %r = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>\\n@@ -306,17 +302,13 @@ define <4 x i32> @phaddd_single_source1(<4 x i32> %x) {\\n define <4 x i32> @phaddd_single_source2(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source2:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSSE3-NEXT:    paddd %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n ; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[3,2,2,3]\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source2:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,0,2]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[3,2,2,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>\\n@@ -329,16 +321,12 @@ define <4 x i32> @phaddd_single_source2(<4 x i32> %x) {\\n define <4 x i32> @phaddd_single_source3(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source3:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSSE3-NEXT:    paddd %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source3:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; AVX-NEXT:    vpmovzxdq {{.*#+}} xmm0 = xmm0[0],zero,xmm0[1],zero\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 undef>\\n   %r = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 undef>\\n@@ -349,14 +337,12 @@ define <4 x i32> @phaddd_single_source3(<4 x i32> %x) {\\n define <4 x i32> @phaddd_single_source4(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source4:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,2,2]\\n-; SSSE3-NEXT:    paddd %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source4:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,2,2]\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 undef, i32 2>\\n   %add = add <4 x i32> %l, %x\\n@@ -366,15 +352,13 @@ define <4 x i32> @phaddd_single_source4(<4 x i32> %x) {\\n define <4 x i32> @phaddd_single_source5(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source5:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,2,2]\\n-; SSSE3-NEXT:    paddd %xmm0, %xmm1\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[3,1,2,3]\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n+; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[3,1,2,3]\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source5:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,2,2]\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[3,1,2,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 undef, i32 2>\\n@@ -386,17 +370,13 @@ define <4 x i32> @phaddd_single_source5(<4 x i32> %x) {\\n define <4 x i32> @phaddd_single_source6(<4 x i32> %x) {\\n ; SSSE3-LABEL: phaddd_single_source6:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,1,3]\\n-; SSSE3-NEXT:    paddd %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddd %xmm0, %xmm0\\n ; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,2,3,3]\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddd_single_source6:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; AVX-NEXT:    vpmovzxdq {{.*#+}} xmm0 = xmm0[0],zero,xmm0[1],zero\\n-; AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddd %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[2,2,3,3]\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <4 x i32> %x, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 undef>\\n@@ -409,17 +389,12 @@ define <4 x i32> @phaddd_single_source6(<4 x i32> %x) {\\n define <8 x i16> @phaddw_single_source1(<8 x i16> %x) {\\n ; SSSE3-LABEL: phaddw_single_source1:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    movdqa %xmm0, %xmm1\\n-; SSSE3-NEXT:    pshufb {{.*#+}} xmm1 = xmm1[0,1,4,5,4,5,6,7,0,1,4,5,8,9,12,13]\\n-; SSSE3-NEXT:    pshufb {{.*#+}} xmm0 = xmm0[6,7,2,3,4,5,6,7,2,3,6,7,10,11,14,15]\\n-; SSSE3-NEXT:    paddw %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddw %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddw_single_source1:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufb {{.*#+}} xmm1 = xmm0[0,1,4,5,4,5,6,7,0,1,4,5,8,9,12,13]\\n-; AVX-NEXT:    vpshufb {{.*#+}} xmm0 = xmm0[6,7,2,3,4,5,6,7,2,3,6,7,10,11,14,15]\\n-; AVX-NEXT:    vpaddw %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddw %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 2, i32 4, i32 6>\\n   %r = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 1, i32 3, i32 5, i32 7>\\n@@ -430,22 +405,14 @@ define <8 x i16> @phaddw_single_source1(<8 x i16> %x) {\\n define <8 x i16> @phaddw_single_source2(<8 x i16> %x) {\\n ; SSSE3-LABEL: phaddw_single_source2:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshuflw {{.*#+}} xmm1 = xmm0[0,2,2,3,4,5,6,7]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,1,0,3]\\n-; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[1,3,2,3,4,5,6,7]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,0,3]\\n-; SSSE3-NEXT:    paddw %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddw %xmm0, %xmm0\\n ; SSSE3-NEXT:    pshufhw {{.*#+}} xmm0 = xmm0[0,1,2,3,5,4,6,7]\\n ; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,1,2,3]\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddw_single_source2:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshuflw {{.*#+}} xmm1 = xmm0[0,2,2,3,4,5,6,7]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm1[0,1,0,3]\\n-; AVX-NEXT:    vpshuflw {{.*#+}} xmm0 = xmm0[1,3,2,3,4,5,6,7]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[0,1,0,3]\\n-; AVX-NEXT:    vpaddw %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddw %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpshufhw {{.*#+}} xmm0 = xmm0[0,1,2,3,5,4,6,7]\\n ; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[2,1,2,3]\\n ; AVX-NEXT:    retq\\n@@ -459,20 +426,12 @@ define <8 x i16> @phaddw_single_source2(<8 x i16> %x) {\\n define <8 x i16> @phaddw_single_source3(<8 x i16> %x) {\\n ; SSSE3-LABEL: phaddw_single_source3:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshuflw {{.*#+}} xmm1 = xmm0[0,2,2,3,4,5,6,7]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,1,0,3]\\n-; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[1,3,2,3,4,5,6,7]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,0,3]\\n-; SSSE3-NEXT:    paddw %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddw %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddw_single_source3:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshuflw {{.*#+}} xmm1 = xmm0[0,2,2,3,4,5,6,7]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm1[0,1,0,3]\\n-; AVX-NEXT:    vpshuflw {{.*#+}} xmm0 = xmm0[1,3,2,3,4,5,6,7]\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[0,1,0,3]\\n-; AVX-NEXT:    vpaddw %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddw %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 2, i32 undef, i32 undef>\\n   %r = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 1, i32 3, i32 undef, i32 undef>\\n@@ -483,16 +442,12 @@ define <8 x i16> @phaddw_single_source3(<8 x i16> %x) {\\n define <8 x i16> @phaddw_single_source4(<8 x i16> %x) {\\n ; SSSE3-LABEL: phaddw_single_source4:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    movdqa %xmm0, %xmm1\\n-; SSSE3-NEXT:    pslld $16, %xmm1\\n-; SSSE3-NEXT:    paddw %xmm0, %xmm1\\n-; SSSE3-NEXT:    movdqa %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddw %xmm0, %xmm0\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddw_single_source4:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpslld $16, %xmm0, %xmm1\\n-; AVX-NEXT:    vpaddw %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddw %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 6>\\n   %add = add <8 x i16> %l, %x\\n@@ -502,18 +457,13 @@ define <8 x i16> @phaddw_single_source4(<8 x i16> %x) {\\n define <8 x i16> @phaddw_single_source6(<8 x i16> %x) {\\n ; SSSE3-LABEL: phaddw_single_source6:\\n ; SSSE3:       # %bb.0:\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,1,0,3]\\n-; SSSE3-NEXT:    pshufhw {{.*#+}} xmm0 = xmm0[0,1,2,3,5,5,6,7]\\n-; SSSE3-NEXT:    paddw %xmm1, %xmm0\\n+; SSSE3-NEXT:    phaddw %xmm0, %xmm0\\n ; SSSE3-NEXT:    psrldq {{.*#+}} xmm0 = xmm0[6,7,8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero\\n ; SSSE3-NEXT:    retq\\n ;\\n ; AVX-LABEL: phaddw_single_source6:\\n ; AVX:       # %bb.0:\\n-; AVX-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[0,1,0,1]\\n-; AVX-NEXT:    vpmovzxwq {{.*#+}} xmm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero\\n-; AVX-NEXT:    vpaddw %xmm0, %xmm1, %xmm0\\n+; AVX-NEXT:    vphaddw %xmm0, %xmm0, %xmm0\\n ; AVX-NEXT:    vpsrldq {{.*#+}} xmm0 = xmm0[6,7,8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero\\n ; AVX-NEXT:    retq\\n   %l = shufflevector <8 x i16> %x, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 undef, i32 undef, i32 undef>\"}, {\"sha\": \"5c0a223d49645c91ba20327005ba8cea3104866c\", \"filename\": \"llvm/test/CodeGen/X86/vector-shuffle-combining.ll\", \"status\": \"modified\", \"additions\": 27, \"deletions\": 12, \"changes\": 39, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6cca8af2270be8bc5494b44bb8856af591d0385b/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-shuffle-combining.ll?ref=6cca8af2270be8bc5494b44bb8856af591d0385b\", \"patch\": \"@@ -2700,21 +2700,36 @@ define <4 x i32> @combine_constant_insertion_v4i32(i32 %f) {\\n }\\n \\n define <4 x float> @PR22377(<4 x float> %a, <4 x float> %b) {\\n-; SSE-LABEL: PR22377:\\n-; SSE:       # %bb.0: # %entry\\n-; SSE-NEXT:    movaps %xmm0, %xmm1\\n-; SSE-NEXT:    shufps {{.*#+}} xmm1 = xmm1[1,3],xmm0[1,3]\\n-; SSE-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2,0,2]\\n-; SSE-NEXT:    addps %xmm0, %xmm1\\n-; SSE-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]\\n-; SSE-NEXT:    retq\\n+; SSE2-LABEL: PR22377:\\n+; SSE2:       # %bb.0: # %entry\\n+; SSE2-NEXT:    movaps %xmm0, %xmm1\\n+; SSE2-NEXT:    shufps {{.*#+}} xmm1 = xmm1[1,3],xmm0[1,3]\\n+; SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2,0,2]\\n+; SSE2-NEXT:    addps %xmm0, %xmm1\\n+; SSE2-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]\\n+; SSE2-NEXT:    retq\\n+;\\n+; SSSE3-LABEL: PR22377:\\n+; SSSE3:       # %bb.0: # %entry\\n+; SSSE3-NEXT:    movaps %xmm0, %xmm1\\n+; SSSE3-NEXT:    haddps %xmm0, %xmm1\\n+; SSSE3-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,1]\\n+; SSSE3-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2,1,3]\\n+; SSSE3-NEXT:    retq\\n+;\\n+; SSE41-LABEL: PR22377:\\n+; SSE41:       # %bb.0: # %entry\\n+; SSE41-NEXT:    movaps %xmm0, %xmm1\\n+; SSE41-NEXT:    haddps %xmm0, %xmm1\\n+; SSE41-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,1]\\n+; SSE41-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2,1,3]\\n+; SSE41-NEXT:    retq\\n ;\\n ; AVX-LABEL: PR22377:\\n ; AVX:       # %bb.0: # %entry\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[1,3,1,3]\\n-; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,2,0,2]\\n-; AVX-NEXT:    vaddps %xmm0, %xmm1, %xmm1\\n-; AVX-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]\\n+; AVX-NEXT:    vhaddps %xmm0, %xmm0, %xmm1\\n+; AVX-NEXT:    vshufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,1]\\n+; AVX-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[0,2,1,3]\\n ; AVX-NEXT:    retq\\n entry:\\n   %s1 = shufflevector <4 x float> %a, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 1, i32 3>\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82OTM0MjAyZGMwNGZmYTVmZjMzNmExY2NhOWFjZThkYWU0NGMyOWQ0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/6934202dc04ffa5ff336a1cca9ace8dae44c29d4", "content": "{\"sha\": \"6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NjkzNDIwMmRjMDRmZmE1ZmYzMzZhMWNjYTlhY2U4ZGFlNDRjMjlkNA==\", \"commit\": {\"author\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2018-12-05T03:41:26Z\"}, \"committer\": {\"name\": \"Craig Topper\", \"email\": \"craig.topper@intel.com\", \"date\": \"2018-12-05T03:41:26Z\"}, \"message\": \"[MachineLICM][X86][AMDGPU] Fix subtle bug in the updating of PhysRegClobbers in post-RA LICM\\n\\nIt looks like MCRegAliasIterator can visit the same physical register twice. When this happens in this code in LICM we end up setting the PhysRegDef and then later in the same loop visit the register again. Now we see that PhysRegDef is set from the earlier iteration so now set PhysRegClobber.\\n\\nThis patch splits the loop so we have one that uses the previous value of PhysRegDef to update PhysRegClobber and second loop that updates PhysRegDef.\\n\\nThe X86 atomic test is an improvement. I had to add sideeffect to the two shrink wrapping tests to prevent hoisting from occurring. I'm not sure about the AMDGPU tests. It looks like the branch instruction changed at end the of the loops. And in the branch-relaxation test I think there is now \\\"and vcc, exec, -1\\\" instruction that wasn't there before.\\n\\nDifferential Revision: https://reviews.llvm.org/D55102\\n\\nllvm-svn: 348330\", \"tree\": {\"sha\": \"eb27ba728f0db9dc2aa6f69e0af4331cb783083a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/eb27ba728f0db9dc2aa6f69e0af4331cb783083a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/comments\", \"author\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"topperc\", \"id\": 22566570, \"node_id\": \"MDQ6VXNlcjIyNTY2NTcw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22566570?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/topperc\", \"html_url\": \"https://github.com/topperc\", \"followers_url\": \"https://api.github.com/users/topperc/followers\", \"following_url\": \"https://api.github.com/users/topperc/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/topperc/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/topperc/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/topperc/subscriptions\", \"organizations_url\": \"https://api.github.com/users/topperc/orgs\", \"repos_url\": \"https://api.github.com/users/topperc/repos\", \"events_url\": \"https://api.github.com/users/topperc/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/topperc/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"b9601a385afe20ffacf23a15baf6be5aeb549684\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b9601a385afe20ffacf23a15baf6be5aeb549684\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b9601a385afe20ffacf23a15baf6be5aeb549684\"}], \"stats\": {\"total\": 34, \"additions\": 19, \"deletions\": 15}, \"files\": [{\"sha\": \"58fd1f23842060aebc302c18bc22af7c923b3176\", \"filename\": \"llvm/lib/CodeGen/MachineLICM.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Flib%2FCodeGen%2FMachineLICM.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Flib%2FCodeGen%2FMachineLICM.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FMachineLICM.cpp?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -463,8 +463,12 @@ void MachineLICMBase::ProcessMI(MachineInstr *MI,\\n     for (MCRegAliasIterator AS(Reg, TRI, true); AS.isValid(); ++AS) {\\n       if (PhysRegDefs.test(*AS))\\n         PhysRegClobbers.set(*AS);\\n-      PhysRegDefs.set(*AS);\\n     }\\n+    // Need a second loop because MCRegAliasIterator can visit the same\\n+    // register twice.\\n+    for (MCRegAliasIterator AS(Reg, TRI, true); AS.isValid(); ++AS)\\n+      PhysRegDefs.set(*AS);\\n+\\n     if (PhysRegClobbers.test(Reg))\\n       // MI defined register is seen defined by another instruction in\\n       // the loop, it cannot be a LICM candidate.\"}, {\"sha\": \"45ed056567c2e2463d329694a9a8418e82ab089b\", \"filename\": \"llvm/test/CodeGen/AMDGPU/branch-relaxation.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fbranch-relaxation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fbranch-relaxation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fbranch-relaxation.ll?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -444,7 +444,7 @@ endif:\\n ; GCN-NEXT: s_xor_b64 exec, exec, [[TEMP_MASK1]]\\n ; GCN-NEXT: ; mask branch [[RET:BB[0-9]+_[0-9]+]]\\n \\n-; GCN: [[LOOP_BODY:BB[0-9]+_[0-9]+]]: ; %loop\\n+; GCN: [[LOOP_BODY:BB[0-9]+_[0-9]+]]: ; %loop{{$}}\\n ; GCN: ;;#ASMSTART\\n ; GCN: v_nop_e64\\n ; GCN: v_nop_e64\\n@@ -453,7 +453,7 @@ endif:\\n ; GCN: v_nop_e64\\n ; GCN: v_nop_e64\\n ; GCN: ;;#ASMEND\\n-; GCN: s_cbranch_execz [[RET]]\\n+; GCN: s_cbranch_vccz [[RET]]\\n \\n ; GCN-NEXT: [[LONGBB:BB[0-9]+_[0-9]+]]: ; %loop\\n ; GCN-NEXT: ; in Loop: Header=[[LOOP_BODY]] Depth=1\"}, {\"sha\": \"75ad58df43b347a52932d403868246fb90ca997a\", \"filename\": \"llvm/test/CodeGen/AMDGPU/infinite-loop.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Finfinite-loop.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Finfinite-loop.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Finfinite-loop.ll?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -32,11 +32,11 @@ loop:\\n ; SI: s_cbranch_execz [[RET:BB[0-9]+_[0-9]+]]\\n \\n ; SI: v_mov_b32_e32 [[REG:v[0-9]+]], 0x3e7\\n-; SI: [[LOOP:BB[0-9]+_[0-9]+]]:  ; %loop\\n ; SI: s_and_b64 vcc, exec, -1\\n+; SI: [[LOOP:BB[0-9]+_[0-9]+]]:  ; %loop\\n ; SI: s_waitcnt lgkmcnt(0)\\n ; SI: buffer_store_dword [[REG]]\\n-; SI: s_cbranch_execnz [[LOOP]]\\n+; SI: s_cbranch_vccnz [[LOOP]]\\n \\n ; SI: [[RET]]:  ; %UnifiedReturnBlock\\n ; SI: s_endpgm\"}, {\"sha\": \"353580bbf7e4b156a61bf104e0968a27a721f2fe\", \"filename\": \"llvm/test/CodeGen/X86/atomic_mi.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic_mi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic_mi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic_mi.ll?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -93,11 +93,11 @@ define void @store_atomic_imm_64(i64* %p) {\\n ; X32-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n ; X32-NEXT:    movl (%esi), %eax\\n ; X32-NEXT:    movl 4(%esi), %edx\\n+; X32-NEXT:    xorl %ecx, %ecx\\n+; X32-NEXT:    movl $42, %ebx\\n ; X32-NEXT:    .p2align 4, 0x90\\n ; X32-NEXT:  .LBB3_1: # %atomicrmw.start\\n ; X32-NEXT:    # =>This Inner Loop Header: Depth=1\\n-; X32-NEXT:    xorl %ecx, %ecx\\n-; X32-NEXT:    movl $42, %ebx\\n ; X32-NEXT:    lock cmpxchg8b (%esi)\\n ; X32-NEXT:    jne .LBB3_1\\n ; X32-NEXT:  # %bb.2: # %atomicrmw.end\\n@@ -132,11 +132,11 @@ define void @store_atomic_imm_64_big(i64* %p) {\\n ; X32-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n ; X32-NEXT:    movl (%esi), %eax\\n ; X32-NEXT:    movl 4(%esi), %edx\\n+; X32-NEXT:    movl $23, %ecx\\n+; X32-NEXT:    movl $1215752192, %ebx # imm = 0x4876E800\\n ; X32-NEXT:    .p2align 4, 0x90\\n ; X32-NEXT:  .LBB4_1: # %atomicrmw.start\\n ; X32-NEXT:    # =>This Inner Loop Header: Depth=1\\n-; X32-NEXT:    movl $23, %ecx\\n-; X32-NEXT:    movl $1215752192, %ebx # imm = 0x4876E800\\n ; X32-NEXT:    lock cmpxchg8b (%esi)\\n ; X32-NEXT:    jne .LBB4_1\\n ; X32-NEXT:  # %bb.2: # %atomicrmw.end\\n@@ -753,10 +753,10 @@ define void @and_64i(i64* %p) {\\n ; X32-NEXT:    andl $2, %ebx\\n ; X32-NEXT:    movl (%esi), %eax\\n ; X32-NEXT:    movl 4(%esi), %edx\\n+; X32-NEXT:    xorl %ecx, %ecx\\n ; X32-NEXT:    .p2align 4, 0x90\\n ; X32-NEXT:  .LBB31_1: # %atomicrmw.start\\n ; X32-NEXT:    # =>This Inner Loop Header: Depth=1\\n-; X32-NEXT:    xorl %ecx, %ecx\\n ; X32-NEXT:    lock cmpxchg8b (%esi)\\n ; X32-NEXT:    jne .LBB31_1\\n ; X32-NEXT:  # %bb.2: # %atomicrmw.end\"}, {\"sha\": \"3d65eed6ebba0895312b28d1be2a3de925e4aa17\", \"filename\": \"llvm/test/CodeGen/X86/x86-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -126,7 +126,7 @@ for.preheader:\\n for.body:                                         ; preds = %entry, %for.body\\n   %i.05 = phi i32 [ %inc, %for.body ], [ 0, %for.preheader ]\\n   %sum.04 = phi i32 [ %add, %for.body ], [ 0, %for.preheader ]\\n-  %call = tail call i32 asm \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n+  %call = tail call i32 asm sideeffect \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n   %add = add nsw i32 %call, %sum.04\\n   %inc = add nuw nsw i32 %i.05, 1\\n   %exitcond = icmp eq i32 %inc, 10\\n@@ -178,7 +178,7 @@ for.preheader:\\n for.body:                                         ; preds = %for.body, %entry\\n   %i.04 = phi i32 [ 0, %for.preheader ], [ %inc, %for.body ]\\n   %sum.03 = phi i32 [ 0, %for.preheader ], [ %add, %for.body ]\\n-  %call = tail call i32 asm \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n+  %call = tail call i32 asm sideeffect \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n   %add = add nsw i32 %call, %sum.03\\n   %inc = add nuw nsw i32 %i.04, 1\\n   %exitcond = icmp eq i32 %inc, 10\\n@@ -248,7 +248,7 @@ for.preheader:\\n for.body:                                         ; preds = %entry, %for.body\\n   %i.05 = phi i32 [ %inc, %for.body ], [ 0, %for.preheader ]\\n   %sum.04 = phi i32 [ %add, %for.body ], [ 0, %for.preheader ]\\n-  %call = tail call i32 asm \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n+  %call = tail call i32 asm sideeffect \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n   %add = add nsw i32 %call, %sum.04\\n   %inc = add nuw nsw i32 %i.05, 1\\n   %exitcond = icmp eq i32 %inc, 10\\n@@ -324,7 +324,7 @@ if.then:                                          ; preds = %entry\\n for.body:                                         ; preds = %for.body, %if.then\\n   %i.05 = phi i32 [ 0, %if.then ], [ %inc, %for.body ]\\n   %sum.04 = phi i32 [ 0, %if.then ], [ %add, %for.body ]\\n-  %call = tail call i32 asm \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n+  %call = tail call i32 asm sideeffect \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n   %add = add nsw i32 %call, %sum.04\\n   %inc = add nuw nsw i32 %i.05, 1\\n   %exitcond = icmp eq i32 %inc, 10\"}, {\"sha\": \"9142267d157c417229640464ebd6d244cc7c1757\", \"filename\": \"llvm/test/CodeGen/X86/x86-win64-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-win64-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6934202dc04ffa5ff336a1cca9ace8dae44c29d4/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-win64-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-win64-shrink-wrapping.ll?ref=6934202dc04ffa5ff336a1cca9ace8dae44c29d4\", \"patch\": \"@@ -100,7 +100,7 @@ for.preheader:                                    ; preds = %entry\\n for.body:                                         ; preds = %for.body, %for.preheader\\n   %i.05 = phi i32 [ %inc, %for.body ], [ 0, %for.preheader ]\\n   %sum.04 = phi i32 [ %add, %for.body ], [ 0, %for.preheader ]\\n-  %call = tail call i32 asm \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n+  %call = tail call i32 asm sideeffect \\\"movl $$1, $0\\\", \\\"=r,~{ebx}\\\"()\\n   %add = add nsw i32 %call, %sum.04\\n   %inc = add nuw nsw i32 %i.05, 1\\n   %exitcond = icmp eq i32 %inc, 10\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lNzk0Nzc4OTVlMWFmNDQyNWFlY2FkZWQyODgxZTNiM2M4NzhmYWY1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e79477895e1af4425aecaded2881e3b3c878faf5", "content": "{\"sha\": \"e79477895e1af4425aecaded2881e3b3c878faf5\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTc5NDc3ODk1ZTFhZjQ0MjVhZWNhZGVkMjg4MWUzYjNjODc4ZmFmNQ==\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2018-12-10T10:16:50Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2018-12-10T10:16:50Z\"}, \"message\": \"[X86] Fix AvoidStoreForwardingBlocks pass for negative displacements\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=39926.\\n\\nThe size of the first copy was computed as\\nstd::abs(std::abs(LdDisp2) - std::abs(LdDisp1)), which results in\\nskipped bytes if the signs of LdDisp2 and LdDisp1 differ. As far as\\nI can see, this should just be LdDisp2 - LdDisp1. The case where\\nLdDisp1 > LdDisp2 is already handled in the code above, in which case\\nLdDisp2 is set to LdDisp1 and this subtraction will evaluate to\\nSize1 = 0, which is the correct value to skip an overlapping copy.\\n\\nDifferential Revision: https://reviews.llvm.org/D55485\\n\\nllvm-svn: 348750\", \"tree\": {\"sha\": \"6503d83459b9f20bd928808f12220b80137cc2ae\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/6503d83459b9f20bd928808f12220b80137cc2ae\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e79477895e1af4425aecaded2881e3b3c878faf5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e79477895e1af4425aecaded2881e3b3c878faf5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e79477895e1af4425aecaded2881e3b3c878faf5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e79477895e1af4425aecaded2881e3b3c878faf5/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1f958ed2693e889b6a02c7381578d2d202a1a409\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/1f958ed2693e889b6a02c7381578d2d202a1a409\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/1f958ed2693e889b6a02c7381578d2d202a1a409\"}], \"stats\": {\"total\": 8, \"additions\": 4, \"deletions\": 4}, \"files\": [{\"sha\": \"2850baf7a65e7a898190f1d5d7943e4085fd43cc\", \"filename\": \"llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e79477895e1af4425aecaded2881e3b3c878faf5/llvm%2Flib%2FTarget%2FX86%2FX86AvoidStoreForwardingBlocks.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e79477895e1af4425aecaded2881e3b3c878faf5/llvm%2Flib%2FTarget%2FX86%2FX86AvoidStoreForwardingBlocks.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86AvoidStoreForwardingBlocks.cpp?ref=e79477895e1af4425aecaded2881e3b3c878faf5\", \"patch\": \"@@ -586,7 +586,7 @@ void X86AvoidSFBPass::breakBlockedCopies(\\n       StDisp2 += OverlapDelta;\\n       Size2 -= OverlapDelta;\\n     }\\n-    Size1 = std::abs(std::abs(LdDisp2) - std::abs(LdDisp1));\\n+    Size1 = LdDisp2 - LdDisp1;\\n \\n     // Build a copy for the point until the current blocking store's\\n     // displacement.\"}, {\"sha\": \"c22e4f2f9a8b400af1597ec9c626812d202f4f5d\", \"filename\": \"llvm/test/CodeGen/X86/pr39926.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e79477895e1af4425aecaded2881e3b3c878faf5/llvm%2Ftest%2FCodeGen%2FX86%2Fpr39926.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e79477895e1af4425aecaded2881e3b3c878faf5/llvm%2Ftest%2FCodeGen%2FX86%2Fpr39926.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fpr39926.ll?ref=e79477895e1af4425aecaded2881e3b3c878faf5\", \"patch\": \"@@ -8,9 +8,9 @@ define i8 @test_offset(i8* %base) {\\n ; CHECK-NEXT:    movb $0, 7(%rdi)\\n ; CHECK-NEXT:    movw $0, 5(%rdi)\\n ; CHECK-NEXT:    movl $0, 1(%rdi)\\n-; CHECK-NEXT:    movzwl -4(%rdi), %eax\\n-; CHECK-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)\\n-; CHECK-NEXT:    movb -2(%rdi), %al\\n+; CHECK-NEXT:    movl -4(%rdi), %eax\\n+; CHECK-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)\\n+; CHECK-NEXT:    movb (%rdi), %al\\n ; CHECK-NEXT:    movb %al, -{{[0-9]+}}(%rsp)\\n ; CHECK-NEXT:    movl 1(%rdi), %eax\\n ; CHECK-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8zNmUwM2FjNmVlOTEzNjYyMjVmNDQ2ZGI2NDM3ZjE4NGRlMjU4YmU2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/36e03ac6ee91366225f446db6437f184de258be6", "content": "{\"sha\": \"36e03ac6ee91366225f446db6437f184de258be6\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MzZlMDNhYzZlZTkxMzY2MjI1ZjQ0NmRiNjQzN2YxODRkZTI1OGJlNg==\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2018-12-12T23:19:03Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2018-12-12T23:19:03Z\"}, \"message\": \"[InstCombine] Fix negative GEP offset evaluation for 32-bit pointers\\n\\nThis fixes https://bugs.llvm.org/show_bug.cgi?id=39908.\\n\\nThe evaluateGEPOffsetExpression() function simplifies GEP offsets for\\nuse in comparisons against zero, basically by converting X*Scale+Offset==0\\nto X+Offset/Scale==0 if Scale divides Offset. However, before this is done,\\nOffset is masked down to the pointer size. This results in incorrect\\nresults for negative Offsets, because we basically end up dividing the\\n32-bit offset *zero* extended to 64-bit bits (rather than sign extended).\\n\\nFix this by explicitly sign extending the truncated value.\\n\\nDifferential Revision: https://reviews.llvm.org/D55449\\n\\nllvm-svn: 348987\", \"tree\": {\"sha\": \"a11100974c6cfbedcc61bef71cfccc3bffa9ab1c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a11100974c6cfbedcc61bef71cfccc3bffa9ab1c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/36e03ac6ee91366225f446db6437f184de258be6\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/36e03ac6ee91366225f446db6437f184de258be6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/36e03ac6ee91366225f446db6437f184de258be6\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/36e03ac6ee91366225f446db6437f184de258be6/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"102008589836db7d5f95fe5efb5dae31754cbb8c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/102008589836db7d5f95fe5efb5dae31754cbb8c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/102008589836db7d5f95fe5efb5dae31754cbb8c\"}], \"stats\": {\"total\": 57, \"additions\": 52, \"deletions\": 5}, \"files\": [{\"sha\": \"38539936a24d8fed7dd6c8d5a4c3642a4cf84b42\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 5, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/36e03ac6ee91366225f446db6437f184de258be6/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/36e03ac6ee91366225f446db6437f184de258be6/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp?ref=36e03ac6ee91366225f446db6437f184de258be6\", \"patch\": \"@@ -522,11 +522,9 @@ static Value *evaluateGEPOffsetExpression(User *GEP, InstCombiner &IC,\\n   }\\n \\n   // Otherwise, there is an index.  The computation we will do will be modulo\\n-  // the pointer size, so get it.\\n-  uint64_t PtrSizeMask = ~0ULL >> (64-IntPtrWidth);\\n-\\n-  Offset &= PtrSizeMask;\\n-  VariableScale &= PtrSizeMask;\\n+  // the pointer size.\\n+  Offset = SignExtend64(Offset, IntPtrWidth);\\n+  VariableScale = SignExtend64(VariableScale, IntPtrWidth);\\n \\n   // To do this transformation, any constant index must be a multiple of the\\n   // variable scale factor.  For example, we can evaluate \\\"12 + 4*i\\\" as \\\"3 + i\\\",\"}, {\"sha\": \"bd7a82990ad8f988e54840c6177a86edcb722a38\", \"filename\": \"llvm/test/Transforms/InstCombine/pr39908.ll\", \"status\": \"added\", \"additions\": 49, \"deletions\": 0, \"changes\": 49, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/36e03ac6ee91366225f446db6437f184de258be6/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr39908.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/36e03ac6ee91366225f446db6437f184de258be6/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr39908.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr39908.ll?ref=36e03ac6ee91366225f446db6437f184de258be6\", \"patch\": \"@@ -0,0 +1,49 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt < %s -instcombine -S | FileCheck %s\\n+\\n+target datalayout = \\\"p:32:32\\\"\\n+\\n+%S = type { [2 x i32] }\\n+\\n+define i1 @test([0 x %S]* %p, i32 %n) {\\n+; CHECK-LABEL: @test(\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[N:%.*]], 1\\n+; CHECK-NEXT:    ret i1 [[CMP]]\\n+;\\n+  %start.cast = bitcast [0 x %S]* %p to %S*\\n+  %end = getelementptr inbounds [0 x %S], [0 x %S]* %p, i32 0, i32 %n, i32 0, i32 0\\n+  %end.cast = bitcast i32* %end to %S*\\n+  %last = getelementptr inbounds %S, %S* %end.cast, i32 -1\\n+  %cmp = icmp eq %S* %last, %start.cast\\n+  ret i1 %cmp\\n+}\\n+\\n+; Same test using 64-bit indices.\\n+define i1 @test64([0 x %S]* %p, i64 %n) {\\n+; CHECK-LABEL: @test64(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[N:%.*]] to i32\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP1]], 1\\n+; CHECK-NEXT:    ret i1 [[CMP]]\\n+;\\n+  %start.cast = bitcast [0 x %S]* %p to %S*\\n+  %end = getelementptr inbounds [0 x %S], [0 x %S]* %p, i64 0, i64 %n, i32 0, i64 0\\n+  %end.cast = bitcast i32* %end to %S*\\n+  %last = getelementptr inbounds %S, %S* %end.cast, i64 -1\\n+  %cmp = icmp eq %S* %last, %start.cast\\n+  ret i1 %cmp\\n+}\\n+\\n+; Here the offset overflows and is treated modulo 2^32. This is UB.\\n+define i1 @test64_overflow([0 x %S]* %p, i64 %n) {\\n+; CHECK-LABEL: @test64_overflow(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[N:%.*]] to i32\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP1]], 1\\n+; CHECK-NEXT:    ret i1 [[CMP]]\\n+;\\n+  %start.cast = bitcast [0 x %S]* %p to %S*\\n+  %end = getelementptr inbounds [0 x %S], [0 x %S]* %p, i64 0, i64 %n, i32 0, i64 8589934592\\n+  %end.cast = bitcast i32* %end to %S*\\n+  %last = getelementptr inbounds %S, %S* %end.cast, i64 -1\\n+  %cmp = icmp eq %S* %last, %start.cast\\n+  ret i1 %cmp\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lZjdiNTk0OWU1YzM1ZmRlZWZiNjliOGY5YThlZWY5Y2ZhMDEyZWQwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0", "content": "{\"sha\": \"ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWY3YjU5NDllNWMzNWZkZWVmYjY5YjhmOWE4ZWVmOWNmYTAxMmVkMA==\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2018-12-15T19:43:44Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2018-12-15T19:43:44Z\"}, \"message\": \"[X86] Lower to SHLD/SHRD on slow machines for optsize\\n\\nUse consistent rules for when to lower to SHLD/SHRD for slow machines - fixes a weird issue where funnel shift gets expanded but then X86ISelLowering's combineOr sees the optsize and combines to SHLD/SHRD, but now with the modulo amount guard......\\n\\nllvm-svn: 349285\", \"tree\": {\"sha\": \"dfb999193efcf682c3307347f2d3b831a9f49587\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/dfb999193efcf682c3307347f2d3b831a9f49587\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"53c8b1b6f742eeac78995f1257146f504b64314a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/53c8b1b6f742eeac78995f1257146f504b64314a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/53c8b1b6f742eeac78995f1257146f504b64314a\"}], \"stats\": {\"total\": 112, \"additions\": 31, \"deletions\": 81}, \"files\": [{\"sha\": \"72d1fb00fc9c64de5a4feec35e19848279fce908\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"patch\": \"@@ -17047,9 +17047,9 @@ static SDValue LowerFunnelShift(SDValue Op, const X86Subtarget &Subtarget,\\n   SDValue Op1 = Op.getOperand(1);\\n   SDValue Amt = Op.getOperand(2);\\n \\n-  // Expand slow SHLD/SHRD cases.\\n-  // TODO - can we be more selective here: OptSize/RMW etc.?\\n-  if (Subtarget.isSHLDSlow())\\n+  // Expand slow SHLD/SHRD cases if we are not optimizing for size.\\n+  bool OptForSize = DAG.getMachineFunction().getFunction().optForSize();\\n+  if (!OptForSize && Subtarget.isSHLDSlow())\\n     return SDValue();\\n \\n   bool IsFSHR = Op.getOpcode() == ISD::FSHR;\"}, {\"sha\": \"ccf451e045147eaf38b70e9f070f90cf7232116c\", \"filename\": \"llvm/test/CodeGen/X86/fshl.ll\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 39, \"changes\": 53, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Ftest%2FCodeGen%2FX86%2Ffshl.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Ftest%2FCodeGen%2FX86%2Ffshl.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffshl.ll?ref=ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"patch\": \"@@ -179,46 +179,21 @@ define i32 @var_shift_i32(i32 %x, i32 %y, i32 %z) nounwind {\\n }\\n \\n define i32 @var_shift_i32_optsize(i32 %x, i32 %y, i32 %z) nounwind optsize {\\n-; X86-FAST-LABEL: var_shift_i32_optsize:\\n-; X86-FAST:       # %bb.0:\\n-; X86-FAST-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n-; X86-FAST-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n-; X86-FAST-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-FAST-NEXT:    shldl %cl, %edx, %eax\\n-; X86-FAST-NEXT:    retl\\n-;\\n-; X86-SLOW-LABEL: var_shift_i32_optsize:\\n-; X86-SLOW:       # %bb.0:\\n-; X86-SLOW-NEXT:    pushl %esi\\n-; X86-SLOW-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n-; X86-SLOW-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n-; X86-SLOW-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-SLOW-NEXT:    movl %eax, %edx\\n-; X86-SLOW-NEXT:    shldl %cl, %esi, %edx\\n-; X86-SLOW-NEXT:    andb $31, %cl\\n-; X86-SLOW-NEXT:    je .LBB3_2\\n-; X86-SLOW-NEXT:  # %bb.1:\\n-; X86-SLOW-NEXT:    movl %edx, %eax\\n-; X86-SLOW-NEXT:  .LBB3_2:\\n-; X86-SLOW-NEXT:    popl %esi\\n-; X86-SLOW-NEXT:    retl\\n-;\\n-; X64-FAST-LABEL: var_shift_i32_optsize:\\n-; X64-FAST:       # %bb.0:\\n-; X64-FAST-NEXT:    movl %edx, %ecx\\n-; X64-FAST-NEXT:    movl %edi, %eax\\n-; X64-FAST-NEXT:    # kill: def $cl killed $cl killed $ecx\\n-; X64-FAST-NEXT:    shldl %cl, %esi, %eax\\n-; X64-FAST-NEXT:    retq\\n+; X86-LABEL: var_shift_i32_optsize:\\n+; X86:       # %bb.0:\\n+; X86-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-NEXT:    shldl %cl, %edx, %eax\\n+; X86-NEXT:    retl\\n ;\\n-; X64-SLOW-LABEL: var_shift_i32_optsize:\\n-; X64-SLOW:       # %bb.0:\\n-; X64-SLOW-NEXT:    movl %edx, %ecx\\n-; X64-SLOW-NEXT:    movl %edi, %eax\\n-; X64-SLOW-NEXT:    shldl %cl, %esi, %eax\\n-; X64-SLOW-NEXT:    andb $31, %cl\\n-; X64-SLOW-NEXT:    cmovel %edi, %eax\\n-; X64-SLOW-NEXT:    retq\\n+; X64-LABEL: var_shift_i32_optsize:\\n+; X64:       # %bb.0:\\n+; X64-NEXT:    movl %edx, %ecx\\n+; X64-NEXT:    movl %edi, %eax\\n+; X64-NEXT:    # kill: def $cl killed $cl killed $ecx\\n+; X64-NEXT:    shldl %cl, %esi, %eax\\n+; X64-NEXT:    retq\\n   %tmp = tail call i32 @llvm.fshl.i32(i32 %x, i32 %y, i32 %z)\\n   ret i32 %tmp\\n }\"}, {\"sha\": \"09d63b665342968f3d84ab5234534e90e612d3f1\", \"filename\": \"llvm/test/CodeGen/X86/fshr.ll\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 39, \"changes\": 53, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Ftest%2FCodeGen%2FX86%2Ffshr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0/llvm%2Ftest%2FCodeGen%2FX86%2Ffshr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffshr.ll?ref=ef7b5949e5c35fdeefb69b8f9a8eef9cfa012ed0\", \"patch\": \"@@ -178,46 +178,21 @@ define i32 @var_shift_i32(i32 %x, i32 %y, i32 %z) nounwind {\\n }\\n \\n define i32 @var_shift_i32_optsize(i32 %x, i32 %y, i32 %z) nounwind optsize {\\n-; X86-FAST-LABEL: var_shift_i32_optsize:\\n-; X86-FAST:       # %bb.0:\\n-; X86-FAST-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n-; X86-FAST-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n-; X86-FAST-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-FAST-NEXT:    shrdl %cl, %edx, %eax\\n-; X86-FAST-NEXT:    retl\\n-;\\n-; X86-SLOW-LABEL: var_shift_i32_optsize:\\n-; X86-SLOW:       # %bb.0:\\n-; X86-SLOW-NEXT:    pushl %esi\\n-; X86-SLOW-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n-; X86-SLOW-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n-; X86-SLOW-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-SLOW-NEXT:    movl %eax, %edx\\n-; X86-SLOW-NEXT:    shrdl %cl, %esi, %edx\\n-; X86-SLOW-NEXT:    andb $31, %cl\\n-; X86-SLOW-NEXT:    je .LBB3_2\\n-; X86-SLOW-NEXT:  # %bb.1:\\n-; X86-SLOW-NEXT:    movl %edx, %eax\\n-; X86-SLOW-NEXT:  .LBB3_2:\\n-; X86-SLOW-NEXT:    popl %esi\\n-; X86-SLOW-NEXT:    retl\\n-;\\n-; X64-FAST-LABEL: var_shift_i32_optsize:\\n-; X64-FAST:       # %bb.0:\\n-; X64-FAST-NEXT:    movl %edx, %ecx\\n-; X64-FAST-NEXT:    movl %esi, %eax\\n-; X64-FAST-NEXT:    # kill: def $cl killed $cl killed $ecx\\n-; X64-FAST-NEXT:    shrdl %cl, %edi, %eax\\n-; X64-FAST-NEXT:    retq\\n+; X86-LABEL: var_shift_i32_optsize:\\n+; X86:       # %bb.0:\\n+; X86-NEXT:    movb {{[0-9]+}}(%esp), %cl\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-NEXT:    shrdl %cl, %edx, %eax\\n+; X86-NEXT:    retl\\n ;\\n-; X64-SLOW-LABEL: var_shift_i32_optsize:\\n-; X64-SLOW:       # %bb.0:\\n-; X64-SLOW-NEXT:    movl %edx, %ecx\\n-; X64-SLOW-NEXT:    movl %esi, %eax\\n-; X64-SLOW-NEXT:    shrdl %cl, %edi, %eax\\n-; X64-SLOW-NEXT:    andb $31, %cl\\n-; X64-SLOW-NEXT:    cmovel %esi, %eax\\n-; X64-SLOW-NEXT:    retq\\n+; X64-LABEL: var_shift_i32_optsize:\\n+; X64:       # %bb.0:\\n+; X64-NEXT:    movl %edx, %ecx\\n+; X64-NEXT:    movl %esi, %eax\\n+; X64-NEXT:    # kill: def $cl killed $cl killed $ecx\\n+; X64-NEXT:    shrdl %cl, %edi, %eax\\n+; X64-NEXT:    retq\\n   %tmp = tail call i32 @llvm.fshr.i32(i32 %x, i32 %y, i32 %z)\\n   ret i32 %tmp\\n }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84ZDU4MDQ4MDI0OThlZmU5NWJiM2I4MWQyZmRhYjYwN2U3ZDFlMDJiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/8d5804802498efe95bb3b81d2fdab607e7d1e02b", "content": "{\"sha\": \"8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OGQ1ODA0ODAyNDk4ZWZlOTViYjNiODFkMmZkYWI2MDdlN2QxZTAyYg==\", \"commit\": {\"author\": {\"name\": \"Pete Cooper\", \"email\": \"peter_cooper@apple.com\", \"date\": \"2019-01-02T21:00:02Z\"}, \"committer\": {\"name\": \"Pete Cooper\", \"email\": \"peter_cooper@apple.com\", \"date\": \"2019-01-02T21:00:02Z\"}, \"message\": \"Fix assert in ObjCARC optimizer when deleting retainBlock of null or undef.\\n\\nThe caller to EraseInstruction had this conditional:\\n\\n    // ARC calls with null are no-ops. Delete them.\\n    if (IsNullOrUndef(Arg))\\n\\nbut the assert inside EraseInstruction only allowed ConstantPointerNull and not\\nundef or bitcasts.\\n\\nThis adds support for both of these cases.\\n\\nrdar://problem/47003805\\n\\nllvm-svn: 350261\", \"tree\": {\"sha\": \"e52de6dd4b7579445ea0c6bb8f1a0b4c4b71a20e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e52de6dd4b7579445ea0c6bb8f1a0b4c4b71a20e\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8d5804802498efe95bb3b81d2fdab607e7d1e02b/comments\", \"author\": {\"login\": \"cooperp\", \"id\": 599599, \"node_id\": \"MDQ6VXNlcjU5OTU5OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/599599?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cooperp\", \"html_url\": \"https://github.com/cooperp\", \"followers_url\": \"https://api.github.com/users/cooperp/followers\", \"following_url\": \"https://api.github.com/users/cooperp/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cooperp/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cooperp/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cooperp/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cooperp/orgs\", \"repos_url\": \"https://api.github.com/users/cooperp/repos\", \"events_url\": \"https://api.github.com/users/cooperp/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cooperp/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cooperp\", \"id\": 599599, \"node_id\": \"MDQ6VXNlcjU5OTU5OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/599599?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cooperp\", \"html_url\": \"https://github.com/cooperp\", \"followers_url\": \"https://api.github.com/users/cooperp/followers\", \"following_url\": \"https://api.github.com/users/cooperp/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cooperp/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cooperp/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cooperp/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cooperp/orgs\", \"repos_url\": \"https://api.github.com/users/cooperp/repos\", \"events_url\": \"https://api.github.com/users/cooperp/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cooperp/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"88590e99f2757ffc1d3816f7508bef8310a520e6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/88590e99f2757ffc1d3816f7508bef8310a520e6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/88590e99f2757ffc1d3816f7508bef8310a520e6\"}], \"stats\": {\"total\": 7, \"additions\": 6, \"deletions\": 1}, \"files\": [{\"sha\": \"751c8f30e814c52c31c6bdf9335b7d9aee49b5c2\", \"filename\": \"llvm/lib/Transforms/ObjCARC/ObjCARC.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8d5804802498efe95bb3b81d2fdab607e7d1e02b/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARC.h\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8d5804802498efe95bb3b81d2fdab607e7d1e02b/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARC.h\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARC.h?ref=8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"patch\": \"@@ -58,7 +58,7 @@ static inline void EraseInstruction(Instruction *CI) {\\n     // Replace the return value with the argument.\\n     assert((IsForwarding(GetBasicARCInstKind(CI)) ||\\n             (IsNoopOnNull(GetBasicARCInstKind(CI)) &&\\n-             isa<ConstantPointerNull>(OldArg))) &&\\n+             IsNullOrUndef(OldArg->stripPointerCasts()))) &&\\n            \\\"Can't delete non-forwarding instruction with users!\\\");\\n     CI->replaceAllUsesWith(OldArg);\\n   }\"}, {\"sha\": \"ca3d7e2f848d10e12153b92f4eb9d32984155e85\", \"filename\": \"llvm/test/Transforms/ObjCARC/rv.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8d5804802498efe95bb3b81d2fdab607e7d1e02b/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8d5804802498efe95bb3b81d2fdab607e7d1e02b/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll?ref=8d5804802498efe95bb3b81d2fdab607e7d1e02b\", \"patch\": \"@@ -61,6 +61,11 @@ define void @test2() {\\n   call i8* @llvm.objc.retainAutoreleasedReturnValue(i8* null)\\n   call i8* @llvm.objc.autoreleaseReturnValue(i8* null)\\n   ; call i8* @llvm.objc.retainAutoreleaseReturnValue(i8* null) ; TODO\\n+  %bitcast = bitcast i32* null to i8*\\n+  %rb = call i8* @llvm.objc.retainBlock(i8* %bitcast)\\n+  call void @use_pointer(i8* %rb)\\n+  %rb2 = call i8* @llvm.objc.retainBlock(i8* undef)\\n+  call void @use_pointer(i8* %rb2)\\n   ret void\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kNGU3YTBkODNjYTc4NTkyNWE0ZjhjODJkMTE0Mzc3ZjViMTU2YmJmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/d4e7a0d83ca785925a4f8c82d114377f5b156bbf", "content": "{\"sha\": \"d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZDRlN2EwZDgzY2E3ODU5MjVhNGY4YzgyZDExNDM3N2Y1YjE1NmJiZg==\", \"commit\": {\"author\": {\"name\": \"Eli Friedman\", \"email\": \"efriedma@codeaurora.org\", \"date\": \"2019-01-09T23:39:26Z\"}, \"committer\": {\"name\": \"Eli Friedman\", \"email\": \"efriedma@codeaurora.org\", \"date\": \"2019-01-09T23:39:26Z\"}, \"message\": \"[SimplifyLibCalls] Fix memchr expansion for constant strings.\\n\\nThe C standard says \\\"The memchr function locates the first\\noccurrence of c (converted to an unsigned char)[...]\\\".  The expansion\\nwas missing the conversion to unsigned char.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=39041 .\\n\\nDifferential Revision: https://reviews.llvm.org/D55947\\n\\nllvm-svn: 350775\", \"tree\": {\"sha\": \"1c40cbaf08d91cd6ef285178ef823409bb25a056\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/1c40cbaf08d91cd6ef285178ef823409bb25a056\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"30ba0a0c950a0cdf23a70fce6c16d501c5f238c8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/30ba0a0c950a0cdf23a70fce6c16d501c5f238c8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/30ba0a0c950a0cdf23a70fce6c16d501c5f238c8\"}], \"stats\": {\"total\": 45, \"additions\": 26, \"deletions\": 19}, \"files\": [{\"sha\": \"1bb26caa2af2678cd66a1b56839c51fc248f5a4d\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp?ref=d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"patch\": \"@@ -798,8 +798,11 @@ Value *LibCallSimplifier::optimizeMemChr(CallInst *CI, IRBuilder<> &B) {\\n       Bitfield.setBit((unsigned char)C);\\n     Value *BitfieldC = B.getInt(Bitfield);\\n \\n-    // First check that the bit field access is within bounds.\\n+    // Adjust width of \\\"C\\\" to the bitfield width, then mask off the high bits.\\n     Value *C = B.CreateZExtOrTrunc(CI->getArgOperand(1), BitfieldC->getType());\\n+    C = B.CreateAnd(C, B.getIntN(Width, 0xFF));\\n+\\n+    // First check that the bit field access is within bounds.\\n     Value *Bounds = B.CreateICmp(ICmpInst::ICMP_ULT, C, B.getIntN(Width, Width),\\n                                  \\\"memchr.bounds\\\");\\n \"}, {\"sha\": \"83073e20676e82bfe96402670172f7538a6752ff\", \"filename\": \"llvm/test/Transforms/InstCombine/memchr.ll\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 16, \"changes\": 35, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll?ref=d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"patch\": \"@@ -50,7 +50,7 @@ define void @test3() {\\n \\n define void @test4(i32 %chr) {\\n ; CHECK-LABEL: @test4(\\n-; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @hello, i32 0, i32 0), i32 %chr, i32 14)\\n+; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @hello, i32 0, i32 0), i32 [[CHR:%.*]], i32 14)\\n ; CHECK-NEXT:    store i8* [[DST]], i8** @chp, align 4\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -131,12 +131,13 @@ define void @test10() {\\n ; Check transformation memchr(\\\"\\\\r\\\\n\\\", C, 2) != nullptr -> (C & 9216) != 0\\n define i1 @test11(i32 %C) {\\n ; CHECK-LABEL: @test11(\\n-; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 %C to i16\\n-; CHECK-NEXT:    [[MEMCHR_BOUNDS:%.*]] = icmp ult i16 [[TMP1]], 16\\n-; CHECK-NEXT:    [[TMP2:%.*]] = shl i16 1, [[TMP1]]\\n-; CHECK-NEXT:    [[TMP3:%.*]] = and i16 [[TMP2]], 9216\\n-; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i16 [[TMP3]], 0\\n-; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR:%.*]].bounds, [[MEMCHR:%.*]].bits\\n+; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[C:%.*]] to i16\\n+; CHECK-NEXT:    [[TMP2:%.*]] = and i16 [[TMP1]], 255\\n+; CHECK-NEXT:    [[MEMCHR_BOUNDS:%.*]] = icmp ult i16 [[TMP2]], 16\\n+; CHECK-NEXT:    [[TMP3:%.*]] = shl i16 1, [[TMP2]]\\n+; CHECK-NEXT:    [[TMP4:%.*]] = and i16 [[TMP3]], 9216\\n+; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i16 [[TMP4]], 0\\n+; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR_BOUNDS]], [[MEMCHR_BITS]]\\n ; CHECK-NEXT:    ret i1 [[MEMCHR]]\\n ;\\n   %dst = call i8* @memchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @newlines, i64 0, i64 0), i32 %C, i32 2)\\n@@ -147,7 +148,7 @@ define i1 @test11(i32 %C) {\\n ; No 64 bits here\\n define i1 @test12(i32 %C) {\\n ; CHECK-LABEL: @test12(\\n-; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @spaces, i32 0, i32 0), i32 %C, i32 3)\\n+; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @spaces, i32 0, i32 0), i32 [[C:%.*]], i32 3)\\n ; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i8* [[DST]], null\\n ; CHECK-NEXT:    ret i1 [[CMP]]\\n ;\\n@@ -158,11 +159,12 @@ define i1 @test12(i32 %C) {\\n \\n define i1 @test13(i32 %C) {\\n ; CHECK-LABEL: @test13(\\n-; CHECK-NEXT:    [[MEMCHR_BOUNDS:%.*]] = icmp ult i32 %C, 32\\n-; CHECK-NEXT:    [[TMP1:%.*]] = shl i32 1, %C\\n-; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[TMP1]], -2147483647\\n-; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i32 [[TMP2]], 0\\n-; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR:%.*]].bounds, [[MEMCHR:%.*]].bits\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[C:%.*]], 255\\n+; CHECK-NEXT:    [[MEMCHR_BOUNDS:%.*]] = icmp ult i32 [[TMP1]], 32\\n+; CHECK-NEXT:    [[TMP2:%.*]] = shl i32 1, [[TMP1]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP2]], -2147483647\\n+; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i32 [[TMP3]], 0\\n+; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR_BOUNDS]], [[MEMCHR_BITS]]\\n ; CHECK-NEXT:    ret i1 [[MEMCHR]]\\n ;\\n   %dst = call i8* @memchr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @single, i64 0, i64 0), i32 %C, i32 2)\\n@@ -172,8 +174,9 @@ define i1 @test13(i32 %C) {\\n \\n define i1 @test14(i32 %C) {\\n ; CHECK-LABEL: @test14(\\n-; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 %C, 31\\n-; CHECK-NEXT:    ret i1 [[TMP1]]\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[C:%.*]], 255\\n+; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp eq i32 [[TMP1]], 31\\n+; CHECK-NEXT:    ret i1 [[MEMCHR_BITS]]\\n ;\\n   %dst = call i8* @memchr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @single, i64 0, i64 0), i32 %C, i32 1)\\n   %cmp = icmp ne i8* %dst, null\\n@@ -182,7 +185,7 @@ define i1 @test14(i32 %C) {\\n \\n define i1 @test15(i32 %C) {\\n ; CHECK-LABEL: @test15(\\n-; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @negative, i32 0, i32 0), i32 %C, i32 3)\\n+; CHECK-NEXT:    [[DST:%.*]] = call i8* @memchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @negative, i32 0, i32 0), i32 [[C:%.*]], i32 3)\\n ; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i8* [[DST]], null\\n ; CHECK-NEXT:    ret i1 [[CMP]]\\n ;\"}, {\"sha\": \"4fce378f59f4377fe36af295dd1ebd6f2daf7184\", \"filename\": \"llvm/test/Transforms/InstCombine/strchr-1.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d4e7a0d83ca785925a4f8c82d114377f5b156bbf/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll?ref=d4e7a0d83ca785925a4f8c82d114377f5b156bbf\", \"patch\": \"@@ -82,8 +82,9 @@ define void @test_simplify6(i8* %str) {\\n define i1 @test_simplify7(i32 %C) {\\n ; CHECK-LABEL: @test_simplify7\\n ; CHECK-NEXT: [[TRUNC:%.*]] = trunc i32 %C to i16\\n-; CHECK-NEXT: %memchr.bounds = icmp ult i16 [[TRUNC]], 16\\n-; CHECK-NEXT: [[SHL:%.*]] = shl i16 1, [[TRUNC]]\\n+; CHECK-NEXT: [[TRUNC_AND:%.*]] = and i16 [[TRUNC]], 255\\n+; CHECK-NEXT: %memchr.bounds = icmp ult i16 [[TRUNC_AND]], 16\\n+; CHECK-NEXT: [[SHL:%.*]] = shl i16 1, [[TRUNC_AND]]\\n ; CHECK-NEXT: [[AND:%.*]] = and i16 [[SHL]], 9217\\n ; CHECK-NEXT: %memchr.bits = icmp ne i16 [[AND]], 0\\n ; CHECK-NEXT: %memchr1 = and i1 %memchr.bounds, %memchr.bits\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85MGVkZTVmNGJmZTY2YTBjMWIzZjQ2MTZiYjBjYzUwYTY2MjljNGFjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac", "content": "{\"sha\": \"90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OTBlZGU1ZjRiZmU2NmEwYzFiM2Y0NjE2YmIwY2M1MGE2NjI5YzRhYw==\", \"commit\": {\"author\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse.llvm@gmail.com\", \"date\": \"2019-03-11T16:23:59Z\"}, \"committer\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse.llvm@gmail.com\", \"date\": \"2019-03-11T16:23:59Z\"}, \"message\": \"[SimplifyCFG] Retain debug info when threading jumps with critical edges\\n\\nFixes bug 38023: https://bugs.llvm.org/show_bug.cgi?id=38023\\n\\nThe SimplifyCFG pass will perform jump threading in some cases where\\ndoing so is trivial and would simplify the CFG. When folding a series\\nof blocks with redundant conditional branches into an unconditional \\\"critical\\nedge\\\" block, it does not keep the debug location associated with the previous\\nconditional branch.\\n\\nThis patch fixes the bug described by copying the debug info from the\\nold conditional branch to the new unconditional branch instruction, and\\nadds a regression test for the SimplifyCFG pass that covers this case.\\n\\nPatch by Stephen Tozer!\\n\\nDifferential Revision: https://reviews.llvm.org/D59206\\n\\nllvm-svn: 355833\", \"tree\": {\"sha\": \"6fcc6dd6cce035bd9141c59891296d162ded08d6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/6fcc6dd6cce035bd9141c59891296d162ded08d6\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac/comments\", \"author\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"33e498b785cf41f9617c813486c2dfe44cf4eca0\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/33e498b785cf41f9617c813486c2dfe44cf4eca0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/33e498b785cf41f9617c813486c2dfe44cf4eca0\"}], \"stats\": {\"total\": 41, \"additions\": 40, \"deletions\": 1}, \"files\": [{\"sha\": \"c3e8203ef9e6c5833c6b72b46c1263c2075121a7\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"patch\": \"@@ -2209,7 +2209,8 @@ static bool FoldCondBranchOnPHI(BranchInst *BI, const DataLayout &DL,\\n     BasicBlock *EdgeBB =\\n         BasicBlock::Create(BB->getContext(), RealDest->getName() + \\\".critedge\\\",\\n                            RealDest->getParent(), RealDest);\\n-    BranchInst::Create(RealDest, EdgeBB);\\n+    BranchInst *CritEdgeBranch = BranchInst::Create(RealDest, EdgeBB);\\n+    CritEdgeBranch->setDebugLoc(BI->getDebugLoc());\\n \\n     // Update PHI nodes.\\n     AddPredecessorToBlock(RealDest, EdgeBB, BB);\"}, {\"sha\": \"f7e91feb434868b8eef16742ebe02a48a84adc35\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/debug-info-thread-phi.ll\", \"status\": \"added\", \"additions\": 38, \"deletions\": 0, \"changes\": 38, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fdebug-info-thread-phi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fdebug-info-thread-phi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Fdebug-info-thread-phi.ll?ref=90ede5f4bfe66a0c1b3f4616bb0cc50a6629c4ac\", \"patch\": \"@@ -0,0 +1,38 @@\\n+; RUN: opt %s -debugify -simplifycfg -S | FileCheck %s\\n+; Tests Bug 37966\\n+\\n+define void @bar(i32 %aa) {\\n+; CHECK-LABEL: @bar(\\n+; CHECK: if.end.1.critedge:\\n+; CHECK: br label %if.end.1, !dbg ![[DBG:[0-9]+]]\\n+entry:\\n+  %aa.addr = alloca i32, align 4\\n+  %bb = alloca i32, align 4\\n+  store i32 %aa, i32* %aa.addr, align 4\\n+  store i32 0, i32* %bb, align 4\\n+  %tobool = icmp ne i32 %aa, 0\\n+  br i1 %tobool, label %if.then, label %if.end\\n+\\n+if.then:                                          ; preds = %entry\\n+  call void @foo()\\n+  br label %if.end\\n+\\n+if.end:                                           ; preds = %if.then, %entry\\n+  store i32 1, i32* %bb, align 4\\n+  br i1 %tobool, label %if.then.1, label %if.end.1\\n+\\n+if.then.1:                                        ; preds = %if.end\\n+  call void @foo()\\n+  br label %if.end.1\\n+\\n+if.end.1:                                         ; preds = %if.then.1, %if.end\\n+  store i32 2, i32* %bb, align 4\\n+  br label %for.end\\n+\\n+for.end:                                          ; preds = %if.end.1\\n+  ret void\\n+}\\n+\\n+declare void @foo()\\n+\\n+; CHECK: ![[DBG]] = !DILocation(\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yMTUzYzRiODI4MWMxZTVmMjU4ODdlZjkxODM5NDcxOThjNTBhOWQyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/2153c4b8281c1e5f25887ef9183947198c50a9d2", "content": "{\"sha\": \"2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MjE1M2M0YjgyODFjMWU1ZjI1ODg3ZWY5MTgzOTQ3MTk4YzUwYTlkMg==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-03-19T17:20:49Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-03-19T17:20:49Z\"}, \"message\": \"[AtomicExpand] Fix a crash bug when lowering unordered loads to cmpxchg\\n\\nAdd tests for wider atomic loads and stores.  In the process, fix a crasher where we appearently handled unorder stores, but not loads, when lowering to cmpxchg idioms.\\n\\nllvm-svn: 356482\", \"tree\": {\"sha\": \"37661d78ace54e1333616815cc9f1e8571dd2fb7\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/37661d78ace54e1333616815cc9f1e8571dd2fb7\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2153c4b8281c1e5f25887ef9183947198c50a9d2/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ae211ece6a90c367ef0cdbabad3110aba3fcda67\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ae211ece6a90c367ef0cdbabad3110aba3fcda67\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ae211ece6a90c367ef0cdbabad3110aba3fcda67\"}], \"stats\": {\"total\": 237, \"additions\": 213, \"deletions\": 24}, \"files\": [{\"sha\": \"7a8013abccfb1ad1fc5d7eb49571e0ac8d6d3d3e\", \"filename\": \"llvm/lib/CodeGen/AtomicExpandPass.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2153c4b8281c1e5f25887ef9183947198c50a9d2/llvm%2Flib%2FCodeGen%2FAtomicExpandPass.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2153c4b8281c1e5f25887ef9183947198c50a9d2/llvm%2Flib%2FCodeGen%2FAtomicExpandPass.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAtomicExpandPass.cpp?ref=2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"patch\": \"@@ -430,6 +430,9 @@ bool AtomicExpand::expandAtomicLoadToLL(LoadInst *LI) {\\n bool AtomicExpand::expandAtomicLoadToCmpXchg(LoadInst *LI) {\\n   IRBuilder<> Builder(LI);\\n   AtomicOrdering Order = LI->getOrdering();\\n+  if (Order == AtomicOrdering::Unordered)\\n+    Order = AtomicOrdering::Monotonic;\\n+\\n   Value *Addr = LI->getPointerOperand();\\n   Type *Ty = cast<PointerType>(Addr->getType())->getElementType();\\n   Constant *DummyVal = Constant::getNullValue(Ty);\"}, {\"sha\": \"105aa0f23e79133acad1ef12b742b7008ca93a13\", \"filename\": \"llvm/test/CodeGen/X86/atomic-unordered.ll\", \"status\": \"modified\", \"additions\": 210, \"deletions\": 24, \"changes\": 234, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2153c4b8281c1e5f25887ef9183947198c50a9d2/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic-unordered.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2153c4b8281c1e5f25887ef9183947198c50a9d2/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic-unordered.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fatomic-unordered.ll?ref=2153c4b8281c1e5f25887ef9183947198c50a9d2\", \"patch\": \"@@ -272,6 +272,192 @@ define void @widen_broadcast_unaligned(i32* %p0, i32 %v) {\\n   ret void\\n }\\n \\n+define i128 @load_i128(i128* %ptr) {\\n+; CHECK-O0-LABEL: load_i128:\\n+; CHECK-O0:       # %bb.0:\\n+; CHECK-O0-NEXT:    pushq %rbx\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O0-NEXT:    .cfi_offset %rbx, -16\\n+; CHECK-O0-NEXT:    xorl %eax, %eax\\n+; CHECK-O0-NEXT:    movl %eax, %ecx\\n+; CHECK-O0-NEXT:    movq %rcx, %rax\\n+; CHECK-O0-NEXT:    movq %rcx, %rdx\\n+; CHECK-O0-NEXT:    movq %rcx, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rbx # 8-byte Reload\\n+; CHECK-O0-NEXT:    lock cmpxchg16b (%rdi)\\n+; CHECK-O0-NEXT:    popq %rbx\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O0-NEXT:    retq\\n+;\\n+; CHECK-O3-LABEL: load_i128:\\n+; CHECK-O3:       # %bb.0:\\n+; CHECK-O3-NEXT:    pushq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O3-NEXT:    .cfi_offset %rbx, -16\\n+; CHECK-O3-NEXT:    xorl %eax, %eax\\n+; CHECK-O3-NEXT:    xorl %edx, %edx\\n+; CHECK-O3-NEXT:    xorl %ecx, %ecx\\n+; CHECK-O3-NEXT:    xorl %ebx, %ebx\\n+; CHECK-O3-NEXT:    lock cmpxchg16b (%rdi)\\n+; CHECK-O3-NEXT:    popq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O3-NEXT:    retq\\n+  %v = load atomic i128, i128* %ptr unordered, align 16\\n+  ret i128 %v\\n+}\\n+\\n+define void @store_i128(i128* %ptr, i128 %v) {\\n+; CHECK-O0-LABEL: store_i128:\\n+; CHECK-O0:       # %bb.0:\\n+; CHECK-O0-NEXT:    pushq %rbx\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O0-NEXT:    .cfi_offset %rbx, -16\\n+; CHECK-O0-NEXT:    movq (%rdi), %rax\\n+; CHECK-O0-NEXT:    movq 8(%rdi), %rcx\\n+; CHECK-O0-NEXT:    movq %rdx, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rcx, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    jmp .LBB16_1\\n+; CHECK-O0-NEXT:  .LBB16_1: # %atomicrmw.start\\n+; CHECK-O0-NEXT:    # =>This Inner Loop Header: Depth=1\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rcx, %rax\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rdx # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rbx # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload\\n+; CHECK-O0-NEXT:    lock cmpxchg16b (%rsi)\\n+; CHECK-O0-NEXT:    movq %rdx, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    jne .LBB16_1\\n+; CHECK-O0-NEXT:    jmp .LBB16_2\\n+; CHECK-O0-NEXT:  .LBB16_2: # %atomicrmw.end\\n+; CHECK-O0-NEXT:    popq %rbx\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O0-NEXT:    retq\\n+;\\n+; CHECK-O3-LABEL: store_i128:\\n+; CHECK-O3:       # %bb.0:\\n+; CHECK-O3-NEXT:    pushq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O3-NEXT:    .cfi_offset %rbx, -16\\n+; CHECK-O3-NEXT:    movq %rdx, %rcx\\n+; CHECK-O3-NEXT:    movq %rsi, %rbx\\n+; CHECK-O3-NEXT:    movq (%rdi), %rax\\n+; CHECK-O3-NEXT:    movq 8(%rdi), %rdx\\n+; CHECK-O3-NEXT:    .p2align 4, 0x90\\n+; CHECK-O3-NEXT:  .LBB16_1: # %atomicrmw.start\\n+; CHECK-O3-NEXT:    # =>This Inner Loop Header: Depth=1\\n+; CHECK-O3-NEXT:    lock cmpxchg16b (%rdi)\\n+; CHECK-O3-NEXT:    jne .LBB16_1\\n+; CHECK-O3-NEXT:  # %bb.2: # %atomicrmw.end\\n+; CHECK-O3-NEXT:    popq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O3-NEXT:    retq\\n+  store atomic i128 %v, i128* %ptr unordered, align 16\\n+  ret void\\n+}\\n+\\n+define i256 @load_i256(i256* %ptr) {\\n+; CHECK-O0-LABEL: load_i256:\\n+; CHECK-O0:       # %bb.0:\\n+; CHECK-O0-NEXT:    subq $56, %rsp\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 64\\n+; CHECK-O0-NEXT:    movq %rdi, %rax\\n+; CHECK-O0-NEXT:    movl $32, %ecx\\n+; CHECK-O0-NEXT:    leaq {{[0-9]+}}(%rsp), %rdx\\n+; CHECK-O0-NEXT:    xorl %r8d, %r8d\\n+; CHECK-O0-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rcx, %rdi\\n+; CHECK-O0-NEXT:    movl %r8d, %ecx\\n+; CHECK-O0-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n+; CHECK-O0-NEXT:    callq __atomic_load\\n+; CHECK-O0-NEXT:    movq {{[0-9]+}}(%rsp), %rax\\n+; CHECK-O0-NEXT:    movq {{[0-9]+}}(%rsp), %rdx\\n+; CHECK-O0-NEXT:    movq {{[0-9]+}}(%rsp), %rsi\\n+; CHECK-O0-NEXT:    movq {{[0-9]+}}(%rsp), %rdi\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %r9 # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq %rdi, 24(%r9)\\n+; CHECK-O0-NEXT:    movq %rsi, 16(%r9)\\n+; CHECK-O0-NEXT:    movq %rdx, 8(%r9)\\n+; CHECK-O0-NEXT:    movq %rax, (%r9)\\n+; CHECK-O0-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload\\n+; CHECK-O0-NEXT:    addq $56, %rsp\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O0-NEXT:    retq\\n+;\\n+; CHECK-O3-LABEL: load_i256:\\n+; CHECK-O3:       # %bb.0:\\n+; CHECK-O3-NEXT:    pushq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O3-NEXT:    subq $32, %rsp\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 48\\n+; CHECK-O3-NEXT:    .cfi_offset %rbx, -16\\n+; CHECK-O3-NEXT:    movq %rdi, %rbx\\n+; CHECK-O3-NEXT:    movq %rsp, %rdx\\n+; CHECK-O3-NEXT:    movl $32, %edi\\n+; CHECK-O3-NEXT:    xorl %ecx, %ecx\\n+; CHECK-O3-NEXT:    callq __atomic_load\\n+; CHECK-O3-NEXT:    vmovups (%rsp), %ymm0\\n+; CHECK-O3-NEXT:    vmovups %ymm0, (%rbx)\\n+; CHECK-O3-NEXT:    movq %rbx, %rax\\n+; CHECK-O3-NEXT:    addq $32, %rsp\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 16\\n+; CHECK-O3-NEXT:    popq %rbx\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O3-NEXT:    vzeroupper\\n+; CHECK-O3-NEXT:    retq\\n+  %v = load atomic i256, i256* %ptr unordered, align 16\\n+  ret i256 %v\\n+}\\n+\\n+define void @store_i256(i256* %ptr, i256 %v) {\\n+; CHECK-O0-LABEL: store_i256:\\n+; CHECK-O0:       # %bb.0:\\n+; CHECK-O0-NEXT:    subq $40, %rsp\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 48\\n+; CHECK-O0-NEXT:    xorl %eax, %eax\\n+; CHECK-O0-NEXT:    leaq {{[0-9]+}}(%rsp), %r9\\n+; CHECK-O0-NEXT:    movq %rsi, {{[0-9]+}}(%rsp)\\n+; CHECK-O0-NEXT:    movq %rdx, {{[0-9]+}}(%rsp)\\n+; CHECK-O0-NEXT:    movq %rcx, {{[0-9]+}}(%rsp)\\n+; CHECK-O0-NEXT:    movq %r8, {{[0-9]+}}(%rsp)\\n+; CHECK-O0-NEXT:    movl $32, %ecx\\n+; CHECK-O0-NEXT:    movq %rdi, (%rsp) # 8-byte Spill\\n+; CHECK-O0-NEXT:    movq %rcx, %rdi\\n+; CHECK-O0-NEXT:    movq (%rsp), %rsi # 8-byte Reload\\n+; CHECK-O0-NEXT:    movq %r9, %rdx\\n+; CHECK-O0-NEXT:    movl %eax, %ecx\\n+; CHECK-O0-NEXT:    callq __atomic_store\\n+; CHECK-O0-NEXT:    addq $40, %rsp\\n+; CHECK-O0-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O0-NEXT:    retq\\n+;\\n+; CHECK-O3-LABEL: store_i256:\\n+; CHECK-O3:       # %bb.0:\\n+; CHECK-O3-NEXT:    subq $40, %rsp\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 48\\n+; CHECK-O3-NEXT:    movq %rdi, %rax\\n+; CHECK-O3-NEXT:    movq %r8, {{[0-9]+}}(%rsp)\\n+; CHECK-O3-NEXT:    movq %rcx, {{[0-9]+}}(%rsp)\\n+; CHECK-O3-NEXT:    movq %rdx, {{[0-9]+}}(%rsp)\\n+; CHECK-O3-NEXT:    movq %rsi, {{[0-9]+}}(%rsp)\\n+; CHECK-O3-NEXT:    leaq {{[0-9]+}}(%rsp), %rdx\\n+; CHECK-O3-NEXT:    movl $32, %edi\\n+; CHECK-O3-NEXT:    movq %rax, %rsi\\n+; CHECK-O3-NEXT:    xorl %ecx, %ecx\\n+; CHECK-O3-NEXT:    callq __atomic_store\\n+; CHECK-O3-NEXT:    addq $40, %rsp\\n+; CHECK-O3-NEXT:    .cfi_def_cfa_offset 8\\n+; CHECK-O3-NEXT:    retq\\n+  store atomic i256 %v, i256* %ptr unordered, align 16\\n+  ret void\\n+}\\n+\\n ; Legal if wider type is also atomic (TODO)\\n define void @vec_store(i32* %p0, <2 x i32> %vec) {\\n ; CHECK-O0-LABEL: vec_store:\\n@@ -621,12 +807,12 @@ define i64 @load_fold_sdiv2(i64* %p, i64 %v2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB31_1\\n+; CHECK-O3-NEXT:    je .LBB35_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rsi\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB31_1:\\n+; CHECK-O3-NEXT:  .LBB35_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -652,12 +838,12 @@ define i64 @load_fold_sdiv3(i64* %p1, i64* %p2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rdx\\n ; CHECK-O3-NEXT:    orq %rcx, %rdx\\n ; CHECK-O3-NEXT:    shrq $32, %rdx\\n-; CHECK-O3-NEXT:    je .LBB32_1\\n+; CHECK-O3-NEXT:    je .LBB36_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rcx\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB32_1:\\n+; CHECK-O3-NEXT:  .LBB36_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %ecx\\n@@ -708,12 +894,12 @@ define i64 @load_fold_udiv2(i64* %p, i64 %v2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB34_1\\n+; CHECK-O3-NEXT:    je .LBB38_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rsi\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB34_1:\\n+; CHECK-O3-NEXT:  .LBB38_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -740,12 +926,12 @@ define i64 @load_fold_udiv3(i64* %p1, i64* %p2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rdx\\n ; CHECK-O3-NEXT:    orq %rcx, %rdx\\n ; CHECK-O3-NEXT:    shrq $32, %rdx\\n-; CHECK-O3-NEXT:    je .LBB35_1\\n+; CHECK-O3-NEXT:    je .LBB39_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rcx\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB35_1:\\n+; CHECK-O3-NEXT:  .LBB39_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %ecx\\n@@ -805,13 +991,13 @@ define i64 @load_fold_srem2(i64* %p, i64 %v2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB37_1\\n+; CHECK-O3-NEXT:    je .LBB41_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rsi\\n ; CHECK-O3-NEXT:    movq %rdx, %rax\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB37_1:\\n+; CHECK-O3-NEXT:  .LBB41_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -838,13 +1024,13 @@ define i64 @load_fold_srem3(i64* %p1, i64* %p2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rdx\\n ; CHECK-O3-NEXT:    orq %rcx, %rdx\\n ; CHECK-O3-NEXT:    shrq $32, %rdx\\n-; CHECK-O3-NEXT:    je .LBB38_1\\n+; CHECK-O3-NEXT:    je .LBB42_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rcx\\n ; CHECK-O3-NEXT:    movq %rdx, %rax\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB38_1:\\n+; CHECK-O3-NEXT:  .LBB42_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %ecx\\n@@ -902,13 +1088,13 @@ define i64 @load_fold_urem2(i64* %p, i64 %v2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB40_1\\n+; CHECK-O3-NEXT:    je .LBB44_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rsi\\n ; CHECK-O3-NEXT:    movq %rdx, %rax\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB40_1:\\n+; CHECK-O3-NEXT:  .LBB44_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -936,13 +1122,13 @@ define i64 @load_fold_urem3(i64* %p1, i64* %p2) {\\n ; CHECK-O3-NEXT:    movq %rax, %rdx\\n ; CHECK-O3-NEXT:    orq %rcx, %rdx\\n ; CHECK-O3-NEXT:    shrq $32, %rdx\\n-; CHECK-O3-NEXT:    je .LBB41_1\\n+; CHECK-O3-NEXT:    je .LBB45_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rcx\\n ; CHECK-O3-NEXT:    movq %rdx, %rax\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB41_1:\\n+; CHECK-O3-NEXT:  .LBB45_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %ecx\\n@@ -1537,13 +1723,13 @@ define void @rmw_fold_sdiv2(i64* %p, i64 %v) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB70_1\\n+; CHECK-O3-NEXT:    je .LBB74_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rsi\\n ; CHECK-O3-NEXT:    movq %rax, (%rdi)\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB70_1:\\n+; CHECK-O3-NEXT:  .LBB74_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -1599,13 +1785,13 @@ define void @rmw_fold_udiv2(i64* %p, i64 %v) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB72_1\\n+; CHECK-O3-NEXT:    je .LBB76_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rsi\\n ; CHECK-O3-NEXT:    movq %rax, (%rdi)\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB72_1:\\n+; CHECK-O3-NEXT:  .LBB76_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -1677,13 +1863,13 @@ define void @rmw_fold_srem2(i64* %p, i64 %v) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB74_1\\n+; CHECK-O3-NEXT:    je .LBB78_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    cqto\\n ; CHECK-O3-NEXT:    idivq %rsi\\n ; CHECK-O3-NEXT:    movq %rdx, (%rdi)\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB74_1:\\n+; CHECK-O3-NEXT:  .LBB78_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\\n@@ -1748,13 +1934,13 @@ define void @rmw_fold_urem2(i64* %p, i64 %v) {\\n ; CHECK-O3-NEXT:    movq %rax, %rcx\\n ; CHECK-O3-NEXT:    orq %rsi, %rcx\\n ; CHECK-O3-NEXT:    shrq $32, %rcx\\n-; CHECK-O3-NEXT:    je .LBB76_1\\n+; CHECK-O3-NEXT:    je .LBB80_1\\n ; CHECK-O3-NEXT:  # %bb.2:\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divq %rsi\\n ; CHECK-O3-NEXT:    movq %rdx, (%rdi)\\n ; CHECK-O3-NEXT:    retq\\n-; CHECK-O3-NEXT:  .LBB76_1:\\n+; CHECK-O3-NEXT:  .LBB80_1:\\n ; CHECK-O3-NEXT:    # kill: def $eax killed $eax killed $rax\\n ; CHECK-O3-NEXT:    xorl %edx, %edx\\n ; CHECK-O3-NEXT:    divl %esi\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kNDdlYWM1OWVmYjFkZTNhNGZlNzk3YzU0ZTExNmRlNTVjNjU1OWUyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/d47eac59efb1de3a4fe797c54e116de55c6559e2", "content": "{\"sha\": \"d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZDQ3ZWFjNTllZmIxZGUzYTRmZTc5N2M1NGUxMTZkZTU1YzY1NTllMg==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-03-21T13:57:07Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-03-21T13:57:07Z\"}, \"message\": \"[CodeGenPrepare] limit formation of overflow intrinsics (PR41129)\\n\\nThis is probably a bigger limitation than necessary, but since we don't have any evidence yet\\nthat this transform led to real-world perf improvements rather than regressions, I'm making a\\nquick, blunt fix.\\n\\nIn the motivating x86 example from:\\nhttps://bugs.llvm.org/show_bug.cgi?id=41129\\n...and shown in the regression test, we want to avoid an extra instruction in the dominating\\nblock because that could be costly.\\n\\nThe x86 LSR test diff is reversing the changes from D57789. There's no evidence that 1 version\\nis any better than the other yet.\\n\\nDifferential Revision: https://reviews.llvm.org/D59602\\n\\nllvm-svn: 356665\", \"tree\": {\"sha\": \"d01067880b29bb2565aecd1536fd1141e9467596\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d01067880b29bb2565aecd1536fd1141e9467596\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d47eac59efb1de3a4fe797c54e116de55c6559e2/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3e9e55491e787b9c1a100a58c27b5e228a278942\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3e9e55491e787b9c1a100a58c27b5e228a278942\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/3e9e55491e787b9c1a100a58c27b5e228a278942\"}], \"stats\": {\"total\": 77, \"additions\": 41, \"deletions\": 36}, \"files\": [{\"sha\": \"e570e98df87e7cd54ecb52e7bd16918df05b81b3\", \"filename\": \"llvm/lib/CodeGen/CodeGenPrepare.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Flib%2FCodeGen%2FCodeGenPrepare.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Flib%2FCodeGen%2FCodeGenPrepare.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FCodeGenPrepare.cpp?ref=d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"patch\": \"@@ -1181,10 +1181,14 @@ static bool replaceMathCmpWithIntrinsic(BinaryOperator *BO, CmpInst *Cmp,\\n     if (!MathDominates && !DT.dominates(Cmp, BO))\\n       return false;\\n \\n-    // Check that the insertion doesn't create a value that is live across more\\n-    // than two blocks, so to minimise the increase in register pressure.\\n     BasicBlock *MathBB = BO->getParent(), *CmpBB = Cmp->getParent();\\n     if (MathBB != CmpBB) {\\n+      // Avoid hoisting an extra op into a dominating block and creating a\\n+      // potentially longer critical path.\\n+      if (!MathDominates)\\n+        return false;\\n+      // Check that the insertion doesn't create a value that is live across\\n+      // more than two blocks, so to minimise the increase in register pressure.\\n       BasicBlock *Dominator = MathDominates ? MathBB : CmpBB;\\n       BasicBlock *Dominated = MathDominates ? CmpBB : MathBB;\\n       auto Successors = successors(Dominator);\"}, {\"sha\": \"2bdf7cec478e4fb92a1177053c0d4e1271fdc1a1\", \"filename\": \"llvm/test/CodeGen/X86/cgp-usubo.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FCodeGen%2FX86%2Fcgp-usubo.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FCodeGen%2FX86%2Fcgp-usubo.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fcgp-usubo.ll?ref=d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"patch\": \"@@ -211,16 +211,16 @@ define void @PR41129(i64* %p64) {\\n ; CHECK-LABEL: PR41129:\\n ; CHECK:       # %bb.0: # %entry\\n ; CHECK-NEXT:    movq (%rdi), %rax\\n-; CHECK-NEXT:    movq %rax, %rcx\\n-; CHECK-NEXT:    subq $1, %rcx\\n-; CHECK-NEXT:    jae .LBB10_1\\n-; CHECK-NEXT:  # %bb.2: # %true\\n-; CHECK-NEXT:    movq %rcx, (%rdi)\\n-; CHECK-NEXT:    retq\\n-; CHECK-NEXT:  .LBB10_1: # %false\\n+; CHECK-NEXT:    testq %rax, %rax\\n+; CHECK-NEXT:    je .LBB10_2\\n+; CHECK-NEXT:  # %bb.1: # %false\\n ; CHECK-NEXT:    andl $7, %eax\\n ; CHECK-NEXT:    movq %rax, (%rdi)\\n ; CHECK-NEXT:    retq\\n+; CHECK-NEXT:  .LBB10_2: # %true\\n+; CHECK-NEXT:    decq %rax\\n+; CHECK-NEXT:    movq %rax, (%rdi)\\n+; CHECK-NEXT:    retq\\n entry:\\n   %key = load i64, i64* %p64, align 8\\n   %cond17 = icmp eq i64 %key, 0\"}, {\"sha\": \"7a26623510944785cfb81844e07ef2ba09abf782\", \"filename\": \"llvm/test/CodeGen/X86/lsr-loop-exit-cond.ll\", \"status\": \"modified\", \"additions\": 22, \"deletions\": 20, \"changes\": 42, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FCodeGen%2FX86%2Flsr-loop-exit-cond.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FCodeGen%2FX86%2Flsr-loop-exit-cond.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Flsr-loop-exit-cond.ll?ref=d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"patch\": \"@@ -16,11 +16,11 @@ define void @t(i8* nocapture %in, i8* nocapture %out, i32* nocapture %rk, i32 %r\\n ; GENERIC-NEXT:    movl (%rdx), %eax\\n ; GENERIC-NEXT:    movl 4(%rdx), %ebx\\n ; GENERIC-NEXT:    decl %ecx\\n-; GENERIC-NEXT:    leaq 20(%rdx), %r11\\n+; GENERIC-NEXT:    leaq 20(%rdx), %r14\\n ; GENERIC-NEXT:    movq _Te0@{{.*}}(%rip), %r9\\n ; GENERIC-NEXT:    movq _Te1@{{.*}}(%rip), %r8\\n ; GENERIC-NEXT:    movq _Te3@{{.*}}(%rip), %r10\\n-; GENERIC-NEXT:    movq %rcx, %r14\\n+; GENERIC-NEXT:    movq %rcx, %r11\\n ; GENERIC-NEXT:    jmp LBB0_1\\n ; GENERIC-NEXT:    .p2align 4, 0x90\\n ; GENERIC-NEXT:  LBB0_2: ## %bb1\\n@@ -29,13 +29,14 @@ define void @t(i8* nocapture %in, i8* nocapture %out, i32* nocapture %rk, i32 %r\\n ; GENERIC-NEXT:    shrl $16, %ebx\\n ; GENERIC-NEXT:    movzbl %bl, %ebx\\n ; GENERIC-NEXT:    xorl (%r8,%rbx,4), %eax\\n-; GENERIC-NEXT:    xorl -4(%r11), %eax\\n+; GENERIC-NEXT:    xorl -4(%r14), %eax\\n ; GENERIC-NEXT:    shrl $24, %edi\\n ; GENERIC-NEXT:    movzbl %bpl, %ebx\\n ; GENERIC-NEXT:    movl (%r10,%rbx,4), %ebx\\n ; GENERIC-NEXT:    xorl (%r9,%rdi,4), %ebx\\n-; GENERIC-NEXT:    xorl (%r11), %ebx\\n-; GENERIC-NEXT:    addq $16, %r11\\n+; GENERIC-NEXT:    xorl (%r14), %ebx\\n+; GENERIC-NEXT:    decq %r11\\n+; GENERIC-NEXT:    addq $16, %r14\\n ; GENERIC-NEXT:  LBB0_1: ## %bb\\n ; GENERIC-NEXT:    ## =>This Inner Loop Header: Depth=1\\n ; GENERIC-NEXT:    movzbl %al, %edi\\n@@ -46,16 +47,16 @@ define void @t(i8* nocapture %in, i8* nocapture %out, i32* nocapture %rk, i32 %r\\n ; GENERIC-NEXT:    movzbl %bpl, %ebp\\n ; GENERIC-NEXT:    movl (%r8,%rbp,4), %ebp\\n ; GENERIC-NEXT:    xorl (%r9,%rax,4), %ebp\\n-; GENERIC-NEXT:    xorl -12(%r11), %ebp\\n+; GENERIC-NEXT:    xorl -12(%r14), %ebp\\n ; GENERIC-NEXT:    shrl $24, %ebx\\n ; GENERIC-NEXT:    movl (%r10,%rdi,4), %edi\\n ; GENERIC-NEXT:    xorl (%r9,%rbx,4), %edi\\n-; GENERIC-NEXT:    xorl -8(%r11), %edi\\n+; GENERIC-NEXT:    xorl -8(%r14), %edi\\n ; GENERIC-NEXT:    movl %ebp, %eax\\n ; GENERIC-NEXT:    shrl $24, %eax\\n ; GENERIC-NEXT:    movl (%r9,%rax,4), %eax\\n-; GENERIC-NEXT:    subq $1, %r14\\n-; GENERIC-NEXT:    jae LBB0_2\\n+; GENERIC-NEXT:    testq %r11, %r11\\n+; GENERIC-NEXT:    jne LBB0_2\\n ; GENERIC-NEXT:  ## %bb.3: ## %bb2\\n ; GENERIC-NEXT:    shlq $4, %rcx\\n ; GENERIC-NEXT:    andl $-16777216, %eax ## imm = 0xFF000000\\n@@ -98,26 +99,27 @@ define void @t(i8* nocapture %in, i8* nocapture %out, i32* nocapture %rk, i32 %r\\n ; ATOM-NEXT:    ## kill: def $ecx killed $ecx def $rcx\\n ; ATOM-NEXT:    movl (%rdx), %r15d\\n ; ATOM-NEXT:    movl 4(%rdx), %eax\\n-; ATOM-NEXT:    leaq 20(%rdx), %r11\\n+; ATOM-NEXT:    leaq 20(%rdx), %r14\\n ; ATOM-NEXT:    movq _Te0@{{.*}}(%rip), %r9\\n ; ATOM-NEXT:    movq _Te1@{{.*}}(%rip), %r8\\n ; ATOM-NEXT:    movq _Te3@{{.*}}(%rip), %r10\\n ; ATOM-NEXT:    decl %ecx\\n-; ATOM-NEXT:    movq %rcx, %r14\\n+; ATOM-NEXT:    movq %rcx, %r11\\n ; ATOM-NEXT:    jmp LBB0_1\\n ; ATOM-NEXT:    .p2align 4, 0x90\\n ; ATOM-NEXT:  LBB0_2: ## %bb1\\n ; ATOM-NEXT:    ## in Loop: Header=BB0_1 Depth=1\\n ; ATOM-NEXT:    shrl $16, %eax\\n ; ATOM-NEXT:    shrl $24, %edi\\n-; ATOM-NEXT:    movzbl %al, %eax\\n-; ATOM-NEXT:    xorl (%r8,%rax,4), %r15d\\n+; ATOM-NEXT:    decq %r11\\n+; ATOM-NEXT:    movzbl %al, %ebp\\n ; ATOM-NEXT:    movzbl %bl, %eax\\n ; ATOM-NEXT:    movl (%r10,%rax,4), %eax\\n-; ATOM-NEXT:    xorl -4(%r11), %r15d\\n+; ATOM-NEXT:    xorl (%r8,%rbp,4), %r15d\\n ; ATOM-NEXT:    xorl (%r9,%rdi,4), %eax\\n-; ATOM-NEXT:    xorl (%r11), %eax\\n-; ATOM-NEXT:    addq $16, %r11\\n+; ATOM-NEXT:    xorl -4(%r14), %r15d\\n+; ATOM-NEXT:    xorl (%r14), %eax\\n+; ATOM-NEXT:    addq $16, %r14\\n ; ATOM-NEXT:  LBB0_1: ## %bb\\n ; ATOM-NEXT:    ## =>This Inner Loop Header: Depth=1\\n ; ATOM-NEXT:    movl %eax, %edi\\n@@ -130,15 +132,15 @@ define void @t(i8* nocapture %in, i8* nocapture %out, i32* nocapture %rk, i32 %r\\n ; ATOM-NEXT:    movzbl %r15b, %edi\\n ; ATOM-NEXT:    xorl (%r9,%rbp,4), %ebx\\n ; ATOM-NEXT:    movl (%r10,%rdi,4), %edi\\n-; ATOM-NEXT:    xorl -12(%r11), %ebx\\n+; ATOM-NEXT:    xorl -12(%r14), %ebx\\n ; ATOM-NEXT:    xorl (%r9,%rax,4), %edi\\n ; ATOM-NEXT:    movl %ebx, %eax\\n-; ATOM-NEXT:    xorl -8(%r11), %edi\\n+; ATOM-NEXT:    xorl -8(%r14), %edi\\n ; ATOM-NEXT:    shrl $24, %eax\\n ; ATOM-NEXT:    movl (%r9,%rax,4), %r15d\\n-; ATOM-NEXT:    subq $1, %r14\\n+; ATOM-NEXT:    testq %r11, %r11\\n ; ATOM-NEXT:    movl %edi, %eax\\n-; ATOM-NEXT:    jae LBB0_2\\n+; ATOM-NEXT:    jne LBB0_2\\n ; ATOM-NEXT:  ## %bb.3: ## %bb2\\n ; ATOM-NEXT:    shrl $16, %eax\\n ; ATOM-NEXT:    shrl $8, %edi\"}, {\"sha\": \"ab636c39ddb3d6eb3f56baabb430c8ac9723cf21\", \"filename\": \"llvm/test/Transforms/CodeGenPrepare/X86/overflow-intrinsics.ll\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 7, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Foverflow-intrinsics.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d47eac59efb1de3a4fe797c54e116de55c6559e2/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Foverflow-intrinsics.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Foverflow-intrinsics.ll?ref=d47eac59efb1de3a4fe797c54e116de55c6559e2\", \"patch\": \"@@ -475,23 +475,22 @@ define i64 @foo2(i8 *%p) {\\n   ret i64 %sub\\n }\\n \\n-; When the compare operand has uses besides add/sub,\\n-; the transform may not be profitable.\\n+; Avoid hoisting a math op into a dominating block which would\\n+; increase the critical path.\\n \\n define void @PR41129(i64* %p64) {\\n ; CHECK-LABEL: @PR41129(\\n ; CHECK-NEXT:  entry:\\n ; CHECK-NEXT:    [[KEY:%.*]] = load i64, i64* [[P64:%.*]], align 8\\n-; CHECK-NEXT:    [[TMP0:%.*]] = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 [[KEY]], i64 1)\\n-; CHECK-NEXT:    [[MATH:%.*]] = extractvalue { i64, i1 } [[TMP0]], 0\\n-; CHECK-NEXT:    [[OV:%.*]] = extractvalue { i64, i1 } [[TMP0]], 1\\n-; CHECK-NEXT:    br i1 [[OV]], label [[TRUE:%.*]], label [[FALSE:%.*]]\\n+; CHECK-NEXT:    [[COND17:%.*]] = icmp eq i64 [[KEY]], 0\\n+; CHECK-NEXT:    br i1 [[COND17]], label [[TRUE:%.*]], label [[FALSE:%.*]]\\n ; CHECK:       false:\\n ; CHECK-NEXT:    [[ANDVAL:%.*]] = and i64 [[KEY]], 7\\n ; CHECK-NEXT:    store i64 [[ANDVAL]], i64* [[P64]]\\n ; CHECK-NEXT:    br label [[EXIT:%.*]]\\n ; CHECK:       true:\\n-; CHECK-NEXT:    store i64 [[MATH]], i64* [[P64]]\\n+; CHECK-NEXT:    [[SVALUE:%.*]] = add i64 [[KEY]], -1\\n+; CHECK-NEXT:    store i64 [[SVALUE]], i64* [[P64]]\\n ; CHECK-NEXT:    br label [[EXIT]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hZGYyODhjNWQ5M2U2MGE5MWZlMjI2YWUyZGNlYmFkMGY3NjBhMjU5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/adf288c5d93e60a91fe226ae2dcebad0f760a259", "content": "{\"sha\": \"adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YWRmMjg4YzVkOTNlNjBhOTFmZTIyNmFlMmRjZWJhZDBmNzYwYTI1OQ==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-04-18T17:01:19Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-04-18T17:01:19Z\"}, \"message\": \"[LoopPred] Fix a blatantly obvious bug in r358684\\n\\nThe bug is that I didn't check whether the operand of the invariant_loads were themselves invariant.  I don't know how this got missed in the patch and review.  I even had an unreduced test case locally, and I remember handling this case, but I must have lost it in one of the rebases.  Oops.\\n\\nllvm-svn: 358688\", \"tree\": {\"sha\": \"1f6d97c45218e63cbee36c5a5db4d7953068b9ee\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/1f6d97c45218e63cbee36c5a5db4d7953068b9ee\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/adf288c5d93e60a91fe226ae2dcebad0f760a259/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"51fa60bcbb91961849bef930584ec08ddad8eecf\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/51fa60bcbb91961849bef930584ec08ddad8eecf\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/51fa60bcbb91961849bef930584ec08ddad8eecf\"}], \"stats\": {\"total\": 66, \"additions\": 65, \"deletions\": 1}, \"files\": [{\"sha\": \"15e5b6433af24cf971bd78a26bbab95905162d92\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopPredication.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/adf288c5d93e60a91fe226ae2dcebad0f760a259/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/adf288c5d93e60a91fe226ae2dcebad0f760a259/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp?ref=adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"patch\": \"@@ -510,7 +510,7 @@ bool LoopPredication::isLoopInvariantValue(const SCEV* S) {\\n   // TODO: This should be sunk inside SCEV.\\n   if (const SCEVUnknown *U = dyn_cast<SCEVUnknown>(S))\\n     if (const auto *LI = dyn_cast<LoadInst>(U->getValue()))\\n-      if (LI->isUnordered())\\n+      if (LI->isUnordered() && L->hasLoopInvariantOperands(LI))\\n         if (AA->pointsToConstantMemory(LI->getOperand(0)) ||\\n             LI->getMetadata(LLVMContext::MD_invariant_load) != nullptr)\\n           return true;\"}, {\"sha\": \"ffdc38274efbc15514118ece62d1d7808a75d84e\", \"filename\": \"llvm/test/Transforms/LoopPredication/invariant_load.ll\", \"status\": \"modified\", \"additions\": 64, \"deletions\": 0, \"changes\": 64, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/adf288c5d93e60a91fe226ae2dcebad0f760a259/llvm%2Ftest%2FTransforms%2FLoopPredication%2Finvariant_load.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/adf288c5d93e60a91fe226ae2dcebad0f760a259/llvm%2Ftest%2FTransforms%2FLoopPredication%2Finvariant_load.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopPredication%2Finvariant_load.ll?ref=adf288c5d93e60a91fe226ae2dcebad0f760a259\", \"patch\": \"@@ -126,6 +126,70 @@ exit:\\n   ret i32 %result\\n }\\n \\n+; Case where we have an invariant load, but it's not loading from a loop\\n+; invariant location.\\n+define i32 @neg_varying_invariant_load_op(i32* %array, i32* %lengths, i32 %n) {\\n+; CHECK-LABEL: @neg_varying_invariant_load_op(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[N:%.*]], 0\\n+; CHECK-NEXT:    br i1 [[TMP5]], label [[EXIT:%.*]], label [[LOOP_PREHEADER:%.*]]\\n+; CHECK:       loop.preheader:\\n+; CHECK-NEXT:    br label [[LOOP:%.*]]\\n+; CHECK:       loop:\\n+; CHECK-NEXT:    [[LOOP_ACC:%.*]] = phi i32 [ [[LOOP_ACC_NEXT:%.*]], [[LOOP]] ], [ 0, [[LOOP_PREHEADER]] ]\\n+; CHECK-NEXT:    [[I:%.*]] = phi i32 [ [[I_NEXT:%.*]], [[LOOP]] ], [ 0, [[LOOP_PREHEADER]] ]\\n+; CHECK-NEXT:    [[UNKNOWN:%.*]] = load volatile i1, i1* @UNKNOWN\\n+; CHECK-NEXT:    call void (i1, ...) @llvm.experimental.guard(i1 [[UNKNOWN]]) [ \\\"deopt\\\"() ]\\n+; CHECK-NEXT:    [[LENGTH_ADDR:%.*]] = getelementptr i32, i32* [[LENGTHS:%.*]], i32 [[I]]\\n+; CHECK-NEXT:    [[LEN:%.*]] = load i32, i32* [[LENGTH_ADDR]], align 4, !invariant.load !0\\n+; CHECK-NEXT:    [[WITHIN_BOUNDS:%.*]] = icmp ult i32 [[I]], [[LEN]]\\n+; CHECK-NEXT:    call void (i1, ...) @llvm.experimental.guard(i1 [[WITHIN_BOUNDS]], i32 9) [ \\\"deopt\\\"() ]\\n+; CHECK-NEXT:    [[I_I64:%.*]] = zext i32 [[I]] to i64\\n+; CHECK-NEXT:    [[ARRAY_I_PTR:%.*]] = getelementptr inbounds i32, i32* [[ARRAY:%.*]], i64 [[I_I64]]\\n+; CHECK-NEXT:    [[ARRAY_I:%.*]] = load i32, i32* [[ARRAY_I_PTR]], align 4\\n+; CHECK-NEXT:    [[LOOP_ACC_NEXT]] = add i32 [[LOOP_ACC]], [[ARRAY_I]]\\n+; CHECK-NEXT:    [[I_NEXT]] = add nuw i32 [[I]], 1\\n+; CHECK-NEXT:    [[CONTINUE:%.*]] = icmp ult i32 [[I_NEXT]], [[N]]\\n+; CHECK-NEXT:    br i1 [[CONTINUE]], label [[LOOP]], label [[EXIT_LOOPEXIT:%.*]]\\n+; CHECK:       exit.loopexit:\\n+; CHECK-NEXT:    [[LOOP_ACC_NEXT_LCSSA:%.*]] = phi i32 [ [[LOOP_ACC_NEXT]], [[LOOP]] ]\\n+; CHECK-NEXT:    br label [[EXIT]]\\n+; CHECK:       exit:\\n+; CHECK-NEXT:    [[RESULT:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[LOOP_ACC_NEXT_LCSSA]], [[EXIT_LOOPEXIT]] ]\\n+; CHECK-NEXT:    ret i32 [[RESULT]]\\n+;\\n+entry:\\n+  %tmp5 = icmp eq i32 %n, 0\\n+  br i1 %tmp5, label %exit, label %loop.preheader\\n+\\n+loop.preheader:\\n+  br label %loop\\n+\\n+loop:\\n+  %loop.acc = phi i32 [ %loop.acc.next, %loop ], [ 0, %loop.preheader ]\\n+  %i = phi i32 [ %i.next, %loop ], [ 0, %loop.preheader ]\\n+  %unknown = load volatile i1, i1* @UNKNOWN\\n+  call void (i1, ...) @llvm.experimental.guard(i1 %unknown) [ \\\"deopt\\\"() ]\\n+\\n+  %length.addr = getelementptr i32, i32* %lengths, i32 %i\\n+  %len = load i32, i32* %length.addr, align 4, !invariant.load !{}\\n+  %within.bounds = icmp ult i32 %i, %len\\n+  call void (i1, ...) @llvm.experimental.guard(i1 %within.bounds, i32 9) [ \\\"deopt\\\"() ]\\n+\\n+  %i.i64 = zext i32 %i to i64\\n+  %array.i.ptr = getelementptr inbounds i32, i32* %array, i64 %i.i64\\n+  %array.i = load i32, i32* %array.i.ptr, align 4\\n+  %loop.acc.next = add i32 %loop.acc, %array.i\\n+\\n+  %i.next = add nuw i32 %i, 1\\n+  %continue = icmp ult i32 %i.next, %n\\n+  br i1 %continue, label %loop, label %exit\\n+\\n+exit:\\n+  %result = phi i32 [ 0, %entry ], [ %loop.acc.next, %loop ]\\n+  ret i32 %result\\n+}\\n+\\n ; This is a case where moving the load which provides the limit for the latch\\n ; would be invalid, so we can't preform the tempting transform.  Loading the\\n ; latch limit may fault since we could always fail the guard.\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yZjZlZjJmYzkyOTU1YTViNzdmMzAyMjk0YmE5N2FhNTFkYmFlYzRjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c", "content": "{\"sha\": \"2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MmY2ZWYyZmM5Mjk1NWE1Yjc3ZjMwMjI5NGJhOTdhYTUxZGJhZWM0Yw==\", \"commit\": {\"author\": {\"name\": \"Fangrui Song\", \"email\": \"maskray@google.com\", \"date\": \"2019-05-14T14:37:26Z\"}, \"committer\": {\"name\": \"Fangrui Song\", \"email\": \"maskray@google.com\", \"date\": \"2019-05-14T14:37:26Z\"}, \"message\": \"DWARF v5: emit DW_AT_addr_base if DW_AT_low_pc references .debug_addr\\n\\nThe condition !AddrPool.empty() is tested before attachRangesOrLowHighPC(), which may add an entry to AddrPool. We emit DW_AT_low_pc (DW_FORM_addrx) but may incorrectly omit DW_AT_addr_base for LineTablesOnly. This can be easily reproduced:\\n\\nclang -gdwarf-5 -gmlt -c a.cc\\n\\nFix this by moving !AddrPool.empty() below.\\n\\nThis was discovered while investigating an lld crash (fixed by D61889) on such object files: ld.lld --gdb-index a.o\\n\\nReviewed By: probinson\\n\\nDifferential Revision: https://reviews.llvm.org/D61891\\n\\nllvm-svn: 360678\", \"tree\": {\"sha\": \"ef0f21f435a5e3dae07675ad4bf93de4a529f6b7\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/ef0f21f435a5e3dae07675ad4bf93de4a529f6b7\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/comments\", \"author\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"22561972af4793ccf156aa2425adfd1daeabf6c6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/22561972af4793ccf156aa2425adfd1daeabf6c6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/22561972af4793ccf156aa2425adfd1daeabf6c6\"}], \"stats\": {\"total\": 39, \"additions\": 31, \"deletions\": 8}, \"files\": [{\"sha\": \"070b1b64a36bb6805e5005f068543fff50314f7c\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp?ref=2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"patch\": \"@@ -901,13 +901,6 @@ void DwarfDebug::finalizeModuleInfo() {\\n     // ranges for all subprogram DIEs for mach-o.\\n     DwarfCompileUnit &U = SkCU ? *SkCU : TheCU;\\n \\n-    // We don't keep track of which addresses are used in which CU so this\\n-    // is a bit pessimistic under LTO.\\n-    if (!AddrPool.isEmpty() &&\\n-        (getDwarfVersion() >= 5 ||\\n-         (SkCU && !empty(TheCU.getUnitDie().children()))))\\n-      U.addAddrTableBase();\\n-\\n     if (unsigned NumRanges = TheCU.getRanges().size()) {\\n       if (NumRanges > 1 && useRangesSection())\\n         // A DW_AT_low_pc attribute may also be specified in combination with\\n@@ -920,6 +913,13 @@ void DwarfDebug::finalizeModuleInfo() {\\n       U.attachRangesOrLowHighPC(U.getUnitDie(), TheCU.takeRanges());\\n     }\\n \\n+    // We don't keep track of which addresses are used in which CU so this\\n+    // is a bit pessimistic under LTO.\\n+    if (!AddrPool.isEmpty() &&\\n+        (getDwarfVersion() >= 5 ||\\n+         (SkCU && !empty(TheCU.getUnitDie().children()))))\\n+      U.addAddrTableBase();\\n+\\n     if (getDwarfVersion() >= 5) {\\n       if (U.hasRangeLists())\\n         U.addRnglistsBase();\"}, {\"sha\": \"14dd721b4b9ebe676dbc6b29a90c5e5b3e079b88\", \"filename\": \"llvm/test/DebugInfo/Generic/line-table-addrx.ll\", \"status\": \"added\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fline-table-addrx.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fline-table-addrx.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FGeneric%2Fline-table-addrx.ll?ref=2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"patch\": \"@@ -0,0 +1,21 @@\\n+; RUN: %llc_dwarf -filetype=obj %s -o - | llvm-dwarfdump -v -debug-info - | FileCheck %s\\n+\\n+;; In DWARF v5, emit DW_AT_addr_base as DW_AT_addr_base is used for DW_AT_low_pc.\\n+; CHECK: DW_AT_low_pc [DW_FORM_addrx]\\n+; CHECK: DW_AT_addr_base\\n+\\n+define i64 @foo() !dbg !7 {\\n+entry:\\n+  ret i64 0\\n+}\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, emissionKind: LineTablesOnly, enums: !2, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"a.cc\\\", directory: \\\"/tmp\\\")\\n+!2 = !{}\\n+!3 = !{i32 2, !\\\"Dwarf Version\\\", i32 5}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!7 = distinct !DISubprogram(name: \\\"a\\\", scope: !1, file: !1, line: 22, type: !8, scopeLine: 22, unit: !0, retainedNodes: !2)\\n+!8 = !DISubroutineType(types: !2)\"}, {\"sha\": \"9e770ee3bf89b94b205610fe55f137e4ba3463a4\", \"filename\": \"llvm/test/DebugInfo/X86/convert-debugloc.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FX86%2Fconvert-debugloc.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FX86%2Fconvert-debugloc.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fconvert-debugloc.ll?ref=2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"patch\": \"@@ -11,9 +11,9 @@\\n ; DW5-CHECK-NEXT:               DW_AT_str_offsets_base\\t(0x00000008)\\n ; DW5-CHECK-NEXT:               DW_AT_stmt_list\\t(0x00000000)\\n ; DW5-CHECK-NEXT:               DW_AT_comp_dir {{.*}}\\n-; DW5-CHECK-NEXT:               DW_AT_addr_base\\t(0x00000008)\\n ; DW5-CHECK-NEXT:               DW_AT_low_pc\\t(0x0000000000000000)\\n ; DW5-CHECK-NEXT:               DW_AT_high_pc\\t(0x0000000000000007)\\n+; DW5-CHECK-NEXT:               DW_AT_addr_base\\t(0x00000008)\\n ; DW5-CHECK-NEXT:               DW_AT_loclists_base\\t(0x0000000c)\\n ; DW5-CHECK-EMPTY:\\n ; DW5-CHECK-NEXT: 0x00000027:   DW_TAG_base_type\"}, {\"sha\": \"e120fed23ce998bc4c0aa22a6af4f1acfcffecab\", \"filename\": \"llvm/test/DebugInfo/X86/fission-ranges.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FX86%2Ffission-ranges.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f6ef2fc92955a5b77f302294ba97aa51dbaec4c/llvm%2Ftest%2FDebugInfo%2FX86%2Ffission-ranges.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Ffission-ranges.ll?ref=2f6ef2fc92955a5b77f302294ba97aa51dbaec4c\", \"patch\": \"@@ -12,6 +12,8 @@\\n ; CHECK-NEXT: DW_AT_GNU_dwo_name\\n ; CHECK-NEXT: DW_AT_GNU_dwo_id\\n ; CHECK-NEXT: DW_AT_GNU_ranges_base\\n+; CHECK-NEXT: DW_AT_low_pc\\n+; CHECK-NEXT: DW_AT_high_pc\\n ; CHECK-NEXT: DW_AT_GNU_addr_base [DW_FORM_sec_offset]                   (0x00000000)\\n \\n ; CHECK: .debug_info.dwo contents:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xMDE5MTVjZmRhYmE5Mjg0YjViYjhkZWRiYmNhMmI3Nzg4ZjY4ZGE0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/101915cfdaba9284b5bb8dedbbca2b7788f68da4", "content": "{\"sha\": \"101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MTAxOTE1Y2ZkYWJhOTI4NGI1YmI4ZGVkYmJjYTJiNzc4OGY2OGRhNA==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-06-06T18:02:36Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-06-06T18:02:36Z\"}, \"message\": \"[LoopPred] Fix a bug in unconditional latch bailout introduced in r362284\\n\\nThis is a really silly bug that even a simple test w/an unconditional latch would have caught.  I tried to guard against the case, but put it in the wrong if check.  Oops.\\n\\nllvm-svn: 362727\", \"tree\": {\"sha\": \"f100bd19831bb25c221b15533c89883a536e2afd\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f100bd19831bb25c221b15533c89883a536e2afd\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/101915cfdaba9284b5bb8dedbbca2b7788f68da4/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bd9e810b23b7907a133664a64407df3993f2426a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bd9e810b23b7907a133664a64407df3993f2426a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bd9e810b23b7907a133664a64407df3993f2426a\"}], \"stats\": {\"total\": 30, \"additions\": 28, \"deletions\": 2}, \"files\": [{\"sha\": \"ed715d36984321d712495240931a70a9b6e66855\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopPredication.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/101915cfdaba9284b5bb8dedbbca2b7788f68da4/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/101915cfdaba9284b5bb8dedbbca2b7788f68da4/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopPredication.cpp?ref=101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"patch\": \"@@ -850,7 +850,7 @@ Optional<LoopICmp> LoopPredication::parseLoopLatchICmp() {\\n   }\\n \\n   auto *BI = dyn_cast<BranchInst>(LoopLatch->getTerminator());\\n-  if (!BI) {\\n+  if (!BI || !BI->isConditional()) {\\n     LLVM_DEBUG(dbgs() << \\\"Failed to match the latch terminator!\\\\n\\\");\\n     return None;\\n   }\\n@@ -860,7 +860,7 @@ Optional<LoopICmp> LoopPredication::parseLoopLatchICmp() {\\n       \\\"One of the latch's destinations must be the header\\\");\\n \\n   auto *ICI = dyn_cast<ICmpInst>(BI->getCondition());\\n-  if (!ICI || !BI->isConditional()) {\\n+  if (!ICI) {\\n     LLVM_DEBUG(dbgs() << \\\"Failed to match the latch condition!\\\\n\\\");\\n     return None;\\n   }\"}, {\"sha\": \"88fa1bb95b2aae85da276743b808393b8564a82f\", \"filename\": \"llvm/test/Transforms/LoopPredication/basic.ll\", \"status\": \"modified\", \"additions\": 26, \"deletions\": 0, \"changes\": 26, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/101915cfdaba9284b5bb8dedbbca2b7788f68da4/llvm%2Ftest%2FTransforms%2FLoopPredication%2Fbasic.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/101915cfdaba9284b5bb8dedbbca2b7788f68da4/llvm%2Ftest%2FTransforms%2FLoopPredication%2Fbasic.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopPredication%2Fbasic.ll?ref=101915cfdaba9284b5bb8dedbbca2b7788f68da4\", \"patch\": \"@@ -1853,3 +1853,29 @@ exit:\\n   ret i32 0\\n }\\n \\n+; Negative test, make sure we don't crash on unconditional latches\\n+; TODO: there's no reason we shouldn't be able to predicate the\\n+; condition for an statically infinite loop.\\n+define i32 @unconditional_latch(i32* %a, i32 %length) {\\n+; CHECK-LABEL: @unconditional_latch(\\n+; CHECK-NEXT:  loop.preheader:\\n+; CHECK-NEXT:    br label [[LOOP:%.*]]\\n+; CHECK:       loop:\\n+; CHECK-NEXT:    [[I:%.*]] = phi i32 [ [[I_NEXT:%.*]], [[LOOP]] ], [ 400, [[LOOP_PREHEADER:%.*]] ]\\n+; CHECK-NEXT:    [[WITHIN_BOUNDS:%.*]] = icmp ult i32 [[I]], [[LENGTH:%.*]]\\n+; CHECK-NEXT:    call void (i1, ...) @llvm.experimental.guard(i1 [[WITHIN_BOUNDS]], i32 9) [ \\\"deopt\\\"() ]\\n+; CHECK-NEXT:    store volatile i32 0, i32* [[A:%.*]]\\n+; CHECK-NEXT:    [[I_NEXT]] = add i32 [[I]], 1\\n+; CHECK-NEXT:    br label [[LOOP]]\\n+;\\n+loop.preheader:\\n+  br label %loop\\n+\\n+loop:\\n+  %i = phi i32 [ %i.next, %loop ], [ 400, %loop.preheader ]\\n+  %within.bounds = icmp ult i32 %i, %length\\n+  call void (i1, ...) @llvm.experimental.guard(i1 %within.bounds, i32 9) [ \\\"deopt\\\"() ]\\n+  store volatile i32 0, i32* %a\\n+  %i.next = add i32 %i, 1\\n+  br label %loop\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wYmUyZDI1ZWNjN2Q5YjcxZTAzYjA3NTI5ZWIxNTgxZWZhOTI2NzRhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0be2d25ecc7d9b71e03b07529eb1581efa92674a", "content": "{\"sha\": \"0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGJlMmQyNWVjYzdkOWI3MWUwM2IwNzUyOWViMTU4MWVmYTkyNjc0YQ==\", \"commit\": {\"author\": {\"name\": \"Diogo N. Sampaio\", \"email\": \"diogo.sampaio@arm.com\", \"date\": \"2019-06-13T13:56:19Z\"}, \"committer\": {\"name\": \"Diogo N. Sampaio\", \"email\": \"diogo.sampaio@arm.com\", \"date\": \"2019-06-13T13:56:19Z\"}, \"message\": \"[FIX] Forces shrink wrapping to consider any memory access as aliasing with the stack\\n\\nSummary:\\nRelate bug: https://bugs.llvm.org/show_bug.cgi?id=37472\\n\\nThe shrink wrapping pass prematurally restores the stack, at a point where the stack might still be accessed.\\nTaking an exception can cause the stack to be corrupted.\\n\\nAs a first approach, this patch is overly conservative, assuming that any instruction that may load or store could access\\nthe stack.\\n\\nReviewers: dmgreen, qcolombet\\n\\nReviewed By: qcolombet\\n\\nSubscribers: simpal01, efriedma, eli.friedman, javed.absar, llvm-commits, eugenis, chill, carwil, thegameg\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D63152\\n\\nllvm-svn: 363265\", \"tree\": {\"sha\": \"9419c8cf4eb567d893c069cf7aabb45b26dd2670\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9419c8cf4eb567d893c069cf7aabb45b26dd2670\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0be2d25ecc7d9b71e03b07529eb1581efa92674a/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"86b510aa5840f32284532fcfc5eab7745eb47660\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/86b510aa5840f32284532fcfc5eab7745eb47660\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/86b510aa5840f32284532fcfc5eab7745eb47660\"}], \"stats\": {\"total\": 6492, \"additions\": 4999, \"deletions\": 1493}, \"files\": [{\"sha\": \"2db0ea570598a93610db9064f4f47ac92cc929bb\", \"filename\": \"llvm/lib/CodeGen/ShrinkWrap.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Flib%2FCodeGen%2FShrinkWrap.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Flib%2FCodeGen%2FShrinkWrap.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FShrinkWrap.cpp?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -258,6 +258,15 @@ INITIALIZE_PASS_END(ShrinkWrap, DEBUG_TYPE, \\\"Shrink Wrap Pass\\\", false, false)\\n \\n bool ShrinkWrap::useOrDefCSROrFI(const MachineInstr &MI,\\n                                  RegScavenger *RS) const {\\n+  // This prevents premature stack popping when occurs a indirect stack\\n+  // access. It is overly aggressive for the moment.\\n+  // TODO: - Obvious non-stack loads and store, such as global values,\\n+  //         are known to not access the stack.\\n+  //       - Further, data dependency and alias analysis can validate\\n+  //         that load and stores never derive from the stack pointer.\\n+  if (MI.mayLoadOrStore())\\n+    return true;\\n+\\n   if (MI.getOpcode() == FrameSetupOpcode ||\\n       MI.getOpcode() == FrameDestroyOpcode) {\\n     LLVM_DEBUG(dbgs() << \\\"Frame instruction: \\\" << MI << '\\\\n');\"}, {\"sha\": \"3a50db7454ea607303ca7ef1411984f819a3a2d1\", \"filename\": \"llvm/test/CodeGen/AArch64/arm64-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 769, \"deletions\": 313, \"changes\": 1082, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Farm64-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Farm64-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Farm64-shrink-wrapping.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,45 +1,51 @@\\n-; RUN: llc %s -o - -enable-shrink-wrap=true -disable-post-ra -frame-pointer=all | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE\\n-; RUN: llc %s -o - -enable-shrink-wrap=false -disable-post-ra -frame-pointer=all | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc %s -o - -mtriple=arm64-apple-ios -enable-shrink-wrap=true -disable-post-ra -frame-pointer=all | FileCheck %s --check-prefix=ENABLE\\n+; RUN: llc %s -o - -enable-shrink-wrap=false -disable-post-ra -frame-pointer=all | FileCheck %s --check-prefix=DISABLE\\n target datalayout = \\\"e-m:o-i64:64-i128:128-n32:64-S128\\\"\\n target triple = \\\"arm64-apple-ios\\\"\\n \\n \\n ; Initial motivating example: Simple diamond with a call just on one side.\\n-; CHECK-LABEL: foo:\\n-;\\n-; Compare the arguments and jump to exit.\\n-; No prologue needed.\\n-; ENABLE: cmp w0, w1\\n-; ENABLE-NEXT: b.ge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: sub sp, sp, #32\\n-; CHECK-NEXT: stp [[SAVE_SP:x[0-9]+]], [[CSR:x[0-9]+]], [sp, #16]\\n-; CHECK-NEXT: add [[SAVE_SP]], sp, #16\\n-;\\n-; Compare the arguments and jump to exit.\\n-; After the prologue is set.\\n-; DISABLE: cmp w0, w1\\n-; DISABLE-NEXT: b.ge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Store %a in the alloca.\\n-; CHECK: stur w0, {{\\\\[}}[[SAVE_SP]], #-4]\\n-; Set the alloca address in the second argument.\\n-; CHECK-NEXT: sub x1, [[SAVE_SP]], #4\\n-; Set the first argument to zero.\\n-; CHECK-NEXT: mov w0, wzr\\n-; CHECK-NEXT: bl _doSomething\\n-;\\n-; Without shrink-wrapping, epilogue is in the exit block.\\n-; DISABLE: [[EXIT_LABEL]]:\\n-; Epilogue code.\\n-; CHECK-NEXT: ldp x{{[0-9]+}}, [[CSR]], [sp, #16]\\n-; CHECK-NEXT: add sp, sp, #32\\n-;\\n-; With shrink-wrapping, exit block is a simple return.\\n-; ENABLE: [[EXIT_LABEL]]:\\n-; CHECK-NEXT: ret\\n define i32 @foo(i32 %a, i32 %b) {\\n+; ENABLE-LABEL: foo:\\n+; ENABLE:       ; %bb.0:\\n+; ENABLE-NEXT:    cmp w0, w1\\n+; ENABLE-NEXT:    b.ge LBB0_2\\n+; ENABLE-NEXT:  ; %bb.1: ; %true\\n+; ENABLE-NEXT:    sub sp, sp, #32 ; =32\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    stur w0, [x29, #-4]\\n+; ENABLE-NEXT:    sub x1, x29, #4 ; =4\\n+; ENABLE-NEXT:    mov w0, wzr\\n+; ENABLE-NEXT:    bl _doSomething\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    add sp, sp, #32 ; =32\\n+; ENABLE-NEXT:  LBB0_2: ; %false\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: foo:\\n+; DISABLE:       ; %bb.0:\\n+; DISABLE-NEXT:    sub sp, sp, #32 ; =32\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    cmp w0, w1\\n+; DISABLE-NEXT:    b.ge LBB0_2\\n+; DISABLE-NEXT:  ; %bb.1: ; %true\\n+; DISABLE-NEXT:    stur w0, [x29, #-4]\\n+; DISABLE-NEXT:    sub x1, x29, #4 ; =4\\n+; DISABLE-NEXT:    mov w0, wzr\\n+; DISABLE-NEXT:    bl _doSomething\\n+; DISABLE-NEXT:  LBB0_2: ; %false\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    add sp, sp, #32 ; =32\\n+; DISABLE-NEXT:    ret\\n   %tmp = alloca i32, align 4\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n@@ -60,50 +66,65 @@ declare i32 @doSomething(i32, i32*)\\n \\n ; Check that we do not perform the restore inside the loop whereas the save\\n ; is outside.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop:\\n-;\\n-; Shrink-wrapping allows to skip the prologue in the else case.\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: stp [[CSR1:x[0-9]+]], [[CSR2:x[0-9]+]], [sp, #-32]!\\n-; CHECK-NEXT: stp [[CSR3:x[0-9]+]], [[CSR4:x[0-9]+]], [sp, #16]\\n-; CHECK-NEXT: add [[NEW_SP:x[0-9]+]], sp, #16\\n-;\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: mov [[SUM:w[0-9]+]], wzr\\n-; CHECK-NEXT: mov [[IV:w[0-9]+]], #10\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: ; %for.body\\n-; CHECK: bl _something\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: add [[SUM]], w0, [[SUM]]\\n-; CHECK-NEXT: b.ne [[LOOP]]\\n-;\\n-; Next BB.\\n-; Copy SUM into the returned register + << 3.\\n-; CHECK: lsl w0, [[SUM]], #3\\n-;\\n-; Jump to epilogue.\\n-; DISABLE: b [[EPILOG_BB:LBB[0-9_]+]]\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; DISABLE: lsl w0, w1, #1\\n-; DISABLE: [[EPILOG_BB]]: ; %if.end\\n-;\\n-; Epilogue code.\\n-; CHECK: ldp [[CSR3]], [[CSR4]], [sp, #16]\\n-; CHECK-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #32\\n-; CHECK-NEXT: ret\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: lsl w0, w1, #1\\n-; ENABLE: ret\\n define i32 @freqSaveAndRestoreOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbz w0, LBB1_4\\n+; ENABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    mov w19, wzr\\n+; ENABLE-NEXT:    mov w20, #10\\n+; ENABLE-NEXT:  LBB1_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    bl _something\\n+; ENABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; ENABLE-NEXT:    add w19, w0, w19\\n+; ENABLE-NEXT:    b.ne LBB1_2\\n+; ENABLE-NEXT:  ; %bb.3: ; %for.end\\n+; ENABLE-NEXT:    lsl w0, w19, #3\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB1_4: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    cbz w0, LBB1_4\\n+; DISABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; DISABLE-NEXT:    mov w19, wzr\\n+; DISABLE-NEXT:    mov w20, #10\\n+; DISABLE-NEXT:  LBB1_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    bl _something\\n+; DISABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; DISABLE-NEXT:    add w19, w0, w19\\n+; DISABLE-NEXT:    b.ne LBB1_2\\n+; DISABLE-NEXT:  ; %bb.3: ; %for.end\\n+; DISABLE-NEXT:    lsl w0, w19, #3\\n+; DISABLE-NEXT:    b LBB1_5\\n+; DISABLE-NEXT:  LBB1_4: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:  LBB1_5: ; %if.end\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.body\\n@@ -134,26 +155,54 @@ declare i32 @something(...)\\n \\n ; Check that we do not perform the shrink-wrapping inside the loop even\\n ; though that would be legal. The cost model must prevent that.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop2:\\n-; Prologue code.\\n-; CHECK: stp [[CSR1:x[0-9]+]], [[CSR2:x[0-9]+]], [sp, #-32]!\\n-; CHECK-NEXT: stp [[CSR3:x[0-9]+]], [[CSR4:x[0-9]+]], [sp, #16]\\n-; CHECK-NEXT: add [[NEW_SP:x[0-9]+]], sp, #16\\n-; CHECK: mov [[SUM:w[0-9]+]], wzr\\n-; CHECK-NEXT: mov [[IV:w[0-9]+]], #10\\n-; Next BB.\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ; %for.body\\n-; CHECK: bl _something\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: add [[SUM]], w0, [[SUM]]\\n-; CHECK-NEXT: b.ne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: ; %for.end\\n-; CHECK: mov w0, [[SUM]]\\n-; CHECK-NEXT: ldp [[CSR3]], [[CSR4]], [sp, #16]\\n-; CHECK-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #32\\n-; CHECK-NEXT: ret\\n define i32 @freqSaveAndRestoreOutsideLoop2(i32 %cond) {\\n+; ENABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    mov w19, wzr\\n+; ENABLE-NEXT:    mov w20, #10\\n+; ENABLE-NEXT:  LBB2_1: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    bl _something\\n+; ENABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; ENABLE-NEXT:    add w19, w0, w19\\n+; ENABLE-NEXT:    b.ne LBB2_1\\n+; ENABLE-NEXT:  ; %bb.2: ; %for.end\\n+; ENABLE-NEXT:    mov w0, w19\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    mov w19, wzr\\n+; DISABLE-NEXT:    mov w20, #10\\n+; DISABLE-NEXT:  LBB2_1: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    bl _something\\n+; DISABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; DISABLE-NEXT:    add w19, w0, w19\\n+; DISABLE-NEXT:    b.ne LBB2_1\\n+; DISABLE-NEXT:  ; %bb.2: ; %for.end\\n+; DISABLE-NEXT:    mov w0, w19\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   br label %for.body\\n \\n@@ -172,46 +221,67 @@ for.end:                                          ; preds = %for.body\\n \\n ; Check with a more complex case that we do not have save within the loop and\\n ; restore outside.\\n-; CHECK-LABEL: loopInfoSaveOutsideLoop:\\n-;\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: stp [[CSR1:x[0-9]+]], [[CSR2:x[0-9]+]], [sp, #-32]!\\n-; CHECK-NEXT: stp [[CSR3:x[0-9]+]], [[CSR4:x[0-9]+]], [sp, #16]\\n-; CHECK-NEXT: add [[NEW_SP:x[0-9]+]], sp, #16\\n-;\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: mov [[SUM:w[0-9]+]], wzr\\n-; CHECK-NEXT: mov [[IV:w[0-9]+]], #10\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ; %for.body\\n-; CHECK: bl _something\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: add [[SUM]], w0, [[SUM]]\\n-; CHECK-NEXT: b.ne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: bl _somethingElse\\n-; CHECK-NEXT: lsl w0, [[SUM]], #3\\n-;\\n-; Jump to epilogue.\\n-; DISABLE: b [[EPILOG_BB:LBB[0-9_]+]]\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; DISABLE: lsl w0, w1, #1\\n-; DISABLE: [[EPILOG_BB]]: ; %if.end\\n-; Epilogue code.\\n-; CHECK-NEXT: ldp [[CSR3]], [[CSR4]], [sp, #16]\\n-; CHECK-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #32\\n-; CHECK-NEXT: ret\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: lsl w0, w1, #1\\n-; ENABLE: ret\\n define i32 @loopInfoSaveOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbz w0, LBB3_4\\n+; ENABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    mov w19, wzr\\n+; ENABLE-NEXT:    mov w20, #10\\n+; ENABLE-NEXT:  LBB3_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    bl _something\\n+; ENABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; ENABLE-NEXT:    add w19, w0, w19\\n+; ENABLE-NEXT:    b.ne LBB3_2\\n+; ENABLE-NEXT:  ; %bb.3: ; %for.end\\n+; ENABLE-NEXT:    bl _somethingElse\\n+; ENABLE-NEXT:    lsl w0, w19, #3\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB3_4: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    cbz w0, LBB3_4\\n+; DISABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; DISABLE-NEXT:    mov w19, wzr\\n+; DISABLE-NEXT:    mov w20, #10\\n+; DISABLE-NEXT:  LBB3_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    bl _something\\n+; DISABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; DISABLE-NEXT:    add w19, w0, w19\\n+; DISABLE-NEXT:    b.ne LBB3_2\\n+; DISABLE-NEXT:  ; %bb.3: ; %for.end\\n+; DISABLE-NEXT:    bl _somethingElse\\n+; DISABLE-NEXT:    lsl w0, w19, #3\\n+; DISABLE-NEXT:    b LBB3_5\\n+; DISABLE-NEXT:  LBB3_4: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:  LBB3_5: ; %if.end\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.body\\n@@ -243,45 +313,57 @@ declare void @somethingElse(...)\\n \\n ; Check with a more complex case that we do not have restore within the loop and\\n ; save outside.\\n-; CHECK-LABEL: loopInfoRestoreOutsideLoop:\\n-;\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: stp [[CSR1:x[0-9]+]], [[CSR2:x[0-9]+]], [sp, #-32]!\\n-; CHECK-NEXT: stp [[CSR3:x[0-9]+]], [[CSR4:x[0-9]+]], [sp, #16]\\n-; CHECK-NEXT: add [[NEW_SP:x[0-9]+]], sp, #16\\n-;\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: bl _somethingElse\\n-; CHECK-NEXT: mov [[SUM:w[0-9]+]], wzr\\n-; CHECK-NEXT: mov [[IV:w[0-9]+]], #10\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ; %for.body\\n-; CHECK: bl _something\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: add [[SUM]], w0, [[SUM]]\\n-; CHECK-NEXT: b.ne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: lsl w0, [[SUM]], #3\\n-;\\n-; Jump to epilogue.\\n-; DISABLE: b [[EPILOG_BB:LBB[0-9_]+]]\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; DISABLE: lsl w0, w1, #1\\n-; DISABLE: [[EPILOG_BB]]: ; %if.end\\n-; Epilogue code.\\n-; CHECK: ldp [[CSR3]], [[CSR4]], [sp, #16]\\n-; CHECK-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #32\\n-; CHECK-NEXT: ret\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ; %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: lsl w0, w1, #1\\n-; ENABLE: ret\\n define i32 @loopInfoRestoreOutsideLoop(i32 %cond, i32 %N) nounwind {\\n+; ENABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbz w0, LBB4_4\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.then\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    bl _somethingElse\\n+; ENABLE-NEXT:    mov w19, wzr\\n+; ENABLE-NEXT:    mov w20, #10\\n+; ENABLE-NEXT:  LBB4_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    bl _something\\n+; ENABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; ENABLE-NEXT:    add w19, w0, w19\\n+; ENABLE-NEXT:    b.ne LBB4_2\\n+; ENABLE-NEXT:  ; %bb.3: ; %for.end\\n+; ENABLE-NEXT:    lsl w0, w19, #3\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB4_4: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    cbz w0, LBB4_4\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.then\\n+; DISABLE-NEXT:    bl _somethingElse\\n+; DISABLE-NEXT:    mov w19, wzr\\n+; DISABLE-NEXT:    mov w20, #10\\n+; DISABLE-NEXT:  LBB4_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    bl _something\\n+; DISABLE-NEXT:    subs w20, w20, #1 ; =1\\n+; DISABLE-NEXT:    add w19, w0, w19\\n+; DISABLE-NEXT:    b.ne LBB4_2\\n+; DISABLE-NEXT:  ; %bb.3: ; %for.end\\n+; DISABLE-NEXT:    lsl w0, w19, #3\\n+; DISABLE-NEXT:    b LBB4_5\\n+; DISABLE-NEXT:  LBB4_4: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:  LBB4_5: ; %if.end\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -313,49 +395,74 @@ if.end:                                           ; preds = %if.else, %for.end\\n }\\n \\n ; Check that we handle function with no frame information correctly.\\n-; CHECK-LABEL: emptyFrame:\\n-; CHECK: ; %entry\\n-; CHECK-NEXT: mov w0, wzr\\n-; CHECK-NEXT: ret\\n define i32 @emptyFrame() {\\n+; ENABLE-LABEL: emptyFrame:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    mov w0, wzr\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: emptyFrame:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    mov w0, wzr\\n+; DISABLE-NEXT:    ret\\n entry:\\n   ret i32 0\\n }\\n \\n ; Check that we handle variadic function correctly.\\n-; CHECK-LABEL: variadicFunc:\\n-;\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: sub sp, sp, #16\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Sum is merged with the returned register.\\n-; CHECK: add [[VA_BASE:x[0-9]+]], sp, #16\\n-; CHECK-NEXT: cmp w1, #1\\n-; CHECK-NEXT: str [[VA_BASE]], [sp, #8]\\n-; CHECK-NEXT: mov [[SUM:w0]], wzr\\n-; CHECK-NEXT: b.lt [[IFEND_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ; %for.body\\n-; CHECK: ldr [[VA_ADDR:x[0-9]+]], [sp, #8]\\n-; CHECK-NEXT: add [[NEXT_VA_ADDR:x[0-9]+]], [[VA_ADDR]], #8\\n-; CHECK-NEXT: str [[NEXT_VA_ADDR]], [sp, #8]\\n-; CHECK-NEXT: ldr [[VA_VAL:w[0-9]+]], {{\\\\[}}[[VA_ADDR]]]\\n-; CHECK-NEXT: subs w1, w1, #1\\n-; CHECK-NEXT: add [[SUM]], [[SUM]], [[VA_VAL]]\\n-; CHECK-NEXT: b.ne [[LOOP_LABEL]]\\n-; CHECK-NEXT: [[IFEND_LABEL]]:\\n-; Epilogue code.\\n-; CHECK: add sp, sp, #16\\n-; CHECK-NEXT: ret\\n-;\\n-; CHECK: [[ELSE_LABEL]]: ; %if.else\\n-; CHECK-NEXT: lsl w0, w1, #1\\n-; DISABLE-NEXT: add sp, sp, #16\\n-; CHECK-NEXT: ret\\n define i32 @variadicFunc(i32 %cond, i32 %count, ...) nounwind {\\n+; ENABLE-LABEL: variadicFunc:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbz w0, LBB6_4\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.then\\n+; ENABLE-NEXT:    sub sp, sp, #16 ; =16\\n+; ENABLE-NEXT:    add x8, sp, #16 ; =16\\n+; ENABLE-NEXT:    cmp w1, #1 ; =1\\n+; ENABLE-NEXT:    str x8, [sp, #8]\\n+; ENABLE-NEXT:    mov w0, wzr\\n+; ENABLE-NEXT:    b.lt LBB6_3\\n+; ENABLE-NEXT:  LBB6_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ldr x8, [sp, #8]\\n+; ENABLE-NEXT:    add x9, x8, #8 ; =8\\n+; ENABLE-NEXT:    str x9, [sp, #8]\\n+; ENABLE-NEXT:    ldr w8, [x8]\\n+; ENABLE-NEXT:    subs w1, w1, #1 ; =1\\n+; ENABLE-NEXT:    add w0, w0, w8\\n+; ENABLE-NEXT:    b.ne LBB6_2\\n+; ENABLE-NEXT:  LBB6_3: ; %for.end\\n+; ENABLE-NEXT:    add sp, sp, #16 ; =16\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB6_4: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: variadicFunc:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    sub sp, sp, #16 ; =16\\n+; DISABLE-NEXT:    cbz w0, LBB6_4\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.then\\n+; DISABLE-NEXT:    add x8, sp, #16 ; =16\\n+; DISABLE-NEXT:    cmp w1, #1 ; =1\\n+; DISABLE-NEXT:    str x8, [sp, #8]\\n+; DISABLE-NEXT:    mov w0, wzr\\n+; DISABLE-NEXT:    b.lt LBB6_3\\n+; DISABLE-NEXT:  LBB6_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ldr x8, [sp, #8]\\n+; DISABLE-NEXT:    add x9, x8, #8 ; =8\\n+; DISABLE-NEXT:    str x9, [sp, #8]\\n+; DISABLE-NEXT:    ldr w8, [x8]\\n+; DISABLE-NEXT:    subs w1, w1, #1 ; =1\\n+; DISABLE-NEXT:    add w0, w0, w8\\n+; DISABLE-NEXT:    b.ne LBB6_2\\n+; DISABLE-NEXT:  LBB6_3: ; %if.end\\n+; DISABLE-NEXT:    add sp, sp, #16 ; =16\\n+; DISABLE-NEXT:    ret\\n+; DISABLE-NEXT:  LBB6_4: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:    add sp, sp, #16 ; =16\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %ap = alloca i8*, align 8\\n   %tobool = icmp eq i32 %cond, 0\\n@@ -395,35 +502,55 @@ declare void @llvm.va_start(i8*)\\n declare void @llvm.va_end(i8*)\\n \\n ; Check that we handle inline asm correctly.\\n-; CHECK-LABEL: inlineAsm:\\n-;\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: x19.\\n-; CHECK: stp [[CSR1:x[0-9]+]], [[CSR2:x19]], [sp, #-16]!\\n-;\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: mov [[IV:w[0-9]+]], #10\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ; %for.body\\n-; Inline asm statement.\\n-; CHECK: subs [[IV]], [[IV]], #1\\n-; CHECK: add x19, x19, #1\\n-; CHECK: b.ne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: mov w0, wzr\\n-; Epilogue code.\\n-; CHECK-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #16\\n-; CHECK-NEXT: ret\\n-; Next BB.\\n-; CHECK: [[ELSE_LABEL]]: ; %if.else\\n-; CHECK-NEXT: lsl w0, w1, #1\\n-; Epilogue code.\\n-; DISABLE-NEXT: ldp [[CSR1]], [[CSR2]], [sp], #16\\n-; CHECK-NEXT: ret\\n define i32 @inlineAsm(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: inlineAsm:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbz w0, LBB7_4\\n+; ENABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-16]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset w19, -8\\n+; ENABLE-NEXT:    .cfi_offset w20, -16\\n+; ENABLE-NEXT:    mov w8, #10\\n+; ENABLE-NEXT:  LBB7_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    subs w8, w8, #1 ; =1\\n+; ENABLE-NEXT:    ; InlineAsm Start\\n+; ENABLE-NEXT:    add x19, x19, #1 ; =1\\n+; ENABLE-NEXT:    ; InlineAsm End\\n+; ENABLE-NEXT:    b.ne LBB7_2\\n+; ENABLE-NEXT:  ; %bb.3:\\n+; ENABLE-NEXT:    mov w0, wzr\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #16 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB7_4: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: inlineAsm:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-16]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset w19, -8\\n+; DISABLE-NEXT:    .cfi_offset w20, -16\\n+; DISABLE-NEXT:    cbz w0, LBB7_4\\n+; DISABLE-NEXT:  ; %bb.1: ; %for.body.preheader\\n+; DISABLE-NEXT:    mov w8, #10\\n+; DISABLE-NEXT:  LBB7_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    subs w8, w8, #1 ; =1\\n+; DISABLE-NEXT:    ; InlineAsm Start\\n+; DISABLE-NEXT:    add x19, x19, #1 ; =1\\n+; DISABLE-NEXT:    ; InlineAsm End\\n+; DISABLE-NEXT:    b.ne LBB7_2\\n+; DISABLE-NEXT:  ; %bb.3:\\n+; DISABLE-NEXT:    mov w0, wzr\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #16 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n+; DISABLE-NEXT:  LBB7_4: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #16 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.body\\n@@ -445,38 +572,55 @@ if.end:                                           ; preds = %for.body, %if.else\\n }\\n \\n ; Check that we handle calls to variadic functions correctly.\\n-; CHECK-LABEL: callVariadicFunc:\\n-;\\n-; ENABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: sub sp, sp, #64\\n-; CHECK-NEXT: stp [[CSR1:x[0-9]+]], [[CSR2:x[0-9]+]], [sp, #48]\\n-; CHECK-NEXT: add [[NEW_SP:x[0-9]+]], sp, #48\\n-;\\n-; DISABLE: cbz w0, [[ELSE_LABEL:LBB[0-9_]+]]\\n-; Setup of the varags.\\n-; CHECK: stp x1, x1, [sp, #32]\\n-; CHECK-NEXT: stp x1, x1, [sp, #16]\\n-; CHECK-NEXT: stp x1, x1, [sp]\\n-; CHECK-NEXT: mov w0, w1\\n-; CHECK-NEXT: bl _someVariadicFunc\\n-; CHECK-NEXT: lsl w0, w0, #3\\n-;\\n-; DISABLE: b [[IFEND_LABEL:LBB[0-9_]+]]\\n-; DISABLE: [[ELSE_LABEL]]: ; %if.else\\n-; DISABLE-NEXT: lsl w0, w1, #1\\n-; DISABLE: [[IFEND_LABEL]]: ; %if.end\\n-;\\n-; Epilogue code.\\n-; CHECK: ldp [[CSR1]], [[CSR2]], [sp, #48]\\n-; CHECK-NEXT: add sp, sp, #64\\n-; CHECK-NEXT: ret\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ; %if.else\\n-; ENABLE-NEXT: lsl w0, w1, #1\\n-; ENABLE-NEXT: ret\\n define i32 @callVariadicFunc(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: callVariadicFunc:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    ; kill: def $w1 killed $w1 def $x1\\n+; ENABLE-NEXT:    cbz w0, LBB8_2\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.then\\n+; ENABLE-NEXT:    sub sp, sp, #64 ; =64\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #48] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #48 ; =48\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    stp x1, x1, [sp, #32]\\n+; ENABLE-NEXT:    stp x1, x1, [sp, #16]\\n+; ENABLE-NEXT:    stp x1, x1, [sp]\\n+; ENABLE-NEXT:    mov w0, w1\\n+; ENABLE-NEXT:    bl _someVariadicFunc\\n+; ENABLE-NEXT:    lsl w0, w0, #3\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #48] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    add sp, sp, #64 ; =64\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB8_2: ; %if.else\\n+; ENABLE-NEXT:    lsl w0, w1, #1\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: callVariadicFunc:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    sub sp, sp, #64 ; =64\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #48] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #48 ; =48\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    ; kill: def $w1 killed $w1 def $x1\\n+; DISABLE-NEXT:    cbz w0, LBB8_2\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.then\\n+; DISABLE-NEXT:    stp x1, x1, [sp, #32]\\n+; DISABLE-NEXT:    stp x1, x1, [sp, #16]\\n+; DISABLE-NEXT:    stp x1, x1, [sp]\\n+; DISABLE-NEXT:    mov w0, w1\\n+; DISABLE-NEXT:    bl _someVariadicFunc\\n+; DISABLE-NEXT:    lsl w0, w0, #3\\n+; DISABLE-NEXT:    b LBB8_3\\n+; DISABLE-NEXT:  LBB8_2: ; %if.else\\n+; DISABLE-NEXT:    lsl w0, w1, #1\\n+; DISABLE-NEXT:  LBB8_3: ; %if.end\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #48] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    add sp, sp, #64 ; =64\\n+; DISABLE-NEXT:    ret\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -501,24 +645,35 @@ declare i32 @someVariadicFunc(i32, ...)\\n ; Although this is not incorrect to insert such code, it is useless\\n ; and it hurts the binary size.\\n ;\\n-; CHECK-LABEL: noreturn:\\n-; DISABLE: stp\\n-;\\n-; CHECK: cbnz w0, [[ABORT:LBB[0-9_]+]]\\n-;\\n-; CHECK: mov w0, #42\\n-;\\n-; DISABLE-NEXT: ldp\\n-;\\n-; CHECK-NEXT: ret\\n-;\\n-; CHECK: [[ABORT]]: ; %if.abort\\n-;\\n-; ENABLE: stp\\n-;\\n-; CHECK: bl _abort\\n-; ENABLE-NOT: ldp\\n define i32 @noreturn(i8 signext %bad_thing) {\\n+; ENABLE-LABEL: noreturn:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbnz w0, LBB9_2\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.end\\n+; ENABLE-NEXT:    mov w0, #42\\n+; ENABLE-NEXT:    ret\\n+; ENABLE-NEXT:  LBB9_2: ; %if.abort\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    mov x29, sp\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    bl _abort\\n+;\\n+; DISABLE-LABEL: noreturn:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    mov x29, sp\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    cbnz w0, LBB9_2\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.end\\n+; DISABLE-NEXT:    mov w0, #42\\n+; DISABLE-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n+; DISABLE-NEXT:  LBB9_2: ; %if.abort\\n+; DISABLE-NEXT:    bl _abort\\n entry:\\n   %tobool = icmp eq i8 %bad_thing, 0\\n   br i1 %tobool, label %if.end, label %if.abort\\n@@ -543,9 +698,60 @@ attributes #0 = { noreturn nounwind }\\n ; should return gracefully and continue compilation.\\n ; The only condition for this test is the compilation finishes correctly.\\n ;\\n-; CHECK-LABEL: infiniteloop\\n-; CHECK: ret\\n define void @infiniteloop() {\\n+; ENABLE-LABEL: infiniteloop:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    cbnz wzr, LBB10_3\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.then\\n+; ENABLE-NEXT:    sub x19, sp, #16 ; =16\\n+; ENABLE-NEXT:    mov sp, x19\\n+; ENABLE-NEXT:    mov w20, wzr\\n+; ENABLE-NEXT:  LBB10_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    bl _something\\n+; ENABLE-NEXT:    add w20, w0, w20\\n+; ENABLE-NEXT:    str w20, [x19]\\n+; ENABLE-NEXT:    b LBB10_2\\n+; ENABLE-NEXT:  LBB10_3: ; %if.end\\n+; ENABLE-NEXT:    sub sp, x29, #16 ; =16\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: infiniteloop:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    cbnz wzr, LBB10_3\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.then\\n+; DISABLE-NEXT:    sub x19, sp, #16 ; =16\\n+; DISABLE-NEXT:    mov sp, x19\\n+; DISABLE-NEXT:    mov w20, wzr\\n+; DISABLE-NEXT:  LBB10_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    bl _something\\n+; DISABLE-NEXT:    add w20, w0, w20\\n+; DISABLE-NEXT:    str w20, [x19]\\n+; DISABLE-NEXT:    b LBB10_2\\n+; DISABLE-NEXT:  LBB10_3: ; %if.end\\n+; DISABLE-NEXT:    sub sp, x29, #16 ; =16\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n \\n@@ -565,9 +771,72 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with a body bigger than just one block.\\n-; CHECK-LABEL: infiniteloop2\\n-; CHECK: ret\\n define void @infiniteloop2() {\\n+; ENABLE-LABEL: infiniteloop2:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #16 ; =16\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    cbnz wzr, LBB11_3\\n+; ENABLE-NEXT:  ; %bb.1: ; %if.then\\n+; ENABLE-NEXT:    sub x8, sp, #16 ; =16\\n+; ENABLE-NEXT:    mov sp, x8\\n+; ENABLE-NEXT:    mov w9, wzr\\n+; ENABLE-NEXT:    ; InlineAsm Start\\n+; ENABLE-NEXT:    mov x10, #0\\n+; ENABLE-NEXT:    ; InlineAsm End\\n+; ENABLE-NEXT:  LBB11_2: ; %for.body\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    add w9, w10, w9\\n+; ENABLE-NEXT:    str w9, [x8]\\n+; ENABLE-NEXT:    ; InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ; InlineAsm End\\n+; ENABLE-NEXT:    mov w9, #1\\n+; ENABLE-NEXT:    b LBB11_2\\n+; ENABLE-NEXT:  LBB11_3: ; %if.end\\n+; ENABLE-NEXT:    sub sp, x29, #16 ; =16\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: infiniteloop2:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #-32]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #16 ; =16\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    cbnz wzr, LBB11_3\\n+; DISABLE-NEXT:  ; %bb.1: ; %if.then\\n+; DISABLE-NEXT:    sub x8, sp, #16 ; =16\\n+; DISABLE-NEXT:    mov sp, x8\\n+; DISABLE-NEXT:    mov w9, wzr\\n+; DISABLE-NEXT:    ; InlineAsm Start\\n+; DISABLE-NEXT:    mov x10, #0\\n+; DISABLE-NEXT:    ; InlineAsm End\\n+; DISABLE-NEXT:  LBB11_2: ; %for.body\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    add w9, w10, w9\\n+; DISABLE-NEXT:    str w9, [x8]\\n+; DISABLE-NEXT:    ; InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ; InlineAsm End\\n+; DISABLE-NEXT:    mov w9, #1\\n+; DISABLE-NEXT:    b LBB11_2\\n+; DISABLE-NEXT:  LBB11_3: ; %if.end\\n+; DISABLE-NEXT:    sub sp, x29, #16 ; =16\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp], #32 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n \\n@@ -595,9 +864,54 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with two nested infinite loop.\\n-; CHECK-LABEL: infiniteloop3\\n-; CHECK: ret\\n define void @infiniteloop3() {\\n+; ENABLE-LABEL: infiniteloop3:\\n+; ENABLE:       ; %bb.0: ; %entry\\n+; ENABLE-NEXT:    cbnz wzr, LBB12_5\\n+; ENABLE-NEXT:  ; %bb.1: ; %loop2a.preheader\\n+; ENABLE-NEXT:    mov x8, xzr\\n+; ENABLE-NEXT:    mov x9, xzr\\n+; ENABLE-NEXT:    mov x11, xzr\\n+; ENABLE-NEXT:    b LBB12_3\\n+; ENABLE-NEXT:  LBB12_2: ; %loop2b\\n+; ENABLE-NEXT:    ; in Loop: Header=BB12_3 Depth=1\\n+; ENABLE-NEXT:    str x10, [x11]\\n+; ENABLE-NEXT:    mov x11, x10\\n+; ENABLE-NEXT:  LBB12_3: ; %loop1\\n+; ENABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    mov x10, x9\\n+; ENABLE-NEXT:    ldr x9, [x8]\\n+; ENABLE-NEXT:    cbnz x8, LBB12_2\\n+; ENABLE-NEXT:  ; %bb.4: ; in Loop: Header=BB12_3 Depth=1\\n+; ENABLE-NEXT:    mov x8, x10\\n+; ENABLE-NEXT:    mov x11, x10\\n+; ENABLE-NEXT:    b LBB12_3\\n+; ENABLE-NEXT:  LBB12_5: ; %end\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: infiniteloop3:\\n+; DISABLE:       ; %bb.0: ; %entry\\n+; DISABLE-NEXT:    cbnz wzr, LBB12_5\\n+; DISABLE-NEXT:  ; %bb.1: ; %loop2a.preheader\\n+; DISABLE-NEXT:    mov x8, xzr\\n+; DISABLE-NEXT:    mov x9, xzr\\n+; DISABLE-NEXT:    mov x11, xzr\\n+; DISABLE-NEXT:    b LBB12_3\\n+; DISABLE-NEXT:  LBB12_2: ; %loop2b\\n+; DISABLE-NEXT:    ; in Loop: Header=BB12_3 Depth=1\\n+; DISABLE-NEXT:    str x10, [x11]\\n+; DISABLE-NEXT:    mov x11, x10\\n+; DISABLE-NEXT:  LBB12_3: ; %loop1\\n+; DISABLE-NEXT:    ; =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    mov x10, x9\\n+; DISABLE-NEXT:    ldr x9, [x8]\\n+; DISABLE-NEXT:    cbnz x8, LBB12_2\\n+; DISABLE-NEXT:  ; %bb.4: ; in Loop: Header=BB12_3 Depth=1\\n+; DISABLE-NEXT:    mov x8, x10\\n+; DISABLE-NEXT:    mov x11, x10\\n+; DISABLE-NEXT:    b LBB12_3\\n+; DISABLE-NEXT:  LBB12_5: ; %end\\n+; DISABLE-NEXT:    ret\\n entry:\\n   br i1 undef, label %loop2a, label %body\\n \\n@@ -628,22 +942,50 @@ end:\\n \\n ; Re-aligned stack pointer.  See bug 26642.  Avoid clobbering live\\n ; values in the prologue when re-aligning the stack pointer.\\n-; CHECK-LABEL: stack_realign:\\n-; ENABLE-DAG: lsl w[[LSL1:[0-9]+]], w0, w1\\n-; ENABLE-DAG: lsl w[[LSL2:[0-9]+]], w1, w0\\n-; DISABLE-NOT: lsl w[[LSL1:[0-9]+]], w0, w1\\n-; DISABLE-NOT: lsl w[[LSL2:[0-9]+]], w1, w0\\n-; CHECK: stp x29, x30, [sp, #-16]!\\n-; CHECK: mov x29, sp\\n-; ENABLE-NOT: sub x[[LSL1]], sp, #16\\n-; ENABLE-NOT: sub x[[LSL2]], sp, #16\\n-; DISABLE: sub x{{[0-9]+}}, sp, #16\\n-; DISABLE-DAG: lsl w[[LSL1:[0-9]+]], w0, w1\\n-; DISABLE-DAG: lsl w[[LSL2:[0-9]+]], w1, w0\\n-; CHECK-DAG: str w[[LSL1]],\\n-; CHECK-DAG: str w[[LSL2]],\\n-\\n define i32 @stack_realign(i32 %a, i32 %b, i32* %ptr1, i32* %ptr2) {\\n+; ENABLE-LABEL: stack_realign:\\n+; ENABLE:       ; %bb.0:\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    mov x29, sp\\n+; ENABLE-NEXT:    sub x9, sp, #16 ; =16\\n+; ENABLE-NEXT:    and sp, x9, #0xffffffffffffffe0\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    lsl w8, w0, w1\\n+; ENABLE-NEXT:    cmp w0, w1\\n+; ENABLE-NEXT:    lsl w9, w1, w0\\n+; ENABLE-NEXT:    b.ge LBB13_2\\n+; ENABLE-NEXT:  ; %bb.1: ; %true\\n+; ENABLE-NEXT:    str w0, [sp]\\n+; ENABLE-NEXT:  LBB13_2: ; %false\\n+; ENABLE-NEXT:    str w8, [x2]\\n+; ENABLE-NEXT:    str w9, [x3]\\n+; ENABLE-NEXT:    mov sp, x29\\n+; ENABLE-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: stack_realign:\\n+; DISABLE:       ; %bb.0:\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    mov x29, sp\\n+; DISABLE-NEXT:    sub x9, sp, #16 ; =16\\n+; DISABLE-NEXT:    and sp, x9, #0xffffffffffffffe0\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    lsl w8, w0, w1\\n+; DISABLE-NEXT:    cmp w0, w1\\n+; DISABLE-NEXT:    lsl w9, w1, w0\\n+; DISABLE-NEXT:    b.ge LBB13_2\\n+; DISABLE-NEXT:  ; %bb.1: ; %true\\n+; DISABLE-NEXT:    str w0, [sp]\\n+; DISABLE-NEXT:  LBB13_2: ; %false\\n+; DISABLE-NEXT:    str w8, [x2]\\n+; DISABLE-NEXT:    str w9, [x3]\\n+; DISABLE-NEXT:    mov sp, x29\\n+; DISABLE-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n   %tmp = alloca i32, align 32\\n   %shl1 = shl i32 %a, %b\\n   %shl2 = shl i32 %b, %a\\n@@ -667,12 +1009,126 @@ false:\\n ; ensuring we have a scratch register to re-align the stack pointer is\\n ; too complicated.  Output should be the same for both enabled and\\n ; disabled shrink wrapping.\\n-; CHECK-LABEL: stack_realign2:\\n-; CHECK: stp {{x[0-9]+}}, {{x[0-9]+}}, [sp, #-{{[0-9]+}}]!\\n-; CHECK: add x29, sp, #{{[0-9]+}}\\n-; CHECK: lsl {{w[0-9]+}}, w0, w1\\n-\\n define void @stack_realign2(i32 %a, i32 %b, i32* %ptr1, i32* %ptr2, i32* %ptr3, i32* %ptr4, i32* %ptr5, i32* %ptr6) {\\n+; ENABLE-LABEL: stack_realign2:\\n+; ENABLE:       ; %bb.0:\\n+; ENABLE-NEXT:    stp x28, x27, [sp, #-96]! ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x24, x23, [sp, #32] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x22, x21, [sp, #48] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x20, x19, [sp, #64] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    stp x29, x30, [sp, #80] ; 16-byte Folded Spill\\n+; ENABLE-NEXT:    add x29, sp, #80 ; =80\\n+; ENABLE-NEXT:    sub x9, sp, #32 ; =32\\n+; ENABLE-NEXT:    and sp, x9, #0xffffffffffffffe0\\n+; ENABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; ENABLE-NEXT:    .cfi_offset w30, -8\\n+; ENABLE-NEXT:    .cfi_offset w29, -16\\n+; ENABLE-NEXT:    .cfi_offset w19, -24\\n+; ENABLE-NEXT:    .cfi_offset w20, -32\\n+; ENABLE-NEXT:    .cfi_offset w21, -40\\n+; ENABLE-NEXT:    .cfi_offset w22, -48\\n+; ENABLE-NEXT:    .cfi_offset w23, -56\\n+; ENABLE-NEXT:    .cfi_offset w24, -64\\n+; ENABLE-NEXT:    .cfi_offset w25, -72\\n+; ENABLE-NEXT:    .cfi_offset w26, -80\\n+; ENABLE-NEXT:    .cfi_offset w27, -88\\n+; ENABLE-NEXT:    .cfi_offset w28, -96\\n+; ENABLE-NEXT:    lsl w8, w0, w1\\n+; ENABLE-NEXT:    lsl w9, w1, w0\\n+; ENABLE-NEXT:    lsr w10, w0, w1\\n+; ENABLE-NEXT:    lsr w11, w1, w0\\n+; ENABLE-NEXT:    add w12, w1, w0\\n+; ENABLE-NEXT:    sub w13, w1, w0\\n+; ENABLE-NEXT:    cmp w0, w1\\n+; ENABLE-NEXT:    add w17, w8, w9\\n+; ENABLE-NEXT:    sub w16, w9, w10\\n+; ENABLE-NEXT:    add w15, w10, w11\\n+; ENABLE-NEXT:    add w14, w11, w12\\n+; ENABLE-NEXT:    b.ge LBB14_2\\n+; ENABLE-NEXT:  ; %bb.1: ; %true\\n+; ENABLE-NEXT:    str w0, [sp]\\n+; ENABLE-NEXT:    ; InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ; InlineAsm End\\n+; ENABLE-NEXT:  LBB14_2: ; %false\\n+; ENABLE-NEXT:    str w8, [x2]\\n+; ENABLE-NEXT:    str w9, [x3]\\n+; ENABLE-NEXT:    str w10, [x4]\\n+; ENABLE-NEXT:    str w11, [x5]\\n+; ENABLE-NEXT:    str w12, [x6]\\n+; ENABLE-NEXT:    str w13, [x7]\\n+; ENABLE-NEXT:    stp w0, w1, [x2, #4]\\n+; ENABLE-NEXT:    stp w17, w16, [x2, #12]\\n+; ENABLE-NEXT:    stp w15, w14, [x2, #20]\\n+; ENABLE-NEXT:    sub sp, x29, #80 ; =80\\n+; ENABLE-NEXT:    ldp x29, x30, [sp, #80] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x20, x19, [sp, #64] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x22, x21, [sp, #48] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x24, x23, [sp, #32] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x26, x25, [sp, #16] ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ldp x28, x27, [sp], #96 ; 16-byte Folded Reload\\n+; ENABLE-NEXT:    ret\\n+;\\n+; DISABLE-LABEL: stack_realign2:\\n+; DISABLE:       ; %bb.0:\\n+; DISABLE-NEXT:    stp x28, x27, [sp, #-96]! ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x24, x23, [sp, #32] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x22, x21, [sp, #48] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x20, x19, [sp, #64] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    stp x29, x30, [sp, #80] ; 16-byte Folded Spill\\n+; DISABLE-NEXT:    add x29, sp, #80 ; =80\\n+; DISABLE-NEXT:    sub x9, sp, #32 ; =32\\n+; DISABLE-NEXT:    and sp, x9, #0xffffffffffffffe0\\n+; DISABLE-NEXT:    .cfi_def_cfa w29, 16\\n+; DISABLE-NEXT:    .cfi_offset w30, -8\\n+; DISABLE-NEXT:    .cfi_offset w29, -16\\n+; DISABLE-NEXT:    .cfi_offset w19, -24\\n+; DISABLE-NEXT:    .cfi_offset w20, -32\\n+; DISABLE-NEXT:    .cfi_offset w21, -40\\n+; DISABLE-NEXT:    .cfi_offset w22, -48\\n+; DISABLE-NEXT:    .cfi_offset w23, -56\\n+; DISABLE-NEXT:    .cfi_offset w24, -64\\n+; DISABLE-NEXT:    .cfi_offset w25, -72\\n+; DISABLE-NEXT:    .cfi_offset w26, -80\\n+; DISABLE-NEXT:    .cfi_offset w27, -88\\n+; DISABLE-NEXT:    .cfi_offset w28, -96\\n+; DISABLE-NEXT:    lsl w8, w0, w1\\n+; DISABLE-NEXT:    lsl w9, w1, w0\\n+; DISABLE-NEXT:    lsr w10, w0, w1\\n+; DISABLE-NEXT:    lsr w11, w1, w0\\n+; DISABLE-NEXT:    add w12, w1, w0\\n+; DISABLE-NEXT:    sub w13, w1, w0\\n+; DISABLE-NEXT:    cmp w0, w1\\n+; DISABLE-NEXT:    add w17, w8, w9\\n+; DISABLE-NEXT:    sub w16, w9, w10\\n+; DISABLE-NEXT:    add w15, w10, w11\\n+; DISABLE-NEXT:    add w14, w11, w12\\n+; DISABLE-NEXT:    b.ge LBB14_2\\n+; DISABLE-NEXT:  ; %bb.1: ; %true\\n+; DISABLE-NEXT:    str w0, [sp]\\n+; DISABLE-NEXT:    ; InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ; InlineAsm End\\n+; DISABLE-NEXT:  LBB14_2: ; %false\\n+; DISABLE-NEXT:    str w8, [x2]\\n+; DISABLE-NEXT:    str w9, [x3]\\n+; DISABLE-NEXT:    str w10, [x4]\\n+; DISABLE-NEXT:    str w11, [x5]\\n+; DISABLE-NEXT:    str w12, [x6]\\n+; DISABLE-NEXT:    str w13, [x7]\\n+; DISABLE-NEXT:    stp w0, w1, [x2, #4]\\n+; DISABLE-NEXT:    stp w17, w16, [x2, #12]\\n+; DISABLE-NEXT:    stp w15, w14, [x2, #20]\\n+; DISABLE-NEXT:    sub sp, x29, #80 ; =80\\n+; DISABLE-NEXT:    ldp x29, x30, [sp, #80] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x20, x19, [sp, #64] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x22, x21, [sp, #48] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x24, x23, [sp, #32] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x26, x25, [sp, #16] ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ldp x28, x27, [sp], #96 ; 16-byte Folded Reload\\n+; DISABLE-NEXT:    ret\\n   %tmp = alloca i32, align 32\\n   %tmp1 = shl i32 %a, %b\\n   %tmp2 = shl i32 %b, %a\"}, {\"sha\": \"62c5901cfa22f8185e0b7bc1808f869c4553658e\", \"filename\": \"llvm/test/CodeGen/AArch64/branch-relax-cbz.ll\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 21, \"changes\": 42, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Fbranch-relax-cbz.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Fbranch-relax-cbz.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fbranch-relax-cbz.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,28 +1,28 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n ; RUN: llc -mtriple=aarch64-apple-darwin -aarch64-cbz-offset-bits=3 < %s | FileCheck %s\\n \\n-; CHECK-LABEL: _split_block_no_fallthrough:\\n-; CHECK: cmn x{{[0-9]+}}, #5\\n-; CHECK-NEXT: b.le [[B2:LBB[0-9]+_[0-9]+]]\\n-\\n-; CHECK-NEXT: ; %bb.1: ; %b3\\n-; CHECK: ldr [[LOAD:w[0-9]+]]\\n-; CHECK: cbnz [[LOAD]], [[B8:LBB[0-9]+_[0-9]+]]\\n-; CHECK-NEXT: b [[B7:LBB[0-9]+_[0-9]+]]\\n-\\n-; CHECK-NEXT: [[B8]]: ; %b8\\n-; CHECK-NEXT: ret\\n-\\n-; CHECK-NEXT: [[B2]]: ; %b2\\n-; CHECK: mov w{{[0-9]+}}, #93\\n-; CHECK: bl _extfunc\\n-; CHECK: cbz w{{[0-9]+}}, [[B7]]\\n-; CHECK-NEXT: b [[B8]]\\n-\\n-; CHECK-NEXT: [[B7]]: ; %b7\\n-; CHECK: mov w{{[0-9]+}}, #13\\n-; CHECK: b _extfunc\\n \\n define void @split_block_no_fallthrough(i64 %val) #0 {\\n+; CHECK-LABEL: split_block_no_fallthrough:\\n+; CHECK:       ; %bb.0: ; %bb\\n+; CHECK-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill\\n+; CHECK-NEXT:    cmn x0, #5 ; =5\\n+; CHECK-NEXT:    b.le LBB0_3\\n+; CHECK-NEXT:  ; %bb.1: ; %b3\\n+; CHECK-NEXT:    ldr w8, [x8]\\n+; CHECK-NEXT:    cbnz w8, LBB0_2\\n+; CHECK-NEXT:    b LBB0_4\\n+; CHECK-NEXT:  LBB0_2: ; %b8\\n+; CHECK-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload\\n+; CHECK-NEXT:    ret\\n+; CHECK-NEXT:  LBB0_3: ; %b2\\n+; CHECK-NEXT:    mov w0, #93\\n+; CHECK-NEXT:    bl _extfunc\\n+; CHECK-NEXT:    cbnz w0, LBB0_2\\n+; CHECK-NEXT:  LBB0_4: ; %b7\\n+; CHECK-NEXT:    mov w0, #13\\n+; CHECK-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload\\n+; CHECK-NEXT:    b _extfunc\\n bb:\\n   %c0 = icmp sgt i64 %val, -5\\n   br i1 %c0, label %b3, label %b2\"}, {\"sha\": \"5cd1c2016972a957334f3c0a8376cd9e380e3bad\", \"filename\": \"llvm/test/CodeGen/AArch64/dont-shrink-wrap-stack-mayloadorstore.mir\", \"status\": \"added\", \"additions\": 229, \"deletions\": 0, \"changes\": 229, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Fdont-shrink-wrap-stack-mayloadorstore.mir\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Fdont-shrink-wrap-stack-mayloadorstore.mir\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fdont-shrink-wrap-stack-mayloadorstore.mir?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -0,0 +1,229 @@\\n+--- |\\n+ ; pr37472\\n+ ; These test verify that shrink-wrap does not set the restore point\\n+ ; to a position where the stack might still be accessed by a load or store\\n+ \\n+ ; RUN: llc -x=mir -simplify-mir -run-pass=shrink-wrap -o - %s | FileCheck %s\\n+ ; CHECK:      name:            compiler_pop_stack\\n+ ; CHECK:      frameInfo:       \\n+ ; CHECK-NOT:  savePoint:\\n+ ; CHECK-NOT:  restorePoint:\\n+ ; CHECK:      stack:\\n+ ; CHECK:      name:            f\\n+ ; CHECK:      frameInfo:       \\n+ ; CHECK:      savePoint:       '%bb.2'\\n+ ; CHECK-NEXT: restorePoint:    '%bb.4'\\n+ ; CHECK-NEXT: stack:\\n+\\n+  target datalayout = \\\"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\\\"\\n+  target triple = \\\"aarch64-arm-none-eabi\\\"\\n+\\n+  %struct.S = type { i32, i32 }\\n+\\n+  @__const.f.arr = private unnamed_addr constant [4 x i8] c\\\"\\\\01\\\\02\\\\03\\\\04\\\", align 1\\n+\\n+\\n+  declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)\\n+\\n+\\n+  declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)\\n+\\n+\\n+  declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg)\\n+ ; Test from: https://bugs.llvm.org/show_bug.cgi?id=42136\\n+  define void @compiler_pop_stack(i32 %num) {\\n+  entry:\\n+    %rstack = alloca [16 x i32], align 4\\n+    %tmp = bitcast [16 x i32]* %rstack to i8*\\n+    call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %tmp)\\n+    %cmp = icmp ult i32 %num, 2\\n+    br i1 %cmp, label %cleanup, label %if.end\\n+\\n+  if.end:\\n+    %arrayidx1 = bitcast [16 x i32]* %rstack to i32*\\n+    store volatile i32 %num, i32* %arrayidx1, align 4\\n+    br label %while.body\\n+\\n+  while.body:\\n+    %ptr.017 = phi i32 [ 1, %if.end ], [ %ptr.1, %if.end7 ]\\n+    %dec = add i32 %ptr.017, -1\\n+    %idxprom = zext i32 %dec to i64\\n+    %arrayidx2 = getelementptr inbounds [16 x i32], [16 x i32]* %rstack, i64 0, i64 %idxprom\\n+    %tmp1 = load volatile i32, i32* %arrayidx2, align 4\\n+    %cmp3 = icmp eq i32 %tmp1, 0\\n+    br i1 %cmp3, label %if.end7, label %if.then4\\n+\\n+  if.then4:\\n+    %sunkaddr = mul i64 %idxprom, 4\\n+    %0 = bitcast [16 x i32]* %rstack to i8*\\n+    %sunkaddr2 = getelementptr inbounds i8, i8* %0, i64 %sunkaddr\\n+    %1 = bitcast i8* %sunkaddr2 to i32*\\n+    store volatile i32 %tmp1, i32* %1, align 4\\n+    br label %if.end7\\n+\\n+  if.end7:\\n+    %ptr.1 = phi i32 [ %ptr.017, %if.then4 ], [ %dec, %while.body ]\\n+    %cmp1 = icmp eq i32 %ptr.1, 0\\n+    br i1 %cmp1, label %cleanup, label %while.body\\n+\\n+  cleanup:\\n+    %2 = bitcast [16 x i32]* %rstack to i8*\\n+    call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2)\\n+    ret void\\n+  }\\n+ ; Test from: https://bugs.llvm.org/show_bug.cgi?id=37472\\n+  define i32 @f(%struct.S* nocapture %arg, i32 %arg1) {\\n+  bb:\\n+    %tmp = alloca [4 x i8], align 1\\n+    %tmp2 = icmp ugt i32 %arg1, 4\\n+    br i1 %tmp2, label %bb16, label %bb3\\n+\\n+  bb3:\\n+    %tmp41 = bitcast [4 x i8]* %tmp to i8*\\n+    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %tmp41)\\n+    call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %tmp41, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.f.arr, i64 0, i64 0), i64 4, i1 true)\\n+    %tmp5 = zext i32 %arg1 to i64\\n+    %tmp6 = getelementptr inbounds [4 x i8], [4 x i8]* %tmp, i64 0, i64 %tmp5\\n+    %tmp7 = load volatile i8, i8* %tmp6, align 1\\n+    %tmp8 = zext i8 %tmp7 to i32\\n+    %tmp92 = bitcast %struct.S* %arg to i32*\\n+    store i32 %tmp8, i32* %tmp92, align 4\\n+    %tmp10 = icmp ult i32 %arg1, 3\\n+    br i1 %tmp10, label %bb11, label %bb15\\n+\\n+  bb11:\\n+    %0 = bitcast [4 x i8]* %tmp to i8*\\n+    %sunkaddr = getelementptr inbounds i8, i8* %0, i64 %tmp5\\n+    %tmp12 = load volatile i8, i8* %sunkaddr, align 1\\n+    %tmp13 = zext i8 %tmp12 to i32\\n+    %tmp14 = getelementptr inbounds %struct.S, %struct.S* %arg, i64 0, i32 1\\n+    store i32 %tmp13, i32* %tmp14, align 4\\n+    br label %bb15\\n+\\n+  bb15:\\n+    %1 = bitcast [4 x i8]* %tmp to i8*\\n+    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1)\\n+    br label %bb16\\n+\\n+  bb16:\\n+    %tmp17 = phi i32 [ 0, %bb15 ], [ 1, %bb ]\\n+    ret i32 %tmp17\\n+  }\\n+\\n+\\n+  declare void @llvm.stackprotector(i8*, i8**)\\n+\\n+...\\n+---\\n+name:            compiler_pop_stack\\n+alignment:       2\\n+tracksRegLiveness: true\\n+liveins:\\n+  - { reg: '$w0' }\\n+frameInfo:\\n+  maxAlignment:    4\\n+  maxCallFrameSize: 0\\n+  localFrameSize:  64\\n+stack:\\n+  - { id: 0, name: rstack, size: 64, alignment: 4, stack-id: 0, local-offset: -64 }\\n+machineFunctionInfo: {}\\n+body:             |\\n+  bb.0.entry:\\n+    liveins: $w0\\n+\\n+    dead $wzr = SUBSWri renamable $w0, 2, 0, implicit-def $nzcv\\n+    Bcc 3, %bb.6, implicit killed $nzcv\\n+    B %bb.1\\n+\\n+  bb.1.if.end:\\n+    liveins: $w0\\n+\\n+    STRWui killed renamable $w0, %stack.0.rstack, 0 :: (volatile store 4 into %ir.arrayidx1)\\n+    renamable $w9 = MOVi32imm 1\\n+    renamable $x8 = ADDXri %stack.0.rstack, 0, 0\\n+\\n+  bb.2.while.body:\\n+    successors: %bb.3(0x30000000), %bb.4(0x50000000)\\n+    liveins: $w9, $x8\\n+\\n+    renamable $w10 = SUBWri renamable $w9, 1, 0, implicit-def $x10\\n+    renamable $w11 = LDRWroW renamable $x8, renamable $w10, 0, 1 :: (volatile load 4 from %ir.arrayidx2)\\n+    CBNZW renamable $w11, %bb.4\\n+\\n+  bb.3:\\n+    liveins: $x8, $x10\\n+\\n+    renamable $w9 = COPY renamable $w10, implicit killed $x10\\n+    B %bb.5\\n+\\n+  bb.4.if.then4:\\n+    liveins: $w9, $w11, $x8, $x10\\n+\\n+    STRWroX killed renamable $w11, renamable $x8, killed renamable $x10, 0, 1 :: (volatile store 4 into %ir.1)\\n+\\n+  bb.5.if.end7:\\n+    successors: %bb.6(0x04000000), %bb.2(0x7c000000)\\n+    liveins: $w9, $x8\\n+\\n+    CBNZW renamable $w9, %bb.2\\n+    B %bb.6\\n+\\n+  bb.6.cleanup:\\n+    RET_ReallyLR\\n+\\n+...\\n+---\\n+name:            f\\n+alignment:       2\\n+tracksRegLiveness: true\\n+liveins:\\n+  - { reg: '$x0' }\\n+  - { reg: '$w1' }\\n+frameInfo:\\n+  maxAlignment:    4\\n+  maxCallFrameSize: 0\\n+  localFrameSize:  4\\n+stack:\\n+  - { id: 0, name: tmp, size: 4, alignment: 4, stack-id: 0, local-offset: -4 }\\n+machineFunctionInfo: {}\\n+body:             |\\n+  bb.0.bb:\\n+    successors: %bb.1, %bb.2\\n+    liveins: $w1, $x0\\n+\\n+    dead $wzr = SUBSWri renamable $w1, 4, 0, implicit-def $nzcv\\n+    Bcc 9, %bb.2, implicit killed $nzcv\\n+\\n+  bb.1:\\n+    renamable $w0 = MOVi32imm 1\\n+    B %bb.5\\n+\\n+  bb.2.bb3:\\n+    successors: %bb.3, %bb.4\\n+    liveins: $w1, $x0\\n+\\n+    renamable $w9 = MOVi32imm 67305985\\n+    renamable $w8 = ORRWrs $wzr, renamable $w1, 0, implicit-def $x8\\n+    STRWui killed renamable $w9, %stack.0.tmp, 0 :: (volatile store 4 into %ir.tmp41)\\n+    renamable $x9 = ADDXri %stack.0.tmp, 0, 0\\n+    renamable $w10 = LDRBBroX renamable $x9, renamable $x8, 0, 0 :: (volatile load 1 from %ir.tmp6)\\n+    dead $wzr = SUBSWri killed renamable $w1, 2, 0, implicit-def $nzcv\\n+    STRWui killed renamable $w10, renamable $x0, 0 :: (store 4 into %ir.tmp92)\\n+    Bcc 8, %bb.4, implicit killed $nzcv\\n+    B %bb.3\\n+\\n+  bb.3.bb11:\\n+    liveins: $x0, $x8, $x9\\n+\\n+    renamable $w8 = LDRBBroX killed renamable $x9, killed renamable $x8, 0, 0 :: (volatile load 1 from %ir.sunkaddr)\\n+    STRWui killed renamable $w8, killed renamable $x0, 1 :: (store 4 into %ir.tmp14)\\n+\\n+  bb.4.bb15:\\n+    renamable $w0 = COPY $wzr\\n+\\n+  bb.5.bb16:\\n+    liveins: $w0\\n+\\n+    RET_ReallyLR implicit $w0\\n+\\n+...\"}, {\"sha\": \"11f6ff189cffa3b603f99dff894f551b6ab51c35\", \"filename\": \"llvm/test/CodeGen/AArch64/taildup-cfi.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Ftaildup-cfi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FAArch64%2Ftaildup-cfi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Ftaildup-cfi.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -32,7 +32,7 @@ if.then:                                          ; preds = %entry\\n   store i32 0, i32* @f, align 4, !tbaa !2\\n   br label %if.end\\n \\n-; DARWIN-NOT:       Merging into block\\n+; DARWIN:           Merging into block\\n ; LINUX:    \\t      Merging into block\\n \\n if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then\"}, {\"sha\": \"c8a937edf95c60921c687a9a6189649932702af5\", \"filename\": \"llvm/test/CodeGen/ARM/arm-shrink-wrapping-linux.ll\", \"status\": \"modified\", \"additions\": 181, \"deletions\": 48, \"changes\": 229, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping-linux.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping-linux.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping-linux.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,5 +1,6 @@\\n-; RUN: llc %s -o - -enable-shrink-wrap=true | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE\\n-; RUN: llc %s -o - -enable-shrink-wrap=false | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc %s -o - -enable-shrink-wrap=true | FileCheck %s --check-prefix=ENABLE\\n+; RUN: llc %s -o - -enable-shrink-wrap=false | FileCheck %s --check-prefix=DISABLE\\n ; We cannot merge this test with the main test for shrink-wrapping, because\\n ; the code path we want to exerce is not taken with ios lowering.\\n target datalayout = \\\"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n8:16:32-S64\\\"\\n@@ -12,53 +13,185 @@ target triple = \\\"armv7--linux-gnueabi\\\"\\n ; The exit block of the loop happens to also lead to defs/uses of CSRs.\\n ; It also post-dominates the loop body and we use to generate invalid\\n ; restore sequence. I.e., we restored too early.\\n-;\\n-; CHECK-LABEL: wrongUseOfPostDominate:\\n-;\\n-; The prologue is the first thing happening in the function\\n-; without shrink-wrapping.\\n-; DISABLE: push\\n-;\\n-; CHECK: cmn r1, #1\\n-;\\n-; With shrink-wrapping, we branch to a pre-header, where the prologue\\n-; is located.\\n-; ENABLE-NEXT: ble [[LOOP_PREHEADER:[.a-zA-Z0-9_]+]]\\n-; Without shrink-wrapping, we go straight into the loop.\\n-; DISABLE-NEXT: ble [[LOOP_HEADER:[.a-zA-Z0-9_]+]]\\n-;\\n-; CHECK: @ %if.end29\\n-; DISABLE-NEXT: pop\\n-; ENABLE-NEXT: bx lr\\n-;\\n-; ENABLE: [[LOOP_PREHEADER]]\\n-; ENABLE: push\\n-; We must not find a pop here, otherwise that means we are in the loop\\n-; and are restoring before using the saved CSRs.\\n-; ENABLE-NOT: pop\\n-; ENALBE-NEXT: [[LOOP_HEADER:[.a-zA-Z0-9_]+]]: @ %while.cond2.outer\\n-;\\n-; DISABLE: [[LOOP_HEADER]]: @ %while.cond2.outer\\n-;\\n-; ENABLE-NOT: pop\\n-;\\n-; CHECK: @ %while.cond2\\n-; CHECK: add\\n-; CHECK-NEXT: cmp r{{[0-1]+}}, #1\\n-; Jump to the return block\\n-; CHECK-NEXT: beq [[RETURN_BLOCK:[.a-zA-Z0-9_]+]]\\n-;\\n-; Use the back edge to check we get the label of the loop right.\\n-; This is to make sure we check the right loop pattern.\\n-; CHECK:  @ %while.body24.land.rhs14_crit_edge\\n-; CHECK: cmp r{{[0-9]+}}, #192\\n-; CHECK-NEXT bhs [[LOOP_HEADER]]\\n-;\\n-; CHECK: [[RETURN_BLOCK]]:\\n-; Set the return value.\\n-; CHECK-NEXT: mov r0,\\n-; CHECK-NEXT: pop\\n+\\n define fastcc i8* @wrongUseOfPostDominate(i8* readonly %s, i32 %off, i8* readnone %lim) {\\n+; ENABLE-LABEL: wrongUseOfPostDominate:\\n+; ENABLE:       @ %bb.0: @ %entry\\n+; ENABLE-NEXT:    .save {r11, lr}\\n+; ENABLE-NEXT:    push {r11, lr}\\n+; ENABLE-NEXT:    cmn r1, #1\\n+; ENABLE-NEXT:    ble .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.1: @ %while.cond.preheader\\n+; ENABLE-NEXT:    cmp r1, #0\\n+; ENABLE-NEXT:    beq .LBB0_5\\n+; ENABLE-NEXT:  @ %bb.2: @ %while.cond.preheader\\n+; ENABLE-NEXT:    cmp r0, r2\\n+; ENABLE-NEXT:    pophs {r11, pc}\\n+; ENABLE-NEXT:    movw r12, :lower16:skip\\n+; ENABLE-NEXT:    sub r1, r1, #1\\n+; ENABLE-NEXT:    movt r12, :upper16:skip\\n+; ENABLE-NEXT:  .LBB0_3: @ %while.body\\n+; ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ldrb r3, [r0]\\n+; ENABLE-NEXT:    ldrb r3, [r12, r3]\\n+; ENABLE-NEXT:    add r0, r0, r3\\n+; ENABLE-NEXT:    sub r3, r1, #1\\n+; ENABLE-NEXT:    cmp r3, r1\\n+; ENABLE-NEXT:    bhs .LBB0_5\\n+; ENABLE-NEXT:  @ %bb.4: @ %while.body\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_3 Depth=1\\n+; ENABLE-NEXT:    cmp r0, r2\\n+; ENABLE-NEXT:    mov r1, r3\\n+; ENABLE-NEXT:    blo .LBB0_3\\n+; ENABLE-NEXT:  .LBB0_5: @ %if.end29\\n+; ENABLE-NEXT:    pop {r11, pc}\\n+; ENABLE-NEXT:  .LBB0_6: @ %while.cond2.outer\\n+; ENABLE-NEXT:    @ =>This Loop Header: Depth=1\\n+; ENABLE-NEXT:    @ Child Loop BB0_7 Depth 2\\n+; ENABLE-NEXT:    @ Child Loop BB0_14 Depth 2\\n+; ENABLE-NEXT:    mov r3, r0\\n+; ENABLE-NEXT:  .LBB0_7: @ %while.cond2\\n+; ENABLE-NEXT:    @ Parent Loop BB0_6 Depth=1\\n+; ENABLE-NEXT:    @ => This Inner Loop Header: Depth=2\\n+; ENABLE-NEXT:    add r1, r1, #1\\n+; ENABLE-NEXT:    cmp r1, #1\\n+; ENABLE-NEXT:    beq .LBB0_17\\n+; ENABLE-NEXT:  @ %bb.8: @ %while.body4\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_7 Depth=2\\n+; ENABLE-NEXT:    cmp r3, r2\\n+; ENABLE-NEXT:    bls .LBB0_7\\n+; ENABLE-NEXT:  @ %bb.9: @ %if.then7\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; ENABLE-NEXT:    mov r0, r3\\n+; ENABLE-NEXT:    ldrb r12, [r0, #-1]!\\n+; ENABLE-NEXT:    sxtb lr, r12\\n+; ENABLE-NEXT:    cmn lr, #1\\n+; ENABLE-NEXT:    bgt .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.10: @ %if.then7\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; ENABLE-NEXT:    cmp r0, r2\\n+; ENABLE-NEXT:    bls .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.11: @ %land.rhs14.preheader\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; ENABLE-NEXT:    cmn lr, #1\\n+; ENABLE-NEXT:    bgt .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.12: @ %land.rhs14.preheader\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; ENABLE-NEXT:    cmp r12, #191\\n+; ENABLE-NEXT:    bhi .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.13: @ %while.body24.preheader\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; ENABLE-NEXT:    sub r3, r3, #2\\n+; ENABLE-NEXT:  .LBB0_14: @ %while.body24\\n+; ENABLE-NEXT:    @ Parent Loop BB0_6 Depth=1\\n+; ENABLE-NEXT:    @ => This Inner Loop Header: Depth=2\\n+; ENABLE-NEXT:    mov r0, r3\\n+; ENABLE-NEXT:    cmp r3, r2\\n+; ENABLE-NEXT:    bls .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.15: @ %while.body24.land.rhs14_crit_edge\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_14 Depth=2\\n+; ENABLE-NEXT:    mov r3, r0\\n+; ENABLE-NEXT:    ldrsb lr, [r3], #-1\\n+; ENABLE-NEXT:    cmn lr, #1\\n+; ENABLE-NEXT:    uxtb r12, lr\\n+; ENABLE-NEXT:    bgt .LBB0_6\\n+; ENABLE-NEXT:  @ %bb.16: @ %while.body24.land.rhs14_crit_edge\\n+; ENABLE-NEXT:    @ in Loop: Header=BB0_14 Depth=2\\n+; ENABLE-NEXT:    cmp r12, #192\\n+; ENABLE-NEXT:    blo .LBB0_14\\n+; ENABLE-NEXT:    b .LBB0_6\\n+; ENABLE-NEXT:  .LBB0_17:\\n+; ENABLE-NEXT:    mov r0, r3\\n+; ENABLE-NEXT:    pop {r11, pc}\\n+;\\n+; DISABLE-LABEL: wrongUseOfPostDominate:\\n+; DISABLE:       @ %bb.0: @ %entry\\n+; DISABLE-NEXT:    .save {r11, lr}\\n+; DISABLE-NEXT:    push {r11, lr}\\n+; DISABLE-NEXT:    cmn r1, #1\\n+; DISABLE-NEXT:    ble .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.1: @ %while.cond.preheader\\n+; DISABLE-NEXT:    cmp r1, #0\\n+; DISABLE-NEXT:    beq .LBB0_5\\n+; DISABLE-NEXT:  @ %bb.2: @ %while.cond.preheader\\n+; DISABLE-NEXT:    cmp r0, r2\\n+; DISABLE-NEXT:    pophs {r11, pc}\\n+; DISABLE-NEXT:    movw r12, :lower16:skip\\n+; DISABLE-NEXT:    sub r1, r1, #1\\n+; DISABLE-NEXT:    movt r12, :upper16:skip\\n+; DISABLE-NEXT:  .LBB0_3: @ %while.body\\n+; DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ldrb r3, [r0]\\n+; DISABLE-NEXT:    ldrb r3, [r12, r3]\\n+; DISABLE-NEXT:    add r0, r0, r3\\n+; DISABLE-NEXT:    sub r3, r1, #1\\n+; DISABLE-NEXT:    cmp r3, r1\\n+; DISABLE-NEXT:    bhs .LBB0_5\\n+; DISABLE-NEXT:  @ %bb.4: @ %while.body\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_3 Depth=1\\n+; DISABLE-NEXT:    cmp r0, r2\\n+; DISABLE-NEXT:    mov r1, r3\\n+; DISABLE-NEXT:    blo .LBB0_3\\n+; DISABLE-NEXT:  .LBB0_5: @ %if.end29\\n+; DISABLE-NEXT:    pop {r11, pc}\\n+; DISABLE-NEXT:  .LBB0_6: @ %while.cond2.outer\\n+; DISABLE-NEXT:    @ =>This Loop Header: Depth=1\\n+; DISABLE-NEXT:    @ Child Loop BB0_7 Depth 2\\n+; DISABLE-NEXT:    @ Child Loop BB0_14 Depth 2\\n+; DISABLE-NEXT:    mov r3, r0\\n+; DISABLE-NEXT:  .LBB0_7: @ %while.cond2\\n+; DISABLE-NEXT:    @ Parent Loop BB0_6 Depth=1\\n+; DISABLE-NEXT:    @ => This Inner Loop Header: Depth=2\\n+; DISABLE-NEXT:    add r1, r1, #1\\n+; DISABLE-NEXT:    cmp r1, #1\\n+; DISABLE-NEXT:    beq .LBB0_17\\n+; DISABLE-NEXT:  @ %bb.8: @ %while.body4\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_7 Depth=2\\n+; DISABLE-NEXT:    cmp r3, r2\\n+; DISABLE-NEXT:    bls .LBB0_7\\n+; DISABLE-NEXT:  @ %bb.9: @ %if.then7\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; DISABLE-NEXT:    mov r0, r3\\n+; DISABLE-NEXT:    ldrb r12, [r0, #-1]!\\n+; DISABLE-NEXT:    sxtb lr, r12\\n+; DISABLE-NEXT:    cmn lr, #1\\n+; DISABLE-NEXT:    bgt .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.10: @ %if.then7\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; DISABLE-NEXT:    cmp r0, r2\\n+; DISABLE-NEXT:    bls .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.11: @ %land.rhs14.preheader\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; DISABLE-NEXT:    cmn lr, #1\\n+; DISABLE-NEXT:    bgt .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.12: @ %land.rhs14.preheader\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; DISABLE-NEXT:    cmp r12, #191\\n+; DISABLE-NEXT:    bhi .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.13: @ %while.body24.preheader\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_6 Depth=1\\n+; DISABLE-NEXT:    sub r3, r3, #2\\n+; DISABLE-NEXT:  .LBB0_14: @ %while.body24\\n+; DISABLE-NEXT:    @ Parent Loop BB0_6 Depth=1\\n+; DISABLE-NEXT:    @ => This Inner Loop Header: Depth=2\\n+; DISABLE-NEXT:    mov r0, r3\\n+; DISABLE-NEXT:    cmp r3, r2\\n+; DISABLE-NEXT:    bls .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.15: @ %while.body24.land.rhs14_crit_edge\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_14 Depth=2\\n+; DISABLE-NEXT:    mov r3, r0\\n+; DISABLE-NEXT:    ldrsb lr, [r3], #-1\\n+; DISABLE-NEXT:    cmn lr, #1\\n+; DISABLE-NEXT:    uxtb r12, lr\\n+; DISABLE-NEXT:    bgt .LBB0_6\\n+; DISABLE-NEXT:  @ %bb.16: @ %while.body24.land.rhs14_crit_edge\\n+; DISABLE-NEXT:    @ in Loop: Header=BB0_14 Depth=2\\n+; DISABLE-NEXT:    cmp r12, #192\\n+; DISABLE-NEXT:    blo .LBB0_14\\n+; DISABLE-NEXT:    b .LBB0_6\\n+; DISABLE-NEXT:  .LBB0_17:\\n+; DISABLE-NEXT:    mov r0, r3\\n+; DISABLE-NEXT:    pop {r11, pc}\\n entry:\\n   %cmp = icmp sgt i32 %off, -1\\n   br i1 %cmp, label %while.cond.preheader, label %while.cond2.outer\"}, {\"sha\": \"4b043362afaf8bb358eff4fb8166c153b80d41e5\", \"filename\": \"llvm/test/CodeGen/ARM/arm-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 1398, \"deletions\": 203, \"changes\": 1601, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FARM%2Farm-shrink-wrapping.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,11 +1,12 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n ; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -mtriple=armv7-apple-ios \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=ARM --check-prefix=ENABLE --check-prefix=ARM-ENABLE\\n+; RUN:      | FileCheck %s --check-prefix=ARM-ENABLE\\n ; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -mtriple=armv7-apple-ios \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=ARM --check-prefix=DISABLE --check-prefix=ARM-DISABLE\\n+; RUN:      | FileCheck %s --check-prefix=ARM-DISABLE\\n ; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -mtriple=thumbv7-apple-ios \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=THUMB --check-prefix=ENABLE --check-prefix=THUMB-ENABLE\\n+; RUN:      | FileCheck %s --check-prefix=THUMB-ENABLE\\n ; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -mtriple=thumbv7-apple-ios \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=THUMB --check-prefix=DISABLE --check-prefix=THUMB-DISABLE\\n+; RUN:      | FileCheck %s --check-prefix=THUMB-DISABLE\\n \\n ;\\n ; Note: Lots of tests use inline asm instead of regular calls.\\n@@ -18,48 +19,111 @@\\n ; the diffs.\\n \\n ; Initial motivating example: Simple diamond with a call just on one side.\\n-; CHECK-LABEL: foo:\\n+; foo:\\n ;\\n ; Compare the arguments and jump to exit.\\n ; No prologue needed.\\n-; ENABLE: cmp r0, r1\\n-; ENABLE-NEXT: bge [[EXIT_LABEL:LBB[0-9_]+]]\\n+; cmp r0, r1\\n+; bge [[EXIT_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n-; CHECK: push {r7, lr}\\n-; CHECK-NEXT: mov r7, sp\\n+; push {r7, lr}\\n+; mov r7, sp\\n ;;\\n ; Compare the arguments and jump to exit.\\n ; After the prologue is set.\\n-; DISABLE: sub sp\\n-; DISABLE: cmp r0, r1\\n-; DISABLE-NEXT: bge [[EXIT_LABEL:LBB[0-9_]+]]\\n+; sub sp\\n+; cmp r0, r1\\n+; bge [[EXIT_LABEL:LBB[0-9_]+]]\\n ;\\n ; Store %a in the alloca.\\n-; ARM-ENABLE: push {r0}\\n-; THUMB-ENABLE: str r0, [sp, #-4]\\n-; DISABLE: str r0, [sp]\\n+; push {r0}\\n+; str r0, [sp, #-4]\\n+; str r0, [sp]\\n ; Set the alloca address in the second argument.\\n-; CHECK-NEXT: mov r1, sp\\n+; mov r1, sp\\n ; Set the first argument to zero.\\n-; CHECK-NEXT: mov{{s?}} r0, #0\\n-; CHECK-NEXT: bl{{x?}} _doSomething\\n+; mov{{s?}} r0, #0\\n+; bl{{x?}} _doSomething\\n ;\\n ; With shrink-wrapping, epilogue is just after the call.\\n-; ARM-ENABLE-NEXT: mov sp, r7\\n-; THUMB-ENABLE-NEXT: add sp, #4\\n-; ENABLE-NEXT: pop{{(\\\\.w)?}} {r7, lr}\\n+; mov sp, r7\\n+; add sp, #4\\n+; pop{{(\\\\.w)?}} {r7, lr}\\n ;\\n-; CHECK: [[EXIT_LABEL]]:\\n+; [[EXIT_LABEL]]:\\n ;\\n ; Without shrink-wrapping, epilogue is in the exit block.\\n ; Epilogue code. (What we pop does not matter.)\\n-; ARM-DISABLE: mov sp, r7\\n-; THUMB-DISABLE: add sp, \\n-; DISABLE-NEXT: pop {r7, pc}\\n+; mov sp, r7\\n+; add sp,\\n+; pop {r7, pc}\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n define i32 @foo(i32 %a, i32 %b) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: foo:\\n+; ARM-ENABLE:       @ %bb.0:\\n+; ARM-ENABLE-NEXT:    cmp r0, r1\\n+; ARM-ENABLE-NEXT:    bge LBB0_2\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %true\\n+; ARM-ENABLE-NEXT:    push {r7, lr}\\n+; ARM-ENABLE-NEXT:    mov r7, sp\\n+; ARM-ENABLE-NEXT:    push {r0}\\n+; ARM-ENABLE-NEXT:    mov r1, sp\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    bl _doSomething\\n+; ARM-ENABLE-NEXT:    mov sp, r7\\n+; ARM-ENABLE-NEXT:    pop {r7, lr}\\n+; ARM-ENABLE-NEXT:  LBB0_2: @ %false\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: foo:\\n+; ARM-DISABLE:       @ %bb.0:\\n+; ARM-DISABLE-NEXT:    push {r7, lr}\\n+; ARM-DISABLE-NEXT:    mov r7, sp\\n+; ARM-DISABLE-NEXT:    sub sp, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, r1\\n+; ARM-DISABLE-NEXT:    bge LBB0_2\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %true\\n+; ARM-DISABLE-NEXT:    str r0, [sp]\\n+; ARM-DISABLE-NEXT:    mov r1, sp\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    bl _doSomething\\n+; ARM-DISABLE-NEXT:  LBB0_2: @ %false\\n+; ARM-DISABLE-NEXT:    mov sp, r7\\n+; ARM-DISABLE-NEXT:    pop {r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: foo:\\n+; THUMB-ENABLE:       @ %bb.0:\\n+; THUMB-ENABLE-NEXT:    cmp r0, r1\\n+; THUMB-ENABLE-NEXT:    bge LBB0_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %true\\n+; THUMB-ENABLE-NEXT:    push {r7, lr}\\n+; THUMB-ENABLE-NEXT:    mov r7, sp\\n+; THUMB-ENABLE-NEXT:    str r0, [sp, #-4]!\\n+; THUMB-ENABLE-NEXT:    mov r1, sp\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    bl _doSomething\\n+; THUMB-ENABLE-NEXT:    add sp, #4\\n+; THUMB-ENABLE-NEXT:    pop.w {r7, lr}\\n+; THUMB-ENABLE-NEXT:  LBB0_2: @ %false\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: foo:\\n+; THUMB-DISABLE:       @ %bb.0:\\n+; THUMB-DISABLE-NEXT:    push {r7, lr}\\n+; THUMB-DISABLE-NEXT:    mov r7, sp\\n+; THUMB-DISABLE-NEXT:    sub sp, #4\\n+; THUMB-DISABLE-NEXT:    cmp r0, r1\\n+; THUMB-DISABLE-NEXT:    bge LBB0_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %true\\n+; THUMB-DISABLE-NEXT:    str r0, [sp]\\n+; THUMB-DISABLE-NEXT:    mov r1, sp\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    bl _doSomething\\n+; THUMB-DISABLE-NEXT:  LBB0_2: @ %false\\n+; THUMB-DISABLE-NEXT:    add sp, #4\\n+; THUMB-DISABLE-NEXT:    pop {r7, pc}\\n   %tmp = alloca i32, align 4\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n@@ -80,51 +144,156 @@ declare i32 @doSomething(i32, i32*)\\n \\n ; Check that we do not perform the restore inside the loop whereas the save\\n ; is outside.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; freqSaveAndRestoreOutsideLoop:\\n ;\\n ; Shrink-wrapping allows to skip the prologue in the else case.\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n ; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, r7, lr}\\n-; CHECK-NEXT: add r7, sp, #4\\n+; push {r4, r7, lr}\\n+; add r7, sp, #4\\n ;\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-DISABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; SUM is in r0 because it is coalesced with the second\\n ; argument on the else path.\\n-; CHECK: mov{{s?}} [[SUM:r0]], #0\\n-; CHECK-NEXT: mov{{s?}} [[IV:r[0-9]+]], #10\\n+; mov{{s?}} [[SUM:r0]], #0\\n+; mov{{s?}} [[IV:r[0-9]+]], #10\\n ;\\n ; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n-; ARM: add [[SUM]], [[TMP]], [[SUM]]\\n-; THUMB: add [[SUM]], [[TMP]]\\n-; ARM-NEXT: subs [[IV]], [[IV]], #1\\n-; THUMB-NEXT: subs [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n+; [[LOOP:LBB[0-9_]+]]: @ %for.body\\n+; mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n+; add [[SUM]], [[TMP]], [[SUM]]\\n+; add [[SUM]], [[TMP]]\\n+; subs [[IV]], [[IV]], #1\\n+; subs [[IV]], #1\\n+; bne [[LOOP]]\\n ;\\n ; Next BB.\\n ; SUM << 3.\\n-; CHECK: lsl{{s?}} [[SUM]], [[SUM]], #3\\n-; ENABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} [[SUM]], [[SUM]], #3\\n+; pop {r4, r7, pc}\\n ;\\n ; Duplicated epilogue.\\n-; DISABLE: pop {r4, r7, pc}\\n+; pop {r4, r7, pc}\\n ;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n+; [[ELSE_LABEL]]: @ %if.else\\n ; Shift second argument by one and store into returned register.\\n-; CHECK: lsl{{s?}} r0, r1, #1\\n-; DISABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} r0, r1, #1\\n+; pop {r4, r7, pc}\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n define i32 @freqSaveAndRestoreOutsideLoop(i32 %cond, i32 %N) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    beq LBB1_4\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    mov r1, #10\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:  LBB1_2: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r2, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    add r0, r2, r0\\n+; ARM-ENABLE-NEXT:    subs r1, r1, #1\\n+; ARM-ENABLE-NEXT:    bne LBB1_2\\n+; ARM-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-ENABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-ENABLE-NEXT:  LBB1_4: @ %if.else\\n+; ARM-ENABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    beq LBB1_4\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    mov r1, #10\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:  LBB1_2: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r2, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    add r0, r2, r0\\n+; ARM-DISABLE-NEXT:    subs r1, r1, #1\\n+; ARM-DISABLE-NEXT:    bne LBB1_2\\n+; ARM-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-DISABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB1_4: @ %if.else\\n+; ARM-DISABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbz r0, LBB1_4\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    movs r1, #10\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:  LBB1_2: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r2, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    add r0, r2\\n+; THUMB-ENABLE-NEXT:    subs r1, #1\\n+; THUMB-ENABLE-NEXT:    bne LBB1_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-ENABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-ENABLE-NEXT:  LBB1_4: @ %if.else\\n+; THUMB-ENABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    cbz r0, LBB1_4\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    movs r1, #10\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:  LBB1_2: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r2, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    add r0, r2\\n+; THUMB-DISABLE-NEXT:    subs r1, #1\\n+; THUMB-DISABLE-NEXT:    bne LBB1_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-DISABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB1_4: @ %if.else\\n+; THUMB-DISABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -159,26 +328,162 @@ declare i32 @something(...)\\n \\n ; Check that we do not perform the shrink-wrapping inside the loop even\\n ; though that would be legal. The cost model must prevent that.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; freqSaveAndRestoreOutsideLoop2:\\n ; Prologue code.\\n ; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4\\n-; CHECK: mov{{s?}} [[SUM:r0]], #0\\n-; CHECK-NEXT: mov{{s?}} [[IV:r[0-9]+]], #10\\n-; CHECK: nop\\n+; push {r4\\n+; mov{{s?}} [[SUM:r0]], #0\\n+; mov{{s?}} [[IV:r[0-9]+]], #10\\n+; nop\\n ; Next BB.\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n-; ARM: add [[SUM]], [[TMP]], [[SUM]]\\n-; THUMB: add [[SUM]], [[TMP]]\\n-; ARM: subs [[IV]], [[IV]], #1\\n-; THUMB: subs [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP_LABEL]]\\n+; [[LOOP_LABEL:LBB[0-9_]+]]: @ %for.body\\n+; mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n+; add [[SUM]], [[TMP]], [[SUM]]\\n+; add [[SUM]], [[TMP]]\\n+; subs [[IV]], [[IV]], #1\\n+; subs [[IV]], #1\\n+; bne [[LOOP_LABEL]]\\n ; Next BB.\\n-; CHECK: @ %for.exit\\n-; CHECK: nop\\n-; CHECK: pop {r4\\n+; @ %for.exit\\n+; nop\\n+; pop {r4\\n define i32 @freqSaveAndRestoreOutsideLoop2(i32 %cond) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ARM:       @ %bb.0: @ %entry\\n+; ARM-NEXT:    push {r4, r7, lr}\\n+; ARM-NEXT:    add r7, sp, #4\\n+; ARM-NEXT:    mov r0, #0\\n+; ARM-NEXT:    mov r1, #10\\n+; ARM-NEXT:    @ InlineAsm Start\\n+; ARM-NEXT:    nop\\n+; ARM-NEXT:    @ InlineAsm End\\n+; ARM-NEXT:  LBB2_1: @ %for.body\\n+; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-NEXT:    @ InlineAsm Start\\n+; ARM-NEXT:    mov r2, #1\\n+; ARM-NEXT:    @ InlineAsm End\\n+; ARM-NEXT:    add r0, r2, r0\\n+; ARM-NEXT:    subs r1, r1, #1\\n+; ARM-NEXT:    bne LBB2_1\\n+; ARM-NEXT:  @ %bb.2: @ %for.exit\\n+; ARM-NEXT:    @ InlineAsm Start\\n+; ARM-NEXT:    nop\\n+; ARM-NEXT:    @ InlineAsm End\\n+; ARM-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; THUMB:       @ %bb.0: @ %entry\\n+; THUMB-NEXT:    push {r4, r7, lr}\\n+; THUMB-NEXT:    add r7, sp, #4\\n+; THUMB-NEXT:    movs r0, #0\\n+; THUMB-NEXT:    movs r1, #10\\n+; THUMB-NEXT:    @ InlineAsm Start\\n+; THUMB-NEXT:    nop\\n+; THUMB-NEXT:    @ InlineAsm End\\n+; THUMB-NEXT:  LBB2_1: @ %for.body\\n+; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-NEXT:    @ InlineAsm Start\\n+; THUMB-NEXT:    mov.w r2, #1\\n+; THUMB-NEXT:    @ InlineAsm End\\n+; THUMB-NEXT:    add r0, r2\\n+; THUMB-NEXT:    subs r1, #1\\n+; THUMB-NEXT:    bne LBB2_1\\n+; THUMB-NEXT:  @ %bb.2: @ %for.exit\\n+; THUMB-NEXT:    @ InlineAsm Start\\n+; THUMB-NEXT:    nop\\n+; THUMB-NEXT:    @ InlineAsm End\\n+; THUMB-NEXT:    pop {r4, r7, pc}\\n+; ARM-ENABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    mov r1, #10\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:  LBB2_1: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r2, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    add r0, r2, r0\\n+; ARM-ENABLE-NEXT:    subs r1, r1, #1\\n+; ARM-ENABLE-NEXT:    bne LBB2_1\\n+; ARM-ENABLE-NEXT:  @ %bb.2: @ %for.exit\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; ARM-DISABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    mov r1, #10\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:  LBB2_1: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r2, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    add r0, r2, r0\\n+; ARM-DISABLE-NEXT:    subs r1, r1, #1\\n+; ARM-DISABLE-NEXT:    bne LBB2_1\\n+; ARM-DISABLE-NEXT:  @ %bb.2: @ %for.exit\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    movs r1, #10\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:  LBB2_1: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r2, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    add r0, r2\\n+; THUMB-ENABLE-NEXT:    subs r1, #1\\n+; THUMB-ENABLE-NEXT:    bne LBB2_1\\n+; THUMB-ENABLE-NEXT:  @ %bb.2: @ %for.exit\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-DISABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    movs r1, #10\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:  LBB2_1: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r2, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    add r0, r2\\n+; THUMB-DISABLE-NEXT:    subs r1, #1\\n+; THUMB-DISABLE-NEXT:    bne LBB2_1\\n+; THUMB-DISABLE-NEXT:  @ %bb.2: @ %for.exit\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n entry:\\n   br label %for.preheader\\n \\n@@ -205,50 +510,167 @@ for.end:                                          ; preds = %for.body\\n \\n ; Check with a more complex case that we do not have save within the loop and\\n ; restore outside.\\n-; CHECK-LABEL: loopInfoSaveOutsideLoop:\\n+; loopInfoSaveOutsideLoop:\\n ;\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n ; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, r7, lr}\\n-; CHECK-NEXT: add r7, sp, #4\\n+; push {r4, r7, lr}\\n+; add r7, sp, #4\\n ;\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-DISABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; SUM is in r0 because it is coalesced with the second\\n ; argument on the else path.\\n-; CHECK: mov{{s?}} [[SUM:r0]], #0\\n-; CHECK-NEXT: mov{{s?}} [[IV:r[0-9]+]], #10\\n+; mov{{s?}} [[SUM:r0]], #0\\n+; mov{{s?}} [[IV:r[0-9]+]], #10\\n ;\\n ; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n-; ARM: add [[SUM]], [[TMP]], [[SUM]]\\n-; THUMB: add [[SUM]], [[TMP]]\\n-; ARM-NEXT: subs [[IV]], [[IV]], #1\\n-; THUMB-NEXT: subs [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n+; [[LOOP:LBB[0-9_]+]]: @ %for.body\\n+; mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n+; add [[SUM]], [[TMP]], [[SUM]]\\n+; add [[SUM]], [[TMP]]\\n+; subs [[IV]], [[IV]], #1\\n+; subs [[IV]], #1\\n+; bne [[LOOP]]\\n ;\\n ; Next BB.\\n ; SUM << 3.\\n-; CHECK: lsl{{s?}} [[SUM]], [[SUM]], #3\\n-; ENABLE: pop {r4, r7, pc}\\n+; lsl{{s?}} [[SUM]], [[SUM]], #3\\n+; pop {r4, r7, pc}\\n ;\\n ; Duplicated epilogue.\\n-; DISABLE: pop {r4, r7, pc}\\n+; pop {r4, r7, pc}\\n ;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n+; [[ELSE_LABEL]]: @ %if.else\\n ; Shift second argument by one and store into returned register.\\n-; CHECK: lsl{{s?}} r0, r1, #1\\n-; DISABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} r0, r1, #1\\n+; pop {r4, r7, pc}\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n define i32 @loopInfoSaveOutsideLoop(i32 %cond, i32 %N) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    beq LBB3_4\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    mov r1, #10\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:  LBB3_2: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r2, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    add r0, r2, r0\\n+; ARM-ENABLE-NEXT:    subs r1, r1, #1\\n+; ARM-ENABLE-NEXT:    bne LBB3_2\\n+; ARM-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-ENABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-ENABLE-NEXT:  LBB3_4: @ %if.else\\n+; ARM-ENABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    beq LBB3_4\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    mov r1, #10\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:  LBB3_2: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r2, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    add r0, r2, r0\\n+; ARM-DISABLE-NEXT:    subs r1, r1, #1\\n+; ARM-DISABLE-NEXT:    bne LBB3_2\\n+; ARM-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-DISABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB3_4: @ %if.else\\n+; ARM-DISABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbz r0, LBB3_4\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    movs r1, #10\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:  LBB3_2: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r2, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    add r0, r2\\n+; THUMB-ENABLE-NEXT:    subs r1, #1\\n+; THUMB-ENABLE-NEXT:    bne LBB3_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-ENABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-ENABLE-NEXT:  LBB3_4: @ %if.else\\n+; THUMB-ENABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    cbz r0, LBB3_4\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    movs r1, #10\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:  LBB3_2: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r2, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    add r0, r2\\n+; THUMB-DISABLE-NEXT:    subs r1, #1\\n+; THUMB-DISABLE-NEXT:    bne LBB3_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-DISABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB3_4: @ %if.else\\n+; THUMB-DISABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -284,50 +706,155 @@ declare void @somethingElse(...)\\n \\n ; Check with a more complex case that we do not have restore within the loop and\\n ; save outside.\\n-; CHECK-LABEL: loopInfoRestoreOutsideLoop:\\n+; loopInfoRestoreOutsideLoop:\\n ;\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n ; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, r7, lr}\\n-; CHECK-NEXT: add r7, sp, #4\\n+; push {r4, r7, lr}\\n+; add r7, sp, #4\\n ;\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-DISABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; SUM is in r0 because it is coalesced with the second\\n ; argument on the else path.\\n-; CHECK: mov{{s?}} [[SUM:r0]], #0\\n-; CHECK-NEXT: mov{{s?}} [[IV:r[0-9]+]], #10\\n+; mov{{s?}} [[SUM:r0]], #0\\n+; mov{{s?}} [[IV:r[0-9]+]], #10\\n ;\\n ; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n-; ARM: add [[SUM]], [[TMP]], [[SUM]]\\n-; THUMB: add [[SUM]], [[TMP]]\\n-; ARM-NEXT: subs [[IV]], [[IV]], #1\\n-; THUMB-NEXT: subs [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n+; [[LOOP:LBB[0-9_]+]]: @ %for.body\\n+; mov{{(\\\\.w)?}} [[TMP:r[0-9]+]], #1\\n+; add [[SUM]], [[TMP]], [[SUM]]\\n+; add [[SUM]], [[TMP]]\\n+; subs [[IV]], [[IV]], #1\\n+; subs [[IV]], #1\\n+; bne [[LOOP]]\\n ;\\n ; Next BB.\\n ; SUM << 3.\\n-; CHECK: lsl{{s?}} [[SUM]], [[SUM]], #3\\n-; ENABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} [[SUM]], [[SUM]], #3\\n+; pop {r4, r7, pc}\\n ;\\n ; Duplicated epilogue.\\n-; DISABLE: pop {r4, r7, pc}\\n+; pop {r4, r7, pc}\\n ;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n+; [[ELSE_LABEL]]: @ %if.else\\n ; Shift second argument by one and store into returned register.\\n-; CHECK: lsl{{s?}} r0, r1, #1\\n-; DISABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} r0, r1, #1\\n+; pop {r4, r7, pc}\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n define i32 @loopInfoRestoreOutsideLoop(i32 %cond, i32 %N) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" nounwind {\\n+; ARM-ENABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    beq LBB4_4\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    mov r1, #10\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:  LBB4_2: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r2, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    add r0, r2, r0\\n+; ARM-ENABLE-NEXT:    subs r1, r1, #1\\n+; ARM-ENABLE-NEXT:    bne LBB4_2\\n+; ARM-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-ENABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-ENABLE-NEXT:  LBB4_4: @ %if.else\\n+; ARM-ENABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    beq LBB4_4\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    mov r1, #10\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:  LBB4_2: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r2, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    add r0, r2, r0\\n+; ARM-DISABLE-NEXT:    subs r1, r1, #1\\n+; ARM-DISABLE-NEXT:    bne LBB4_2\\n+; ARM-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; ARM-DISABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB4_4: @ %if.else\\n+; ARM-DISABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbz r0, LBB4_4\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    movs r1, #10\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:  LBB4_2: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r2, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    add r0, r2\\n+; THUMB-ENABLE-NEXT:    subs r1, #1\\n+; THUMB-ENABLE-NEXT:    bne LBB4_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-ENABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-ENABLE-NEXT:  LBB4_4: @ %if.else\\n+; THUMB-ENABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    cbz r0, LBB4_4\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    movs r1, #10\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:  LBB4_2: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r2, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    add r0, r2\\n+; THUMB-DISABLE-NEXT:    subs r1, #1\\n+; THUMB-DISABLE-NEXT:    bne LBB4_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.3: @ %for.end\\n+; THUMB-DISABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB4_4: @ %if.else\\n+; THUMB-DISABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -359,53 +886,190 @@ if.end:                                           ; preds = %if.else, %for.end\\n }\\n \\n ; Check that we handle function with no frame information correctly.\\n-; CHECK-LABEL: emptyFrame:\\n-; CHECK: @ %entry\\n-; CHECK-NEXT: mov{{s?}} r0, #0\\n-; CHECK-NEXT: bx lr\\n+; emptyFrame:\\n+; @ %entry\\n+; mov{{s?}} r0, #0\\n+; bx lr\\n define i32 @emptyFrame() {\\n+; ARM-LABEL: emptyFrame:\\n+; ARM:       @ %bb.0: @ %entry\\n+; ARM-NEXT:    mov r0, #0\\n+; ARM-NEXT:    bx lr\\n+;\\n+; THUMB-LABEL: emptyFrame:\\n+; THUMB:       @ %bb.0: @ %entry\\n+; THUMB-NEXT:    movs r0, #0\\n+; THUMB-NEXT:    bx lr\\n+; ARM-ENABLE-LABEL: emptyFrame:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: emptyFrame:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    bx lr\\n+;\\n+; THUMB-ENABLE-LABEL: emptyFrame:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: emptyFrame:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    bx lr\\n entry:\\n   ret i32 0\\n }\\n \\n ; Check that we handle inline asm correctly.\\n-; CHECK-LABEL: inlineAsm:\\n+; inlineAsm:\\n ;\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n ; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, r7, lr}\\n-; CHECK-NEXT: add r7, sp, #4\\n+; push {r4, r7, lr}\\n+; add r7, sp, #4\\n ;\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-DISABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n-; CHECK: mov{{s?}} [[IV:r[0-9]+]], #10\\n+; mov{{s?}} [[IV:r[0-9]+]], #10\\n ;\\n ; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; ARM: subs [[IV]], [[IV]], #1\\n-; THUMB: subs [[IV]], #1\\n-; CHECK: add{{(\\\\.w)?}} r4, r4, #1\\n-; CHECK: bne [[LOOP]]\\n+; [[LOOP:LBB[0-9_]+]]: @ %for.body\\n+; subs [[IV]], [[IV]], #1\\n+; subs [[IV]], #1\\n+; add{{(\\\\.w)?}} r4, r4, #1\\n+; bne [[LOOP]]\\n ;\\n ; Next BB.\\n-; CHECK: mov{{s?}} r0, #0\\n+; mov{{s?}} r0, #0\\n ;\\n ; Duplicated epilogue.\\n-; DISABLE: pop {r4, r7, pc}\\n+; pop {r4, r7, pc}\\n ;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n+; [[ELSE_LABEL]]: @ %if.else\\n ; Shift second argument by one and store into returned register.\\n-; CHECK: lsl{{s?}} r0, r1, #1\\n-; DISABLE-NEXT: pop {r4, r7, pc}\\n+; lsl{{s?}} r0, r1, #1\\n+; pop {r4, r7, pc}\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n define i32 @inlineAsm(i32 %cond, i32 %N) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: inlineAsm:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    beq LBB6_4\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    mov r0, #10\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:  LBB6_2: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    subs r0, r0, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    add r4, r4, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    bne LBB6_2\\n+; ARM-ENABLE-NEXT:  @ %bb.3: @ %for.exit\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    nop\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-ENABLE-NEXT:  LBB6_4: @ %if.else\\n+; ARM-ENABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: inlineAsm:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    beq LBB6_4\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; ARM-DISABLE-NEXT:    mov r0, #10\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:  LBB6_2: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    subs r0, r0, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    add r4, r4, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    bne LBB6_2\\n+; ARM-DISABLE-NEXT:  @ %bb.3: @ %for.exit\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    nop\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB6_4: @ %if.else\\n+; ARM-DISABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: inlineAsm:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbz r0, LBB6_4\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    movs r0, #10\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:  LBB6_2: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    subs r0, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    add.w r4, r4, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    bne LBB6_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.3: @ %for.exit\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    nop\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-ENABLE-NEXT:  LBB6_4: @ %if.else\\n+; THUMB-ENABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: inlineAsm:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    cbz r0, LBB6_4\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %for.preheader\\n+; THUMB-DISABLE-NEXT:    movs r0, #10\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:  LBB6_2: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    subs r0, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    add.w r4, r4, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    bne LBB6_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.3: @ %for.exit\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    nop\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB6_4: @ %if.else\\n+; THUMB-DISABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -435,46 +1099,131 @@ if.end:                                           ; preds = %for.body, %if.else\\n }\\n \\n ; Check that we handle calls to variadic functions correctly.\\n-; CHECK-LABEL: callVariadicFunc:\\n+; callVariadicFunc:\\n ;\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Prologue code.\\n-; CHECK: push {r7, lr}\\n-; CHECK-NEXT: mov r7, sp\\n-; CHECK-NEXT: sub sp, {{(sp, )?}}#12\\n+; push {r7, lr}\\n+; mov r7, sp\\n+; sub sp, {{(sp, )?}}#12\\n ;\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-; THUMB-DISABLE-NEXT: cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cmp r0, #0\\n+; beq [[ELSE_LABEL:LBB[0-9_]+]]\\n+; cbz r0, [[ELSE_LABEL:LBB[0-9_]+]]\\n ;\\n ; Setup of the varags.\\n-; CHECK: mov r0, r1\\n-; CHECK-NEXT: mov r2, r1\\n-; CHECK-NEXT: mov r3, r1\\n-; ARM-NEXT: str r1, [sp]\\n-; ARM-NEXT: str r1, [sp, #4]\\n-; THUMB-NEXT: strd r1, r1, [sp]\\n-; CHECK-NEXT: str r1, [sp, #8]\\n-; CHECK-NEXT: bl{{x?}} _someVariadicFunc\\n-; CHECK-NEXT: lsl{{s?}} r0, r0, #3\\n-; ARM-NEXT: mov sp, r7\\n-; THUMB-NEXT: add sp, #12\\n-; CHECK-NEXT: pop {r7, pc}\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n+; mov r0, r1\\n+; mov r2, r1\\n+; mov r3, r1\\n+; str r1, [sp]\\n+; str r1, [sp, #4]\\n+; strd r1, r1, [sp]\\n+; str r1, [sp, #8]\\n+; bl{{x?}} _someVariadicFunc\\n+; lsl{{s?}} r0, r0, #3\\n+; mov sp, r7\\n+; add sp, #12\\n+; pop {r7, pc}\\n+;\\n+; [[ELSE_LABEL]]: @ %if.else\\n ; Shift second argument by one and store into returned register.\\n-; CHECK: lsl{{s?}} r0, r1, #1\\n+; lsl{{s?}} r0, r1, #1\\n ;\\n ; Epilogue code.\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n ;\\n-; ARM-DISABLE-NEXT: mov sp, r7\\n-; THUMB-DISABLE-NEXT: add sp, #12\\n-; DISABLE-NEXT: pop {r7, pc}\\n+; mov sp, r7\\n+; add sp, #12\\n+; pop {r7, pc}\\n define i32 @callVariadicFunc(i32 %cond, i32 %N) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: callVariadicFunc:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    beq LBB7_2\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-ENABLE-NEXT:    push {r7, lr}\\n+; ARM-ENABLE-NEXT:    mov r7, sp\\n+; ARM-ENABLE-NEXT:    sub sp, sp, #12\\n+; ARM-ENABLE-NEXT:    mov r0, r1\\n+; ARM-ENABLE-NEXT:    mov r2, r1\\n+; ARM-ENABLE-NEXT:    mov r3, r1\\n+; ARM-ENABLE-NEXT:    str r1, [sp]\\n+; ARM-ENABLE-NEXT:    str r1, [sp, #4]\\n+; ARM-ENABLE-NEXT:    str r1, [sp, #8]\\n+; ARM-ENABLE-NEXT:    bl _someVariadicFunc\\n+; ARM-ENABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-ENABLE-NEXT:    mov sp, r7\\n+; ARM-ENABLE-NEXT:    pop {r7, pc}\\n+; ARM-ENABLE-NEXT:  LBB7_2: @ %if.else\\n+; ARM-ENABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: callVariadicFunc:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r7, lr}\\n+; ARM-DISABLE-NEXT:    mov r7, sp\\n+; ARM-DISABLE-NEXT:    sub sp, sp, #12\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    beq LBB7_2\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-DISABLE-NEXT:    mov r0, r1\\n+; ARM-DISABLE-NEXT:    mov r2, r1\\n+; ARM-DISABLE-NEXT:    mov r3, r1\\n+; ARM-DISABLE-NEXT:    str r1, [sp]\\n+; ARM-DISABLE-NEXT:    str r1, [sp, #4]\\n+; ARM-DISABLE-NEXT:    str r1, [sp, #8]\\n+; ARM-DISABLE-NEXT:    bl _someVariadicFunc\\n+; ARM-DISABLE-NEXT:    lsl r0, r0, #3\\n+; ARM-DISABLE-NEXT:    mov sp, r7\\n+; ARM-DISABLE-NEXT:    pop {r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB7_2: @ %if.else\\n+; ARM-DISABLE-NEXT:    lsl r0, r1, #1\\n+; ARM-DISABLE-NEXT:    mov sp, r7\\n+; ARM-DISABLE-NEXT:    pop {r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: callVariadicFunc:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbz r0, LBB7_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-ENABLE-NEXT:    push {r7, lr}\\n+; THUMB-ENABLE-NEXT:    mov r7, sp\\n+; THUMB-ENABLE-NEXT:    sub sp, #12\\n+; THUMB-ENABLE-NEXT:    mov r0, r1\\n+; THUMB-ENABLE-NEXT:    mov r2, r1\\n+; THUMB-ENABLE-NEXT:    mov r3, r1\\n+; THUMB-ENABLE-NEXT:    strd r1, r1, [sp]\\n+; THUMB-ENABLE-NEXT:    str r1, [sp, #8]\\n+; THUMB-ENABLE-NEXT:    bl _someVariadicFunc\\n+; THUMB-ENABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-ENABLE-NEXT:    add sp, #12\\n+; THUMB-ENABLE-NEXT:    pop {r7, pc}\\n+; THUMB-ENABLE-NEXT:  LBB7_2: @ %if.else\\n+; THUMB-ENABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: callVariadicFunc:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r7, lr}\\n+; THUMB-DISABLE-NEXT:    mov r7, sp\\n+; THUMB-DISABLE-NEXT:    sub sp, #12\\n+; THUMB-DISABLE-NEXT:    cbz r0, LBB7_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-DISABLE-NEXT:    mov r0, r1\\n+; THUMB-DISABLE-NEXT:    mov r2, r1\\n+; THUMB-DISABLE-NEXT:    mov r3, r1\\n+; THUMB-DISABLE-NEXT:    strd r1, r1, [sp]\\n+; THUMB-DISABLE-NEXT:    str r1, [sp, #8]\\n+; THUMB-DISABLE-NEXT:    bl _someVariadicFunc\\n+; THUMB-DISABLE-NEXT:    lsls r0, r0, #3\\n+; THUMB-DISABLE-NEXT:    add sp, #12\\n+; THUMB-DISABLE-NEXT:    pop {r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB7_2: @ %if.else\\n+; THUMB-DISABLE-NEXT:    lsls r0, r1, #1\\n+; THUMB-DISABLE-NEXT:    add sp, #12\\n+; THUMB-DISABLE-NEXT:    pop {r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -499,29 +1248,86 @@ declare i32 @someVariadicFunc(i32, ...)\\n ; Although this is not incorrect to insert such code, it is useless\\n ; and it hurts the binary size.\\n ;\\n-; CHECK-LABEL: noreturn:\\n-; DISABLE: push\\n-; ARM-ENABLE: cmp r0, #0\\n-; ARM-DISABLE: cmp r0, #0\\n-; ARM-ENABLE: bne [[ABORT:LBB[0-9_]+]]\\n-; ARM-DISABLE: bne [[ABORT:LBB[0-9_]+]]\\n-; THUMB-ENABLE: cbnz r0,  [[ABORT:LBB[0-9_]+]]\\n-; THUMB-DISABLE: cbnz r0,  [[ABORT:LBB[0-9_]+]]\\n+; noreturn:\\n+; push\\n+; cmp r0, #0\\n+; cmp r0, #0\\n+; bne [[ABORT:LBB[0-9_]+]]\\n+; bne [[ABORT:LBB[0-9_]+]]\\n+; cbnz r0,  [[ABORT:LBB[0-9_]+]]\\n+; cbnz r0,  [[ABORT:LBB[0-9_]+]]\\n \\n ;\\n-; CHECK: mov{{s?}} r0, #42\\n+; mov{{s?}} r0, #42\\n ;\\n-; ENABLE-NEXT: bx lr\\n+; bx lr\\n ;\\n-; DISABLE-NEXT: pop\\n+; pop\\n ;;\\n-; CHECK: [[ABORT]]: @ %if.abort\\n+; [[ABORT]]: @ %if.abort\\n ;\\n-; ENABLE: push\\n+; push\\n ;\\n-; CHECK: bl{{x?}} _abort\\n-; ENABLE-NOT: pop\\n+; bl{{x?}} _abort\\n+; pop\\n define i32 @noreturn(i8 signext %bad_thing) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-ENABLE-LABEL: noreturn:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    bne LBB8_2\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %if.end\\n+; ARM-ENABLE-NEXT:    mov r0, #42\\n+; ARM-ENABLE-NEXT:    bx lr\\n+; ARM-ENABLE-NEXT:  LBB8_2: @ %if.abort\\n+; ARM-ENABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #4\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r0, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    bl _abort\\n+;\\n+; ARM-DISABLE-LABEL: noreturn:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #4\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    bne LBB8_2\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %if.end\\n+; ARM-DISABLE-NEXT:    mov r0, #42\\n+; ARM-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; ARM-DISABLE-NEXT:  LBB8_2: @ %if.abort\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r0, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    bl _abort\\n+;\\n+; THUMB-ENABLE-LABEL: noreturn:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    cbnz r0, LBB8_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %if.end\\n+; THUMB-ENABLE-NEXT:    movs r0, #42\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+; THUMB-ENABLE-NEXT:  LBB8_2: @ %if.abort\\n+; THUMB-ENABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #4\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r0, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    bl _abort\\n+;\\n+; THUMB-DISABLE-LABEL: noreturn:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #4\\n+; THUMB-DISABLE-NEXT:    cbnz r0, LBB8_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %if.end\\n+; THUMB-DISABLE-NEXT:    movs r0, #42\\n+; THUMB-DISABLE-NEXT:    pop {r4, r7, pc}\\n+; THUMB-DISABLE-NEXT:  LBB8_2: @ %if.abort\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r0, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    bl _abort\\n entry:\\n   %tobool = icmp eq i8 %bad_thing, 0\\n   br i1 %tobool, label %if.end, label %if.abort\\n@@ -546,9 +1352,142 @@ attributes #0 = { noreturn nounwind }\\n ; dominator is itself. In this case, we cannot perform shrink wrapping, but we\\n ; should return gracefully and continue compilation.\\n ; The only condition for this test is the compilation finishes correctly.\\n-; CHECK-LABEL: infiniteloop\\n-; CHECK: pop\\n+; infiniteloop\\n+; pop\\n define void @infiniteloop() \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-LABEL: infiniteloop:\\n+; ARM:       @ %bb.0: @ %entry\\n+; ARM-NEXT:    push {r4, r5, r7, lr}\\n+; ARM-NEXT:    add r7, sp, #8\\n+; ARM-NEXT:    mov r0, #0\\n+; ARM-NEXT:    cmp r0, #0\\n+; ARM-NEXT:    bne LBB9_3\\n+; ARM-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-NEXT:    sub r1, sp, #16\\n+; ARM-NEXT:    mov sp, r1\\n+; ARM-NEXT:  LBB9_2: @ %for.body\\n+; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-NEXT:    @ InlineAsm Start\\n+; ARM-NEXT:    mov r2, #1\\n+; ARM-NEXT:    @ InlineAsm End\\n+; ARM-NEXT:    add r0, r2, r0\\n+; ARM-NEXT:    str r0, [r1]\\n+; ARM-NEXT:    b LBB9_2\\n+; ARM-NEXT:  LBB9_3: @ %if.end\\n+; ARM-NEXT:    sub sp, r7, #8\\n+; ARM-NEXT:    pop {r4, r5, r7, pc}\\n+;\\n+; THUMB-LABEL: infiniteloop:\\n+; THUMB:       @ %bb.0: @ %entry\\n+; THUMB-NEXT:    push {r4, r5, r7, lr}\\n+; THUMB-NEXT:    add r7, sp, #8\\n+; THUMB-NEXT:    movs r0, #0\\n+; THUMB-NEXT:    cbnz r0, LBB9_3\\n+; THUMB-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-NEXT:    sub.w r0, sp, #16\\n+; THUMB-NEXT:    mov sp, r0\\n+; THUMB-NEXT:    movs r1, #0\\n+; THUMB-NEXT:  LBB9_2: @ %for.body\\n+; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-NEXT:    @ InlineAsm Start\\n+; THUMB-NEXT:    mov.w r2, #1\\n+; THUMB-NEXT:    @ InlineAsm End\\n+; THUMB-NEXT:    add r1, r2\\n+; THUMB-NEXT:    str r1, [r0]\\n+; THUMB-NEXT:    b LBB9_2\\n+; THUMB-NEXT:  LBB9_3: @ %if.end\\n+; THUMB-NEXT:    sub.w r4, r7, #8\\n+; THUMB-NEXT:    mov sp, r4\\n+; THUMB-NEXT:    pop {r4, r5, r7, pc}\\n+; ARM-ENABLE-LABEL: infiniteloop:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    push {r4, r5, r7, lr}\\n+; ARM-ENABLE-NEXT:    add r7, sp, #8\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    bne LBB9_3\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-ENABLE-NEXT:    sub r1, sp, #16\\n+; ARM-ENABLE-NEXT:    mov sp, r1\\n+; ARM-ENABLE-NEXT:  LBB9_2: @ %for.body\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm Start\\n+; ARM-ENABLE-NEXT:    mov r2, #1\\n+; ARM-ENABLE-NEXT:    @ InlineAsm End\\n+; ARM-ENABLE-NEXT:    add r0, r2, r0\\n+; ARM-ENABLE-NEXT:    str r0, [r1]\\n+; ARM-ENABLE-NEXT:    b LBB9_2\\n+; ARM-ENABLE-NEXT:  LBB9_3: @ %if.end\\n+; ARM-ENABLE-NEXT:    sub sp, r7, #8\\n+; ARM-ENABLE-NEXT:    pop {r4, r5, r7, pc}\\n+;\\n+; ARM-DISABLE-LABEL: infiniteloop:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    push {r4, r5, r7, lr}\\n+; ARM-DISABLE-NEXT:    add r7, sp, #8\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    bne LBB9_3\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; ARM-DISABLE-NEXT:    sub r1, sp, #16\\n+; ARM-DISABLE-NEXT:    mov sp, r1\\n+; ARM-DISABLE-NEXT:  LBB9_2: @ %for.body\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm Start\\n+; ARM-DISABLE-NEXT:    mov r2, #1\\n+; ARM-DISABLE-NEXT:    @ InlineAsm End\\n+; ARM-DISABLE-NEXT:    add r0, r2, r0\\n+; ARM-DISABLE-NEXT:    str r0, [r1]\\n+; ARM-DISABLE-NEXT:    b LBB9_2\\n+; ARM-DISABLE-NEXT:  LBB9_3: @ %if.end\\n+; ARM-DISABLE-NEXT:    sub sp, r7, #8\\n+; ARM-DISABLE-NEXT:    pop {r4, r5, r7, pc}\\n+;\\n+; THUMB-ENABLE-LABEL: infiniteloop:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    push {r4, r5, r7, lr}\\n+; THUMB-ENABLE-NEXT:    add r7, sp, #8\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    cbnz r0, LBB9_3\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-ENABLE-NEXT:    sub.w r0, sp, #16\\n+; THUMB-ENABLE-NEXT:    mov sp, r0\\n+; THUMB-ENABLE-NEXT:    movs r1, #0\\n+; THUMB-ENABLE-NEXT:  LBB9_2: @ %for.body\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-ENABLE-NEXT:    mov.w r2, #1\\n+; THUMB-ENABLE-NEXT:    @ InlineAsm End\\n+; THUMB-ENABLE-NEXT:    add r1, r2\\n+; THUMB-ENABLE-NEXT:    str r1, [r0]\\n+; THUMB-ENABLE-NEXT:    b LBB9_2\\n+; THUMB-ENABLE-NEXT:  LBB9_3: @ %if.end\\n+; THUMB-ENABLE-NEXT:    sub.w r4, r7, #8\\n+; THUMB-ENABLE-NEXT:    mov sp, r4\\n+; THUMB-ENABLE-NEXT:    pop {r4, r5, r7, pc}\\n+;\\n+; THUMB-DISABLE-LABEL: infiniteloop:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    push {r4, r5, r7, lr}\\n+; THUMB-DISABLE-NEXT:    add r7, sp, #8\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    cbnz r0, LBB9_3\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %if.then\\n+; THUMB-DISABLE-NEXT:    sub.w r0, sp, #16\\n+; THUMB-DISABLE-NEXT:    mov sp, r0\\n+; THUMB-DISABLE-NEXT:    movs r1, #0\\n+; THUMB-DISABLE-NEXT:  LBB9_2: @ %for.body\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm Start\\n+; THUMB-DISABLE-NEXT:    mov.w r2, #1\\n+; THUMB-DISABLE-NEXT:    @ InlineAsm End\\n+; THUMB-DISABLE-NEXT:    add r1, r2\\n+; THUMB-DISABLE-NEXT:    str r1, [r0]\\n+; THUMB-DISABLE-NEXT:    b LBB9_2\\n+; THUMB-DISABLE-NEXT:  LBB9_3: @ %if.end\\n+; THUMB-DISABLE-NEXT:    sub.w r4, r7, #8\\n+; THUMB-DISABLE-NEXT:    mov sp, r4\\n+; THUMB-DISABLE-NEXT:    pop {r4, r5, r7, pc}\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n \\n@@ -568,8 +1507,8 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with a body bigger than just one block.\\n-; CHECK-LABEL: infiniteloop2\\n-; CHECK: pop\\n+; infiniteloop2\\n+; pop\\n define void @infiniteloop2() \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n@@ -598,9 +1537,169 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with two nested infinite loop.\\n-; CHECK-LABEL: infiniteloop3\\n-; CHECK: bx lr\\n+; infiniteloop3\\n+; bx lr\\n define void @infiniteloop3() \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-LABEL: infiniteloop3:\\n+; ARM:       @ %bb.0: @ %entry\\n+; ARM-NEXT:    mov r0, #0\\n+; ARM-NEXT:    cmp r0, #0\\n+; ARM-NEXT:    bne LBB11_5\\n+; ARM-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; ARM-NEXT:    mov r1, #0\\n+; ARM-NEXT:    mov r2, r0\\n+; ARM-NEXT:    b LBB11_3\\n+; ARM-NEXT:  LBB11_2: @ %loop2b\\n+; ARM-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-NEXT:    str r1, [r2]\\n+; ARM-NEXT:    mov r2, r1\\n+; ARM-NEXT:    mov r1, r3\\n+; ARM-NEXT:  LBB11_3: @ %loop1\\n+; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-NEXT:    ldr r3, [r0]\\n+; ARM-NEXT:    cmp r0, #0\\n+; ARM-NEXT:    bne LBB11_2\\n+; ARM-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-NEXT:    mov r0, r1\\n+; ARM-NEXT:    mov r1, r3\\n+; ARM-NEXT:    mov r2, r0\\n+; ARM-NEXT:    b LBB11_3\\n+; ARM-NEXT:  LBB11_5: @ %end\\n+; ARM-NEXT:    bx lr\\n+;\\n+; THUMB-LABEL: infiniteloop3:\\n+; THUMB:       @ %bb.0: @ %entry\\n+; THUMB-NEXT:    movs r0, #0\\n+; THUMB-NEXT:    cbnz r0, LBB11_5\\n+; THUMB-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; THUMB-NEXT:    movs r0, #0\\n+; THUMB-NEXT:    movs r1, #0\\n+; THUMB-NEXT:    mov r2, r0\\n+; THUMB-NEXT:    b LBB11_3\\n+; THUMB-NEXT:  LBB11_2: @ %loop2b\\n+; THUMB-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-NEXT:    str r1, [r2]\\n+; THUMB-NEXT:    mov r2, r1\\n+; THUMB-NEXT:    mov r1, r3\\n+; THUMB-NEXT:  LBB11_3: @ %loop1\\n+; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-NEXT:    ldr r3, [r0]\\n+; THUMB-NEXT:    cmp r0, #0\\n+; THUMB-NEXT:    bne LBB11_2\\n+; THUMB-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-NEXT:    mov r0, r1\\n+; THUMB-NEXT:    mov r1, r3\\n+; THUMB-NEXT:    mov r2, r0\\n+; THUMB-NEXT:    b LBB11_3\\n+; THUMB-NEXT:  LBB11_5: @ %end\\n+; THUMB-NEXT:    bx lr\\n+; ARM-ENABLE-LABEL: infiniteloop3:\\n+; ARM-ENABLE:       @ %bb.0: @ %entry\\n+; ARM-ENABLE-NEXT:    mov r0, #0\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    bne LBB11_5\\n+; ARM-ENABLE-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; ARM-ENABLE-NEXT:    mov r1, #0\\n+; ARM-ENABLE-NEXT:    mov r2, r0\\n+; ARM-ENABLE-NEXT:    b LBB11_3\\n+; ARM-ENABLE-NEXT:  LBB11_2: @ %loop2b\\n+; ARM-ENABLE-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-ENABLE-NEXT:    str r1, [r2]\\n+; ARM-ENABLE-NEXT:    mov r2, r1\\n+; ARM-ENABLE-NEXT:    mov r1, r3\\n+; ARM-ENABLE-NEXT:  LBB11_3: @ %loop1\\n+; ARM-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-ENABLE-NEXT:    ldr r3, [r0]\\n+; ARM-ENABLE-NEXT:    cmp r0, #0\\n+; ARM-ENABLE-NEXT:    bne LBB11_2\\n+; ARM-ENABLE-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-ENABLE-NEXT:    mov r0, r1\\n+; ARM-ENABLE-NEXT:    mov r1, r3\\n+; ARM-ENABLE-NEXT:    mov r2, r0\\n+; ARM-ENABLE-NEXT:    b LBB11_3\\n+; ARM-ENABLE-NEXT:  LBB11_5: @ %end\\n+; ARM-ENABLE-NEXT:    bx lr\\n+;\\n+; ARM-DISABLE-LABEL: infiniteloop3:\\n+; ARM-DISABLE:       @ %bb.0: @ %entry\\n+; ARM-DISABLE-NEXT:    mov r0, #0\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    bne LBB11_5\\n+; ARM-DISABLE-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; ARM-DISABLE-NEXT:    mov r1, #0\\n+; ARM-DISABLE-NEXT:    mov r2, r0\\n+; ARM-DISABLE-NEXT:    b LBB11_3\\n+; ARM-DISABLE-NEXT:  LBB11_2: @ %loop2b\\n+; ARM-DISABLE-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-DISABLE-NEXT:    str r1, [r2]\\n+; ARM-DISABLE-NEXT:    mov r2, r1\\n+; ARM-DISABLE-NEXT:    mov r1, r3\\n+; ARM-DISABLE-NEXT:  LBB11_3: @ %loop1\\n+; ARM-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ARM-DISABLE-NEXT:    ldr r3, [r0]\\n+; ARM-DISABLE-NEXT:    cmp r0, #0\\n+; ARM-DISABLE-NEXT:    bne LBB11_2\\n+; ARM-DISABLE-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; ARM-DISABLE-NEXT:    mov r0, r1\\n+; ARM-DISABLE-NEXT:    mov r1, r3\\n+; ARM-DISABLE-NEXT:    mov r2, r0\\n+; ARM-DISABLE-NEXT:    b LBB11_3\\n+; ARM-DISABLE-NEXT:  LBB11_5: @ %end\\n+; ARM-DISABLE-NEXT:    bx lr\\n+;\\n+; THUMB-ENABLE-LABEL: infiniteloop3:\\n+; THUMB-ENABLE:       @ %bb.0: @ %entry\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    cbnz r0, LBB11_5\\n+; THUMB-ENABLE-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; THUMB-ENABLE-NEXT:    movs r0, #0\\n+; THUMB-ENABLE-NEXT:    movs r1, #0\\n+; THUMB-ENABLE-NEXT:    mov r2, r0\\n+; THUMB-ENABLE-NEXT:    b LBB11_3\\n+; THUMB-ENABLE-NEXT:  LBB11_2: @ %loop2b\\n+; THUMB-ENABLE-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-ENABLE-NEXT:    str r1, [r2]\\n+; THUMB-ENABLE-NEXT:    mov r2, r1\\n+; THUMB-ENABLE-NEXT:    mov r1, r3\\n+; THUMB-ENABLE-NEXT:  LBB11_3: @ %loop1\\n+; THUMB-ENABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-ENABLE-NEXT:    ldr r3, [r0]\\n+; THUMB-ENABLE-NEXT:    cmp r0, #0\\n+; THUMB-ENABLE-NEXT:    bne LBB11_2\\n+; THUMB-ENABLE-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-ENABLE-NEXT:    mov r0, r1\\n+; THUMB-ENABLE-NEXT:    mov r1, r3\\n+; THUMB-ENABLE-NEXT:    mov r2, r0\\n+; THUMB-ENABLE-NEXT:    b LBB11_3\\n+; THUMB-ENABLE-NEXT:  LBB11_5: @ %end\\n+; THUMB-ENABLE-NEXT:    bx lr\\n+;\\n+; THUMB-DISABLE-LABEL: infiniteloop3:\\n+; THUMB-DISABLE:       @ %bb.0: @ %entry\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    cbnz r0, LBB11_5\\n+; THUMB-DISABLE-NEXT:  @ %bb.1: @ %loop2a.preheader\\n+; THUMB-DISABLE-NEXT:    movs r0, #0\\n+; THUMB-DISABLE-NEXT:    movs r1, #0\\n+; THUMB-DISABLE-NEXT:    mov r2, r0\\n+; THUMB-DISABLE-NEXT:    b LBB11_3\\n+; THUMB-DISABLE-NEXT:  LBB11_2: @ %loop2b\\n+; THUMB-DISABLE-NEXT:    @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-DISABLE-NEXT:    str r1, [r2]\\n+; THUMB-DISABLE-NEXT:    mov r2, r1\\n+; THUMB-DISABLE-NEXT:    mov r1, r3\\n+; THUMB-DISABLE-NEXT:  LBB11_3: @ %loop1\\n+; THUMB-DISABLE-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; THUMB-DISABLE-NEXT:    ldr r3, [r0]\\n+; THUMB-DISABLE-NEXT:    cmp r0, #0\\n+; THUMB-DISABLE-NEXT:    bne LBB11_2\\n+; THUMB-DISABLE-NEXT:  @ %bb.4: @ in Loop: Header=BB11_3 Depth=1\\n+; THUMB-DISABLE-NEXT:    mov r0, r1\\n+; THUMB-DISABLE-NEXT:    mov r1, r3\\n+; THUMB-DISABLE-NEXT:    mov r2, r0\\n+; THUMB-DISABLE-NEXT:    b LBB11_3\\n+; THUMB-DISABLE-NEXT:  LBB11_5: @ %end\\n+; THUMB-DISABLE-NEXT:    bx lr\\n entry:\\n   br i1 undef, label %loop2a, label %body\\n \\n@@ -636,31 +1735,127 @@ declare double @llvm.pow.f64(double, double)\\n ; exercise the path where we were dereferencing the end iterator\\n ; to access debug info location while inserting the spill code\\n ; during PEI with shrink-wrapping enable.\\n-; CHECK-LABEL: debug_info:\\n+; debug_info:\\n ;\\n-; ENABLE: {{tst  r2, #1|lsls r1, r2, #31}}\\n-; ENABLE-NEXT: beq      [[BB13:LBB[0-9_]+]]\\n+; {{tst  r2, #1|lsls r1, r2, #31}}\\n+; beq      [[BB13:LBB[0-9_]+]]\\n ;\\n-; CHECK: push\\n+; push\\n ;\\n-; DISABLE: {{tst  r2, #1|lsls r1, r2, #31}}\\n-; DISABLE: beq      [[BB13:LBB[0-9_]+]]\\n+; {{tst  r2, #1|lsls r1, r2, #31}}\\n+; beq      [[BB13:LBB[0-9_]+]]\\n ;\\n-; CHECK: bl{{x?}} _pow\\n+; bl{{x?}} _pow\\n ;\\n ;\\n-; ENABLE: pop\\n+; pop\\n ;\\n-; CHECK: [[BB13]]:\\n-; CHECK: vldr\\n+; [[BB13]]:\\n+; vldr\\n ;\\n-; DISABLE: pop\\n+; pop\\n ;\\n ; FIXME: This is flakey passing by finding 'bl' somewhere amongst the debug\\n ; info (like labels named 'line_table) not because it's found a bl instruction.\\n ;\\n-; CHECK: bl\\n+; bl\\n define float @debug_info(float %gamma, float %slopeLimit, i1 %or.cond, double %tmp) \\\"no-frame-pointer-elim\\\"=\\\"true\\\" {\\n+; ARM-LABEL: debug_info:\\n+; ARM:       @ %bb.0: @ %bb\\n+; ARM-NEXT:    push {r4, r7, lr}\\n+; ARM-NEXT:    add r7, sp, #4\\n+; ARM-NEXT:    sub r4, sp, #16\\n+; ARM-NEXT:    bfc r4, #0, #4\\n+; ARM-NEXT:    mov sp, r4\\n+; ARM-NEXT:    tst r2, #1\\n+; ARM-NEXT:    vst1.64 {d8, d9}, [r4:128]\\n+; ARM-NEXT:    beq LBB12_2\\n+; ARM-NEXT:  @ %bb.1: @ %bb3\\n+; ARM-NEXT:    ldr r1, [r7, #8]\\n+; ARM-NEXT:    vmov s16, r0\\n+; ARM-NEXT:    mov r0, r3\\n+; ARM-NEXT:    mov r2, r3\\n+; ARM-NEXT:    vmov d9, r3, r1\\n+; ARM-NEXT:    mov r3, r1\\n+; ARM-NEXT:    bl _pow\\n+; ARM-NEXT:    vmov.f32 s0, #1.000000e+00\\n+; ARM-NEXT:    vmov.f64 d16, #1.000000e+00\\n+; ARM-NEXT:    vadd.f64 d16, d9, d16\\n+; ARM-NEXT:    vcmpe.f32 s16, s0\\n+; ARM-NEXT:    vmrs APSR_nzcv, fpscr\\n+; ARM-NEXT:    vmov d17, r0, r1\\n+; ARM-NEXT:    vmov.f64 d18, d9\\n+; ARM-NEXT:    vadd.f64 d17, d17, d17\\n+; ARM-NEXT:    vmovgt.f64 d18, d16\\n+; ARM-NEXT:    vcmp.f64 d18, d9\\n+; ARM-NEXT:    vmrs APSR_nzcv, fpscr\\n+; ARM-NEXT:    vmovne.f64 d9, d17\\n+; ARM-NEXT:    vcvt.f32.f64 s0, d9\\n+; ARM-NEXT:    b LBB12_3\\n+; ARM-NEXT:  LBB12_2:\\n+; ARM-NEXT:    vldr s0, LCPI12_0\\n+; ARM-NEXT:  LBB12_3: @ %bb13\\n+; ARM-NEXT:    mov r4, sp\\n+; ARM-NEXT:    vld1.64 {d8, d9}, [r4:128]\\n+; ARM-NEXT:    vmov r0, s0\\n+; ARM-NEXT:    sub sp, r7, #4\\n+; ARM-NEXT:    pop {r4, r7, pc}\\n+; ARM-NEXT:    .p2align 2\\n+; ARM-NEXT:  @ %bb.4:\\n+; ARM-NEXT:    .data_region\\n+; ARM-NEXT:  LCPI12_0:\\n+; ARM-NEXT:    .long 0 @ float 0\\n+; ARM-NEXT:    .end_data_region\\n+;\\n+; THUMB-LABEL: debug_info:\\n+; THUMB:       @ %bb.0: @ %bb\\n+; THUMB-NEXT:    push {r4, r7, lr}\\n+; THUMB-NEXT:    add r7, sp, #4\\n+; THUMB-NEXT:    sub.w r4, sp, #16\\n+; THUMB-NEXT:    bfc r4, #0, #4\\n+; THUMB-NEXT:    mov sp, r4\\n+; THUMB-NEXT:    lsls r1, r2, #31\\n+; THUMB-NEXT:    vst1.64 {d8, d9}, [r4:128]\\n+; THUMB-NEXT:    beq LBB12_2\\n+; THUMB-NEXT:  @ %bb.1: @ %bb3\\n+; THUMB-NEXT:    ldr r1, [r7, #8]\\n+; THUMB-NEXT:    vmov s16, r0\\n+; THUMB-NEXT:    mov r0, r3\\n+; THUMB-NEXT:    mov r2, r3\\n+; THUMB-NEXT:    vmov d9, r3, r1\\n+; THUMB-NEXT:    mov r3, r1\\n+; THUMB-NEXT:    bl _pow\\n+; THUMB-NEXT:    vmov.f32 s0, #1.000000e+00\\n+; THUMB-NEXT:    vmov.f64 d16, #1.000000e+00\\n+; THUMB-NEXT:    vmov.f64 d18, d9\\n+; THUMB-NEXT:    vcmpe.f32 s16, s0\\n+; THUMB-NEXT:    vadd.f64 d16, d9, d16\\n+; THUMB-NEXT:    vmrs APSR_nzcv, fpscr\\n+; THUMB-NEXT:    it gt\\n+; THUMB-NEXT:    vmovgt.f64 d18, d16\\n+; THUMB-NEXT:    vcmp.f64 d18, d9\\n+; THUMB-NEXT:    vmov d17, r0, r1\\n+; THUMB-NEXT:    vmrs APSR_nzcv, fpscr\\n+; THUMB-NEXT:    vadd.f64 d17, d17, d17\\n+; THUMB-NEXT:    it ne\\n+; THUMB-NEXT:    vmovne.f64 d9, d17\\n+; THUMB-NEXT:    vcvt.f32.f64 s0, d9\\n+; THUMB-NEXT:    b LBB12_3\\n+; THUMB-NEXT:  LBB12_2:\\n+; THUMB-NEXT:    vldr s0, LCPI12_0\\n+; THUMB-NEXT:  LBB12_3: @ %bb13\\n+; THUMB-NEXT:    mov r4, sp\\n+; THUMB-NEXT:    vld1.64 {d8, d9}, [r4:128]\\n+; THUMB-NEXT:    subs r4, r7, #4\\n+; THUMB-NEXT:    vmov r0, s0\\n+; THUMB-NEXT:    mov sp, r4\\n+; THUMB-NEXT:    pop {r4, r7, pc}\\n+; THUMB-NEXT:    .p2align 2\\n+; THUMB-NEXT:  @ %bb.4:\\n+; THUMB-NEXT:    .data_region\\n+; THUMB-NEXT:  LCPI12_0:\\n+; THUMB-NEXT:    .long 0 @ float 0\\n+; THUMB-NEXT:    .end_data_region\\n bb:\\n   br i1 %or.cond, label %bb3, label %bb13\\n \"}, {\"sha\": \"31fe1f8a3757bd3c7e771cd6fd4cb28f0d9e01f7\", \"filename\": \"llvm/test/CodeGen/PowerPC/BreakableToken-reduced.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2FBreakableToken-reduced.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2FBreakableToken-reduced.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2FBreakableToken-reduced.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -203,8 +203,8 @@ target triple = \\\"powerpc64le-unknown-linux-gnu\\\"\\n ; Load a value into R0 before saving the LR\\n ; CHECK: lwz 0, {{[0-9]+([0-9]+)}}\\n \\n-; Ensure the LR is saved using a different register\\n-; CHECK: mflr {{[1-9]+}}\\n+; Ensure the LR is saved using a different register - edit:D63152 prevents stack pop befor loads and stores\\n+; CHECK-NOT: mflr {{[1-9]+}}\\n \\n ; Ensure the LR is restored using a different register\\n ; CHECK: mtlr {{[0-9]+}}\"}, {\"sha\": \"474be7a2ae338fc2a5bcb5012c463a6533dd7173\", \"filename\": \"llvm/test/CodeGen/PowerPC/ifcvt-forked-bug-2016-08-08.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fifcvt-forked-bug-2016-08-08.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fifcvt-forked-bug-2016-08-08.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fifcvt-forked-bug-2016-08-08.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -10,7 +10,8 @@ entry:\\n   br i1 undef, label %land.lhs.true, label %if.end\\n \\n ; CHECK: # %land.lhs.true\\n-; CHECK-NEXT: bclr\\n+; Test updated due D63152 where any load/store prevents shrink-wrapping\\n+; CHECK-NEXT: bc\\n ; CHECK-NEXT: # %if.end4\\n land.lhs.true:                                    ; preds = %entry\\n   br i1 undef, label %return, label %if.end4\"}, {\"sha\": \"82e44ef7b85d9a543ba4f9dc2b22c647675d0831\", \"filename\": \"llvm/test/CodeGen/PowerPC/licm-tocReg.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Flicm-tocReg.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Flicm-tocReg.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2Flicm-tocReg.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -61,11 +61,11 @@\\n \\n @ga = external global i32, align 4\\n @gb = external global i32, align 4\\n-\\n define signext i32 @test(i32 (i32)* nocapture %FP) local_unnamed_addr #0 {\\n ; CHECK-LABEL: test:\\n ; CHECK:       # %bb.0: # %entry\\n-; CHECK-NEXT:    addis 4, 2, .LC0@toc@ha\\n+; CHECK-NEXT:    mflr 0\\n+; CHECK:         addis 4, 2, .LC0@toc@ha\\n ; CHECK-NEXT:    addis 5, 2, .LC1@toc@ha\\n ; CHECK-NEXT:    mr 12, 3\\n ; CHECK-NEXT:    ld 4, .LC0@toc@l(4)\"}, {\"sha\": \"251cd66461ba6b5c4fc8042237057a3f3496b4b0\", \"filename\": \"llvm/test/CodeGen/PowerPC/ppc64-sibcall-shrinkwrap.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fppc64-sibcall-shrinkwrap.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fppc64-sibcall-shrinkwrap.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fppc64-sibcall-shrinkwrap.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,8 +1,8 @@\\n ; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=false | FileCheck %s -check-prefix=CHECK-SCO-ONLY\\n-; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=true | FileCheck %s -check-prefix=CHECK-SCO-SHRK\\n+; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=true | FileCheck %s -check-prefix=CHECK-SCO-ONLY\\n ; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64le-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=false | FileCheck %s -check-prefix=CHECK-SCO-ONLY\\n-; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64le-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=true | FileCheck %s -check-prefix=CHECK-SCO-SHRK\\n-\\n+; RUN: llc -relocation-model=static -verify-machineinstrs < %s -mtriple=powerpc64le-unknown-linux-gnu -disable-ppc-sco=false --enable-shrink-wrap=true | FileCheck %s -check-prefix=CHECK-SCO-ONLY\\n+; Edit: D63152 prevents stack popping before loads and stores, so shrink-wrap does nothing here\\n %\\\"class.clang::NamedDecl\\\" = type { i32 }\\n declare void @__assert_fail();\\n \"}, {\"sha\": \"92d62482170b2b09f5a9a815c32d7af91c5c5412\", \"filename\": \"llvm/test/CodeGen/PowerPC/xray-ret-is-terminator.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-ret-is-terminator.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-ret-is-terminator.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FPowerPC%2Fxray-ret-is-terminator.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -2,9 +2,9 @@\\n \\n define void @ILLBeBack() #0 {\\n ; CHECK-LABEL @ILLBeBack\\n-; CHECK: beq {{[0-9]+}}, [[LABEL:\\\\.[a-zA-Z0-9_]+]]\\n-; CHECK: bl __xray_FunctionExit\\n+; CHECK: bne {{[0-9]+}}, [[LABEL:\\\\.[a-zA-Z0-9_]+]]\\n ; CHECK: [[LABEL]]:\\n+; CHECK: bl __xray_FunctionExit\\n bb:\\n   br i1 undef, label %bb1, label %bb8\\n \"}, {\"sha\": \"9d4430ddd547278b54fe2ad7993b068e4979d300\", \"filename\": \"llvm/test/CodeGen/Thumb/thumb-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 1255, \"deletions\": 387, \"changes\": 1642, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FThumb%2Fthumb-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FThumb%2Fthumb-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FThumb%2Fthumb-shrink-wrapping.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,11 +1,8 @@\\n-; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumb-macho \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE --check-prefix=ENABLE-V4T\\n-; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumbv5-macho \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE --check-prefix=ENABLE-V5T\\n-; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumb-macho \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE --check-prefix=DISABLE-V4T\\n-; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumbv5-macho \\\\\\n-; RUN:      | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE --check-prefix=DISABLE-V5T\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumb-macho | FileCheck %s --check-prefix=ENABLE-V4T\\n+; RUN: llc %s -o - -enable-shrink-wrap=true -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumbv5-macho | FileCheck %s --check-prefix=ENABLE-V5T\\n+; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumb-macho | FileCheck %s --check-prefix=DISABLE-V4T\\n+; RUN: llc %s -o - -enable-shrink-wrap=false -ifcvt-fn-start=1 -ifcvt-fn-stop=0 -tail-dup-placement=0 -mtriple=thumbv5-macho | FileCheck %s --check-prefix=DISABLE-V5T\\n \\n ;\\n ; Note: Lots of tests use inline asm instead of regular calls.\\n@@ -20,49 +17,108 @@\\n ; results due to branches not being analyzable under v5\\n \\n ; Initial motivating example: Simple diamond with a call just on one side.\\n-; CHECK-LABEL: foo:\\n-;\\n-; Compare the arguments and jump to exit.\\n-; No prologue needed.\\n-; ENABLE: cmp r0, r1\\n-; ENABLE-NEXT: bge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: push {r7, lr}\\n-; CHECK: sub sp, #8\\n-;\\n-; Compare the arguments and jump to exit.\\n-; After the prologue is set.\\n-; DISABLE: cmp r0, r1\\n-; DISABLE-NEXT: bge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Store %a in the alloca.\\n-; CHECK: str r0, [sp, #4]\\n-; Set the alloca address in the second argument.\\n-; Set the first argument to zero.\\n-; CHECK: movs r0, #0\\n-; CHECK-NEXT: add r1, sp, #4\\n-; CHECK-NEXT: bl\\n-;\\n-; With shrink-wrapping, epilogue is just after the call.\\n-; ENABLE-NEXT: add sp, #8\\n-; ENABLE-V5T-NEXT: pop {r7, pc}\\n-; ENABLE-V4T-NEXT: pop {r7}\\n-; ENABLE-V4T-NEXT: pop {r1}\\n-; ENABLE-V4T-NEXT: mov lr, r1\\n-;\\n-; CHECK: [[EXIT_LABEL]]:\\n-;\\n-; Without shrink-wrapping, epilogue is in the exit block.\\n-; Epilogue code. (What we pop does not matter.)\\n-; DISABLE: add sp, #8\\n-; DISABLE-V5T-NEXT: pop {r7, pc}\\n-; DISABLE-V4T-NEXT: pop {r7}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-NEXT: bx lr\\n define i32 @foo(i32 %a, i32 %b) {\\n+; ENABLE-V4T-LABEL: foo:\\n+; ENABLE-V4T:       @ %bb.0:\\n+; ENABLE-V4T-NEXT:    cmp r0, r1\\n+; ENABLE-V4T-NEXT:    bge LBB0_2\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %true\\n+; ENABLE-V4T-NEXT:    push {r7, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V4T-NEXT:    sub sp, #8\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-V4T-NEXT:    str r0, [sp, #4]\\n+; ENABLE-V4T-NEXT:    ldr r0, LCPI0_0\\n+; ENABLE-V4T-NEXT:  LPC0_0:\\n+; ENABLE-V4T-NEXT:    add r0, pc\\n+; ENABLE-V4T-NEXT:    ldr r2, [r0]\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    add r1, sp, #4\\n+; ENABLE-V4T-NEXT:    bl Ltmp0\\n+; ENABLE-V4T-NEXT:    add sp, #8\\n+; ENABLE-V4T-NEXT:    pop {r7}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    mov lr, r1\\n+; ENABLE-V4T-NEXT:  LBB0_2: @ %false\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:    .p2align 2\\n+; ENABLE-V4T-NEXT:  @ %bb.3:\\n+; ENABLE-V4T-NEXT:    .data_region\\n+; ENABLE-V4T-NEXT:  LCPI0_0:\\n+; ENABLE-V4T-NEXT:    .long L_doSomething$non_lazy_ptr-(LPC0_0+4)\\n+; ENABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; ENABLE-V5T-LABEL: foo:\\n+; ENABLE-V5T:       @ %bb.0:\\n+; ENABLE-V5T-NEXT:    cmp r0, r1\\n+; ENABLE-V5T-NEXT:    bge LBB0_2\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %true\\n+; ENABLE-V5T-NEXT:    push {r7, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V5T-NEXT:    sub sp, #8\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-V5T-NEXT:    str r0, [sp, #4]\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    add r1, sp, #4\\n+; ENABLE-V5T-NEXT:    bl _doSomething\\n+; ENABLE-V5T-NEXT:    add sp, #8\\n+; ENABLE-V5T-NEXT:    pop {r7, pc}\\n+; ENABLE-V5T-NEXT:  LBB0_2: @ %false\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: foo:\\n+; DISABLE-V4T:       @ %bb.0:\\n+; DISABLE-V4T-NEXT:    push {r7, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V4T-NEXT:    sub sp, #8\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-V4T-NEXT:    cmp r0, r1\\n+; DISABLE-V4T-NEXT:    bge LBB0_2\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %true\\n+; DISABLE-V4T-NEXT:    str r0, [sp, #4]\\n+; DISABLE-V4T-NEXT:    ldr r0, LCPI0_0\\n+; DISABLE-V4T-NEXT:  LPC0_0:\\n+; DISABLE-V4T-NEXT:    add r0, pc\\n+; DISABLE-V4T-NEXT:    ldr r2, [r0]\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    add r1, sp, #4\\n+; DISABLE-V4T-NEXT:    bl Ltmp0\\n+; DISABLE-V4T-NEXT:  LBB0_2: @ %false\\n+; DISABLE-V4T-NEXT:    add sp, #8\\n+; DISABLE-V4T-NEXT:    pop {r7}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:    .p2align 2\\n+; DISABLE-V4T-NEXT:  @ %bb.3:\\n+; DISABLE-V4T-NEXT:    .data_region\\n+; DISABLE-V4T-NEXT:  LCPI0_0:\\n+; DISABLE-V4T-NEXT:    .long L_doSomething$non_lazy_ptr-(LPC0_0+4)\\n+; DISABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V5T-LABEL: foo:\\n+; DISABLE-V5T:       @ %bb.0:\\n+; DISABLE-V5T-NEXT:    push {r7, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V5T-NEXT:    sub sp, #8\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-V5T-NEXT:    cmp r0, r1\\n+; DISABLE-V5T-NEXT:    bge LBB0_2\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %true\\n+; DISABLE-V5T-NEXT:    str r0, [sp, #4]\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    add r1, sp, #4\\n+; DISABLE-V5T-NEXT:    bl _doSomething\\n+; DISABLE-V5T-NEXT:  LBB0_2: @ %false\\n+; DISABLE-V5T-NEXT:    add sp, #8\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n   %tmp = alloca i32, align 4\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n@@ -79,27 +135,114 @@ false:\\n \\n \\n ; Same, but the final BB is non-trivial, so we don't duplicate the return inst.\\n-; CHECK-LABEL: bar:\\n-;\\n-; With shrink-wrapping, epilogue is just after the call.\\n-; CHECK: bl\\n-; ENABLE-NEXT: add sp, #8\\n-; ENABLE-NEXT: pop {r7}\\n-; ENABLE-NEXT: pop {r0}\\n-; ENABLE-NEXT: mov lr, r0\\n-;\\n-; CHECK: movs r0, #42\\n-;\\n-; Without shrink-wrapping, epilogue is in the exit block.\\n-; Epilogue code. (What we pop does not matter.)\\n-; DISABLE: add sp, #8\\n-; DISABLE-V5T-NEXT: pop {r7, pc}\\n-; DISABLE-V4T-NEXT: pop {r7}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-NEXT: bx lr\\n define i32 @bar(i32 %a, i32 %b) {\\n+; ENABLE-V4T-LABEL: bar:\\n+; ENABLE-V4T:       @ %bb.0:\\n+; ENABLE-V4T-NEXT:    cmp r0, r1\\n+; ENABLE-V4T-NEXT:    bge LBB1_2\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %true\\n+; ENABLE-V4T-NEXT:    push {r7, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V4T-NEXT:    sub sp, #8\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-V4T-NEXT:    str r0, [sp, #4]\\n+; ENABLE-V4T-NEXT:    ldr r0, LCPI1_0\\n+; ENABLE-V4T-NEXT:  LPC1_0:\\n+; ENABLE-V4T-NEXT:    add r0, pc\\n+; ENABLE-V4T-NEXT:    ldr r2, [r0]\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    add r1, sp, #4\\n+; ENABLE-V4T-NEXT:    bl Ltmp1\\n+; ENABLE-V4T-NEXT:    add sp, #8\\n+; ENABLE-V4T-NEXT:    pop {r7}\\n+; ENABLE-V4T-NEXT:    pop {r0}\\n+; ENABLE-V4T-NEXT:    mov lr, r0\\n+; ENABLE-V4T-NEXT:  LBB1_2: @ %false\\n+; ENABLE-V4T-NEXT:    movs r0, #42\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:    .p2align 2\\n+; ENABLE-V4T-NEXT:  @ %bb.3:\\n+; ENABLE-V4T-NEXT:    .data_region\\n+; ENABLE-V4T-NEXT:  LCPI1_0:\\n+; ENABLE-V4T-NEXT:    .long L_doSomething$non_lazy_ptr-(LPC1_0+4)\\n+; ENABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; ENABLE-V5T-LABEL: bar:\\n+; ENABLE-V5T:       @ %bb.0:\\n+; ENABLE-V5T-NEXT:    cmp r0, r1\\n+; ENABLE-V5T-NEXT:    bge LBB1_2\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %true\\n+; ENABLE-V5T-NEXT:    push {r7, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V5T-NEXT:    sub sp, #8\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-V5T-NEXT:    str r0, [sp, #4]\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    add r1, sp, #4\\n+; ENABLE-V5T-NEXT:    bl _doSomething\\n+; ENABLE-V5T-NEXT:    add sp, #8\\n+; ENABLE-V5T-NEXT:    pop {r7}\\n+; ENABLE-V5T-NEXT:    pop {r0}\\n+; ENABLE-V5T-NEXT:    mov lr, r0\\n+; ENABLE-V5T-NEXT:  LBB1_2: @ %false\\n+; ENABLE-V5T-NEXT:    movs r0, #42\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: bar:\\n+; DISABLE-V4T:       @ %bb.0:\\n+; DISABLE-V4T-NEXT:    push {r7, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V4T-NEXT:    sub sp, #8\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-V4T-NEXT:    cmp r0, r1\\n+; DISABLE-V4T-NEXT:    bge LBB1_2\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %true\\n+; DISABLE-V4T-NEXT:    str r0, [sp, #4]\\n+; DISABLE-V4T-NEXT:    ldr r0, LCPI1_0\\n+; DISABLE-V4T-NEXT:  LPC1_0:\\n+; DISABLE-V4T-NEXT:    add r0, pc\\n+; DISABLE-V4T-NEXT:    ldr r2, [r0]\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    add r1, sp, #4\\n+; DISABLE-V4T-NEXT:    bl Ltmp1\\n+; DISABLE-V4T-NEXT:  LBB1_2: @ %false\\n+; DISABLE-V4T-NEXT:    movs r0, #42\\n+; DISABLE-V4T-NEXT:    add sp, #8\\n+; DISABLE-V4T-NEXT:    pop {r7}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:    .p2align 2\\n+; DISABLE-V4T-NEXT:  @ %bb.3:\\n+; DISABLE-V4T-NEXT:    .data_region\\n+; DISABLE-V4T-NEXT:  LCPI1_0:\\n+; DISABLE-V4T-NEXT:    .long L_doSomething$non_lazy_ptr-(LPC1_0+4)\\n+; DISABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V5T-LABEL: bar:\\n+; DISABLE-V5T:       @ %bb.0:\\n+; DISABLE-V5T-NEXT:    push {r7, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V5T-NEXT:    sub sp, #8\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-V5T-NEXT:    cmp r0, r1\\n+; DISABLE-V5T-NEXT:    bge LBB1_2\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %true\\n+; DISABLE-V5T-NEXT:    str r0, [sp, #4]\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    add r1, sp, #4\\n+; DISABLE-V5T-NEXT:    bl _doSomething\\n+; DISABLE-V5T-NEXT:  LBB1_2: @ %false\\n+; DISABLE-V5T-NEXT:    movs r0, #42\\n+; DISABLE-V5T-NEXT:    add sp, #8\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n   %tmp = alloca i32, align 4\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n@@ -119,51 +262,128 @@ declare i32 @doSomething(i32, i32*)\\n \\n ; Check that we do not perform the restore inside the loop whereas the save\\n ; is outside.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop:\\n-;\\n-; Shrink-wrapping allows to skip the prologue in the else case.\\n-; ENABLE: cmp r0, #0\\n-; ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, lr}\\n-;\\n-; DISABLE: cmp r0, #0\\n-; DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; SUM is in r0 because it is coalesced with the second\\n-; argument on the else path.\\n-; CHECK: movs [[SUM:r0]], #0\\n-; CHECK-NEXT: movs [[IV:r[0-9]+]], #10\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: movs [[TMP:r[0-9]+]], #1\\n-; CHECK: adds [[SUM]], [[TMP]], [[SUM]]\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n-;\\n-; Next BB.\\n-; SUM << 3.\\n-; CHECK: lsls [[SUM]], [[SUM]], #3\\n-;\\n-; Duplicated epilogue.\\n-; DISABLE-V5T: pop {r4, pc}\\n-; DISABLE-V4T: b [[END_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: lsls r0, r1, #1\\n-; DISABLE-V5T-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-V4T-NEXT: pop {r4}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n define i32 @freqSaveAndRestoreOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-V4T-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    beq LBB2_4\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    movs r1, #10\\n+; ENABLE-V4T-NEXT:  LBB2_2: @ %for.body\\n+; ENABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r2, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V4T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V4T-NEXT:    bne LBB2_2\\n+; ENABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB2_4: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+;\\n+; ENABLE-V5T-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    beq LBB2_4\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    movs r1, #10\\n+; ENABLE-V5T-NEXT:  LBB2_2: @ %for.body\\n+; ENABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r2, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V5T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V5T-NEXT:    bne LBB2_2\\n+; ENABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+; ENABLE-V5T-NEXT:  LBB2_4: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB2_5: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    beq LBB2_4\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    movs r1, #10\\n+; DISABLE-V4T-NEXT:  LBB2_2: @ %for.body\\n+; DISABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r2, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V4T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V4T-NEXT:    bne LBB2_2\\n+; DISABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V4T-NEXT:    b LBB2_5\\n+; DISABLE-V4T-NEXT:  LBB2_4: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB2_5: @ %if.end\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+;\\n+; DISABLE-V5T-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    beq LBB2_4\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    movs r1, #10\\n+; DISABLE-V5T-NEXT:  LBB2_2: @ %for.body\\n+; DISABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r2, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V5T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V5T-NEXT:    bne LBB2_2\\n+; DISABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:  LBB2_4: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -198,26 +418,112 @@ declare i32 @something(...)\\n \\n ; Check that we do not perform the shrink-wrapping inside the loop even\\n ; though that would be legal. The cost model must prevent that.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop2:\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4\\n-; This is the nop.\\n-; CHECK: mov r8, r8\\n-; CHECK: movs [[SUM:r0]], #0\\n-; CHECK-NEXT: movs [[IV:r[0-9]+]], #10\\n-; Next BB.\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: movs [[TMP:r[0-9]+]], #1\\n-; CHECK: adds [[SUM]], [[TMP]], [[SUM]]\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: @ %for.exit\\n-; This is the nop.\\n-; CHECK: mov r8, r8\\n-; CHECK: pop {r4\\n define i32 @freqSaveAndRestoreOutsideLoop2(i32 %cond) {\\n+; ENABLE-V4T-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    movs r1, #10\\n+; ENABLE-V4T-NEXT:  LBB3_1: @ %for.body\\n+; ENABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r2, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V4T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V4T-NEXT:    bne LBB3_1\\n+; ENABLE-V4T-NEXT:  @ %bb.2: @ %for.exit\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+;\\n+; ENABLE-V5T-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    movs r1, #10\\n+; ENABLE-V5T-NEXT:  LBB3_1: @ %for.body\\n+; ENABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r2, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V5T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V5T-NEXT:    bne LBB3_1\\n+; ENABLE-V5T-NEXT:  @ %bb.2: @ %for.exit\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+; ENABLE-V5T-NEXT:  LBB3_3: @ %for.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    movs r1, #10\\n+; DISABLE-V4T-NEXT:  LBB3_1: @ %for.body\\n+; DISABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r2, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V4T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V4T-NEXT:    bne LBB3_1\\n+; DISABLE-V4T-NEXT:  @ %bb.2: @ %for.exit\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+;\\n+; DISABLE-V5T-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    movs r1, #10\\n+; DISABLE-V5T-NEXT:  LBB3_1: @ %for.body\\n+; DISABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r2, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V5T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V5T-NEXT:    bne LBB3_1\\n+; DISABLE-V5T-NEXT:  @ %bb.2: @ %for.exit\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n entry:\\n   br label %for.preheader\\n \\n@@ -244,54 +550,140 @@ for.end:                                          ; preds = %for.body\\n \\n ; Check with a more complex case that we do not have save within the loop and\\n ; restore outside.\\n-; CHECK-LABEL: loopInfoSaveOutsideLoop:\\n-;\\n-; ENABLE: cmp r0, #0\\n-; ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, lr}\\n-;\\n-; DISABLE: cmp r0, #0\\n-; DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; SUM is in r0 because it is coalesced with the second\\n-; argument on the else path.\\n-; CHECK: movs [[SUM:r0]], #0\\n-; CHECK-NEXT: movs [[IV:r[0-9]+]], #10\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: movs [[TMP:r[0-9]+]], #1\\n-; CHECK: adds [[SUM]], [[TMP]], [[SUM]]\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n-;\\n-; Next BB.\\n-; SUM << 3.\\n-; CHECK: lsls [[SUM]], [[SUM]], #3\\n-; ENABLE-V5T-NEXT: pop {r4, pc}\\n-; ENABLE-V4T-NEXT: pop {r4}\\n-; ENABLE-V4T-NEXT: pop {r1}\\n-; ENABLE-V4T-NEXT: bx r1\\n-;\\n-; Duplicated epilogue.\\n-; DISABLE-V5T: pop {r4, pc}\\n-; DISABLE-V4T: b [[END_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: lsls r0, r1, #1\\n-; DISABLE-V5T-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-V4T-NEXT: pop {r4}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n define i32 @loopInfoSaveOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-V4T-LABEL: loopInfoSaveOutsideLoop:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    beq LBB4_4\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    movs r1, #10\\n+; ENABLE-V4T-NEXT:  LBB4_2: @ %for.body\\n+; ENABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r2, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V4T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V4T-NEXT:    bne LBB4_2\\n+; ENABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB4_4: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+;\\n+; ENABLE-V5T-LABEL: loopInfoSaveOutsideLoop:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    beq LBB4_4\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    movs r1, #10\\n+; ENABLE-V5T-NEXT:  LBB4_2: @ %for.body\\n+; ENABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r2, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V5T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V5T-NEXT:    bne LBB4_2\\n+; ENABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+; ENABLE-V5T-NEXT:  LBB4_4: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB4_5: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: loopInfoSaveOutsideLoop:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    beq LBB4_4\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    movs r1, #10\\n+; DISABLE-V4T-NEXT:  LBB4_2: @ %for.body\\n+; DISABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r2, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V4T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V4T-NEXT:    bne LBB4_2\\n+; DISABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V4T-NEXT:    b LBB4_5\\n+; DISABLE-V4T-NEXT:  LBB4_4: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB4_5: @ %if.end\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+;\\n+; DISABLE-V5T-LABEL: loopInfoSaveOutsideLoop:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    beq LBB4_4\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    movs r1, #10\\n+; DISABLE-V5T-NEXT:  LBB4_2: @ %for.body\\n+; DISABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r2, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V5T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V5T-NEXT:    bne LBB4_2\\n+; DISABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:  LBB4_4: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -327,54 +719,156 @@ declare void @somethingElse(...)\\n \\n ; Check with a more complex case that we do not have restore within the loop and\\n ; save outside.\\n-; CHECK-LABEL: loopInfoRestoreOutsideLoop:\\n-;\\n-; ENABLE: cmp r0, #0\\n-; ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, lr}\\n-;\\n-; DISABLE-NEXT: cmp r0, #0\\n-; DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; SUM is in r0 because it is coalesced with the second\\n-; argument on the else path.\\n-; CHECK: movs [[SUM:r0]], #0\\n-; CHECK-NEXT: movs [[IV:r[0-9]+]], #10\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: movs [[TMP:r[0-9]+]], #1\\n-; CHECK: adds [[SUM]], [[TMP]], [[SUM]]\\n-; CHECK-NEXT: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n-;\\n-; Next BB.\\n-; SUM << 3.\\n-; CHECK: lsls [[SUM]], [[SUM]], #3\\n-; ENABLE-V5T-NEXT: pop {r4, pc}\\n-; ENABLE-V4T-NEXT: pop {r4}\\n-; ENABLE-V4T-NEXT: pop {r1}\\n-; ENABLE-V4T-NEXT: bx r1\\n-;\\n-; Duplicated epilogue.\\n-; DISABLE-V5T: pop {r4, pc}\\n-; DISABLE-V4T: b [[END_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: lsls r0, r1, #1\\n-; DISABLE-V5T-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-V4T-NEXT: pop {r4}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n define i32 @loopInfoRestoreOutsideLoop(i32 %cond, i32 %N) nounwind {\\n+; ENABLE-V4T-LABEL: loopInfoRestoreOutsideLoop:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    beq LBB5_4\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    movs r1, #10\\n+; ENABLE-V4T-NEXT:  LBB5_2: @ %for.body\\n+; ENABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r2, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V4T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V4T-NEXT:    bne LBB5_2\\n+; ENABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB5_4: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:    @ -- End function\\n+; ENABLE-V4T-NEXT:    .globl _emptyFrame @ -- Begin function emptyFrame\\n+; ENABLE-V4T-NEXT:    .p2align 1\\n+; ENABLE-V4T-NEXT:    .code 16 @ @emptyFrame\\n+; ENABLE-V4T-NEXT:    .thumb_func _emptyFrame\\n+; ENABLE-V4T-NEXT:  _emptyFrame:\\n+; ENABLE-V4T-NEXT:    .cfi_startproc\\n+; ENABLE-V4T-NEXT:  @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    bx lr\\n+;\\n+; ENABLE-V5T-LABEL: loopInfoRestoreOutsideLoop:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    beq LBB5_4\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    movs r1, #10\\n+; ENABLE-V5T-NEXT:  LBB5_2: @ %for.body\\n+; ENABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r2, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    adds r0, r2, r0\\n+; ENABLE-V5T-NEXT:    subs r1, r1, #1\\n+; ENABLE-V5T-NEXT:    bne LBB5_2\\n+; ENABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; ENABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+; ENABLE-V5T-NEXT:  LBB5_4: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB5_5: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+; ENABLE-V5T-NEXT:    @ -- End function\\n+; ENABLE-V5T-NEXT:    .globl _emptyFrame @ -- Begin function emptyFrame\\n+; ENABLE-V5T-NEXT:    .p2align 1\\n+; ENABLE-V5T-NEXT:    .code 16 @ @emptyFrame\\n+; ENABLE-V5T-NEXT:    .thumb_func _emptyFrame\\n+; ENABLE-V5T-NEXT:  _emptyFrame:\\n+; ENABLE-V5T-NEXT:    .cfi_startproc\\n+; ENABLE-V5T-NEXT:  @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: loopInfoRestoreOutsideLoop:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    beq LBB5_4\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    movs r1, #10\\n+; DISABLE-V4T-NEXT:  LBB5_2: @ %for.body\\n+; DISABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r2, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V4T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V4T-NEXT:    bne LBB5_2\\n+; DISABLE-V4T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V4T-NEXT:    b LBB5_5\\n+; DISABLE-V4T-NEXT:  LBB5_4: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB5_5: @ %if.end\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:    @ -- End function\\n+; DISABLE-V4T-NEXT:    .globl _emptyFrame @ -- Begin function emptyFrame\\n+; DISABLE-V4T-NEXT:    .p2align 1\\n+; DISABLE-V4T-NEXT:    .code 16 @ @emptyFrame\\n+; DISABLE-V4T-NEXT:    .thumb_func _emptyFrame\\n+; DISABLE-V4T-NEXT:  _emptyFrame:\\n+; DISABLE-V4T-NEXT:    .cfi_startproc\\n+; DISABLE-V4T-NEXT:  @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    bx lr\\n+;\\n+; DISABLE-V5T-LABEL: loopInfoRestoreOutsideLoop:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    beq LBB5_4\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    movs r1, #10\\n+; DISABLE-V5T-NEXT:  LBB5_2: @ %for.body\\n+; DISABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r2, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    adds r0, r2, r0\\n+; DISABLE-V5T-NEXT:    subs r1, r1, #1\\n+; DISABLE-V5T-NEXT:    bne LBB5_2\\n+; DISABLE-V5T-NEXT:  @ %bb.3: @ %for.end\\n+; DISABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:  LBB5_4: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:    @ -- End function\\n+; DISABLE-V5T-NEXT:    .globl _emptyFrame @ -- Begin function emptyFrame\\n+; DISABLE-V5T-NEXT:    .p2align 1\\n+; DISABLE-V5T-NEXT:    .code 16 @ @emptyFrame\\n+; DISABLE-V5T-NEXT:    .thumb_func _emptyFrame\\n+; DISABLE-V5T-NEXT:  _emptyFrame:\\n+; DISABLE-V5T-NEXT:    .cfi_startproc\\n+; DISABLE-V5T-NEXT:  @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    bx lr\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -406,59 +900,138 @@ if.end:                                           ; preds = %if.else, %for.end\\n }\\n \\n ; Check that we handle function with no frame information correctly.\\n-; CHECK-LABEL: emptyFrame:\\n-; CHECK: @ %entry\\n-; CHECK-NEXT: movs r0, #0\\n-; CHECK-NEXT: bx lr\\n define i32 @emptyFrame() {\\n entry:\\n   ret i32 0\\n }\\n \\n ; Check that we handle inline asm correctly.\\n-; CHECK-LABEL: inlineAsm:\\n-;\\n-; ENABLE: cmp r0, #0\\n-; ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: r4.\\n-; CHECK: push {r4, lr}\\n-;\\n-; DISABLE: cmp r0, #0\\n-; DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: movs [[IV:r[0-9]+]], #10\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: @ %for.body\\n-; CHECK: movs r4, #1\\n-; CHECK: subs [[IV]], [[IV]], #1\\n-; CHECK-NEXT: bne [[LOOP]]\\n-;\\n-; Next BB.\\n-; CHECK: movs r0, #0\\n-; ENABLE-V5T-NEXT: pop {r4, pc}\\n-; ENABLE-V4T-NEXT: pop {r4}\\n-; ENABLE-V4T-NEXT: pop {r1}\\n-; ENABLE-V4T-NEXT: bx r1\\n-;\\n-; Duplicated epilogue.\\n-; DISABLE-V5T-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: b [[END_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: lsls r0, r1, #1\\n-; DISABLE-V5T-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-V4T-NEXT: pop {r4}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-;\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n define i32 @inlineAsm(i32 %cond, i32 %N) {\\n+; ENABLE-V4T-LABEL: inlineAsm:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    beq LBB7_4\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #10\\n+; ENABLE-V4T-NEXT:  LBB7_2: @ %for.body\\n+; ENABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r4, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    subs r0, r0, #1\\n+; ENABLE-V4T-NEXT:    bne LBB7_2\\n+; ENABLE-V4T-NEXT:  @ %bb.3: @ %for.exit\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    mov r8, r8\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB7_4: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+;\\n+; ENABLE-V5T-LABEL: inlineAsm:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    beq LBB7_4\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #10\\n+; ENABLE-V5T-NEXT:  LBB7_2: @ %for.body\\n+; ENABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r4, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    subs r0, r0, #1\\n+; ENABLE-V5T-NEXT:    bne LBB7_2\\n+; ENABLE-V5T-NEXT:  @ %bb.3: @ %for.exit\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    mov r8, r8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+; ENABLE-V5T-NEXT:  LBB7_4: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB7_5: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: inlineAsm:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    beq LBB7_4\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #10\\n+; DISABLE-V4T-NEXT:  LBB7_2: @ %for.body\\n+; DISABLE-V4T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r4, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    subs r0, r0, #1\\n+; DISABLE-V4T-NEXT:    bne LBB7_2\\n+; DISABLE-V4T-NEXT:  @ %bb.3: @ %for.exit\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    mov r8, r8\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:    b LBB7_5\\n+; DISABLE-V4T-NEXT:  LBB7_4: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB7_5: @ %if.end\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+;\\n+; DISABLE-V5T-LABEL: inlineAsm:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    beq LBB7_4\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %for.preheader\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #10\\n+; DISABLE-V5T-NEXT:  LBB7_2: @ %for.body\\n+; DISABLE-V5T-NEXT:    @ =>This Inner Loop Header: Depth=1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r4, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    subs r0, r0, #1\\n+; DISABLE-V5T-NEXT:    bne LBB7_2\\n+; DISABLE-V5T-NEXT:  @ %bb.3: @ %for.exit\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    mov r8, r8\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:  LBB7_4: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -488,54 +1061,133 @@ if.end:                                           ; preds = %for.body, %if.else\\n }\\n \\n ; Check that we handle calls to variadic functions correctly.\\n-; CHECK-LABEL: callVariadicFunc:\\n-;\\n-; ENABLE: cmp r0, #0\\n-; ENABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: push {[[TMP:r[0-9]+]], lr}\\n-; CHECK: sub sp, #16\\n-;\\n-; DISABLE: cmp r0, #0\\n-; DISABLE-NEXT: beq [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Setup of the varags.\\n-; CHECK: str r1, [sp]\\n-; CHECK-NEXT: str r1, [sp, #4]\\n-; CHECK-NEXT: str r1, [sp, #8]\\n-; CHECK:      movs r0, r1\\n-; CHECK-NEXT: movs r2, r1\\n-; CHECK-NEXT: movs r3, r1\\n-; CHECK-NEXT: bl\\n-; CHECK-NEXT: lsls r0, r0, #3\\n-;\\n-; ENABLE-NEXT: add sp, #16\\n-; ENABLE-V5T-NEXT: pop {[[TMP]], pc}\\n-; ENABLE-V4T-NEXT: pop {[[TMP]]}\\n-; ENABLE-V4T-NEXT: pop {r1}\\n-; ENABLE-V4T-NEXT: bx r1\\n-;\\n-; Duplicated epilogue.\\n-; DISABLE-V5T-NEXT: add sp, #16\\n-; DISABLE-V5T-NEXT: pop {[[TMP]], pc}\\n-; DISABLE-V4T-NEXT: b [[END_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: lsls r0, r1, #1\\n-;\\n-; Epilogue code.\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n-;\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-NEXT: add sp, #16\\n-; DISABLE-V5T-NEXT: pop {[[TMP]], pc}\\n-; DISABLE-V4T-NEXT: pop {[[TMP]]}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n define i32 @callVariadicFunc(i32 %cond, i32 %N) {\\n+; ENABLE-V4T-LABEL: callVariadicFunc:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    beq LBB8_2\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    sub sp, #16\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 24\\n+; ENABLE-V4T-NEXT:    str r1, [sp]\\n+; ENABLE-V4T-NEXT:    str r1, [sp, #4]\\n+; ENABLE-V4T-NEXT:    str r1, [sp, #8]\\n+; ENABLE-V4T-NEXT:    ldr r0, LCPI8_0\\n+; ENABLE-V4T-NEXT:  LPC8_0:\\n+; ENABLE-V4T-NEXT:    add r0, pc\\n+; ENABLE-V4T-NEXT:    ldr r4, [r0]\\n+; ENABLE-V4T-NEXT:    movs r0, r1\\n+; ENABLE-V4T-NEXT:    movs r2, r1\\n+; ENABLE-V4T-NEXT:    movs r3, r1\\n+; ENABLE-V4T-NEXT:    bl Ltmp2\\n+; ENABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V4T-NEXT:    add sp, #16\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB8_2: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:    .p2align 2\\n+; ENABLE-V4T-NEXT:  @ %bb.3:\\n+; ENABLE-V4T-NEXT:    .data_region\\n+; ENABLE-V4T-NEXT:  LCPI8_0:\\n+; ENABLE-V4T-NEXT:    .long L_someVariadicFunc$non_lazy_ptr-(LPC8_0+4)\\n+; ENABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; ENABLE-V5T-LABEL: callVariadicFunc:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    beq LBB8_2\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V5T-NEXT:    push {r7, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V5T-NEXT:    sub sp, #16\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 24\\n+; ENABLE-V5T-NEXT:    str r1, [sp]\\n+; ENABLE-V5T-NEXT:    str r1, [sp, #4]\\n+; ENABLE-V5T-NEXT:    str r1, [sp, #8]\\n+; ENABLE-V5T-NEXT:    movs r0, r1\\n+; ENABLE-V5T-NEXT:    movs r2, r1\\n+; ENABLE-V5T-NEXT:    movs r3, r1\\n+; ENABLE-V5T-NEXT:    bl _someVariadicFunc\\n+; ENABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; ENABLE-V5T-NEXT:    add sp, #16\\n+; ENABLE-V5T-NEXT:    pop {r7, pc}\\n+; ENABLE-V5T-NEXT:  LBB8_2: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB8_3: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+;\\n+; DISABLE-V4T-LABEL: callVariadicFunc:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    sub sp, #16\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 24\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    beq LBB8_2\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V4T-NEXT:    str r1, [sp]\\n+; DISABLE-V4T-NEXT:    str r1, [sp, #4]\\n+; DISABLE-V4T-NEXT:    str r1, [sp, #8]\\n+; DISABLE-V4T-NEXT:    ldr r0, LCPI8_0\\n+; DISABLE-V4T-NEXT:  LPC8_0:\\n+; DISABLE-V4T-NEXT:    add r0, pc\\n+; DISABLE-V4T-NEXT:    ldr r4, [r0]\\n+; DISABLE-V4T-NEXT:    movs r0, r1\\n+; DISABLE-V4T-NEXT:    movs r2, r1\\n+; DISABLE-V4T-NEXT:    movs r3, r1\\n+; DISABLE-V4T-NEXT:    bl Ltmp2\\n+; DISABLE-V4T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V4T-NEXT:    b LBB8_3\\n+; DISABLE-V4T-NEXT:  LBB8_2: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB8_3: @ %if.end\\n+; DISABLE-V4T-NEXT:    add sp, #16\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:    .p2align 2\\n+; DISABLE-V4T-NEXT:  @ %bb.4:\\n+; DISABLE-V4T-NEXT:    .data_region\\n+; DISABLE-V4T-NEXT:  LCPI8_0:\\n+; DISABLE-V4T-NEXT:    .long L_someVariadicFunc$non_lazy_ptr-(LPC8_0+4)\\n+; DISABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V5T-LABEL: callVariadicFunc:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r7, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V5T-NEXT:    sub sp, #16\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 24\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    beq LBB8_2\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V5T-NEXT:    str r1, [sp]\\n+; DISABLE-V5T-NEXT:    str r1, [sp, #4]\\n+; DISABLE-V5T-NEXT:    str r1, [sp, #8]\\n+; DISABLE-V5T-NEXT:    movs r0, r1\\n+; DISABLE-V5T-NEXT:    movs r2, r1\\n+; DISABLE-V5T-NEXT:    movs r3, r1\\n+; DISABLE-V5T-NEXT:    bl _someVariadicFunc\\n+; DISABLE-V5T-NEXT:    lsls r0, r0, #3\\n+; DISABLE-V5T-NEXT:    add sp, #16\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n+; DISABLE-V5T-NEXT:  LBB8_2: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    add sp, #16\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -560,25 +1212,96 @@ declare i32 @someVariadicFunc(i32, ...)\\n ; Although this is not incorrect to insert such code, it is useless\\n ; and it hurts the binary size.\\n ;\\n-; CHECK-LABEL: noreturn:\\n-; DISABLE: push\\n-;\\n-; CHECK: cmp r0, #0\\n-; CHECK-NEXT: bne      [[ABORT:LBB[0-9_]+]]\\n-;\\n-; CHECK: movs r0, #42\\n-;\\n-; ENABLE-NEXT: bx lr\\n-;\\n-; DISABLE-NEXT: pop\\n-;;\\n-; CHECK: [[ABORT]]: @ %if.abort\\n-;\\n-; ENABLE: push\\n-;\\n-; CHECK: bl\\n-; ENABLE-NOT: pop\\n define i32 @noreturn(i8 signext %bad_thing) {\\n+; ENABLE-V4T-LABEL: noreturn:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    cmp r0, #0\\n+; ENABLE-V4T-NEXT:    bne LBB9_2\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %if.end\\n+; ENABLE-V4T-NEXT:    movs r0, #42\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:  LBB9_2: @ %if.abort\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    ldr r0, LCPI9_0\\n+; ENABLE-V4T-NEXT:  LPC9_0:\\n+; ENABLE-V4T-NEXT:    add r0, pc\\n+; ENABLE-V4T-NEXT:    ldr r0, [r0]\\n+; ENABLE-V4T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V4T-NEXT:    movs r1, #1\\n+; ENABLE-V4T-NEXT:    @ InlineAsm End\\n+; ENABLE-V4T-NEXT:    bl Ltmp3\\n+; ENABLE-V4T-NEXT:    .p2align 2\\n+; ENABLE-V4T-NEXT:  @ %bb.3:\\n+; ENABLE-V4T-NEXT:    .data_region\\n+; ENABLE-V4T-NEXT:  LCPI9_0:\\n+; ENABLE-V4T-NEXT:    .long L_abort$non_lazy_ptr-(LPC9_0+4)\\n+; ENABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; ENABLE-V5T-LABEL: noreturn:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    cmp r0, #0\\n+; ENABLE-V5T-NEXT:    bne LBB9_2\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %if.end\\n+; ENABLE-V5T-NEXT:    movs r0, #42\\n+; ENABLE-V5T-NEXT:    bx lr\\n+; ENABLE-V5T-NEXT:  LBB9_2: @ %if.abort\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    @ InlineAsm Start\\n+; ENABLE-V5T-NEXT:    movs r0, #1\\n+; ENABLE-V5T-NEXT:    @ InlineAsm End\\n+; ENABLE-V5T-NEXT:    bl _abort\\n+;\\n+; DISABLE-V4T-LABEL: noreturn:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    cmp r0, #0\\n+; DISABLE-V4T-NEXT:    bne LBB9_2\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %if.end\\n+; DISABLE-V4T-NEXT:    movs r0, #42\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:  LBB9_2: @ %if.abort\\n+; DISABLE-V4T-NEXT:    ldr r0, LCPI9_0\\n+; DISABLE-V4T-NEXT:  LPC9_0:\\n+; DISABLE-V4T-NEXT:    add r0, pc\\n+; DISABLE-V4T-NEXT:    ldr r0, [r0]\\n+; DISABLE-V4T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V4T-NEXT:    movs r1, #1\\n+; DISABLE-V4T-NEXT:    @ InlineAsm End\\n+; DISABLE-V4T-NEXT:    bl Ltmp3\\n+; DISABLE-V4T-NEXT:    .p2align 2\\n+; DISABLE-V4T-NEXT:  @ %bb.3:\\n+; DISABLE-V4T-NEXT:    .data_region\\n+; DISABLE-V4T-NEXT:  LCPI9_0:\\n+; DISABLE-V4T-NEXT:    .long L_abort$non_lazy_ptr-(LPC9_0+4)\\n+; DISABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V5T-LABEL: noreturn:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    cmp r0, #0\\n+; DISABLE-V5T-NEXT:    bne LBB9_2\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %if.end\\n+; DISABLE-V5T-NEXT:    movs r0, #42\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n+; DISABLE-V5T-NEXT:  LBB9_2: @ %if.abort\\n+; DISABLE-V5T-NEXT:    @ InlineAsm Start\\n+; DISABLE-V5T-NEXT:    movs r0, #1\\n+; DISABLE-V5T-NEXT:    @ InlineAsm End\\n+; DISABLE-V5T-NEXT:    bl _abort\\n entry:\\n   %tobool = icmp eq i8 %bad_thing, 0\\n   br i1 %tobool, label %if.end, label %if.abort\\n@@ -595,32 +1318,113 @@ if.end:\\n declare void @abort() #0\\n \\n define i32 @b_to_bx(i32 %value) {\\n-; CHECK-LABEL: b_to_bx:\\n-; DISABLE: push {r7, lr}\\n-; CHECK: cmp r0, #49\\n-; CHECK-NEXT: bgt [[ELSE_LABEL:LBB[0-9_]+]]\\n-; ENABLE: push {r7, lr}\\n-\\n-; CHECK: bl\\n-; DISABLE-V5-NEXT: pop {r7, pc}\\n-; DISABLE-V4T-NEXT: b [[END_LABEL:LBB[0-9_]+]]\\n-\\n-; ENABLE-V5-NEXT: pop {r7, pc}\\n-; ENABLE-V4-NEXT: pop {r7}\\n-; ENABLE-V4-NEXT: pop {r1}\\n-; ENABLE-V4-NEXT: bx r1\\n-\\n-; CHECK: [[ELSE_LABEL]]: @ %if.else\\n-; CHECK-NEXT: lsls r0, r1, #1\\n-; DISABLE-V5-NEXT: pop {r7, pc}\\n-; DISABLE-V4T-NEXT: [[END_LABEL]]: @ %if.end\\n-; DISABLE-V4T-NEXT: pop {r7}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-\\n-; ENABLE-V5T-NEXT: {{LBB[0-9_]+}}: @ %if.end\\n-; ENABLE-NEXT: bx lr\\n-\\n+; ENABLE-V4T-LABEL: b_to_bx:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    movs r1, r0\\n+; ENABLE-V4T-NEXT:    cmp r0, #49\\n+; ENABLE-V4T-NEXT:    bgt LBB10_2\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V4T-NEXT:    push {r7, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V4T-NEXT:    ldr r0, LCPI10_0\\n+; ENABLE-V4T-NEXT:    ldr r2, LCPI10_1\\n+; ENABLE-V4T-NEXT:  LPC10_0:\\n+; ENABLE-V4T-NEXT:    add r2, pc\\n+; ENABLE-V4T-NEXT:    bl Ltmp4\\n+; ENABLE-V4T-NEXT:    pop {r7}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+; ENABLE-V4T-NEXT:  LBB10_2: @ %if.else\\n+; ENABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V4T-NEXT:    bx lr\\n+; ENABLE-V4T-NEXT:    .p2align 2\\n+; ENABLE-V4T-NEXT:  @ %bb.3:\\n+; ENABLE-V4T-NEXT:    .data_region\\n+; ENABLE-V4T-NEXT:  LCPI10_0:\\n+; ENABLE-V4T-NEXT:    .long 5000 @ 0x1388\\n+; ENABLE-V4T-NEXT:  LCPI10_1:\\n+; ENABLE-V4T-NEXT:    .long ___divsi3-(LPC10_0+4)\\n+; ENABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; ENABLE-V5T-LABEL: b_to_bx:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    movs r1, r0\\n+; ENABLE-V5T-NEXT:    cmp r0, #49\\n+; ENABLE-V5T-NEXT:    bgt LBB10_2\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; ENABLE-V5T-NEXT:    push {r7, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; ENABLE-V5T-NEXT:    ldr r0, LCPI10_0\\n+; ENABLE-V5T-NEXT:    bl ___divsi3\\n+; ENABLE-V5T-NEXT:    pop {r7, pc}\\n+; ENABLE-V5T-NEXT:  LBB10_2: @ %if.else\\n+; ENABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; ENABLE-V5T-NEXT:  LBB10_3: @ %if.end\\n+; ENABLE-V5T-NEXT:    bx lr\\n+; ENABLE-V5T-NEXT:    .p2align 2\\n+; ENABLE-V5T-NEXT:  @ %bb.4:\\n+; ENABLE-V5T-NEXT:    .data_region\\n+; ENABLE-V5T-NEXT:  LCPI10_0:\\n+; ENABLE-V5T-NEXT:    .long 5000 @ 0x1388\\n+; ENABLE-V5T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V4T-LABEL: b_to_bx:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r7, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V4T-NEXT:    movs r1, r0\\n+; DISABLE-V4T-NEXT:    cmp r0, #49\\n+; DISABLE-V4T-NEXT:    bgt LBB10_2\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V4T-NEXT:    ldr r0, LCPI10_0\\n+; DISABLE-V4T-NEXT:    ldr r2, LCPI10_1\\n+; DISABLE-V4T-NEXT:  LPC10_0:\\n+; DISABLE-V4T-NEXT:    add r2, pc\\n+; DISABLE-V4T-NEXT:    bl Ltmp4\\n+; DISABLE-V4T-NEXT:    b LBB10_3\\n+; DISABLE-V4T-NEXT:  LBB10_2: @ %if.else\\n+; DISABLE-V4T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V4T-NEXT:  LBB10_3: @ %if.end\\n+; DISABLE-V4T-NEXT:    pop {r7}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+; DISABLE-V4T-NEXT:    .p2align 2\\n+; DISABLE-V4T-NEXT:  @ %bb.4:\\n+; DISABLE-V4T-NEXT:    .data_region\\n+; DISABLE-V4T-NEXT:  LCPI10_0:\\n+; DISABLE-V4T-NEXT:    .long 5000 @ 0x1388\\n+; DISABLE-V4T-NEXT:  LCPI10_1:\\n+; DISABLE-V4T-NEXT:    .long ___divsi3-(LPC10_0+4)\\n+; DISABLE-V4T-NEXT:    .end_data_region\\n+;\\n+; DISABLE-V5T-LABEL: b_to_bx:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r7, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r7, -8\\n+; DISABLE-V5T-NEXT:    movs r1, r0\\n+; DISABLE-V5T-NEXT:    cmp r0, #49\\n+; DISABLE-V5T-NEXT:    bgt LBB10_2\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %if.then\\n+; DISABLE-V5T-NEXT:    ldr r0, LCPI10_0\\n+; DISABLE-V5T-NEXT:    bl ___divsi3\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n+; DISABLE-V5T-NEXT:  LBB10_2: @ %if.else\\n+; DISABLE-V5T-NEXT:    lsls r0, r1, #1\\n+; DISABLE-V5T-NEXT:    pop {r7, pc}\\n+; DISABLE-V5T-NEXT:    .p2align 2\\n+; DISABLE-V5T-NEXT:  @ %bb.3:\\n+; DISABLE-V5T-NEXT:    .data_region\\n+; DISABLE-V5T-NEXT:  LCPI10_0:\\n+; DISABLE-V5T-NEXT:    .long 5000 @ 0x1388\\n+; DISABLE-V5T-NEXT:    .end_data_region\\n entry:\\n   %cmp = icmp slt i32 %value, 50\\n   br i1 %cmp, label %if.then, label %if.else\\n@@ -639,29 +1443,93 @@ if.end:\\n }\\n \\n define i1 @beq_to_bx(i32* %y, i32 %head) {\\n-; CHECK-LABEL: beq_to_bx:\\n-; DISABLE: push {r4, lr}\\n-; CHECK: cmp r2, #0\\n-; CHECK-NEXT: beq [[EXIT_LABEL:LBB[0-9_]+]]\\n-; ENABLE: push {r4, lr}\\n-\\n-; CHECK: lsls    r4, r3, #30\\n-; ENABLE-NEXT: ldr [[POP:r[4567]]], [sp, #4]\\n-; ENABLE-NEXT: mov lr, [[POP]]\\n-; ENABLE-NEXT: pop {[[POP]]}\\n-; ENABLE-NEXT: add sp, #4\\n-; CHECK-NEXT: bpl [[EXIT_LABEL]]\\n-\\n-; CHECK: str r1, [r2]\\n-; CHECK: str r3, [r2]\\n-; CHECK-NEXT: movs r0, #0\\n-; CHECK-NEXT: [[EXIT_LABEL]]: @ %cleanup\\n-; ENABLE-NEXT: bx lr\\n-; DISABLE-V5-NEXT: pop {r4, pc}\\n-; DISABLE-V4T-NEXT: pop {r4}\\n-; DISABLE-V4T-NEXT: pop {r1}\\n-; DISABLE-V4T-NEXT: bx r1\\n-\\n+; ENABLE-V4T-LABEL: beq_to_bx:\\n+; ENABLE-V4T:       @ %bb.0: @ %entry\\n+; ENABLE-V4T-NEXT:    push {r4, lr}\\n+; ENABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V4T-NEXT:    movs r2, r0\\n+; ENABLE-V4T-NEXT:    movs r0, #1\\n+; ENABLE-V4T-NEXT:    cmp r2, #0\\n+; ENABLE-V4T-NEXT:    beq LBB11_3\\n+; ENABLE-V4T-NEXT:  @ %bb.1: @ %if.end\\n+; ENABLE-V4T-NEXT:    ldr r3, [r2]\\n+; ENABLE-V4T-NEXT:    lsls r4, r3, #30\\n+; ENABLE-V4T-NEXT:    bpl LBB11_3\\n+; ENABLE-V4T-NEXT:  @ %bb.2: @ %if.end4\\n+; ENABLE-V4T-NEXT:    str r1, [r2]\\n+; ENABLE-V4T-NEXT:    str r3, [r2]\\n+; ENABLE-V4T-NEXT:    movs r0, #0\\n+; ENABLE-V4T-NEXT:  LBB11_3: @ %cleanup\\n+; ENABLE-V4T-NEXT:    pop {r4}\\n+; ENABLE-V4T-NEXT:    pop {r1}\\n+; ENABLE-V4T-NEXT:    bx r1\\n+;\\n+; ENABLE-V5T-LABEL: beq_to_bx:\\n+; ENABLE-V5T:       @ %bb.0: @ %entry\\n+; ENABLE-V5T-NEXT:    push {r4, lr}\\n+; ENABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; ENABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; ENABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; ENABLE-V5T-NEXT:    movs r2, r0\\n+; ENABLE-V5T-NEXT:    movs r0, #1\\n+; ENABLE-V5T-NEXT:    cmp r2, #0\\n+; ENABLE-V5T-NEXT:    beq LBB11_3\\n+; ENABLE-V5T-NEXT:  @ %bb.1: @ %if.end\\n+; ENABLE-V5T-NEXT:    ldr r3, [r2]\\n+; ENABLE-V5T-NEXT:    lsls r4, r3, #30\\n+; ENABLE-V5T-NEXT:    bpl LBB11_3\\n+; ENABLE-V5T-NEXT:  @ %bb.2: @ %if.end4\\n+; ENABLE-V5T-NEXT:    str r1, [r2]\\n+; ENABLE-V5T-NEXT:    str r3, [r2]\\n+; ENABLE-V5T-NEXT:    movs r0, #0\\n+; ENABLE-V5T-NEXT:  LBB11_3: @ %cleanup\\n+; ENABLE-V5T-NEXT:    pop {r4, pc}\\n+;\\n+; DISABLE-V4T-LABEL: beq_to_bx:\\n+; DISABLE-V4T:       @ %bb.0: @ %entry\\n+; DISABLE-V4T-NEXT:    push {r4, lr}\\n+; DISABLE-V4T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V4T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V4T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V4T-NEXT:    movs r2, r0\\n+; DISABLE-V4T-NEXT:    movs r0, #1\\n+; DISABLE-V4T-NEXT:    cmp r2, #0\\n+; DISABLE-V4T-NEXT:    beq LBB11_3\\n+; DISABLE-V4T-NEXT:  @ %bb.1: @ %if.end\\n+; DISABLE-V4T-NEXT:    ldr r3, [r2]\\n+; DISABLE-V4T-NEXT:    lsls r4, r3, #30\\n+; DISABLE-V4T-NEXT:    bpl LBB11_3\\n+; DISABLE-V4T-NEXT:  @ %bb.2: @ %if.end4\\n+; DISABLE-V4T-NEXT:    str r1, [r2]\\n+; DISABLE-V4T-NEXT:    str r3, [r2]\\n+; DISABLE-V4T-NEXT:    movs r0, #0\\n+; DISABLE-V4T-NEXT:  LBB11_3: @ %cleanup\\n+; DISABLE-V4T-NEXT:    pop {r4}\\n+; DISABLE-V4T-NEXT:    pop {r1}\\n+; DISABLE-V4T-NEXT:    bx r1\\n+;\\n+; DISABLE-V5T-LABEL: beq_to_bx:\\n+; DISABLE-V5T:       @ %bb.0: @ %entry\\n+; DISABLE-V5T-NEXT:    push {r4, lr}\\n+; DISABLE-V5T-NEXT:    .cfi_def_cfa_offset 8\\n+; DISABLE-V5T-NEXT:    .cfi_offset lr, -4\\n+; DISABLE-V5T-NEXT:    .cfi_offset r4, -8\\n+; DISABLE-V5T-NEXT:    movs r2, r0\\n+; DISABLE-V5T-NEXT:    movs r0, #1\\n+; DISABLE-V5T-NEXT:    cmp r2, #0\\n+; DISABLE-V5T-NEXT:    beq LBB11_3\\n+; DISABLE-V5T-NEXT:  @ %bb.1: @ %if.end\\n+; DISABLE-V5T-NEXT:    ldr r3, [r2]\\n+; DISABLE-V5T-NEXT:    lsls r4, r3, #30\\n+; DISABLE-V5T-NEXT:    bpl LBB11_3\\n+; DISABLE-V5T-NEXT:  @ %bb.2: @ %if.end4\\n+; DISABLE-V5T-NEXT:    str r1, [r2]\\n+; DISABLE-V5T-NEXT:    str r3, [r2]\\n+; DISABLE-V5T-NEXT:    movs r0, #0\\n+; DISABLE-V5T-NEXT:  LBB11_3: @ %cleanup\\n+; DISABLE-V5T-NEXT:    pop {r4, pc}\\n entry:\\n   %cmp = icmp eq i32* %y, null\\n   br i1 %cmp, label %cleanup, label %if.end\"}, {\"sha\": \"38d1eeebeca29c9792de3d0f3424ea3c59762500\", \"filename\": \"llvm/test/CodeGen/X86/2010-08-04-MaskedSignedCompare.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2F2010-08-04-MaskedSignedCompare.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2F2010-08-04-MaskedSignedCompare.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2F2010-08-04-MaskedSignedCompare.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -9,6 +9,7 @@\\n define i32 @main() nounwind {\\n ; CHECK-LABEL: main:\\n ; CHECK:       # %bb.0: # %entry\\n+; CHECK-NEXT:    pushq %rax\\n ; CHECK-NEXT:    xorl %eax, %eax\\n ; CHECK-NEXT:    cmpq {{.*}}(%rip), %rax\\n ; CHECK-NEXT:    sbbb %al, %al\\n@@ -21,7 +22,6 @@ define i32 @main() nounwind {\\n ; CHECK-NEXT:  .LBB0_1: # %entry.if.end_crit_edge\\n ; CHECK-NEXT:    movl {{.*}}(%rip), %esi\\n ; CHECK-NEXT:  .LBB0_3: # %if.end\\n-; CHECK-NEXT:    pushq %rax\\n ; CHECK-NEXT:    movl $.L.str, %edi\\n ; CHECK-NEXT:    xorl %eax, %eax\\n ; CHECK-NEXT:    callq printf\"}, {\"sha\": \"4e6041b9c7a92afc3eac56c01dac755a7eda1e99\", \"filename\": \"llvm/test/CodeGen/X86/MachineSink-eflags.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 4, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2FMachineSink-eflags.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2FMachineSink-eflags.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2FMachineSink-eflags.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -14,6 +14,7 @@ target triple = \\\"x86_64-pc-linux\\\"\\n define void @foo(i8* nocapture %_stubArgs) nounwind {\\n ; CHECK-LABEL: foo:\\n ; CHECK:       # %bb.0: # %entry\\n+; CHECK-NEXT:    subq $152, %rsp\\n ; CHECK-NEXT:    movq 48(%rdi), %rax\\n ; CHECK-NEXT:    movl 64(%rdi), %edx\\n ; CHECK-NEXT:    movl $200, %esi\\n@@ -29,14 +30,14 @@ define void @foo(i8* nocapture %_stubArgs) nounwind {\\n ; CHECK-NEXT:    jne .LBB0_1\\n ; CHECK-NEXT:  # %bb.2: # %entry\\n ; CHECK-NEXT:    xorps %xmm1, %xmm1\\n-; CHECK-NEXT:    jmp .LBB0_3\\n+; CHECK-NEXT:    movaps %xmm1, -{{[0-9]+}}(%rsp)\\n+; CHECK-NEXT:    je .LBB0_4\\n+; CHECK-NEXT:    jmp .LBB0_5\\n ; CHECK-NEXT:  .LBB0_1:\\n ; CHECK-NEXT:    movaps (%rax,%rcx), %xmm1\\n-; CHECK-NEXT:  .LBB0_3: # %entry\\n-; CHECK-NEXT:    leaq -{{[0-9]+}}(%rsp), %rsp\\n ; CHECK-NEXT:    movaps %xmm1, -{{[0-9]+}}(%rsp)\\n ; CHECK-NEXT:    jne .LBB0_5\\n-; CHECK-NEXT:  # %bb.4: # %entry\\n+; CHECK-NEXT:  .LBB0_4: # %entry\\n ; CHECK-NEXT:    xorps %xmm0, %xmm0\\n ; CHECK-NEXT:  .LBB0_5: # %entry\\n ; CHECK-NEXT:    movaps %xmm0, -{{[0-9]+}}(%rsp)\"}, {\"sha\": \"4cf31f3889f1205bf89f4567d098753fd9f1480d\", \"filename\": \"llvm/test/CodeGen/X86/cmov.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fcmov.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fcmov.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fcmov.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -78,6 +78,7 @@ define void @test3(i64 %a, i64 %b, i1 %p) nounwind {\\n define i1 @test4() nounwind {\\n ; CHECK-LABEL: test4:\\n ; CHECK:       # %bb.0: # %entry\\n+; CHECK-NEXT:    pushq %rbx\\n ; CHECK-NEXT:    movsbl {{.*}}(%rip), %edx\\n ; CHECK-NEXT:    movzbl %dl, %ecx\\n ; CHECK-NEXT:    shrl $7, %ecx\\n@@ -90,7 +91,6 @@ define i1 @test4() nounwind {\\n ; CHECK-NEXT:  # %bb.1: # %bb.i.i.i\\n ; CHECK-NEXT:    movb {{.*}}(%rip), %cl\\n ; CHECK-NEXT:  .LBB3_2: # %func_4.exit.i\\n-; CHECK-NEXT:    pushq %rbx\\n ; CHECK-NEXT:    xorl %esi, %esi\\n ; CHECK-NEXT:    testb %dl, %dl\\n ; CHECK-NEXT:    setne %bl\"}, {\"sha\": \"a93ea41887832528324436af2c0d2a3a718f7031\", \"filename\": \"llvm/test/CodeGen/X86/copy-eflags.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fcopy-eflags.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fcopy-eflags.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fcopy-eflags.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -43,6 +43,7 @@ define i32 @test1() nounwind {\\n ;\\n ; X64-LABEL: test1:\\n ; X64:       # %bb.0: # %entry\\n+; X64-NEXT:    pushq %rax\\n ; X64-NEXT:    movb {{.*}}(%rip), %cl\\n ; X64-NEXT:    leal 1(%rcx), %eax\\n ; X64-NEXT:    movb %al, {{.*}}(%rip)\\n@@ -56,12 +57,11 @@ define i32 @test1() nounwind {\\n ; X64-NEXT:    testb %dl, %dl\\n ; X64-NEXT:    jne .LBB0_2\\n ; X64-NEXT:  # %bb.1: # %if.then\\n-; X64-NEXT:    pushq %rax\\n ; X64-NEXT:    movsbl %al, %edi\\n ; X64-NEXT:    callq external\\n-; X64-NEXT:    addq $8, %rsp\\n ; X64-NEXT:  .LBB0_2: # %if.end\\n ; X64-NEXT:    xorl %eax, %eax\\n+; X64-NEXT:    popq %rcx\\n ; X64-NEXT:    retq\\n entry:\\n   %bval = load i8, i8* @b\"}, {\"sha\": \"e7ab2884ec3c63b91db92c35d9c115452c46ed86\", \"filename\": \"llvm/test/CodeGen/X86/fold-pcmpeqd-2.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 4, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Ffold-pcmpeqd-2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Ffold-pcmpeqd-2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffold-pcmpeqd-2.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -17,16 +17,18 @@\\n define void @program_1(%struct._image2d_t* %dest, %struct._image2d_t* %t0, <4 x float> %p0, <4 x float> %p1, <4 x float> %p4, <4 x float> %p5, <4 x float> %p6) nounwind {\\n ; X32-LABEL: program_1:\\n ; X32:       ## %bb.0: ## %entry\\n+; X32-NEXT:    pushl %esi\\n+; X32-NEXT:    subl $88, %esp\\n ; X32-NEXT:    cmpl $0, 0\\n ; X32-NEXT:    jle LBB0_2\\n ; X32-NEXT:  ## %bb.1: ## %forcond\\n ; X32-NEXT:    cmpl $0, 0\\n ; X32-NEXT:    jg LBB0_3\\n ; X32-NEXT:  LBB0_2: ## %ifthen\\n+; X32-NEXT:    addl $88, %esp\\n+; X32-NEXT:    popl %esi\\n ; X32-NEXT:    retl\\n ; X32-NEXT:  LBB0_3: ## %forbody\\n-; X32-NEXT:    pushl %esi\\n-; X32-NEXT:    subl $88, %esp\\n ; X32-NEXT:    movaps {{.*#+}} xmm1 = [1.28E+2,1.28E+2,1.28E+2,1.28E+2]\\n ; X32-NEXT:    minps LCPI0_3, %xmm1\\n ; X32-NEXT:    cvttps2dq %xmm1, %xmm0\\n@@ -99,16 +101,18 @@ define void @program_1(%struct._image2d_t* %dest, %struct._image2d_t* %t0, <4 x\\n ;\\n ; X64-LABEL: program_1:\\n ; X64:       ## %bb.0: ## %entry\\n+; X64-NEXT:    pushq %rbx\\n+; X64-NEXT:    subq $64, %rsp\\n ; X64-NEXT:    cmpl $0, 0\\n ; X64-NEXT:    jle LBB0_2\\n ; X64-NEXT:  ## %bb.1: ## %forcond\\n ; X64-NEXT:    cmpl $0, 0\\n ; X64-NEXT:    jg LBB0_3\\n ; X64-NEXT:  LBB0_2: ## %ifthen\\n+; X64-NEXT:    addq $64, %rsp\\n+; X64-NEXT:    popq %rbx\\n ; X64-NEXT:    retq\\n ; X64-NEXT:  LBB0_3: ## %forbody\\n-; X64-NEXT:    pushq %rbx\\n-; X64-NEXT:    subq $64, %rsp\\n ; X64-NEXT:    xorps %xmm0, %xmm0\\n ; X64-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 16-byte Spill\\n ; X64-NEXT:    movaps {{.*#+}} xmm1 = [1.28E+2,1.28E+2,1.28E+2,1.28E+2]\"}, {\"sha\": \"95107fb528fe7db459a0d39cf9311fc9184816e8\", \"filename\": \"llvm/test/CodeGen/X86/i386-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 78, \"deletions\": 47, \"changes\": 125, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fi386-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fi386-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fi386-shrink-wrapping.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,5 +1,6 @@\\n-; RUN: llc %s -o - -enable-shrink-wrap=true -no-x86-call-frame-opt | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE\\n-; RUN: llc %s -o - -enable-shrink-wrap=false -no-x86-call-frame-opt | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc %s -o - -enable-shrink-wrap=true -no-x86-call-frame-opt | FileCheck %s --check-prefix=ENABLE\\n+; RUN: llc %s -o - -enable-shrink-wrap=false -no-x86-call-frame-opt | FileCheck %s --check-prefix=DISABLE\\n target datalayout = \\\"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\\\"\\n target triple = \\\"i386-apple-macosx10.5\\\"\\n \\n@@ -15,53 +16,83 @@ target triple = \\\"i386-apple-macosx10.5\\\"\\n ; Check that we are clobbering the flags when they are live-in of the\\n ; prologue block and the prologue needs to adjust the stack.\\n ; PR25607.\\n-;\\n-; CHECK-LABEL: eflagsLiveInPrologue:\\n-;\\n-; DISABLE: pushl\\n-; DISABLE-NEXT: subl $8, %esp\\n-;\\n-; CHECK: movl L_a$non_lazy_ptr, [[A:%[a-z]+]]\\n-; CHECK-NEXT: cmpl $0, ([[A]])\\n-; CHECK-NEXT: je [[PREHEADER_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: movb $1, _d\\n-;\\n-; CHECK: [[PREHEADER_LABEL]]:\\n-; CHECK-NEXT: movl L_b$non_lazy_ptr, [[B:%[a-z]+]]\\n-; CHECK-NEXT: movl ([[B]]), [[TMP1:%[a-z]+]]\\n-; CHECK-NEXT: testl [[TMP1]], [[TMP1]]\\n-; CHECK-NEXT: je  [[FOREND_LABEL:LBB[0-9_]+]]\\n-;\\n-; Skip the loop.\\n-; [...]\\n-;\\n-; The for.end block is split to accomadate the different selects.\\n-; We are interested in the one with the call, so skip until the branch.\\n-; CHECK: [[FOREND_LABEL]]:\\n-\\n-; ENABLE: pushl\\n-; ENABLE-NEXT: subl $8, %esp\\n-\\n-; CHECK: xorl [[CMOVE_VAL:%edx]], [[CMOVE_VAL]]\\n-; CHECK-NEXT: cmpb $0, _d\\n-; CHECK-NEXT: movl $6, [[IMM_VAL:%ecx]]\\n-; The eflags is used in the next instruction.\\n-; If that instruction disappear, we are not exercising the bug\\n-; anymore.\\n-; CHECK-NEXT: cmovnel [[CMOVE_VAL]], [[IMM_VAL]]\\n \\n-; CHECK-NEXT: L_e$non_lazy_ptr, [[E:%[a-z]+]]\\n-; CHECK-NEXT: movb %cl, ([[E]])\\n-; CHECK-NEXT: leal 1(%ecx), %esi\\n-\\n-; CHECK: calll _varfunc\\n-; Set the return value to 0.\\n-; CHECK-NEXT: xorl %eax, %eax\\n-; CHECK-NEXT: addl $8, %esp\\n-; CHECK-NEXT: popl\\n-; CHECK-NEXT: retl\\n define i32 @eflagsLiveInPrologue() #0 {\\n+; ENABLE-LABEL: eflagsLiveInPrologue:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushl %esi\\n+; ENABLE-NEXT:    subl $8, %esp\\n+; ENABLE-NEXT:    movl L_a$non_lazy_ptr, %eax\\n+; ENABLE-NEXT:    cmpl $0, (%eax)\\n+; ENABLE-NEXT:    je LBB0_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.then\\n+; ENABLE-NEXT:    movb $1, _d\\n+; ENABLE-NEXT:  LBB0_2: ## %for.cond.preheader\\n+; ENABLE-NEXT:    movl L_b$non_lazy_ptr, %eax\\n+; ENABLE-NEXT:    movl (%eax), %eax\\n+; ENABLE-NEXT:    testl %eax, %eax\\n+; ENABLE-NEXT:    je LBB0_4\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB0_3: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    jmp LBB0_3\\n+; ENABLE-NEXT:  LBB0_4: ## %for.end\\n+; ENABLE-NEXT:    xorl %edx, %edx\\n+; ENABLE-NEXT:    cmpb $0, _d\\n+; ENABLE-NEXT:    movl $6, %ecx\\n+; ENABLE-NEXT:    cmovnel %edx, %ecx\\n+; ENABLE-NEXT:    movl L_e$non_lazy_ptr, %edx\\n+; ENABLE-NEXT:    movb %cl, (%edx)\\n+; ENABLE-NEXT:    leal 1(%ecx), %esi\\n+; ENABLE-NEXT:    cltd\\n+; ENABLE-NEXT:    idivl %esi\\n+; ENABLE-NEXT:    movl L_c$non_lazy_ptr, %eax\\n+; ENABLE-NEXT:    movl %edx, (%eax)\\n+; ENABLE-NEXT:    movl %ecx, {{[0-9]+}}(%esp)\\n+; ENABLE-NEXT:    movl $L_.str, (%esp)\\n+; ENABLE-NEXT:    calll _varfunc\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    addl $8, %esp\\n+; ENABLE-NEXT:    popl %esi\\n+; ENABLE-NEXT:    retl\\n+;\\n+; DISABLE-LABEL: eflagsLiveInPrologue:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushl %esi\\n+; DISABLE-NEXT:    subl $8, %esp\\n+; DISABLE-NEXT:    movl L_a$non_lazy_ptr, %eax\\n+; DISABLE-NEXT:    cmpl $0, (%eax)\\n+; DISABLE-NEXT:    je LBB0_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.then\\n+; DISABLE-NEXT:    movb $1, _d\\n+; DISABLE-NEXT:  LBB0_2: ## %for.cond.preheader\\n+; DISABLE-NEXT:    movl L_b$non_lazy_ptr, %eax\\n+; DISABLE-NEXT:    movl (%eax), %eax\\n+; DISABLE-NEXT:    testl %eax, %eax\\n+; DISABLE-NEXT:    je LBB0_4\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB0_3: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    jmp LBB0_3\\n+; DISABLE-NEXT:  LBB0_4: ## %for.end\\n+; DISABLE-NEXT:    xorl %edx, %edx\\n+; DISABLE-NEXT:    cmpb $0, _d\\n+; DISABLE-NEXT:    movl $6, %ecx\\n+; DISABLE-NEXT:    cmovnel %edx, %ecx\\n+; DISABLE-NEXT:    movl L_e$non_lazy_ptr, %edx\\n+; DISABLE-NEXT:    movb %cl, (%edx)\\n+; DISABLE-NEXT:    leal 1(%ecx), %esi\\n+; DISABLE-NEXT:    cltd\\n+; DISABLE-NEXT:    idivl %esi\\n+; DISABLE-NEXT:    movl L_c$non_lazy_ptr, %eax\\n+; DISABLE-NEXT:    movl %edx, (%eax)\\n+; DISABLE-NEXT:    movl %ecx, {{[0-9]+}}(%esp)\\n+; DISABLE-NEXT:    movl $L_.str, (%esp)\\n+; DISABLE-NEXT:    calll _varfunc\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    addl $8, %esp\\n+; DISABLE-NEXT:    popl %esi\\n+; DISABLE-NEXT:    retl\\n entry:\\n   %tmp = load i32, i32* @a, align 4\\n   %tobool = icmp eq i32 %tmp, 0\"}, {\"sha\": \"b806203136f3af7176daa6dc3eec296aaeab7b80\", \"filename\": \"llvm/test/CodeGen/X86/shrink-wrap-chkstk-x86_64.ll\", \"status\": \"modified\", \"additions\": 24, \"deletions\": 8, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fshrink-wrap-chkstk-x86_64.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fshrink-wrap-chkstk-x86_64.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fshrink-wrap-chkstk-x86_64.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,3 +1,4 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n ; RUN: llc -mtriple=x86_64-windows-gnu -exception-model=dwarf < %s | FileCheck %s\\n \\n %struct.A = type { [4096 x i8] }\\n@@ -6,6 +7,29 @@\\n @b = common global i32 0, align 4\\n \\n define void @fn1() nounwind uwtable {\\n+; CHECK-LABEL: fn1:\\n+; CHECK:       # %bb.0: # %entry\\n+; CHECK-NEXT:    movl $4136, %eax # imm = 0x1028\\n+; CHECK-NEXT:    callq ___chkstk_ms\\n+; CHECK-NEXT:    subq %rax, %rsp\\n+; CHECK-NEXT:    .cfi_def_cfa_offset 4144\\n+; CHECK-NEXT:    movl {{.*}}(%rip), %eax\\n+; CHECK-NEXT:    testl %eax, %eax\\n+; CHECK-NEXT:    jne .LBB0_2\\n+; CHECK-NEXT:  # %bb.1: # %select.true.sink\\n+; CHECK-NEXT:    cltq\\n+; CHECK-NEXT:    imulq $715827883, %rax, %rax # imm = 0x2AAAAAAB\\n+; CHECK-NEXT:    movq %rax, %rcx\\n+; CHECK-NEXT:    shrq $63, %rcx\\n+; CHECK-NEXT:    shrq $32, %rax\\n+; CHECK-NEXT:    addl %ecx, %eax\\n+; CHECK-NEXT:  .LBB0_2: # %select.end\\n+; CHECK-NEXT:    movl %eax, {{.*}}(%rip)\\n+; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rcx\\n+; CHECK-NEXT:    # kill: def $ecx killed $ecx killed $rcx\\n+; CHECK-NEXT:    callq fn2\\n+; CHECK-NEXT:    addq $4136, %rsp # imm = 0x1028\\n+; CHECK-NEXT:    retq\\n entry:\\n   %ctx = alloca %struct.A, align 1\\n   %0 = load i32, i32* @a, align 4\\n@@ -26,11 +50,3 @@ declare void @fn2(i32)\\n declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture)\\n declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture)\\n \\n-; CHECK-LABEL: fn1:\\n-; CHECK: pushq %rax\\n-; CHECK: movl $4128, %eax\\n-; CHECK: callq ___chkstk_ms\\n-; CHECK: subq %rax, %rsp\\n-; CHECK: movq 4128(%rsp), %rax\\n-\\n-; CHECK: addq $4136, %rsp\"}, {\"sha\": \"77dd0753c27d5401fcb28b53fa0755e6328474b8\", \"filename\": \"llvm/test/CodeGen/X86/x86-shrink-wrapping.ll\", \"status\": \"modified\", \"additions\": 1004, \"deletions\": 442, \"changes\": 1446, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fx86-shrink-wrapping.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -1,6 +1,7 @@\\n-; RUN: llc %s -o - -enable-shrink-wrap=true -pass-remarks-output=%t | FileCheck %s --check-prefix=CHECK --check-prefix=ENABLE\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc %s -o - -enable-shrink-wrap=true -pass-remarks-output=%t | FileCheck %s --check-prefix=ENABLE\\n ; RUN: cat %t | FileCheck %s --check-prefix=REMARKS\\n-; RUN: llc %s -o - -enable-shrink-wrap=false | FileCheck %s --check-prefix=CHECK --check-prefix=DISABLE\\n+; RUN: llc %s -o - -enable-shrink-wrap=false | FileCheck %s --check-prefix=DISABLE\\n ;\\n ; Note: Lots of tests use inline asm instead of regular calls.\\n ; This allows to have a better control on what the allocation will do.\\n@@ -13,43 +14,38 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n \\n \\n ; Initial motivating example: Simple diamond with a call just on one side.\\n-; CHECK-LABEL: foo:\\n-;\\n-; Compare the arguments and jump to exit.\\n-; No prologue needed.\\n-; ENABLE: movl %edi, [[ARG0CPY:%e[a-z]+]]\\n-; ENABLE-NEXT: cmpl %esi, %edi\\n-; ENABLE-NEXT: jge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; (What we push does not matter. It should be some random sratch register.)\\n-; CHECK: pushq\\n-;\\n-; Compare the arguments and jump to exit.\\n-; After the prologue is set.\\n-; DISABLE: movl %edi, [[ARG0CPY:%e[a-z]+]]\\n-; DISABLE-NEXT: cmpl %esi, %edi\\n-; DISABLE-NEXT: jge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Store %a in the alloca.\\n-; CHECK: movl [[ARG0CPY]], 4(%rsp)\\n-; Set the alloca address in the second argument.\\n-; CHECK-NEXT: leaq 4(%rsp), %rsi\\n-; Set the first argument to zero.\\n-; CHECK-NEXT: xorl %edi, %edi\\n-; CHECK-NEXT: callq _doSomething\\n-;\\n-; With shrink-wrapping, epilogue is just after the call.\\n-; ENABLE-NEXT: addq $8, %rsp\\n-;\\n-; CHECK: [[EXIT_LABEL]]:\\n-;\\n-; Without shrink-wrapping, epilogue is in the exit block.\\n-; Epilogue code. (What we pop does not matter.)\\n-; DISABLE-NEXT: popq\\n-;\\n-; CHECK-NEXT: retq\\n define i32 @foo(i32 %a, i32 %b) {\\n+; ENABLE-LABEL: foo:\\n+; ENABLE:       ## %bb.0:\\n+; ENABLE-NEXT:    movl %edi, %eax\\n+; ENABLE-NEXT:    cmpl %esi, %edi\\n+; ENABLE-NEXT:    jge LBB0_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %true\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    movl %eax, {{[0-9]+}}(%rsp)\\n+; ENABLE-NEXT:    leaq {{[0-9]+}}(%rsp), %rsi\\n+; ENABLE-NEXT:    xorl %edi, %edi\\n+; ENABLE-NEXT:    callq _doSomething\\n+; ENABLE-NEXT:    addq $8, %rsp\\n+; ENABLE-NEXT:  LBB0_2: ## %false\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: foo:\\n+; DISABLE:       ## %bb.0:\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    movl %edi, %eax\\n+; DISABLE-NEXT:    cmpl %esi, %edi\\n+; DISABLE-NEXT:    jge LBB0_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %true\\n+; DISABLE-NEXT:    movl %eax, {{[0-9]+}}(%rsp)\\n+; DISABLE-NEXT:    leaq {{[0-9]+}}(%rsp), %rsi\\n+; DISABLE-NEXT:    xorl %edi, %edi\\n+; DISABLE-NEXT:    callq _doSomething\\n+; DISABLE-NEXT:  LBB0_2: ## %false\\n+; DISABLE-NEXT:    popq %rcx\\n+; DISABLE-NEXT:    retq\\n   %tmp = alloca i32, align 4\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n@@ -70,51 +66,69 @@ declare i32 @doSomething(i32, i32*)\\n \\n ; Check that we do not perform the restore inside the loop whereas the save\\n ; is outside.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop:\\n-;\\n-; Shrink-wrapping allows to skip the prologue in the else case.\\n-; ENABLE: testl %edi, %edi\\n-; ENABLE: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: rbx.\\n-; CHECK: pushq %rbx\\n-;\\n-; DISABLE: testl %edi, %edi\\n-; DISABLE: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: xorl [[SUM:%eax]], [[SUM]]\\n-; CHECK-NEXT: movl $10, [[IV:%e[a-z]+]]\\n-;\\n-; Next BB.\\n-; CHECK: [[LOOP:LBB[0-9_]+]]: ## %for.body\\n-; CHECK: movl $1, [[TMP:%e[a-z]+]]\\n-; CHECK: addl [[TMP]], [[SUM]]\\n-; CHECK-NEXT: decl [[IV]]\\n-; CHECK-NEXT: jne [[LOOP]]\\n-;\\n-; Next BB.\\n-; SUM << 3.\\n-; CHECK: shll $3, [[SUM]]\\n-;\\n-; DISABLE: popq\\n-; DISABLE: retq\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one in returned register.\\n-; DISABLE: movl %esi, %eax\\n-; DISABLE: addl %esi, %eax\\n-;\\n-; Epilogue code.\\n-; CHECK-DAG: popq %rbx\\n-; CHECK: retq\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: movl %esi, %eax\\n-; ENABLE: addl %esi, %eax\\n-; ENABLE-NEXT: retq\\n define i32 @freqSaveAndRestoreOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    testl %edi, %edi\\n+; ENABLE-NEXT:    je LBB1_4\\n+; ENABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -16\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    movl $10, %ecx\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB1_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    addl %edx, %eax\\n+; ENABLE-NEXT:    decl %ecx\\n+; ENABLE-NEXT:    jne LBB1_2\\n+; ENABLE-NEXT:  ## %bb.3: ## %for.end\\n+; ENABLE-NEXT:    shll $3, %eax\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB1_4: ## %if.else\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    addl %esi, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: freqSaveAndRestoreOutsideLoop:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -16\\n+; DISABLE-NEXT:    testl %edi, %edi\\n+; DISABLE-NEXT:    je LBB1_4\\n+; DISABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    movl $10, %ecx\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB1_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    addl %edx, %eax\\n+; DISABLE-NEXT:    decl %ecx\\n+; DISABLE-NEXT:    jne LBB1_2\\n+; DISABLE-NEXT:  ## %bb.3: ## %for.end\\n+; DISABLE-NEXT:    shll $3, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB1_4: ## %if.else\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    addl %esi, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -149,25 +163,58 @@ declare i32 @something(...)\\n \\n ; Check that we do not perform the shrink-wrapping inside the loop even\\n ; though that would be legal. The cost model must prevent that.\\n-; CHECK-LABEL: freqSaveAndRestoreOutsideLoop2:\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: rbx.\\n-; CHECK: pushq %rbx\\n-; CHECK: nop\\n-; CHECK: xorl [[SUM:%e[a-z]+]], [[SUM]]\\n-; CHECK-NEXT: movl $10, [[IV:%e[a-z]+]]\\n-; Next BB.\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ## %for.body\\n-; CHECK: movl $1, [[TMP:%e[a-z]+]]\\n-; CHECK: addl [[TMP]], [[SUM]]\\n-; CHECK-NEXT: decl [[IV]]\\n-; CHECK-NEXT: jne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: ## %for.exit\\n-; CHECK: nop\\n-; CHECK: popq %rbx\\n-; CHECK-NEXT: retq\\n define i32 @freqSaveAndRestoreOutsideLoop2(i32 %cond) {\\n+; ENABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -16\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    movl $10, %ecx\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB2_1: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    addl %edx, %eax\\n+; ENABLE-NEXT:    decl %ecx\\n+; ENABLE-NEXT:    jne LBB2_1\\n+; ENABLE-NEXT:  ## %bb.2: ## %for.exit\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: freqSaveAndRestoreOutsideLoop2:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -16\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    movl $10, %ecx\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB2_1: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    addl %edx, %eax\\n+; DISABLE-NEXT:    decl %ecx\\n+; DISABLE-NEXT:    jne LBB2_1\\n+; DISABLE-NEXT:  ## %bb.2: ## %for.exit\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   br label %for.preheader\\n \\n@@ -194,49 +241,75 @@ for.end:                                          ; preds = %for.body\\n \\n ; Check with a more complex case that we do not have save within the loop and\\n ; restore outside.\\n-; CHECK-LABEL: loopInfoSaveOutsideLoop:\\n-;\\n-; ENABLE: testl %edi, %edi\\n-; ENABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: rbx.\\n-; CHECK: pushq %rbx\\n-;\\n-; DISABLE: testl %edi, %edi\\n-; DISABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: nop\\n-; CHECK: xorl [[SUM:%eax]], [[SUM]]\\n-; CHECK-NEXT: movl $10, [[IV:%e[a-z]+]]\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ## %for.body\\n-; CHECK: movl $1, [[TMP:%e[a-z]+]]\\n-; CHECK: addl [[TMP]], [[SUM]]\\n-; CHECK-NEXT: decl [[IV]]\\n-; CHECK-NEXT: jne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: nop\\n-; CHECK: shll $3, [[SUM]]\\n-;\\n-; DISABLE: popq\\n-; DISABLE: retq\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one in returned register.\\n-; DISABLE: movl %esi, %eax\\n-; DISABLE: addl %esi, %eax\\n-;\\n-; Epilogue code.\\n-; CHECK-DAG: popq %rbx\\n-; CHECK: retq\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: movl %esi, %eax\\n-; ENABLE: addl %esi, %eax\\n-; ENABLE-NEXT: retq\\n define i32 @loopInfoSaveOutsideLoop(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    testl %edi, %edi\\n+; ENABLE-NEXT:    je LBB3_4\\n+; ENABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -16\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    movl $10, %ecx\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB3_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    addl %edx, %eax\\n+; ENABLE-NEXT:    decl %ecx\\n+; ENABLE-NEXT:    jne LBB3_2\\n+; ENABLE-NEXT:  ## %bb.3: ## %for.end\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    shll $3, %eax\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB3_4: ## %if.else\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    addl %esi, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: loopInfoSaveOutsideLoop:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -16\\n+; DISABLE-NEXT:    testl %edi, %edi\\n+; DISABLE-NEXT:    je LBB3_4\\n+; DISABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    movl $10, %ecx\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB3_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    addl %edx, %eax\\n+; DISABLE-NEXT:    decl %ecx\\n+; DISABLE-NEXT:    jne LBB3_2\\n+; DISABLE-NEXT:  ## %bb.3: ## %for.end\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    shll $3, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB3_4: ## %if.else\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    addl %esi, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -270,49 +343,65 @@ if.end:                                           ; preds = %if.else, %for.end\\n \\n ; Check with a more complex case that we do not have restore within the loop and\\n ; save outside.\\n-; CHECK-LABEL: loopInfoRestoreOutsideLoop:\\n-;\\n-; ENABLE: testl %edi, %edi\\n-; ENABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: rbx.\\n-; CHECK: pushq %rbx\\n-;\\n-; DISABLE: testl %edi, %edi\\n-; DISABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: nop\\n-; CHECK: xorl [[SUM:%eax]], [[SUM]]\\n-; CHECK-NEXT: movl $10, [[IV:%e[a-z]+]]\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ## %for.body\\n-; CHECK: movl $1, [[TMP:%e[a-z]+]]\\n-; CHECK: addl [[TMP]], [[SUM]]\\n-; CHECK-NEXT: decl [[IV]]\\n-; CHECK-NEXT: jne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: shll $3, [[SUM]]\\n-;\\n-; DISABLE: popq\\n-; DISABLE: retq\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ## %if.else\\n-\\n-; Shift second argument by one in returned register.\\n-; DISABLE: movl %esi, %eax\\n-; DISABLE: addl %esi, %eax\\n-;\\n-; Epilogue code.\\n-; CHECK-DAG: popq %rbx\\n-; CHECK: retq\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: movl %esi, %eax\\n-; ENABLE: addl %esi, %eax\\n-; ENABLE-NEXT: retq\\n define i32 @loopInfoRestoreOutsideLoop(i32 %cond, i32 %N) nounwind {\\n+; ENABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    testl %edi, %edi\\n+; ENABLE-NEXT:    je LBB4_4\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.then\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    movl $10, %ecx\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB4_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    addl %edx, %eax\\n+; ENABLE-NEXT:    decl %ecx\\n+; ENABLE-NEXT:    jne LBB4_2\\n+; ENABLE-NEXT:  ## %bb.3: ## %for.end\\n+; ENABLE-NEXT:    shll $3, %eax\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB4_4: ## %if.else\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    addl %esi, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: loopInfoRestoreOutsideLoop:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    testl %edi, %edi\\n+; DISABLE-NEXT:    je LBB4_4\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.then\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    movl $10, %ecx\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB4_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    addl %edx, %eax\\n+; DISABLE-NEXT:    decl %ecx\\n+; DISABLE-NEXT:    jne LBB4_2\\n+; DISABLE-NEXT:  ## %bb.3: ## %for.end\\n+; DISABLE-NEXT:    shll $3, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB4_4: ## %if.else\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    addl %esi, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -344,58 +433,86 @@ if.end:                                           ; preds = %if.else, %for.end\\n }\\n \\n ; Check that we handle function with no frame information correctly.\\n-; CHECK-LABEL: emptyFrame:\\n-; CHECK: ## %entry\\n-; CHECK-NEXT: xorl %eax, %eax\\n-; CHECK-NEXT: retq\\n define i32 @emptyFrame() {\\n+; ENABLE-LABEL: emptyFrame:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: emptyFrame:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    retq\\n entry:\\n   ret i32 0\\n }\\n \\n ; Check that we handle inline asm correctly.\\n-; CHECK-LABEL: inlineAsm:\\n-;\\n-; ENABLE: testl %edi, %edi\\n-; ENABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; Make sure we save the CSR used in the inline asm: rbx.\\n-; CHECK: pushq %rbx\\n-;\\n-; DISABLE: testl %edi, %edi\\n-; DISABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: nop\\n-; CHECK: movl $10, [[IV:%e[a-z]+]]\\n-;\\n-; CHECK: [[LOOP_LABEL:LBB[0-9_]+]]: ## %for.body\\n-; Inline asm statement.\\n-; CHECK: addl $1, %ebx\\n-; CHECK: decl [[IV]]\\n-; CHECK-NEXT: jne [[LOOP_LABEL]]\\n-; Next BB.\\n-; CHECK: nop\\n-; CHECK: xorl %eax, %eax\\n-;\\n-; DISABLE: popq\\n-; DISABLE: retq\\n-;\\n-; DISABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one in returned register.\\n-; DISABLE: movl %esi, %eax\\n-; DISABLE: addl %esi, %eax\\n-;\\n-; Epilogue code.\\n-; CHECK-DAG: popq %rbx\\n-; CHECK: retq\\n-;\\n-; ENABLE: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one and store into returned register.\\n-; ENABLE: movl %esi, %eax\\n-; ENABLE: addl %esi, %eax\\n-; ENABLE-NEXT: retq\\n define i32 @inlineAsm(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: inlineAsm:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    testl %edi, %edi\\n+; ENABLE-NEXT:    je LBB6_4\\n+; ENABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -16\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    movl $10, %eax\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB6_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    addl $1, %ebx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    decl %eax\\n+; ENABLE-NEXT:    jne LBB6_2\\n+; ENABLE-NEXT:  ## %bb.3: ## %for.exit\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB6_4: ## %if.else\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    addl %esi, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: inlineAsm:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -16\\n+; DISABLE-NEXT:    testl %edi, %edi\\n+; DISABLE-NEXT:    je LBB6_4\\n+; DISABLE-NEXT:  ## %bb.1: ## %for.preheader\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    movl $10, %eax\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB6_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    addl $1, %ebx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    decl %eax\\n+; DISABLE-NEXT:    jne LBB6_2\\n+; DISABLE-NEXT:  ## %bb.3: ## %for.exit\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB6_4: ## %if.else\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    addl %esi, %eax\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %for.preheader\\n@@ -425,43 +542,55 @@ if.end:                                           ; preds = %for.body, %if.else\\n }\\n \\n ; Check that we handle calls to variadic functions correctly.\\n-; CHECK-LABEL: callVariadicFunc:\\n-;\\n-; ENABLE: movl %esi, %eax\\n-; ENABLE: testl %edi, %edi\\n-; ENABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; CHECK: pushq\\n-;\\n-; DISABLE: movl %esi, %eax\\n-; DISABLE: testl %edi, %edi\\n-; DISABLE-NEXT: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; Setup of the varags.\\n-; CHECK:       movl\\t%eax, (%rsp)\\n-; CHECK-NEXT:  movl\\t%eax, %edi\\n-; CHECK-NEXT:  movl\\t%eax, %esi\\n-; CHECK-NEXT:  movl\\t%eax, %edx\\n-; CHECK-NEXT:  movl\\t%eax, %ecx\\n-; CHECK-NEXT:  movl\\t%eax, %r8d\\n-; CHECK-NEXT:  movl\\t%eax, %r9d\\n-; CHECK-NEXT:  xorl\\t%eax, %eax\\n-; CHECK-NEXT: callq _someVariadicFunc\\n-; CHECK-NEXT: shll $3, %eax\\n-;\\n-; ENABLE-NEXT: addq $8, %rsp\\n-; ENABLE-NEXT: retq\\n-;\\n-\\n-; CHECK: [[ELSE_LABEL]]: ## %if.else\\n-; Shift second argument by one and store into returned register.\\n-; CHECK: addl %eax, %eax\\n-;\\n-; Epilogue code.\\n-; DISABLE-NEXT: popq\\n-; CHECK-NEXT: retq\\n define i32 @callVariadicFunc(i32 %cond, i32 %N) {\\n+; ENABLE-LABEL: callVariadicFunc:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    testl %edi, %edi\\n+; ENABLE-NEXT:    je LBB7_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.then\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    movl %eax, (%rsp)\\n+; ENABLE-NEXT:    movl %eax, %edi\\n+; ENABLE-NEXT:    movl %eax, %esi\\n+; ENABLE-NEXT:    movl %eax, %edx\\n+; ENABLE-NEXT:    movl %eax, %ecx\\n+; ENABLE-NEXT:    movl %eax, %r8d\\n+; ENABLE-NEXT:    movl %eax, %r9d\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    callq _someVariadicFunc\\n+; ENABLE-NEXT:    shll $3, %eax\\n+; ENABLE-NEXT:    addq $8, %rsp\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB7_2: ## %if.else\\n+; ENABLE-NEXT:    addl %eax, %eax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: callVariadicFunc:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    testl %edi, %edi\\n+; DISABLE-NEXT:    je LBB7_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.then\\n+; DISABLE-NEXT:    movl %eax, (%rsp)\\n+; DISABLE-NEXT:    movl %eax, %edi\\n+; DISABLE-NEXT:    movl %eax, %esi\\n+; DISABLE-NEXT:    movl %eax, %edx\\n+; DISABLE-NEXT:    movl %eax, %ecx\\n+; DISABLE-NEXT:    movl %eax, %r8d\\n+; DISABLE-NEXT:    movl %eax, %r9d\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    callq _someVariadicFunc\\n+; DISABLE-NEXT:    shll $3, %eax\\n+; DISABLE-NEXT:    popq %rcx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB7_2: ## %if.else\\n+; DISABLE-NEXT:    addl %eax, %eax\\n+; DISABLE-NEXT:    popq %rcx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tobool = icmp eq i32 %cond, 0\\n   br i1 %tobool, label %if.else, label %if.then\\n@@ -507,47 +636,80 @@ declare i32 @someVariadicFunc(i32, ...)\\n \\n declare hidden fastcc %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* readonly)\\n \\n-; CHECK-LABEL: useLEA:\\n-; DISABLE: pushq\\n-;\\n-; CHECK: testq   %rdi, %rdi\\n-; CHECK-NEXT: je      [[CLEANUP:LBB[0-9_]+]]\\n-;\\n-; CHECK: cmpw $66, (%rdi)\\n-; CHECK-NEXT: jne [[CLEANUP]]\\n-;\\n-; CHECK: movq 8(%rdi), %rdi\\n-; CHECK-NEXT: movzwl (%rdi), %e[[BF_LOAD2:[a-z]+]]\\n-; CHECK-NEXT: leal -54(%r[[BF_LOAD2]]), [[TMP:%e[a-z]+]]\\n-; CHECK-NEXT: cmpl $14, [[TMP]]\\n-; CHECK-NEXT: ja [[LOR_LHS_FALSE:LBB[0-9_]+]]\\n-;\\n-; CHECK: movl $24599, [[TMP2:%e[a-z]+]]\\n-; CHECK-NEXT: btl [[TMP]], [[TMP2]]\\n-; CHECK-NEXT: jae [[LOR_LHS_FALSE:LBB[0-9_]+]]\\n-;\\n-; CHECK: [[CLEANUP]]: ## %cleanup\\n-; DISABLE: popq\\n-; CHECK-NEXT: retq\\n-;\\n-; CHECK: [[LOR_LHS_FALSE]]: ## %lor.lhs.false\\n-; CHECK: cmpl $134, %e[[BF_LOAD2]]\\n-; CHECK-NEXT: je [[CLEANUP]]\\n-;\\n-; CHECK: cmpl $140, %e[[BF_LOAD2]]\\n-; CHECK-NEXT: je [[CLEANUP]]\\n-;\\n-; ENABLE: pushq\\n-; CHECK: callq _find_temp_slot_from_address\\n-; CHECK-NEXT: testq   %rax, %rax\\n-;\\n-; The adjustment must use LEA here (or be moved above the test).\\n-; ENABLE-NEXT: leaq 8(%rsp), %rsp\\n-;\\n-; CHECK-NEXT: je [[CLEANUP]]\\n-;\\n-; CHECK: movb $1, 57(%rax)\\n define void @useLEA(%struct.rtx_def* readonly %x) {\\n+; ENABLE-LABEL: useLEA:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    testq %rdi, %rdi\\n+; ENABLE-NEXT:    je LBB8_7\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.end\\n+; ENABLE-NEXT:    cmpw $66, (%rdi)\\n+; ENABLE-NEXT:    jne LBB8_7\\n+; ENABLE-NEXT:  ## %bb.2: ## %lor.lhs.false\\n+; ENABLE-NEXT:    movq 8(%rdi), %rdi\\n+; ENABLE-NEXT:    movzwl (%rdi), %eax\\n+; ENABLE-NEXT:    leal -54(%rax), %ecx\\n+; ENABLE-NEXT:    cmpl $14, %ecx\\n+; ENABLE-NEXT:    ja LBB8_3\\n+; ENABLE-NEXT:  ## %bb.8: ## %lor.lhs.false\\n+; ENABLE-NEXT:    movl $24599, %edx ## imm = 0x6017\\n+; ENABLE-NEXT:    btl %ecx, %edx\\n+; ENABLE-NEXT:    jae LBB8_3\\n+; ENABLE-NEXT:  LBB8_7: ## %cleanup\\n+; ENABLE-NEXT:    popq %rax\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB8_3: ## %lor.lhs.false\\n+; ENABLE-NEXT:    cmpl $134, %eax\\n+; ENABLE-NEXT:    je LBB8_7\\n+; ENABLE-NEXT:  ## %bb.4: ## %lor.lhs.false\\n+; ENABLE-NEXT:    cmpl $140, %eax\\n+; ENABLE-NEXT:    je LBB8_7\\n+; ENABLE-NEXT:  ## %bb.5: ## %if.end.55\\n+; ENABLE-NEXT:    callq _find_temp_slot_from_address\\n+; ENABLE-NEXT:    testq %rax, %rax\\n+; ENABLE-NEXT:    je LBB8_7\\n+; ENABLE-NEXT:  ## %bb.6: ## %if.then.60\\n+; ENABLE-NEXT:    movb $1, 57(%rax)\\n+; ENABLE-NEXT:    popq %rax\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: useLEA:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    testq %rdi, %rdi\\n+; DISABLE-NEXT:    je LBB8_7\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.end\\n+; DISABLE-NEXT:    cmpw $66, (%rdi)\\n+; DISABLE-NEXT:    jne LBB8_7\\n+; DISABLE-NEXT:  ## %bb.2: ## %lor.lhs.false\\n+; DISABLE-NEXT:    movq 8(%rdi), %rdi\\n+; DISABLE-NEXT:    movzwl (%rdi), %eax\\n+; DISABLE-NEXT:    leal -54(%rax), %ecx\\n+; DISABLE-NEXT:    cmpl $14, %ecx\\n+; DISABLE-NEXT:    ja LBB8_3\\n+; DISABLE-NEXT:  ## %bb.8: ## %lor.lhs.false\\n+; DISABLE-NEXT:    movl $24599, %edx ## imm = 0x6017\\n+; DISABLE-NEXT:    btl %ecx, %edx\\n+; DISABLE-NEXT:    jae LBB8_3\\n+; DISABLE-NEXT:  LBB8_7: ## %cleanup\\n+; DISABLE-NEXT:    popq %rax\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB8_3: ## %lor.lhs.false\\n+; DISABLE-NEXT:    cmpl $134, %eax\\n+; DISABLE-NEXT:    je LBB8_7\\n+; DISABLE-NEXT:  ## %bb.4: ## %lor.lhs.false\\n+; DISABLE-NEXT:    cmpl $140, %eax\\n+; DISABLE-NEXT:    je LBB8_7\\n+; DISABLE-NEXT:  ## %bb.5: ## %if.end.55\\n+; DISABLE-NEXT:    callq _find_temp_slot_from_address\\n+; DISABLE-NEXT:    testq %rax, %rax\\n+; DISABLE-NEXT:    je LBB8_7\\n+; DISABLE-NEXT:  ## %bb.6: ## %if.then.60\\n+; DISABLE-NEXT:    movb $1, 57(%rax)\\n+; DISABLE-NEXT:    popq %rax\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %cmp = icmp eq %struct.rtx_def* %x, null\\n   br i1 %cmp, label %cleanup, label %if.end\\n@@ -594,26 +756,31 @@ cleanup:                                          ; preds = %if.then.60, %if.end\\n ; Make sure we do not insert unreachable code after noreturn function.\\n ; Although this is not incorrect to insert such code, it is useless\\n ; and it hurts the binary size.\\n-;\\n-; CHECK-LABEL: noreturn:\\n-; DISABLE: pushq\\n-;\\n-; CHECK: testb   %dil, %dil\\n-; CHECK-NEXT: jne      [[ABORT:LBB[0-9_]+]]\\n-;\\n-; CHECK: movl $42, %eax\\n-;\\n-; DISABLE-NEXT: popq\\n-;\\n-; CHECK-NEXT: retq\\n-;\\n-; CHECK: [[ABORT]]: ## %if.abort\\n-;\\n-; ENABLE: pushq\\n-;\\n-; CHECK: callq _abort\\n-; ENABLE-NOT: popq\\n define i32 @noreturn(i8 signext %bad_thing) {\\n+; ENABLE-LABEL: noreturn:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    testb %dil, %dil\\n+; ENABLE-NEXT:    jne LBB9_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.end\\n+; ENABLE-NEXT:    movl $42, %eax\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB9_2: ## %if.abort\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    callq _abort\\n+;\\n+; DISABLE-LABEL: noreturn:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    testb %dil, %dil\\n+; DISABLE-NEXT:    jne LBB9_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.end\\n+; DISABLE-NEXT:    movl $42, %eax\\n+; DISABLE-NEXT:    popq %rcx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB9_2: ## %if.abort\\n+; DISABLE-NEXT:    callq _abort\\n entry:\\n   %tobool = icmp eq i8 %bad_thing, 0\\n   br i1 %tobool, label %if.end, label %if.abort\\n@@ -639,9 +806,70 @@ attributes #0 = { noreturn nounwind }\\n ; should return gracefully and continue compilation.\\n ; The only condition for this test is the compilation finishes correctly.\\n ;\\n-; CHECK-LABEL: infiniteloop\\n-; CHECK: retq\\n define void @infiniteloop() {\\n+; ENABLE-LABEL: infiniteloop:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbp, -16\\n+; ENABLE-NEXT:    movq %rsp, %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -24\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    testb %al, %al\\n+; ENABLE-NEXT:    jne LBB10_3\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.then\\n+; ENABLE-NEXT:    movq %rsp, %rcx\\n+; ENABLE-NEXT:    addq $-16, %rcx\\n+; ENABLE-NEXT:    movq %rcx, %rsp\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB10_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    addl %edx, %eax\\n+; ENABLE-NEXT:    movl %eax, (%rcx)\\n+; ENABLE-NEXT:    jmp LBB10_2\\n+; ENABLE-NEXT:  LBB10_3: ## %if.end\\n+; ENABLE-NEXT:    leaq -8(%rbp), %rsp\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    popq %rbp\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: infiniteloop:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbp, -16\\n+; DISABLE-NEXT:    movq %rsp, %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -24\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    testb %al, %al\\n+; DISABLE-NEXT:    jne LBB10_3\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.then\\n+; DISABLE-NEXT:    movq %rsp, %rcx\\n+; DISABLE-NEXT:    addq $-16, %rcx\\n+; DISABLE-NEXT:    movq %rcx, %rsp\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB10_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    addl %edx, %eax\\n+; DISABLE-NEXT:    movl %eax, (%rcx)\\n+; DISABLE-NEXT:    jmp LBB10_2\\n+; DISABLE-NEXT:  LBB10_3: ## %if.end\\n+; DISABLE-NEXT:    leaq -8(%rbp), %rsp\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    popq %rbp\\n+; DISABLE-NEXT:    retq\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n \\n@@ -661,9 +889,102 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with a body bigger than just one block.\\n-; CHECK-LABEL: infiniteloop2\\n-; CHECK: retq\\n define void @infiniteloop2() {\\n+; ENABLE-LABEL: infiniteloop2:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbp, -16\\n+; ENABLE-NEXT:    movq %rsp, %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -24\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    testb %al, %al\\n+; ENABLE-NEXT:    jne LBB11_5\\n+; ENABLE-NEXT:  ## %bb.1: ## %if.then\\n+; ENABLE-NEXT:    movq %rsp, %rcx\\n+; ENABLE-NEXT:    addq $-16, %rcx\\n+; ENABLE-NEXT:    movq %rcx, %rsp\\n+; ENABLE-NEXT:    xorl %edx, %edx\\n+; ENABLE-NEXT:    jmp LBB11_2\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB11_4: ## %body2\\n+; ENABLE-NEXT:    ## in Loop: Header=BB11_2 Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:  LBB11_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    movl %edx, %esi\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    movl $1, %edx\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    addl %esi, %edx\\n+; ENABLE-NEXT:    movl %edx, (%rcx)\\n+; ENABLE-NEXT:    testb %al, %al\\n+; ENABLE-NEXT:    jne LBB11_4\\n+; ENABLE-NEXT:  ## %bb.3: ## %body1\\n+; ENABLE-NEXT:    ## in Loop: Header=BB11_2 Depth=1\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    jmp LBB11_2\\n+; ENABLE-NEXT:  LBB11_5: ## %if.end\\n+; ENABLE-NEXT:    leaq -8(%rbp), %rsp\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    popq %rbp\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: infiniteloop2:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbp, -16\\n+; DISABLE-NEXT:    movq %rsp, %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -24\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    testb %al, %al\\n+; DISABLE-NEXT:    jne LBB11_5\\n+; DISABLE-NEXT:  ## %bb.1: ## %if.then\\n+; DISABLE-NEXT:    movq %rsp, %rcx\\n+; DISABLE-NEXT:    addq $-16, %rcx\\n+; DISABLE-NEXT:    movq %rcx, %rsp\\n+; DISABLE-NEXT:    xorl %edx, %edx\\n+; DISABLE-NEXT:    jmp LBB11_2\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB11_4: ## %body2\\n+; DISABLE-NEXT:    ## in Loop: Header=BB11_2 Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:  LBB11_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    movl %edx, %esi\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    movl $1, %edx\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    addl %esi, %edx\\n+; DISABLE-NEXT:    movl %edx, (%rcx)\\n+; DISABLE-NEXT:    testb %al, %al\\n+; DISABLE-NEXT:    jne LBB11_4\\n+; DISABLE-NEXT:  ## %bb.3: ## %body1\\n+; DISABLE-NEXT:    ## in Loop: Header=BB11_2 Depth=1\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    jmp LBB11_2\\n+; DISABLE-NEXT:  LBB11_5: ## %if.end\\n+; DISABLE-NEXT:    leaq -8(%rbp), %rsp\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    popq %rbp\\n+; DISABLE-NEXT:    retq\\n entry:\\n   br i1 undef, label %if.then, label %if.end\\n \\n@@ -691,9 +1012,70 @@ if.end:\\n }\\n \\n ; Another infinite loop test this time with two nested infinite loop.\\n-; CHECK-LABEL: infiniteloop3\\n-; CHECK: retq\\n define void @infiniteloop3() {\\n+; ENABLE-LABEL: infiniteloop3:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    testb %al, %al\\n+; ENABLE-NEXT:    jne LBB12_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %body\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    testb %al, %al\\n+; ENABLE-NEXT:    jne LBB12_7\\n+; ENABLE-NEXT:  LBB12_2: ## %loop2a.preheader\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    xorl %ecx, %ecx\\n+; ENABLE-NEXT:    movq %rax, %rsi\\n+; ENABLE-NEXT:    jmp LBB12_4\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB12_3: ## %loop2b\\n+; ENABLE-NEXT:    ## in Loop: Header=BB12_4 Depth=1\\n+; ENABLE-NEXT:    movq %rdx, (%rsi)\\n+; ENABLE-NEXT:    movq %rdx, %rsi\\n+; ENABLE-NEXT:  LBB12_4: ## %loop1\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    movq %rcx, %rdx\\n+; ENABLE-NEXT:    testq %rax, %rax\\n+; ENABLE-NEXT:    movq (%rax), %rcx\\n+; ENABLE-NEXT:    jne LBB12_3\\n+; ENABLE-NEXT:  ## %bb.5: ## in Loop: Header=BB12_4 Depth=1\\n+; ENABLE-NEXT:    movq %rdx, %rax\\n+; ENABLE-NEXT:    movq %rdx, %rsi\\n+; ENABLE-NEXT:    jmp LBB12_4\\n+; ENABLE-NEXT:  LBB12_7: ## %end\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: infiniteloop3:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    testb %al, %al\\n+; DISABLE-NEXT:    jne LBB12_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %body\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    testb %al, %al\\n+; DISABLE-NEXT:    jne LBB12_7\\n+; DISABLE-NEXT:  LBB12_2: ## %loop2a.preheader\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    xorl %ecx, %ecx\\n+; DISABLE-NEXT:    movq %rax, %rsi\\n+; DISABLE-NEXT:    jmp LBB12_4\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB12_3: ## %loop2b\\n+; DISABLE-NEXT:    ## in Loop: Header=BB12_4 Depth=1\\n+; DISABLE-NEXT:    movq %rdx, (%rsi)\\n+; DISABLE-NEXT:    movq %rdx, %rsi\\n+; DISABLE-NEXT:  LBB12_4: ## %loop1\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    movq %rcx, %rdx\\n+; DISABLE-NEXT:    testq %rax, %rax\\n+; DISABLE-NEXT:    movq (%rax), %rcx\\n+; DISABLE-NEXT:    jne LBB12_3\\n+; DISABLE-NEXT:  ## %bb.5: ## in Loop: Header=BB12_4 Depth=1\\n+; DISABLE-NEXT:    movq %rdx, %rax\\n+; DISABLE-NEXT:    movq %rdx, %rsi\\n+; DISABLE-NEXT:    jmp LBB12_4\\n+; DISABLE-NEXT:  LBB12_7: ## %end\\n+; DISABLE-NEXT:    retq\\n entry:\\n   br i1 undef, label %loop2a, label %body\\n \\n@@ -724,44 +1106,49 @@ end:\\n \\n ; Check that we just don't bail out on RegMask.\\n ; In this case, the RegMask does not touch a CSR so we are good to go!\\n-; CHECK-LABEL: regmask:\\n-;\\n-; Compare the arguments and jump to exit.\\n-; No prologue needed.\\n-; ENABLE: cmpl %esi, %edi\\n-; ENABLE-NEXT: jge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; Prologue code.\\n-; (What we push does not matter. It should be some random sratch register.)\\n-; CHECK: pushq\\n-;\\n-; Compare the arguments and jump to exit.\\n-; After the prologue is set.\\n-; DISABLE: cmpl %esi, %edi\\n-; DISABLE-NEXT: jge [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; CHECK: nop\\n-; Set the first argument to zero.\\n-; CHECK: xorl %edi, %edi\\n-; Set the second argument to addr.\\n-; CHECK-NEXT: movq %rdx, %rsi\\n-; CHECK-NEXT: callq _doSomething\\n-; CHECK-NEXT: popq\\n-; CHECK-NEXT: retq\\n-;\\n-; CHECK: [[EXIT_LABEL]]:\\n-; Set the first argument to 6.\\n-; CHECK-NEXT: movl $6, %edi\\n-; Set the second argument to addr.\\n-; CHECK-NEXT: movq %rdx, %rsi\\n-;\\n-; Without shrink-wrapping, we need to restore the stack before\\n-; making the tail call.\\n-; Epilogue code.\\n-; DISABLE-NEXT: popq\\n-;\\n-; CHECK-NEXT: jmp _doSomething\\n define i32 @regmask(i32 %a, i32 %b, i32* %addr) {\\n+; ENABLE-LABEL: regmask:\\n+; ENABLE:       ## %bb.0:\\n+; ENABLE-NEXT:    cmpl %esi, %edi\\n+; ENABLE-NEXT:    jge LBB13_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %true\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -16\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    xorl %edi, %edi\\n+; ENABLE-NEXT:    movq %rdx, %rsi\\n+; ENABLE-NEXT:    callq _doSomething\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB13_2: ## %false\\n+; ENABLE-NEXT:    movl $6, %edi\\n+; ENABLE-NEXT:    movq %rdx, %rsi\\n+; ENABLE-NEXT:    jmp _doSomething ## TAILCALL\\n+;\\n+; DISABLE-LABEL: regmask:\\n+; DISABLE:       ## %bb.0:\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -16\\n+; DISABLE-NEXT:    cmpl %esi, %edi\\n+; DISABLE-NEXT:    jge LBB13_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %true\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    xorl %edi, %edi\\n+; DISABLE-NEXT:    movq %rdx, %rsi\\n+; DISABLE-NEXT:    callq _doSomething\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB13_2: ## %false\\n+; DISABLE-NEXT:    movl $6, %edi\\n+; DISABLE-NEXT:    movq %rdx, %rsi\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    jmp _doSomething ## TAILCALL\\n   %tmp2 = icmp slt i32 %a, %b\\n   br i1 %tmp2, label %true, label %false\\n \\n@@ -791,41 +1178,76 @@ end:\\n ; Note: The registers may change in the following patterns, but\\n ; because they imply register hierarchy (e.g., eax, al) this is\\n ; tricky to write robust patterns.\\n-;\\n-; CHECK-LABEL: useLEAForPrologue:\\n-;\\n-; Prologue is at the beginning of the function when shrink-wrapping\\n-; is disabled.\\n-; DISABLE: pushq\\n-; The stack adjustment can use SUB instr because we do not need to\\n-; preserve the EFLAGS at this point.\\n-; DISABLE-NEXT: subq $16, %rsp\\n-;\\n-; Load the value of b.\\n-; Create the zero value for the select assignment.\\n-; CHECK: xorl [[CMOVE_VAL:%eax]], [[CMOVE_VAL]]\\n-; CHECK-NEXT: cmpb $0, _b(%rip)\\n-; CHECK-NEXT: movl $48, [[IMM_VAL:%ecx]]\\n-; CHECK-NEXT: cmovnel [[CMOVE_VAL]], [[IMM_VAL]]\\n-; CHECK-NEXT: movb %cl, _c(%rip)\\n-; CHECK-NEXT: je [[VARFUNC_CALL:LBB[0-9_]+]]\\n-;\\n-; The code of the loop is not interesting.\\n-; [...]\\n-;\\n-; CHECK: [[VARFUNC_CALL]]:\\n-; Set the null parameter.\\n-; CHECK-NEXT: xorl %edi, %edi\\n-; CHECK-NEXT: callq _varfunc\\n-;\\n-; Set the return value.\\n-; CHECK-NEXT: xorl %eax, %eax\\n-;\\n-; Epilogue code.\\n-; CHECK-NEXT: addq $16, %rsp\\n-; CHECK-NEXT: popq\\n-; CHECK-NEXT: retq\\n define i32 @useLEAForPrologue(i32 %d, i32 %a, i8 %c) #3 {\\n+; ENABLE-LABEL: useLEAForPrologue:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    subq $16, %rsp\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    cmpb $0, {{.*}}(%rip)\\n+; ENABLE-NEXT:    movl $48, %ecx\\n+; ENABLE-NEXT:    cmovnel %eax, %ecx\\n+; ENABLE-NEXT:    movb %cl, {{.*}}(%rip)\\n+; ENABLE-NEXT:    je LBB14_4\\n+; ENABLE-NEXT:  ## %bb.1: ## %for.body.lr.ph\\n+; ENABLE-NEXT:    ## InlineAsm Start\\n+; ENABLE-NEXT:    nop\\n+; ENABLE-NEXT:    ## InlineAsm End\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB14_2: ## %for.body\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    cmpl %esi, %edi\\n+; ENABLE-NEXT:    setl %al\\n+; ENABLE-NEXT:    xorl %esi, %esi\\n+; ENABLE-NEXT:    movb %al, %sil\\n+; ENABLE-NEXT:    incb %dl\\n+; ENABLE-NEXT:    cmpb $45, %dl\\n+; ENABLE-NEXT:    jl LBB14_2\\n+; ENABLE-NEXT:  ## %bb.3: ## %for.cond.for.end_crit_edge\\n+; ENABLE-NEXT:    movq _a@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    movl %esi, (%rax)\\n+; ENABLE-NEXT:  LBB14_4: ## %for.end\\n+; ENABLE-NEXT:    xorl %edi, %edi\\n+; ENABLE-NEXT:    callq _varfunc\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    addq $16, %rsp\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: useLEAForPrologue:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    subq $16, %rsp\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    cmpb $0, {{.*}}(%rip)\\n+; DISABLE-NEXT:    movl $48, %ecx\\n+; DISABLE-NEXT:    cmovnel %eax, %ecx\\n+; DISABLE-NEXT:    movb %cl, {{.*}}(%rip)\\n+; DISABLE-NEXT:    je LBB14_4\\n+; DISABLE-NEXT:  ## %bb.1: ## %for.body.lr.ph\\n+; DISABLE-NEXT:    ## InlineAsm Start\\n+; DISABLE-NEXT:    nop\\n+; DISABLE-NEXT:    ## InlineAsm End\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB14_2: ## %for.body\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    cmpl %esi, %edi\\n+; DISABLE-NEXT:    setl %al\\n+; DISABLE-NEXT:    xorl %esi, %esi\\n+; DISABLE-NEXT:    movb %al, %sil\\n+; DISABLE-NEXT:    incb %dl\\n+; DISABLE-NEXT:    cmpb $45, %dl\\n+; DISABLE-NEXT:    jl LBB14_2\\n+; DISABLE-NEXT:  ## %bb.3: ## %for.cond.for.end_crit_edge\\n+; DISABLE-NEXT:    movq _a@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    movl %esi, (%rax)\\n+; DISABLE-NEXT:  LBB14_4: ## %for.end\\n+; DISABLE-NEXT:    xorl %edi, %edi\\n+; DISABLE-NEXT:    callq _varfunc\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    addq $16, %rsp\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %tmp = alloca i3\\n   %.b = load i1, i1* @b, align 1\\n@@ -866,24 +1288,48 @@ declare i32 @varfunc(i8* nocapture readonly)\\n ; TLS calls used to be wrongly model and shrink-wrapping would have inserted\\n ; the prologue and epilogue just around the call to doSomething.\\n ; PR25820.\\n-;\\n-; CHECK-LABEL: tlsCall:\\n-; CHECK: pushq\\n-; CHECK: testb $1, %dil\\n-; CHECK: je [[ELSE_LABEL:LBB[0-9_]+]]\\n-;\\n-; master bb\\n-; CHECK: movq _sum1@TLVP(%rip), %rdi\\n-; CHECK-NEXT: callq *(%rdi)\\n-; CHECK: jmp [[EXIT_LABEL:LBB[0-9_]+]]\\n-;\\n-; [[ELSE_LABEL]]:\\n-; CHECK: callq _doSomething\\n-;\\n-; [[EXIT_LABEL]]:\\n-; CHECK: popq\\n-; CHECK-NEXT: retq\\n define i32 @tlsCall(i1 %bool1, i32 %arg, i32* readonly dereferenceable(4) %sum1) #3 {\\n+; ENABLE-LABEL: tlsCall:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    testb $1, %dil\\n+; ENABLE-NEXT:    je LBB15_2\\n+; ENABLE-NEXT:  ## %bb.1: ## %master\\n+; ENABLE-NEXT:    movl (%rdx), %ecx\\n+; ENABLE-NEXT:    movq _sum1@{{.*}}(%rip), %rdi\\n+; ENABLE-NEXT:    callq *(%rdi)\\n+; ENABLE-NEXT:    movl %ecx, (%rax)\\n+; ENABLE-NEXT:    jmp LBB15_3\\n+; ENABLE-NEXT:  LBB15_2: ## %else\\n+; ENABLE-NEXT:    xorl %edi, %edi\\n+; ENABLE-NEXT:    xorl %esi, %esi\\n+; ENABLE-NEXT:    callq _doSomething\\n+; ENABLE-NEXT:    movl %eax, %esi\\n+; ENABLE-NEXT:  LBB15_3: ## %exit\\n+; ENABLE-NEXT:    movl %esi, %eax\\n+; ENABLE-NEXT:    popq %rcx\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: tlsCall:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    testb $1, %dil\\n+; DISABLE-NEXT:    je LBB15_2\\n+; DISABLE-NEXT:  ## %bb.1: ## %master\\n+; DISABLE-NEXT:    movl (%rdx), %ecx\\n+; DISABLE-NEXT:    movq _sum1@{{.*}}(%rip), %rdi\\n+; DISABLE-NEXT:    callq *(%rdi)\\n+; DISABLE-NEXT:    movl %ecx, (%rax)\\n+; DISABLE-NEXT:    jmp LBB15_3\\n+; DISABLE-NEXT:  LBB15_2: ## %else\\n+; DISABLE-NEXT:    xorl %edi, %edi\\n+; DISABLE-NEXT:    xorl %esi, %esi\\n+; DISABLE-NEXT:    callq _doSomething\\n+; DISABLE-NEXT:    movl %eax, %esi\\n+; DISABLE-NEXT:  LBB15_3: ## %exit\\n+; DISABLE-NEXT:    movl %esi, %eax\\n+; DISABLE-NEXT:    popq %rcx\\n+; DISABLE-NEXT:    retq\\n entry:\\n   br i1 %bool1, label %master, label %else\\n \\n@@ -913,17 +1359,6 @@ attributes #3 = { nounwind }\\n ; and since we use that information to do the placement, we may end up\\n ; inserting the prologue/epilogue at incorrect places.\\n ; PR25988.\\n-;\\n-; CHECK-LABEL: irreducibleCFG:\\n-; CHECK: %entry\\n-; Make sure the prologue happens in the entry block.\\n-; CHECK-NEXT: pushq\\n-; ...\\n-; Make sure the epilogue happens in the exit block.\\n-; CHECK-NOT: popq\\n-; CHECK: popq\\n-; CHECK-NEXT: popq\\n-; CHECK-NEXT: retq\\n ; Make sure we emit missed optimization remarks for this.\\n ; REMARKS: Pass:            shrink-wrap\\n ; REMARKS-NEXT: Name:            UnsupportedIrreducibleCFG\\n@@ -932,6 +1367,93 @@ attributes #3 = { nounwind }\\n ; REMARKS-NEXT:   - String:          Irreducible CFGs are not supported yet\\n \\n define i32 @irreducibleCFG() #4 {\\n+; ENABLE-LABEL: irreducibleCFG:\\n+; ENABLE:       ## %bb.0: ## %entry\\n+; ENABLE-NEXT:    pushq %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; ENABLE-NEXT:    .cfi_offset %rbp, -16\\n+; ENABLE-NEXT:    movq %rsp, %rbp\\n+; ENABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; ENABLE-NEXT:    pushq %rbx\\n+; ENABLE-NEXT:    pushq %rax\\n+; ENABLE-NEXT:    .cfi_offset %rbx, -24\\n+; ENABLE-NEXT:    movq _irreducibleCFGf@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    cmpb $0, (%rax)\\n+; ENABLE-NEXT:    je LBB16_2\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB16_1: ## %preheader\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    jmp LBB16_1\\n+; ENABLE-NEXT:  LBB16_2: ## %split\\n+; ENABLE-NEXT:    movq _irreducibleCFGb@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    movl (%rax), %eax\\n+; ENABLE-NEXT:    testl %eax, %eax\\n+; ENABLE-NEXT:    je LBB16_3\\n+; ENABLE-NEXT:  ## %bb.4: ## %for.body4.i\\n+; ENABLE-NEXT:    movq _irreducibleCFGa@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    movl (%rax), %edi\\n+; ENABLE-NEXT:    xorl %ebx, %ebx\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    callq _something\\n+; ENABLE-NEXT:    jmp LBB16_5\\n+; ENABLE-NEXT:  LBB16_3:\\n+; ENABLE-NEXT:    xorl %ebx, %ebx\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB16_5: ## %for.inc\\n+; ENABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    incl %ebx\\n+; ENABLE-NEXT:    cmpl $7, %ebx\\n+; ENABLE-NEXT:    jl LBB16_5\\n+; ENABLE-NEXT:  ## %bb.6: ## %fn1.exit\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    addq $8, %rsp\\n+; ENABLE-NEXT:    popq %rbx\\n+; ENABLE-NEXT:    popq %rbp\\n+; ENABLE-NEXT:    retq\\n+;\\n+; DISABLE-LABEL: irreducibleCFG:\\n+; DISABLE:       ## %bb.0: ## %entry\\n+; DISABLE-NEXT:    pushq %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_offset 16\\n+; DISABLE-NEXT:    .cfi_offset %rbp, -16\\n+; DISABLE-NEXT:    movq %rsp, %rbp\\n+; DISABLE-NEXT:    .cfi_def_cfa_register %rbp\\n+; DISABLE-NEXT:    pushq %rbx\\n+; DISABLE-NEXT:    pushq %rax\\n+; DISABLE-NEXT:    .cfi_offset %rbx, -24\\n+; DISABLE-NEXT:    movq _irreducibleCFGf@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    cmpb $0, (%rax)\\n+; DISABLE-NEXT:    je LBB16_2\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB16_1: ## %preheader\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    jmp LBB16_1\\n+; DISABLE-NEXT:  LBB16_2: ## %split\\n+; DISABLE-NEXT:    movq _irreducibleCFGb@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    movl (%rax), %eax\\n+; DISABLE-NEXT:    testl %eax, %eax\\n+; DISABLE-NEXT:    je LBB16_3\\n+; DISABLE-NEXT:  ## %bb.4: ## %for.body4.i\\n+; DISABLE-NEXT:    movq _irreducibleCFGa@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    movl (%rax), %edi\\n+; DISABLE-NEXT:    xorl %ebx, %ebx\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    callq _something\\n+; DISABLE-NEXT:    jmp LBB16_5\\n+; DISABLE-NEXT:  LBB16_3:\\n+; DISABLE-NEXT:    xorl %ebx, %ebx\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB16_5: ## %for.inc\\n+; DISABLE-NEXT:    ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    incl %ebx\\n+; DISABLE-NEXT:    cmpl $7, %ebx\\n+; DISABLE-NEXT:    jl LBB16_5\\n+; DISABLE-NEXT:  ## %bb.6: ## %fn1.exit\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    addq $8, %rsp\\n+; DISABLE-NEXT:    popq %rbx\\n+; DISABLE-NEXT:    popq %rbp\\n+; DISABLE-NEXT:    retq\\n entry:\\n   %i0 = load i32, i32* @irreducibleCFGa, align 4\\n   %.pr = load i8, i8* @irreducibleCFGf, align 1\\n@@ -978,20 +1500,60 @@ attributes #4 = { \\\"no-frame-pointer-elim\\\"=\\\"true\\\" }\\n ; loop, which can occur into a misplacement of the restore block, if we're\\n ; looking for the nearest common post-dominator of an \\\"unreachable\\\" block.\\n \\n-; CHECK-LABEL: infiniteLoopNoSuccessor:\\n-; CHECK: ## %bb.0:\\n-; Make sure the prologue happens in the entry block.\\n-; CHECK-NEXT: pushq %rbp\\n-; ...\\n-; Make sure we don't shrink-wrap.\\n-; CHECK: ## %bb.1\\n-; CHECK-NOT: pushq %rbp\\n-; ...\\n-; Make sure the epilogue happens in the exit block.\\n-; CHECK: ## %bb.5\\n-; CHECK: popq %rbp\\n-; CHECK-NEXT: retq\\n define void @infiniteLoopNoSuccessor() #5 {\\n+; ENABLE-LABEL: infiniteLoopNoSuccessor:\\n+; ENABLE:       ## %bb.0:\\n+; ENABLE-NEXT:    pushq %rbp\\n+; ENABLE-NEXT:    movq %rsp, %rbp\\n+; ENABLE-NEXT:    movq _x@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    cmpl $0, (%rax)\\n+; ENABLE-NEXT:    je LBB17_2\\n+; ENABLE-NEXT:  ## %bb.1:\\n+; ENABLE-NEXT:    movl $0, (%rax)\\n+; ENABLE-NEXT:  LBB17_2:\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    callq _somethingElse\\n+; ENABLE-NEXT:    movq _y@{{.*}}(%rip), %rax\\n+; ENABLE-NEXT:    cmpl $0, (%rax)\\n+; ENABLE-NEXT:    je LBB17_3\\n+; ENABLE-NEXT:  ## %bb.5:\\n+; ENABLE-NEXT:    popq %rbp\\n+; ENABLE-NEXT:    retq\\n+; ENABLE-NEXT:  LBB17_3:\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    callq _something\\n+; ENABLE-NEXT:    .p2align 4, 0x90\\n+; ENABLE-NEXT:  LBB17_4: ## =>This Inner Loop Header: Depth=1\\n+; ENABLE-NEXT:    xorl %eax, %eax\\n+; ENABLE-NEXT:    callq _somethingElse\\n+; ENABLE-NEXT:    jmp LBB17_4\\n+;\\n+; DISABLE-LABEL: infiniteLoopNoSuccessor:\\n+; DISABLE:       ## %bb.0:\\n+; DISABLE-NEXT:    pushq %rbp\\n+; DISABLE-NEXT:    movq %rsp, %rbp\\n+; DISABLE-NEXT:    movq _x@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    cmpl $0, (%rax)\\n+; DISABLE-NEXT:    je LBB17_2\\n+; DISABLE-NEXT:  ## %bb.1:\\n+; DISABLE-NEXT:    movl $0, (%rax)\\n+; DISABLE-NEXT:  LBB17_2:\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    callq _somethingElse\\n+; DISABLE-NEXT:    movq _y@{{.*}}(%rip), %rax\\n+; DISABLE-NEXT:    cmpl $0, (%rax)\\n+; DISABLE-NEXT:    je LBB17_3\\n+; DISABLE-NEXT:  ## %bb.5:\\n+; DISABLE-NEXT:    popq %rbp\\n+; DISABLE-NEXT:    retq\\n+; DISABLE-NEXT:  LBB17_3:\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    callq _something\\n+; DISABLE-NEXT:    .p2align 4, 0x90\\n+; DISABLE-NEXT:  LBB17_4: ## =>This Inner Loop Header: Depth=1\\n+; DISABLE-NEXT:    xorl %eax, %eax\\n+; DISABLE-NEXT:    callq _somethingElse\\n+; DISABLE-NEXT:    jmp LBB17_4\\n   %1 = load i32, i32* @x, align 4\\n   %2 = icmp ne i32 %1, 0\\n   br i1 %2, label %3, label %4\"}, {\"sha\": \"c6f37090e589914df9698d027c24d6b30ac2f785\", \"filename\": \"llvm/test/CodeGen/X86/xchg-nofold.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fxchg-nofold.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0be2d25ecc7d9b71e03b07529eb1581efa92674a/llvm%2Ftest%2FCodeGen%2FX86%2Fxchg-nofold.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxchg-nofold.ll?ref=0be2d25ecc7d9b71e03b07529eb1581efa92674a\", \"patch\": \"@@ -9,6 +9,7 @@\\n define zeroext i1 @_Z3fooRSt6atomicIbEb(%\\\"struct.std::atomic\\\"* nocapture dereferenceable(1) %a, i1 returned zeroext %b) nounwind {\\n ; CHECK-LABEL: _Z3fooRSt6atomicIbEb:\\n ; CHECK:       # %bb.0: # %entry\\n+; CHECK-NEXT:    pushq %rax\\n ; CHECK-NEXT:    movl %esi, %eax\\n ; CHECK-NEXT:    movq %rdi, %rcx\\n ; CHECK-NEXT:    shrq $3, %rcx\\n@@ -24,9 +25,9 @@ define zeroext i1 @_Z3fooRSt6atomicIbEb(%\\\"struct.std::atomic\\\"* nocapture derefer\\n ; CHECK-NEXT:    movl %eax, %ecx\\n ; CHECK-NEXT:    xchgb %cl, (%rdi)\\n ; CHECK-NEXT:    # kill: def $al killed $al killed $eax\\n+; CHECK-NEXT:    popq %rcx\\n ; CHECK-NEXT:    retq\\n ; CHECK-NEXT:  .LBB0_2:\\n-; CHECK-NEXT:    pushq %rax\\n ; CHECK-NEXT:    callq __asan_report_store1\\n ; CHECK-NEXT:    #APP\\n ; CHECK-NEXT:    #NO_APP\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lYTVjOTRiNDk3Y2ZjNDNmOWVjNTEzZjcyMWUwM2FhNWM2NjkyNDlhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ea5c94b497cfc43f9ec513f721e03aa5c669249a", "content": "{\"sha\": \"ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWE1Yzk0YjQ5N2NmYzQzZjllYzUxM2Y3MjFlMDNhYTVjNjY5MjQ5YQ==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-07-23T17:45:11Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2019-07-23T17:45:11Z\"}, \"message\": \"[IndVars] Fix a subtle bug in optimizeLoopExits\\n\\nThe original code failed to account for the fact that one exit can have a pointer exit count without all of them having pointer exit counts.  This could cause two separate bugs:\\n1) We might exit the loop early, and leave optimizations undone.  This is what triggered the assertion failure in the reported test case.\\n2) We might optimize one exit, then exit without indicating a change.  This could result in an analysis invalidaton bug if no other transform is done by the rest of indvars.\\n\\nNote that the pointer exit counts are a really fragile concept.  They show up only when we have a pointer IV w/o a datalayout to provide their size.  It's really questionable to me whether the complexity implied is worth it.\\n\\nllvm-svn: 366829\", \"tree\": {\"sha\": \"27f7d292e5913bc405e7e3abe4ef12334f46eb4d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/27f7d292e5913bc405e7e3abe4ef12334f46eb4d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea5c94b497cfc43f9ec513f721e03aa5c669249a/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"532f756555717e730166ac882e4c97ac0eeb1664\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/532f756555717e730166ac882e4c97ac0eeb1664\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/532f756555717e730166ac882e4c97ac0eeb1664\"}], \"stats\": {\"total\": 51, \"additions\": 49, \"deletions\": 2}, \"files\": [{\"sha\": \"41e22b4a212658b5d97738f0c00c885eb2bf14ad\", \"filename\": \"llvm/lib/Transforms/Scalar/IndVarSimplify.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea5c94b497cfc43f9ec513f721e03aa5c669249a/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea5c94b497cfc43f9ec513f721e03aa5c669249a/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp?ref=ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"patch\": \"@@ -2688,10 +2688,12 @@ bool IndVarSimplify::optimizeLoopExits(Loop *L) {\\n       continue;\\n     }\\n \\n-    // If we end up with a pointer exit count, bail.\\n+    // If we end up with a pointer exit count, bail.  Note that we can end up\\n+    // with a pointer exit count for one exiting block, and not for another in\\n+    // the same loop.\\n     if (!ExitCount->getType()->isIntegerTy() ||\\n         !MaxExitCount->getType()->isIntegerTy())\\n-      return false;\\n+      continue;\\n     \\n     Type *WiderType =\\n       SE->getWiderType(MaxExitCount->getType(), ExitCount->getType());\"}, {\"sha\": \"0b1609b3096c686201b655f8779e4bcfb91a323c\", \"filename\": \"llvm/test/Transforms/IndVarSimplify/eliminate-exit-no-dl.ll\", \"status\": \"added\", \"additions\": 45, \"deletions\": 0, \"changes\": 45, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea5c94b497cfc43f9ec513f721e03aa5c669249a/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Feliminate-exit-no-dl.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea5c94b497cfc43f9ec513f721e03aa5c669249a/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Feliminate-exit-no-dl.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Feliminate-exit-no-dl.ll?ref=ea5c94b497cfc43f9ec513f721e03aa5c669249a\", \"patch\": \"@@ -0,0 +1,45 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt -indvars -S < %s | FileCheck %s\\n+\\n+; Check the case where one exit has a pointer EC, and the other doesn't.\\n+; Note that this test case is really really fragile.  Removing any\\n+; instruction in the below causes the result to differ.  Note that the lack\\n+; of a data layout (with pointer size info) is critical to getting a pointer\\n+; EC returned by SCEV.\\n+\\n+@global = external global [0 x i8], align 1\\n+\\n+define void @foo() {\\n+; CHECK-LABEL: @foo(\\n+; CHECK-NEXT:  bb:\\n+; CHECK-NEXT:    br label [[BB3:%.*]]\\n+; CHECK:       bb3:\\n+; CHECK-NEXT:    [[TMP:%.*]] = phi i8* [ [[TMP4:%.*]], [[BB7:%.*]] ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @global, i64 0, i64 2), [[BB:%.*]] ]\\n+; CHECK-NEXT:    [[TMP4]] = getelementptr inbounds i8, i8* [[TMP]], i64 -1\\n+; CHECK-NEXT:    [[TMP6:%.*]] = load i8, i8* [[TMP4]], align 1\\n+; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i8* [[TMP4]], getelementptr inbounds ([0 x i8], [0 x i8]* @global, i64 0, i64 500)\\n+; CHECK-NEXT:    br i1 [[TMP5]], label [[BB7]], label [[BB11:%.*]]\\n+; CHECK:       bb7:\\n+; CHECK-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i64\\n+; CHECK-NEXT:    br i1 true, label [[BB11]], label [[BB3]]\\n+; CHECK:       bb11:\\n+; CHECK-NEXT:    ret void\\n+;\\n+bb:\\n+  br label %bb3\\n+\\n+bb3:                                              ; preds = %bb7, %bb2\\n+  %tmp = phi i8* [ %tmp4, %bb7 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @global, i64 0, i64 2), %bb ]\\n+  %tmp4 = getelementptr inbounds i8, i8* %tmp, i64 -1\\n+  %tmp6 = load i8, i8* %tmp4, align 1\\n+  %tmp5 = icmp ugt i8* %tmp4, getelementptr inbounds ([0 x i8], [0 x i8]* @global, i64 0, i64 500)\\n+  br i1 %tmp5, label %bb7, label %bb11\\n+\\n+bb7:                                              ; preds = %bb3\\n+  %tmp8 = zext i8 %tmp6 to i64\\n+  %tmp10 = icmp eq i16 0, 0\\n+  br i1 %tmp10, label %bb11, label %bb3\\n+\\n+bb11:                                             ; preds = %bb7, %bb3\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85OTE4MzRhNTE2MTY3OTk0NTZhNWU2NWNlZmRlMmY0MWMzNTBhY2EyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/991834a51616799456a5e65cefde2f41c350aca2", "content": "{\"sha\": \"991834a51616799456a5e65cefde2f41c350aca2\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OTkxODM0YTUxNjE2Nzk5NDU2YTVlNjVjZWZkZTJmNDFjMzUwYWNhMg==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-08-09T12:43:25Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-08-09T12:43:25Z\"}, \"message\": \"[GlobalOpt] prevent crashing on large integer types (PR42932)\\n\\nThis is a minimal fix (copy the predicate for the assert) to\\nprevent the crashing seen in:\\nhttps://bugs.llvm.org/show_bug.cgi?id=42932\\n...when converting a constant integer of arbitrary width to uint64_t.\\n\\nDifferential Revision: https://reviews.llvm.org/D65970\\n\\nllvm-svn: 368437\", \"tree\": {\"sha\": \"2d3ed7e2609e250005b9af9d51ff74d1dc5b3386\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2d3ed7e2609e250005b9af9d51ff74d1dc5b3386\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/991834a51616799456a5e65cefde2f41c350aca2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/991834a51616799456a5e65cefde2f41c350aca2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/991834a51616799456a5e65cefde2f41c350aca2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/991834a51616799456a5e65cefde2f41c350aca2/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8616a7702636b17deebf182146a84d3f2458b94d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8616a7702636b17deebf182146a84d3f2458b94d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8616a7702636b17deebf182146a84d3f2458b94d\"}], \"stats\": {\"total\": 29, \"additions\": 27, \"deletions\": 2}, \"files\": [{\"sha\": \"471cdb665701e70954a2814317311b0d9e32ebed\", \"filename\": \"llvm/lib/Transforms/IPO/GlobalOpt.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/991834a51616799456a5e65cefde2f41c350aca2/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/991834a51616799456a5e65cefde2f41c350aca2/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp?ref=991834a51616799456a5e65cefde2f41c350aca2\", \"patch\": \"@@ -1643,10 +1643,12 @@ static bool TryToShrinkGlobalToBoolean(GlobalVariable *GV, Constant *OtherVal) {\\n   // instead of a select to synthesize the desired value.\\n   bool IsOneZero = false;\\n   bool EmitOneOrZero = true;\\n-  if (ConstantInt *CI = dyn_cast<ConstantInt>(OtherVal)){\\n+  auto *CI = dyn_cast<ConstantInt>(OtherVal);\\n+  if (CI && CI->getValue().getActiveBits() <= 64) {\\n     IsOneZero = InitVal->isNullValue() && CI->isOne();\\n \\n-    if (ConstantInt *CIInit = dyn_cast<ConstantInt>(GV->getInitializer())){\\n+    auto *CIInit = dyn_cast<ConstantInt>(GV->getInitializer());\\n+    if (CIInit && CIInit->getValue().getActiveBits() <= 64) {\\n       uint64_t ValInit = CIInit->getZExtValue();\\n       uint64_t ValOther = CI->getZExtValue();\\n       uint64_t ValMinus = ValOther - ValInit;\"}, {\"sha\": \"7584554b9781484a670258e1c93bb0c833368ea8\", \"filename\": \"llvm/test/Transforms/GlobalOpt/large-int-crash.ll\", \"status\": \"added\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/991834a51616799456a5e65cefde2f41c350aca2/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Flarge-int-crash.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/991834a51616799456a5e65cefde2f41c350aca2/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Flarge-int-crash.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Flarge-int-crash.ll?ref=991834a51616799456a5e65cefde2f41c350aca2\", \"patch\": \"@@ -0,0 +1,23 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt < %s -globalopt -S | FileCheck %s\\n+\\n+@X = internal global i128 0\\n+\\n+define void @foo() {\\n+; CHECK-LABEL: @foo(\\n+; CHECK-NEXT:    [[T0_B:%.*]] = load i1, i1* @X\\n+; CHECK-NEXT:    [[T0:%.*]] = select i1 [[T0_B]], i128 18446744073709551616, i128 0\\n+; CHECK-NEXT:    ret void\\n+;\\n+  %t0 = load i128, i128* @X, align 8\\n+  ret void\\n+}\\n+\\n+define void @store() {\\n+; CHECK-LABEL: @store(\\n+; CHECK-NEXT:    store i1 true, i1* @X\\n+; CHECK-NEXT:    ret void\\n+;\\n+  store i128 18446744073709551616, i128* @X, align 8\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yNmIyYzExNDUxNWE4ZDAxMWE5NTJmZTQxNGFjOTI0MTcyOThlYTAwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/26b2c114515a8d011a952fe414ac92417298ea00", "content": "{\"sha\": \"26b2c114515a8d011a952fe414ac92417298ea00\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MjZiMmMxMTQ1MTVhOGQwMTFhOTUyZmU0MTRhYzkyNDE3Mjk4ZWEwMA==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-08-09T21:37:32Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-08-09T21:37:32Z\"}, \"message\": \"[DAGCombiner] exclude x*2.0 from normal negation profitability rules\\n\\nThis is the codegen part of fixing:\\nhttps://bugs.llvm.org/show_bug.cgi?id=32939\\n\\nEven with the optimal/canonical IR that is ideally created by D65954,\\nwe would reverse that transform in DAGCombiner and end up with the same\\nasm on AArch64 or x86.\\n\\nI see 2 options for trying to correct this:\\n\\n  1. Limit isNegatibleForFree() by special-casing the fmul pattern (this patch).\\n  2. Avoid creating (fmul X, 2.0) in the 1st place by adding a special-case\\n     transform to SelectionDAG::getNode() and/or SelectionDAGBuilder::visitFMul()\\n     that matches the transform done by DAGCombiner.\\n\\nThis seems like the less intrusive patch, but if there's some other reason to\\nprefer 1 option over the other, we can change to the other option.\\n\\nDifferential Revision: https://reviews.llvm.org/D66016\\n\\nllvm-svn: 368490\", \"tree\": {\"sha\": \"cd545bd820a14edad8ae3414cca1c4c60cbda948\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/cd545bd820a14edad8ae3414cca1c4c60cbda948\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/26b2c114515a8d011a952fe414ac92417298ea00\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/26b2c114515a8d011a952fe414ac92417298ea00\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/26b2c114515a8d011a952fe414ac92417298ea00\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/26b2c114515a8d011a952fe414ac92417298ea00/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0a317df59f2392a2f1ba84e5def398e109d2e47f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0a317df59f2392a2f1ba84e5def398e109d2e47f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0a317df59f2392a2f1ba84e5def398e109d2e47f\"}], \"stats\": {\"total\": 23, \"additions\": 13, \"deletions\": 10}, \"files\": [{\"sha\": \"d9a77899ca32b8bfbe96397027005a08bc0aab83\", \"filename\": \"llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp?ref=26b2c114515a8d011a952fe414ac92417298ea00\", \"patch\": \"@@ -868,6 +868,11 @@ static char isNegatibleForFree(SDValue Op, bool LegalOperations,\\n                                     Options, ForCodeSize, Depth + 1))\\n       return V;\\n \\n+    // Ignore X * 2.0 because that is expected to be canonicalized to X + X.\\n+    if (auto *C = isConstOrConstSplatFP(Op.getOperand(1)))\\n+      if (C->isExactlyValue(2.0) && Op.getOpcode() == ISD::FMUL)\\n+        return 0;\\n+\\n     return isNegatibleForFree(Op.getOperand(1), LegalOperations, TLI, Options,\\n                               ForCodeSize, Depth + 1);\\n \"}, {\"sha\": \"640c1a1004627abdf0394afa412b6ccfad9ac7f9\", \"filename\": \"llvm/test/CodeGen/AArch64/fadd-combines.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 6, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Ftest%2FCodeGen%2FAArch64%2Ffadd-combines.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Ftest%2FCodeGen%2FAArch64%2Ffadd-combines.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Ffadd-combines.ll?ref=26b2c114515a8d011a952fe414ac92417298ea00\", \"patch\": \"@@ -169,10 +169,9 @@ define float @fadd_const_multiuse_attr(float %x) {\\n define double @fmul2_negated(double %a, double %b, double %c) {\\n ; CHECK-LABEL: fmul2_negated:\\n ; CHECK:       // %bb.0:\\n-; CHECK-NEXT:    fmov d3, #-2.00000000\\n-; CHECK-NEXT:    fmul d1, d1, d3\\n+; CHECK-NEXT:    fadd d1, d1, d1\\n ; CHECK-NEXT:    fmul d1, d1, d2\\n-; CHECK-NEXT:    fadd d0, d0, d1\\n+; CHECK-NEXT:    fsub d0, d0, d1\\n ; CHECK-NEXT:    ret\\n   %mul = fmul double %b, 2.0\\n   %mul1 = fmul double %mul, %c\\n@@ -183,10 +182,9 @@ define double @fmul2_negated(double %a, double %b, double %c) {\\n define <2 x double> @fmul2_negated_vec(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\\n ; CHECK-LABEL: fmul2_negated_vec:\\n ; CHECK:       // %bb.0:\\n-; CHECK-NEXT:    fmov v3.2d, #-2.00000000\\n-; CHECK-NEXT:    fmul v1.2d, v1.2d, v3.2d\\n+; CHECK-NEXT:    fadd v1.2d, v1.2d, v1.2d\\n ; CHECK-NEXT:    fmul v1.2d, v1.2d, v2.2d\\n-; CHECK-NEXT:    fadd v0.2d, v0.2d, v1.2d\\n+; CHECK-NEXT:    fsub v0.2d, v0.2d, v1.2d\\n ; CHECK-NEXT:    ret\\n   %mul = fmul <2 x double> %b, <double 2.0, double 2.0>\\n   %mul1 = fmul <2 x double> %mul, %c\"}, {\"sha\": \"048e5c5d325e2f563b00d7b3f881fb2275293181\", \"filename\": \"llvm/test/CodeGen/X86/fadd-combines.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Ftest%2FCodeGen%2FX86%2Ffadd-combines.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/26b2c114515a8d011a952fe414ac92417298ea00/llvm%2Ftest%2FCodeGen%2FX86%2Ffadd-combines.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffadd-combines.ll?ref=26b2c114515a8d011a952fe414ac92417298ea00\", \"patch\": \"@@ -252,9 +252,9 @@ define float @fadd_const_multiuse_attr(float %x) #0 {\\n define double @fmul2_negated(double %a, double %b, double %c) {\\n ; CHECK-LABEL: fmul2_negated:\\n ; CHECK:       # %bb.0:\\n-; CHECK-NEXT:    mulsd {{.*}}(%rip), %xmm1\\n+; CHECK-NEXT:    addsd %xmm1, %xmm1\\n ; CHECK-NEXT:    mulsd %xmm2, %xmm1\\n-; CHECK-NEXT:    addsd %xmm1, %xmm0\\n+; CHECK-NEXT:    subsd %xmm1, %xmm0\\n ; CHECK-NEXT:    retq\\n   %mul = fmul double %b, 2.0\\n   %mul1 = fmul double %mul, %c\\n@@ -265,9 +265,9 @@ define double @fmul2_negated(double %a, double %b, double %c) {\\n define <2 x double> @fmul2_negated_vec(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\\n ; CHECK-LABEL: fmul2_negated_vec:\\n ; CHECK:       # %bb.0:\\n-; CHECK-NEXT:    mulpd {{.*}}(%rip), %xmm1\\n+; CHECK-NEXT:    addpd %xmm1, %xmm1\\n ; CHECK-NEXT:    mulpd %xmm2, %xmm1\\n-; CHECK-NEXT:    addpd %xmm1, %xmm0\\n+; CHECK-NEXT:    subpd %xmm1, %xmm0\\n ; CHECK-NEXT:    retq\\n   %mul = fmul <2 x double> %b, <double 2.0, double 2.0>\\n   %mul1 = fmul <2 x double> %mul, %c\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wMzZlNjM2YWE3ZmM2ZDM2N2FjMTkxOTc5MzZmMzMyMGYyODIxNGIwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/036e636aa7fc6d367ac19197936f3320f28214b0", "content": "{\"sha\": \"036e636aa7fc6d367ac19197936f3320f28214b0\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDM2ZTYzNmFhN2ZjNmQzNjdhYzE5MTk3OTM2ZjMzMjBmMjgyMTRiMA==\", \"commit\": {\"author\": {\"name\": \"Serguei Katkov\", \"email\": \"serguei.katkov@azul.com\", \"date\": \"2019-08-22T10:06:46Z\"}, \"committer\": {\"name\": \"Serguei Katkov\", \"email\": \"serguei.katkov@azul.com\", \"date\": \"2019-08-22T10:06:46Z\"}, \"message\": \"[Loop Peeling] Fix silly bug in metadata update.\\n\\nWe must update loop metedata before we moved to parent loop if\\nit is present.\\n\\nllvm-svn: 369637\", \"tree\": {\"sha\": \"8348f329b6b0433ba45f5716b6ce1773e597c922\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/8348f329b6b0433ba45f5716b6ce1773e597c922\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/036e636aa7fc6d367ac19197936f3320f28214b0\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/036e636aa7fc6d367ac19197936f3320f28214b0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/036e636aa7fc6d367ac19197936f3320f28214b0\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/036e636aa7fc6d367ac19197936f3320f28214b0/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"cd53ff6c0df5f75c4c15abffa18755a8768fc6b3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cd53ff6c0df5f75c4c15abffa18755a8768fc6b3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cd53ff6c0df5f75c4c15abffa18755a8768fc6b3\"}], \"stats\": {\"total\": 62, \"additions\": 56, \"deletions\": 6}, \"files\": [{\"sha\": \"58e42074f963019be870bfb20ae31cea90627e47\", \"filename\": \"llvm/lib/Transforms/Utils/LoopUnrollPeel.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 6, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/036e636aa7fc6d367ac19197936f3320f28214b0/llvm%2Flib%2FTransforms%2FUtils%2FLoopUnrollPeel.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/036e636aa7fc6d367ac19197936f3320f28214b0/llvm%2Flib%2FTransforms%2FUtils%2FLoopUnrollPeel.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FLoopUnrollPeel.cpp?ref=036e636aa7fc6d367ac19197936f3320f28214b0\", \"patch\": \"@@ -741,6 +741,12 @@ bool llvm::peelLoop(Loop *L, unsigned PeelCount, LoopInfo *LI,\\n \\n   fixupBranchWeights(Header, LatchBR, ExitWeight, FallThroughWeight);\\n \\n+  // Update Metadata for count of peeled off iterations.\\n+  unsigned AlreadyPeeled = 0;\\n+  if (auto Peeled = getOptionalIntLoopAttribute(L, PeeledCountMetaData))\\n+    AlreadyPeeled = *Peeled;\\n+  addStringMetadataToLoop(L, PeeledCountMetaData, AlreadyPeeled + PeelCount);\\n+\\n   if (Loop *ParentLoop = L->getParentLoop())\\n     L = ParentLoop;\\n \\n@@ -755,11 +761,5 @@ bool llvm::peelLoop(Loop *L, unsigned PeelCount, LoopInfo *LI,\\n \\n   NumPeeled++;\\n \\n-  // Update Metadata for count of peeled off iterations.\\n-  unsigned AlreadyPeeled = 0;\\n-  if (auto Peeled = getOptionalIntLoopAttribute(L, PeeledCountMetaData))\\n-    AlreadyPeeled = *Peeled;\\n-  addStringMetadataToLoop(L, PeeledCountMetaData, AlreadyPeeled + PeelCount);\\n-\\n   return true;\\n }\"}, {\"sha\": \"a83f3bfb93586b4876caaf48326ac5c37b7b6758\", \"filename\": \"llvm/test/Transforms/LoopUnroll/peel-loop-inner.ll\", \"status\": \"added\", \"additions\": 50, \"deletions\": 0, \"changes\": 50, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/036e636aa7fc6d367ac19197936f3320f28214b0/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-inner.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/036e636aa7fc6d367ac19197936f3320f28214b0/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-inner.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-inner.ll?ref=036e636aa7fc6d367ac19197936f3320f28214b0\", \"patch\": \"@@ -0,0 +1,50 @@\\n+; RUN: opt < %s -S -passes='require<opt-remark-emit>,unroll<peeling;no-runtime>,simplify-cfg,instcombine' -unroll-force-peel-count=3 -verify-dom-info | FileCheck %s\\n+\\n+define void @basic(i32 %K, i32 %N) {\\n+; CHECK-LABEL: @basic(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br label [[OUTER:%.*]]\\n+; CHECK:       outer:\\n+; CHECK-NEXT:    [[I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[I_INC:%.*]], [[OUTER_BACKEDGE:%.*]] ]\\n+; CHECK-NEXT:    [[CMP_INNER_PEEL:%.*]] = icmp sgt i32 [[K:%.*]], 1\\n+; CHECK-NEXT:    br i1 [[CMP_INNER_PEEL]], label [[INNER_PEEL2:%.*]], label [[OUTER_BACKEDGE]]\\n+; CHECK:       inner.peel2:\\n+; CHECK-NEXT:    [[CMP_INNER_PEEL4:%.*]] = icmp eq i32 [[K]], 2\\n+; CHECK-NEXT:    br i1 [[CMP_INNER_PEEL4]], label [[OUTER_BACKEDGE]], label [[INNER_PEEL6:%.*]]\\n+; CHECK:       inner.peel6:\\n+; CHECK-NEXT:    [[CMP_INNER_PEEL8:%.*]] = icmp sgt i32 [[K]], 3\\n+; CHECK-NEXT:    br i1 [[CMP_INNER_PEEL8]], label [[INNER:%.*]], label [[OUTER_BACKEDGE]]\\n+; CHECK:       inner:\\n+; CHECK-NEXT:    [[J:%.*]] = phi i32 [ [[J_INC:%.*]], [[INNER]] ], [ 3, [[INNER_PEEL6]] ]\\n+; CHECK-NEXT:    [[J_INC]] = add nuw nsw i32 [[J]], 1\\n+; CHECK-NEXT:    [[CMP_INNER:%.*]] = icmp slt i32 [[J_INC]], [[K]]\\n+; CHECK-NEXT:    br i1 [[CMP_INNER]], label [[INNER]], label [[OUTER_BACKEDGE]], !llvm.loop !0\\n+; CHECK:       outer.backedge:\\n+; CHECK-NEXT:    [[I_INC]] = add i32 [[I]], 1\\n+; CHECK-NEXT:    [[CMP_OUTER:%.*]] = icmp slt i32 [[I_INC]], [[N:%.*]]\\n+; CHECK-NOT:    !llvm.loop\\n+; CHECK:       end:\\n+;\\n+entry:\\n+  br label %outer\\n+\\n+outer:\\n+  %i = phi i32 [ 0, %entry ], [ %i.inc, %outer.backedge ]\\n+  br label %inner\\n+\\n+inner:\\n+  %j = phi i32 [ 0, %outer ], [ %j.inc, %inner ]\\n+  %j.inc = add i32 %j, 1\\n+  %cmp.inner = icmp slt i32 %j.inc, %K\\n+  br i1 %cmp.inner, label %inner, label %outer.backedge, !llvm.loop !1\\n+\\n+outer.backedge:\\n+  %i.inc = add i32 %i, 1\\n+  %cmp.outer = icmp slt i32 %i.inc, %N\\n+  br i1 %cmp.outer, label %outer, label %end\\n+\\n+end:\\n+  ret void\\n+}\\n+\\n+!1 = distinct !{!1}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iNmEwZmFhYTBjNzkzYWVkZTc5MTFiZTI0MWIxODk1YTllYmVhNDFjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/b6a0faaa0c793aede7911be241b1895a9ebea41c", "content": "{\"sha\": \"b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YjZhMGZhYWEwYzc5M2FlZGU3OTExYmUyNDFiMTg5NWE5ZWJlYTQxYw==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-09-15T13:03:24Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2019-09-15T13:03:24Z\"}, \"message\": \"[SLP] limit vectorization of Constant subclasses (PR33958)\\n\\nThis is a fix for:\\nhttps://bugs.llvm.org/show_bug.cgi?id=33958\\n\\nIt seems universally true that we would not want to transform this kind of\\nsequence on any target, but if that's not correct, then we could view this\\nas a target-specific cost model problem. We could also white-list ConstantInt,\\nConstantFP, etc. rather than blacklist Global and ConstantExpr.\\n\\nDifferential Revision: https://reviews.llvm.org/D67362\\n\\nllvm-svn: 371931\", \"tree\": {\"sha\": \"21064ece4fbec3859baa8ba07b9842a7f59cc0e8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/21064ece4fbec3859baa8ba07b9842a7f59cc0e8\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b6a0faaa0c793aede7911be241b1895a9ebea41c/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"06b309d5274951a9c3c37598afece51b3948e2a4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/06b309d5274951a9c3c37598afece51b3948e2a4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/06b309d5274951a9c3c37598afece51b3948e2a4\"}], \"stats\": {\"total\": 22, \"additions\": 14, \"deletions\": 8}, \"files\": [{\"sha\": \"c18972c5201daf640085750a398e4241f7bd08b7\", \"filename\": \"llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b6a0faaa0c793aede7911be241b1895a9ebea41c/llvm%2Flib%2FTransforms%2FVectorize%2FSLPVectorizer.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b6a0faaa0c793aede7911be241b1895a9ebea41c/llvm%2Flib%2FTransforms%2FVectorize%2FSLPVectorizer.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FVectorize%2FSLPVectorizer.cpp?ref=b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"patch\": \"@@ -194,10 +194,13 @@ static bool allSameBlock(ArrayRef<Value *> VL) {\\n   return true;\\n }\\n \\n-/// \\\\returns True if all of the values in \\\\p VL are constants.\\n+/// \\\\returns True if all of the values in \\\\p VL are constants (but not\\n+/// globals/constant expressions).\\n static bool allConstant(ArrayRef<Value *> VL) {\\n+  // Constant expressions and globals can't be vectorized like normal integer/FP\\n+  // constants.\\n   for (Value *i : VL)\\n-    if (!isa<Constant>(i))\\n+    if (!isa<Constant>(i) || isa<ConstantExpr>(i) || isa<GlobalValue>(i))\\n       return false;\\n   return true;\\n }\"}, {\"sha\": \"56a70637013e5423b139fe22d128f484e2d101ee\", \"filename\": \"llvm/test/Transforms/SLPVectorizer/X86/consecutive-access.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 6, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b6a0faaa0c793aede7911be241b1895a9ebea41c/llvm%2Ftest%2FTransforms%2FSLPVectorizer%2FX86%2Fconsecutive-access.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b6a0faaa0c793aede7911be241b1895a9ebea41c/llvm%2Ftest%2FTransforms%2FSLPVectorizer%2FX86%2Fconsecutive-access.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSLPVectorizer%2FX86%2Fconsecutive-access.ll?ref=b6a0faaa0c793aede7911be241b1895a9ebea41c\", \"patch\": \"@@ -549,14 +549,17 @@ for.body:                                         ; preds = %entry, %for.body\\n   br i1 %cmp, label %for.body, label %for.cond.cleanup\\n }\\n \\n+; Globals/constant expressions are not normal constants.\\n+; They should not be treated as the usual vectorization candidates.\\n+\\n @g1 = external global i32, align 4\\n @g2 = external global i32, align 4\\n \\n define void @PR33958(i32** nocapture %p) {\\n ; CHECK-LABEL: @PR33958(\\n-; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32*, i32** [[P:%.*]], i64 1\\n-; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i32** [[P]] to <2 x i32*>*\\n-; CHECK-NEXT:    store <2 x i32*> <i32* @g1, i32* @g2>, <2 x i32*>* [[TMP1]], align 8\\n+; CHECK-NEXT:    store i32* @g1, i32** [[P:%.*]], align 8\\n+; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32*, i32** [[P]], i64 1\\n+; CHECK-NEXT:    store i32* @g2, i32** [[ARRAYIDX1]], align 8\\n ; CHECK-NEXT:    ret void\\n ;\\n   store i32* @g1, i32** %p, align 8\\n@@ -567,9 +570,9 @@ define void @PR33958(i32** nocapture %p) {\\n \\n define void @store_constant_expression(i64* %p) {\\n ; CHECK-LABEL: @store_constant_expression(\\n-; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, i64* [[P:%.*]], i64 1\\n-; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64* [[P]] to <2 x i64>*\\n-; CHECK-NEXT:    store <2 x i64> <i64 ptrtoint (i32* @g1 to i64), i64 ptrtoint (i32* @g2 to i64)>, <2 x i64>* [[TMP1]], align 8\\n+; CHECK-NEXT:    store i64 ptrtoint (i32* @g1 to i64), i64* [[P:%.*]], align 8\\n+; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, i64* [[P]], i64 1\\n+; CHECK-NEXT:    store i64 ptrtoint (i32* @g2 to i64), i64* [[ARRAYIDX1]], align 8\\n ; CHECK-NEXT:    ret void\\n ;\\n   store i64 ptrtoint (i32* @g1 to i64), i64* %p, align 8\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yZjMyZTVkODRkMzQ4M2EwZDYxNzBmYzYxZDJjY2ViNDlmYzkzMGEzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3", "content": "{\"sha\": \"2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MmYzMmU1ZDg0ZDM0ODNhMGQ2MTcwZmM2MWQyY2NlYjQ5ZmM5MzBhMw==\", \"commit\": {\"author\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2019-09-20T23:29:17Z\"}, \"committer\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2019-09-20T23:29:17Z\"}, \"message\": \"[Inliner] Remove incorrect early exit during switch cost computation\\n\\nSummary:\\nThe CallAnalyzer::visitSwitchInst has an early exit when the estimated\\nlower bound of the switch cost will put the overall cost of the inline\\nabove the threshold. However, this code is not correctly estimating the\\nlower bound for switches that can be transformed into bit tests, leading\\nto unnecessary lost inlines, and also differing behavior with\\noptimization remarks enabled.\\n\\nFirst, the early exit is controlled by whether ComputeFullInlineCost is\\nenabled or not, and that in turn is disabled by default but enabled when\\nenabling -pass-remarks=missed. This by itself wouldn't lead to a\\nproblem, except that as described below, the lower bound can be above\\nthe real lower bound, so we can sometimes get different inline decisions\\nwith inline remarks enabled, which is problematic.\\n\\nThe early exit was added in along with a new switch cost model in D31085.\\nThe reason why this early exit was added is due to a concern one reviewer\\nraised about compile time for large switches:\\nhttps://reviews.llvm.org/D31085?id=94559#inline-276200\\n\\nHowever, the code just below there calls\\ngetEstimatedNumberOfCaseClusters, which in turn immediately calls\\nBasicTTIImpl getEstimatedNumberOfCaseClusters, which in the worst case\\ndoes a linear scan of the cases to get the high and low values. The\\nbit test handling in particular is guarded by whether the number of\\ncases fits into the max bit width. There is no suggestion that anyone\\nmeasured a compile time issue, it appears to be theoretical.\\n\\nThe problem is that the reviewer's comment about the lower bound\\ncalculation is incorrect, specifically in the case of a switch that can\\nbe lowered to a bit test. This isn't followed up on the comment\\nthread, but the author does add a FIXME to that effect above the early\\nexit added when they subsequently revised the patch.\\n\\nAs a result, we were incorrectly early exiting and not inlining\\nfunctions with switch statements that would be lowered to bit tests in\\ncases where we were nearing the threshold. Combined with the fact that\\nthis early exit was skipped with opt remarks enabled, this caused\\ndifferent inlining decisions to be made when -pass-remarks=missed is\\nenabled to debug the missing inline.\\n\\nRemove the early exit for the above reasons.\\n\\nI also copied over an existing AArch64 inlining test to X86, and\\nadjusted the threshold so that the bit test inline only occurs with the\\nfix in this patch.\\n\\nReviewers: davidxl\\n\\nSubscribers: eraman, kristof.beyls, haicheng, llvm-commits\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D67716\\n\\nllvm-svn: 372440\", \"tree\": {\"sha\": \"0b20526873f0ec547a34fc00986a23e602def09a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/0b20526873f0ec547a34fc00986a23e602def09a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3/comments\", \"author\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f118852046a1d255ed8c65c6b5db320e8cea53a0\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f118852046a1d255ed8c65c6b5db320e8cea53a0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f118852046a1d255ed8c65c6b5db320e8cea53a0\"}], \"stats\": {\"total\": 173, \"additions\": 160, \"deletions\": 13}, \"files\": [{\"sha\": \"57dee459fc2cbe12ba11bd564ad59e8f1e4e9431\", \"filename\": \"llvm/lib/Analysis/InlineCost.cpp\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 13, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3/llvm%2Flib%2FAnalysis%2FInlineCost.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3/llvm%2Flib%2FAnalysis%2FInlineCost.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FInlineCost.cpp?ref=2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"patch\": \"@@ -1453,19 +1453,6 @@ bool CallAnalyzer::visitSwitchInst(SwitchInst &SI) {\\n   // Maximum valid cost increased in this function.\\n   int CostUpperBound = INT_MAX - InlineConstants::InstrCost - 1;\\n \\n-  // Exit early for a large switch, assuming one case needs at least one\\n-  // instruction.\\n-  // FIXME: This is not true for a bit test, but ignore such case for now to\\n-  // save compile-time.\\n-  int64_t CostLowerBound =\\n-      std::min((int64_t)CostUpperBound,\\n-               (int64_t)SI.getNumCases() * InlineConstants::InstrCost + Cost);\\n-\\n-  if (CostLowerBound > Threshold && !ComputeFullInlineCost) {\\n-    addCost((int64_t)SI.getNumCases() * InlineConstants::InstrCost);\\n-    return false;\\n-  }\\n-\\n   unsigned JumpTableSize = 0;\\n   unsigned NumCaseCluster =\\n       TTI.getEstimatedNumberOfCaseClusters(SI, JumpTableSize);\"}, {\"sha\": \"5565c7aba5036b30c6ec0c4b5e18d884e1265731\", \"filename\": \"llvm/test/Transforms/Inline/X86/switch.ll\", \"status\": \"added\", \"additions\": 160, \"deletions\": 0, \"changes\": 160, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3/llvm%2Ftest%2FTransforms%2FInline%2FX86%2Fswitch.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2f32e5d84d3483a0d6170fc61d2cceb49fc930a3/llvm%2Ftest%2FTransforms%2FInline%2FX86%2Fswitch.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInline%2FX86%2Fswitch.ll?ref=2f32e5d84d3483a0d6170fc61d2cceb49fc930a3\", \"patch\": \"@@ -0,0 +1,160 @@\\n+; RUN: opt < %s -inline -inline-threshold=1 -S -mtriple=x86_64-unknown-linux-gnu  | FileCheck %s\\n+; RUN: opt < %s -passes='cgscc(inline)' -inline-threshold=1 -S -mtriple=x86_64-unknown-linux-gnu | FileCheck %s\\n+\\n+define i32 @callee_range(i32 %a, i32* %P) {\\n+  switch i32 %a, label %sw.default [\\n+    i32 0, label %sw.bb0\\n+    i32 1000, label %sw.bb1\\n+    i32 2000, label %sw.bb1\\n+    i32 3000, label %sw.bb1\\n+    i32 4000, label %sw.bb1\\n+    i32 5000, label %sw.bb1\\n+    i32 6000, label %sw.bb1\\n+    i32 7000, label %sw.bb1\\n+    i32 8000, label %sw.bb1\\n+    i32 9000, label %sw.bb1\\n+  ]\\n+\\n+sw.default:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+sw.bb0:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+sw.bb1:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+return:\\n+  ret i32 42\\n+}\\n+\\n+define i32 @caller_range(i32 %a, i32* %P) {\\n+; CHECK-LABEL: @caller_range(\\n+; CHECK: call i32 @callee_range\\n+  %r = call i32 @callee_range(i32 %a, i32* %P)\\n+  ret i32 %r\\n+}\\n+\\n+define i32 @callee_bittest(i32 %a, i32* %P) {\\n+  switch i32 %a, label %sw.default [\\n+    i32 0, label %sw.bb0\\n+    i32 1, label %sw.bb1\\n+    i32 2, label %sw.bb2\\n+    i32 3, label %sw.bb0\\n+    i32 4, label %sw.bb1\\n+    i32 5, label %sw.bb2\\n+    i32 6, label %sw.bb0\\n+    i32 7, label %sw.bb1\\n+    i32 8, label %sw.bb2\\n+  ]\\n+\\n+sw.default:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb0:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb1:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb2:\\n+  br label %return\\n+\\n+return:\\n+  ret i32 42\\n+}\\n+\\n+\\n+define i32 @caller_bittest(i32 %a, i32* %P) {\\n+; CHECK-LABEL: @caller_bittest(\\n+; CHECK-NOT: call i32 @callee_bittest\\n+  %r= call i32 @callee_bittest(i32 %a, i32* %P)\\n+  ret i32 %r\\n+}\\n+\\n+define i32 @callee_jumptable(i32 %a, i32* %P) {\\n+  switch i32 %a, label %sw.default [\\n+    i32 1001, label %sw.bb101\\n+    i32 1002, label %sw.bb102\\n+    i32 1003, label %sw.bb103\\n+    i32 1004, label %sw.bb104\\n+    i32 1005, label %sw.bb101\\n+    i32 1006, label %sw.bb102\\n+    i32 1007, label %sw.bb103\\n+    i32 1008, label %sw.bb104\\n+    i32 1009, label %sw.bb101\\n+    i32 1010, label %sw.bb102\\n+    i32 1011, label %sw.bb103\\n+    i32 1012, label %sw.bb104\\n+ ]\\n+\\n+sw.default:\\n+  br label %return\\n+\\n+sw.bb101:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb102:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb103:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+sw.bb104:\\n+  store volatile i32 %a, i32* %P\\n+  br label %return\\n+\\n+return:\\n+  ret i32 42\\n+}\\n+\\n+define i32 @caller_jumptable(i32 %a, i32 %b, i32* %P) {\\n+; CHECK-LABEL: @caller_jumptable(\\n+; CHECK: call i32 @callee_jumptable\\n+  %r = call i32 @callee_jumptable(i32 %b, i32* %P)\\n+  ret i32 %r\\n+}\\n+\\n+\\n+define internal i32 @callee_negativeCost(i32 %t)  {\\n+entry:\\n+  switch i32 %t, label %sw.default [\\n+    i32 1, label %sw.bb\\n+    i32 0, label %sw.bb1\\n+    i32 42, label %sw.bb2\\n+    i32 43, label %sw.bb3\\n+  ]\\n+\\n+sw.bb:                                            ; preds = %entry\\n+  br label %cleanup\\n+\\n+sw.bb1:                                           ; preds = %entry\\n+  br label %cleanup\\n+\\n+sw.bb2:                                           ; preds = %entry\\n+  br label %cleanup\\n+\\n+sw.bb3:                                           ; preds = %entry\\n+  br label %cleanup\\n+\\n+sw.default:                                       ; preds = %entry\\n+  br label %cleanup\\n+\\n+cleanup:                                          ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb\\n+  %retval.0 = phi i32 [ 1, %sw.default ], [ 3, %sw.bb3 ], [ 2, %sw.bb2 ], [ 0, %sw.bb1 ], [ 0, %sw.bb ]\\n+  ret i32 %retval.0\\n+}\\n+\\n+define i32 @caller_negativeCost(i32 %t) {\\n+; CHECK-LABEL: @caller_negativeCost(\\n+; CHECK-NOT: call i32 @callee_negativeCost\\n+entry:\\n+  %call = call i32 @callee_negativeCost(i32 %t)\\n+  ret i32 %call\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kMzAwOTNiYjhhM2YxMmQzNWQxNzZhODVjZjkzZTM1NGEzOGZmMTE2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/d30093bb8a3f12d35d176a85cf93e354a38ff116", "content": "{\"sha\": \"d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZDMwMDkzYmI4YTNmMTJkMzVkMTc2YTg1Y2Y5M2UzNTRhMzhmZjExNg==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2019-09-29T15:25:24Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2019-09-29T15:25:24Z\"}, \"message\": \"[DivRemPairs] Don't assert that we won't ever get expanded-form rem pairs in different BB's (PR43500)\\n\\nIf we happen to have the same div in two basic blocks,\\nand in one of those we also happen to have the rem part,\\nwe'd match the div-rem pair, but the wrong ones.\\nSo let's drop overly-ambiguous assert.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=43500\\n\\nllvm-svn: 373167\", \"tree\": {\"sha\": \"d51f04707e7218e1e4df4b3d4aca883a85e7d467\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d51f04707e7218e1e4df4b3d4aca883a85e7d467\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d30093bb8a3f12d35d176a85cf93e354a38ff116/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8b1eeafb91331c85570a172904460918c9785f29\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8b1eeafb91331c85570a172904460918c9785f29\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8b1eeafb91331c85570a172904460918c9785f29\"}], \"stats\": {\"total\": 38, \"additions\": 36, \"deletions\": 2}, \"files\": [{\"sha\": \"934853507478bb865cd6e32f019128f18edbc1ba\", \"filename\": \"llvm/lib/Transforms/Scalar/DivRemPairs.cpp\", \"status\": \"modified\", \"additions\": 0, \"deletions\": 2, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d30093bb8a3f12d35d176a85cf93e354a38ff116/llvm%2Flib%2FTransforms%2FScalar%2FDivRemPairs.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d30093bb8a3f12d35d176a85cf93e354a38ff116/llvm%2Flib%2FTransforms%2FScalar%2FDivRemPairs.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FDivRemPairs.cpp?ref=d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"patch\": \"@@ -233,8 +233,6 @@ static bool optimizeDivRem(Function &F, const TargetTransformInfo &TTI,\\n     if (!DivDominates && !DT.dominates(RemInst, DivInst)) {\\n       // We have matching div-rem pair, but they are in two different blocks,\\n       // neither of which dominates one another.\\n-      assert(!RemOriginallyWasInExpandedForm &&\\n-             \\\"Won't happen for expanded-form rem.\\\");\\n       // FIXME: We could hoist both ops to the common predecessor block?\\n       continue;\\n     }\"}, {\"sha\": \"7c43d87ffa591b06c2794dbc10f04c81c180e603\", \"filename\": \"llvm/test/Transforms/DivRemPairs/X86/div-expanded-rem-pair.ll\", \"status\": \"modified\", \"additions\": 36, \"deletions\": 0, \"changes\": 36, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d30093bb8a3f12d35d176a85cf93e354a38ff116/llvm%2Ftest%2FTransforms%2FDivRemPairs%2FX86%2Fdiv-expanded-rem-pair.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d30093bb8a3f12d35d176a85cf93e354a38ff116/llvm%2Ftest%2FTransforms%2FDivRemPairs%2FX86%2Fdiv-expanded-rem-pair.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDivRemPairs%2FX86%2Fdiv-expanded-rem-pair.ll?ref=d30093bb8a3f12d35d176a85cf93e354a38ff116\", \"patch\": \"@@ -168,3 +168,39 @@ end:\\n   %ret = phi i128 [ %rem, %if ], [ 3, %entry ]\\n   ret i128 %ret\\n }\\n+\\n+; Even in expanded form, we can end up with div and rem in different basic\\n+; blocks neither of which dominates each another.\\n+define i32 @can_have_divrem_in_mutually_nondominating_bbs(i1 %cmp, i32 %a, i32 %b) {\\n+; CHECK-LABEL: @can_have_divrem_in_mutually_nondominating_bbs(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br i1 [[CMP:%.*]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]\\n+; CHECK:       if.then:\\n+; CHECK-NEXT:    [[T0:%.*]] = udiv i32 [[A:%.*]], [[B:%.*]]\\n+; CHECK-NEXT:    [[T1:%.*]] = mul nuw i32 [[T0]], [[B]]\\n+; CHECK-NEXT:    [[T2_RECOMPOSED:%.*]] = urem i32 [[A]], [[B]]\\n+; CHECK-NEXT:    br label [[END:%.*]]\\n+; CHECK:       if.else:\\n+; CHECK-NEXT:    [[T3:%.*]] = udiv i32 [[A]], [[B]]\\n+; CHECK-NEXT:    br label [[END]]\\n+; CHECK:       end:\\n+; CHECK-NEXT:    [[RET:%.*]] = phi i32 [ [[T2_RECOMPOSED]], [[IF_THEN]] ], [ [[T3]], [[IF_ELSE]] ]\\n+; CHECK-NEXT:    ret i32 [[RET]]\\n+;\\n+entry:\\n+  br i1 %cmp, label %if.then, label %if.else\\n+\\n+if.then:\\n+  %t0 = udiv i32 %a, %b\\n+  %t1 = mul nuw i32 %t0, %b\\n+  %t2 = sub i32 %a, %t1\\n+  br label %end\\n+\\n+if.else:\\n+  %t3 = udiv i32 %a, %b\\n+  br label %end\\n+\\n+end:\\n+  %ret = phi i32 [ %t2, %if.then ], [ %t3, %if.else ]\\n+  ret i32 %ret\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84NTM1YmVkNzk1MDRmZmUzZWQ3ZjJkZThjMTU4YTE3ZTc5ZTU0NzM2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/8535bed79504ffe3ed7f2de8c158a17e79e54736", "content": "{\"sha\": \"8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ODUzNWJlZDc5NTA0ZmZlM2VkN2YyZGU4YzE1OGExN2U3OWU1NDczNg==\", \"commit\": {\"author\": {\"name\": \"David Stenberg\", \"email\": \"david.stenberg@ericsson.com\", \"date\": \"2019-10-14T12:49:58Z\"}, \"committer\": {\"name\": \"David Stenberg\", \"email\": \"david.stenberg@ericsson.com\", \"date\": \"2019-10-14T12:49:58Z\"}, \"message\": \"[DebugInfo] Fix truncation of call site immediates\\n\\nSummary:\\nThis addresses a bug in collectCallSiteParameters() where call site\\nimmediates would be truncated from int64_t to unsigned.\\n\\nThis fixes PR43525.\\n\\nReviewers: djtodoro, NikolaPrica, aprantl, vsk\\n\\nReviewed By: aprantl\\n\\nSubscribers: hiraditya, llvm-commits\\n\\nTags: #debug-info, #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D68869\\n\\nllvm-svn: 374770\", \"tree\": {\"sha\": \"e5727cd8d841caa68a0c1376b7301e92d9f81f30\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e5727cd8d841caa68a0c1376b7301e92d9f81f30\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8535bed79504ffe3ed7f2de8c158a17e79e54736/comments\", \"author\": {\"login\": \"dstenb\", \"id\": 832804, \"node_id\": \"MDQ6VXNlcjgzMjgwNA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/832804?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dstenb\", \"html_url\": \"https://github.com/dstenb\", \"followers_url\": \"https://api.github.com/users/dstenb/followers\", \"following_url\": \"https://api.github.com/users/dstenb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dstenb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dstenb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dstenb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dstenb/orgs\", \"repos_url\": \"https://api.github.com/users/dstenb/repos\", \"events_url\": \"https://api.github.com/users/dstenb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dstenb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"dstenb\", \"id\": 832804, \"node_id\": \"MDQ6VXNlcjgzMjgwNA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/832804?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dstenb\", \"html_url\": \"https://github.com/dstenb\", \"followers_url\": \"https://api.github.com/users/dstenb/followers\", \"following_url\": \"https://api.github.com/users/dstenb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dstenb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dstenb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dstenb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dstenb/orgs\", \"repos_url\": \"https://api.github.com/users/dstenb/repos\", \"events_url\": \"https://api.github.com/users/dstenb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dstenb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5a8db8496440b9d6ced91bd24f4b6b463acc7d55\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5a8db8496440b9d6ced91bd24f4b6b463acc7d55\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5a8db8496440b9d6ced91bd24f4b6b463acc7d55\"}], \"stats\": {\"total\": 58, \"additions\": 57, \"deletions\": 1}, \"files\": [{\"sha\": \"82c8b955e13e19702c2f9a61f6a9db27653c2fd2\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8535bed79504ffe3ed7f2de8c158a17e79e54736/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8535bed79504ffe3ed7f2de8c158a17e79e54736/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfDebug.cpp?ref=8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"patch\": \"@@ -620,7 +620,7 @@ static void collectCallSiteParameters(const MachineInstr *CallMI,\\n \\n     if (auto ParamValue = TII->describeLoadedValue(*I)) {\\n       if (ParamValue->first.isImm()) {\\n-        unsigned Val = ParamValue->first.getImm();\\n+        int64_t Val = ParamValue->first.getImm();\\n         DbgValueLoc DbgLocVal(ParamValue->second, Val);\\n         finishCallSiteParam(DbgLocVal, Reg);\\n       } else if (ParamValue->first.isReg()) {\"}, {\"sha\": \"b698f1cdbfe853b3a9972cacff948c0356abc46c\", \"filename\": \"llvm/test/DebugInfo/X86/dbgcall-site-64-bit-imms.ll\", \"status\": \"added\", \"additions\": 56, \"deletions\": 0, \"changes\": 56, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8535bed79504ffe3ed7f2de8c158a17e79e54736/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbgcall-site-64-bit-imms.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8535bed79504ffe3ed7f2de8c158a17e79e54736/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbgcall-site-64-bit-imms.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbgcall-site-64-bit-imms.ll?ref=8535bed79504ffe3ed7f2de8c158a17e79e54736\", \"patch\": \"@@ -0,0 +1,56 @@\\n+; RUN: llc -O1 -debug-entry-values -filetype=obj -o - %s | llvm-dwarfdump - | FileCheck %s\\n+\\n+; Verify that the 64-bit call site immediates are not truncated.\\n+;\\n+; Reproducer for PR43525.\\n+\\n+; Based on the following C program:\\n+;\\n+; #include <stdint.h>\\n+;\\n+; extern void foo(int64_t);\\n+;\\n+; int main() {\\n+;   foo(INT64_C(0x1122334455667788));\\n+;   foo(INT32_C(-100));\\n+; }\\n+\\n+; CHECK: DW_AT_GNU_call_site_value (DW_OP_constu 0x1122334455667788)\\n+; CHECK: DW_AT_GNU_call_site_value (DW_OP_constu 0xffffffffffffff9c)\\n+\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+; Function Attrs: nounwind uwtable\\n+define i32 @main() !dbg !12 {\\n+entry:\\n+  tail call void @foo(i64 1234605616436508552), !dbg !16\\n+  tail call void @foo(i64 -100), !dbg !17\\n+  ret i32 0, !dbg !18\\n+}\\n+\\n+declare !dbg !4 void @foo(i64)\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!8, !9, !10}\\n+!llvm.ident = !{!11}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: \\\"clang version 10.0.0\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"dbgcall-site-long-imms.c\\\", directory: \\\"/\\\")\\n+!2 = !{}\\n+!3 = !{!4}\\n+!4 = !DISubprogram(name: \\\"foo\\\", scope: !1, file: !1, line: 3, type: !5, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)\\n+!5 = !DISubroutineType(types: !6)\\n+!6 = !{null, !7}\\n+!7 = !DIBasicType(name: \\\"long int\\\", size: 64, encoding: DW_ATE_signed)\\n+!8 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+!9 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!10 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!11 = !{!\\\"clang version 10.0.0\\\"}\\n+!12 = distinct !DISubprogram(name: \\\"main\\\", scope: !1, file: !1, line: 5, type: !13, scopeLine: 5, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)\\n+!13 = !DISubroutineType(types: !14)\\n+!14 = !{!15}\\n+!15 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!16 = !DILocation(line: 6, scope: !12)\\n+!17 = !DILocation(line: 7, scope: !12)\\n+!18 = !DILocation(line: 8, scope: !12)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wN2QxNjQyNGYyODQ4MmE4NTJhMzViZDgxNzE4OWQ0ZGZiMTcwMWVmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/07d16424f28482a852a35bd817189d4dfb1701ef", "content": "{\"sha\": \"07d16424f28482a852a35bd817189d4dfb1701ef\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDdkMTY0MjRmMjg0ODJhODUyYTM1YmQ4MTcxODlkNGRmYjE3MDFlZg==\", \"commit\": {\"author\": {\"name\": \"Johannes Doerfert\", \"email\": \"johannes@jdoerfert.de\", \"date\": \"2019-11-02T04:03:35Z\"}, \"committer\": {\"name\": \"Johannes Doerfert\", \"email\": \"johannes@jdoerfert.de\", \"date\": \"2019-11-02T05:54:00Z\"}, \"message\": \"[Attributor][FIX] Do not try to cast if a cast is not required\\n\\nWhen we replace constant returns at the call site we did issue a cast in\\nthe hopes it would be a no-op if the types are equal. Turns out that is\\nnot the case and we have to check it ourselves first.\\n\\nReused an IPConstantProp test for coverage. No functional change to the\\ntest wrt. IPConstantProp.\", \"tree\": {\"sha\": \"ce6160d790cbb1e6c4bce583a6cc3a3ab4690213\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/ce6160d790cbb1e6c4bce583a6cc3a3ab4690213\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/07d16424f28482a852a35bd817189d4dfb1701ef\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/07d16424f28482a852a35bd817189d4dfb1701ef\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/07d16424f28482a852a35bd817189d4dfb1701ef\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/07d16424f28482a852a35bd817189d4dfb1701ef/comments\", \"author\": {\"login\": \"jdoerfert\", \"id\": 6248191, \"node_id\": \"MDQ6VXNlcjYyNDgxOTE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6248191?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jdoerfert\", \"html_url\": \"https://github.com/jdoerfert\", \"followers_url\": \"https://api.github.com/users/jdoerfert/followers\", \"following_url\": \"https://api.github.com/users/jdoerfert/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jdoerfert/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jdoerfert/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jdoerfert/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jdoerfert/orgs\", \"repos_url\": \"https://api.github.com/users/jdoerfert/repos\", \"events_url\": \"https://api.github.com/users/jdoerfert/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jdoerfert/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jdoerfert\", \"id\": 6248191, \"node_id\": \"MDQ6VXNlcjYyNDgxOTE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6248191?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jdoerfert\", \"html_url\": \"https://github.com/jdoerfert\", \"followers_url\": \"https://api.github.com/users/jdoerfert/followers\", \"following_url\": \"https://api.github.com/users/jdoerfert/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jdoerfert/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jdoerfert/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jdoerfert/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jdoerfert/orgs\", \"repos_url\": \"https://api.github.com/users/jdoerfert/repos\", \"events_url\": \"https://api.github.com/users/jdoerfert/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jdoerfert/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c7ab19dbb0f1f5c76ff70c7acab9f20c796cafb3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c7ab19dbb0f1f5c76ff70c7acab9f20c796cafb3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c7ab19dbb0f1f5c76ff70c7acab9f20c796cafb3\"}], \"stats\": {\"total\": 32, \"additions\": 21, \"deletions\": 11}, \"files\": [{\"sha\": \"5082aa26dba323a618766b36b313255949caea0a\", \"filename\": \"llvm/lib/Transforms/IPO/Attributor.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/07d16424f28482a852a35bd817189d4dfb1701ef/llvm%2Flib%2FTransforms%2FIPO%2FAttributor.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/07d16424f28482a852a35bd817189d4dfb1701ef/llvm%2Flib%2FTransforms%2FIPO%2FAttributor.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FAttributor.cpp?ref=07d16424f28482a852a35bd817189d4dfb1701ef\", \"patch\": \"@@ -998,14 +998,18 @@ ChangeStatus AAReturnedValuesImpl::manifest(Attributor &A) {\\n         if (CallBase *CB = dyn_cast<CallBase>(U.getUser()))\\n           if (CB->isCallee(&U)) {\\n             Constant *RVCCast =\\n-                ConstantExpr::getTruncOrBitCast(RVC, CB->getType());\\n+                CB->getType() == RVC->getType()\\n+                    ? RVC\\n+                    : ConstantExpr::getTruncOrBitCast(RVC, CB->getType());\\n             Changed = ReplaceCallSiteUsersWith(*CB, *RVCCast) | Changed;\\n           }\\n     } else {\\n       assert(isa<CallBase>(AnchorValue) &&\\n              \\\"Expcected a function or call base anchor!\\\");\\n       Constant *RVCCast =\\n-          ConstantExpr::getTruncOrBitCast(RVC, AnchorValue.getType());\\n+          AnchorValue.getType() == RVC->getType()\\n+              ? RVC\\n+              : ConstantExpr::getTruncOrBitCast(RVC, AnchorValue.getType());\\n       Changed = ReplaceCallSiteUsersWith(cast<CallBase>(AnchorValue), *RVCCast);\\n     }\\n     if (Changed == ChangeStatus::CHANGED)\"}, {\"sha\": \"b1a9760abad282a489b142085f9df5a36701a1c0\", \"filename\": \"llvm/test/Transforms/IPConstantProp/PR43857.ll\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 9, \"changes\": 24, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/07d16424f28482a852a35bd817189d4dfb1701ef/llvm%2Ftest%2FTransforms%2FIPConstantProp%2FPR43857.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/07d16424f28482a852a35bd817189d4dfb1701ef/llvm%2Ftest%2FTransforms%2FIPConstantProp%2FPR43857.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FIPConstantProp%2FPR43857.ll?ref=07d16424f28482a852a35bd817189d4dfb1701ef\", \"patch\": \"@@ -1,26 +1,32 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n-; RUN: opt < %s -S -ipconstprop | FileCheck %s\\n+; RUN: opt < %s -S -ipconstprop | FileCheck %s --check-prefixes=ALL,IPCP\\n+; RUN: opt -S -passes=attributor -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=1 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR\\n \\n %struct.wobble = type { i32 }\\n %struct.zot = type { %struct.wobble, %struct.wobble, %struct.wobble }\\n \\n declare dso_local fastcc float @bar(%struct.wobble* noalias, <8 x i32>) unnamed_addr\\n \\n define %struct.zot @widget(<8 x i32> %arg) local_unnamed_addr {\\n-; CHECK-LABEL: define {{[^@]+}}@widget(\\n-; CHECK-NEXT:  bb:\\n-; CHECK-NEXT:    ret [[STRUCT_ZOT:%.*]] undef\\n+; ALL-LABEL: @widget(\\n+; ALL-NEXT:  bb:\\n+; ALL-NEXT:    ret [[STRUCT_ZOT:%.*]] undef\\n ;\\n bb:\\n   ret %struct.zot undef\\n }\\n \\n define void @baz(<8 x i32> %arg) local_unnamed_addr {\\n-; CHECK-LABEL: define {{[^@]+}}@baz(\\n-; CHECK-NEXT:  bb:\\n-; CHECK-NEXT:    [[TMP:%.*]] = call [[STRUCT_ZOT:%.*]] @widget(<8 x i32> [[ARG:%.*]])\\n-; CHECK-NEXT:    [[TMP1:%.*]] = extractvalue [[STRUCT_ZOT]] %tmp, 0, 0\\n-; CHECK-NEXT:    ret void\\n+; IPCP-LABEL: @baz(\\n+; IPCP-NEXT:  bb:\\n+; IPCP-NEXT:    [[TMP:%.*]] = call [[STRUCT_ZOT:%.*]] @widget(<8 x i32> [[ARG:%.*]])\\n+; IPCP-NEXT:    [[TMP1:%.*]] = extractvalue [[STRUCT_ZOT]] %tmp, 0, 0\\n+; IPCP-NEXT:    ret void\\n+;\\n+; ATTRIBUTOR-LABEL: @baz(\\n+; ATTRIBUTOR-NEXT:  bb:\\n+; ATTRIBUTOR-NEXT:    [[TMP1:%.*]] = extractvalue [[STRUCT_ZOT:%.*]] undef, 0, 0\\n+; ATTRIBUTOR-NEXT:    ret void\\n ;\\n bb:\\n   %tmp = call %struct.zot @widget(<8 x i32> %arg)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84NzIzYjk1Y2VmYTRmMmE4OTFjMmI0OTZkY2E3OWYxNzM0Y2YxZDFjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/8723b95cefa4f2a891c2b496dca79f1734cf1d1c", "content": "{\"sha\": \"8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ODcyM2I5NWNlZmE0ZjJhODkxYzJiNDk2ZGNhNzlmMTczNGNmMWQxYw==\", \"commit\": {\"author\": {\"name\": \"Wang, Pengfei\", \"email\": \"pengfei.wang@intel.com\", \"date\": \"2019-11-14T07:12:07Z\"}, \"committer\": {\"name\": \"Wang, Pengfei\", \"email\": \"pengfei.wang@intel.com\", \"date\": \"2019-11-15T01:42:38Z\"}, \"message\": \"[WinEH] Fix the wrong alignment orientation during calculating EH frame.\\n\\nSummary: This is a bug fix for further issues in PR43585.\\n\\nReviewers: rnk, RKSimon, craig.topper, andrew.w.kaylor\\n\\nSubscribers: hiraditya, llvm-commits, annita.zhang\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D70224\", \"tree\": {\"sha\": \"c4441888a3e1db72e190a4e153259a569231aace\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/c4441888a3e1db72e190a4e153259a569231aace\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8723b95cefa4f2a891c2b496dca79f1734cf1d1c/comments\", \"author\": {\"login\": \"phoebewang\", \"id\": 5205802, \"node_id\": \"MDQ6VXNlcjUyMDU4MDI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/5205802?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phoebewang\", \"html_url\": \"https://github.com/phoebewang\", \"followers_url\": \"https://api.github.com/users/phoebewang/followers\", \"following_url\": \"https://api.github.com/users/phoebewang/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phoebewang/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phoebewang/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phoebewang/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phoebewang/orgs\", \"repos_url\": \"https://api.github.com/users/phoebewang/repos\", \"events_url\": \"https://api.github.com/users/phoebewang/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phoebewang/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"phoebewang\", \"id\": 5205802, \"node_id\": \"MDQ6VXNlcjUyMDU4MDI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/5205802?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phoebewang\", \"html_url\": \"https://github.com/phoebewang\", \"followers_url\": \"https://api.github.com/users/phoebewang/followers\", \"following_url\": \"https://api.github.com/users/phoebewang/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phoebewang/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phoebewang/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phoebewang/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phoebewang/orgs\", \"repos_url\": \"https://api.github.com/users/phoebewang/repos\", \"events_url\": \"https://api.github.com/users/phoebewang/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phoebewang/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"95c770fbfb14b07e1af7c2d427c16745617d9f1f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/95c770fbfb14b07e1af7c2d427c16745617d9f1f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/95c770fbfb14b07e1af7c2d427c16745617d9f1f\"}], \"stats\": {\"total\": 20, \"additions\": 10, \"deletions\": 10}, \"files\": [{\"sha\": \"3374cd054a6e136116888ae06c4c8ec8d294b3c8\", \"filename\": \"llvm/lib/Target/X86/X86FrameLowering.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8723b95cefa4f2a891c2b496dca79f1734cf1d1c/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8723b95cefa4f2a891c2b496dca79f1734cf1d1c/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86FrameLowering.cpp?ref=8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"patch\": \"@@ -1860,7 +1860,7 @@ int X86FrameLowering::getWin64EHFrameIndexRef(const MachineFunction &MF,\\n     return getFrameIndexReference(MF, FI, FrameReg);\\n \\n   FrameReg = TRI->getStackRegister();\\n-  return alignTo(MFI.getMaxCallFrameSize(), getStackAlignment()) + it->second;\\n+  return alignDown(MFI.getMaxCallFrameSize(), getStackAlignment()) + it->second;\\n }\\n \\n int X86FrameLowering::getFrameIndexReferenceSP(const MachineFunction &MF,\"}, {\"sha\": \"9aca63e703e334de549f76dbb127030930ec1f86\", \"filename\": \"llvm/test/CodeGen/X86/win64-funclet-savexmm.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 9, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8723b95cefa4f2a891c2b496dca79f1734cf1d1c/llvm%2Ftest%2FCodeGen%2FX86%2Fwin64-funclet-savexmm.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8723b95cefa4f2a891c2b496dca79f1734cf1d1c/llvm%2Ftest%2FCodeGen%2FX86%2Fwin64-funclet-savexmm.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fwin64-funclet-savexmm.ll?ref=8723b95cefa4f2a891c2b496dca79f1734cf1d1c\", \"patch\": \"@@ -85,17 +85,17 @@ try.cont:                                         ; preds = %catchret.dest, %inv\\n ; CHECK: subq    $88, %rsp\\n ; CHECK: .seh_stackalloc 88\\n ; CHECK: leaq    112(%rdx), %rbp\\n-; CHECK: vmovaps %xmm8, 48(%rsp)\\n-; CHECK: .seh_savexmm %xmm8, 48\\n-; CHECK: vmovaps %xmm7, 64(%rsp)\\n-; CHECK: .seh_savexmm %xmm7, 64\\n-; CHECK: vmovaps %xmm6, 80(%rsp)\\n-; CHECK: .seh_savexmm %xmm6, 80\\n+; CHECK: vmovaps %xmm8, 32(%rsp)\\n+; CHECK: .seh_savexmm %xmm8, 32\\n+; CHECK: vmovaps %xmm7, 48(%rsp)\\n+; CHECK: .seh_savexmm %xmm7, 48\\n+; CHECK: vmovaps %xmm6, 64(%rsp)\\n+; CHECK: .seh_savexmm %xmm6, 64\\n ; CHECK: .seh_endprologue\\n ; CHECK: movl   -{{[0-9]+}}(%rbp), %ecx\\n-; CHECK: vmovaps 80(%rsp), %xmm6\\n-; CHECK: vmovaps 64(%rsp), %xmm7\\n-; CHECK: vmovaps 48(%rsp), %xmm8\\n+; CHECK: vmovaps 64(%rsp), %xmm6\\n+; CHECK: vmovaps 48(%rsp), %xmm7\\n+; CHECK: vmovaps 32(%rsp), %xmm8\\n ; CHECK: leaq    .LBB0_1(%rip), %rax\\n ; CHECK: addq    $88, %rsp\\n ; CHECK: popq    %rbx\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xYTU4YmUyYWM1OGNhMDc4YzkxYzlkMTcwMDIyMGQ4ODA5MWIyNTZmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/1a58be2ac58ca078c91c9d1700220d88091b256f", "content": "{\"sha\": \"1a58be2ac58ca078c91c9d1700220d88091b256f\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MWE1OGJlMmFjNThjYTA3OGM5MWM5ZDE3MDAyMjBkODgwOTFiMjU2Zg==\", \"commit\": {\"author\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2019-11-22T16:21:47Z\"}, \"committer\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2019-11-22T16:21:48Z\"}, \"message\": \"[JumpThreading] Use profile data even with the new pass manager\\n\\nSummary:\\nWithout this patch, the jump threading pass ignores profiling data\\nwhenever we invoke the pass with the new pass manager.\\n\\nSpecifically, JumpThreadingPass::run calls runImpl with class variable\\nHasProfileData always set to false.  In turn, runImpl sets\\nHasProfileData to false again:\\n\\n  HasProfileData = HasProfileData_;\\n\\nIn the end, we don't use profiling data at all with the new pass\\nmanager.\\n\\nThis patch fixes the problem by passing F.hasProfileData() to runImpl.\\n\\nThe bug appears to have been introduced at:\\n\\n  https://reviews.llvm.org/D41461\\n\\nwhich removed local variable HasProfileData in JumpThreadingPass::run\\neven though there was one more use left in the same function.  As a\\nresult, the remaining use ended referring to the class variable\\ninstead.\\n\\nNote that F.hasProfileData is an extremely lightweight function, so I\\ndon't see the need to cache its result.  Once this patch is approved,\\nI'm planning to stop caching the result of F.hasProfileData in\\nrunOnFunction.\\n\\nReviewers: wmi, eli.friedman\\n\\nSubscribers: hiraditya, jfb, llvm-commits\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D70509\", \"tree\": {\"sha\": \"24acf714c4ebf5ba24c5842ec09dda40d6f8404a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/24acf714c4ebf5ba24c5842ec09dda40d6f8404a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/1a58be2ac58ca078c91c9d1700220d88091b256f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/1a58be2ac58ca078c91c9d1700220d88091b256f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/1a58be2ac58ca078c91c9d1700220d88091b256f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/1a58be2ac58ca078c91c9d1700220d88091b256f/comments\", \"author\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"77ad98c80881ba90bf18ec2780169c60e02c159b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/77ad98c80881ba90bf18ec2780169c60e02c159b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/77ad98c80881ba90bf18ec2780169c60e02c159b\"}], \"stats\": {\"total\": 3, \"additions\": 2, \"deletions\": 1}, \"files\": [{\"sha\": \"4250875dd8869fa9b11088528bde403549b71423\", \"filename\": \"llvm/lib/Transforms/Scalar/JumpThreading.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/1a58be2ac58ca078c91c9d1700220d88091b256f/llvm%2Flib%2FTransforms%2FScalar%2FJumpThreading.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/1a58be2ac58ca078c91c9d1700220d88091b256f/llvm%2Flib%2FTransforms%2FScalar%2FJumpThreading.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FJumpThreading.cpp?ref=1a58be2ac58ca078c91c9d1700220d88091b256f\", \"patch\": \"@@ -340,7 +340,7 @@ PreservedAnalyses JumpThreadingPass::run(Function &F,\\n     BFI.reset(new BlockFrequencyInfo(F, *BPI, LI));\\n   }\\n \\n-  bool Changed = runImpl(F, &TLI, &LVI, &AA, &DTU, HasProfileData,\\n+  bool Changed = runImpl(F, &TLI, &LVI, &AA, &DTU, F.hasProfileData(),\\n                          std::move(BFI), std::move(BPI));\\n \\n   if (!Changed)\"}, {\"sha\": \"e6a6093279de13a3259b94c5847091fe4764c429\", \"filename\": \"llvm/test/Transforms/JumpThreading/update-edge-weight.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/1a58be2ac58ca078c91c9d1700220d88091b256f/llvm%2Ftest%2FTransforms%2FJumpThreading%2Fupdate-edge-weight.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/1a58be2ac58ca078c91c9d1700220d88091b256f/llvm%2Ftest%2FTransforms%2FJumpThreading%2Fupdate-edge-weight.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FJumpThreading%2Fupdate-edge-weight.ll?ref=1a58be2ac58ca078c91c9d1700220d88091b256f\", \"patch\": \"@@ -1,4 +1,5 @@\\n ; RUN: opt -S -jump-threading %s | FileCheck %s\\n+; RUN: opt -S -passes=jump-threading %s | FileCheck %s\\n \\n ; Test if edge weights are properly updated after jump threading.\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wZjIyZTc4M2EwMzhiNjk4M2YwZmUxNjFlZWY2Y2YyYWRkM2E0MTU2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0f22e783a038b6983f0fe161eef6cf2add3a4156", "content": "{\"sha\": \"0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGYyMmU3ODNhMDM4YjY5ODNmMGZlMTYxZWVmNmNmMmFkZDNhNDE1Ng==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2019-12-02T14:34:55Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2019-12-02T15:06:15Z\"}, \"message\": \"[InstCombine] Revert rL341831: relax one-use check in foldICmpAddConstant() (PR44100)\\n\\nrL341831 moved one-use check higher up, restricting a few folds\\nthat produced a single instruction from two instructions to the case\\nwhere the inner instruction would go away.\\n\\nOriginal commit message:\\n> InstCombine: move hasOneUse check to the top of foldICmpAddConstant\\n>\\n> There were two combines not covered by the check before now,\\n> neither of which actually differed from normal in the benefit analysis.\\n>\\n> The most recent seems to be because it was just added at the top of the\\n> function (naturally). The older is from way back in 2008 (r46687)\\n> when we just didn't put those checks in so routinely, and has been\\n> diligently maintained since.\\n\\nFrom the commit message alone, there doesn't seem to be a\\ndeeper motivation, deeper problem that was trying to solve,\\nother than 'fixing the wrong one-use check'.\\n\\nAs i have briefly discusses in IRC with Tim, the original motivation\\ncan no longer be recovered, too much time has passed.\\n\\nHowever i believe that the original fold was doing the right thing,\\nwe should be performing such a transformation even if the inner `add`\\nwill not go away - that will still unchain the comparison from `add`,\\nit will no longer need to wait for `add` to compute.\\n\\nDoing so doesn't seem to break any particular idioms,\\nas least as far as i can see.\\n\\nReferences https://bugs.llvm.org/show_bug.cgi?id=44100\", \"tree\": {\"sha\": \"9209adbad59a7e9cb742283e2dacfb75a884eff8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9209adbad59a7e9cb742283e2dacfb75a884eff8\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAl3lKGcACgkQCDw+u0oW\\nieCdEw/9GS/9UC0lDKU3BfypPOx/5bV1WPxQpKj8zCh1uXXMEY0TihgF/Xnyl0UJ\\n9BE2OGob6gxgUcByg9TmLyga3ZWJlhzSxQyfhNq+UXYQZjCvWQQKjeJ07W66BtXx\\nMPX+kQusFInkWSDg3FGmnhvB9ruluxvTkcJoLd9Fg/CmMzA9s5lRL+z4Ee+Porty\\nzMBMQpdPjdxQAbITb/AK9/1uyuhqfR+qqTnxEbulcbFzp9vB3Q58XDUylMBBP7VW\\nqtAJEuiZjIqXidmX5hU/eyBOHEoO9IRXl8j9+jqG2olHs6X+0HGg2241e/JHMZ7A\\n0yGV9MWFdgX4JQmy2NeoDfthVuFbtjBj0vQrjILEf+GCa9mM6hlwQSEDM1oTn2uc\\n6q8M9laI6aW9Xr1E1wrwQeNvJcOK9LhxHKi4nCHt1bpr1ED40wjKLtKHwjR6k+Y/\\n/LcLPXImIWuXvthzY4ZmVMe77mhCVbzdo5MD3B5snPaZVpvRpGHEn8OAk/66R8qd\\nty1V87BEqc3ra4UHiQvTohCz9bAvyZSBL0VPyHYK7fAnu7lLeJQ9U38CKWZX6ON4\\nSrUACLqLKSSZtTxgm/4esoTAsvRoDx8+3IBmZMPXMWWbSSgB2ef59wzdMBI0MWUL\\nJ/yKYKg9It1yI09d+0p8WPbgTnw046Vgx3IAwocr/UqGO6Ku9CI=\\n=GMEc\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree 9209adbad59a7e9cb742283e2dacfb75a884eff8\\nparent 241cbf201a6f4b7658697e3c76fc6e741d049a01\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1575297295 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1575299175 +0300\\n\\n[InstCombine] Revert rL341831: relax one-use check in foldICmpAddConstant() (PR44100)\\n\\nrL341831 moved one-use check higher up, restricting a few folds\\nthat produced a single instruction from two instructions to the case\\nwhere the inner instruction would go away.\\n\\nOriginal commit message:\\n> InstCombine: move hasOneUse check to the top of foldICmpAddConstant\\n>\\n> There were two combines not covered by the check before now,\\n> neither of which actually differed from normal in the benefit analysis.\\n>\\n> The most recent seems to be because it was just added at the top of the\\n> function (naturally). The older is from way back in 2008 (r46687)\\n> when we just didn't put those checks in so routinely, and has been\\n> diligently maintained since.\\n\\nFrom the commit message alone, there doesn't seem to be a\\ndeeper motivation, deeper problem that was trying to solve,\\nother than 'fixing the wrong one-use check'.\\n\\nAs i have briefly discusses in IRC with Tim, the original motivation\\ncan no longer be recovered, too much time has passed.\\n\\nHowever i believe that the original fold was doing the right thing,\\nwe should be performing such a transformation even if the inner `add`\\nwill not go away - that will still unchain the comparison from `add`,\\nit will no longer need to wait for `add` to compute.\\n\\nDoing so doesn't seem to break any particular idioms,\\nas least as far as i can see.\\n\\nReferences https://bugs.llvm.org/show_bug.cgi?id=44100\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0f22e783a038b6983f0fe161eef6cf2add3a4156/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"241cbf201a6f4b7658697e3c76fc6e741d049a01\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/241cbf201a6f4b7658697e3c76fc6e741d049a01\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/241cbf201a6f4b7658697e3c76fc6e741d049a01\"}], \"stats\": {\"total\": 104, \"additions\": 52, \"deletions\": 52}, \"files\": [{\"sha\": \"071985eb641388d5f15aed7a3a4058738c42bdb5\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCompares.cpp?ref=0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"patch\": \"@@ -2566,9 +2566,6 @@ Instruction *InstCombiner::foldICmpAddConstant(ICmpInst &Cmp,\\n   Type *Ty = Add->getType();\\n   CmpInst::Predicate Pred = Cmp.getPredicate();\\n \\n-  if (!Add->hasOneUse())\\n-    return nullptr;\\n-\\n   // If the add does not wrap, we can always adjust the compare by subtracting\\n   // the constants. Equality comparisons are handled elsewhere. SGE/SLE/UGE/ULE\\n   // are canonicalized to SGT/SLT/UGT/ULT.\\n@@ -2602,6 +2599,9 @@ Instruction *InstCombiner::foldICmpAddConstant(ICmpInst &Cmp,\\n       return new ICmpInst(ICmpInst::ICMP_UGE, X, ConstantInt::get(Ty, Lower));\\n   }\\n \\n+  if (!Add->hasOneUse())\\n+    return nullptr;\\n+\\n   // X+C <u C2 -> (X & -C2) == C\\n   //   iff C & (C2-1) == 0\\n   //       C2 is a power of 2\"}, {\"sha\": \"5cf0cfb8d33d81bc491fd14920688db112656dfa\", \"filename\": \"llvm/test/Transforms/InstCombine/icmp-add.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-add.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-add.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-add.ll?ref=0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"patch\": \"@@ -77,14 +77,14 @@ define i1 @test4(i32 %a) {\\n \\n define { i32, i1 } @test4multiuse(i32 %a) {\\n ; CHECK-LABEL: @test4multiuse(\\n-; CHECK-NEXT:    [[B:%.*]] = add i32 [[A:%.*]], -2147483644\\n-; CHECK-NEXT:    [[C:%.*]] = icmp slt i32 [[B]], -4\\n+; CHECK-NEXT:    [[B:%.*]] = add nsw i32 [[A:%.*]], -2147483644\\n+; CHECK-NEXT:    [[C:%.*]] = icmp slt i32 [[A]], 2147483640\\n ; CHECK-NEXT:    [[TMP:%.*]] = insertvalue { i32, i1 } undef, i32 [[B]], 0\\n ; CHECK-NEXT:    [[RES:%.*]] = insertvalue { i32, i1 } [[TMP]], i1 [[C]], 1\\n ; CHECK-NEXT:    ret { i32, i1 } [[RES]]\\n ;\\n \\n-  %b = add i32 %a, -2147483644\\n+  %b = add nsw i32 %a, -2147483644\\n   %c = icmp slt i32 %b, -4\\n \\n   %tmp = insertvalue { i32, i1 } undef, i32 %b, 0\"}, {\"sha\": \"e91bd2eff9c0cd2f1a5e556f6c9efb3df3fb62c5\", \"filename\": \"llvm/test/Transforms/LoopUnroll/runtime-loop-multiple-exits.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fruntime-loop-multiple-exits.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fruntime-loop-multiple-exits.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fruntime-loop-multiple-exits.ll?ref=0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"patch\": \"@@ -578,10 +578,10 @@ define void @test8() {\\n ; PROLOG:      %lcmp.mod = icmp eq i64\\n ; PROLOG-NEXT: br i1 %lcmp.mod, label %innerH.prol.loopexit, label %innerH.prol.preheader\\n ; PROLOG: latch.6:\\n-; PROLOG-NEXT: %tmp4.7 = add nuw nsw i64 %tmp3, 8\\n ; PROLOG-NEXT: br i1 false, label %outerloop.loopexit.loopexit, label %latch.7\\n-; PROLOG: latch.7\\n-; PROLOG-NEXT: %tmp6.7 = icmp ult i64 %tmp4.7, 100\\n+; PROLOG: latch.7:\\n+; PROLOG-NEXT: %tmp4.7 = add nuw nsw i64 %tmp3, 8\\n+; PROLOG-NEXT: %tmp6.7 = icmp ult i64 %tmp3, 92\\n ; PROLOG-NEXT: br i1 %tmp6.7, label %innerH, label %exit.unr-lcssa\\n bb:\\n   br label %outerloop\"}, {\"sha\": \"c1b29f80cade4482c813ae7ab458c199ffb566a9\", \"filename\": \"llvm/test/Transforms/LoopVectorize/if-conversion-nest.ll\", \"status\": \"modified\", \"additions\": 27, \"deletions\": 27, \"changes\": 54, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-conversion-nest.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-conversion-nest.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-conversion-nest.ll?ref=0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"patch\": \"@@ -12,7 +12,7 @@ define i32 @foo(i32* nocapture %A, i32* nocapture %B, i32 %n) {\\n ; CHECK-NEXT:    [[TMP0:%.*]] = add i32 [[N]], -1\\n ; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64\\n ; CHECK-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[TMP1]], 1\\n-; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP2]], 4\\n+; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[TMP0]], 3\\n ; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]\\n ; CHECK:       vector.memcheck:\\n ; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[N]], -1\\n@@ -22,33 +22,33 @@ define i32 @foo(i32* nocapture %A, i32* nocapture %B, i32 %n) {\\n ; CHECK-NEXT:    [[SCEVGEP4:%.*]] = getelementptr i32, i32* [[B:%.*]], i64 [[TMP5]]\\n ; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt i32* [[SCEVGEP4]], [[A]]\\n ; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ugt i32* [[SCEVGEP]], [[B]]\\n-; CHECK-NEXT:    [[MEMCHECK_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]\\n-; CHECK-NEXT:    br i1 [[MEMCHECK_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]\\n+; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]\\n+; CHECK-NEXT:    br i1 [[FOUND_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]\\n ; CHECK:       vector.ph:\\n ; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[TMP2]], 8589934588\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i32* [[TMP7]] to <4 x i32>*\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, <4 x i32>* [[TMP8]], align 4, !alias.scope !0, !noalias !3\\n-; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, i32* [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32* [[TMP9]] to <4 x i32>*\\n-; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, <4 x i32>* [[TMP10]], align 4, !alias.scope !3\\n-; CHECK-NEXT:    [[TMP11:%.*]] = icmp sgt <4 x i32> [[WIDE_LOAD]], [[WIDE_LOAD6]]\\n-; CHECK-NEXT:    [[TMP12:%.*]] = icmp sgt <4 x i32> [[WIDE_LOAD]], <i32 19, i32 19, i32 19, i32 19>\\n-; CHECK-NEXT:    [[TMP13:%.*]] = icmp slt <4 x i32> [[WIDE_LOAD6]], <i32 4, i32 4, i32 4, i32 4>\\n-; CHECK-NEXT:    [[TMP14:%.*]] = select <4 x i1> [[TMP13]], <4 x i32> <i32 4, i32 4, i32 4, i32 4>, <4 x i32> <i32 5, i32 5, i32 5, i32 5>\\n-; CHECK-NEXT:    [[TMP15:%.*]] = and <4 x i1> [[TMP12]], [[TMP11]]\\n-; CHECK-NEXT:    [[TMP16:%.*]] = xor <4 x i1> [[TMP12]], <i1 true, i1 true, i1 true, i1 true>\\n-; CHECK-NEXT:    [[TMP17:%.*]] = and <4 x i1> [[TMP11]], [[TMP16]]\\n-; CHECK-NEXT:    [[PREDPHI:%.*]] = select <4 x i1> [[TMP15]], <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32> <i32 9, i32 9, i32 9, i32 9>\\n-; CHECK-NEXT:    [[PREDPHI7:%.*]] = select <4 x i1> [[TMP17]], <4 x i32> [[TMP14]], <4 x i32> [[PREDPHI]]\\n-; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[TMP7]] to <4 x i32>*\\n-; CHECK-NEXT:    store <4 x i32> [[PREDPHI7]], <4 x i32>* [[TMP18]], align 4, !alias.scope !0, !noalias !3\\n+; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i32* [[TMP6]] to <4 x i32>*\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, <4 x i32>* [[TMP7]], align 4, !alias.scope !0, !noalias !3\\n+; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, i32* [[B]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i32* [[TMP8]] to <4 x i32>*\\n+; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, <4 x i32>* [[TMP9]], align 4, !alias.scope !3\\n+; CHECK-NEXT:    [[TMP10:%.*]] = icmp sgt <4 x i32> [[WIDE_LOAD]], [[WIDE_LOAD6]]\\n+; CHECK-NEXT:    [[TMP11:%.*]] = icmp sgt <4 x i32> [[WIDE_LOAD]], <i32 19, i32 19, i32 19, i32 19>\\n+; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt <4 x i32> [[WIDE_LOAD6]], <i32 4, i32 4, i32 4, i32 4>\\n+; CHECK-NEXT:    [[TMP13:%.*]] = select <4 x i1> [[TMP12]], <4 x i32> <i32 4, i32 4, i32 4, i32 4>, <4 x i32> <i32 5, i32 5, i32 5, i32 5>\\n+; CHECK-NEXT:    [[TMP14:%.*]] = and <4 x i1> [[TMP11]], [[TMP10]]\\n+; CHECK-NEXT:    [[TMP15:%.*]] = xor <4 x i1> [[TMP11]], <i1 true, i1 true, i1 true, i1 true>\\n+; CHECK-NEXT:    [[TMP16:%.*]] = and <4 x i1> [[TMP10]], [[TMP15]]\\n+; CHECK-NEXT:    [[PREDPHI:%.*]] = select <4 x i1> [[TMP14]], <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32> <i32 9, i32 9, i32 9, i32 9>\\n+; CHECK-NEXT:    [[PREDPHI7:%.*]] = select <4 x i1> [[TMP16]], <4 x i32> [[TMP13]], <4 x i32> [[PREDPHI]]\\n+; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[TMP6]] to <4 x i32>*\\n+; CHECK-NEXT:    store <4 x i32> [[PREDPHI7]], <4 x i32>* [[TMP17]], align 4, !alias.scope !0, !noalias !3\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4\\n-; CHECK-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop !5\\n+; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; CHECK-NEXT:    br i1 [[TMP18]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop !5\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]\\n@@ -58,16 +58,16 @@ define i32 @foo(i32* nocapture %A, i32* nocapture %B, i32 %n) {\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[IF_END14:%.*]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]\\n-; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ARRAYIDX]], align 4\\n+; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[ARRAYIDX]], align 4\\n ; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[B]], i64 [[INDVARS_IV]]\\n-; CHECK-NEXT:    [[TMP21:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4\\n-; CHECK-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[TMP20]], [[TMP21]]\\n+; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4\\n+; CHECK-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[TMP19]], [[TMP20]]\\n ; CHECK-NEXT:    br i1 [[CMP3]], label [[IF_THEN:%.*]], label [[IF_END14]]\\n ; CHECK:       if.then:\\n-; CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[TMP20]], 19\\n+; CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[TMP19]], 19\\n ; CHECK-NEXT:    br i1 [[CMP6]], label [[IF_END14]], label [[IF_ELSE:%.*]]\\n ; CHECK:       if.else:\\n-; CHECK-NEXT:    [[CMP10:%.*]] = icmp slt i32 [[TMP21]], 4\\n+; CHECK-NEXT:    [[CMP10:%.*]] = icmp slt i32 [[TMP20]], 4\\n ; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[CMP10]], i32 4, i32 5\\n ; CHECK-NEXT:    br label [[IF_END14]]\\n ; CHECK:       if.end14:\"}, {\"sha\": \"ecabef22f7255b64ededed49acd90813d3f0720e\", \"filename\": \"llvm/test/Transforms/LoopVectorize/runtime-check.ll\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 16, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0f22e783a038b6983f0fe161eef6cf2add3a4156/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll?ref=0f22e783a038b6983f0fe161eef6cf2add3a4156\", \"patch\": \"@@ -19,7 +19,7 @@ define i32 @foo(float* nocapture %a, float* nocapture %b, i32 %n) nounwind uwtab\\n ; CHECK-NEXT:    [[TMP0:%.*]] = add i32 [[N]], -1, !dbg !9\\n ; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg !9\\n ; CHECK-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[TMP1]], 1, !dbg !9\\n-; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP2]], 4, !dbg !9\\n+; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[TMP0]], 3, !dbg !9\\n ; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]], !dbg !9\\n ; CHECK:       vector.memcheck:\\n ; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[N]], -1, !dbg !9\\n@@ -29,34 +29,34 @@ define i32 @foo(float* nocapture %a, float* nocapture %b, i32 %n) nounwind uwtab\\n ; CHECK-NEXT:    [[SCEVGEP4:%.*]] = getelementptr float, float* [[B:%.*]], i64 [[TMP5]], !dbg !9\\n ; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt float* [[SCEVGEP4]], [[A]], !dbg !9\\n ; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ugt float* [[SCEVGEP]], [[B]], !dbg !9\\n-; CHECK-NEXT:    [[MEMCHECK_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]], !dbg !9\\n-; CHECK-NEXT:    br i1 [[MEMCHECK_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]], !dbg !9\\n+; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]], !dbg !9\\n+; CHECK-NEXT:    br i1 [[FOUND_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]], !dbg !9\\n ; CHECK:       vector.ph:\\n ; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[TMP2]], 8589934588, !dbg !9\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]], !dbg !9\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], !dbg !9\\n-; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds float, float* [[B]], i64 [[INDEX]], !dbg !9\\n-; CHECK-NEXT:    [[TMP8:%.*]] = bitcast float* [[TMP7]] to <4 x float>*, !dbg !9\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x float>, <4 x float>* [[TMP8]], align 4, !dbg !9, !alias.scope !10\\n-; CHECK-NEXT:    [[TMP9:%.*]] = fmul <4 x float> [[WIDE_LOAD]], <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, !dbg !9\\n-; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, float* [[A]], i64 [[INDEX]], !dbg !9\\n-; CHECK-NEXT:    [[TMP11:%.*]] = bitcast float* [[TMP10]] to <4 x float>*, !dbg !9\\n-; CHECK-NEXT:    store <4 x float> [[TMP9]], <4 x float>* [[TMP11]], align 4, !dbg !9, !alias.scope !13, !noalias !10\\n+; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, float* [[B]], i64 [[INDEX]], !dbg !9\\n+; CHECK-NEXT:    [[TMP7:%.*]] = bitcast float* [[TMP6]] to <4 x float>*, !dbg !9\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x float>, <4 x float>* [[TMP7]], align 4, !dbg !9, !alias.scope !10\\n+; CHECK-NEXT:    [[TMP8:%.*]] = fmul <4 x float> [[WIDE_LOAD]], <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, !dbg !9\\n+; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds float, float* [[A]], i64 [[INDEX]], !dbg !9\\n+; CHECK-NEXT:    [[TMP10:%.*]] = bitcast float* [[TMP9]] to <4 x float>*, !dbg !9\\n+; CHECK-NEXT:    store <4 x float> [[TMP8]], <4 x float>* [[TMP10]], align 4, !dbg !9, !alias.scope !13, !noalias !10\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4, !dbg !9\\n-; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]], !dbg !9\\n-; CHECK-NEXT:    br i1 [[TMP12]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !dbg !9, !llvm.loop !15\\n+; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]], !dbg !9\\n+; CHECK-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !dbg !9, !llvm.loop !15\\n ; CHECK:       middle.block:\\n-; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]]\\n+; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]], !dbg !9\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]], !dbg !9\\n ; CHECK:       scalar.ph:\\n-; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ 0, [[VECTOR_MEMCHECK]] ]\\n+; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ 0, [[VECTOR_MEMCHECK]] ], !dbg !9\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg !9\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], !dbg !9\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[B]], i64 [[INDVARS_IV]], !dbg !9\\n-; CHECK-NEXT:    [[TMP13:%.*]] = load float, float* [[ARRAYIDX]], align 4, !dbg !9\\n-; CHECK-NEXT:    [[MUL:%.*]] = fmul float [[TMP13]], 3.000000e+00, !dbg !9\\n+; CHECK-NEXT:    [[TMP12:%.*]] = load float, float* [[ARRAYIDX]], align 4, !dbg !9\\n+; CHECK-NEXT:    [[MUL:%.*]] = fmul float [[TMP12]], 3.000000e+00, !dbg !9\\n ; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[A]], i64 [[INDVARS_IV]], !dbg !9\\n ; CHECK-NEXT:    store float [[MUL]], float* [[ARRAYIDX2]], align 4, !dbg !9\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1, !dbg !9\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lNDIwYzBjNzhlYjA3MDA5ODljOGJhODBlODQ1YjYzMDZkNjZiYjVmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e420c0c78eb0700989c8ba80e845b6306d66bb5f", "content": "{\"sha\": \"e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTQyMGMwYzc4ZWIwNzAwOTg5YzhiYTgwZTg0NWI2MzA2ZDY2YmI1Zg==\", \"commit\": {\"author\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2019-12-03T20:22:51Z\"}, \"committer\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2019-12-04T22:59:27Z\"}, \"message\": \"[ThinLTO] Fix importing of writeonly variables in distributed ThinLTO\\n\\nSummary:\\nD69561/dde5893 enabled importing of readonly variables with references,\\nhowever, it introduced a bug relating to importing/internalization of\\nwriteonly variables with references.\\n\\nA fix for this was added in D70006/7f92d66. But this didn't work in\\ndistributed ThinLTO mode. The reason is that the fix (importing the\\nwriteonly var with a zeroinitializer) was only applied when there were\\nreferences on the writeonly var summary. In distributed ThinLTO mode,\\nwhere we only have a small slice of the index, we will not have the\\nreferences on the importing side if we are not importing those\\nreferenced values. Rather than changing this handshaking (which will\\nrequire a lot of other changes, since that's how we know what to import\\nin the distributed backend clang invocation), we can simply always give\\nthe writeonly variable a zero initializer.\\n\\nReviewers: evgeny777, steven_wu\\n\\nSubscribers: mehdi_amini, inglorion, hiraditya, dexonsmith, arphaman, llvm-commits\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D70977\", \"tree\": {\"sha\": \"438fb1e7f1b2766db2e3373f1071f918ec4b3b5d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/438fb1e7f1b2766db2e3373f1071f918ec4b3b5d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e420c0c78eb0700989c8ba80e845b6306d66bb5f/comments\", \"author\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"33f6d465d790ac5c9b949e6bc05127d356212079\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/33f6d465d790ac5c9b949e6bc05127d356212079\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/33f6d465d790ac5c9b949e6bc05127d356212079\"}], \"stats\": {\"total\": 36, \"additions\": 27, \"deletions\": 9}, \"files\": [{\"sha\": \"26d48ee0d23faffce34377b3f3efdceb8abf5de4\", \"filename\": \"llvm/lib/Transforms/Utils/FunctionImportUtils.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp?ref=e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"patch\": \"@@ -258,7 +258,7 @@ void FunctionImportGlobalProcessing::processGlobalForThinLTO(GlobalValue &GV) {\\n         // references in IR module (not in combined index), so we can\\n         // ignore them when computing import. We do not export references\\n         // of writeonly object. See computeImportForReferencedGlobals\\n-        if (ImportIndex.isWriteOnly(GVS) && GVS->refs().size())\\n+        if (ImportIndex.isWriteOnly(GVS))\\n           V->setInitializer(Constant::getNullValue(V->getValueType()));\\n       }\\n     }\"}, {\"sha\": \"928d00adc9a23147450e257235e7fe8f5ed90992\", \"filename\": \"llvm/test/ThinLTO/X86/index-const-prop2.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 1, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop2.ll?ref=e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"patch\": \"@@ -36,6 +36,8 @@\\n ; RUN:  -o %t4\\n ; RUN: llvm-dis %t4.1.3.import.bc -o - | FileCheck %s --check-prefix=IMPORT2\\n \\n+; Run again but with main2 exported instead of main to check that write only\\n+; variables are optimized out.\\n ; RUN: llvm-lto2 run %t1.bc %t2.bc -save-temps \\\\\\n ; RUN:  -r=%t2.bc,foo,pl \\\\\\n ; RUN:  -r=%t2.bc,bar,pl \\\\\\n@@ -49,7 +51,7 @@\\n ; RUN:  -r=%t1.bc,baz, \\\\\\n ; RUN:  -r=%t1.bc,gBar, \\\\\\n ; RUN:  -o %t5\\n-; RUN: llvm-dis %t5.1.3.import.bc -o - | FileCheck %s --check-prefix=IMPORT\\n+; RUN: llvm-dis %t5.1.3.import.bc -o - | FileCheck %s --check-prefix=IMPORT-WRITEONLY\\n ; RUN: llvm-dis %t5.1.5.precodegen.bc -o - | FileCheck %s --check-prefix=CODEGEN2\\n ; Check that gFoo and gBar were eliminated from source module together\\n ; with corresponsing stores\\n@@ -59,6 +61,10 @@\\n ; IMPORT-NEXT:  @gBar = internal local_unnamed_addr global i32 2, align 4\\n ; IMPORT:       !DICompileUnit({{.*}})\\n \\n+; Write only variables are imported with a zero initializer.\\n+; IMPORT-WRITEONLY:  @gFoo.llvm.0 = internal unnamed_addr global i32 0\\n+; IMPORT-WRITEONLY:  @gBar = internal local_unnamed_addr global i32 0\\n+\\n ; CODEGEN:        i32 @main()\\n ; CODEGEN-NEXT:     ret i32 3\\n \"}, {\"sha\": \"787d977582211f85528d798973dba86831a220b2\", \"filename\": \"llvm/test/ThinLTO/X86/writeonly-with-refs.ll\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 3, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly-with-refs.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly-with-refs.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly-with-refs.ll?ref=e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"patch\": \"@@ -7,10 +7,22 @@\\n ; RUN:    -r=%t2,outer,pl\\n \\n ; @outer should have been internalized and converted to zeroinitilizer.\\n-; RUN: llvm-dis %t-out.1.5.precodegen.bc -o - | FileCheck %s\\n-; RUN: llvm-dis %t-out.2.5.precodegen.bc -o - | FileCheck %s\\n+; RUN: llvm-dis %t-out.1.3.import.bc -o - | FileCheck %s\\n+; RUN: llvm-dis %t-out.2.3.import.bc -o - | FileCheck %s\\n \\n-; CHECK: @outer = internal unnamed_addr global %struct.Q zeroinitializer\\n+; CHECK: @outer = internal local_unnamed_addr global %struct.Q zeroinitializer\\n+\\n+; Test again in distributed ThinLTO mode.\\n+; RUN: llvm-lto2 run -save-temps %t1 %t2 -o %t-out \\\\\\n+; RUN:    -thinlto-distributed-indexes \\\\\\n+; RUN:    -r=%t1,main,plx \\\\\\n+; RUN:    -r=%t1,_Z3foov,l \\\\\\n+; RUN:    -r=%t2,_Z3foov,pl \\\\\\n+; RUN:    -r=%t2,outer,pl\\n+; RUN: opt -function-import -import-all-index -enable-import-metadata -summary-file %t1.thinlto.bc %t1 -o %t1.out\\n+; RUN: opt -function-import -import-all-index -summary-file %t2.thinlto.bc %t2 -o %t2.out\\n+; RUN: llvm-dis %t1.out -o - | FileCheck %s\\n+; RUN: llvm-dis %t2.out -o - | FileCheck %s\\n \\n source_filename = \\\"main.cpp\\\"\\n target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\"}, {\"sha\": \"27305e160ea718e59c5ba5ad7e84473ad08cc9f0\", \"filename\": \"llvm/test/ThinLTO/X86/writeonly.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly.ll?ref=e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"patch\": \"@@ -11,8 +11,8 @@\\n ; RUN: llvm-dis %t1.imported.bc -o - | FileCheck %s --check-prefix=IMPORT\\n ; RUN: llvm-lto -thinlto-action=optimize %t1.imported.bc -o - | llvm-dis - -o - | FileCheck %s --check-prefix=OPTIMIZE\\n \\n-; IMPORT: @gFoo.llvm.0 = internal unnamed_addr global i32 1, align 4, !dbg !0\\n-; IMPORT-NEXT: @gBar = internal local_unnamed_addr global i32 2, align 4, !dbg !5\\n+; IMPORT: @gFoo.llvm.0 = internal unnamed_addr global i32 0, align 4, !dbg !0\\n+; IMPORT-NEXT: @gBar = internal local_unnamed_addr global i32 0, align 4, !dbg !5\\n ; IMPORT: !DICompileUnit({{.*}})\\n \\n ; STATS:  2 module-summary-index - Number of live global variables marked write only \"}, {\"sha\": \"2648727f099717afe06f03229c0acdbf456225c0\", \"filename\": \"llvm/test/ThinLTO/X86/writeonly2.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e420c0c78eb0700989c8ba80e845b6306d66bb5f/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Fwriteonly2.ll?ref=e420c0c78eb0700989c8ba80e845b6306d66bb5f\", \"patch\": \"@@ -19,8 +19,8 @@\\n ; with corresponsing stores\\n ; RUN: llvm-dis %t3.2.5.precodegen.bc -o - | FileCheck %s --check-prefix=CODEGEN-SRC\\n \\n-; IMPORT:       @gFoo.llvm.0 = internal unnamed_addr global i32 1, align 4\\n-; IMPORT-NEXT:  @gBar = internal local_unnamed_addr global i32 2, align 4\\n+; IMPORT:       @gFoo.llvm.0 = internal unnamed_addr global i32 0, align 4\\n+; IMPORT-NEXT:  @gBar = internal local_unnamed_addr global i32 0, align 4\\n ; IMPORT:       !DICompileUnit({{.*}})\\n \\n ; CODEGEN-NOT:  gFoo\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80NTNkYzRkN2VjNWEzYzNkOGY1NGZjMzU4YmM1NjczODM0NTE2ZDQ4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/453dc4d7ec5a3c3d8f54fc358bc5673834516d48", "content": "{\"sha\": \"453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NDUzZGM0ZDdlYzVhM2MzZDhmNTRmYzM1OGJjNTY3MzgzNDUxNmQ0OA==\", \"commit\": {\"author\": {\"name\": \"Tom Weaver\", \"email\": \"Tom.Weaver@Sony.com\", \"date\": \"2019-12-20T14:03:34Z\"}, \"committer\": {\"name\": \"Tom Weaver\", \"email\": \"Tom.Weaver@Sony.com\", \"date\": \"2019-12-20T14:03:34Z\"}, \"message\": \"[OPT-DBG] Teach DbgEntityHistoryCalculator about meta-instructions.\\n\\nThe calculator was considering instructions such as KILLs as clobbers\\nof a physical address. This is wrong as meta instructions such as KILLs\\nproduce no output in the final program and thus don't clobber or change\\nany physical location's value. As a result they're safe to ignore whilst\\ncalculating location list ranges.\\n\\nreviewers: aprantl, vsk\\n\\ndiff revision: https://reviews.llvm.org/D70497\\n\\nfixes: https://bugs.llvm.org/show_bug.cgi?id=38753\", \"tree\": {\"sha\": \"f6a5334c2664efb76c4b46e79f11b91bb8d3253c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f6a5334c2664efb76c4b46e79f11b91bb8d3253c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"59811f454df08924fc35f7e8fb8cb61e8f40e869\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/59811f454df08924fc35f7e8fb8cb61e8f40e869\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/59811f454df08924fc35f7e8fb8cb61e8f40e869\"}], \"stats\": {\"total\": 170, \"additions\": 165, \"deletions\": 5}, \"files\": [{\"sha\": \"170fc8b6d49f52897a17e397cd4ccbdf6b53f8e2\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDbgEntityHistoryCalculator.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDbgEntityHistoryCalculator.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDbgEntityHistoryCalculator.cpp?ref=453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"patch\": \"@@ -262,7 +262,9 @@ void llvm::calculateDbgEntityHistory(const MachineFunction *MF,\\n         DbgLabels.addInstr(L, MI);\\n       }\\n \\n-      if (MI.isDebugInstr())\\n+      // Meta Instructions have no output and do not change any values and so\\n+      // can be safely ignored.\\n+      if (MI.isMetaInstruction())\\n         continue;\\n \\n       // Not a DBG_VALUE instruction. It may clobber registers which describe\"}, {\"sha\": \"64000301fd849300f208928944689e75267ac835\", \"filename\": \"llvm/test/DebugInfo/COFF/pieces.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FCOFF%2Fpieces.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FCOFF%2Fpieces.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FCOFF%2Fpieces.ll?ref=453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"patch\": \"@@ -76,6 +76,7 @@\\n ; ASM: [[pad_right_tmp:\\\\.Ltmp[0-9]+]]:\\n ; ASM:         #DEBUG_VALUE: pad_right:o <- [DW_OP_LLVM_fragment 32 32] $eax\\n ; ASM:         retq\\n+; ASM: [[pad_right_end:\\\\.Lfunc_end1]]:\\n \\n \\n ; ASM-LABEL: pad_left: # @pad_left\\n@@ -84,6 +85,7 @@\\n ; ASM: [[pad_left_tmp:\\\\.Ltmp[0-9]+]]:\\n ; ASM:         #DEBUG_VALUE: pad_left:o <- [DW_OP_LLVM_fragment 0 32] $eax\\n ; ASM:         retq\\n+; ASM: [[pad_left_end:\\\\.Lfunc_end2]]:\\n \\n \\n ; ASM-LABEL: nested: # @nested\\n@@ -146,7 +148,7 @@\\n ; ASM:        .asciz  \\\"pad_right\\\"             # Function name\\n ; ASM:        .short  4414                    # Record kind: S_LOCAL\\n ; ASM:        .asciz  \\\"o\\\"\\n-; ASM:        .cv_def_range    [[pad_right_tmp]] [[pad_right_tmp]], subfield_reg, 17, 4\\n+; ASM:        .cv_def_range    [[pad_right_tmp]] [[pad_right_end]], subfield_reg, 17, 4\\n \\n ; OBJ-LABEL: GlobalProcIdSym {\\n ; OBJ:         Kind: S_GPROC32_ID (0x1147)\\n@@ -169,7 +171,7 @@\\n ; ASM:        .asciz  \\\"pad_left\\\"              # Function name\\n ; ASM:        .short  4414                    # Record kind: S_LOCAL\\n ; ASM:        .asciz  \\\"o\\\"\\n-; ASM:        .cv_def_range    [[pad_left_tmp]] [[pad_left_tmp]], subfield_reg, 17, 0\\n+; ASM:        .cv_def_range    [[pad_left_tmp]] [[pad_left_end]], subfield_reg, 17, 0\\n \\n ; OBJ-LABEL: GlobalProcIdSym {\\n ; OBJ:         Kind: S_GPROC32_ID (0x1147)\"}, {\"sha\": \"bfc9df5695e88c5037b6d6ecf6a3770f5e494e21\", \"filename\": \"llvm/test/DebugInfo/X86/dbg_entity_calc_ignores_KILL_instruction_at_return.mir\", \"status\": \"added\", \"additions\": 76, \"deletions\": 0, \"changes\": 76, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_at_return.mir\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_at_return.mir\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_at_return.mir?ref=453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"patch\": \"@@ -0,0 +1,76 @@\\n+--- |\\n+  ; RUN: llc %s -start-before=cfi-instr-inserter -filetype=obj -o - | llvm-dwarfdump - | FileCheck %s\\n+\\n+  ; Test that KILL instructions no longer terminate the instruction range of a\\n+  ; Debug Intrinsic calculated by DbgEntityHistoryCalculator.\\n+\\n+  source_filename = \\\".\\\\\\\\test.cpp\\\"\\n+  target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+  target triple = \\\"x86_64-scei-ps4\\\"\\n+  \\n+  define hidden i32 @main(i32 %arg, i8** nocapture readnone %argv) local_unnamed_addr !dbg !8 {\\n+  entry:\\n+    call void @llvm.dbg.value(metadata i32 %arg, metadata !19, metadata !DIExpression()), !dbg !22\\n+    call void @llvm.dbg.value(metadata i8** %argv, metadata !20, metadata !DIExpression()), !dbg !22\\n+    %add = shl nsw i32 %arg, 1, !dbg !23\\n+    call void @llvm.dbg.value(metadata i32 %add, metadata !21, metadata !DIExpression()), !dbg !22\\n+    ret i32 %add, !dbg !24\\n+  }\\n+\\n+  declare void @llvm.dbg.value(metadata, metadata, metadata)\\n+\\n+\\n+  !llvm.dbg.cu = !{!0}\\n+  !llvm.module.flags = !{!3, !4, !5, !6}\\n+  !llvm.ident = !{!7}\\n+\\n+  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: \\\"clang version 10.0.0\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, debugInfoForProfiling: true, nameTableKind: None)\\n+  !1 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\"F:\\\\\\\\test\\\")\\n+  !2 = !{}\\n+  !3 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+  !4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+  !5 = !{i32 1, !\\\"wchar_size\\\", i32 2}\\n+  !6 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+  !7 = !{!\\\"clang version 10.0.0\\\"}\\n+  !8 = distinct !DISubprogram(name: \\\"main\\\", scope: !9, file: !9, line: 1, type: !10, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)\\n+  !9 = !DIFile(filename: \\\".\\\\\\\\test.cpp\\\", directory: \\\"F:\\\\\\\\test\\\")\\n+  !10 = !DISubroutineType(types: !11)\\n+  !11 = !{!12, !13, !14}\\n+  !12 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+  !13 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)\\n+  !14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)\\n+  !15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)\\n+  !16 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)\\n+  !17 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n+  !18 = !{!19, !20, !21}\\n+  !19 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !8, file: !9, line: 1, type: !13)\\n+  !20 = !DILocalVariable(name: \\\"argv\\\", arg: 2, scope: !8, file: !9, line: 1, type: !14)\\n+  !21 = !DILocalVariable(name: \\\"result\\\", scope: !8, file: !9, line: 2, type: !12)\\n+  !22 = !DILocation(line: 0, scope: !8)\\n+  !23 = !DILocation(line: 2, scope: !8)\\n+  !24 = !DILocation(line: 3, scope: !8)\\n+\\n+...\\n+---\\n+name:            main\\n+alignment:       16\\n+tracksRegLiveness: true\\n+liveins:\\n+  - { reg: '$edi', virtual-reg: '' }\\n+frameInfo:\\n+  maxAlignment:    1\\n+body:             |\\n+  bb.0.entry:\\n+    liveins: $edi\\n+\\n+    renamable $edi = KILL killed $edi, implicit-def $rdi\\n+    renamable $eax = LEA64_32r killed renamable $rdi, 1, renamable $rdi, 0, $noreg, debug-location !23\\n+    DBG_VALUE $eax, $noreg, !21, !DIExpression(), debug-location !22\\n+    ; CHECK-LABEL: DW_TAG_variable\\n+    ; CHECK: DW_AT_location        (0x00000000:\\n+    ; CHECK:  [0x0000000000000003,  0x0000000000000004): DW_OP_reg0 RAX)\\n+    ; CHECK-NEXT: DW_AT_name    (\\\"result\\\")\\n+    renamable $eax = KILL killed $eax, implicit-def $rax\\n+    RETQ killed $eax, debug-location !24\\n+\\n+...\"}, {\"sha\": \"0f01a51a482f5465f6f2e1f444d896aa50d57680\", \"filename\": \"llvm/test/DebugInfo/X86/dbg_entity_calc_ignores_KILL_instruction_still_clobbers.mir\", \"status\": \"added\", \"additions\": 79, \"deletions\": 0, \"changes\": 79, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_still_clobbers.mir\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_still_clobbers.mir\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdbg_entity_calc_ignores_KILL_instruction_still_clobbers.mir?ref=453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"patch\": \"@@ -0,0 +1,79 @@\\n+--- |\\n+  ; RUN: llc %s -start-before=cfi-instr-inserter -filetype=obj -o - | llvm-dwarfdump - | FileCheck %s\\n+\\n+  ; Test that KILL instructions do not interfere with debug entity history\\n+  ; liveness ranges. Check that a physical address clobber after KILL still\\n+  ; closes a debug entites range.\\n+\\n+  source_filename = \\\".\\\\\\\\test.cpp\\\"\\n+  target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+  target triple = \\\"x86_64-scei-ps4\\\"\\n+  \\n+  define hidden i32 @main(i32 %arg, i8** nocapture readnone %argv) local_unnamed_addr !dbg !8 {\\n+  entry:\\n+    call void @llvm.dbg.value(metadata i32 %arg, metadata !19, metadata !DIExpression()), !dbg !22\\n+    call void @llvm.dbg.value(metadata i8** %argv, metadata !20, metadata !DIExpression()), !dbg !22\\n+    %add = shl nsw i32 %arg, 1, !dbg !23\\n+    call void @llvm.dbg.value(metadata i32 %add, metadata !21, metadata !DIExpression()), !dbg !22\\n+    ret i32 %add, !dbg !24\\n+  }\\n+  \\n+  declare void @llvm.dbg.value(metadata, metadata, metadata)\\n+\\n+  !llvm.dbg.cu = !{!0}\\n+  !llvm.module.flags = !{!3, !4, !5, !6}\\n+  !llvm.ident = !{!7}\\n+\\n+  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: \\\"clang version 10.0.0\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, debugInfoForProfiling: true, nameTableKind: None)\\n+  !1 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\"F:\\\\\\\\test\\\")\\n+  !2 = !{}\\n+  !3 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n+  !4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+  !5 = !{i32 1, !\\\"wchar_size\\\", i32 2}\\n+  !6 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+  !7 = !{!\\\"clang version 10.0.0\\\"}\\n+  !8 = distinct !DISubprogram(name: \\\"main\\\", scope: !9, file: !9, line: 1, type: !10, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)\\n+  !9 = !DIFile(filename: \\\".\\\\\\\\test.cpp\\\", directory: \\\"F:\\\\\\\\test\\\")\\n+  !10 = !DISubroutineType(types: !11)\\n+  !11 = !{!12, !13, !14}\\n+  !12 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+  !13 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)\\n+  !14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)\\n+  !15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)\\n+  !16 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)\\n+  !17 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n+  !18 = !{!19, !20, !21}\\n+  !19 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !8, file: !9, line: 1, type: !13)\\n+  !20 = !DILocalVariable(name: \\\"argv\\\", arg: 2, scope: !8, file: !9, line: 1, type: !14)\\n+  !21 = !DILocalVariable(name: \\\"result\\\", scope: !8, file: !9, line: 2, type: !12)\\n+  !22 = !DILocation(line: 0, scope: !8)\\n+  !23 = !DILocation(line: 2, scope: !8)\\n+  !24 = !DILocation(line: 3, scope: !8)\\n+\\n+...\\n+---\\n+name:            main\\n+alignment:       16\\n+tracksRegLiveness: true\\n+liveins:\\n+  - { reg: '$edi', virtual-reg: '' }\\n+frameInfo:\\n+  maxAlignment:    1\\n+body:             |\\n+  bb.0.entry:\\n+    liveins: $edi\\n+\\n+    renamable $edi = KILL killed $edi, implicit-def $rdi\\n+    renamable $eax = LEA64_32r killed renamable $rdi, 1, renamable $rdi, 0, $noreg, debug-location !23\\n+    DBG_VALUE $eax, $noreg, !21, !DIExpression(), debug-location !22\\n+    ; CHECK-LABEL: DW_TAG_variable\\n+    ; CHECK: DW_AT_location        (0x00000000:\\n+    ; CHECK:  [0x0000000000000003,  0x0000000000000007): DW_OP_reg0 RAX)\\n+    ; CHECK-NEXT: DW_AT_name    (\\\"result\\\")\\n+    renamable $eax = KILL killed $eax, implicit-def $rax\\n+    $edi = MOV32rr $eax, debug-location !24\\n+    $eax = MOV32rr $eax, debug-location !24\\n+    $edi = MOV32rr $eax, debug-location !24\\n+    RETQ killed $eax, debug-location !24\\n+\\n+...\"}, {\"sha\": \"6fde29ff36e05f7af13bb9cc54ef3edc67f60034\", \"filename\": \"llvm/test/DebugInfo/X86/pieces-3.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fpieces-3.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/453dc4d7ec5a3c3d8f54fc358bc5673834516d48/llvm%2Ftest%2FDebugInfo%2FX86%2Fpieces-3.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fpieces-3.ll?ref=453dc4d7ec5a3c3d8f54fc358bc5673834516d48\", \"patch\": \"@@ -21,8 +21,9 @@\\n ; CHECK-NEXT:     [0x0000000000000007, 0x0000000000000009): DW_OP_reg5 RDI, DW_OP_piece 0x8\\n ; CHECK-NEXT:   DW_AT_name {{.*}}\\\"outer\\\"\\n ; CHECK: DW_TAG_variable\\n-; CHECK-NEXT:   DW_AT_name {{.*}}\\\"i1\\\"\\n-; CHECK-NOT:    DW_AT_location\\n+; CHECK-NEXT:   DW_AT_location [DW_FORM_data4]        (0x00000044\\n+; CHECK-NEXT:     [0x0000000000000007, 0x0000000000000009): DW_OP_reg0 RAX, DW_OP_piece 0x4)\\n+; CHECK-NEXT:   \\\"i1\\\"\\n \\n ; ModuleID = '/Volumes/Data/llvm/test/DebugInfo/X86/sroasplit-2.ll'\\n target datalayout = \\\"e-m:o-i64:64-f80:128-n8:16:32:64-S128\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wY2YwYmU5OTNjMzgyZjE1YzI3N2RlNmQwZGI4YmU2YTIzNmM3YzUwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0cf0be993c382f15c277de6d0db8be6a236c7c50", "content": "{\"sha\": \"0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MGNmMGJlOTkzYzM4MmYxNWMyNzdkZTZkMGRiOGJlNmEyMzZjN2M1MA==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2020-02-04T12:02:01Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2020-02-04T12:45:48Z\"}, \"message\": \"[InstCombine] fix operands of shouldChangeType() for casted phi transform\\n\\nThis is a bug noted in the recent D72733 and seen\\nin the similar transform just above the changed source code.\\n\\nI added tests with illegal types and zexts to show the bug -\\nwe could transform legal phi ops to illegal, etc. I did not add\\ntests with trunc because we won't see any diffs on those patterns.\\nThat is because InstCombiner::SliceUpIllegalIntegerPHI() appears to\\ndo those transforms independently of datalayout. It can also create\\nmore casts than are present in existing code.\\n\\nThere are some existing regression tests that do not include a\\ndatalayout that would be altered by this fix. I assumed that the\\nlack of a datalayout in those regression files is an oversight, so\\nI added the minimal layout (make i32 legal) necessary to preserve\\nbehavior on those tests.\\n\\nDifferential Revision: https://reviews.llvm.org/D73907\", \"tree\": {\"sha\": \"95f939e879328f400b1846c51545c6869bacaeed\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/95f939e879328f400b1846c51545c6869bacaeed\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0cf0be993c382f15c277de6d0db8be6a236c7c50/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8c681f5e4706d3d2980f19f08dd0d4c40496a8d5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8c681f5e4706d3d2980f19f08dd0d4c40496a8d5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8c681f5e4706d3d2980f19f08dd0d4c40496a8d5\"}], \"stats\": {\"total\": 28, \"additions\": 18, \"deletions\": 10}, \"files\": [{\"sha\": \"1c81ac4e645633a93b16689ec611064ea3756b71\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -297,7 +297,7 @@ Instruction *InstCombiner::commonCastTransforms(CastInst &CI) {\\n     // Don't do this if it would create a PHI node with an illegal type from a\\n     // legal type.\\n     if (!Src->getType()->isIntegerTy() || !CI.getType()->isIntegerTy() ||\\n-        shouldChangeType(CI.getType(), Src->getType()))\\n+        shouldChangeType(CI.getSrcTy(), CI.getType()))\\n       if (Instruction *NV = foldOpIntoPhi(CI, PN))\\n         return NV;\\n   }\"}, {\"sha\": \"0018099e681235e4c8f5c4ee5e26905db4023585\", \"filename\": \"llvm/test/CodeGen/AMDGPU/diverge-switch-default.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fdiverge-switch-default.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fdiverge-switch-default.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Fdiverge-switch-default.ll?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -1,5 +1,7 @@\\n ; RUN: llc -march=amdgcn -mcpu=gfx900 -print-after=si-annotate-control-flow %s -o /dev/null 2>&1 | FileCheck %s\\n \\n+target datalayout = \\\"n32\\\"\\n+\\n ; CHECK-LABEL: @switch_unreachable_default\\n \\n define amdgpu_kernel void @switch_unreachable_default(i32 addrspace(1)* %out, i8 addrspace(1)* %in0, i8 addrspace(1)* %in1) #0 {\"}, {\"sha\": \"1903f89789b162aeda23c637fc64ea15aaefb0ef\", \"filename\": \"llvm/test/CodeGen/AMDGPU/reqd-work-group-size.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Freqd-work-group-size.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Freqd-work-group-size.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAMDGPU%2Freqd-work-group-size.ll?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -1,5 +1,7 @@\\n ; RUN: opt -mtriple=amdgcn-amd-amdhsa -S -amdgpu-lower-kernel-attributes -instcombine %s | FileCheck -enable-var-scope %s\\n \\n+target datalayout = \\\"n32\\\"\\n+\\n ; CHECK-LABEL: @invalid_reqd_work_group_size(\\n ; CHECK: load i16,\\n define amdgpu_kernel void @invalid_reqd_work_group_size(i16 addrspace(1)* %out) #0 !reqd_work_group_size !1 {\"}, {\"sha\": \"222b04ae165011aa82c766f179eba975e2c1e6d5\", \"filename\": \"llvm/test/Transforms/InstCombine/cast_phi.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 9, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast_phi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast_phi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fcast_phi.ll?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -185,14 +185,14 @@ define i37 @zext_from_legal_to_illegal_type(i32 %x) {\\n ; CHECK-NEXT:    br i1 [[CMP]], label [[T:%.*]], label [[F:%.*]]\\n ; CHECK:       t:\\n ; CHECK-NEXT:    [[Y:%.*]] = call i32 @get_i32()\\n-; CHECK-NEXT:    [[PHITMP:%.*]] = zext i32 [[Y]] to i37\\n ; CHECK-NEXT:    br label [[EXIT:%.*]]\\n ; CHECK:       f:\\n ; CHECK-NEXT:    call void @bar()\\n ; CHECK-NEXT:    br label [[EXIT]]\\n ; CHECK:       exit:\\n-; CHECK-NEXT:    [[P:%.*]] = phi i37 [ [[PHITMP]], [[T]] ], [ 3, [[F]] ]\\n-; CHECK-NEXT:    ret i37 [[P]]\\n+; CHECK-NEXT:    [[P:%.*]] = phi i32 [ [[Y]], [[T]] ], [ 3, [[F]] ]\\n+; CHECK-NEXT:    [[R:%.*]] = zext i32 [[P]] to i37\\n+; CHECK-NEXT:    ret i37 [[R]]\\n ;\\n entry:\\n   %cmp = icmp eq i32 %x, 42\\n@@ -219,14 +219,14 @@ define i37 @zext_from_illegal_to_illegal_type(i32 %x) {\\n ; CHECK-NEXT:    br i1 [[CMP]], label [[T:%.*]], label [[F:%.*]]\\n ; CHECK:       t:\\n ; CHECK-NEXT:    [[Y:%.*]] = call i3 @get_i3()\\n-; CHECK-NEXT:    [[PHITMP:%.*]] = zext i3 [[Y]] to i37\\n ; CHECK-NEXT:    br label [[EXIT:%.*]]\\n ; CHECK:       f:\\n ; CHECK-NEXT:    call void @bar()\\n ; CHECK-NEXT:    br label [[EXIT]]\\n ; CHECK:       exit:\\n-; CHECK-NEXT:    [[P:%.*]] = phi i37 [ [[PHITMP]], [[T]] ], [ 3, [[F]] ]\\n-; CHECK-NEXT:    ret i37 [[P]]\\n+; CHECK-NEXT:    [[P:%.*]] = phi i3 [ [[Y]], [[T]] ], [ 3, [[F]] ]\\n+; CHECK-NEXT:    [[R:%.*]] = zext i3 [[P]] to i37\\n+; CHECK-NEXT:    ret i37 [[R]]\\n ;\\n entry:\\n   %cmp = icmp eq i32 %x, 42\\n@@ -287,14 +287,14 @@ define i64 @zext_from_illegal_to_legal_type(i32 %x) {\\n ; CHECK-NEXT:    br i1 [[CMP]], label [[T:%.*]], label [[F:%.*]]\\n ; CHECK:       t:\\n ; CHECK-NEXT:    [[Y:%.*]] = call i3 @get_i3()\\n+; CHECK-NEXT:    [[PHITMP:%.*]] = zext i3 [[Y]] to i64\\n ; CHECK-NEXT:    br label [[EXIT:%.*]]\\n ; CHECK:       f:\\n ; CHECK-NEXT:    call void @bar()\\n ; CHECK-NEXT:    br label [[EXIT]]\\n ; CHECK:       exit:\\n-; CHECK-NEXT:    [[P:%.*]] = phi i3 [ [[Y]], [[T]] ], [ 3, [[F]] ]\\n-; CHECK-NEXT:    [[R:%.*]] = zext i3 [[P]] to i64\\n-; CHECK-NEXT:    ret i64 [[R]]\\n+; CHECK-NEXT:    [[P:%.*]] = phi i64 [ [[PHITMP]], [[T]] ], [ 3, [[F]] ]\\n+; CHECK-NEXT:    ret i64 [[P]]\\n ;\\n entry:\\n   %cmp = icmp eq i32 %x, 42\"}, {\"sha\": \"b68a5673faa918013112e414984002fc24ff7bc7\", \"filename\": \"llvm/test/Transforms/InstCombine/icmp-div-constant.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-div-constant.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-div-constant.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-div-constant.ll?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -1,6 +1,8 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt < %s -instcombine -S | FileCheck %s\\n \\n+target datalayout = \\\"n32\\\"\\n+\\n define i1 @is_rem2_neg_i8(i8 %x) {\\n ; CHECK-LABEL: @is_rem2_neg_i8(\\n ; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[X:%.*]], -127\"}, {\"sha\": \"6b8cfd4f4ae285601e974edc667478e7a0ad0789\", \"filename\": \"llvm/test/Transforms/InstCombine/icmp-mul-zext.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-mul-zext.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0cf0be993c382f15c277de6d0db8be6a236c7c50/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-mul-zext.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp-mul-zext.ll?ref=0cf0be993c382f15c277de6d0db8be6a236c7c50\", \"patch\": \"@@ -1,6 +1,8 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt < %s -instcombine -S | FileCheck %s\\n \\n+target datalayout = \\\"n32\\\"\\n+\\n define i32 @sterix(i32, i8, i64) {\\n ; CHECK-LABEL: @sterix(\\n ; CHECK-NEXT:  entry:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81YjNiMjFmMDI1ODg5OWQwM2Y2Mjk5ZmJhNmI0Yzc4ZDdlNzMwMzUzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/5b3b21f0258899d03f6299fba6b4c78d7e730353", "content": "{\"sha\": \"5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NWIzYjIxZjAyNTg4OTlkMDNmNjI5OWZiYTZiNGM3OGQ3ZTczMDM1Mw==\", \"commit\": {\"author\": {\"name\": \"Amy Huang\", \"email\": \"akhuang@google.com\", \"date\": \"2020-02-04T21:20:13Z\"}, \"committer\": {\"name\": \"Amy Huang\", \"email\": \"akhuang@google.com\", \"date\": \"2020-03-03T22:00:08Z\"}, \"message\": \"[DebugInfo] Fix for adding \\\"returns cxx udt\\\" option to functions in CodeView.\\n\\nSummary:\\nThis change checks for the return type in the frontend and adds a flag\\nto the DISubroutineType to indicate that the option should be added in\\nCodeViewDebug.\\n\\nPreviously function types sometimes appeared twice in the PDB: once with\\n\\\"returns cxx udt\\\" and once without.\\nSee https://bugs.llvm.org/show_bug.cgi?id=44785.\\n\\nReviewers: rnk, asmith\\n\\nSubscribers: hiraditya, cfe-commits, llvm-commits\\n\\nTags: #clang, #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D75215\", \"tree\": {\"sha\": \"e84ddc2f2b8c5bd6221fd0a63ab3ae1d97a2ec81\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e84ddc2f2b8c5bd6221fd0a63ab3ae1d97a2ec81\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5b3b21f0258899d03f6299fba6b4c78d7e730353/comments\", \"author\": {\"login\": \"amykhuang\", \"id\": 8774314, \"node_id\": \"MDQ6VXNlcjg3NzQzMTQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8774314?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/amykhuang\", \"html_url\": \"https://github.com/amykhuang\", \"followers_url\": \"https://api.github.com/users/amykhuang/followers\", \"following_url\": \"https://api.github.com/users/amykhuang/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/amykhuang/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/amykhuang/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/amykhuang/subscriptions\", \"organizations_url\": \"https://api.github.com/users/amykhuang/orgs\", \"repos_url\": \"https://api.github.com/users/amykhuang/repos\", \"events_url\": \"https://api.github.com/users/amykhuang/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/amykhuang/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"amykhuang\", \"id\": 8774314, \"node_id\": \"MDQ6VXNlcjg3NzQzMTQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8774314?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/amykhuang\", \"html_url\": \"https://github.com/amykhuang\", \"followers_url\": \"https://api.github.com/users/amykhuang/followers\", \"following_url\": \"https://api.github.com/users/amykhuang/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/amykhuang/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/amykhuang/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/amykhuang/subscriptions\", \"organizations_url\": \"https://api.github.com/users/amykhuang/orgs\", \"repos_url\": \"https://api.github.com/users/amykhuang/repos\", \"events_url\": \"https://api.github.com/users/amykhuang/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/amykhuang/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ab16ef17e838377e914a18fcec0fa78375833c36\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ab16ef17e838377e914a18fcec0fa78375833c36\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ab16ef17e838377e914a18fcec0fa78375833c36\"}], \"stats\": {\"total\": 474, \"additions\": 276, \"deletions\": 198}, \"files\": [{\"sha\": \"6dc6fde9a292d3a2171bc4727cd82048af9e1c3d\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5b3b21f0258899d03f6299fba6b4c78d7e730353/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5b3b21f0258899d03f6299fba6b4c78d7e730353/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FCodeViewDebug.cpp?ref=5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"patch\": \"@@ -418,10 +418,11 @@ getFunctionOptions(const DISubroutineType *Ty,\\n       ReturnTy = TypeArray[0];\\n   }\\n \\n-  if (auto *ReturnDCTy = dyn_cast_or_null<DICompositeType>(ReturnTy)) {\\n-    if (isNonTrivial(ReturnDCTy))\\n+  // Add CxxReturnUdt option to functions that return nontrivial record types\\n+  // or methods that return record types.\\n+  if (auto *ReturnDCTy = dyn_cast_or_null<DICompositeType>(ReturnTy))\\n+    if (isNonTrivial(ReturnDCTy) || ClassTy)\\n       FO |= FunctionOptions::CxxReturnUdt;\\n-  }\\n \\n   // DISubroutineType is unnamed. Use DISubprogram's i.e. SPName in comparison.\\n   if (ClassTy && isNonTrivial(ClassTy) && SPName == ClassTy->getName()) {\"}, {\"sha\": \"7e166facf3825ca7c9df3c43b46e1f96594f32aa\", \"filename\": \"llvm/test/DebugInfo/COFF/function-options.ll\", \"status\": \"modified\", \"additions\": 272, \"deletions\": 195, \"changes\": 467, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5b3b21f0258899d03f6299fba6b4c78d7e730353/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ffunction-options.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5b3b21f0258899d03f6299fba6b4c78d7e730353/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ffunction-options.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FCOFF%2Ffunction-options.ll?ref=5b3b21f0258899d03f6299fba6b4c78d7e730353\", \"patch\": \"@@ -4,7 +4,6 @@\\n ; Command to generate function-options.ll\\n ; $ clang++ function-options.cpp -S -emit-llvm -g -gcodeview -o function-options.ll\\n ;\\n-;\\n ; #define DEFINE_FUNCTION(T) \\\\\\n ;   T Func_##T(T &arg) { return arg; }\\n ;\\n@@ -32,7 +31,11 @@\\n ; class DClass : public BClass {}; // Note: MSVC yields one compiler-generated ctor for DClass while clang doesn't.\\n ; DEFINE_FUNCTION(DClass); // Expect: FO = CxxReturnUdt\\n ;\\n-; class FClass { static int x; };\\n+; class FClass {\\n+;   static int x;\\n+;   AClass Member_AClass(AClass &);\\n+;   BClass Member_BClass(BClass &);\\n+; };\\n ; DEFINE_FUNCTION(FClass); // Expect FO = None\\n ; \\n ; struct AStruct {};\\n@@ -54,7 +57,7 @@\\n ; CHECK: CodeViewTypes [\\n ; CHECK:   Section: .debug$T ({{.*}})\\n ; CHECK:   Magic: 0x4\\n-; CHECK:   Procedure ([[SP1:.*]]) {\\n+; CHECK:   Procedure ([[SP_A:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: AClass ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -66,10 +69,10 @@\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: AClass (AClass&) ([[SP1]])\\n+; CHECK:     FunctionType: AClass (AClass&) ([[SP_A]])\\n ; CHECK:     Name: Func_AClass\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP2:.*]]) {\\n+; CHECK:   Procedure ([[SP_B:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: BClass ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -79,11 +82,11 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (BClass&) ({{.*}})\\n ; CHECK:   }\\n-; CHECK:   MemberFunction ([[MF1:.*]]) {\\n+; CHECK:   MemberFunction ([[CTOR_B:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n ; CHECK:     ReturnType: void (0x3)\\n ; CHECK:     ClassType: BClass ({{.*}})\\n-; CHECK:     ThisType: BClass* const ({{.*}})\\n+; CHECK:     ThisType: BClass* {{.*}}\\n ; CHECK:     CallingConvention: NearC (0x0)\\n ; CHECK:     FunctionOptions [ (0x2)\\n ; CHECK:       Constructor (0x2)\\n@@ -97,17 +100,17 @@\\n ; CHECK:     OneMethod {\\n ; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n ; CHECK:       AccessSpecifier: Private (0x1)\\n-; CHECK:       Type: void BClass::() ([[MF1]])\\n+; CHECK:       Type: void BClass::() ([[CTOR_B]])\\n ; CHECK:       Name: BClass\\n ; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: BClass (BClass&) ([[SP2]])\\n+; CHECK:     FunctionType: BClass (BClass&) ([[SP_B]])\\n ; CHECK:     Name: Func_BClass\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP3:.*]]) {\\n+; CHECK:   Procedure ([[SP_C1:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: C1Class ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -116,11 +119,11 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (C1Class&) ({{.*}})\\n ; CHECK:   }\\n-; CHECK:   MemberFunction ([[MF2:.*]]) {\\n+; CHECK:   MemberFunction ([[CTOR_C1:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n ; CHECK:     ReturnType: void (0x3)\\n ; CHECK:     ClassType: C1Class ({{.*}})\\n-; CHECK:     ThisType: C1Class* const ({{.*}})\\n+; CHECK:     ThisType: C1Class* {{.*}}\\n ; CHECK:     CallingConvention: NearC (0x0)\\n ; CHECK:     FunctionOptions [ (0x0)\\n ; CHECK:     ]\\n@@ -133,17 +136,17 @@\\n ; CHECK:     OneMethod {\\n ; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n ; CHECK:       AccessSpecifier: Public (0x3)\\n-; CHECK:       Type: void C1Class::() ([[MF2]])\\n+; CHECK:       Type: void C1Class::() ([[CTOR_C1]])\\n ; CHECK:       Name: C1Class\\n ; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: C1Class (C1Class&) ([[SP3]])\\n+; CHECK:     FunctionType: C1Class (C1Class&) ([[SP_C1]])\\n ; CHECK:     Name: Func_C1Class\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP4:.*]]) {\\n+; CHECK:   Procedure ([[SP_C2:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: C2Class ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -153,11 +156,11 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (C2Class&) ({{.*}})\\n ; CHECK:   }\\n-; CHECK:   MemberFunction ([[MF3:.*]]) {\\n+; CHECK:   MemberFunction ([[CTOR_C2:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n ; CHECK:     ReturnType: void (0x3)\\n ; CHECK:     ClassType: C2Class ({{.*}})\\n-; CHECK:     ThisType: C2Class* const ({{.*}})\\n+; CHECK:     ThisType: C2Class* {{.*}}\\n ; CHECK:     CallingConvention: NearC (0x0)\\n ; CHECK:     FunctionOptions [ (0x0)\\n ; CHECK:     ]\\n@@ -170,17 +173,17 @@\\n ; CHECK:     OneMethod {\\n ; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n ; CHECK:       AccessSpecifier: Public (0x3)\\n-; CHECK:       Type: void C2Class::() ([[MF3]])\\n+; CHECK:       Type: void C2Class::() ([[CTOR_C2]])\\n ; CHECK:       Name: ~C2Class\\n ; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: C2Class (C2Class&) ([[SP4]])\\n+; CHECK:     FunctionType: C2Class (C2Class&) ([[SP_C2]])\\n ; CHECK:     Name: Func_C2Class\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP5:.*]]) {\\n+; CHECK:   Procedure ([[SP_D:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: DClass ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -202,10 +205,10 @@\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: DClass (DClass&) ([[SP5]])\\n+; CHECK:     FunctionType: DClass (DClass&) ([[SP_D]])\\n ; CHECK:     Name: Func_DClass\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP6:.*]]) {\\n+; CHECK:   Procedure ([[SP_F:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: FClass ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -214,6 +217,32 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (FClass&) ({{.*}})\\n ; CHECK:   }\\n+; CHECK:   MemberFunction ([[MF_A:.*]]) {\\n+; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n+; CHECK:     ReturnType: AClass ({{.*}})\\n+; CHECK:     ClassType: FClass ({{.*}})\\n+; CHECK:     ThisType: FClass* {{.*}}\\n+; CHECK:     CallingConvention: NearC (0x0)\\n+; CHECK:     FunctionOptions [ (0x1)\\n+; CHECK:       CxxReturnUdt (0x1)\\n+; CHECK:     ]\\n+; CHECK:     NumParameters: 1\\n+; CHECK:     ArgListType: (AClass&) ({{.*}})\\n+; CHECK:     ThisAdjustment: 0\\n+; CHECK:   }\\n+; CHECK:   MemberFunction ([[MF_B:.*]]) {\\n+; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n+; CHECK:     ReturnType: BClass ({{.*}})\\n+; CHECK:     ClassType: FClass ({{.*}})\\n+; CHECK:     ThisType: FClass* {{.*}}\\n+; CHECK:     CallingConvention: NearC (0x0)\\n+; CHECK:     FunctionOptions [ (0x1)\\n+; CHECK:       CxxReturnUdt (0x1)\\n+; CHECK:     ]\\n+; CHECK:     NumParameters: 1\\n+; CHECK:     ArgListType: (BClass&) ({{.*}})\\n+; CHECK:     ThisAdjustment: 0\\n+; CHECK:   }\\n ; CHECK:   FieldList ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FIELDLIST (0x1203)\\n ; CHECK:     StaticDataMember {\\n@@ -222,14 +251,26 @@\\n ; CHECK:       Type: int (0x74)\\n ; CHECK:       Name: x\\n ; CHECK:     }\\n+; CHECK:     OneMethod {\\n+; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n+; CHECK:       AccessSpecifier: Private (0x1)\\n+; CHECK:       Type: AClass FClass::(AClass&) ([[MF_A]])\\n+; CHECK:       Name: Member_AClass\\n+; CHECK:     }\\n+; CHECK:     OneMethod {\\n+; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n+; CHECK:       AccessSpecifier: Private (0x1)\\n+; CHECK:       Type: BClass FClass::(BClass&) ([[MF_B]])\\n+; CHECK:       Name: Member_BClass\\n+; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: FClass (FClass&) ([[SP6]])\\n+; CHECK:     FunctionType: FClass (FClass&) ([[SP_F]])\\n ; CHECK:     Name: Func_FClass\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP7:.*]]) {\\n+; CHECK:   Procedure ([[SP_AS:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: AStruct ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -241,10 +282,10 @@\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: AStruct (AStruct&) ([[SP7]])\\n+; CHECK:     FunctionType: AStruct (AStruct&) ([[SP_AS]])\\n ; CHECK:     Name: Func_AStruct\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP8:.*]]) {\\n+; CHECK:   Procedure ([[SP_BS:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: BStruct ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -254,11 +295,11 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (BStruct&) ({{.*}})\\n ; CHECK:   }\\n-; CHECK:   MemberFunction ([[MF4:.*]]) {\\n+; CHECK:   MemberFunction ([[CTOR_BS:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n ; CHECK:     ReturnType: void (0x3)\\n ; CHECK:     ClassType: BStruct ({{.*}})\\n-; CHECK:     ThisType: BStruct* const ({{.*}})\\n+; CHECK:     ThisType: BStruct* {{.*}}\\n ; CHECK:     CallingConvention: NearC (0x0)\\n ; CHECK:     FunctionOptions [ (0x2)\\n ; CHECK:       Constructor (0x2)\\n@@ -272,17 +313,17 @@\\n ; CHECK:     OneMethod {\\n ; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n ; CHECK:       AccessSpecifier: Public (0x3)\\n-; CHECK:       Type: void BStruct::() ([[MF4]])\\n+; CHECK:       Type: void BStruct::() ([[CTOR_BS]])\\n ; CHECK:       Name: BStruct\\n ; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: BStruct (BStruct&) ([[SP8]])\\n+; CHECK:     FunctionType: BStruct (BStruct&) ([[SP_BS]])\\n ; CHECK:     Name: Func_BStruct\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP9:.*]]) {\\n+; CHECK:   Procedure ([[SP_AU:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: AUnion ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -294,10 +335,10 @@\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: AUnion (AUnion&) ([[SP9]])\\n+; CHECK:     FunctionType: AUnion (AUnion&) ([[SP_AU]])\\n ; CHECK:     Name: Func_AUnion\\n ; CHECK:   }\\n-; CHECK:   Procedure ([[SP10:.*]]) {\\n+; CHECK:   Procedure ([[SP_BU:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_PROCEDURE (0x1008)\\n ; CHECK:     ReturnType: BUnion ({{.*}})\\n ; CHECK:     CallingConvention: NearC (0x0)\\n@@ -306,11 +347,11 @@\\n ; CHECK:     NumParameters: 1\\n ; CHECK:     ArgListType: (BUnion&) ({{.*}})\\n ; CHECK:   }\\n-; CHECK:   MemberFunction ([[MF5:.*]]) {\\n+; CHECK:   MemberFunction ([[CTOR_BU:.*]]) {\\n ; CHECK:     TypeLeafKind: LF_MFUNCTION (0x1009)\\n ; CHECK:     ReturnType: void (0x3)\\n ; CHECK:     ClassType: BUnion ({{.*}})\\n-; CHECK:     ThisType: BUnion* const ({{.*}})\\n+; CHECK:     ThisType: BUnion* {{.*}}\\n ; CHECK:     CallingConvention: NearC (0x0)\\n ; CHECK:     FunctionOptions [ (0x0)\\n ; CHECK:     ]\\n@@ -323,23 +364,22 @@\\n ; CHECK:     OneMethod {\\n ; CHECK:       TypeLeafKind: LF_ONEMETHOD (0x1511)\\n ; CHECK:       AccessSpecifier: Public (0x3)\\n-; CHECK:       Type: void BUnion::() ([[MF5]])\\n+; CHECK:       Type: void BUnion::() ([[CTOR_BU]])\\n ; CHECK:       Name: BUnion\\n ; CHECK:     }\\n ; CHECK:   }\\n ; CHECK:   FuncId ({{.*}}) {\\n ; CHECK:     TypeLeafKind: LF_FUNC_ID (0x1601)\\n ; CHECK:     ParentScope: 0x0\\n-; CHECK:     FunctionType: BUnion (BUnion&) ([[SP10]])\\n+; CHECK:     FunctionType: BUnion (BUnion&) ([[SP_BU]])\\n ; CHECK:     Name: Func_BUnion\\n ; CHECK:   }\\n ; CHECK: ]\\n \\n-\\n-; ModuleID = 'function-options.cpp'\\n-source_filename = \\\"function-options.cpp\\\"\\n-target datalayout = \\\"e-m:w-i64:64-f80:128-n8:16:32:64-S128\\\"\\n-target triple = \\\"x86_64-pc-windows-msvc19.15.26729\\\"\\n+; ModuleID = 't.cpp'\\n+source_filename = \\\"t.cpp\\\"\\n+target datalayout = \\\"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-pc-windows-msvc19.23.28106\\\"\\n \\n %class.AClass = type { i8 }\\n %class.BClass = type { i8 }\\n@@ -358,228 +398,265 @@ entry:\\n   %retval = alloca %class.AClass, align 1\\n   %arg.addr = alloca %class.AClass*, align 8\\n   store %class.AClass* %arg, %class.AClass** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.AClass** %arg.addr, metadata !14, metadata !DIExpression()), !dbg !15\\n-  %0 = load %class.AClass*, %class.AClass** %arg.addr, align 8, !dbg !15\\n-  %coerce.dive = getelementptr inbounds %class.AClass, %class.AClass* %retval, i32 0, i32 0, !dbg !15\\n-  %1 = load i8, i8* %coerce.dive, align 1, !dbg !15\\n-  ret i8 %1, !dbg !15\\n+  call void @llvm.dbg.declare(metadata %class.AClass** %arg.addr, metadata !13, metadata !DIExpression()), !dbg !14\\n+  %0 = load %class.AClass*, %class.AClass** %arg.addr, align 8, !dbg !14\\n+  %coerce.dive = getelementptr inbounds %class.AClass, %class.AClass* %retval, i32 0, i32 0, !dbg !14\\n+  %1 = load i8, i8* %coerce.dive, align 1, !dbg !14\\n+  ret i8 %1, !dbg !14\\n }\\n \\n-; Function Attrs: nounwind readnone speculatable\\n+; Function Attrs: nounwind readnone speculatable willreturn\\n declare void @llvm.dbg.declare(metadata, metadata, metadata) #1\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_BClass@@YA?AVBClass@@AEAV1@@Z\\\"(%class.BClass* noalias sret %agg.result, %class.BClass* dereferenceable(1) %arg) #0 !dbg !16 {\\n+define dso_local void @\\\"?Func_BClass@@YA?AVBClass@@AEAV1@@Z\\\"(%class.BClass* noalias sret %agg.result, %class.BClass* dereferenceable(1) %arg) #0 !dbg !15 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %class.BClass*, align 8\\n+  %0 = bitcast %class.BClass* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %class.BClass* %arg, %class.BClass** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.BClass** %arg.addr, metadata !26, metadata !DIExpression()), !dbg !27\\n-  %0 = load %class.BClass*, %class.BClass** %arg.addr, align 8, !dbg !27\\n-  ret void, !dbg !27\\n+  call void @llvm.dbg.declare(metadata %class.BClass** %arg.addr, metadata !25, metadata !DIExpression()), !dbg !26\\n+  %1 = load %class.BClass*, %class.BClass** %arg.addr, align 8, !dbg !26\\n+  ret void, !dbg !26\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_C1Class@@YA?AVC1Class@@AEAV1@@Z\\\"(%class.C1Class* noalias sret %agg.result, %class.C1Class* dereferenceable(1) %arg) #0 !dbg !28 {\\n+define dso_local void @\\\"?Func_C1Class@@YA?AVC1Class@@AEAV1@@Z\\\"(%class.C1Class* noalias sret %agg.result, %class.C1Class* dereferenceable(1) %arg) #0 !dbg !27 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %class.C1Class*, align 8\\n+  %0 = bitcast %class.C1Class* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %class.C1Class* %arg, %class.C1Class** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.C1Class** %arg.addr, metadata !38, metadata !DIExpression()), !dbg !39\\n-  %0 = load %class.C1Class*, %class.C1Class** %arg.addr, align 8, !dbg !39\\n-  ret void, !dbg !39\\n+  call void @llvm.dbg.declare(metadata %class.C1Class** %arg.addr, metadata !37, metadata !DIExpression()), !dbg !38\\n+  %1 = load %class.C1Class*, %class.C1Class** %arg.addr, align 8, !dbg !38\\n+  ret void, !dbg !38\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_C2Class@@YA?AVC2Class@@AEAV1@@Z\\\"(%class.C2Class* noalias sret %agg.result, %class.C2Class* dereferenceable(1) %arg) #0 !dbg !40 {\\n+define dso_local void @\\\"?Func_C2Class@@YA?AVC2Class@@AEAV1@@Z\\\"(%class.C2Class* noalias sret %agg.result, %class.C2Class* dereferenceable(1) %arg) #0 !dbg !39 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %class.C2Class*, align 8\\n+  %0 = bitcast %class.C2Class* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %class.C2Class* %arg, %class.C2Class** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.C2Class** %arg.addr, metadata !50, metadata !DIExpression()), !dbg !51\\n-  %0 = load %class.C2Class*, %class.C2Class** %arg.addr, align 8, !dbg !51\\n-  ret void, !dbg !51\\n+  call void @llvm.dbg.declare(metadata %class.C2Class** %arg.addr, metadata !49, metadata !DIExpression()), !dbg !50\\n+  %1 = load %class.C2Class*, %class.C2Class** %arg.addr, align 8, !dbg !50\\n+  ret void, !dbg !50\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_DClass@@YA?AVDClass@@AEAV1@@Z\\\"(%class.DClass* noalias sret %agg.result, %class.DClass* dereferenceable(1) %arg) #0 !dbg !52 {\\n+define dso_local void @\\\"?Func_DClass@@YA?AVDClass@@AEAV1@@Z\\\"(%class.DClass* noalias sret %agg.result, %class.DClass* dereferenceable(1) %arg) #0 !dbg !51 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %class.DClass*, align 8\\n+  %0 = bitcast %class.DClass* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %class.DClass* %arg, %class.DClass** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.DClass** %arg.addr, metadata !59, metadata !DIExpression()), !dbg !60\\n-  %0 = load %class.DClass*, %class.DClass** %arg.addr, align 8, !dbg !60\\n-  ret void, !dbg !60\\n+  call void @llvm.dbg.declare(metadata %class.DClass** %arg.addr, metadata !58, metadata !DIExpression()), !dbg !59\\n+  %1 = load %class.DClass*, %class.DClass** %arg.addr, align 8, !dbg !59\\n+  ret void, !dbg !59\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local i8 @\\\"?Func_FClass@@YA?AVFClass@@AEAV1@@Z\\\"(%class.FClass* dereferenceable(1) %arg) #0 !dbg !61 {\\n+define dso_local i8 @\\\"?Func_FClass@@YA?AVFClass@@AEAV1@@Z\\\"(%class.FClass* dereferenceable(1) %arg) #0 !dbg !60 {\\n entry:\\n   %retval = alloca %class.FClass, align 1\\n   %arg.addr = alloca %class.FClass*, align 8\\n   store %class.FClass* %arg, %class.FClass** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %class.FClass** %arg.addr, metadata !69, metadata !DIExpression()), !dbg !70\\n-  %0 = load %class.FClass*, %class.FClass** %arg.addr, align 8, !dbg !70\\n-  %coerce.dive = getelementptr inbounds %class.FClass, %class.FClass* %retval, i32 0, i32 0, !dbg !70\\n-  %1 = load i8, i8* %coerce.dive, align 1, !dbg !70\\n-  ret i8 %1, !dbg !70\\n+  call void @llvm.dbg.declare(metadata %class.FClass** %arg.addr, metadata !75, metadata !DIExpression()), !dbg !76\\n+  %0 = load %class.FClass*, %class.FClass** %arg.addr, align 8, !dbg !76\\n+  %coerce.dive = getelementptr inbounds %class.FClass, %class.FClass* %retval, i32 0, i32 0, !dbg !76\\n+  %1 = load i8, i8* %coerce.dive, align 1, !dbg !76\\n+  ret i8 %1, !dbg !76\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local i8 @\\\"?Func_AStruct@@YA?AUAStruct@@AEAU1@@Z\\\"(%struct.AStruct* dereferenceable(1) %arg) #0 !dbg !71 {\\n+define dso_local i8 @\\\"?Func_AStruct@@YA?AUAStruct@@AEAU1@@Z\\\"(%struct.AStruct* dereferenceable(1) %arg) #0 !dbg !77 {\\n entry:\\n   %retval = alloca %struct.AStruct, align 1\\n   %arg.addr = alloca %struct.AStruct*, align 8\\n   store %struct.AStruct* %arg, %struct.AStruct** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %struct.AStruct** %arg.addr, metadata !76, metadata !DIExpression()), !dbg !77\\n-  %0 = load %struct.AStruct*, %struct.AStruct** %arg.addr, align 8, !dbg !77\\n-  %coerce.dive = getelementptr inbounds %struct.AStruct, %struct.AStruct* %retval, i32 0, i32 0, !dbg !77\\n-  %1 = load i8, i8* %coerce.dive, align 1, !dbg !77\\n-  ret i8 %1, !dbg !77\\n+  call void @llvm.dbg.declare(metadata %struct.AStruct** %arg.addr, metadata !82, metadata !DIExpression()), !dbg !83\\n+  %0 = load %struct.AStruct*, %struct.AStruct** %arg.addr, align 8, !dbg !83\\n+  %coerce.dive = getelementptr inbounds %struct.AStruct, %struct.AStruct* %retval, i32 0, i32 0, !dbg !83\\n+  %1 = load i8, i8* %coerce.dive, align 1, !dbg !83\\n+  ret i8 %1, !dbg !83\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_BStruct@@YA?AUBStruct@@AEAU1@@Z\\\"(%struct.BStruct* noalias sret %agg.result, %struct.BStruct* dereferenceable(1) %arg) #0 !dbg !78 {\\n+define dso_local void @\\\"?Func_BStruct@@YA?AUBStruct@@AEAU1@@Z\\\"(%struct.BStruct* noalias sret %agg.result, %struct.BStruct* dereferenceable(1) %arg) #0 !dbg !84 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %struct.BStruct*, align 8\\n+  %0 = bitcast %struct.BStruct* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %struct.BStruct* %arg, %struct.BStruct** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %struct.BStruct** %arg.addr, metadata !88, metadata !DIExpression()), !dbg !89\\n-  %0 = load %struct.BStruct*, %struct.BStruct** %arg.addr, align 8, !dbg !89\\n-  ret void, !dbg !89\\n+  call void @llvm.dbg.declare(metadata %struct.BStruct** %arg.addr, metadata !94, metadata !DIExpression()), !dbg !95\\n+  %1 = load %struct.BStruct*, %struct.BStruct** %arg.addr, align 8, !dbg !95\\n+  ret void, !dbg !95\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local i8 @\\\"?Func_AUnion@@YA?ATAUnion@@AEAT1@@Z\\\"(%union.AUnion* dereferenceable(1) %arg) #0 !dbg !90 {\\n+define dso_local i8 @\\\"?Func_AUnion@@YA?ATAUnion@@AEAT1@@Z\\\"(%union.AUnion* dereferenceable(1) %arg) #0 !dbg !96 {\\n entry:\\n   %retval = alloca %union.AUnion, align 1\\n   %arg.addr = alloca %union.AUnion*, align 8\\n   store %union.AUnion* %arg, %union.AUnion** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %union.AUnion** %arg.addr, metadata !95, metadata !DIExpression()), !dbg !96\\n-  %0 = load %union.AUnion*, %union.AUnion** %arg.addr, align 8, !dbg !96\\n-  %coerce.dive = getelementptr inbounds %union.AUnion, %union.AUnion* %retval, i32 0, i32 0, !dbg !96\\n-  %1 = load i8, i8* %coerce.dive, align 1, !dbg !96\\n-  ret i8 %1, !dbg !96\\n+  call void @llvm.dbg.declare(metadata %union.AUnion** %arg.addr, metadata !101, metadata !DIExpression()), !dbg !102\\n+  %0 = load %union.AUnion*, %union.AUnion** %arg.addr, align 8, !dbg !102\\n+  %coerce.dive = getelementptr inbounds %union.AUnion, %union.AUnion* %retval, i32 0, i32 0, !dbg !102\\n+  %1 = load i8, i8* %coerce.dive, align 1, !dbg !102\\n+  ret i8 %1, !dbg !102\\n }\\n \\n ; Function Attrs: noinline nounwind optnone uwtable\\n-define dso_local void @\\\"?Func_BUnion@@YA?ATBUnion@@AEAT1@@Z\\\"(%union.BUnion* noalias sret %agg.result, %union.BUnion* dereferenceable(1) %arg) #0 !dbg !97 {\\n+define dso_local void @\\\"?Func_BUnion@@YA?ATBUnion@@AEAT1@@Z\\\"(%union.BUnion* noalias sret %agg.result, %union.BUnion* dereferenceable(1) %arg) #0 !dbg !103 {\\n entry:\\n+  %result.ptr = alloca i8*, align 8\\n   %arg.addr = alloca %union.BUnion*, align 8\\n+  %0 = bitcast %union.BUnion* %agg.result to i8*\\n+  store i8* %0, i8** %result.ptr, align 8\\n   store %union.BUnion* %arg, %union.BUnion** %arg.addr, align 8\\n-  call void @llvm.dbg.declare(metadata %union.BUnion** %arg.addr, metadata !107, metadata !DIExpression()), !dbg !108\\n-  %0 = load %union.BUnion*, %union.BUnion** %arg.addr, align 8, !dbg !108\\n-  ret void, !dbg !108\\n+  call void @llvm.dbg.declare(metadata %union.BUnion** %arg.addr, metadata !113, metadata !DIExpression()), !dbg !114\\n+  %1 = load %union.BUnion*, %union.BUnion** %arg.addr, align 8, !dbg !114\\n+  ret void, !dbg !114\\n+}\\n+\\n+; Function Attrs: noinline norecurse nounwind optnone uwtable\\n+define dso_local i32 @main() #2 !dbg !115 {\\n+entry:\\n+  %retval = alloca i32, align 4\\n+  store i32 0, i32* %retval, align 4\\n+  ret i32 0, !dbg !118\\n }\\n \\n-attributes #0 = { noinline nounwind optnone uwtable \\\"correctly-rounded-divide-sqrt-fp-math\\\"=\\\"false\\\" \\\"disable-tail-calls\\\"=\\\"false\\\" \\\"less-precise-fpmad\\\"=\\\"false\\\" \\\"min-legal-vector-width\\\"=\\\"0\\\" \\\"frame-pointer\\\"=\\\"none\\\" \\\"no-infs-fp-math\\\"=\\\"false\\\" \\\"no-jump-tables\\\"=\\\"false\\\" \\\"no-nans-fp-math\\\"=\\\"false\\\" \\\"no-signed-zeros-fp-math\\\"=\\\"false\\\" \\\"no-trapping-math\\\"=\\\"false\\\" \\\"stack-protector-buffer-size\\\"=\\\"8\\\" \\\"target-cpu\\\"=\\\"x86-64\\\" \\\"target-features\\\"=\\\"+fxsr,+mmx,+sse,+sse2,+x87\\\" \\\"unsafe-fp-math\\\"=\\\"false\\\" \\\"use-soft-float\\\"=\\\"false\\\" }\\n-attributes #1 = { nounwind readnone speculatable }\\n+attributes #0 = { noinline nounwind optnone uwtable \\\"correctly-rounded-divide-sqrt-fp-math\\\"=\\\"false\\\" \\\"disable-tail-calls\\\"=\\\"false\\\" \\\"frame-pointer\\\"=\\\"none\\\" \\\"less-precise-fpmad\\\"=\\\"false\\\" \\\"min-legal-vector-width\\\"=\\\"0\\\" \\\"no-infs-fp-math\\\"=\\\"false\\\" \\\"no-jump-tables\\\"=\\\"false\\\" \\\"no-nans-fp-math\\\"=\\\"false\\\" \\\"no-signed-zeros-fp-math\\\"=\\\"false\\\" \\\"no-trapping-math\\\"=\\\"false\\\" \\\"stack-protector-buffer-size\\\"=\\\"8\\\" \\\"target-cpu\\\"=\\\"x86-64\\\" \\\"target-features\\\"=\\\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\\\" \\\"unsafe-fp-math\\\"=\\\"false\\\" \\\"use-soft-float\\\"=\\\"false\\\" }\\n+attributes #1 = { nounwind readnone speculatable willreturn }\\n+attributes #2 = { noinline norecurse nounwind optnone uwtable \\\"correctly-rounded-divide-sqrt-fp-math\\\"=\\\"false\\\" \\\"disable-tail-calls\\\"=\\\"false\\\" \\\"frame-pointer\\\"=\\\"none\\\" \\\"less-precise-fpmad\\\"=\\\"false\\\" \\\"min-legal-vector-width\\\"=\\\"0\\\" \\\"no-infs-fp-math\\\"=\\\"false\\\" \\\"no-jump-tables\\\"=\\\"false\\\" \\\"no-nans-fp-math\\\"=\\\"false\\\" \\\"no-signed-zeros-fp-math\\\"=\\\"false\\\" \\\"no-trapping-math\\\"=\\\"false\\\" \\\"stack-protector-buffer-size\\\"=\\\"8\\\" \\\"target-cpu\\\"=\\\"x86-64\\\" \\\"target-features\\\"=\\\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\\\" \\\"unsafe-fp-math\\\"=\\\"false\\\" \\\"use-soft-float\\\"=\\\"false\\\" }\\n \\n !llvm.dbg.cu = !{!0}\\n !llvm.module.flags = !{!3, !4, !5, !6}\\n !llvm.ident = !{!7}\\n \\n-!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: \\\"clang version 8.0.0\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, nameTableKind: None)\\n-!1 = !DIFile(filename: \\\"function-options.cpp\\\", directory: \\\"\\\\5Ctest\\\\5CDebugInfo\\\\5CCOFF\\\", checksumkind: CSK_MD5, checksum: \\\"e73e74ea0bd81174051f0a4746343e00\\\")\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: \\\"clang version 11.0.0 (https://github.com/llvm/llvm-project.git 48992717b0e3466cf8814a188e9568c9d71b59c2)\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"t.cpp\\\", directory: \\\"C:\\\\\\\\src\\\\\\\\tests\\\\\\\\duplicate-types\\\\\\\\llvm-test\\\", checksumkind: CSK_MD5, checksum: \\\"c4c61c0e2135d713d0c99a1ba9ab568b\\\")\\n !2 = !{}\\n !3 = !{i32 2, !\\\"CodeView\\\", i32 1}\\n !4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !5 = !{i32 1, !\\\"wchar_size\\\", i32 2}\\n !6 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n-!7 = !{!\\\"clang version 8.0.0\\\"}\\n-!8 = distinct !DISubprogram(name: \\\"Func_AClass\\\", linkageName: \\\"?Func_AClass@@YA?AVAClass@@AEAV1@@Z\\\", scope: !9, file: !9, line: 6, type: !10, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!9 = !DIFile(filename: \\\"function-options.cpp\\\", directory: \\\"D:\\\\5Cupstream\\\\5Cllvm\\\\5Ctest\\\\5CDebugInfo\\\\5CCOFF\\\")\\n-!10 = !DISubroutineType(types: !11)\\n-!11 = !{!12, !13}\\n-!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"AClass\\\", file: !9, line: 5, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?AVAClass@@\\\")\\n-!13 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !12, size: 64)\\n-!14 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !8, file: !9, line: 6, type: !13)\\n-!15 = !DILocation(line: 6, scope: !8)\\n-!16 = distinct !DISubprogram(name: \\\"Func_BClass\\\", linkageName: \\\"?Func_BClass@@YA?AVBClass@@AEAV1@@Z\\\", scope: !9, file: !9, line: 12, type: !17, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!17 = !DISubroutineType(types: !18)\\n-!18 = !{!19, !25}\\n-!19 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"BClass\\\", file: !9, line: 8, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !20, identifier: \\\".?AVBClass@@\\\")\\n-!20 = !{!21}\\n-!21 = !DISubprogram(name: \\\"BClass\\\", scope: !19, file: !9, line: 10, type: !22, isLocal: false, isDefinition: false, scopeLine: 10, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)\\n-!22 = !DISubroutineType(types: !23)\\n-!23 = !{null, !24}\\n-!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n-!25 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !19, size: 64)\\n-!26 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !16, file: !9, line: 12, type: !25)\\n-!27 = !DILocation(line: 12, scope: !16)\\n-!28 = distinct !DISubprogram(name: \\\"Func_C1Class\\\", linkageName: \\\"?Func_C1Class@@YA?AVC1Class@@AEAV1@@Z\\\", scope: !9, file: !9, line: 18, type: !29, isLocal: false, isDefinition: true, scopeLine: 18, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!29 = !DISubroutineType(types: !30)\\n-!30 = !{!31, !37}\\n-!31 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"C1Class\\\", file: !9, line: 14, size: 8, flags: DIFlagTypePassByValue, elements: !32, identifier: \\\".?AVC1Class@@\\\")\\n-!32 = !{!33}\\n-!33 = !DISubprogram(name: \\\"C1Class\\\", scope: !31, file: !9, line: 16, type: !34, isLocal: false, isDefinition: false, scopeLine: 16, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)\\n-!34 = !DISubroutineType(types: !35)\\n-!35 = !{null, !36}\\n-!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n-!37 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !31, size: 64)\\n-!38 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !28, file: !9, line: 18, type: !37)\\n-!39 = !DILocation(line: 18, scope: !28)\\n-!40 = distinct !DISubprogram(name: \\\"Func_C2Class\\\", linkageName: \\\"?Func_C2Class@@YA?AVC2Class@@AEAV1@@Z\\\", scope: !9, file: !9, line: 24, type: !41, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!41 = !DISubroutineType(types: !42)\\n-!42 = !{!43, !49}\\n-!43 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"C2Class\\\", file: !9, line: 20, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !44, identifier: \\\".?AVC2Class@@\\\")\\n-!44 = !{!45}\\n-!45 = !DISubprogram(name: \\\"~C2Class\\\", scope: !43, file: !9, line: 22, type: !46, isLocal: false, isDefinition: false, scopeLine: 22, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)\\n-!46 = !DISubroutineType(types: !47)\\n-!47 = !{null, !48}\\n-!48 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n-!49 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !43, size: 64)\\n-!50 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !40, file: !9, line: 24, type: !49)\\n-!51 = !DILocation(line: 24, scope: !40)\\n-!52 = distinct !DISubprogram(name: \\\"Func_DClass\\\", linkageName: \\\"?Func_DClass@@YA?AVDClass@@AEAV1@@Z\\\", scope: !9, file: !9, line: 27, type: !53, isLocal: false, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!53 = !DISubroutineType(types: !54)\\n-!54 = !{!55, !58}\\n-!55 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"DClass\\\", file: !9, line: 26, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !56, identifier: \\\".?AVDClass@@\\\")\\n-!56 = !{!57}\\n-!57 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !55, baseType: !19, flags: DIFlagPublic, extraData: i32 0)\\n-!58 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !55, size: 64)\\n-!59 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !52, file: !9, line: 27, type: !58)\\n-!60 = !DILocation(line: 27, scope: !52)\\n-!61 = distinct !DISubprogram(name: \\\"Func_FClass\\\", linkageName: \\\"?Func_FClass@@YA?AVFClass@@AEAV1@@Z\\\", scope: !9, file: !9, line: 30, type: !62, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!62 = !DISubroutineType(types: !63)\\n-!63 = !{!64, !68}\\n-!64 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"FClass\\\", file: !9, line: 29, size: 8, flags: DIFlagTypePassByValue, elements: !65, identifier: \\\".?AVFClass@@\\\")\\n-!65 = !{!66}\\n-!66 = !DIDerivedType(tag: DW_TAG_member, name: \\\"x\\\", scope: !64, file: !9, line: 29, baseType: !67, flags: DIFlagStaticMember)\\n-!67 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!68 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !64, size: 64)\\n-!69 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !61, file: !9, line: 30, type: !68)\\n-!70 = !DILocation(line: 30, scope: !61)\\n-!71 = distinct !DISubprogram(name: \\\"Func_AStruct\\\", linkageName: \\\"?Func_AStruct@@YA?AUAStruct@@AEAU1@@Z\\\", scope: !9, file: !9, line: 33, type: !72, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n+!7 = !{!\\\"clang version 11.0.0 (https://github.com/llvm/llvm-project.git 48992717b0e3466cf8814a188e9568c9d71b59c2)\\\"}\\n+!8 = distinct !DISubprogram(name: \\\"Func_AClass\\\", linkageName: \\\"?Func_AClass@@YA?AVAClass@@AEAV1@@Z\\\", scope: !1, file: !1, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!9 = !DISubroutineType(types: !10)\\n+!10 = !{!11, !12}\\n+!11 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"AClass\\\", file: !1, line: 4, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?AVAClass@@\\\")\\n+!12 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !11, size: 64)\\n+!13 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !8, file: !1, line: 5, type: !12)\\n+!14 = !DILocation(line: 5, scope: !8)\\n+!15 = distinct !DISubprogram(name: \\\"Func_BClass\\\", linkageName: \\\"?Func_BClass@@YA?AVBClass@@AEAV1@@Z\\\", scope: !1, file: !1, line: 11, type: !16, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!16 = !DISubroutineType(types: !17)\\n+!17 = !{!18, !24}\\n+!18 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"BClass\\\", file: !1, line: 7, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !19, identifier: \\\".?AVBClass@@\\\")\\n+!19 = !{!20}\\n+!20 = !DISubprogram(name: \\\"BClass\\\", scope: !18, file: !1, line: 9, type: !21, scopeLine: 9, flags: DIFlagExplicit | DIFlagPrototyped, spFlags: 0)\\n+!21 = !DISubroutineType(types: !22)\\n+!22 = !{null, !23}\\n+!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!24 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !18, size: 64)\\n+!25 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !15, file: !1, line: 11, type: !24)\\n+!26 = !DILocation(line: 11, scope: !15)\\n+!27 = distinct !DISubprogram(name: \\\"Func_C1Class\\\", linkageName: \\\"?Func_C1Class@@YA?AVC1Class@@AEAV1@@Z\\\", scope: !1, file: !1, line: 17, type: !28, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!28 = !DISubroutineType(types: !29)\\n+!29 = !{!30, !36}\\n+!30 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"C1Class\\\", file: !1, line: 13, size: 8, flags: DIFlagTypePassByValue, elements: !31, identifier: \\\".?AVC1Class@@\\\")\\n+!31 = !{!32}\\n+!32 = !DISubprogram(name: \\\"C1Class\\\", scope: !30, file: !1, line: 15, type: !33, scopeLine: 15, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)\\n+!33 = !DISubroutineType(types: !34)\\n+!34 = !{null, !35}\\n+!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!36 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !30, size: 64)\\n+!37 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !27, file: !1, line: 17, type: !36)\\n+!38 = !DILocation(line: 17, scope: !27)\\n+!39 = distinct !DISubprogram(name: \\\"Func_C2Class\\\", linkageName: \\\"?Func_C2Class@@YA?AVC2Class@@AEAV1@@Z\\\", scope: !1, file: !1, line: 23, type: !40, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!40 = !DISubroutineType(types: !41)\\n+!41 = !{!42, !48}\\n+!42 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"C2Class\\\", file: !1, line: 19, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !43, identifier: \\\".?AVC2Class@@\\\")\\n+!43 = !{!44}\\n+!44 = !DISubprogram(name: \\\"~C2Class\\\", scope: !42, file: !1, line: 21, type: !45, scopeLine: 21, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)\\n+!45 = !DISubroutineType(types: !46)\\n+!46 = !{null, !47}\\n+!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!48 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !42, size: 64)\\n+!49 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !39, file: !1, line: 23, type: !48)\\n+!50 = !DILocation(line: 23, scope: !39)\\n+!51 = distinct !DISubprogram(name: \\\"Func_DClass\\\", linkageName: \\\"?Func_DClass@@YA?AVDClass@@AEAV1@@Z\\\", scope: !1, file: !1, line: 26, type: !52, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!52 = !DISubroutineType(types: !53)\\n+!53 = !{!54, !57}\\n+!54 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"DClass\\\", file: !1, line: 25, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !55, identifier: \\\".?AVDClass@@\\\")\\n+!55 = !{!56}\\n+!56 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !54, baseType: !18, flags: DIFlagPublic, extraData: i32 0)\\n+!57 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !54, size: 64)\\n+!58 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !51, file: !1, line: 26, type: !57)\\n+!59 = !DILocation(line: 26, scope: !51)\\n+!60 = distinct !DISubprogram(name: \\\"Func_FClass\\\", linkageName: \\\"?Func_FClass@@YA?AVFClass@@AEAV1@@Z\\\", scope: !1, file: !1, line: 33, type: !61, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!61 = !DISubroutineType(types: !62)\\n+!62 = !{!63, !74}\\n+!63 = distinct !DICompositeType(tag: DW_TAG_class_type, name: \\\"FClass\\\", file: !1, line: 28, size: 8, flags: DIFlagTypePassByValue, elements: !64, identifier: \\\".?AVFClass@@\\\")\\n+!64 = !{!65, !67, !71}\\n+!65 = !DIDerivedType(tag: DW_TAG_member, name: \\\"x\\\", scope: !63, file: !1, line: 29, baseType: !66, flags: DIFlagStaticMember)\\n+!66 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!67 = !DISubprogram(name: \\\"Member_AClass\\\", linkageName: \\\"?Member_AClass@FClass@@AEAA?AVAClass@@AEAV2@@Z\\\", scope: !63, file: !1, line: 30, type: !68, scopeLine: 30, flags: DIFlagPrototyped, spFlags: 0)\\n+!68 = !DISubroutineType(types: !69)\\n+!69 = !{!11, !70, !12}\\n+!70 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!71 = !DISubprogram(name: \\\"Member_BClass\\\", linkageName: \\\"?Member_BClass@FClass@@AEAA?AVBClass@@AEAV2@@Z\\\", scope: !63, file: !1, line: 31, type: !72, scopeLine: 31, flags: DIFlagPrototyped, spFlags: 0)\\n !72 = !DISubroutineType(types: !73)\\n-!73 = !{!74, !75}\\n-!74 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"AStruct\\\", file: !9, line: 32, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?AUAStruct@@\\\")\\n-!75 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !74, size: 64)\\n-!76 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !71, file: !9, line: 33, type: !75)\\n-!77 = !DILocation(line: 33, scope: !71)\\n-!78 = distinct !DISubprogram(name: \\\"Func_BStruct\\\", linkageName: \\\"?Func_BStruct@@YA?AUBStruct@@AEAU1@@Z\\\", scope: !9, file: !9, line: 36, type: !79, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!79 = !DISubroutineType(types: !80)\\n-!80 = !{!81, !87}\\n-!81 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"BStruct\\\", file: !9, line: 35, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !82, identifier: \\\".?AUBStruct@@\\\")\\n-!82 = !{!83}\\n-!83 = !DISubprogram(name: \\\"BStruct\\\", scope: !81, file: !9, line: 35, type: !84, isLocal: false, isDefinition: false, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false)\\n-!84 = !DISubroutineType(types: !85)\\n-!85 = !{null, !86}\\n-!86 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n-!87 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !81, size: 64)\\n-!88 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !78, file: !9, line: 36, type: !87)\\n-!89 = !DILocation(line: 36, scope: !78)\\n-!90 = distinct !DISubprogram(name: \\\"Func_AUnion\\\", linkageName: \\\"?Func_AUnion@@YA?ATAUnion@@AEAT1@@Z\\\", scope: !9, file: !9, line: 39, type: !91, isLocal: false, isDefinition: true, scopeLine: 39, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!91 = !DISubroutineType(types: !92)\\n-!92 = !{!93, !94}\\n-!93 = distinct !DICompositeType(tag: DW_TAG_union_type, name: \\\"AUnion\\\", file: !9, line: 38, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?ATAUnion@@\\\")\\n-!94 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !93, size: 64)\\n-!95 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !90, file: !9, line: 39, type: !94)\\n-!96 = !DILocation(line: 39, scope: !90)\\n-!97 = distinct !DISubprogram(name: \\\"Func_BUnion\\\", linkageName: \\\"?Func_BUnion@@YA?ATBUnion@@AEAT1@@Z\\\", scope: !9, file: !9, line: 42, type: !98, isLocal: false, isDefinition: true, scopeLine: 42, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)\\n-!98 = !DISubroutineType(types: !99)\\n-!99 = !{!100, !106}\\n-!100 = distinct !DICompositeType(tag: DW_TAG_union_type, name: \\\"BUnion\\\", file: !9, line: 41, size: 8, flags: DIFlagTypePassByValue, elements: !101, identifier: \\\".?ATBUnion@@\\\")\\n-!101 = !{!102}\\n-!102 = !DISubprogram(name: \\\"BUnion\\\", scope: !100, file: !9, line: 41, type: !103, isLocal: false, isDefinition: false, scopeLine: 41, flags: DIFlagPrototyped, isOptimized: false)\\n-!103 = !DISubroutineType(types: !104)\\n-!104 = !{null, !105}\\n-!105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !100, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n-!106 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !100, size: 64)\\n-!107 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !97, file: !9, line: 42, type: !106)\\n-!108 = !DILocation(line: 42, scope: !97)\\n+!73 = !{!18, !70, !24}\\n+!74 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !63, size: 64)\\n+!75 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !60, file: !1, line: 33, type: !74)\\n+!76 = !DILocation(line: 33, scope: !60)\\n+!77 = distinct !DISubprogram(name: \\\"Func_AStruct\\\", linkageName: \\\"?Func_AStruct@@YA?AUAStruct@@AEAU1@@Z\\\", scope: !1, file: !1, line: 36, type: !78, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!78 = !DISubroutineType(types: !79)\\n+!79 = !{!80, !81}\\n+!80 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"AStruct\\\", file: !1, line: 35, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?AUAStruct@@\\\")\\n+!81 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !80, size: 64)\\n+!82 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !77, file: !1, line: 36, type: !81)\\n+!83 = !DILocation(line: 36, scope: !77)\\n+!84 = distinct !DISubprogram(name: \\\"Func_BStruct\\\", linkageName: \\\"?Func_BStruct@@YA?AUBStruct@@AEAU1@@Z\\\", scope: !1, file: !1, line: 39, type: !85, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!85 = !DISubroutineType(types: !86)\\n+!86 = !{!87, !93}\\n+!87 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"BStruct\\\", file: !1, line: 38, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !88, identifier: \\\".?AUBStruct@@\\\")\\n+!88 = !{!89}\\n+!89 = !DISubprogram(name: \\\"BStruct\\\", scope: !87, file: !1, line: 38, type: !90, scopeLine: 38, flags: DIFlagPrototyped, spFlags: 0)\\n+!90 = !DISubroutineType(types: !91)\\n+!91 = !{null, !92}\\n+!92 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !87, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!93 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !87, size: 64)\\n+!94 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !84, file: !1, line: 39, type: !93)\\n+!95 = !DILocation(line: 39, scope: !84)\\n+!96 = distinct !DISubprogram(name: \\\"Func_AUnion\\\", linkageName: \\\"?Func_AUnion@@YA?ATAUnion@@AEAT1@@Z\\\", scope: !1, file: !1, line: 42, type: !97, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!97 = !DISubroutineType(types: !98)\\n+!98 = !{!99, !100}\\n+!99 = distinct !DICompositeType(tag: DW_TAG_union_type, name: \\\"AUnion\\\", file: !1, line: 41, size: 8, flags: DIFlagTypePassByValue, elements: !2, identifier: \\\".?ATAUnion@@\\\")\\n+!100 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !99, size: 64)\\n+!101 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !96, file: !1, line: 42, type: !100)\\n+!102 = !DILocation(line: 42, scope: !96)\\n+!103 = distinct !DISubprogram(name: \\\"Func_BUnion\\\", linkageName: \\\"?Func_BUnion@@YA?ATBUnion@@AEAT1@@Z\\\", scope: !1, file: !1, line: 45, type: !104, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!104 = !DISubroutineType(types: !105)\\n+!105 = !{!106, !112}\\n+!106 = distinct !DICompositeType(tag: DW_TAG_union_type, name: \\\"BUnion\\\", file: !1, line: 44, size: 8, flags: DIFlagTypePassByValue, elements: !107, identifier: \\\".?ATBUnion@@\\\")\\n+!107 = !{!108}\\n+!108 = !DISubprogram(name: \\\"BUnion\\\", scope: !106, file: !1, line: 44, type: !109, scopeLine: 44, flags: DIFlagPrototyped, spFlags: 0)\\n+!109 = !DISubroutineType(types: !110)\\n+!110 = !{null, !111}\\n+!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)\\n+!112 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !106, size: 64)\\n+!113 = !DILocalVariable(name: \\\"arg\\\", arg: 1, scope: !103, file: !1, line: 45, type: !112)\\n+!114 = !DILocation(line: 45, scope: !103)\\n+!115 = distinct !DISubprogram(name: \\\"main\\\", scope: !1, file: !1, line: 47, type: !116, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\\n+!116 = !DISubroutineType(types: !117)\\n+!117 = !{!66}\\n+!118 = !DILocation(line: 48, scope: !115)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kMjkxYmQ1MTBlNmE0ZTYyNTk0MTg2Y2I4ZjNkZGMxOGFjZjJlZTFhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a", "content": "{\"sha\": \"d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZDI5MWJkNTEwZTZhNGU2MjU5NDE4NmNiOGYzZGRjMThhY2YyZWUxYQ==\", \"commit\": {\"author\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2020-05-01T15:16:38Z\"}, \"committer\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2020-06-24T17:51:24Z\"}, \"message\": \"[WPD] Allow virtual calls to be analyzed with multiple type tests\\n\\nSummary:\\nIn D52514 I had fixed a bug with WPD after indirect call promotion, by\\nchecking that a type test being analyzed dominates potential virtual\\ncalls. With that fix I included a small effiency enhancement to avoid\\nprocessing a devirt candidate multiple times (when there are multiple\\ntype tests). This latter change wasn't in response to any measured\\nefficiency issues, it was merely theoretical. Unfortuantely, it turns\\nout to limit optimization opportunities after inlining.\\n\\nSpecifically, consider code that looks like:\\n\\nclass A {\\n  virtual void foo();\\n};\\nclass B : public A {\\n  void foo();\\n}\\nvoid callee(A *a) {\\n  a->foo(); // Call 1\\n}\\nvoid caller(B *b) {\\n  b->foo(); // Call 2\\n  callee(b);\\n}\\n\\nAfter inlining callee into caller, because of the existing call to\\nb->foo() in caller there will be 2 type tests in caller for the vtable\\npointer of b: the original type test against B from Call 2, and the\\ninlined type test against A from Call 1. If the code was compiled with\\n-fstrict-vtable-pointers, then after optimization WPD will see that\\nboth type tests are associated with the inlined virtual Call 1.\\nWith my earlier change to only process a virtual call against one type\\ntest, we may only consider virtual Call 1 against the base class A type\\ntest, which can't be devirtualized. With my change here to remove this\\nrestriction, it also gets considered for the type test against the\\nderived class B type test, where it can be devirtualized.\\n\\nNote that if caller didn't include it's own earlier virtual call\\nb->foo() we will not be able to devirtualize after inlining callee even\\nafter this fix, since there would not be a type test against B in the\\nIR. As a future enhancement we can consider inserting type tests at call\\nsites that pass pointers to classes with virtual calls, to enable\\ncontext-sensitive devirtualization after inlining.\\n\\nReviewers: pcc, vitalybuka, evgeny777\\n\\nSubscribers: Prazek, hiraditya, steven_wu, dexonsmith, llvm-commits\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D79235\", \"tree\": {\"sha\": \"44a699ee266f0f72bd2544e5eb23ab6f5f41303c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/44a699ee266f0f72bd2544e5eb23ab6f5f41303c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a/comments\", \"author\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8dc92142e3c5332d741aff4bc81ee6aeed7784b2\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8dc92142e3c5332d741aff4bc81ee6aeed7784b2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8dc92142e3c5332d741aff4bc81ee6aeed7784b2\"}], \"stats\": {\"total\": 92, \"additions\": 82, \"deletions\": 10}, \"files\": [{\"sha\": \"ccffbbd0d175d6de66c65f038cb9c877bc0a4d13\", \"filename\": \"llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 10, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a/llvm%2Flib%2FTransforms%2FIPO%2FWholeProgramDevirt.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a/llvm%2Flib%2FTransforms%2FIPO%2FWholeProgramDevirt.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FWholeProgramDevirt.cpp?ref=d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"patch\": \"@@ -1713,7 +1713,6 @@ void DevirtModule::scanTypeTestUsers(Function *TypeTestFunc) {\\n   // points to a member of the type identifier %md. Group calls by (type ID,\\n   // offset) pair (effectively the identity of the virtual function) and store\\n   // to CallSlots.\\n-  DenseSet<CallBase *> SeenCallSites;\\n   for (auto I = TypeTestFunc->use_begin(), E = TypeTestFunc->use_end();\\n        I != E;) {\\n     auto CI = dyn_cast<CallInst>(I->getUser());\\n@@ -1732,15 +1731,8 @@ void DevirtModule::scanTypeTestUsers(Function *TypeTestFunc) {\\n       Metadata *TypeId =\\n           cast<MetadataAsValue>(CI->getArgOperand(1))->getMetadata();\\n       Value *Ptr = CI->getArgOperand(0)->stripPointerCasts();\\n-      for (DevirtCallSite Call : DevirtCalls) {\\n-        // Only add this CallSite if we haven't seen it before. The vtable\\n-        // pointer may have been CSE'd with pointers from other call sites,\\n-        // and we don't want to process call sites multiple times. We can't\\n-        // just skip the vtable Ptr if it has been seen before, however, since\\n-        // it may be shared by type tests that dominate different calls.\\n-        if (SeenCallSites.insert(&Call.CB).second)\\n-          CallSlots[{TypeId, Call.Offset}].addCallSite(Ptr, Call.CB, nullptr);\\n-      }\\n+      for (DevirtCallSite Call : DevirtCalls)\\n+        CallSlots[{TypeId, Call.Offset}].addCallSite(Ptr, Call.CB, nullptr);\\n     }\\n \\n     // We no longer need the assumes or the type test.\"}, {\"sha\": \"d5524b44286ea95daf38cd189bdf83e8d7d7ec9a\", \"filename\": \"llvm/test/ThinLTO/X86/devirt_multiple_type_test.ll\", \"status\": \"added\", \"additions\": 80, \"deletions\": 0, \"changes\": 80, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a/llvm%2Ftest%2FThinLTO%2FX86%2Fdevirt_multiple_type_test.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d291bd510e6a4e62594186cb8f3ddc18acf2ee1a/llvm%2Ftest%2FThinLTO%2FX86%2Fdevirt_multiple_type_test.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Fdevirt_multiple_type_test.ll?ref=d291bd510e6a4e62594186cb8f3ddc18acf2ee1a\", \"patch\": \"@@ -0,0 +1,80 @@\\n+; Test to ensure that devirtualization will succeed when there is an earlier\\n+; type test also corresponding to the same vtable (when indicated by invariant\\n+; load metadata), that provides a more refined type. This could happen in\\n+; after inlining into a caller passing a derived type.\\n+\\n+; RUN: opt -module-summary %s -o %t.o\\n+; RUN: llvm-lto2 run -o %t.out %t.o \\\\\\n+; RUN:\\t -pass-remarks=wholeprogramdevirt \\\\\\n+; RUN:\\t -r %t.o,_ZN1A3fooEv,px \\\\\\n+; RUN:\\t -r %t.o,_ZN1B3fooEv,px \\\\\\n+; RUN:\\t -r %t.o,_Z6callerP1B,px \\\\\\n+; RUN:\\t -r %t.o,_ZTV1A,px \\\\\\n+; RUN:\\t -r %t.o,_ZTV1B,px \\\\\\n+; RUN:\\t -save-temps 2>&1 | FileCheck %s\\n+\\n+; CHECK-COUNT-2: single-impl: devirtualized a call to _ZN1B3fooEv\\n+\\n+; RUN: llvm-dis %t.out.1.4.opt.bc -o - | FileCheck %s --check-prefix=IR\\n+; IR-NOT: tail call void %\\n+\\n+; ModuleID = 'devirt_multiple_type_test.o'\\n+source_filename = \\\"devirt_multiple_type_test.cc\\\"\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+%class.A = type { i32 (...)** }\\n+%class.B = type { %class.A }\\n+\\n+@_ZTV1A = hidden unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* undef, i8* bitcast (void (%class.A*)* @_ZN1A3fooEv to i8*)] }, align 8, !type !0, !vcall_visibility !2\\n+@_ZTV1B = hidden unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* undef, i8* bitcast (void (%class.B*)* @_ZN1B3fooEv to i8*)] }, align 8, !type !0, !type !3, !vcall_visibility !2\\n+\\n+declare void @_ZN1A3fooEv(%class.A* nocapture %this)\\n+\\n+define hidden void @_ZN1B3fooEv(%class.B* nocapture %this) {\\n+entry:\\n+  ret void\\n+}\\n+\\n+; Function Attrs: nounwind readnone willreturn\\n+declare i1 @llvm.type.test(i8*, metadata)\\n+\\n+; Function Attrs: nounwind willreturn\\n+declare void @llvm.assume(i1)\\n+\\n+; Function Attrs: uwtable\\n+define hidden void @_Z6callerP1B(%class.B* %b) local_unnamed_addr {\\n+entry:\\n+  %0 = bitcast %class.B* %b to void (%class.B*)***\\n+  %vtable = load void (%class.B*)**, void (%class.B*)*** %0, align 8, !tbaa !12, !invariant.group !15\\n+  %1 = bitcast void (%class.B*)** %vtable to i8*\\n+  %2 = tail call i1 @llvm.type.test(i8* %1, metadata !\\\"_ZTS1B\\\")\\n+  tail call void @llvm.assume(i1 %2)\\n+  %3 = load void (%class.B*)*, void (%class.B*)** %vtable, align 8, !invariant.load !15\\n+  tail call void %3(%class.B* %b)\\n+  %4 = getelementptr %class.B, %class.B* %b, i64 0, i32 0\\n+  %5 = bitcast void (%class.B*)** %vtable to i8*\\n+  %6 = tail call i1 @llvm.type.test(i8* nonnull %5, metadata !\\\"_ZTS1A\\\")\\n+  tail call void @llvm.assume(i1 %6)\\n+  %7 = bitcast void (%class.B*)* %3 to void (%class.A*)*\\n+  tail call void %7(%class.A* %4)\\n+  ret void\\n+}\\n+\\n+!llvm.module.flags = !{!5, !6, !8, !9, !10}\\n+!llvm.ident = !{!11}\\n+\\n+!0 = !{i64 16, !\\\"_ZTS1A\\\"}\\n+!2 = !{i64 1}\\n+!3 = !{i64 16, !\\\"_ZTS1B\\\"}\\n+!5 = !{i32 1, !\\\"StrictVTablePointers\\\", i32 1}\\n+!6 = !{i32 3, !\\\"StrictVTablePointersRequirement\\\", !7}\\n+!7 = !{!\\\"StrictVTablePointers\\\", i32 1}\\n+!8 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!9 = !{i32 1, !\\\"Virtual Function Elim\\\", i32 0}\\n+!10 = !{i32 1, !\\\"EnableSplitLTOUnit\\\", i32 0}\\n+!11 = !{!\\\"clang version 11.0.0 (https://github.com/llvm/llvm-project.git 85247c1e898f88d65154b9a437b4bd83fcad8d52)\\\"}\\n+!12 = !{!13, !13, i64 0}\\n+!13 = !{!\\\"vtable pointer\\\", !14, i64 0}\\n+!14 = !{!\\\"Simple C++ TBAA\\\"}\\n+!15 = !{}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82NjA1NTIzMGJmNjY3M2I3NmU3MzMwZmVmNzZkNzUyYTFlYTg2MzhlIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/66055230bf6673b76e7330fef76d752a1ea8638e", "content": "{\"sha\": \"66055230bf6673b76e7330fef76d752a1ea8638e\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NjYwNTUyMzBiZjY2NzNiNzZlNzMzMGZlZjc2ZDc1MmExZWE4NjM4ZQ==\", \"commit\": {\"author\": {\"name\": \"Fangrui Song\", \"email\": \"maskray@google.com\", \"date\": \"2020-05-07T21:00:24Z\"}, \"committer\": {\"name\": \"Fangrui Song\", \"email\": \"maskray@google.com\", \"date\": \"2020-05-12T21:14:17Z\"}, \"message\": \"[TargetLoweringObjectFileImpl] Produce .text.hot. instead of .text.hot for -fno-unique-section-names\\n\\nGNU ld's internal linker script uses (https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=add44f8d5c5c05e08b11e033127a744d61c26aee)\\n\\n  .text           :\\n  {\\n    *(.text.unlikely .text.*_unlikely .text.unlikely.*)\\n    *(.text.exit .text.exit.*)\\n    *(.text.startup .text.startup.*)\\n    *(.text.hot .text.hot.*)\\n    *(SORT(.text.sorted.*))\\n    *(.text .stub .text.* .gnu.linkonce.t.*)\\n    /* .gnu.warning sections are handled specially by elf.em.  */\\n    *(.gnu.warning)\\n  }\\n\\nBecause `*(.text.exit .text.exit.*)` is ordered before `*(.text .text.*)`, in a -ffunction-sections build, the C library function `exit` will be placed before other functions.\\ngold's `-z keep-text-section-prefix` has the same problem.\\n\\nIn lld, `-z keep-text-section-prefix` recognizes `.text.{exit,hot,startup,unlikely,unknown}.*`, but not `.text.{exit,hot,startup,unlikely,unknown}`, to avoid the strange placement problem.\\n\\nIn -fno-function-sections or -fno-unique-section-names mode, a function whose `function_section_prefix` is set to `.exit\\\"`\\nwill go to the output section `.text` instead of `.text.exit` when linked by lld.\\nTo address the problem, append a dot to become `.text.exit.`\\n\\nReviewed By: grimar\\n\\nDifferential Revision: https://reviews.llvm.org/D79600\", \"tree\": {\"sha\": \"87540864beaf46ee8f5e6a4d66029f7b85a93e5d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/87540864beaf46ee8f5e6a4d66029f7b85a93e5d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/66055230bf6673b76e7330fef76d752a1ea8638e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/66055230bf6673b76e7330fef76d752a1ea8638e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/66055230bf6673b76e7330fef76d752a1ea8638e\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/66055230bf6673b76e7330fef76d752a1ea8638e/comments\", \"author\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"363393c4b35997c67e6b282bd2be9022a7bfed25\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/363393c4b35997c67e6b282bd2be9022a7bfed25\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/363393c4b35997c67e6b282bd2be9022a7bfed25\"}], \"stats\": {\"total\": 14, \"additions\": 12, \"deletions\": 2}, \"files\": [{\"sha\": \"a3bfd650d4b33341840bb8176e385635fb90902b\", \"filename\": \"llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/66055230bf6673b76e7330fef76d752a1ea8638e/llvm%2Flib%2FCodeGen%2FTargetLoweringObjectFileImpl.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/66055230bf6673b76e7330fef76d752a1ea8638e/llvm%2Flib%2FCodeGen%2FTargetLoweringObjectFileImpl.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FTargetLoweringObjectFileImpl.cpp?ref=66055230bf6673b76e7330fef76d752a1ea8638e\", \"patch\": \"@@ -611,15 +611,19 @@ getELFSectionNameForGlobal(const GlobalObject *GO, SectionKind Kind,\\n     Name = getSectionPrefixForGlobal(Kind);\\n   }\\n \\n+  bool HasPrefix = false;\\n   if (const auto *F = dyn_cast<Function>(GO)) {\\n-    if (Optional<StringRef> Prefix = F->getSectionPrefix())\\n+    if (Optional<StringRef> Prefix = F->getSectionPrefix()) {\\n       Name += *Prefix;\\n+      HasPrefix = true;\\n+    }\\n   }\\n \\n   if (UniqueSectionName) {\\n     Name.push_back('.');\\n     TM.getNameWithPrefix(Name, GO, Mang, /*MayAlwaysUsePrivate*/true);\\n-  }\\n+  } else if (HasPrefix)\\n+    Name.push_back('.');\\n   return Name;\\n }\\n \"}, {\"sha\": \"4347f5761a460a89c72ad88f44de41d15738f6d0\", \"filename\": \"llvm/test/Transforms/CodeGenPrepare/X86/section.ll\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/66055230bf6673b76e7330fef76d752a1ea8638e/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Fsection.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/66055230bf6673b76e7330fef76d752a1ea8638e/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Fsection.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FCodeGenPrepare%2FX86%2Fsection.ll?ref=66055230bf6673b76e7330fef76d752a1ea8638e\", \"patch\": \"@@ -1,10 +1,14 @@\\n ; RUN: opt < %s -codegenprepare -S | FileCheck %s\\n+; RUN: llc < %s | FileCheck --check-prefix=ASM1 %s\\n+; RUN: llc < %s -function-sections | FileCheck --check-prefix=ASM2 %s\\n \\n target triple = \\\"x86_64-pc-linux-gnu\\\"\\n \\n ; This tests that hot/cold functions get correct section prefix assigned\\n \\n ; CHECK: hot_func1{{.*}}!section_prefix ![[HOT_ID:[0-9]+]]\\n+; ASM1: .section .text.hot.,\\\"ax\\\",@progbits\\n+; ASM2: .section .text.hot.hot_func1,\\\"ax\\\",@progbits\\n ; The entry is hot\\n define void @hot_func1() !prof !15 {\\n   ret void\\n@@ -40,6 +44,8 @@ for.end:\\n ; not call site VP metadata (which can exist on value profiled memcpy,\\n ; or possibly left behind after static analysis based devirtualization).\\n ; CHECK: cold_func1{{.*}}!section_prefix ![[COLD_ID:[0-9]+]]\\n+; ASM1: .section .text.unlikely.,\\\"ax\\\",@progbits\\n+; ASM2: .section .text.unlikely.cold_func1,\\\"ax\\\",@progbits\\n define void @cold_func1() !prof !16 {\\n   call void @hot_func1(), !prof !17\\n   call void @hot_func1(), !prof !17\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mZGU4ZWIwMGUxNDY2Y2VjZDBmYzY2OTdmOGMyYWI4MzdjNWI3Y2YzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3", "content": "{\"sha\": \"fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZmRlOGViMDBlMTQ2NmNlY2QwZmM2Njk3ZjhjMmFiODM3YzViN2NmMw==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2020-05-17T18:58:55Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2020-05-17T19:53:03Z\"}, \"message\": \"[InstCombine] visitMaskedMerge(): when unfolding, sanitize undef constants (PR45955)\\n\\nWe can't leave undef vector element constants as-is,\\nit is a miscompile, so we need to sanitize them.\\n\\nWe have two vectors (C and ~C):\\n* We can't replace undef with 0 in both of them\\n* We can't replace undef with 0 in only one of them\\n* We could replace undef with -1 in both of them\\n* We could replace undef with -1 in only one(!) of them\\n* We could replace undef with -1 in one and 0 in another one of them.\\n\\nTherefore, it seems best to go with the last option, since otherwise\\nwe'd loose knowledge that C and ~C have no common bits set,\\nwhich seems more important than preserving partial undef knowledge.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=45955\", \"tree\": {\"sha\": \"d031f06c3ab59ab83ebd12cfec918ee2e578bf08\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d031f06c3ab59ab83ebd12cfec918ee2e578bf08\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAl7Blh8ACgkQCDw+u0oW\\nieCOBQ/9HkZlK2nfArEtsvzmmq2nMtmZxcbmPeq14EQuQNUsP5882lcRfDs/07zV\\nwYetgRb7x2uvZtpJdoLkCLFEAwdsCbHi63BTJlJFo807U19FoZ/h4TcIb3F5+7cW\\n91V2yCPWJzw7ZouK3b7K7OxAAachwZy7zTG/HWJgXwBk2u6hD5KiGJkIdMVqlLyk\\nfz9mM74q401lLEfSzaT6hm8742Dm9nQv0TEmhOxxBgY6wlxotLZ1GzFDC8reoGp+\\n4f8ci2WCbFmknOSd6K8NYTlZo4OgR1pU2awLclVhbRvvNmZ/1ZNpkbliYUB0FQQz\\npWftexd8T1UAztyNj9HHUqEpIZ/+oD+hoH6oRkbKEh2rY2pJ/pFK6zChfAiPmXCM\\n/rIr+mgYpMJ2UUm87bfsM634wldeWO/pg6uggj9J+XpnvkwF3ftmz6ubdoS1X1gs\\nGZS4Hh6fxjCl5zs1feFJGmknI99dOeM2Lv3MmtXHhFjgpY53XbbVdhuxiQCYJ2zb\\nEzn4T56egps2gOHe4YoyZR9fal7dwBPunqi0m2FXXPRgzgbF+V8juw/6bZhuxQhS\\nUE5D1T8/caoz4dfywP17aJQ7jJ1B08ucnclwTE34ouDFxntE6od44a9QfQ7YHH9Q\\nVfW9gMzODWQ3zPR3jDzPVWd0cplP8yRRqSi0IMu6SAzHkddPrFA=\\n=Fwcx\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree d031f06c3ab59ab83ebd12cfec918ee2e578bf08\\nparent a055e3856f813f73d82e992cfe78dcdb918a39c5\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1589741935 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1589745183 +0300\\n\\n[InstCombine] visitMaskedMerge(): when unfolding, sanitize undef constants (PR45955)\\n\\nWe can't leave undef vector element constants as-is,\\nit is a miscompile, so we need to sanitize them.\\n\\nWe have two vectors (C and ~C):\\n* We can't replace undef with 0 in both of them\\n* We can't replace undef with 0 in only one of them\\n* We could replace undef with -1 in both of them\\n* We could replace undef with -1 in only one(!) of them\\n* We could replace undef with -1 in one and 0 in another one of them.\\n\\nTherefore, it seems best to go with the last option, since otherwise\\nwe'd loose knowledge that C and ~C have no common bits set,\\nwhich seems more important than preserving partial undef knowledge.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=45955\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a055e3856f813f73d82e992cfe78dcdb918a39c5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a055e3856f813f73d82e992cfe78dcdb918a39c5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a055e3856f813f73d82e992cfe78dcdb918a39c5\"}], \"stats\": {\"total\": 13, \"additions\": 8, \"deletions\": 5}, \"files\": [{\"sha\": \"35dcb739364be4f60715c8163d5cf898143586c8\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineAndOrXor.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineAndOrXor.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineAndOrXor.cpp?ref=fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"patch\": \"@@ -3049,6 +3049,9 @@ static Instruction *visitMaskedMerge(BinaryOperator &I,\\n \\n   Constant *C;\\n   if (D->hasOneUse() && match(M, m_Constant(C))) {\\n+    // Propagating undef is unsafe. Clamp undef elements to -1.\\n+    Type *EltTy = C->getType()->getScalarType();\\n+    C = Constant::replaceUndefsWith(C, ConstantInt::getAllOnesValue(EltTy));\\n     // Unfold.\\n     Value *LHS = Builder.CreateAnd(X, C);\\n     Value *NotC = Builder.CreateNot(C);\"}, {\"sha\": \"4f92514afc87c2b0d35feeb908712a5f886eb0be\", \"filename\": \"llvm/test/Transforms/InstCombine/unfold-masked-merge-with-const-mask-vector.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3/llvm%2Ftest%2FTransforms%2FInstCombine%2Funfold-masked-merge-with-const-mask-vector.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3/llvm%2Ftest%2FTransforms%2FInstCombine%2Funfold-masked-merge-with-const-mask-vector.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Funfold-masked-merge-with-const-mask-vector.ll?ref=fde8eb00e1466cecd0fc6697f8c2ab837c5b7cf3\", \"patch\": \"@@ -21,8 +21,8 @@ define <2 x i4> @splat (<2 x i4> %x, <2 x i4> %y) {\\n \\n define <3 x i4> @splat_undef (<3 x i4> %x, <3 x i4> %y) {\\n ; CHECK-LABEL: @splat_undef(\\n-; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[X:%.*]], <i4 -2, i4 undef, i4 -2>\\n-; CHECK-NEXT:    [[TMP2:%.*]] = and <3 x i4> [[Y:%.*]], <i4 1, i4 undef, i4 1>\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[X:%.*]], <i4 -2, i4 -1, i4 -2>\\n+; CHECK-NEXT:    [[TMP2:%.*]] = and <3 x i4> [[Y:%.*]], <i4 1, i4 0, i4 1>\\n ; CHECK-NEXT:    [[R:%.*]] = or <3 x i4> [[TMP1]], [[TMP2]]\\n ; CHECK-NEXT:    ret <3 x i4> [[R]]\\n ;\\n@@ -85,8 +85,8 @@ define <2 x i4> @in_constant_varx_14_nonsplat(<2 x i4> %x, <2 x i4> %mask) {\\n \\n define <3 x i4> @in_constant_varx_14_undef(<3 x i4> %x, <3 x i4> %mask) {\\n ; CHECK-LABEL: @in_constant_varx_14_undef(\\n-; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[X:%.*]], <i4 1, i4 undef, i4 1>\\n-; CHECK-NEXT:    [[R:%.*]] = or <3 x i4> [[TMP1]], <i4 -2, i4 undef, i4 6>\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[X:%.*]], <i4 1, i4 -1, i4 1>\\n+; CHECK-NEXT:    [[R:%.*]] = or <3 x i4> [[TMP1]], <i4 -2, i4 0, i4 6>\\n ; CHECK-NEXT:    ret <3 x i4> [[R]]\\n ;\\n   %n0 = xor <3 x i4> %x, <i4 14, i4 undef, i4 7> ; %x\\n@@ -133,7 +133,7 @@ define <2 x i4> @in_constant_14_vary_nonsplat(<2 x i4> %y, <2 x i4> %mask) {\\n \\n define <3 x i4> @in_constant_14_vary_undef(<3 x i4> %y, <3 x i4> %mask) {\\n ; CHECK-LABEL: @in_constant_14_vary_undef(\\n-; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[Y:%.*]], <i4 -2, i4 undef, i4 -2>\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and <3 x i4> [[Y:%.*]], <i4 -2, i4 0, i4 -2>\\n ; CHECK-NEXT:    [[R:%.*]] = or <3 x i4> [[TMP1]], <i4 0, i4 undef, i4 1>\\n ; CHECK-NEXT:    ret <3 x i4> [[R]]\\n ;\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hOWZlNjljMzU5ZGU2NTMwMTVjMzllNDEzZTQ4NjMwZDA2OWFiZTI3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/a9fe69c359de653015c39e413e48630d069abe27", "content": "{\"sha\": \"a9fe69c359de653015c39e413e48630d069abe27\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YTlmZTY5YzM1OWRlNjUzMDE1YzM5ZTQxM2U0ODYzMGQwNjlhYmUyNw==\", \"commit\": {\"author\": {\"name\": \"Dorit Nuzman\", \"email\": \"dorit.nuzman@intel.com\", \"date\": \"2020-06-03T17:11:54Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2020-06-03T17:44:29Z\"}, \"message\": \"[InstSimplify] fix bug in matching or-with-not op (PR46083)\", \"tree\": {\"sha\": \"a20e991d3dd71c73d21583746871ebb765d25499\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a20e991d3dd71c73d21583746871ebb765d25499\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/a9fe69c359de653015c39e413e48630d069abe27\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a9fe69c359de653015c39e413e48630d069abe27\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a9fe69c359de653015c39e413e48630d069abe27\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a9fe69c359de653015c39e413e48630d069abe27/comments\", \"author\": {\"login\": \"dnuzman\", \"id\": 56710968, \"node_id\": \"MDQ6VXNlcjU2NzEwOTY4\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/56710968?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/dnuzman\", \"html_url\": \"https://github.com/dnuzman\", \"followers_url\": \"https://api.github.com/users/dnuzman/followers\", \"following_url\": \"https://api.github.com/users/dnuzman/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/dnuzman/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/dnuzman/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/dnuzman/subscriptions\", \"organizations_url\": \"https://api.github.com/users/dnuzman/orgs\", \"repos_url\": \"https://api.github.com/users/dnuzman/repos\", \"events_url\": \"https://api.github.com/users/dnuzman/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/dnuzman/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f5415f7c5a06e8563c650a3ecfd6435d36ca3a66\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f5415f7c5a06e8563c650a3ecfd6435d36ca3a66\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f5415f7c5a06e8563c650a3ecfd6435d36ca3a66\"}], \"stats\": {\"total\": 12, \"additions\": 3, \"deletions\": 9}, \"files\": [{\"sha\": \"63f5453066301d50bf86f7c51d87cb403c2123bd\", \"filename\": \"llvm/lib/Analysis/InstructionSimplify.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a9fe69c359de653015c39e413e48630d069abe27/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a9fe69c359de653015c39e413e48630d069abe27/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp?ref=a9fe69c359de653015c39e413e48630d069abe27\", \"patch\": \"@@ -2195,7 +2195,7 @@ static Value *SimplifyOrInst(Value *Op0, Value *Op1, const SimplifyQuery &Q,\\n     return Constant::getAllOnesValue(Op1->getType());\\n \\n   // A | ~(A & ?) = -1\\n-  if (match(Op1, m_Not(m_c_And(m_Specific(Op1), m_Value()))))\\n+  if (match(Op1, m_Not(m_c_And(m_Specific(Op0), m_Value()))))\\n     return Constant::getAllOnesValue(Op0->getType());\\n \\n   Value *A, *B;\"}, {\"sha\": \"e4c4153d62b2592e1e527a5116dc79d005e56b1b\", \"filename\": \"llvm/test/Transforms/InstSimplify/or.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 8, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a9fe69c359de653015c39e413e48630d069abe27/llvm%2Ftest%2FTransforms%2FInstSimplify%2For.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a9fe69c359de653015c39e413e48630d069abe27/llvm%2Ftest%2FTransforms%2FInstSimplify%2For.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstSimplify%2For.ll?ref=a9fe69c359de653015c39e413e48630d069abe27\", \"patch\": \"@@ -248,10 +248,7 @@ define <2 x i399> @test8_apint(<2 x i399> %V, <2 x i399> %M) {\\n \\n define i1 @or_with_not_op_commute1(i1 %a, i1 %b) {\\n ; CHECK-LABEL: @or_with_not_op_commute1(\\n-; CHECK-NEXT:    [[AB:%.*]] = and i1 [[A:%.*]], [[B:%.*]]\\n-; CHECK-NEXT:    [[NOT:%.*]] = xor i1 [[AB]], true\\n-; CHECK-NEXT:    [[R:%.*]] = or i1 [[A]], [[NOT]]\\n-; CHECK-NEXT:    ret i1 [[R]]\\n+; CHECK-NEXT:    ret i1 true\\n ;\\n   %ab = and i1 %a, %b\\n   %not = xor i1 %ab, -1\\n@@ -263,10 +260,7 @@ define i1 @or_with_not_op_commute1(i1 %a, i1 %b) {\\n \\n define i8 @or_with_not_op_commute2(i8 %a, i8 %b) {\\n ; CHECK-LABEL: @or_with_not_op_commute2(\\n-; CHECK-NEXT:    [[AB:%.*]] = and i8 [[B:%.*]], [[A:%.*]]\\n-; CHECK-NEXT:    [[NOT:%.*]] = xor i8 [[AB]], -1\\n-; CHECK-NEXT:    [[R:%.*]] = or i8 [[A]], [[NOT]]\\n-; CHECK-NEXT:    ret i8 [[R]]\\n+; CHECK-NEXT:    ret i8 -1\\n ;\\n   %ab = and i8 %b, %a\\n   %not = xor i8 %ab, -1\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80YzczNTQzOWZkOWEwY2ZlYTlhZTM2NmRmOGIzNjI4MTQzNmQ0NzA4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/4c735439fd9a0cfea9ae366df8b36281436d4708", "content": "{\"sha\": \"4c735439fd9a0cfea9ae366df8b36281436d4708\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NGM3MzU0MzlmZDlhMGNmZWE5YWUzNjZkZjhiMzYyODE0MzZkNDcwOA==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2020-06-05T01:15:04Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2020-06-05T01:15:58Z\"}, \"message\": \"[Statepoint] Migrate a few tests to gc-live bundle format and fix assert\\n\\nThe assert was missed in 0e7c7705, migrating the test revealed the problem.\", \"tree\": {\"sha\": \"a1d78fff0f2233506d44c16203e25a05bc0c64db\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a1d78fff0f2233506d44c16203e25a05bc0c64db\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/4c735439fd9a0cfea9ae366df8b36281436d4708\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4c735439fd9a0cfea9ae366df8b36281436d4708\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4c735439fd9a0cfea9ae366df8b36281436d4708\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4c735439fd9a0cfea9ae366df8b36281436d4708/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"198762680e1e66518ee531c9cce5bf1933accea3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/198762680e1e66518ee531c9cce5bf1933accea3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/198762680e1e66518ee531c9cce5bf1933accea3\"}], \"stats\": {\"total\": 61, \"additions\": 31, \"deletions\": 30}, \"files\": [{\"sha\": \"f3acac6203d0bd0de006ad41fc2cc91407e7ac79\", \"filename\": \"llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp?ref=4c735439fd9a0cfea9ae366df8b36281436d4708\", \"patch\": \"@@ -2779,6 +2779,7 @@ void SelectionDAGBuilder::visitInvoke(const InvokeInst &I) {\\n   // have to do anything here to lower funclet bundles.\\n   assert(!I.hasOperandBundlesOtherThan({LLVMContext::OB_deopt,\\n                                         LLVMContext::OB_gc_transition,\\n+                                        LLVMContext::OB_gc_live,\\n                                         LLVMContext::OB_funclet,\\n                                         LLVMContext::OB_cfguardtarget}) &&\\n          \\\"Cannot lower invokes with arbitrary operand bundles yet!\\\");\"}, {\"sha\": \"abbd3e0a40e96c59fee42d2adb16a1f06dd4f7f8\", \"filename\": \"llvm/test/CodeGen/X86/statepoint-allocas.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-allocas.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-allocas.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-allocas.ll?ref=4c735439fd9a0cfea9ae366df8b36281436d4708\", \"patch\": \"@@ -26,7 +26,7 @@ define i32 addrspace(1)* @test(i32 addrspace(1)* %ptr) gc \\\"statepoint-example\\\" {\\n entry:\\n   %alloca = alloca i32 addrspace(1)*, align 8\\n   store i32 addrspace(1)* %ptr, i32 addrspace(1)** %alloca\\n-  call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0, i32 addrspace(1)** %alloca)\\n+  call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0) [\\\"gc-live\\\" (i32 addrspace(1)** %alloca)]\\n   %rel = load i32 addrspace(1)*, i32 addrspace(1)** %alloca\\n   ret i32 addrspace(1)* %rel\\n }\"}, {\"sha\": \"3fac4b784a40779e3a70a30036f157b6d7a774e4\", \"filename\": \"llvm/test/CodeGen/X86/statepoint-call-lowering.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-call-lowering.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-call-lowering.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-call-lowering.ll?ref=4c735439fd9a0cfea9ae366df8b36281436d4708\", \"patch\": \"@@ -110,8 +110,8 @@ define i1 @test_relocate(i32 addrspace(1)* %a) gc \\\"statepoint-example\\\" {\\n ; CHECK-NEXT:    retq\\n ; Check that an ununsed relocate has no code-generation impact\\n entry:\\n-  %safepoint_token = tail call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0, i32 addrspace(1)* %a)\\n-  %call1 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %safepoint_token,  i32 7, i32 7)\\n+  %safepoint_token = tail call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0) [\\\"gc-live\\\" (i32 addrspace(1)* %a)]\\n+  %call1 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %safepoint_token,  i32 0, i32 0)\\n   %call2 = call zeroext i1 @llvm.experimental.gc.result.i1(token %safepoint_token)\\n   ret i1 %call2\\n }\\n@@ -189,11 +189,11 @@ define i1 @test_cross_bb(i32 addrspace(1)* %a, i1 %external_cond) gc \\\"statepoint\\n ; CHECK-NEXT:    .cfi_def_cfa_offset 8\\n ; CHECK-NEXT:    retq\\n entry:\\n-  %safepoint_token = tail call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0, i32 addrspace(1)* %a)\\n+  %safepoint_token = tail call token (i64, i32, i1 ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_i1f(i64 0, i32 0, i1 ()* @return_i1, i32 0, i32 0, i32 0, i32 0) [\\\"gc-live\\\" (i32 addrspace(1)* %a)]\\n   br i1 %external_cond, label %left, label %right\\n \\n left:\\n-  %call1 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %safepoint_token,  i32 7, i32 7)\\n+  %call1 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %safepoint_token,  i32 0, i32 0)\\n   %call2 = call zeroext i1 @llvm.experimental.gc.result.i1(token %safepoint_token)\\n   call void @consume(i32 addrspace(1)* %call1)\\n   ret i1 %call2\"}, {\"sha\": \"4b59cbed31c6dde9bb69aeb3f744f8764408e649\", \"filename\": \"llvm/test/CodeGen/X86/statepoint-invoke.ll\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 23, \"changes\": 46, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-invoke.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-invoke.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-invoke.ll?ref=4c735439fd9a0cfea9ae366df8b36281436d4708\", \"patch\": \"@@ -34,12 +34,12 @@ define i64 addrspace(1)* @test_basic(i64 addrspace(1)* %obj,\\n                                      i64 addrspace(1)* %obj1)\\n gc \\\"statepoint-example\\\" personality i32 ()* @\\\"personality_function\\\" {\\n entry:\\n-  %0 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %obj, i32 0, i32 0, i64 addrspace(1)* %obj, i64 addrspace(1)* %obj1) [\\\"deopt\\\" (i32 0, i32 -1, i32 0, i32 0, i32 0)]\\n+  %0 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %obj, i32 0, i32 0) [\\\"gc-live\\\" (i64 addrspace(1)* %obj, i64 addrspace(1)* %obj1), \\\"deopt\\\" (i32 0, i32 -1, i32 0, i32 0, i32 0)]\\n           to label %invoke_safepoint_normal_dest unwind label %exceptional_return\\n \\n invoke_safepoint_normal_dest:\\n-  %obj.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %0, i32 8, i32 8)\\n-  %obj1.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %0, i32 9, i32 9)\\n+  %obj.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %0, i32 0, i32 0)\\n+  %obj1.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %0, i32 1, i32 1)\\n   br label %normal_return\\n \\n normal_return:\\n@@ -48,8 +48,8 @@ normal_return:\\n exceptional_return:\\n   %landing_pad = landingpad token\\n           cleanup\\n-  %obj.relocated1 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 8, i32 8)\\n-  %obj1.relocated1 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 9, i32 9)\\n+  %obj.relocated1 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 0, i32 0)\\n+  %obj1.relocated1 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 1, i32 1)\\n   ret i64 addrspace(1)* %obj1.relocated1\\n }\\n ; CHECK-LABEL: GCC_except_table{{[0-9]+}}:\\n@@ -82,7 +82,7 @@ define i64 addrspace(1)* @test_result(i64 addrspace(1)* %obj,\\n                                       i64 addrspace(1)* %obj1)\\n   gc \\\"statepoint-example\\\" personality i32 ()* @personality_function {\\n entry:\\n-  %0 = invoke token (i64, i32, i64 addrspace(1)* (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_p1i64p1i64f(i64 0, i32 0, i64 addrspace(1)* (i64 addrspace(1)*)* @some_other_call, i32 1, i32 0, i64 addrspace(1)* %obj, i32 0, i32 0, i64 addrspace(1)* %obj, i64 addrspace(1)* %obj1)\\n+  %0 = invoke token (i64, i32, i64 addrspace(1)* (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_p1i64p1i64f(i64 0, i32 0, i64 addrspace(1)* (i64 addrspace(1)*)* @some_other_call, i32 1, i32 0, i64 addrspace(1)* %obj, i32 0, i32 0) [\\\"gc-live\\\"(i64 addrspace(1)* %obj, i64 addrspace(1)* %obj1)]\\n           to label %normal_return unwind label %exceptional_return\\n \\n normal_return:\\n@@ -92,7 +92,7 @@ normal_return:\\n exceptional_return:\\n   %landing_pad = landingpad token\\n           cleanup\\n-  %obj.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 8, i32 8)\\n+  %obj.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 0, i32 0)\\n   ret i64 addrspace(1)* %obj.relocated\\n }\\n ; CHECK-LABEL: GCC_except_table{{[0-9]+}}:\\n@@ -158,21 +158,21 @@ entry:\\n   br i1 %cond, label %left, label %right\\n \\n left:\\n-  %sp1 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0, i64 addrspace(1)* %val1, i64 addrspace(1)* %val2)\\n+  %sp1 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0) [\\\"gc-live\\\"(i64 addrspace(1)* %val1, i64 addrspace(1)* %val2)]\\n            to label %left.relocs unwind label %exceptional_return.left\\n \\n left.relocs:\\n-  %val1.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 8, i32 8)\\n-  %val2.relocated_left = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 9, i32 9)\\n+  %val1.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 0, i32 0)\\n+  %val2.relocated_left = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 1, i32 1)\\n   br label %normal_return\\n \\n right:\\n-  %sp2 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0, i64 addrspace(1)* %val2, i64 addrspace(1)* %val3)\\n+  %sp2 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0) [\\\"gc-live\\\"(i64 addrspace(1)* %val2, i64 addrspace(1)* %val3)]\\n            to label %right.relocs unwind label %exceptional_return.right\\n \\n right.relocs:\\n-  %val2.relocated_right = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp2, i32 8, i32 8)\\n-  %val3.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp2, i32 9, i32 9)\\n+  %val2.relocated_right = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp2, i32 0, i32 0)\\n+  %val3.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp2, i32 1, i32 1)\\n   br label %normal_return\\n \\n normal_return:\\n@@ -184,13 +184,13 @@ normal_return:\\n exceptional_return.left:\\n   %landing_pad = landingpad token\\n           cleanup\\n-  %val.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 8, i32 8)\\n+  %val.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 0, i32 0)\\n   ret i64 addrspace(1)* %val.relocated2\\n \\n exceptional_return.right:\\n   %landing_pad1 = landingpad token\\n           cleanup\\n-  %val.relocated3 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad1, i32 8, i32 8)\\n+  %val.relocated3 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad1, i32 0, i32 0)\\n   ret i64 addrspace(1)* %val.relocated3\\n }\\n \\n@@ -214,19 +214,19 @@ define i64 addrspace(1)* @test_null_undef(i64 addrspace(1)* %val1)\\n ; CHECK-NEXT:    jmp .LBB3_1\\n        gc \\\"statepoint-example\\\" personality i32 ()* @\\\"personality_function\\\" {\\n entry:\\n-  %sp1 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0, i64 addrspace(1)* null, i64 addrspace(1)* undef)\\n+  %sp1 = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0) [\\\"gc-live\\\"(i64 addrspace(1)* null, i64 addrspace(1)* undef)]\\n            to label %normal_return unwind label %exceptional_return\\n \\n normal_return:\\n-  %null.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 8, i32 8)\\n-  %undef.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 9, i32 9)\\n+  %null.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 0, i32 0)\\n+  %undef.relocated = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %sp1, i32 1, i32 1)\\n   ret i64 addrspace(1)* %null.relocated\\n \\n exceptional_return:\\n   %landing_pad = landingpad token\\n           cleanup\\n-  %null.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 8, i32 8)\\n-  %undef.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 9, i32 9)\\n+  %null.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 0, i32 0)\\n+  %undef.relocated2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 1, i32 1)\\n   ret i64 addrspace(1)* %null.relocated2\\n }\\n \\n@@ -256,18 +256,18 @@ entry:\\n   %a = alloca i32\\n   %aa = addrspacecast i32* %a to i32 addrspace(1)*\\n   %c = inttoptr i64 15 to i64 addrspace(1)*\\n-  %sp = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0, i32 addrspace(1)* %aa, i64 addrspace(1)* %c)\\n+  %sp = invoke token (i64, i32, void (i64 addrspace(1)*)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidp1i64f(i64 0, i32 0, void (i64 addrspace(1)*)* @some_call, i32 1, i32 0, i64 addrspace(1)* %val1, i32 0, i32 0) [\\\"gc-live\\\"(i32 addrspace(1)* %aa, i64 addrspace(1)* %c)]\\n            to label %normal_return unwind label %exceptional_return\\n \\n normal_return:\\n-  %aa.rel = call coldcc i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %sp, i32 8, i32 8)\\n+  %aa.rel = call coldcc i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %sp, i32 0, i32 0)\\n   %aa.converted = bitcast i32 addrspace(1)* %aa.rel to i64 addrspace(1)*\\n   ret i64 addrspace(1)* %aa.converted\\n \\n exceptional_return:\\n   %landing_pad = landingpad token\\n           cleanup\\n-  %aa.rel2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 9, i32 9)\\n+  %aa.rel2 = call coldcc i64 addrspace(1)* @llvm.experimental.gc.relocate.p1i64(token %landing_pad, i32 1, i32 1)\\n   ret i64 addrspace(1)* %aa.rel2\\n }\\n \"}, {\"sha\": \"d2c6f7abbf3e77ffc8a63d3a71b12414542573b0\", \"filename\": \"llvm/test/CodeGen/X86/statepoint-live-in.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-live-in.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c735439fd9a0cfea9ae366df8b36281436d4708/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-live-in.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fstatepoint-live-in.ll?ref=4c735439fd9a0cfea9ae366df8b36281436d4708\", \"patch\": \"@@ -99,8 +99,8 @@ define  i32 addrspace(1)* @test5(i32 %a, i32 addrspace(1)* %p) gc \\\"statepoint-ex\\n ; CHECK-NEXT:    popq %rcx\\n ; CHECK-NEXT:    retq\\n entry:\\n-  %token = call token (i64, i32, void ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidf(i64 2882400000, i32 0, void ()* @bar, i32 0, i32 2, i32 0, i32 0, i32 addrspace(1)* %p, i32 addrspace(1)* %p) [\\\"deopt\\\"(i32 %a)]\\n-  %p2 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %token,  i32 8, i32 8)\\n+  %token = call token (i64, i32, void ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidf(i64 2882400000, i32 0, void ()* @bar, i32 0, i32 2, i32 0, i32 0) [\\\"gc-live\\\"(i32 addrspace(1)* %p), \\\"deopt\\\"(i32 %a)]\\n+  %p2 = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token %token,  i32 0, i32 0)\\n   ret i32 addrspace(1)* %p2\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hYzM3NWMyZmUzMTZkYWU2ZWI3NzBiMzhmOTBkNmI2N2ZhZGQyMmVjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ac375c2fe316dae6eb770b38f90d6b67fadd22ec", "content": "{\"sha\": \"ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YWMzNzVjMmZlMzE2ZGFlNmViNzcwYjM4ZjkwZDZiNjdmYWRkMjJlYw==\", \"commit\": {\"author\": {\"name\": \"Steven Wu\", \"email\": \"stevenwu@apple.com\", \"date\": \"2020-07-23T20:04:57Z\"}, \"committer\": {\"name\": \"Steven Wu\", \"email\": \"stevenwu@apple.com\", \"date\": \"2020-07-23T20:07:28Z\"}, \"message\": \"[Bitcode] Avoid duplicating linker option when upgrading\\n\\nSummary:\\nThe upgrading path from old ModuleFlag based linker options to the new\\nNamedMetadata based linker option in in materializeMetadata() which gets\\ncalled once for the module and once for every GV. The linker options are\\ngetting dup'ed every time and it can create massive amount of the linker\\noptions in the object file that gets created from old bitcode. Fix the\\nproblem by checking if the new option exists or not before upgrade\\nagain.\\n\\nrdar://64543389\\n\\nReviewers: pcc, t.p.northover, dexonsmith, arphaman\\n\\nReviewed By: arphaman\\n\\nSubscribers: hiraditya, jkorous, ributzka, llvm-commits\\n\\nTags: #llvm\\n\\nDifferential Revision: https://reviews.llvm.org/D83688\", \"tree\": {\"sha\": \"a4bc36e78eb295993df534812ae7f4a0b2bda981\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a4bc36e78eb295993df534812ae7f4a0b2bda981\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/comments\", \"author\": {\"login\": \"cachemeifyoucan\", \"id\": 15947485, \"node_id\": \"MDQ6VXNlcjE1OTQ3NDg1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15947485?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cachemeifyoucan\", \"html_url\": \"https://github.com/cachemeifyoucan\", \"followers_url\": \"https://api.github.com/users/cachemeifyoucan/followers\", \"following_url\": \"https://api.github.com/users/cachemeifyoucan/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cachemeifyoucan/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cachemeifyoucan/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cachemeifyoucan/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cachemeifyoucan/orgs\", \"repos_url\": \"https://api.github.com/users/cachemeifyoucan/repos\", \"events_url\": \"https://api.github.com/users/cachemeifyoucan/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cachemeifyoucan/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"cachemeifyoucan\", \"id\": 15947485, \"node_id\": \"MDQ6VXNlcjE1OTQ3NDg1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15947485?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/cachemeifyoucan\", \"html_url\": \"https://github.com/cachemeifyoucan\", \"followers_url\": \"https://api.github.com/users/cachemeifyoucan/followers\", \"following_url\": \"https://api.github.com/users/cachemeifyoucan/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/cachemeifyoucan/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/cachemeifyoucan/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/cachemeifyoucan/subscriptions\", \"organizations_url\": \"https://api.github.com/users/cachemeifyoucan/orgs\", \"repos_url\": \"https://api.github.com/users/cachemeifyoucan/repos\", \"events_url\": \"https://api.github.com/users/cachemeifyoucan/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/cachemeifyoucan/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"183342c0a9850e60dd7a004b651c83dfb3a7d25e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/183342c0a9850e60dd7a004b651c83dfb3a7d25e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/183342c0a9850e60dd7a004b651c83dfb3a7d25e\"}], \"stats\": {\"total\": 27, \"additions\": 21, \"deletions\": 6}, \"files\": [{\"sha\": \"9632b5700e8af3b40f3f9a428bc194070591cb0e\", \"filename\": \"llvm/lib/Bitcode/Reader/BitcodeReader.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 6, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp?ref=ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"patch\": \"@@ -2969,12 +2969,15 @@ Error BitcodeReader::materializeMetadata() {\\n   }\\n \\n   // Upgrade \\\"Linker Options\\\" module flag to \\\"llvm.linker.options\\\" module-level\\n-  // metadata.\\n-  if (Metadata *Val = TheModule->getModuleFlag(\\\"Linker Options\\\")) {\\n-    NamedMDNode *LinkerOpts =\\n-        TheModule->getOrInsertNamedMetadata(\\\"llvm.linker.options\\\");\\n-    for (const MDOperand &MDOptions : cast<MDNode>(Val)->operands())\\n-      LinkerOpts->addOperand(cast<MDNode>(MDOptions));\\n+  // metadata. Only upgrade if the new option doesn't exist to avoid upgrade\\n+  // multiple times.\\n+  if (!TheModule->getNamedMetadata(\\\"llvm.linker.options\\\")) {\\n+    if (Metadata *Val = TheModule->getModuleFlag(\\\"Linker Options\\\")) {\\n+      NamedMDNode *LinkerOpts =\\n+          TheModule->getOrInsertNamedMetadata(\\\"llvm.linker.options\\\");\\n+      for (const MDOperand &MDOptions : cast<MDNode>(Val)->operands())\\n+        LinkerOpts->addOperand(cast<MDNode>(MDOptions));\\n+    }\\n   }\\n \\n   DeferredMetadataInfo.clear();\"}, {\"sha\": \"cbbfb12d9379b8f9aa1d7c94a1f102ca881f7c20\", \"filename\": \"llvm/test/Bitcode/Inputs/linker-options.bc\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Ftest%2FBitcode%2FInputs%2Flinker-options.bc\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Ftest%2FBitcode%2FInputs%2Flinker-options.bc\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2FInputs%2Flinker-options.bc?ref=ac375c2fe316dae6eb770b38f90d6b67fadd22ec\"}, {\"sha\": \"b87ed41ef51546c92cc7b5c11ad0e09e3718d8e3\", \"filename\": \"llvm/test/Bitcode/upgrade-linker-options-2.ll\", \"status\": \"added\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Ftest%2FBitcode%2Fupgrade-linker-options-2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ac375c2fe316dae6eb770b38f90d6b67fadd22ec/llvm%2Ftest%2FBitcode%2Fupgrade-linker-options-2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Fupgrade-linker-options-2.ll?ref=ac375c2fe316dae6eb770b38f90d6b67fadd22ec\", \"patch\": \"@@ -0,0 +1,12 @@\\n+;; Test upgrade linker option doesn't create duplicated linker options.\\n+;; Inputs is generated from IR and checked in as bitcode as it will get rejected by verifier.\\n+;; define void @test() {\\n+;;   ret void\\n+;; }\\n+;; !llvm.module.flags = !{!0}\\n+;; !0 = !{i32 6, !\\\"Linker Options\\\", !1}\\n+;; !1 = !{!2}\\n+;; !2 = !{!\\\"-framework\\\", !\\\"Foundation\\\"}\\n+\\n+; RUN: llvm-dis %S/Inputs/linker-options.bc -o - | FileCheck %s\\n+; CHECK: !llvm.linker.options = !{!2}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lZTFjMTI3MDhhNDUxOTM2MTcyOTIwNTE2OGRlZGIyYjYxYmMyNjM4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ee1c12708a4519361729205168dedb2b61bc2638", "content": "{\"sha\": \"ee1c12708a4519361729205168dedb2b61bc2638\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWUxYzEyNzA4YTQ1MTkzNjE3MjkyMDUxNjhkZWRiMmI2MWJjMjYzOA==\", \"commit\": {\"author\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2020-08-03T15:19:06Z\"}, \"committer\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2020-08-03T16:22:42Z\"}, \"message\": \"[SCEV] If Start>=RHS, simplify (Start smin RHS) = RHS for trip counts.\\n\\nIn some cases, it seems like we can get rid of unnecessary s/umins by\\nusing information from the loop guards (unless I am missing something).\\n\\nOne place where this seems to be helpful in practice is when computing\\nloop trip counts. This patch just changes howManyGreaterThans for now.\\nNote that this requires a loop for which we can check 'is guarded'.\\n\\nOn SPEC2000/SPEC2006/MultiSource, there are some notable changes for\\nsome programs in the number of loops unrolled and trip counts computed.\\n\\n```\\nSame hash: 179 (filtered out)\\nRemaining: 58\\nMetric: scalar-evolution.NumTripCountsComputed\\n\\nProgram                                        base    patch   diff\\n test-suite...langs-C/compiler/compiler.test    25.00   31.00  24.0%\\n test-suite.../Applications/SPASS/SPASS.test   2020.00 2323.00 15.0%\\n test-suite...langs-C/allroots/allroots.test    29.00   32.00  10.3%\\n test-suite.../Prolangs-C/loader/loader.test    17.00   18.00   5.9%\\n test-suite...fice-ispell/office-ispell.test   253.00  265.00   4.7%\\n test-suite...006/450.soplex/450.soplex.test   3552.00 3692.00  3.9%\\n test-suite...chmarks/MallocBench/gs/gs.test   453.00  470.00   3.8%\\n test-suite...ngs-C/assembler/assembler.test    29.00   30.00   3.4%\\n test-suite.../Benchmarks/Ptrdist/bc/bc.test   263.00  270.00   2.7%\\n test-suite...rks/FreeBench/pifft/pifft.test   722.00  741.00   2.6%\\n test-suite...count/automotive-bitcount.test    41.00   42.00   2.4%\\n test-suite...0/253.perlbmk/253.perlbmk.test   1417.00 1451.00  2.4%\\n test-suite...000/197.parser/197.parser.test   387.00  396.00   2.3%\\n test-suite...lications/sqlite3/sqlite3.test   1168.00 1189.00  1.8%\\n test-suite...000/255.vortex/255.vortex.test   173.00  176.00   1.7%\\n\\nMetric: loop-unroll.NumUnrolled\\n\\nProgram                                        base   patch  diff\\n test-suite...langs-C/compiler/compiler.test     1.00   3.00 200.0%\\n test-suite.../Applications/SPASS/SPASS.test   134.00 234.00 74.6%\\n test-suite...count/automotive-bitcount.test     3.00   4.00 33.3%\\n test-suite.../Prolangs-C/loader/loader.test     3.00   4.00 33.3%\\n test-suite...langs-C/allroots/allroots.test     3.00   4.00 33.3%\\n test-suite...Source/Benchmarks/sim/sim.test    10.00  12.00 20.0%\\n test-suite...fice-ispell/office-ispell.test    21.00  25.00 19.0%\\n test-suite.../Benchmarks/Ptrdist/bc/bc.test    32.00  38.00 18.8%\\n test-suite...006/450.soplex/450.soplex.test   300.00 352.00 17.3%\\n test-suite...rks/FreeBench/pifft/pifft.test    60.00  69.00 15.0%\\n test-suite...chmarks/MallocBench/gs/gs.test    57.00  63.00 10.5%\\n test-suite...ngs-C/assembler/assembler.test    10.00  11.00 10.0%\\n test-suite...0/253.perlbmk/253.perlbmk.test   145.00 157.00  8.3%\\n test-suite...000/197.parser/197.parser.test    43.00  46.00  7.0%\\n test-suite...TimberWolfMC/timberwolfmc.test   205.00 214.00  4.4%\\n Geomean difference                                           7.6%\\n```\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=46939\\nFixes https://bugs.llvm.org/show_bug.cgi?id=46924 on X86.\\n\\nReviewed By: mkazantsev\\n\\nDifferential Revision: https://reviews.llvm.org/D85046\", \"tree\": {\"sha\": \"7d629b189f8f9f6bba551e37dd08106e57e7aa39\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/7d629b189f8f9f6bba551e37dd08106e57e7aa39\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ee1c12708a4519361729205168dedb2b61bc2638\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ee1c12708a4519361729205168dedb2b61bc2638\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ee1c12708a4519361729205168dedb2b61bc2638\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ee1c12708a4519361729205168dedb2b61bc2638/comments\", \"author\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7ba82a7320df82d07d3d5679bce89b14526b536c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7ba82a7320df82d07d3d5679bce89b14526b536c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7ba82a7320df82d07d3d5679bce89b14526b536c\"}], \"stats\": {\"total\": 27, \"additions\": 15, \"deletions\": 12}, \"files\": [{\"sha\": \"23ad77ff60540d7be45c1b458861c93c4705e6cc\", \"filename\": \"llvm/lib/Analysis/ScalarEvolution.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 2, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Flib%2FAnalysis%2FScalarEvolution.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Flib%2FAnalysis%2FScalarEvolution.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FScalarEvolution.cpp?ref=ee1c12708a4519361729205168dedb2b61bc2638\", \"patch\": \"@@ -10628,8 +10628,15 @@ ScalarEvolution::howManyGreaterThans(const SCEV *LHS, const SCEV *RHS,\\n \\n   const SCEV *Start = IV->getStart();\\n   const SCEV *End = RHS;\\n-  if (!isLoopEntryGuardedByCond(L, Cond, getAddExpr(Start, Stride), RHS))\\n-    End = IsSigned ? getSMinExpr(RHS, Start) : getUMinExpr(RHS, Start);\\n+  if (!isLoopEntryGuardedByCond(L, Cond, getAddExpr(Start, Stride), RHS)) {\\n+    // If we know that Start >= RHS in the context of loop, then we know that\\n+    // min(RHS, Start) = RHS at this point.\\n+    if (isLoopEntryGuardedByCond(\\n+            L, IsSigned ? ICmpInst::ICMP_SGE : ICmpInst::ICMP_UGE, Start, RHS))\\n+      End = RHS;\\n+    else\\n+      End = IsSigned ? getSMinExpr(RHS, Start) : getUMinExpr(RHS, Start);\\n+  }\\n \\n   const SCEV *BECount = computeBECount(getMinusSCEV(Start, End), Stride, false);\\n \"}, {\"sha\": \"803652e47cf6281a19f54346a67871ac7fc11c1d\", \"filename\": \"llvm/test/Analysis/ScalarEvolution/pr46939-trip-count-count-down.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Ftest%2FAnalysis%2FScalarEvolution%2Fpr46939-trip-count-count-down.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Ftest%2FAnalysis%2FScalarEvolution%2Fpr46939-trip-count-count-down.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FScalarEvolution%2Fpr46939-trip-count-count-down.ll?ref=ee1c12708a4519361729205168dedb2b61bc2638\", \"patch\": \"@@ -6,13 +6,13 @@ define void @reverse_loop(i32 %n) {\\n ; CHECK-LABEL: 'reverse_loop'\\n ; CHECK-NEXT:  Classifying expressions for: @reverse_loop\\n ; CHECK-NEXT:    %i.011 = phi i32 [ %n, %for.body.lr.ph ], [ %dec, %for.body ]\\n-; CHECK-NEXT:    --> {%n,+,-1}<nsw><%for.body> U: full-set S: full-set Exits: (0 smin %n) LoopDispositions: { %for.body: Computable }\\n+; CHECK-NEXT:    --> {%n,+,-1}<nsw><%for.body> U: full-set S: full-set Exits: 0 LoopDispositions: { %for.body: Computable }\\n ; CHECK-NEXT:    %dec = add nsw i32 %i.011, -1\\n-; CHECK-NEXT:    --> {(-1 + %n),+,-1}<nw><%for.body> U: full-set S: full-set Exits: (-1 + (0 smin %n)) LoopDispositions: { %for.body: Computable }\\n+; CHECK-NEXT:    --> {(-1 + %n),+,-1}<nw><%for.body> U: full-set S: full-set Exits: -1 LoopDispositions: { %for.body: Computable }\\n ; CHECK-NEXT:  Determining loop execution counts for: @reverse_loop\\n-; CHECK-NEXT:  Loop %for.body: backedge-taken count is ((-1 * (0 smin %n)) + %n)\\n+; CHECK-NEXT:  Loop %for.body: backedge-taken count is %n\\n ; CHECK-NEXT:  Loop %for.body: max backedge-taken count is 2147483647\\n-; CHECK-NEXT:  Loop %for.body: Predicated backedge-taken count is ((-1 * (0 smin %n)) + %n)\\n+; CHECK-NEXT:  Loop %for.body: Predicated backedge-taken count is %n\\n ; CHECK-NEXT:   Predicates:\\n ; CHECK:       Loop %for.body: Trip multiple is 1\\n ;\"}, {\"sha\": \"0b9847b33c714d9af4518dc8ff5bf3a1ea20b72c\", \"filename\": \"llvm/test/Transforms/HardwareLoops/scalar-while.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 6, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Ftest%2FTransforms%2FHardwareLoops%2Fscalar-while.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ee1c12708a4519361729205168dedb2b61bc2638/llvm%2Ftest%2FTransforms%2FHardwareLoops%2Fscalar-while.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FHardwareLoops%2Fscalar-while.ll?ref=ee1c12708a4519361729205168dedb2b61bc2638\", \"patch\": \"@@ -76,18 +76,14 @@ while.end:\\n ; CHECK-GUARD:   br i1 %cmp4, label %while.end, label %while.body.preheader\\n ; CHECK-GUARD: while.body.preheader:\\n ; CHECK-GUARD:   [[ADD:%[^ ]+]] = add i32 %i, 1\\n-; CHECK-GUARD:   [[SEL:%[^ ]+]] = icmp slt i32 %N, %i\\n-; CHECK-GUARD:   [[MIN:%[^ ]+]] = select i1 [[SEL]], i32 %N, i32 %i\\n-; CHECK-GUARD:   [[COUNT:%[^ ]+]] = sub i32 [[ADD]], [[MIN]]\\n+; CHECK-GUARD:   [[COUNT:%[^ ]+]] = sub i32 [[ADD]], %N\\n ; CHECK-GUARD:   call void @llvm.set.loop.iterations.i32(i32 [[COUNT]])\\n ; CHECK-GUARD:   br label %while.body\\n \\n ; CHECK-LABEL: while_gte\\n ; CHECK: while.body.preheader:\\n ; CHECK: [[ADD:%[^ ]+]] = add i32 %i, 1\\n-; CHECK: [[SEL:%[^ ]+]] = icmp slt i32 %N, %i\\n-; CHECK: [[MIN:%[^ ]+]] = select i1 [[SEL]], i32 %N, i32 %i\\n-; CHECK: [[COUNT:%[^ ]+]] = sub i32 [[ADD]], [[MIN]]\\n+; CHECK: [[COUNT:%[^ ]+]] = sub i32 [[ADD]], %N\\n ; CHECK: call void @llvm.set.loop.iterations.i32(i32 [[COUNT]])\\n ; CHECK: br label %while.body\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jZmRjOTY3MTRiZGZlYWJlYTMxYjFmNGQyZTBjNjVlNDI0OTMzOTk0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/cfdc96714bdfeabea31b1f4d2e0c65e424933994", "content": "{\"sha\": \"cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6Y2ZkYzk2NzE0YmRmZWFiZWEzMWIxZjRkMmUwYzY1ZTQyNDkzMzk5NA==\", \"commit\": {\"author\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2020-08-11T21:13:26Z\"}, \"committer\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2020-08-11T21:13:32Z\"}, \"message\": \"[Instcombine] Fix uses of undef (PR46940)\\n\\nWithout this patch, we attempt to distribute And over Xor even in\\nunsafe circumstances like so:\\n\\n  undef & (true ^ true)  ==>  (undef & true) ^ (undef & true)\\n\\nand evaluate it to undef instead of false.  Note that \\\"true ^ true\\\"\\nmay show up implicitly with one true being part of a PHI node.\\n\\nThis patch fixes the problem by teaching SimplifyUsingDistributiveLaws\\nto not use undef as part of simplifications.\\n\\nReviewers: spatel, aqjune, nikic, lebedev.ri, fhahn, jdoerfert\\n\\nDifferential Revision: https://reviews.llvm.org/D85687\", \"tree\": {\"sha\": \"7c36d03a668a98f2314d4ab6d444b27db44e6a41\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/7c36d03a668a98f2314d4ab6d444b27db44e6a41\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cfdc96714bdfeabea31b1f4d2e0c65e424933994/comments\", \"author\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"29429d1a443a51d0e1ac4ef4033a2bcc95909ba3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/29429d1a443a51d0e1ac4ef4033a2bcc95909ba3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/29429d1a443a51d0e1ac4ef4033a2bcc95909ba3\"}], \"stats\": {\"total\": 45, \"additions\": 41, \"deletions\": 4}, \"files\": [{\"sha\": \"e43dfaa34ccb498ba1b3449f61ebd95caad7bcfa\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 4, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/cfdc96714bdfeabea31b1f4d2e0c65e424933994/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/cfdc96714bdfeabea31b1f4d2e0c65e424933994/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp?ref=cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"patch\": \"@@ -740,8 +740,10 @@ Value *InstCombinerImpl::SimplifyUsingDistributiveLaws(BinaryOperator &I) {\\n     Value *A = Op0->getOperand(0), *B = Op0->getOperand(1), *C = RHS;\\n     Instruction::BinaryOps InnerOpcode = Op0->getOpcode(); // op'\\n \\n-    Value *L = SimplifyBinOp(TopLevelOpcode, A, C, SQ.getWithInstruction(&I));\\n-    Value *R = SimplifyBinOp(TopLevelOpcode, B, C, SQ.getWithInstruction(&I));\\n+    // Disable the use of undef because it's not safe to distribute undef.\\n+    auto SQDistributive = SQ.getWithInstruction(&I).getWithoutUndef();\\n+    Value *L = SimplifyBinOp(TopLevelOpcode, A, C, SQDistributive);\\n+    Value *R = SimplifyBinOp(TopLevelOpcode, B, C, SQDistributive);\\n \\n     // Do \\\"A op C\\\" and \\\"B op C\\\" both simplify?\\n     if (L && R) {\\n@@ -777,8 +779,10 @@ Value *InstCombinerImpl::SimplifyUsingDistributiveLaws(BinaryOperator &I) {\\n     Value *A = LHS, *B = Op1->getOperand(0), *C = Op1->getOperand(1);\\n     Instruction::BinaryOps InnerOpcode = Op1->getOpcode(); // op'\\n \\n-    Value *L = SimplifyBinOp(TopLevelOpcode, A, B, SQ.getWithInstruction(&I));\\n-    Value *R = SimplifyBinOp(TopLevelOpcode, A, C, SQ.getWithInstruction(&I));\\n+    // Disable the use of undef because it's not safe to distribute undef.\\n+    auto SQDistributive = SQ.getWithInstruction(&I).getWithoutUndef();\\n+    Value *L = SimplifyBinOp(TopLevelOpcode, A, B, SQDistributive);\\n+    Value *R = SimplifyBinOp(TopLevelOpcode, A, C, SQDistributive);\\n \\n     // Do \\\"A op B\\\" and \\\"A op C\\\" both simplify?\\n     if (L && R) {\"}, {\"sha\": \"bc7ddacbed16c9c77a8e3c29f5dfe0a8decfa5e2\", \"filename\": \"llvm/test/Transforms/InstCombine/dont-distribute-phi.ll\", \"status\": \"added\", \"additions\": 33, \"deletions\": 0, \"changes\": 33, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/cfdc96714bdfeabea31b1f4d2e0c65e424933994/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdont-distribute-phi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/cfdc96714bdfeabea31b1f4d2e0c65e424933994/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdont-distribute-phi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fdont-distribute-phi.ll?ref=cfdc96714bdfeabea31b1f4d2e0c65e424933994\", \"patch\": \"@@ -0,0 +1,33 @@\\n+; RUN: opt < %s -instcombine -S | FileCheck %s\\n+;\\n+; This test ensures that InstCombine does not distribute And over Xor\\n+; using simplifications involving undef.\\n+\\n+define zeroext i1 @foo(i32 %arg) {\\n+; CHECK-LABEL: @foo(\\n+\\n+entry:\\n+  %cmp1 = icmp eq i32 %arg, 37\\n+  br i1 %cmp1, label %bb_then, label %bb_else\\n+\\n+bb_then:\\n+  call void @bar()\\n+  br label %bb_exit\\n+\\n+bb_else:\\n+  %cmp2 = icmp slt i32 %arg, 17\\n+  br label %bb_exit\\n+\\n+; CHECK:       bb_exit:\\n+; CHECK-NEXT:    [[PHI1:%.*]] = phi i1 [ [[CMP2:%.*]], [[BB_ELSE:%.*]] ], [ undef, [[BB_THEN:%.*]] ]\\n+; CHECK-NEXT:    [[XOR1:%.*]] = xor i1 [[CMP1:%.*]], true\\n+; CHECK-NEXT:    [[AND1:%.*]] = and i1 [[PHI1]], [[XOR1]]\\n+; CHECK-NEXT:    ret i1 [[AND1]]\\n+bb_exit:\\n+  %phi1 = phi i1 [ %cmp2, %bb_else ], [ undef, %bb_then ]\\n+  %xor1 = xor i1 %cmp1, true\\n+  %and1 = and i1 %phi1, %xor1\\n+  ret i1 %and1\\n+}\\n+\\n+declare void @bar()\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hNzllNjA0NDYyZWEyNmM3M2I2ODY5ZDcxYjQxNjY3ODE5ZjkwMjgxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/a79e604462ea26c73b6869d71b41667819f90281", "content": "{\"sha\": \"a79e604462ea26c73b6869d71b41667819f90281\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YTc5ZTYwNDQ2MmVhMjZjNzNiNjg2OWQ3MWI0MTY2NzgxOWY5MDI4MQ==\", \"commit\": {\"author\": {\"name\": \"Tyker\", \"email\": \"tyker1@outlook.com\", \"date\": \"2020-08-17T18:47:02Z\"}, \"committer\": {\"name\": \"Tyker\", \"email\": \"tyker1@outlook.com\", \"date\": \"2020-08-17T19:36:53Z\"}, \"message\": \"[AssumeBundles] Fix Bug in Assume Queries\\n\\nthis bug was causing miscompile.\\nnow clang cant properly selfhost with -mllvm --enable-knowledge-retention\\n\\nReviewed By: jdoerfert, lebedev.ri\\n\\nDifferential Revision: https://reviews.llvm.org/D83507\", \"tree\": {\"sha\": \"4ef794469f377f8dd7292e13d49da1a2ae5ecdcf\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/4ef794469f377f8dd7292e13d49da1a2ae5ecdcf\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/a79e604462ea26c73b6869d71b41667819f90281\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a79e604462ea26c73b6869d71b41667819f90281\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a79e604462ea26c73b6869d71b41667819f90281\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a79e604462ea26c73b6869d71b41667819f90281/comments\", \"author\": {\"login\": \"Ralender\", \"id\": 15616326, \"node_id\": \"MDQ6VXNlcjE1NjE2MzI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15616326?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Ralender\", \"html_url\": \"https://github.com/Ralender\", \"followers_url\": \"https://api.github.com/users/Ralender/followers\", \"following_url\": \"https://api.github.com/users/Ralender/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Ralender/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Ralender/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Ralender/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Ralender/orgs\", \"repos_url\": \"https://api.github.com/users/Ralender/repos\", \"events_url\": \"https://api.github.com/users/Ralender/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Ralender/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"Ralender\", \"id\": 15616326, \"node_id\": \"MDQ6VXNlcjE1NjE2MzI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15616326?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Ralender\", \"html_url\": \"https://github.com/Ralender\", \"followers_url\": \"https://api.github.com/users/Ralender/followers\", \"following_url\": \"https://api.github.com/users/Ralender/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Ralender/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Ralender/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Ralender/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Ralender/orgs\", \"repos_url\": \"https://api.github.com/users/Ralender/repos\", \"events_url\": \"https://api.github.com/users/Ralender/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Ralender/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e1a2f4713c998318d7f0e67bd3ba5e06e3a986ee\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e1a2f4713c998318d7f0e67bd3ba5e06e3a986ee\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e1a2f4713c998318d7f0e67bd3ba5e06e3a986ee\"}], \"stats\": {\"total\": 10, \"additions\": 8, \"deletions\": 2}, \"files\": [{\"sha\": \"9539af6d9d45715569f9dec7ec253cb00d048f42\", \"filename\": \"llvm/lib/Analysis/AssumeBundleQueries.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a79e604462ea26c73b6869d71b41667819f90281/llvm%2Flib%2FAnalysis%2FAssumeBundleQueries.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a79e604462ea26c73b6869d71b41667819f90281/llvm%2Flib%2FAnalysis%2FAssumeBundleQueries.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FAssumeBundleQueries.cpp?ref=a79e604462ea26c73b6869d71b41667819f90281\", \"patch\": \"@@ -172,12 +172,15 @@ llvm::getKnowledgeForValue(const Value *V,\\n       if (!II || Elem.Index == AssumptionCache::ExprResultIdx)\\n         continue;\\n       if (RetainedKnowledge RK = getKnowledgeFromBundle(\\n-              *II, II->bundle_op_info_begin()[Elem.Index]))\\n+              *II, II->bundle_op_info_begin()[Elem.Index])) {\\n+        if (V != RK.WasOn)\\n+          continue;\\n         if (is_contained(AttrKinds, RK.AttrKind) &&\\n             Filter(RK, II, &II->bundle_op_info_begin()[Elem.Index])) {\\n           NumUsefullAssumeQueries++;\\n           return RK;\\n         }\\n+      }\\n     }\\n     return RetainedKnowledge::none();\\n   }\"}, {\"sha\": \"d0f85cd67d9d177106d7faf79e9283aeb502b827\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/d83507-knowledge-retention-bug.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a79e604462ea26c73b6869d71b41667819f90281/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a79e604462ea26c73b6869d71b41667819f90281/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll?ref=a79e604462ea26c73b6869d71b41667819f90281\", \"patch\": \"@@ -13,7 +13,10 @@ define %0* @f1() local_unnamed_addr {\\n ; ANY-NEXT:    call void @llvm.assume(i1 true) [ \\\"nonnull\\\"(%0* [[I1]]) ]\\n ; ANY-NEXT:    [[I4:%.*]] = getelementptr inbounds [[TMP0:%.*]], %0* [[I1]], i64 0, i32 0\\n ; ANY-NEXT:    [[I5]] = load %0*, %0** [[I4]], align 8\\n-; ANY-NEXT:    br label [[BB3]]\\n+; ANY-NEXT:    [[I2:%.*]] = icmp eq %0* [[I5]], null\\n+; ANY-NEXT:    br i1 [[I2]], label [[BB6:%.*]], label [[BB3]]\\n+; ANY:       bb6:\\n+; ANY-NEXT:    ret %0* undef\\n ;\\n bb:\\n   br label %bb1\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lMDgyZGVlMmI1ODg1YmJhNjVlMjBiMjJiMDg4YmNhY2E1NTQ2OTg0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e082dee2b5885bba65e20b22b088bcaca5546984", "content": "{\"sha\": \"e082dee2b5885bba65e20b22b088bcaca5546984\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZTA4MmRlZTJiNTg4NWJiYTY1ZTIwYjIyYjA4OGJjYWNhNTU0Njk4NA==\", \"commit\": {\"author\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2020-09-12T17:57:26Z\"}, \"committer\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2020-09-12T18:05:59Z\"}, \"message\": \"[DSE] Bail out on MemoryPhis when deleting stores at end of function.\\n\\nWhen deleting stores at the end of a function, we have to do PHI\\ntranslation, otherwise we might miss reads in different iterations of a\\nloop. See multiblock-loop-carried-dependence.ll for details.\\n\\nThis fixes a mis-compile and surprisingly also increases the number of\\neliminated stores from 26047 to 26572 for MultiSource/SPEC2000/SPEC2006\\non X86 with -O3 -flto. This is most likely because we save budget by not\\nexploring through MemoryPhis, which are less likely to result in valid\\ncandidates for elimination.\\n\\nThe issue was reported post-commit for fb109c42d91c.\", \"tree\": {\"sha\": \"77428e88110bd9d6f0ea40626f199708794fef04\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/77428e88110bd9d6f0ea40626f199708794fef04\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e082dee2b5885bba65e20b22b088bcaca5546984\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e082dee2b5885bba65e20b22b088bcaca5546984\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e082dee2b5885bba65e20b22b088bcaca5546984\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e082dee2b5885bba65e20b22b088bcaca5546984/comments\", \"author\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3de9e3e493baed93e1aa0e99b04a0b11f370a939\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3de9e3e493baed93e1aa0e99b04a0b11f370a939\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/3de9e3e493baed93e1aa0e99b04a0b11f370a939\"}], \"stats\": {\"total\": 32, \"additions\": 28, \"deletions\": 4}, \"files\": [{\"sha\": \"16f4ea2f900c16bc9a68d34865ecec806a942dd5\", \"filename\": \"llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 4, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FDeadStoreElimination.cpp?ref=e082dee2b5885bba65e20b22b088bcaca5546984\", \"patch\": \"@@ -1776,10 +1776,12 @@ struct DSEState {\\n       }\\n \\n       MemoryAccess *UseAccess = WorkList[I];\\n-      if (isa<MemoryPhi>(UseAccess)) {\\n-        PushMemUses(UseAccess);\\n-        continue;\\n-      }\\n+      // Simply adding the users of MemoryPhi to the worklist is not enough,\\n+      // because we might miss read clobbers in different iterations of a loop,\\n+      // for example.\\n+      // TODO: Add support for phi translation to handle the loop case.\\n+      if (isa<MemoryPhi>(UseAccess))\\n+        return false;\\n \\n       // TODO: Checking for aliasing is expensive. Consider reducing the amount\\n       // of times this is called and/or caching it.\"}, {\"sha\": \"b168dcaa859ebe28f625e24f7bf1944acf616c9d\", \"filename\": \"llvm/test/Transforms/DeadStoreElimination/MSSA/multiblock-loop-carried-dependence.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-loop-carried-dependence.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-loop-carried-dependence.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-loop-carried-dependence.ll?ref=e082dee2b5885bba65e20b22b088bcaca5546984\", \"patch\": \"@@ -29,6 +29,9 @@ define void @test.1() {\\n ; CHECK-NEXT:    [[PTR_IV_2:%.*]] = getelementptr inbounds [100 x i32], [100 x i32]* [[A]], i64 0, i64 [[IV_2]]\\n ; CHECK-NEXT:    [[L_0:%.*]] = load i32, i32* [[PTR_IV_2]], align 4\\n ; CHECK-NEXT:    call void @use(i32 [[L_0]])\\n+; CHECK-NEXT:    [[ADD:%.*]] = add nsw i64 [[IV_2]], 1\\n+; CHECK-NEXT:    [[PTR_IV_2_ADD_1:%.*]] = getelementptr inbounds [100 x i32], [100 x i32]* [[A]], i64 0, i64 [[ADD]]\\n+; CHECK-NEXT:    store i32 10, i32* [[PTR_IV_2_ADD_1]], align 4\\n ; CHECK-NEXT:    [[L_1:%.*]] = load i32, i32* [[PTR_IV_2]], align 4\\n ; CHECK-NEXT:    call void @use(i32 [[L_1]])\\n ; CHECK-NEXT:    [[IV_2_NEXT]] = add nsw i64 [[IV_2]], 1\"}, {\"sha\": \"f60a8e536a0be90079f2489be30e2ef509349777\", \"filename\": \"llvm/test/Transforms/DeadStoreElimination/MSSA/multiblock-malloc-free.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-malloc-free.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-malloc-free.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-malloc-free.ll?ref=e082dee2b5885bba65e20b22b088bcaca5546984\", \"patch\": \"@@ -180,6 +180,7 @@ define void @test27() {\\n ; CHECK-NEXT:    br i1 true, label [[BB2:%.*]], label [[BB3:%.*]]\\n ; CHECK:       bb2:\\n ; CHECK-NEXT:    [[M:%.*]] = call noalias i8* @malloc(i64 10)\\n+; CHECK-NEXT:    store i8 1, i8* [[M]], align 1\\n ; CHECK-NEXT:    br label [[BB3]]\\n ; CHECK:       bb3:\\n ; CHECK-NEXT:    [[R:%.*]] = phi i8* [ null, [[BB1:%.*]] ], [ [[M]], [[BB2]] ]\"}, {\"sha\": \"b22f5b60d75840f99711169c605aa65ea38a9054\", \"filename\": \"llvm/test/Transforms/DeadStoreElimination/MSSA/multiblock-memintrinsics.ll\", \"status\": \"modified\", \"additions\": 18, \"deletions\": 0, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-memintrinsics.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e082dee2b5885bba65e20b22b088bcaca5546984/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-memintrinsics.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FDeadStoreElimination%2FMSSA%2Fmultiblock-memintrinsics.ll?ref=e082dee2b5885bba65e20b22b088bcaca5546984\", \"patch\": \"@@ -123,10 +123,18 @@ bb3:\\n define void @alloca_1(i1 %c) {\\n ; CHECK-LABEL: @alloca_1(\\n ; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[P_ALLOCA:%.*]] = alloca [32 x i32], align 4\\n+; CHECK-NEXT:    [[P:%.*]] = bitcast [32 x i32]* [[P_ALLOCA]] to i32*\\n+; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[P]], i64 1\\n+; CHECK-NEXT:    [[P3:%.*]] = bitcast i32* [[ARRAYIDX0]] to i8*\\n+; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i8, i8* [[P3]], i64 4\\n+; CHECK-NEXT:    call void @llvm.memset.p0i8.i64(i8* align 4 [[TMP0]], i8 0, i64 24, i1 false)\\n ; CHECK-NEXT:    br i1 [[C:%.*]], label [[BB1:%.*]], label [[BB2:%.*]]\\n ; CHECK:       bb1:\\n ; CHECK-NEXT:    br label [[BB3:%.*]]\\n ; CHECK:       bb2:\\n+; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32, i32* [[P]], i64 1\\n+; CHECK-NEXT:    store i32 1, i32* [[ARRAYIDX1]], align 4\\n ; CHECK-NEXT:    br label [[BB3]]\\n ; CHECK:       bb3:\\n ; CHECK-NEXT:    ret void\\n@@ -152,10 +160,20 @@ bb3:\\n define void @alloca_2(i1 %c) {\\n ; CHECK-LABEL: @alloca_2(\\n ; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[P_ALLOCA:%.*]] = alloca [32 x i32], align 4\\n+; CHECK-NEXT:    [[P:%.*]] = bitcast [32 x i32]* [[P_ALLOCA]] to i32*\\n+; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[P]], i64 1\\n+; CHECK-NEXT:    [[P3:%.*]] = bitcast i32* [[ARRAYIDX0]] to i8*\\n+; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i8, i8* [[P3]], i64 4\\n+; CHECK-NEXT:    call void @llvm.memset.p0i8.i64(i8* align 4 [[TMP0]], i8 0, i64 24, i1 false)\\n ; CHECK-NEXT:    br i1 [[C:%.*]], label [[BB1:%.*]], label [[BB2:%.*]]\\n ; CHECK:       bb1:\\n+; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32, i32* [[P]], i64 1\\n+; CHECK-NEXT:    store i32 1, i32* [[ARRAYIDX1]], align 4\\n ; CHECK-NEXT:    br label [[BB3:%.*]]\\n ; CHECK:       bb2:\\n+; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[P]], i64 1\\n+; CHECK-NEXT:    store i32 1, i32* [[ARRAYIDX2]], align 4\\n ; CHECK-NEXT:    br label [[BB3]]\\n ; CHECK:       bb3:\\n ; CHECK-NEXT:    ret void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hYTU3YzFjOTY3MDc4YThjMDJlN2ZjMmM4Mzc4NTNkYmQ3Y2M2NmY0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4", "content": "{\"sha\": \"aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6YWE1N2MxYzk2NzA3OGE4YzAyZTdmYzJjODM3ODUzZGJkN2NjNjZmNA==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2020-09-15T13:27:16Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2020-09-15T13:29:48Z\"}, \"message\": \"[InstCombine] fix bug in pow expansion\\n\\nThere at least one other bug related to pow -> sqrt transforms:\\nhttp://lists.llvm.org/pipermail/llvm-dev/2020-September/145051.html\\n...but we probably can't solve that without fixing this first.\", \"tree\": {\"sha\": \"a0bcceeb991cbb6a28511997ba7aff741911034a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a0bcceeb991cbb6a28511997ba7aff741911034a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7ffc9aa538dfa3facbbb09d3b0d517a59e967d0e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7ffc9aa538dfa3facbbb09d3b0d517a59e967d0e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7ffc9aa538dfa3facbbb09d3b0d517a59e967d0e\"}], \"stats\": {\"total\": 19, \"additions\": 6, \"deletions\": 13}, \"files\": [{\"sha\": \"60b7da7e64feb0b14877504a9938bffd54530df8\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp?ref=aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"patch\": \"@@ -1748,6 +1748,8 @@ Value *LibCallSimplifier::optimizePow(CallInst *Pow, IRBuilderBase &B) {\\n \\n         Sqrt = getSqrtCall(Base, Pow->getCalledFunction()->getAttributes(),\\n                            Pow->doesNotAccessMemory(), M, B, TLI);\\n+        if (!Sqrt)\\n+          return nullptr;\\n       }\\n \\n       // We will memoize intermediate products of the Addition Chain.\"}, {\"sha\": \"23cc2d801a1602e1a611123205924d3e5ae91068\", \"filename\": \"llvm/test/Transforms/InstCombine/pow-4.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 13, \"changes\": 17, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-4.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/aa57c1c967078a8c02e7fc2c837853dbd7cc66f4/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-4.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-4.ll?ref=aa57c1c967078a8c02e7fc2c837853dbd7cc66f4\", \"patch\": \"@@ -152,7 +152,6 @@ define double @test_simplify_neg_16_5(double %x) {\\n }\\n \\n ; pow(x, 16.5) with double\\n-; FIXME: This is wrong without sqrt.\\n \\n define double @test_simplify_16_5_libcall(double %x) {\\n ; SQRT-LABEL: @test_simplify_16_5_libcall(\\n@@ -165,18 +164,14 @@ define double @test_simplify_16_5_libcall(double %x) {\\n ; SQRT-NEXT:    ret double [[TMP4]]\\n ;\\n ; NOSQRT-LABEL: @test_simplify_16_5_libcall(\\n-; NOSQRT-NEXT:    [[SQUARE:%.*]] = fmul fast double [[X:%.*]], [[X]]\\n-; NOSQRT-NEXT:    [[TMP1:%.*]] = fmul fast double [[SQUARE]], [[SQUARE]]\\n-; NOSQRT-NEXT:    [[TMP2:%.*]] = fmul fast double [[TMP1]], [[TMP1]]\\n-; NOSQRT-NEXT:    [[TMP3:%.*]] = fmul fast double [[TMP2]], [[TMP2]]\\n-; NOSQRT-NEXT:    ret double [[TMP3]]\\n+; NOSQRT-NEXT:    [[TMP1:%.*]] = call fast double @pow(double [[X:%.*]], double 1.650000e+01)\\n+; NOSQRT-NEXT:    ret double [[TMP1]]\\n ;\\n   %1 = call fast double @pow(double %x, double 1.650000e+01)\\n   ret double %1\\n }\\n \\n ; pow(x, -16.5) with double\\n-; FIXME: This is wrong without sqrt.\\n \\n define double @test_simplify_neg_16_5_libcall(double %x) {\\n ; SQRT-LABEL: @test_simplify_neg_16_5_libcall(\\n@@ -190,12 +185,8 @@ define double @test_simplify_neg_16_5_libcall(double %x) {\\n ; SQRT-NEXT:    ret double [[RECIPROCAL]]\\n ;\\n ; NOSQRT-LABEL: @test_simplify_neg_16_5_libcall(\\n-; NOSQRT-NEXT:    [[SQUARE:%.*]] = fmul fast double [[X:%.*]], [[X]]\\n-; NOSQRT-NEXT:    [[TMP1:%.*]] = fmul fast double [[SQUARE]], [[SQUARE]]\\n-; NOSQRT-NEXT:    [[TMP2:%.*]] = fmul fast double [[TMP1]], [[TMP1]]\\n-; NOSQRT-NEXT:    [[TMP3:%.*]] = fmul fast double [[TMP2]], [[TMP2]]\\n-; NOSQRT-NEXT:    [[RECIPROCAL:%.*]] = fdiv fast double 1.000000e+00, [[TMP3]]\\n-; NOSQRT-NEXT:    ret double [[RECIPROCAL]]\\n+; NOSQRT-NEXT:    [[TMP1:%.*]] = call fast double @pow(double [[X:%.*]], double -1.650000e+01)\\n+; NOSQRT-NEXT:    ret double [[TMP1]]\\n ;\\n   %1 = call fast double @pow(double %x, double -1.650000e+01)\\n   ret double %1\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8zMmM5OTkxZGFiNWNiMTQ1NDk1OTU2MWM3N2Y5ZDAwODlkOTgxNDI5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/32c9991dab5cb1454959561c77f9d0089d981429", "content": "{\"sha\": \"32c9991dab5cb1454959561c77f9d0089d981429\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MzJjOTk5MWRhYjVjYjE0NTQ5NTk1NjFjNzdmOWQwMDg5ZDk4MTQyOQ==\", \"commit\": {\"author\": {\"name\": \"Hubert Tong\", \"email\": \"hubert.reinterpretcast@gmail.com\", \"date\": \"2020-09-22T22:49:55Z\"}, \"committer\": {\"name\": \"Hubert Tong\", \"email\": \"hubert.reinterpretcast@gmail.com\", \"date\": \"2020-09-22T22:58:05Z\"}, \"message\": \"[InstCombine] Fix errno bug in pow expansion to sqrt\\n\\nA conversion from `pow` to `sqrt` shall not call an `errno`-setting\\n`sqrt` with -//infinity//: the `sqrt` will set `EDOM` where the `pow`\\ncall need not.\\n\\nThis patch avoids the erroneous (pun not intended) transformation by\\napplying the restrictions discussed in the thread for\\nhttps://lists.llvm.org/pipermail/llvm-dev/2020-September/145051.html.\\n\\nThe existing tests are updated (depending on emphasis in the checks for\\nlibrary calls, avoidance of overlap, and overall coverage):\\n  - to add `ninf`, retaining the intended library call,\\n  - to use the intrinsic, retaining the use of `select`, or\\n  - to expect the replacement to not occur.\\n\\nThe following is tested:\\n  - The pow intrinsic folds to a `select` instruction to\\n    handle -//infinity//.\\n  - The pow library call folds, with `ninf`, to `sqrt` without the\\n    `select` instruction associated with handling -//infinity//.\\n  - The pow library call does not fold to `sqrt` without `ninf`.\\n\\nReviewed By: spatel\\n\\nDifferential Revision: https://reviews.llvm.org/D87877\", \"tree\": {\"sha\": \"6d3029c26b7423625df3c67a6f26778521b2e5aa\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/6d3029c26b7423625df3c67a6f26778521b2e5aa\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/32c9991dab5cb1454959561c77f9d0089d981429\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/32c9991dab5cb1454959561c77f9d0089d981429\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/32c9991dab5cb1454959561c77f9d0089d981429\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/32c9991dab5cb1454959561c77f9d0089d981429/comments\", \"author\": {\"login\": \"hubert-reinterpretcast\", \"id\": 2730371, \"node_id\": \"MDQ6VXNlcjI3MzAzNzE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2730371?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hubert-reinterpretcast\", \"html_url\": \"https://github.com/hubert-reinterpretcast\", \"followers_url\": \"https://api.github.com/users/hubert-reinterpretcast/followers\", \"following_url\": \"https://api.github.com/users/hubert-reinterpretcast/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hubert-reinterpretcast/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hubert-reinterpretcast/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hubert-reinterpretcast/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hubert-reinterpretcast/orgs\", \"repos_url\": \"https://api.github.com/users/hubert-reinterpretcast/repos\", \"events_url\": \"https://api.github.com/users/hubert-reinterpretcast/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hubert-reinterpretcast/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"hubert-reinterpretcast\", \"id\": 2730371, \"node_id\": \"MDQ6VXNlcjI3MzAzNzE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2730371?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/hubert-reinterpretcast\", \"html_url\": \"https://github.com/hubert-reinterpretcast\", \"followers_url\": \"https://api.github.com/users/hubert-reinterpretcast/followers\", \"following_url\": \"https://api.github.com/users/hubert-reinterpretcast/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/hubert-reinterpretcast/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/hubert-reinterpretcast/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/hubert-reinterpretcast/subscriptions\", \"organizations_url\": \"https://api.github.com/users/hubert-reinterpretcast/orgs\", \"repos_url\": \"https://api.github.com/users/hubert-reinterpretcast/repos\", \"events_url\": \"https://api.github.com/users/hubert-reinterpretcast/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/hubert-reinterpretcast/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d6ac649ccda289ecc2d2c0cb51892d57e8ec328c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d6ac649ccda289ecc2d2c0cb51892d57e8ec328c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d6ac649ccda289ecc2d2c0cb51892d57e8ec328c\"}], \"stats\": {\"total\": 157, \"additions\": 69, \"deletions\": 88}, \"files\": [{\"sha\": \"bcda3f3440a3425a1dbc10f2cfac538f2c2a8d93\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp?ref=32c9991dab5cb1454959561c77f9d0089d981429\", \"patch\": \"@@ -1636,6 +1636,14 @@ Value *LibCallSimplifier::replacePowWithSqrt(CallInst *Pow, IRBuilderBase &B) {\\n   if (ExpoF->isNegative() && (!Pow->hasApproxFunc() && !Pow->hasAllowReassoc()))\\n     return nullptr;\\n \\n+  // If we have a pow() library call (accesses memory) and we can't guarantee\\n+  // that the base is not an infinity, give up:\\n+  // pow(-Inf, 0.5) is optionally required to have a result of +Inf (not setting\\n+  // errno), but sqrt(-Inf) is required by various standards to set errno.\\n+  if (!Pow->doesNotAccessMemory() && !Pow->hasNoInfs() &&\\n+      !isKnownNeverInfinity(Base, TLI))\\n+    return nullptr;\\n+\\n   Sqrt = getSqrtCall(Base, Attrs, Pow->doesNotAccessMemory(), Mod, B, TLI);\\n   if (!Sqrt)\\n     return nullptr;\"}, {\"sha\": \"22da98b96eec7070a15178f6e5357c8814dfd207\", \"filename\": \"llvm/test/Transforms/InstCombine/pow-1.ll\", \"status\": \"modified\", \"additions\": 28, \"deletions\": 46, \"changes\": 74, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-1.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-1.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-1.ll?ref=32c9991dab5cb1454959561c77f9d0089d981429\", \"patch\": \"@@ -19,6 +19,7 @@\\n ; in the cases below where pow is transformed into another function call.\\n \\n declare float @powf(float, float) nounwind readonly\\n+declare float @llvm.pow.f32(float, float)\\n declare double @pow(double, double) nounwind readonly\\n declare double @llvm.pow.f64(double, double)\\n declare <2 x float> @llvm.pow.v2f32(<2 x float>, <2 x float>) nounwind readonly\\n@@ -247,43 +248,34 @@ define <2 x double> @test_simplify6v(<2 x double> %x) {\\n \\n ; Check pow(x, 0.5) -> fabs(sqrt(x)), where x != -infinity.\\n \\n-define float @powf_libcall_to_select_sqrt(float %x) {\\n-; CHECK-LABEL: @powf_libcall_to_select_sqrt(\\n-; ANY-NEXT:    [[SQRTF:%.*]] = call float @sqrtf(float [[X:%.*]])\\n-; ANY-NEXT:    [[ABS:%.*]] = call float @llvm.fabs.f32(float [[SQRTF]])\\n-; ANY-NEXT:    [[ISINF:%.*]] = fcmp oeq float [[X]], 0xFFF0000000000000\\n-; ANY-NEXT:    [[TMP1:%.*]] = select i1 [[ISINF]], float 0x7FF0000000000000, float [[ABS]]\\n-; ANY-NEXT:    ret float [[TMP1]]\\n-; VC32-NEXT:   [[POW:%.*]] = call float @powf(float [[X:%.*]], float 5.000000e-01)\\n+define float @powf_libcall_half_ninf(float %x) {\\n+; CHECK-LABEL: @powf_libcall_half_ninf(\\n+; ANY-NEXT:    [[SQRTF:%.*]] = call ninf float @sqrtf(float [[X:%.*]])\\n+; ANY-NEXT:    [[ABS:%.*]] = call ninf float @llvm.fabs.f32(float [[SQRTF]])\\n+; ANY-NEXT:    ret float [[ABS]]\\n+; VC32-NEXT:   [[POW:%.*]] = call ninf float @powf(float [[X:%.*]], float 5.000000e-01)\\n ; VC32-NEXT:   ret float [[POW]]\\n-; VC51-NEXT:   [[POW:%.*]] = call float @powf(float [[X:%.*]], float 5.000000e-01)\\n+; VC51-NEXT:   [[POW:%.*]] = call ninf float @powf(float [[X:%.*]], float 5.000000e-01)\\n ; VC51-NEXT:   ret float [[POW]]\\n-; VC64-NEXT:   [[SQRTF:%.*]] = call float @sqrtf(float [[X:%.*]])\\n-; VC64-NEXT:   [[ABS:%.*]] = call float @llvm.fabs.f32(float [[SQRTF]])\\n-; VC64-NEXT:   [[ISINF:%.*]] = fcmp oeq float [[X]], 0xFFF0000000000000\\n-; VC64-NEXT:   [[TMP1:%.*]] = select i1 [[ISINF]], float 0x7FF0000000000000, float [[ABS]]\\n-; VC64-NEXT:   ret float [[TMP1]]\\n-; VC83-NEXT:   [[SQRTF:%.*]] = call float @sqrtf(float [[X:%.*]])\\n-; VC83-NEXT:   [[ABS:%.*]] = call float @llvm.fabs.f32(float [[SQRTF]])\\n-; VC83-NEXT:   [[ISINF:%.*]] = fcmp oeq float [[X]], 0xFFF0000000000000\\n-; VC83-NEXT:   [[TMP1:%.*]] = select i1 [[ISINF]], float 0x7FF0000000000000, float [[ABS]]\\n-; VC83-NEXT:   ret float [[TMP1]]\\n-; NOLIB-NEXT:    [[POW:%.*]] = call float @powf(float [[X:%.*]], float 5.000000e-01)\\n+; VC64-NEXT:   [[SQRTF:%.*]] = call ninf float @sqrtf(float [[X:%.*]])\\n+; VC64-NEXT:   [[ABS:%.*]] = call ninf float @llvm.fabs.f32(float [[SQRTF]])\\n+; VC64-NEXT:   ret float [[ABS]]\\n+; VC83-NEXT:   [[SQRTF:%.*]] = call ninf float @sqrtf(float [[X:%.*]])\\n+; VC83-NEXT:   [[ABS:%.*]] = call ninf float @llvm.fabs.f32(float [[SQRTF]])\\n+; VC83-NEXT:   ret float [[ABS]]\\n+; NOLIB-NEXT:    [[POW:%.*]] = call ninf float @powf(float [[X:%.*]], float 5.000000e-01)\\n ; NOLIB-NEXT:    ret float [[POW]]\\n ;\\n-  %retval = call float @powf(float %x, float 0.5)\\n+  %retval = call ninf float @powf(float %x, float 0.5)\\n   ret float %retval\\n }\\n \\n-define double @pow_libcall_to_select_sqrt(double %x) {\\n-; CHECK-LABEL: @pow_libcall_to_select_sqrt(\\n-; LIB-NEXT:    [[SQRT:%.*]] = call double @sqrt(double [[X:%.*]])\\n-; LIB-NEXT:    [[ABS:%.*]] = call double @llvm.fabs.f64(double [[SQRT]])\\n-; LIB-NEXT:    [[ISINF:%.*]] = fcmp oeq double [[X]], 0xFFF0000000000000\\n-; LIB-NEXT:    [[TMP1:%.*]] = select i1 [[ISINF]], double 0x7FF0000000000000, double [[ABS]]\\n-; LIB-NEXT:    ret double [[TMP1]]\\n-; NOLIB-NEXT:    [[POW:%.*]] = call double @pow(double [[X:%.*]], double 5.000000e-01)\\n-; NOLIB-NEXT:    ret double [[POW]]\\n+; Check pow(x, 0.5) where x may be -infinity does not call a library sqrt function.\\n+\\n+define double @pow_libcall_half_no_FMF(double %x) {\\n+; CHECK-LABEL: @pow_libcall_half_no_FMF(\\n+; CHECK-NEXT:    [[POW:%.*]] = call double @pow(double [[X:%.*]], double 5.000000e-01)\\n+; CHECK-NEXT:    ret double [[POW]]\\n ;\\n   %retval = call double @pow(double %x, double 0.5)\\n   ret double %retval\\n@@ -293,27 +285,17 @@ define double @pow_libcall_to_select_sqrt(double %x) {\\n \\n define float @test_simplify9(float %x) {\\n ; CHECK-LABEL: @test_simplify9(\\n-; ANY-NEXT:    ret float 0x7FF0000000000000\\n-; VC32-NEXT:   [[POW:%.*]] = call float @powf(float 0xFFF0000000000000, float 5.000000e-01)\\n-; VC32-NEXT:   ret float [[POW]]\\n-; VC51-NEXT:   [[POW:%.*]] = call float @powf(float 0xFFF0000000000000, float 5.000000e-01)\\n-; VC51-NEXT:   ret float [[POW]]\\n-; VC64-NEXT:   ret float 0x7FF0000000000000\\n-; VC83-NEXT:   ret float 0x7FF0000000000000\\n-; NOLIB-NEXT:    [[POW:%.*]] = call float @powf(float 0xFFF0000000000000, float 5.000000e-01)\\n-; NOLIB-NEXT:    ret float [[POW]]\\n+; CHECK-NEXT:    ret float 0x7FF0000000000000\\n ;\\n-  %retval = call float @powf(float 0xFFF0000000000000, float 0.5)\\n+  %retval = call float @llvm.pow.f32(float 0xFFF0000000000000, float 0.5)\\n   ret float %retval\\n }\\n \\n define double @test_simplify10(double %x) {\\n ; CHECK-LABEL: @test_simplify10(\\n-; LIB-NEXT:    ret double 0x7FF0000000000000\\n-; NOLIB-NEXT:    [[POW:%.*]] = call double @pow(double 0xFFF0000000000000, double 5.000000e-01)\\n-; NOLIB-NEXT:    ret double [[POW]]\\n+; CHECK-NEXT:    ret double 0x7FF0000000000000\\n ;\\n-  %retval = call double @pow(double 0xFFF0000000000000, double 0.5)\\n+  %retval = call double @llvm.pow.f64(double 0xFFF0000000000000, double 0.5)\\n   ret double %retval\\n }\\n \\n@@ -482,8 +464,8 @@ define <2 x double> @pow_neg1_double_fastv(<2 x double> %x) {\\n   ret <2 x double> %r\\n }\\n \\n-define double @test_simplify17(double %x) {\\n-; CHECK-LABEL: @test_simplify17(\\n+define double @pow_intrinsic_half_no_FMF(double %x) {\\n+; CHECK-LABEL: @pow_intrinsic_half_no_FMF(\\n ; CHECK-NEXT:    [[SQRT:%.*]] = call double @llvm.sqrt.f64(double [[X:%.*]])\\n ; CHECK-NEXT:    [[ABS:%.*]] = call double @llvm.fabs.f64(double [[SQRT]])\\n ; CHECK-NEXT:    [[ISINF:%.*]] = fcmp oeq double [[X]], 0xFFF0000000000000\"}, {\"sha\": \"38f64d5584ff798571a7fc7c4ace90586e294227\", \"filename\": \"llvm/test/Transforms/InstCombine/pow-sqrt.ll\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 41, \"changes\": 73, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-sqrt.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-sqrt.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpow-sqrt.ll?ref=32c9991dab5cb1454959561c77f9d0089d981429\", \"patch\": \"@@ -3,20 +3,19 @@\\n \\n ; Check the libcall and the intrinsic for each case with differing FMF.\\n \\n-; The transform to sqrt is allowed as long as we deal with -0.0 and -INF.\\n+; The transform to sqrt is not allowed if we risk setting errno due to -INF.\\n \\n define double @pow_libcall_half_no_FMF(double %x) {\\n ; CHECK-LABEL: @pow_libcall_half_no_FMF(\\n-; CHECK-NEXT:    [[SQRT:%.*]] = call double @sqrt(double [[X:%.*]])\\n-; CHECK-NEXT:    [[ABS:%.*]] = call double @llvm.fabs.f64(double [[SQRT]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp oeq double [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[TMP1:%.*]] = select i1 [[ISINF]], double 0x7FF0000000000000, double [[ABS]]\\n-; CHECK-NEXT:    ret double [[TMP1]]\\n+; CHECK-NEXT:    [[POW:%.*]] = call double @pow(double [[X:%.*]], double 5.000000e-01)\\n+; CHECK-NEXT:    ret double [[POW]]\\n ;\\n   %pow = call double @pow(double %x, double 5.0e-01)\\n   ret double %pow\\n }\\n \\n+; The transform to (non-errno setting) sqrt is allowed as long as we deal with -0.0 and -INF.\\n+\\n define double @pow_intrinsic_half_no_FMF(double %x) {\\n ; CHECK-LABEL: @pow_intrinsic_half_no_FMF(\\n ; CHECK-NEXT:    [[SQRT:%.*]] = call double @llvm.sqrt.f64(double [[X:%.*]])\\n@@ -29,20 +28,25 @@ define double @pow_intrinsic_half_no_FMF(double %x) {\\n   ret double %pow\\n }\\n \\n-; This makes no difference, but FMF are propagated.\\n+; `afn` makes no difference, but FMF are propagated/retained.\\n+\\n+; (As above) the transform to sqrt may generate EDOM due to -INF. Generally, EDOM implies\\n+; formation of a NaN (which then propagates). `afn` may justify returning NaN (along with\\n+; setting EDOM); however, the conservatively correct approach is to avoid both the NaN and\\n+; the EDOM.\\n \\n define double @pow_libcall_half_approx(double %x) {\\n ; CHECK-LABEL: @pow_libcall_half_approx(\\n-; CHECK-NEXT:    [[SQRT:%.*]] = call afn double @sqrt(double [[X:%.*]])\\n-; CHECK-NEXT:    [[ABS:%.*]] = call afn double @llvm.fabs.f64(double [[SQRT]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp afn oeq double [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[TMP1:%.*]] = select afn i1 [[ISINF]], double 0x7FF0000000000000, double [[ABS]]\\n-; CHECK-NEXT:    ret double [[TMP1]]\\n+; CHECK-NEXT:    [[POW:%.*]] = call afn double @pow(double [[X:%.*]], double 5.000000e-01)\\n+; CHECK-NEXT:    ret double [[POW]]\\n ;\\n   %pow = call afn double @pow(double %x, double 5.0e-01)\\n   ret double %pow\\n }\\n \\n+; (As above) the transform to (non-errno setting) sqrt is allowed as long as we deal with -0.0\\n+; and -INF.\\n+\\n define <2 x double> @pow_intrinsic_half_approx(<2 x double> %x) {\\n ; CHECK-LABEL: @pow_intrinsic_half_approx(\\n ; CHECK-NEXT:    [[SQRT:%.*]] = call afn <2 x double> @llvm.sqrt.v2f64(<2 x double> [[X:%.*]])\\n@@ -86,14 +90,12 @@ define <2 x double> @pow_intrinsic_half_ninf(<2 x double> %x) {\\n   ret <2 x double> %pow\\n }\\n \\n-; If we can disregard -0.0, no need for fabs.\\n+; If we can disregard -0.0, no need for fabs, but still (because of -INF) cannot use library sqrt.\\n \\n define double @pow_libcall_half_nsz(double %x) {\\n ; CHECK-LABEL: @pow_libcall_half_nsz(\\n-; CHECK-NEXT:    [[SQRT:%.*]] = call nsz double @sqrt(double [[X:%.*]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp nsz oeq double [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[TMP1:%.*]] = select nsz i1 [[ISINF]], double 0x7FF0000000000000, double [[SQRT]]\\n-; CHECK-NEXT:    ret double [[TMP1]]\\n+; CHECK-NEXT:    [[POW:%.*]] = call nsz double @pow(double [[X:%.*]], double 5.000000e-01)\\n+; CHECK-NEXT:    ret double [[POW]]\\n ;\\n   %pow = call nsz double @pow(double %x, double 5.0e-01)\\n   ret double %pow\\n@@ -162,35 +164,27 @@ define float @pow_libcall_neghalf_no_FMF(float %x) {\\n   ret float %pow\\n }\\n \\n+; If we can disregard INFs, a call to a library sqrt is okay.\\n ; Transform to sqrt+fdiv because 'reassoc' allows an extra rounding step.\\n ; Use 'fabs' to handle -0.0 correctly.\\n-; Use 'select' to handle -INF correctly.\\n \\n-define float @pow_libcall_neghalf_reassoc(float %x) {\\n-; CHECK-LABEL: @pow_libcall_neghalf_reassoc(\\n-; CHECK-NEXT:    [[SQRTF:%.*]] = call reassoc float @sqrtf(float [[X:%.*]])\\n-; CHECK-NEXT:    [[ABS:%.*]] = call reassoc float @llvm.fabs.f32(float [[SQRTF]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp reassoc oeq float [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[ABS_OP:%.*]] = fdiv reassoc float 1.000000e+00, [[ABS]]\\n-; CHECK-NEXT:    [[RECIPROCAL:%.*]] = select i1 [[ISINF]], float 0.000000e+00, float [[ABS_OP]]\\n+define float @pow_libcall_neghalf_reassoc_ninf(float %x) {\\n+; CHECK-LABEL: @pow_libcall_neghalf_reassoc_ninf(\\n+; CHECK-NEXT:    [[SQRTF:%.*]] = call reassoc ninf float @sqrtf(float [[X:%.*]])\\n+; CHECK-NEXT:    [[ABS:%.*]] = call reassoc ninf float @llvm.fabs.f32(float [[SQRTF]])\\n+; CHECK-NEXT:    [[RECIPROCAL:%.*]] = fdiv reassoc ninf float 1.000000e+00, [[ABS]]\\n ; CHECK-NEXT:    ret float [[RECIPROCAL]]\\n ;\\n-  %pow = call reassoc float @powf(float %x, float -5.0e-01)\\n+  %pow = call reassoc ninf float @powf(float %x, float -5.0e-01)\\n   ret float %pow\\n }\\n \\n-; Transform to sqrt+fdiv because 'afn' allows an extra rounding step.\\n-; Use 'fabs' to handle -0.0 correctly.\\n-; Use 'select' to handle -INF correctly.\\n+; If we cannot disregard INFs, a call to a library sqrt is not okay.\\n \\n define float @pow_libcall_neghalf_afn(float %x) {\\n ; CHECK-LABEL: @pow_libcall_neghalf_afn(\\n-; CHECK-NEXT:    [[SQRTF:%.*]] = call afn float @sqrtf(float [[X:%.*]])\\n-; CHECK-NEXT:    [[ABS:%.*]] = call afn float @llvm.fabs.f32(float [[SQRTF]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp afn oeq float [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[ABS_OP:%.*]] = fdiv afn float 1.000000e+00, [[ABS]]\\n-; CHECK-NEXT:    [[RECIPROCAL:%.*]] = select i1 [[ISINF]], float 0.000000e+00, float [[ABS_OP]]\\n-; CHECK-NEXT:    ret float [[RECIPROCAL]]\\n+; CHECK-NEXT:    [[POW:%.*]] = call afn float @powf(float [[X:%.*]], float -5.000000e-01)\\n+; CHECK-NEXT:    ret float [[POW]]\\n ;\\n   %pow = call afn float @powf(float %x, float -5.0e-01)\\n   ret float %pow\\n@@ -265,15 +259,12 @@ define <2 x double> @pow_intrinsic_neghalf_ninf(<2 x double> %x) {\\n   ret <2 x double> %pow\\n }\\n \\n-; If we can disregard -0.0, no need for fabs.\\n+; If we can disregard -0.0, no need for fabs, but still (because of -INF) cannot use library sqrt.\\n \\n define double @pow_libcall_neghalf_nsz(double %x) {\\n ; CHECK-LABEL: @pow_libcall_neghalf_nsz(\\n-; CHECK-NEXT:    [[SQRT:%.*]] = call nsz afn double @sqrt(double [[X:%.*]])\\n-; CHECK-NEXT:    [[ISINF:%.*]] = fcmp nsz afn oeq double [[X]], 0xFFF0000000000000\\n-; CHECK-NEXT:    [[SQRT_OP:%.*]] = fdiv nsz afn double 1.000000e+00, [[SQRT]]\\n-; CHECK-NEXT:    [[RECIPROCAL:%.*]] = select i1 [[ISINF]], double 0.000000e+00, double [[SQRT_OP]]\\n-; CHECK-NEXT:    ret double [[RECIPROCAL]]\\n+; CHECK-NEXT:    [[POW:%.*]] = call nsz afn double @pow(double [[X:%.*]], double -5.000000e-01)\\n+; CHECK-NEXT:    ret double [[POW]]\\n ;\\n   %pow = call afn nsz double @pow(double %x, double -5.0e-01)\\n   ret double %pow\"}, {\"sha\": \"54b3d7b2666a38a77cac74e933df2d520c972f23\", \"filename\": \"llvm/test/Transforms/InstCombine/win-math.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fwin-math.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/32c9991dab5cb1454959561c77f9d0089d981429/llvm%2Ftest%2FTransforms%2FInstCombine%2Fwin-math.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fwin-math.ll?ref=32c9991dab5cb1454959561c77f9d0089d981429\", \"patch\": \"@@ -330,6 +330,6 @@ define float @float_powsqrt(float %x) nounwind readnone {\\n ; MINGW64-NOT: float @powf\\n ; MINGW64: float @sqrtf\\n ; MINGW64: float @llvm.fabs.f32(\\n-    %1 = call float @powf(float %x, float 0.5)\\n+    %1 = call ninf float @powf(float %x, float 0.5)\\n     ret float %1\\n }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kZTNjYjk1NDhkNzc3MjYxODZkYjJkMzg0MTkzZTA1NjVjYjBhZmM1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/de3cb9548d77726186db2d384193e0565cb0afc5", "content": "{\"sha\": \"de3cb9548d77726186db2d384193e0565cb0afc5\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZGUzY2I5NTQ4ZDc3NzI2MTg2ZGIyZDM4NDE5M2UwNTY1Y2IwYWZjNQ==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2020-10-01T23:08:44Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2020-10-01T23:11:11Z\"}, \"message\": \"Fix a bug in memset formation with vectors of non-integral pointers\\n\\nWe were converting the non-integral store into a integer store which is not legal.\", \"tree\": {\"sha\": \"0e6b2195be38d065ab330a51b001b5b3db759f13\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/0e6b2195be38d065ab330a51b001b5b3db759f13\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/de3cb9548d77726186db2d384193e0565cb0afc5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/de3cb9548d77726186db2d384193e0565cb0afc5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/de3cb9548d77726186db2d384193e0565cb0afc5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/de3cb9548d77726186db2d384193e0565cb0afc5/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"caeb13aba853b949ca45627f023dbeac77c13b2f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/caeb13aba853b949ca45627f023dbeac77c13b2f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/caeb13aba853b949ca45627f023dbeac77c13b2f\"}], \"stats\": {\"total\": 42, \"additions\": 31, \"deletions\": 11}, \"files\": [{\"sha\": \"38094377141fd8dfe95031eb18ea5211d4932979\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/de3cb9548d77726186db2d384193e0565cb0afc5/llvm%2Flib%2FTransforms%2FScalar%2FLoopIdiomRecognize.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/de3cb9548d77726186db2d384193e0565cb0afc5/llvm%2Flib%2FTransforms%2FScalar%2FLoopIdiomRecognize.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopIdiomRecognize.cpp?ref=de3cb9548d77726186db2d384193e0565cb0afc5\", \"patch\": \"@@ -455,18 +455,18 @@ LoopIdiomRecognize::isLegalStore(StoreInst *SI) {\\n   if (!SI->isUnordered())\\n     return LegalStoreKind::None;\\n \\n-  // Don't convert stores of non-integral pointer types to memsets (which stores\\n-  // integers).\\n-  if (DL->isNonIntegralPointerType(SI->getValueOperand()->getType()))\\n-    return LegalStoreKind::None;\\n-\\n   // Avoid merging nontemporal stores.\\n   if (SI->getMetadata(LLVMContext::MD_nontemporal))\\n     return LegalStoreKind::None;\\n \\n   Value *StoredVal = SI->getValueOperand();\\n   Value *StorePtr = SI->getPointerOperand();\\n \\n+  // Don't convert stores of non-integral pointer types to memsets (which stores\\n+  // integers).\\n+  if (DL->isNonIntegralPointerType(StoredVal->getType()->getScalarType()))\\n+    return LegalStoreKind::None;\\n+\\n   // Reject stores that are so large that they overflow an unsigned.\\n   // When storing out scalable vectors we bail out for now, since the code\\n   // below currently only works for constant strides.\"}, {\"sha\": \"c8271306535b80894c47e588b014a8e31141e39b\", \"filename\": \"llvm/test/Transforms/LoopIdiom/non-integral-pointers.ll\", \"status\": \"modified\", \"additions\": 26, \"deletions\": 6, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/de3cb9548d77726186db2d384193e0565cb0afc5/llvm%2Ftest%2FTransforms%2FLoopIdiom%2Fnon-integral-pointers.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/de3cb9548d77726186db2d384193e0565cb0afc5/llvm%2Ftest%2FTransforms%2FLoopIdiom%2Fnon-integral-pointers.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopIdiom%2Fnon-integral-pointers.ll?ref=de3cb9548d77726186db2d384193e0565cb0afc5\", \"patch\": \"@@ -3,13 +3,12 @@\\n target datalayout = \\\"e-m:e-i64:64-f80:128-n8:16:32:64-S128-ni:4\\\"\\n target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n \\n+; LIR'ing stores of pointers with address space 3 is fine, since\\n+; they're integral pointers.\\n define void @f_0(i8 addrspace(3)** %ptr) {\\n ; CHECK-LABEL: @f_0(\\n ; CHECK: call{{.*}}memset\\n \\n-; LIR'ing stores of pointers with address space 3 is fine, since\\n-; they're integral pointers.\\n-\\n entry:\\n   br label %for.body\\n \\n@@ -25,13 +24,14 @@ for.end:\\n   ret void\\n }\\n \\n+; LIR'ing stores of pointers with address space 4 is not ok, since\\n+; they're non-integral pointers. NOTE: Zero is special value which\\n+; can be converted, if we add said handling here, convert this test\\n+; to use any non-null pointer.\\n define void @f_1(i8 addrspace(4)** %ptr) {\\n ; CHECK-LABEL: @f_1(\\n ; CHECK-NOT: call{{.*}}memset\\n \\n-; LIR'ing stores of pointers with address space 4 is not ok, since\\n-; they're non-integral pointers.\\n-\\n entry:\\n   br label %for.body\\n \\n@@ -46,3 +46,23 @@ for.body:\\n for.end:\\n   ret void\\n }\\n+\\n+; Same as previous case, but vector of non-integral pointers\\n+define void @f_2(i8 addrspace(4)** %ptr) {\\n+; CHECK-LABEL: @f_2(\\n+; CHECK-NOT: call{{.*}}memset\\n+entry:\\n+  br label %for.body\\n+\\n+for.body:\\n+  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for.body ]\\n+  %arrayidx = getelementptr i8 addrspace(4)*, i8 addrspace(4)** %ptr, i64 %indvar\\n+  %addr = bitcast i8 addrspace(4)** %arrayidx to <2 x i8 addrspace(4)*>*\\n+  store <2 x i8 addrspace(4)*> zeroinitializer, <2 x i8 addrspace(4)*>* %addr, align 8\\n+  %indvar.next = add i64 %indvar, 2\\n+  %exitcond = icmp eq i64 %indvar.next, 10000\\n+  br i1 %exitcond, label %for.end, label %for.body\\n+\\n+for.end:\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mMTkyYTI3ZWQzYmFjZGY3MjdmMjc4NTdhZGViNmQzNzYyMzgzMjk1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f192a27ed3bacdf727f27857adeb6d3762383295", "content": "{\"sha\": \"f192a27ed3bacdf727f27857adeb6d3762383295\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZjE5MmEyN2VkM2JhY2RmNzI3ZjI3ODU3YWRlYjZkMzc2MjM4MzI5NQ==\", \"commit\": {\"author\": {\"name\": \"Changpeng Fang\", \"email\": \"Changpeng.Fang@amd.com\", \"date\": \"2020-10-09T23:20:26Z\"}, \"committer\": {\"name\": \"Changpeng Fang\", \"email\": \"Changpeng.Fang@amd.com\", \"date\": \"2020-10-09T23:20:26Z\"}, \"message\": \"Sink: Handle instruction sink when a user is dead\\n\\nSummary:\\n  The current instruction sink pass uses findNearestCommonDominator of all users to find block to sink the instruction to.\\nHowever, a user may be in a dead block, which will result in unexpected behavior.\\n\\nThis patch handles such cases by skipping dead blocks. This patch fixes:\\nhttps://bugs.llvm.org/show_bug.cgi?id=47415\\n\\nReviewers:\\n  MaskRay, arsenm\\n\\nDifferential Revision:\\n  https://reviews.llvm.org/D89166\", \"tree\": {\"sha\": \"4d487ffd0a4223b826b700da6f4aa74cdc699e71\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/4d487ffd0a4223b826b700da6f4aa74cdc699e71\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f192a27ed3bacdf727f27857adeb6d3762383295\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f192a27ed3bacdf727f27857adeb6d3762383295\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f192a27ed3bacdf727f27857adeb6d3762383295\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f192a27ed3bacdf727f27857adeb6d3762383295/comments\", \"author\": {\"login\": \"changpeng\", \"id\": 4239661, \"node_id\": \"MDQ6VXNlcjQyMzk2NjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4239661?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/changpeng\", \"html_url\": \"https://github.com/changpeng\", \"followers_url\": \"https://api.github.com/users/changpeng/followers\", \"following_url\": \"https://api.github.com/users/changpeng/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/changpeng/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/changpeng/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/changpeng/subscriptions\", \"organizations_url\": \"https://api.github.com/users/changpeng/orgs\", \"repos_url\": \"https://api.github.com/users/changpeng/repos\", \"events_url\": \"https://api.github.com/users/changpeng/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/changpeng/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"changpeng\", \"id\": 4239661, \"node_id\": \"MDQ6VXNlcjQyMzk2NjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4239661?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/changpeng\", \"html_url\": \"https://github.com/changpeng\", \"followers_url\": \"https://api.github.com/users/changpeng/followers\", \"following_url\": \"https://api.github.com/users/changpeng/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/changpeng/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/changpeng/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/changpeng/subscriptions\", \"organizations_url\": \"https://api.github.com/users/changpeng/orgs\", \"repos_url\": \"https://api.github.com/users/changpeng/repos\", \"events_url\": \"https://api.github.com/users/changpeng/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/changpeng/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e0b89df2e0f0130881bf6c39bf31d7f6aac00e0f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e0b89df2e0f0130881bf6c39bf31d7f6aac00e0f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e0b89df2e0f0130881bf6c39bf31d7f6aac00e0f\"}], \"stats\": {\"total\": 45, \"additions\": 45, \"deletions\": 0}, \"files\": [{\"sha\": \"89cfbe384be44472fbf72c6bd3e5238ccbcf045d\", \"filename\": \"llvm/lib/Transforms/Scalar/Sink.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f192a27ed3bacdf727f27857adeb6d3762383295/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f192a27ed3bacdf727f27857adeb6d3762383295/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp?ref=f192a27ed3bacdf727f27857adeb6d3762383295\", \"patch\": \"@@ -135,6 +135,9 @@ static bool SinkInstruction(Instruction *Inst,\\n   for (Use &U : Inst->uses()) {\\n     Instruction *UseInst = cast<Instruction>(U.getUser());\\n     BasicBlock *UseBlock = UseInst->getParent();\\n+    // Don't worry about dead users.\\n+    if (!DT.isReachableFromEntry(UseBlock))\\n+      continue;\\n     if (PHINode *PN = dyn_cast<PHINode>(UseInst)) {\\n       // PHI nodes use the operand in the predecessor block, not the block with\\n       // the PHI.\"}, {\"sha\": \"2d21defbb42afef58b267b8e9fa44f4c97366bc7\", \"filename\": \"llvm/test/Transforms/Sink/dead-user.ll\", \"status\": \"added\", \"additions\": 42, \"deletions\": 0, \"changes\": 42, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f192a27ed3bacdf727f27857adeb6d3762383295/llvm%2Ftest%2FTransforms%2FSink%2Fdead-user.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f192a27ed3bacdf727f27857adeb6d3762383295/llvm%2Ftest%2FTransforms%2FSink%2Fdead-user.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSink%2Fdead-user.ll?ref=f192a27ed3bacdf727f27857adeb6d3762383295\", \"patch\": \"@@ -0,0 +1,42 @@\\n+; Compiler should not be broken with a dead user.\\n+; RUN: opt -sink -S < %s | FileCheck %s\\n+\\n+; CHECK-LABEL: @test(\\n+; CHECK:       bb.0:\\n+; CHECK-NEXT:    %conv = sext i16 %p1 to i32\\n+; CHECK-NEXT:    br i1 undef, label %bb.1, label %bb.3\\n+\\n+; CHECK:       bb.1:                                             ; preds = %bb.0\\n+; CHECK-NEXT:    br label %bb.2\\n+\\n+; CHECK:       bb.2:                                             ; preds = %bb.2, %bb.1\\n+; CHECK-NEXT:    %and.2 = and i32 undef, %conv\\n+; CHECK-NEXT:    br label %bb.2\\n+\\n+; CHECK:       bb.3:                                             ; preds = %bb.3, %bb.0\\n+; CHECK-NEXT:    %and.3 = and i32 undef, %conv\\n+; CHECK-NEXT:    br label %bb.3\\n+\\n+; CHECK:       dead:                                             ; preds = %dead\\n+; CHECK-NEXT:    %and.dead = and i32 undef, %conv\\n+; CHECK-NEXT:    br label %dead\\n+define void @test(i16 %p1) {\\n+bb.0:\\n+  %conv = sext i16 %p1 to i32\\n+  br i1 undef, label %bb.1, label %bb.3\\n+\\n+bb.1:                                             ; preds = %bb.0\\n+  br label %bb.2\\n+\\n+bb.2:                                             ; preds = %bb.2, %bb.1\\n+  %and.2 = and i32 undef, %conv\\n+  br label %bb.2\\n+\\n+bb.3:                                             ; preds = %bb.3, %bb.0\\n+  %and.3 = and i32 undef, %conv\\n+  br label %bb.3\\n+\\n+dead:                                             ; preds = %dead\\n+  %and.dead = and i32 undef, %conv\\n+  br label %dead\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85NmYzNzJjMWU3NDAyNTk1ZWRkMmFlOWY4NmI5YmRmYTIyZGMxMDQ1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/96f372c1e7402595edd2ae9f86b9bdfa22dc1045", "content": "{\"sha\": \"96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OTZmMzcyYzFlNzQwMjU5NWVkZDJhZTlmODZiOWJkZmEyMmRjMTA0NQ==\", \"commit\": {\"author\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2020-10-20T22:01:39Z\"}, \"committer\": {\"name\": \"Kazu Hirata\", \"email\": \"kazu@google.com\", \"date\": \"2020-10-20T22:01:40Z\"}, \"message\": \"[AsmWriter] Construct SlotTracker with the function\\n\\nThis patch teaches BasicBlock::print to construct an instance of\\nSlotTracker with the containing function.\\n\\nWithout this patch, we dump:\\n\\n*** IR Dump After LoopInstSimplifyPass ***\\n; Preheader:\\n  br label %1\\n\\n; Loop:\\n<badref>:                                         ; preds = %1, %0\\n  br label %1\\n\\nNote \\\"<badref>\\\" above.  This happens because BasicBlock::print calls:\\n\\n  SlotTracker SlotTable(this->getModule());\\n\\nNote that this constructor does not add the contents of functions to\\nthe slot table.  That is, basic blocks are left unnumbered.\\n\\nThis patch fixes the problem by switching to:\\n\\n  SlotTracker SlotTable(this->getParent());\\n\\nwhich does add the contents of the Module and the function,\\nthis->getParent(), to the slot table.\\n\\nDifferential Revision: https://reviews.llvm.org/D89567\", \"tree\": {\"sha\": \"63e37588f6bfbaac6a7b2054b16b99be8ef447e2\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/63e37588f6bfbaac6a7b2054b16b99be8ef447e2\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/96f372c1e7402595edd2ae9f86b9bdfa22dc1045/comments\", \"author\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"kazutakahirata\", \"id\": 57370056, \"node_id\": \"MDQ6VXNlcjU3MzcwMDU2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/57370056?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kazutakahirata\", \"html_url\": \"https://github.com/kazutakahirata\", \"followers_url\": \"https://api.github.com/users/kazutakahirata/followers\", \"following_url\": \"https://api.github.com/users/kazutakahirata/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kazutakahirata/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kazutakahirata/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kazutakahirata/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kazutakahirata/orgs\", \"repos_url\": \"https://api.github.com/users/kazutakahirata/repos\", \"events_url\": \"https://api.github.com/users/kazutakahirata/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kazutakahirata/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"256492677d9591c97071ce1ee4b060a2680316c5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/256492677d9591c97071ce1ee4b060a2680316c5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/256492677d9591c97071ce1ee4b060a2680316c5\"}], \"stats\": {\"total\": 16, \"additions\": 15, \"deletions\": 1}, \"files\": [{\"sha\": \"53fea4fcbb247930451805c65706889dd41a3c03\", \"filename\": \"llvm/lib/IR/AsmWriter.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/96f372c1e7402595edd2ae9f86b9bdfa22dc1045/llvm%2Flib%2FIR%2FAsmWriter.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/96f372c1e7402595edd2ae9f86b9bdfa22dc1045/llvm%2Flib%2FIR%2FAsmWriter.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FAsmWriter.cpp?ref=96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"patch\": \"@@ -4417,7 +4417,7 @@ void Function::print(raw_ostream &ROS, AssemblyAnnotationWriter *AAW,\\n void BasicBlock::print(raw_ostream &ROS, AssemblyAnnotationWriter *AAW,\\n                      bool ShouldPreserveUseListOrder,\\n                      bool IsForDebug) const {\\n-  SlotTracker SlotTable(this->getModule());\\n+  SlotTracker SlotTable(this->getParent());\\n   formatted_raw_ostream OS(ROS);\\n   AssemblyWriter W(OS, SlotTable, this->getModule(), AAW,\\n                    IsForDebug,\"}, {\"sha\": \"ad361ae9efd7042f04b135e4b5c37abb41435f2c\", \"filename\": \"llvm/test/Other/bb-badref.ll\", \"status\": \"added\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/96f372c1e7402595edd2ae9f86b9bdfa22dc1045/llvm%2Ftest%2FOther%2Fbb-badref.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/96f372c1e7402595edd2ae9f86b9bdfa22dc1045/llvm%2Ftest%2FOther%2Fbb-badref.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FOther%2Fbb-badref.ll?ref=96f372c1e7402595edd2ae9f86b9bdfa22dc1045\", \"patch\": \"@@ -0,0 +1,14 @@\\n+; RUN: opt -passes=loop-instsimplify -print-after-all -disable-output -S < %s 2>&1 | FileCheck %s\\n+\\n+; loop-instsimplify dumps individual basic blocks as part of a loop,\\n+; not a function.  Verify that the non-entry basic block is labeled as\\n+; \\\"1\\\", not \\\"<badref>\\\".\\n+\\n+; CHECK-NOT: <badref>\\n+\\n+define void @foo() {\\n+  br label %1\\n+\\n+1:\\n+  br label %1\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wMDkyOGExOTU2YTE2MThmMzk0ZmZlOTlmYzYzYjBkODFlMWY4OGM3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/00928a1956a1618f394ffe99fc63b0d81e1f88c7", "content": "{\"sha\": \"00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDA5MjhhMTk1NmExNjE4ZjM5NGZmZTk5ZmM2M2IwZDgxZTFmODhjNw==\", \"commit\": {\"author\": {\"name\": \"Stanislav Mekhanoshin\", \"email\": \"Stanislav.Mekhanoshin@amd.com\", \"date\": \"2020-10-22T18:14:35Z\"}, \"committer\": {\"name\": \"Stanislav Mekhanoshin\", \"email\": \"Stanislav.Mekhanoshin@amd.com\", \"date\": \"2020-10-26T19:58:27Z\"}, \"message\": \"Fix SROA with a PHI mergig values from a same block\\n\\nThis fixes the bug 47945. It is legal to have a PHI with values\\nfrom from the same block, but values must stay the same. In this\\ncase it is illegal to merge different values.\\n\\nDifferential Revision: https://reviews.llvm.org/D89978\", \"tree\": {\"sha\": \"b63461ef5a1bbaa3325588bb9a886c5053cd677d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/b63461ef5a1bbaa3325588bb9a886c5053cd677d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/00928a1956a1618f394ffe99fc63b0d81e1f88c7/comments\", \"author\": {\"login\": \"rampitec\", \"id\": 8199369, \"node_id\": \"MDQ6VXNlcjgxOTkzNjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8199369?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rampitec\", \"html_url\": \"https://github.com/rampitec\", \"followers_url\": \"https://api.github.com/users/rampitec/followers\", \"following_url\": \"https://api.github.com/users/rampitec/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rampitec/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rampitec/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rampitec/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rampitec/orgs\", \"repos_url\": \"https://api.github.com/users/rampitec/repos\", \"events_url\": \"https://api.github.com/users/rampitec/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rampitec/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rampitec\", \"id\": 8199369, \"node_id\": \"MDQ6VXNlcjgxOTkzNjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8199369?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rampitec\", \"html_url\": \"https://github.com/rampitec\", \"followers_url\": \"https://api.github.com/users/rampitec/followers\", \"following_url\": \"https://api.github.com/users/rampitec/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rampitec/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rampitec/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rampitec/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rampitec/orgs\", \"repos_url\": \"https://api.github.com/users/rampitec/repos\", \"events_url\": \"https://api.github.com/users/rampitec/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rampitec/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d071bba9a4477290d0b164a2d338fb22ad2d3c3d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d071bba9a4477290d0b164a2d338fb22ad2d3c3d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d071bba9a4477290d0b164a2d338fb22ad2d3c3d\"}], \"stats\": {\"total\": 88, \"additions\": 82, \"deletions\": 6}, \"files\": [{\"sha\": \"a6fa4c734fd8da5fcc57374b0b5a7657c8e1008c\", \"filename\": \"llvm/lib/Transforms/Scalar/SROA.cpp\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 6, \"changes\": 19, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/00928a1956a1618f394ffe99fc63b0d81e1f88c7/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/00928a1956a1618f394ffe99fc63b0d81e1f88c7/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp?ref=00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"patch\": \"@@ -3545,13 +3545,20 @@ class AggLoadStoreRewriter : public InstVisitor<AggLoadStoreRewriter, bool> {\\n                                           PHI->getNumIncomingValues(),\\n                                           PHI->getName() + \\\".sroa.phi\\\");\\n     for (unsigned I = 0, E = PHI->getNumIncomingValues(); I != E; ++I) {\\n-      Instruction *In = cast<Instruction>(PHI->getIncomingValue(I));\\n+      BasicBlock *B = PHI->getIncomingBlock(I);\\n+      Value *NewVal = nullptr;\\n+      int Idx = NewPN->getBasicBlockIndex(B);\\n+      if (Idx >= 0) {\\n+        NewVal = NewPN->getIncomingValue(Idx);\\n+      } else {\\n+        Instruction *In = cast<Instruction>(PHI->getIncomingValue(I));\\n \\n-      IRBuilderTy B(In->getParent(), std::next(In->getIterator()));\\n-      Value *NewVal = IsInBounds\\n-          ? B.CreateInBoundsGEP(In, Index, In->getName() + \\\".sroa.gep\\\")\\n-          : B.CreateGEP(In, Index, In->getName() + \\\".sroa.gep\\\");\\n-      NewPN->addIncoming(NewVal, PHI->getIncomingBlock(I));\\n+        IRBuilderTy B(In->getParent(), std::next(In->getIterator()));\\n+        NewVal = IsInBounds\\n+            ? B.CreateInBoundsGEP(In, Index, In->getName() + \\\".sroa.gep\\\")\\n+            : B.CreateGEP(In, Index, In->getName() + \\\".sroa.gep\\\");\\n+      }\\n+      NewPN->addIncoming(NewVal, B);\\n     }\\n \\n     Visited.erase(&GEPI);\"}, {\"sha\": \"6bf2a77186582b19766f4a7a9b9a08ba6134ac48\", \"filename\": \"llvm/test/Transforms/SROA/phi-gep.ll\", \"status\": \"modified\", \"additions\": 69, \"deletions\": 0, \"changes\": 69, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/00928a1956a1618f394ffe99fc63b0d81e1f88c7/llvm%2Ftest%2FTransforms%2FSROA%2Fphi-gep.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/00928a1956a1618f394ffe99fc63b0d81e1f88c7/llvm%2Ftest%2FTransforms%2FSROA%2Fphi-gep.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSROA%2Fphi-gep.ll?ref=00928a1956a1618f394ffe99fc63b0d81e1f88c7\", \"patch\": \"@@ -452,6 +452,75 @@ bb2:\\n   ret void\\n }\\n \\n+define void @constant_value_phi() {\\n+; CHECK-LABEL: @constant_value_phi(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br label [[LAND_LHS_TRUE_I:%.*]]\\n+; CHECK:       land.lhs.true.i:\\n+; CHECK-NEXT:    br i1 undef, label [[COND_END_I:%.*]], label [[COND_END_I]]\\n+; CHECK:       cond.end.i:\\n+; CHECK-NEXT:    unreachable\\n+;\\n+entry:\\n+  %s1 = alloca [3 x i16]\\n+  %s = alloca [3 x i16]\\n+  %cast = bitcast [3 x i16]* %s1 to i16*\\n+  br label %land.lhs.true.i\\n+\\n+land.lhs.true.i:                                  ; preds = %entry\\n+  br i1 undef, label %cond.end.i, label %cond.end.i\\n+\\n+cond.end.i:                                       ; preds = %land.lhs.true.i, %land.lhs.true.i\\n+  %.pre-phi1 = phi i16* [ %cast, %land.lhs.true.i ], [ %cast, %land.lhs.true.i ]\\n+  %cast2 = bitcast [3 x i16]* %s to i16*\\n+  call void @llvm.memcpy.p0i16.p0i16.i64(i16* %.pre-phi1, i16* %cast2, i64 3, i1 false)\\n+  %gep = getelementptr inbounds [3 x i16], [3 x i16]* %s, i32 0, i32 0\\n+  %load = load i16, i16* %gep\\n+  unreachable\\n+}\\n+\\n+define i32 @test_sroa_phi_gep_multiple_values_from_same_block(i32 %arg) {\\n+; CHECK-LABEL: @test_sroa_phi_gep_multiple_values_from_same_block(\\n+; CHECK-NEXT:  bb.1:\\n+; CHECK-NEXT:    switch i32 [[ARG:%.*]], label [[BB_3:%.*]] [\\n+; CHECK-NEXT:    i32 1, label [[BB_2:%.*]]\\n+; CHECK-NEXT:    i32 2, label [[BB_2]]\\n+; CHECK-NEXT:    i32 3, label [[BB_4:%.*]]\\n+; CHECK-NEXT:    i32 4, label [[BB_4]]\\n+; CHECK-NEXT:    ]\\n+; CHECK:       bb.2:\\n+; CHECK-NEXT:    br label [[BB_4]]\\n+; CHECK:       bb.3:\\n+; CHECK-NEXT:    br label [[BB_4]]\\n+; CHECK:       bb.4:\\n+; CHECK-NEXT:    [[PHI_SROA_PHI_SROA_SPECULATED:%.*]] = phi i32 [ undef, [[BB_3]] ], [ undef, [[BB_2]] ], [ undef, [[BB_1:%.*]] ], [ undef, [[BB_1]] ]\\n+; CHECK-NEXT:    ret i32 [[PHI_SROA_PHI_SROA_SPECULATED]]\\n+;\\n+bb.1:\\n+  %a = alloca %pair, align 4\\n+  %b = alloca %pair, align 4\\n+  switch i32 %arg, label %bb.3 [\\n+  i32 1, label %bb.2\\n+  i32 2, label %bb.2\\n+  i32 3, label %bb.4\\n+  i32 4, label %bb.4\\n+  ]\\n+\\n+bb.2:                                                ; preds = %bb.1, %bb.1\\n+  br label %bb.4\\n+\\n+bb.3:                                                ; preds = %bb.1\\n+  br label %bb.4\\n+\\n+bb.4:                                                ; preds = %bb.1, %bb.1, %bb.3, %bb.2\\n+  %phi = phi %pair* [ %a, %bb.3 ], [ %a, %bb.2 ], [ %b, %bb.1 ], [ %b, %bb.1 ]\\n+  %gep = getelementptr inbounds %pair, %pair* %phi, i32 0, i32 1\\n+  %load = load i32, i32* %gep, align 4\\n+  ret i32 %load\\n+}\\n+\\n declare %pair* @foo()\\n \\n declare i32 @__gxx_personality_v0(...)\\n+\\n+declare void @llvm.memcpy.p0i16.p0i16.i64(i16* noalias nocapture writeonly, i16* noalias nocapture readonly, i64, i1 immarg)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wOTI2NmU0YWYwNGVjMmRjM2EzYWZjMTlhM2Y5ZDU2NThkNDgyYTQ0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/09266e4af04ec2dc3a3afc19a3f9d5658d482a44", "content": "{\"sha\": \"09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDkyNjZlNGFmMDRlYzJkYzNhM2FmYzE5YTNmOWQ1NjU4ZDQ4MmE0NA==\", \"commit\": {\"author\": {\"name\": \"Akira Hatanaka\", \"email\": \"ahatanaka@apple.com\", \"date\": \"2020-11-13T02:33:29Z\"}, \"committer\": {\"name\": \"Akira Hatanaka\", \"email\": \"ahatanaka@apple.com\", \"date\": \"2020-11-13T06:20:02Z\"}, \"message\": \"[ObjC][ARC] Clear the lists of basic blocks and instructions before\\ncontinuing the loop\\n\\nThis fixes a bug introduced in c6f1713c46e61bbb8ece9ac5ac329d02e7f93228.\", \"tree\": {\"sha\": \"b224c5673d839f6ba48f170166e86bc846147d37\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/b224c5673d839f6ba48f170166e86bc846147d37\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/09266e4af04ec2dc3a3afc19a3f9d5658d482a44/comments\", \"author\": {\"login\": \"ahatanaka\", \"id\": 15806780, \"node_id\": \"MDQ6VXNlcjE1ODA2Nzgw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15806780?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ahatanaka\", \"html_url\": \"https://github.com/ahatanaka\", \"followers_url\": \"https://api.github.com/users/ahatanaka/followers\", \"following_url\": \"https://api.github.com/users/ahatanaka/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ahatanaka/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ahatanaka/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ahatanaka/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ahatanaka/orgs\", \"repos_url\": \"https://api.github.com/users/ahatanaka/repos\", \"events_url\": \"https://api.github.com/users/ahatanaka/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ahatanaka/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"ahatanaka\", \"id\": 15806780, \"node_id\": \"MDQ6VXNlcjE1ODA2Nzgw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/15806780?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ahatanaka\", \"html_url\": \"https://github.com/ahatanaka\", \"followers_url\": \"https://api.github.com/users/ahatanaka/followers\", \"following_url\": \"https://api.github.com/users/ahatanaka/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ahatanaka/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ahatanaka/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ahatanaka/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ahatanaka/orgs\", \"repos_url\": \"https://api.github.com/users/ahatanaka/repos\", \"events_url\": \"https://api.github.com/users/ahatanaka/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ahatanaka/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d3715b5a060f12d03cf8c18d4f4115091066ef07\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d3715b5a060f12d03cf8c18d4f4115091066ef07\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d3715b5a060f12d03cf8c18d4f4115091066ef07\"}], \"stats\": {\"total\": 30, \"additions\": 29, \"deletions\": 1}, \"files\": [{\"sha\": \"1cd79875df654499d00ee76a00aa3e3f01a25ae5\", \"filename\": \"llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/09266e4af04ec2dc3a3afc19a3f9d5658d482a44/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARCOpts.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/09266e4af04ec2dc3a3afc19a3f9d5658d482a44/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARCOpts.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FObjCARC%2FObjCARCOpts.cpp?ref=09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"patch\": \"@@ -2358,8 +2358,11 @@ void ObjCARCOpt::OptimizeReturns(Function &F) {\\n     if (HasSafePathToCall &&\\n         GetBasicARCInstKind(Retain) == ARCInstKind::RetainRV &&\\n         GetBasicARCInstKind(Autorelease) == ARCInstKind::AutoreleaseRV &&\\n-        !cast<CallInst>(*DependingInstructions.begin())->isTailCall())\\n+        !cast<CallInst>(*DependingInstructions.begin())->isTailCall()) {\\n+      DependingInstructions.clear();\\n+      Visited.clear();\\n       continue;\\n+    }\\n \\n     DependingInstructions.clear();\\n     Visited.clear();\"}, {\"sha\": \"f89e9f7e39d998ed647bd033358df528a2f91735\", \"filename\": \"llvm/test/Transforms/ObjCARC/rv.ll\", \"status\": \"modified\", \"additions\": 25, \"deletions\": 0, \"changes\": 25, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/09266e4af04ec2dc3a3afc19a3f9d5658d482a44/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/09266e4af04ec2dc3a3afc19a3f9d5658d482a44/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FObjCARC%2Frv.ll?ref=09266e4af04ec2dc3a3afc19a3f9d5658d482a44\", \"patch\": \"@@ -427,6 +427,31 @@ lpad:\\n   resume { i8*, i32 } %4\\n }\\n \\n+; The second retainRV/autoreleaseRV pair can be removed since the call to\\n+; @returner is a tail call.\\n+\\n+; CHECK-LABEL: define i8* @test30(\\n+; CHECK: %[[V0:.*]] = call i8* @returner()\\n+; CHECK-NEXT: call i8* @llvm.objc.retainAutoreleasedReturnValue(i8* %[[V0]])\\n+; CHECK-NEXT: call i8* @llvm.objc.autoreleaseReturnValue(i8* %[[V0]])\\n+; CHECK-NEXT: ret i8* %[[V0]]\\n+; CHECK: %[[V3:.*]] = tail call i8* @returner()\\n+; CHECK-NEXT: ret i8* %[[V3]]\\n+\\n+define i8* @test30(i1 %cond) {\\n+  br i1 %cond, label %bb0, label %bb1\\n+bb0:\\n+  %v0 = call i8* @returner()\\n+  %v1 = call i8* @llvm.objc.retainAutoreleasedReturnValue(i8* %v0)\\n+  %v2 = call i8* @llvm.objc.autoreleaseReturnValue(i8* %v0)\\n+  ret i8* %v0\\n+bb1:\\n+  %v3 = tail call i8* @returner()\\n+  %v4 = call i8* @llvm.objc.retainAutoreleasedReturnValue(i8* %v3)\\n+  %v5 = call i8* @llvm.objc.autoreleaseReturnValue(i8* %v3)\\n+  ret i8* %v3\\n+}\\n+\\n !0 = !{}\\n \\n ; CHECK: attributes [[NUW]] = { nounwind }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mNzQ4ZTkyMjk1NTE1ZWE3YjM5Y2Q2ODdhNzE4OTE1YjU1OWRlNmVjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f748e92295515ea7b39cd687a718915b559de6ec", "content": "{\"sha\": \"f748e92295515ea7b39cd687a718915b559de6ec\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6Zjc0OGU5MjI5NTUxNWVhN2IzOWNkNjg3YTcxODkxNWI1NTlkZTZlYw==\", \"commit\": {\"author\": {\"name\": \"Arthur Eubanks\", \"email\": \"aeubanks@google.com\", \"date\": \"2021-01-11T21:50:52Z\"}, \"committer\": {\"name\": \"Arthur Eubanks\", \"email\": \"aeubanks@google.com\", \"date\": \"2021-01-12T19:04:40Z\"}, \"message\": \"[NewPM] Run non-trivial loop unswitching under -O2/3/s/z\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=48715.\\n\\nReviewed By: asbirlea\\n\\nDifferential Revision: https://reviews.llvm.org/D94448\", \"tree\": {\"sha\": \"05091ca9a68e10cb02eeb71b7635179407295ed5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/05091ca9a68e10cb02eeb71b7635179407295ed5\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f748e92295515ea7b39cd687a718915b559de6ec\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f748e92295515ea7b39cd687a718915b559de6ec\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f748e92295515ea7b39cd687a718915b559de6ec\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f748e92295515ea7b39cd687a718915b559de6ec/comments\", \"author\": {\"login\": \"aeubanks\", \"id\": 10538900, \"node_id\": \"MDQ6VXNlcjEwNTM4OTAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/10538900?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aeubanks\", \"html_url\": \"https://github.com/aeubanks\", \"followers_url\": \"https://api.github.com/users/aeubanks/followers\", \"following_url\": \"https://api.github.com/users/aeubanks/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aeubanks/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aeubanks/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aeubanks/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aeubanks/orgs\", \"repos_url\": \"https://api.github.com/users/aeubanks/repos\", \"events_url\": \"https://api.github.com/users/aeubanks/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aeubanks/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"aeubanks\", \"id\": 10538900, \"node_id\": \"MDQ6VXNlcjEwNTM4OTAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/10538900?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aeubanks\", \"html_url\": \"https://github.com/aeubanks\", \"followers_url\": \"https://api.github.com/users/aeubanks/followers\", \"following_url\": \"https://api.github.com/users/aeubanks/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aeubanks/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aeubanks/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aeubanks/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aeubanks/orgs\", \"repos_url\": \"https://api.github.com/users/aeubanks/repos\", \"events_url\": \"https://api.github.com/users/aeubanks/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aeubanks/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4718ec01669b01373180f4cd1256c6e2dd6f3999\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4718ec01669b01373180f4cd1256c6e2dd6f3999\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4718ec01669b01373180f4cd1256c6e2dd6f3999\"}], \"stats\": {\"total\": 49, \"additions\": 44, \"deletions\": 5}, \"files\": [{\"sha\": \"0d7f442f9ff4e6ae1e8a5889d4f4aaf05bc6330a\", \"filename\": \"llvm/lib/Passes/PassBuilder.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Flib%2FPasses%2FPassBuilder.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Flib%2FPasses%2FPassBuilder.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FPasses%2FPassBuilder.cpp?ref=f748e92295515ea7b39cd687a718915b559de6ec\", \"patch\": \"@@ -724,7 +724,7 @@ PassBuilder::buildFunctionSimplificationPipeline(OptimizationLevel Level,\\n   LPM1.addPass(LoopRotatePass(Level != OptimizationLevel::Oz));\\n   // TODO: Investigate promotion cap for O1.\\n   LPM1.addPass(LICMPass(PTO.LicmMssaOptCap, PTO.LicmMssaNoAccForPromotionCap));\\n-  LPM1.addPass(SimpleLoopUnswitchPass());\\n+  LPM1.addPass(SimpleLoopUnswitchPass(/* NonTrivial */ true));\\n   LPM2.addPass(LoopIdiomRecognizePass());\\n   LPM2.addPass(IndVarSimplifyPass());\\n \"}, {\"sha\": \"f268d9bd5506b7500d5cfa944622eb30cae77e29\", \"filename\": \"llvm/test/Transforms/LoopUnroll/opt-levels.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fopt-levels.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fopt-levels.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fopt-levels.ll?ref=f748e92295515ea7b39cd687a718915b559de6ec\", \"patch\": \"@@ -7,10 +7,10 @@\\n ; the behavior, we artificially disable unrolling for anything but O3 by setting\\n ; the default threshold to 0.\\n \\n-; O3:     loop2.preheader\\n-; O2-NOT: loop2.preheader\\n-; Os-NOT: loop2.preheader\\n-; Oz-NOT: loop2.preheader\\n+; O3:     loop1.preheader\\n+; O2-NOT: loop1.preheader\\n+; Os-NOT: loop1.preheader\\n+; Oz-NOT: loop1.preheader\\n \\n define void @unroll(i32 %iter, i32* %addr1, i32* %addr2) nounwind {\\n entry:\"}, {\"sha\": \"953b407cccd98fd11387393e54e4f85d699b3dfc\", \"filename\": \"llvm/test/Transforms/SimpleLoopUnswitch/pipeline.ll\", \"status\": \"added\", \"additions\": 39, \"deletions\": 0, \"changes\": 39, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fpipeline.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f748e92295515ea7b39cd687a718915b559de6ec/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fpipeline.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fpipeline.ll?ref=f748e92295515ea7b39cd687a718915b559de6ec\", \"patch\": \"@@ -0,0 +1,39 @@\\n+; RUN: opt < %s -S -passes=\\\"default<O1>\\\" | FileCheck %s -check-prefix=O1\\n+; RUN: opt < %s -S -passes=\\\"default<O2>\\\" | FileCheck %s -check-prefix=O2\\n+\\n+declare i32 @a()\\n+declare i32 @b()\\n+declare i32 @c()\\n+\\n+; O1-NOT: loop_begin.us:\\n+; O2: loop_begin.us:\\n+\\n+define i32 @test1(i1* %ptr, i1 %cond1, i1 %cond2) {\\n+entry:\\n+  br label %loop_begin\\n+\\n+loop_begin:\\n+  br i1 %cond1, label %loop_a, label %loop_b\\n+\\n+loop_a:\\n+  call i32 @a()\\n+  br label %latch\\n+\\n+loop_b:\\n+  br i1 %cond2, label %loop_b_a, label %loop_b_b\\n+\\n+loop_b_a:\\n+  call i32 @b()\\n+  br label %latch\\n+\\n+loop_b_b:\\n+  call i32 @c()\\n+  br label %latch\\n+\\n+latch:\\n+  %v = load i1, i1* %ptr\\n+  br i1 %v, label %loop_begin, label %loop_exit\\n+\\n+loop_exit:\\n+  ret i32 0\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84NzU4OTFhMTBkNTBhNzkxZDNmMDc2YzkyNTllNjBhZjZjOWFmMThjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/875891a10d50a791d3f076c9259e60af6c9af18c", "content": "{\"sha\": \"875891a10d50a791d3f076c9259e60af6c9af18c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ODc1ODkxYTEwZDUwYTc5MWQzZjA3NmM5MjU5ZTYwYWY2YzlhZjE4Yw==\", \"commit\": {\"author\": {\"name\": \"William S. Moses\", \"email\": \"gh@wsmoses.com\", \"date\": \"2021-03-09T16:55:19Z\"}, \"committer\": {\"name\": \"William S. Moses\", \"email\": \"gh@wsmoses.com\", \"date\": \"2021-03-10T00:03:39Z\"}, \"message\": \"[MemoryDependence] Fix invariant group store\\n\\nFix bug in MemoryDependence [and thus GVN] for invariant group.\\n\\nPreviously MemDep didn't verify that the store was storing into a\\npointer rather than a store simply using a pointer.\\n\\nDifferential Revision: https://reviews.llvm.org/D98267\", \"tree\": {\"sha\": \"d04a3079292987a604fe6fdc0c0d601c874e439a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d04a3079292987a604fe6fdc0c0d601c874e439a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/875891a10d50a791d3f076c9259e60af6c9af18c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/875891a10d50a791d3f076c9259e60af6c9af18c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/875891a10d50a791d3f076c9259e60af6c9af18c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/875891a10d50a791d3f076c9259e60af6c9af18c/comments\", \"author\": {\"login\": \"wsmoses\", \"id\": 1260124, \"node_id\": \"MDQ6VXNlcjEyNjAxMjQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1260124?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wsmoses\", \"html_url\": \"https://github.com/wsmoses\", \"followers_url\": \"https://api.github.com/users/wsmoses/followers\", \"following_url\": \"https://api.github.com/users/wsmoses/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wsmoses/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wsmoses/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wsmoses/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wsmoses/orgs\", \"repos_url\": \"https://api.github.com/users/wsmoses/repos\", \"events_url\": \"https://api.github.com/users/wsmoses/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wsmoses/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"wsmoses\", \"id\": 1260124, \"node_id\": \"MDQ6VXNlcjEyNjAxMjQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1260124?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wsmoses\", \"html_url\": \"https://github.com/wsmoses\", \"followers_url\": \"https://api.github.com/users/wsmoses/followers\", \"following_url\": \"https://api.github.com/users/wsmoses/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wsmoses/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wsmoses/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wsmoses/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wsmoses/orgs\", \"repos_url\": \"https://api.github.com/users/wsmoses/repos\", \"events_url\": \"https://api.github.com/users/wsmoses/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wsmoses/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"75f3f778052cdcd89e79f7a42a50915ee5ce2281\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/75f3f778052cdcd89e79f7a42a50915ee5ce2281\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/75f3f778052cdcd89e79f7a42a50915ee5ce2281\"}], \"stats\": {\"total\": 25, \"additions\": 24, \"deletions\": 1}, \"files\": [{\"sha\": \"886b5bf4acd387fbb452d62f183b1ad685521c08\", \"filename\": \"llvm/lib/Analysis/MemoryDependenceAnalysis.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/875891a10d50a791d3f076c9259e60af6c9af18c/llvm%2Flib%2FAnalysis%2FMemoryDependenceAnalysis.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/875891a10d50a791d3f076c9259e60af6c9af18c/llvm%2Flib%2FAnalysis%2FMemoryDependenceAnalysis.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FMemoryDependenceAnalysis.cpp?ref=875891a10d50a791d3f076c9259e60af6c9af18c\", \"patch\": \"@@ -344,7 +344,9 @@ MemoryDependenceResults::getInvariantGroupPointerDependency(LoadInst *LI,\\n       // If we hit load/store with the same invariant.group metadata (and the\\n       // same pointer operand) we can assume that value pointed by pointer\\n       // operand didn't change.\\n-      if ((isa<LoadInst>(U) || isa<StoreInst>(U)) &&\\n+      if ((isa<LoadInst>(U) ||\\n+           (isa<StoreInst>(U) &&\\n+            cast<StoreInst>(U)->getPointerOperand() == Ptr)) &&\\n           U->hasMetadata(LLVMContext::MD_invariant_group))\\n         ClosestDependency = GetClosestDependency(ClosestDependency, U);\\n     }\"}, {\"sha\": \"16da4b8cd42451ca7879644c1448bc2a230a58e3\", \"filename\": \"llvm/test/Transforms/GVN/storeinvgroup.ll\", \"status\": \"added\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/875891a10d50a791d3f076c9259e60af6c9af18c/llvm%2Ftest%2FTransforms%2FGVN%2Fstoreinvgroup.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/875891a10d50a791d3f076c9259e60af6c9af18c/llvm%2Ftest%2FTransforms%2FGVN%2Fstoreinvgroup.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVN%2Fstoreinvgroup.ll?ref=875891a10d50a791d3f076c9259e60af6c9af18c\", \"patch\": \"@@ -0,0 +1,21 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt -gvn -S -o - < %s | FileCheck %s\\n+\\n+define double @code(double* %a1) {\\n+; CHECK-LABEL: @code(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[META:%.*]] = alloca double*, align 8\\n+; CHECK-NEXT:    store double 1.234500e+00, double* [[A1:%.*]], align 8\\n+; CHECK-NEXT:    store double* [[A1]], double** [[META]], align 8, !invariant.group !0\\n+; CHECK-NEXT:    ret double 1.234500e+00\\n+;\\n+entry:\\n+  %meta = alloca double*\\n+  store double 1.23450000e+00, double* %a1, align 8\\n+  store double* %a1, double** %meta, align 8, !invariant.group !0\\n+  %iload = load double, double* %a1, align 8, !invariant.group !1\\n+  ret double %iload\\n+}\\n+\\n+!0 = distinct !{}\\n+!1 = distinct !{}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83NjY5NDU1ZGY0OWU2ZmM4YWU3ZDlmNGJkNGVlOTViYjIwZTdlYjZlIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e", "content": "{\"sha\": \"7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NzY2OTQ1NWRmNDllNmZjOGFlN2Q5ZjRiZDRlZTk1YmIyMGU3ZWI2ZQ==\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2021-03-14T15:47:41Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2021-03-29T21:08:47Z\"}, \"message\": \"[X86][FastISel] Fix with.overflow eflags clobber (PR49587)\\n\\nIf the successor block has a phi node, then additional moves may\\nbe inserted into predecessors, which may clobber eflags. Don't try\\nto fold the with.overflow result into the branch in that case.\\n\\nThis is done by explicitly checking for any phis in successor\\nblocks, not sure if there's some more principled way to address\\nthis. Other fused compare and branch patterns avoid the issue by\\nemitting the comparison when handling the branch, so that no\\ninstructions may be inserted in between. In this case, the\\nwith.overflow call is emitted separately (and I don't think this\\nis avoidable, as it will generally have at least two users).\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=49587.\\n\\nDifferential Revision: https://reviews.llvm.org/D98600\", \"tree\": {\"sha\": \"c7d2cb24e671a92d623da299827d340a49af7240\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/c7d2cb24e671a92d623da299827d340a49af7240\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bd8dd580ffd221dd38e28c609b30d9b6361efac7\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bd8dd580ffd221dd38e28c609b30d9b6361efac7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bd8dd580ffd221dd38e28c609b30d9b6361efac7\"}], \"stats\": {\"total\": 13, \"additions\": 11, \"deletions\": 2}, \"files\": [{\"sha\": \"a04c9d6c0454b9d0246736e31888e44d0f5a01b7\", \"filename\": \"llvm/lib/Target/X86/X86FastISel.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e/llvm%2Flib%2FTarget%2FX86%2FX86FastISel.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e/llvm%2Flib%2FTarget%2FX86%2FX86FastISel.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86FastISel.cpp?ref=7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"patch\": \"@@ -284,6 +284,14 @@ bool X86FastISel::foldX86XALUIntrinsic(X86::CondCode &CC, const Instruction *I,\\n       return false;\\n   }\\n \\n+  // Make sure no potentially eflags clobbering phi moves can be inserted in\\n+  // between.\\n+  auto HasPhis = [](const BasicBlock *Succ) {\\n+    return !llvm::empty(Succ->phis());\\n+  };\\n+  if (I->isTerminator() && llvm::any_of(successors(I), HasPhis))\\n+    return false;\\n+\\n   CC = TmpCC;\\n   return true;\\n }\"}, {\"sha\": \"7dc54a526608cf13125cede2470ee47c68607306\", \"filename\": \"llvm/test/CodeGen/X86/pr49587.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e/llvm%2Ftest%2FCodeGen%2FX86%2Fpr49587.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e/llvm%2Ftest%2FCodeGen%2FX86%2Fpr49587.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fpr49587.ll?ref=7669455df49e6fc8ae7d9f4bd4ee95bb20e7eb6e\", \"patch\": \"@@ -5,10 +5,11 @@ define i32 @test(i64 %arg) nounwind {\\n ; CHECK-LABEL: test:\\n ; CHECK:       # %bb.0: # %entry\\n ; CHECK-NEXT:    subq $1, %rdi\\n-; CHECK-NEXT:    setb %al\\n+; CHECK-NEXT:    setb %cl\\n ; CHECK-NEXT:    xorl %eax, %eax\\n+; CHECK-NEXT:    testb $1, %cl\\n ; CHECK-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill\\n-; CHECK-NEXT:    jb .LBB0_2\\n+; CHECK-NEXT:    jne .LBB0_2\\n ; CHECK-NEXT:  # %bb.1: # %no_overflow\\n ; CHECK-NEXT:    movl $1, %eax\\n ; CHECK-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81MTRiYzAxY2EzYjlmOTc5NDVkZDQ5YWE0MGUwMTkyMmZlZDBlNDFkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/514bc01ca3b9f97945dd49aa40e01922fed0e41d", "content": "{\"sha\": \"514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NTE0YmMwMWNhM2I5Zjk3OTQ1ZGQ0OWFhNDBlMDE5MjJmZWQwZTQxZA==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-03-23T14:33:40Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-03-23T14:37:28Z\"}, \"message\": \"[SimplifyCFG] FoldBranchToCommonDest(): properly handle same-block external uses (PR49510/PR49689)\\n\\nWe clone bonus instructions to the end of the predecessor block,\\nand then use `SSAUpdater::RewriteUseAfterInsertions()`.\\nBut that only deals with the cases where the use-to-be-rewritten\\nare either in different block from the def, or come after the def.\\n\\nBut in some loop cases, the external use may be in the beginning of\\npredecessor block, before the newly cloned bonus instruction.\\n`SSAUpdater::RewriteUseAfterInsertions()` does not deal with that.\\nNotably, the external use can't happen to be both in the same block\\nand *after* the newly-cloned instruction, because of the fold preconditions.\\n\\nTo properly handle these cases, when the use is in the same block,\\nwe should instead use `SSAUpdater::RewriteUse()`.\\nTBN, they do the same thing for PHI users.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=49510\\nLikely Fixes https://bugs.llvm.org/show_bug.cgi?id=49689\", \"tree\": {\"sha\": \"5f0a8fabd63f14b82a6d354951bd30bcd06efa12\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/5f0a8fabd63f14b82a6d354951bd30bcd06efa12\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAmBZ/SgACgkQCDw+u0oW\\nieAWSQ/6A0vHcZSPIV88pZPV0XI5EHlr3HgoiKPjquxYHc/DNmCX6EqLL2WkoqTK\\nne2sYmDZfZcsaYC7AmMsY1dNYF48ENN/ZXEdOvbucVhdNRt5ssQkRf1lUswJgcAD\\nhzJp2+5t3EyIi78GFVU8CFxVXmIhBUA6h8tHDEju1KUo0ux86zlOPwUkdS4GbGve\\n9onqlOr7gD+/vLmBGYWV11tWKZLBgYxHmRfsHrtGRkcheVnHRjh+hM6V6T6cOo+Y\\nmfv0GaaDzQZ9upOj6HPHXNwH6pFh84EtmI3Z5izDy9kCgj7zvWKCU839A+bNGRYw\\nq+TfNmh2fcI9dqwHD5DzisbY02YE4WHEqrzFWQ7s95adNTQuyMF3IXll/L/gKF5x\\nwIax4f/o1vagXsVXJMGSlXVxWnhtUkqHzyCJHbWHXSD7n8BgtLqtC0remMazGnmT\\nLxr3FY1yNDCQqHflgcCFVs+6aP4fpGab3J7LcHLtJ19bYyAZyKz8k8a7RL5oGaqy\\n3CfuVTSbGC3xLJ1PtsNhw3G7A/0lrsxu5HqruPWxtzq4U4l1Mtnf33vGR1Qtv782\\nZd8db0dWPOGa/eRP8/ubyAnZ2+8iN/RF0PFz5VcmxhTLOu4YC7YYN9yIhY+1UfDb\\nN5rMmZp/HbolfV4VefKUCQ/ma37sFXlXCV1TvORma3g0+sEcQ3s=\\n=+1Ye\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree 5f0a8fabd63f14b82a6d354951bd30bcd06efa12\\nparent bc6b139392f638a69e85a474eb0eb59e13d9791a\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1616510020 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1616510248 +0300\\n\\n[SimplifyCFG] FoldBranchToCommonDest(): properly handle same-block external uses (PR49510/PR49689)\\n\\nWe clone bonus instructions to the end of the predecessor block,\\nand then use `SSAUpdater::RewriteUseAfterInsertions()`.\\nBut that only deals with the cases where the use-to-be-rewritten\\nare either in different block from the def, or come after the def.\\n\\nBut in some loop cases, the external use may be in the beginning of\\npredecessor block, before the newly cloned bonus instruction.\\n`SSAUpdater::RewriteUseAfterInsertions()` does not deal with that.\\nNotably, the external use can't happen to be both in the same block\\nand *after* the newly-cloned instruction, because of the fold preconditions.\\n\\nTo properly handle these cases, when the use is in the same block,\\nwe should instead use `SSAUpdater::RewriteUse()`.\\nTBN, they do the same thing for PHI users.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=49510\\nLikely Fixes https://bugs.llvm.org/show_bug.cgi?id=49689\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/514bc01ca3b9f97945dd49aa40e01922fed0e41d/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bc6b139392f638a69e85a474eb0eb59e13d9791a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bc6b139392f638a69e85a474eb0eb59e13d9791a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bc6b139392f638a69e85a474eb0eb59e13d9791a\"}], \"stats\": {\"total\": 43, \"additions\": 41, \"deletions\": 2}, \"files\": [{\"sha\": \"0b1215e597cd7f194c1f92341f3a3f5c216deac1\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 2, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/514bc01ca3b9f97945dd49aa40e01922fed0e41d/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/514bc01ca3b9f97945dd49aa40e01922fed0e41d/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"patch\": \"@@ -1097,8 +1097,13 @@ static void CloneInstructionsIntoPredecessorBlockAndUpdateSSAUses(\\n                          (NewBonusInst->getName() + \\\".merge\\\").str());\\n     SSAUpdate.AddAvailableValue(BB, &BonusInst);\\n     SSAUpdate.AddAvailableValue(PredBlock, NewBonusInst);\\n-    for (Use &U : make_early_inc_range(BonusInst.uses()))\\n-      SSAUpdate.RewriteUseAfterInsertions(U);\\n+    for (Use &U : make_early_inc_range(BonusInst.uses())) {\\n+      auto *UI = cast<Instruction>(U.getUser());\\n+      if (UI->getParent() != PredBlock)\\n+        SSAUpdate.RewriteUseAfterInsertions(U);\\n+      else // Use is in the same block as, and comes before, NewBonusInst.\\n+        SSAUpdate.RewriteUse(U);\\n+    }\\n   }\\n }\\n \"}, {\"sha\": \"b578bb1bd45eebfc8b49be9ab671256c86a9a647\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/fold-branch-to-common-dest.ll\", \"status\": \"modified\", \"additions\": 34, \"deletions\": 0, \"changes\": 34, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/514bc01ca3b9f97945dd49aa40e01922fed0e41d/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ffold-branch-to-common-dest.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/514bc01ca3b9f97945dd49aa40e01922fed0e41d/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ffold-branch-to-common-dest.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ffold-branch-to-common-dest.ll?ref=514bc01ca3b9f97945dd49aa40e01922fed0e41d\", \"patch\": \"@@ -894,3 +894,37 @@ if.end7:\\n cleanup:\\n   unreachable\\n }\\n+\\n+@global_pr49510 = external global i16, align 1\\n+\\n+define void @pr49510() {\\n+; CHECK-LABEL: @pr49510(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[DOTOLD:%.*]] = load i16, i16* @global_pr49510, align 1\\n+; CHECK-NEXT:    [[TOBOOL_OLD:%.*]] = icmp ne i16 [[DOTOLD]], 0\\n+; CHECK-NEXT:    br i1 [[TOBOOL_OLD]], label [[LAND_RHS:%.*]], label [[FOR_END:%.*]]\\n+; CHECK:       land.rhs:\\n+; CHECK-NEXT:    [[DOTMERGE:%.*]] = phi i16 [ [[TMP0:%.*]], [[LAND_RHS]] ], [ [[DOTOLD]], [[ENTRY:%.*]] ]\\n+; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i16 [[DOTMERGE]], 0\\n+; CHECK-NEXT:    [[TMP0]] = load i16, i16* @global_pr49510, align 1\\n+; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i16 [[TMP0]], 0\\n+; CHECK-NEXT:    [[OR_COND:%.*]] = select i1 [[CMP]], i1 [[TOBOOL]], i1 false\\n+; CHECK-NEXT:    br i1 [[OR_COND]], label [[LAND_RHS]], label [[FOR_END]]\\n+; CHECK:       for.end:\\n+; CHECK-NEXT:    ret void\\n+;\\n+entry:\\n+  br label %for.cond\\n+\\n+for.cond:\\n+  %0 = load i16, i16* @global_pr49510, align 1\\n+  %tobool = icmp ne i16 %0, 0\\n+  br i1 %tobool, label %land.rhs, label %for.end\\n+\\n+land.rhs:\\n+  %cmp = icmp slt i16 %0, 0\\n+  br i1 %cmp, label %for.cond, label %for.end\\n+\\n+for.end:\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jZTA2NmRhODFjM2U2MTc1YTAyZmE3YWU4MzE5MzFiNWU0MTI2YTJiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ce066da81c3e6175a02fa7ae831931b5e4126a2b", "content": "{\"sha\": \"ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6Y2UwNjZkYTgxYzNlNjE3NWEwMmZhN2FlODMxOTMxYjVlNDEyNmEyYg==\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2021-03-28T19:20:50Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"nikita.ppv@gmail.com\", \"date\": \"2021-03-28T19:38:09Z\"}, \"message\": \"[BasicAA] Make sure types match in constant offset heuristic\\n\\nThis can only happen if offset types that are larger than the\\npointer size are involved. The previous implementation did not\\nassert in this case because it initialized the APInts to the\\nwidth of one of the variables -- though I strongly suspect it\\ndid not compute correct results in this case.\\n\\nFixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32621\\nreported by fhahn.\", \"tree\": {\"sha\": \"fa645934a16e2832ec198aa49dd59eb4e872f221\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/fa645934a16e2832ec198aa49dd59eb4e872f221\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ce066da81c3e6175a02fa7ae831931b5e4126a2b/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"36b5d09b079bd15edad8fcad122141f999ddd2f9\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/36b5d09b079bd15edad8fcad122141f999ddd2f9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/36b5d09b079bd15edad8fcad122141f999ddd2f9\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"15e4946eb8fdd14654641ea70e11ec0056c50a11\", \"filename\": \"llvm/lib/Analysis/BasicAliasAnalysis.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ce066da81c3e6175a02fa7ae831931b5e4126a2b/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ce066da81c3e6175a02fa7ae831931b5e4126a2b/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FBasicAliasAnalysis.cpp?ref=ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"patch\": \"@@ -1725,7 +1725,7 @@ bool BasicAAResult::constantOffsetHeuristic(\\n   const VariableGEPIndex &Var0 = VarIndices[0], &Var1 = VarIndices[1];\\n \\n   if (Var0.ZExtBits != Var1.ZExtBits || Var0.SExtBits != Var1.SExtBits ||\\n-      Var0.Scale != -Var1.Scale)\\n+      Var0.Scale != -Var1.Scale || Var0.V->getType() != Var1.V->getType())\\n     return false;\\n \\n   // We'll strip off the Extensions of Var0 and Var1 and do another round\"}, {\"sha\": \"ac27143c57d1734be9b07de4504821ad681bea73\", \"filename\": \"llvm/test/Analysis/BasicAA/q.bad.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ce066da81c3e6175a02fa7ae831931b5e4126a2b/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fq.bad.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ce066da81c3e6175a02fa7ae831931b5e4126a2b/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fq.bad.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FBasicAA%2Fq.bad.ll?ref=ce066da81c3e6175a02fa7ae831931b5e4126a2b\", \"patch\": \"@@ -178,3 +178,11 @@ define void @constantOffsetHeuristic_i8_i8(i8* %mem, i8 %val) {\\n   %c = bitcast i8* %c.8 to i32*\\n   ret void\\n }\\n+\\n+; CHECK-LABEL: different_large_bitwidths\\n+; MayAlias: i64* %p1, i64* %p2\\n+define void @different_large_bitwidths(i8* %a, i64 %i, i128 %j) {\\n+  %p1 = getelementptr i8, i8* %a, i64 %i\\n+  %p2 = getelementptr i8, i8* %a, i128 %j\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kYjM1Nzg5MWYwY2Y3NjI1M2JlM2NkNzVmNjgyYjY4NTQ0YTQxMWRhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/db357891f0cf76253be3cd75f682b68544a411da", "content": "{\"sha\": \"db357891f0cf76253be3cd75f682b68544a411da\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZGIzNTc4OTFmMGNmNzYyNTNiZTNjZDc1ZjY4MmI2ODU0NGE0MTFkYQ==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-04-01T18:32:22Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-04-01T18:33:35Z\"}, \"message\": \"Infer dereferenceability from malloc and friends\\n\\nHookup TLI when inferring object size from allocation calls. This allows the analysis to prove dereferenceability for known allocation functions (such as malloc/new/etc) in addition to those marked explicitly with the allocsize attribute.\\n\\nThis is a follow up to 0129cd5 now that the bug fixed by e2c6621e6 is resolved.\\n\\nAs noted in the test, this relies on being able to prove that there is no free between allocation and context (e.g. hoist location). At the moment, this is handled conservatively. I'm working strengthening out ability to reason about no-free regions separately.\\n\\nDifferential Revision: https://reviews.llvm.org/D99737\", \"tree\": {\"sha\": \"9dac1052d6a3d89fd1c78806e14406de6ed80873\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9dac1052d6a3d89fd1c78806e14406de6ed80873\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/db357891f0cf76253be3cd75f682b68544a411da\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/db357891f0cf76253be3cd75f682b68544a411da\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/db357891f0cf76253be3cd75f682b68544a411da\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/db357891f0cf76253be3cd75f682b68544a411da/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4391d764e153d17315a2822137e1ceca13b4c98d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4391d764e153d17315a2822137e1ceca13b4c98d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4391d764e153d17315a2822137e1ceca13b4c98d\"}], \"stats\": {\"total\": 11, \"additions\": 5, \"deletions\": 6}, \"files\": [{\"sha\": \"9a0211fd50e33f225c4856cb201ad980adc07d6a\", \"filename\": \"llvm/lib/Analysis/Loads.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/db357891f0cf76253be3cd75f682b68544a411da/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/db357891f0cf76253be3cd75f682b68544a411da/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLoads.cpp?ref=db357891f0cf76253be3cd75f682b68544a411da\", \"patch\": \"@@ -162,8 +162,7 @@ static bool isDereferenceableAndAlignedPointer(\\n     Opts.RoundToAlign = false;\\n     Opts.NullIsUnknownSize = true;\\n     uint64_t ObjSize;\\n-    // TODO: Plumb through TLI so that malloc routines and such work.\\n-    if (getObjectSize(V, ObjSize, DL, nullptr, Opts)) {\\n+    if (getObjectSize(V, ObjSize, DL, TLI, Opts)) {\\n       APInt KnownDerefBytes(Size.getBitWidth(), ObjSize);\\n       if (KnownDerefBytes.getBoolValue() && KnownDerefBytes.uge(Size) &&\\n           isKnownNonZero(V, DL, 0, nullptr, CtxI, DT) && !V->canBeFreed()) {\"}, {\"sha\": \"04992c9936865ea11023ceba58fced50ba15f1a7\", \"filename\": \"llvm/test/Transforms/LICM/hoist-alloc.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/db357891f0cf76253be3cd75f682b68544a411da/llvm%2Ftest%2FTransforms%2FLICM%2Fhoist-alloc.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/db357891f0cf76253be3cd75f682b68544a411da/llvm%2Ftest%2FTransforms%2FLICM%2Fhoist-alloc.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLICM%2Fhoist-alloc.ll?ref=db357891f0cf76253be3cd75f682b68544a411da\", \"patch\": \"@@ -130,7 +130,8 @@ for.end:\\n   ret i8 %res\\n }\\n \\n-; TODO: We can hoist the load in this case.\\n+; TODO: We can hoist the load in this case, but only once we have\\n+; some form of context sensitive free analysis.\\n define i8 @test_hoist_malloc() {\\n ; CHECK-LABEL: @test_hoist_malloc(\\n ; CHECK-NEXT:  entry:\\n@@ -171,18 +172,17 @@ for.end:\\n   ret i8 %res\\n }\\n \\n-; TODO: We can hoist the load in this case.\\n-define i8 @test_hoist_malloc_leak() {\\n+define i8 @test_hoist_malloc_leak() nofree nosync {\\n ; CHECK-LABEL: @test_hoist_malloc_leak(\\n ; CHECK-NEXT:  entry:\\n ; CHECK-NEXT:    [[A_RAW:%.*]] = call nonnull i8* @malloc(i64 32)\\n ; CHECK-NEXT:    call void @init(i8* [[A_RAW]])\\n ; CHECK-NEXT:    [[ADDR:%.*]] = getelementptr i8, i8* [[A_RAW]], i32 31\\n+; CHECK-NEXT:    [[RES:%.*]] = load i8, i8* [[ADDR]], align 1\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]\\n ; CHECK-NEXT:    call void @unknown()\\n-; CHECK-NEXT:    [[RES:%.*]] = load i8, i8* [[ADDR]], align 1\\n ; CHECK-NEXT:    call void @use(i8 [[RES]])\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[IV_NEXT]], 200\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82ZDUxMzJiNDI2ZmJlMjNjNWJjM2U1OTFjYTJjYTA5YTMxNWQ0NTliIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/6d5132b426fbe23c5bc3e591ca2ca09a315d459b", "content": "{\"sha\": \"6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NmQ1MTMyYjQyNmZiZTIzYzViYzNlNTkxY2EyY2EwOWEzMTVkNDU5Yg==\", \"commit\": {\"author\": {\"name\": \"wlei\", \"email\": \"wlei@fb.com\", \"date\": \"2021-04-07T15:38:13Z\"}, \"committer\": {\"name\": \"Wenlei He\", \"email\": \"aktoon@gmail.com\", \"date\": \"2021-04-07T15:48:59Z\"}, \"message\": \"[CSSPGO] Fix incorrect probe distribution factor computation in top-down inliner\\n\\nWe see a regression related to low probe factor(0.01) which prevents some callsites being promoted in ICPPass and later cause the missing inline in CGSCC inliner. The root cause is due to redundant(the second) multiplication of the probe factor and this change try to fix it.\\n\\n`Sum` does multiply a factor right after findCallSamples but later when using as the parameter in setProbeDistributionFactor, it multiplies one again.\\n\\nThis change could get ~2% perf back on mcf benchmark. In mcf, previously the corresponding factor is 1 and it's the recent feature introducing the <1 factor then trigger this bug.\\n\\nReviewed By: hoy, wenlei\\n\\nDifferential Revision: https://reviews.llvm.org/D99787\", \"tree\": {\"sha\": \"721d90086f11eb7d3632ef4ce50c8f84f51eeb4d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/721d90086f11eb7d3632ef4ce50c8f84f51eeb4d\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/comments\", \"author\": {\"login\": \"wlei-llvm\", \"id\": 10023831, \"node_id\": \"MDQ6VXNlcjEwMDIzODMx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/10023831?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wlei-llvm\", \"html_url\": \"https://github.com/wlei-llvm\", \"followers_url\": \"https://api.github.com/users/wlei-llvm/followers\", \"following_url\": \"https://api.github.com/users/wlei-llvm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wlei-llvm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wlei-llvm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wlei-llvm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wlei-llvm/orgs\", \"repos_url\": \"https://api.github.com/users/wlei-llvm/repos\", \"events_url\": \"https://api.github.com/users/wlei-llvm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wlei-llvm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"WenleiHe\", \"id\": 34562893, \"node_id\": \"MDQ6VXNlcjM0NTYyODkz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/34562893?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/WenleiHe\", \"html_url\": \"https://github.com/WenleiHe\", \"followers_url\": \"https://api.github.com/users/WenleiHe/followers\", \"following_url\": \"https://api.github.com/users/WenleiHe/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/WenleiHe/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/WenleiHe/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/WenleiHe/subscriptions\", \"organizations_url\": \"https://api.github.com/users/WenleiHe/orgs\", \"repos_url\": \"https://api.github.com/users/WenleiHe/repos\", \"events_url\": \"https://api.github.com/users/WenleiHe/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/WenleiHe/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"93fb72575f7a70c0e095f7b278fd249260fe84a8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/93fb72575f7a70c0e095f7b278fd249260fe84a8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/93fb72575f7a70c0e095f7b278fd249260fe84a8\"}], \"stats\": {\"total\": 278, \"additions\": 273, \"deletions\": 5}, \"files\": [{\"sha\": \"8894cdc38a3fda2d5189c5ee579e002fb30038e2\", \"filename\": \"llvm/lib/Transforms/IPO/SampleProfile.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 5, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Flib%2FTransforms%2FIPO%2FSampleProfile.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Flib%2FTransforms%2FIPO%2FSampleProfile.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FSampleProfile.cpp?ref=6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"patch\": \"@@ -872,17 +872,15 @@ bool SampleProfileLoader::tryPromoteAndInlineCandidate(\\n       // profile will be used to prorate callsites from the callee if\\n       // inlined. Once not inlined, the direct callsite distribution should\\n       // be prorated so that the it will reflect the real callsite counts.\\n-      setProbeDistributionFactor(CI, Candidate.CallsiteDistribution * Sum /\\n-                                         SumOrigin);\\n+      setProbeDistributionFactor(CI, static_cast<float>(Sum) / SumOrigin);\\n       Candidate.CallInstr = DI;\\n       if (isa<CallInst>(DI) || isa<InvokeInst>(DI)) {\\n         bool Inlined = tryInlineCandidate(Candidate, InlinedCallSite);\\n         if (!Inlined) {\\n           // Prorate the direct callsite distribution so that it reflects real\\n           // callsite counts.\\n-          setProbeDistributionFactor(*DI, Candidate.CallsiteDistribution *\\n-                                              Candidate.CallsiteCount /\\n-                                              SumOrigin);\\n+          setProbeDistributionFactor(\\n+              *DI, static_cast<float>(Candidate.CallsiteCount) / SumOrigin);\\n         }\\n         return Inlined;\\n       }\"}, {\"sha\": \"2274abf83b78794dfa8004feeacc437347589f15\", \"filename\": \"llvm/test/Transforms/SampleProfile/Inputs/pseudo-probe-icp-factor.prof\", \"status\": \"added\", \"additions\": 18, \"deletions\": 0, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Ftest%2FTransforms%2FSampleProfile%2FInputs%2Fpseudo-probe-icp-factor.prof\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Ftest%2FTransforms%2FSampleProfile%2FInputs%2Fpseudo-probe-icp-factor.prof\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSampleProfile%2FInputs%2Fpseudo-probe-icp-factor.prof?ref=6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"patch\": \"@@ -0,0 +1,18 @@\\n+[main]:1059900:0\\n+ 2: 224540\\n+ 4: 224540\\n+ 7: 193140\\n+ 8: 224540\\n+ 10: 193140 foo:193140\\n+ !CFGChecksum: 563125815542069\\n+[main:10 @ foo]:386280:193140\\n+ 1: 193140\\n+ 2: 193140 baz:171881 bar:11259\\n+ !CFGChecksum: 281479271677951\\n+[main:10 @ foo:2 @ baz]:171881:171881\\n+ 1: 101881\\n+ 2: 12344\\n+ !CFGChecksum: 4294967295\\n+[main:10 @ foo:2 @ bar]:11259:11259\\n+ 1: 11259\\n+ !CFGChecksum: 4294967295\"}, {\"sha\": \"435b19f23c0c070b7db28359d6c8b859a7f57d16\", \"filename\": \"llvm/test/Transforms/SampleProfile/pseudo-probe-icp-factor.ll\", \"status\": \"added\", \"additions\": 252, \"deletions\": 0, \"changes\": 252, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Ftest%2FTransforms%2FSampleProfile%2Fpseudo-probe-icp-factor.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6d5132b426fbe23c5bc3e591ca2ca09a315d459b/llvm%2Ftest%2FTransforms%2FSampleProfile%2Fpseudo-probe-icp-factor.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSampleProfile%2Fpseudo-probe-icp-factor.ll?ref=6d5132b426fbe23c5bc3e591ca2ca09a315d459b\", \"patch\": \"@@ -0,0 +1,252 @@\\n+; RUN: opt < %s -passes=sample-profile -sample-profile-file=%S/Inputs/pseudo-probe-icp-factor.prof -S -sample-profile-prioritized-inline=1 2>&1 | FileCheck %s\\n+\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+@.str = private unnamed_addr constant [4 x i8] c\\\"%d\\\\0A\\\\00\\\", align 1\\n+\\n+; Function Attrs: nounwind uwtable\\n+define dso_local i32 @bar(i32 %0) #0 !dbg !13 {\\n+  %2 = alloca i32, align 4\\n+  store i32 %0, i32* %2, align 4, !tbaa !19\\n+  call void @llvm.dbg.declare(metadata i32* %2, metadata !18, metadata !DIExpression()), !dbg !23\\n+  call void @llvm.pseudoprobe(i64 -2012135647395072713, i64 1, i32 0, i64 -1), !dbg !24\\n+  %3 = load i32, i32* %2, align 4, !dbg !24, !tbaa !19\\n+  %4 = add nsw i32 %3, 1, !dbg !24\\n+  store i32 %4, i32* %2, align 4, !dbg !24, !tbaa !19\\n+  %5 = load i32, i32* %2, align 4, !dbg !25, !tbaa !19\\n+  %6 = add nsw i32 %5, 1, !dbg !26\\n+  ret i32 %6, !dbg !27\\n+}\\n+\\n+; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata) #1\\n+\\n+; Function Attrs: nounwind uwtable\\n+define dso_local i32 @baz(i32 %0) #0 !dbg !28 {\\n+  %2 = alloca i32, align 4\\n+  store i32 %0, i32* %2, align 4, !tbaa !19\\n+  call void @llvm.dbg.declare(metadata i32* %2, metadata !30, metadata !DIExpression()), !dbg !31\\n+  call void @llvm.pseudoprobe(i64 7546896869197086323, i64 1, i32 0, i64 -1), !dbg !32\\n+  %3 = load i32, i32* %2, align 4, !dbg !32, !tbaa !19\\n+  %4 = add nsw i32 %3, 10, !dbg !33\\n+  ret i32 %4, !dbg !34\\n+}\\n+\\n+; Function Attrs: nounwind uwtable\\n+define dso_local i32 @foo(i32 %0, i32 (...)* %1) #0 !dbg !35 {\\n+  %3 = alloca i32, align 4\\n+  %4 = alloca i32 (...)*, align 8\\n+  store i32 %0, i32* %3, align 4, !tbaa !19\\n+  call void @llvm.dbg.declare(metadata i32* %3, metadata !42, metadata !DIExpression()), !dbg !44\\n+  store i32 (...)* %1, i32 (...)** %4, align 8, !tbaa !45\\n+  call void @llvm.dbg.declare(metadata i32 (...)** %4, metadata !43, metadata !DIExpression()), !dbg !47\\n+  call void @llvm.pseudoprobe(i64 6699318081062747564, i64 1, i32 0, i64 -1), !dbg !48\\n+  %5 = load i32 (...)*, i32 (...)** %4, align 8, !dbg !48, !tbaa !45\\n+  %6 = load i32, i32* %3, align 4, !dbg !49, !tbaa !19\\n+  %7 = bitcast i32 (...)* %5 to i32 (i32, ...)*, !dbg !48\\n+  %8 = call i32 (i32, ...) %7(i32 %6), !dbg !50\\n+  ret i32 %8, !dbg !52\\n+}\\n+\\n+; Function Attrs: nounwind uwtable\\n+define dso_local i32 @main() #0 !dbg !53 {\\n+  %1 = alloca i32, align 4\\n+  %2 = alloca i32 (i32)*, align 8\\n+  %3 = alloca i32, align 4\\n+  %4 = alloca i32, align 4\\n+  store i32 0, i32* %1, align 4\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 1, i32 0, i64 -1), !dbg !62\\n+  %5 = bitcast i32 (i32)** %2 to i8*, !dbg !62\\n+  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #5, !dbg !62\\n+  call void @llvm.dbg.declare(metadata i32 (i32)** %2, metadata !57, metadata !DIExpression()), !dbg !63\\n+  %6 = bitcast i32* %3 to i8*, !dbg !64\\n+  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #5, !dbg !64\\n+  call void @llvm.dbg.declare(metadata i32* %3, metadata !59, metadata !DIExpression()), !dbg !65\\n+  store i32 0, i32* %3, align 4, !dbg !65, !tbaa !19\\n+  %7 = bitcast i32* %4 to i8*, !dbg !66\\n+  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #5, !dbg !66\\n+  call void @llvm.dbg.declare(metadata i32* %4, metadata !60, metadata !DIExpression()), !dbg !67\\n+  store i32 0, i32* %4, align 4, !dbg !67, !tbaa !19\\n+  br label %8, !dbg !66\\n+\\n+8:                                                ; preds = %26, %0\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 2, i32 0, i64 -1), !dbg !68\\n+  %9 = load i32, i32* %4, align 4, !dbg !68, !tbaa !19\\n+  %10 = icmp slt i32 %9, 1000000000, !dbg !70\\n+  br i1 %10, label %13, label %11, !dbg !71\\n+\\n+11:                                               ; preds = %8\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 3, i32 0, i64 -1), !dbg !72\\n+  %12 = bitcast i32* %4 to i8*, !dbg !72\\n+  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #5, !dbg !72\\n+  br label %29\\n+\\n+13:                                               ; preds = %8\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 4, i32 0, i64 -1), !dbg !73\\n+  %14 = load i32, i32* %4, align 4, !dbg !73, !tbaa !19\\n+  %15 = srem i32 %14, 100, !dbg !76\\n+  %16 = icmp eq i32 %15, 0, !dbg !77\\n+  br i1 %16, label %17, label %18, !dbg !78\\n+\\n+17:                                               ; preds = %13\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 5, i32 0, i64 -1), !dbg !79\\n+  store i32 (i32)* @bar, i32 (i32)** %2, align 8, !dbg !79, !tbaa !45\\n+  br label %19, !dbg !80\\n+\\n+18:                                               ; preds = %13\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 6, i32 0, i64 -1), !dbg !81\\n+  store i32 (i32)* @baz, i32 (i32)** %2, align 8, !dbg !81, !tbaa !45\\n+  br label %19\\n+\\n+19:                                               ; preds = %18, %17\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 7, i32 0, i64 -1), !dbg !82\\n+  %20 = load i32, i32* %4, align 4, !dbg !82, !tbaa !19\\n+  %21 = load i32 (i32)*, i32 (i32)** %2, align 8, !dbg !83, !tbaa !45\\n+  %22 = bitcast i32 (i32)* %21 to i32 (...)*, !dbg !83\\n+  %23 = call i32 @foo(i32 %20, i32 (...)* %22), !dbg !84\\n+  %24 = load i32, i32* %3, align 4, !dbg !86, !tbaa !19\\n+  %25 = add nsw i32 %24, %23, !dbg !86\\n+  store i32 %25, i32* %3, align 4, !dbg !86, !tbaa !19\\n+  br label %26, !dbg !87\\n+\\n+26:                                               ; preds = %19\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 8, i32 0, i64 -1), !dbg !88\\n+  %27 = load i32, i32* %4, align 4, !dbg !88, !tbaa !19\\n+  %28 = add nsw i32 %27, 1, !dbg !88\\n+  store i32 %28, i32* %4, align 4, !dbg !88, !tbaa !19\\n+  br label %8, !dbg !72, !llvm.loop !89\\n+\\n+29:                                               ; preds = %11\\n+  call void @llvm.pseudoprobe(i64 -2624081020897602054, i64 9, i32 0, i64 -1), !dbg !92\\n+  %30 = load i32, i32* %3, align 4, !dbg !92, !tbaa !19\\n+  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %30), !dbg !93\\n+  %32 = bitcast i32* %3 to i8*, !dbg !95\\n+  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #5, !dbg !95\\n+  %33 = bitcast i32 (i32)** %2 to i8*, !dbg !95\\n+  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #5, !dbg !95\\n+  ret i32 0, !dbg !96\\n+}\\n+\\n+; Function Attrs: argmemonly nofree nosync nounwind willreturn\\n+declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\\n+\\n+; Function Attrs: argmemonly nofree nosync nounwind willreturn\\n+declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\\n+\\n+declare dso_local i32 @printf(i8*, ...) #3\\n+\\n+; Function Attrs: inaccessiblememonly nounwind willreturn\\n+declare void @llvm.pseudoprobe(i64, i64, i32, i64) #4\\n+\\n+attributes #0 = { nounwind uwtable \\\"disable-tail-calls\\\"=\\\"true\\\" \\\"frame-pointer\\\"=\\\"all\\\" \\\"less-precise-fpmad\\\"=\\\"false\\\" \\\"min-legal-vector-width\\\"=\\\"0\\\" \\\"no-infs-fp-math\\\"=\\\"false\\\" \\\"no-jump-tables\\\"=\\\"false\\\" \\\"no-nans-fp-math\\\"=\\\"false\\\" \\\"no-signed-zeros-fp-math\\\"=\\\"false\\\" \\\"no-trapping-math\\\"=\\\"true\\\" \\\"stack-protector-buffer-size\\\"=\\\"8\\\" \\\"target-cpu\\\"=\\\"x86-64\\\" \\\"target-features\\\"=\\\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\\\" \\\"tune-cpu\\\"=\\\"generic\\\" \\\"unsafe-fp-math\\\"=\\\"false\\\" \\\"use-sample-profile\\\" \\\"use-soft-float\\\"=\\\"false\\\" }\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4, !5, !6, !7}\\n+!llvm.ident = !{!8}\\n+!llvm.pseudo_probe_desc = !{!9, !10, !11, !12}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: \\\"clang version 13.0.06)\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"test.c\\\", directory: \\\"\\\")\\n+!2 = !{}\\n+!3 = !{i32 7, !\\\"Dwarf Version\\\", i32 4}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!5 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!6 = !{i32 1, !\\\"ThinLTO\\\", i32 0}\\n+!7 = !{i32 1, !\\\"EnableSplitLTOUnit\\\", i32 1}\\n+!8 = !{!\\\"clang version 13.0.0 \\\"}\\n+!9 = !{i64 -2012135647395072713, i64 4294967295, !\\\"bar\\\", null}\\n+!10 = !{i64 7546896869197086323, i64 4294967295, !\\\"baz\\\", null}\\n+!11 = !{i64 6699318081062747564, i64 281479271677951, !\\\"foo\\\", null}\\n+!12 = !{i64 -2624081020897602054, i64 563125815542069, !\\\"main\\\", null}\\n+!13 = distinct !DISubprogram(name: \\\"bar\\\", scope: !1, file: !1, line: 2, type: !14, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !17)\\n+!14 = !DISubroutineType(types: !15)\\n+!15 = !{!16, !16}\\n+!16 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!17 = !{!18}\\n+!18 = !DILocalVariable(name: \\\"x\\\", arg: 1, scope: !13, file: !1, line: 2, type: !16)\\n+!19 = !{!20, !20, i64 0}\\n+!20 = !{!\\\"int\\\", !21, i64 0}\\n+!21 = !{!\\\"omnipotent char\\\", !22, i64 0}\\n+!22 = !{!\\\"Simple C/C++ TBAA\\\"}\\n+!23 = !DILocation(line: 2, column: 13, scope: !13)\\n+!24 = !DILocation(line: 4, column: 7, scope: !13)\\n+!25 = !DILocation(line: 5, column: 12, scope: !13)\\n+!26 = !DILocation(line: 5, column: 14, scope: !13)\\n+!27 = !DILocation(line: 5, column: 5, scope: !13)\\n+!28 = distinct !DISubprogram(name: \\\"baz\\\", scope: !1, file: !1, line: 9, type: !14, scopeLine: 9, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !29)\\n+!29 = !{!30}\\n+!30 = !DILocalVariable(name: \\\"x\\\", arg: 1, scope: !28, file: !1, line: 9, type: !16)\\n+!31 = !DILocation(line: 9, column: 13, scope: !28)\\n+!32 = !DILocation(line: 10, column: 10, scope: !28)\\n+!33 = !DILocation(line: 10, column: 12, scope: !28)\\n+!34 = !DILocation(line: 10, column: 3, scope: !28)\\n+!35 = distinct !DISubprogram(name: \\\"foo\\\", scope: !1, file: !1, line: 13, type: !36, scopeLine: 13, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !41)\\n+!36 = !DISubroutineType(types: !37)\\n+!37 = !{!16, !16, !38}\\n+!38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)\\n+!39 = !DISubroutineType(types: !40)\\n+!40 = !{!16, null}\\n+!41 = !{!42, !43}\\n+!42 = !DILocalVariable(name: \\\"x\\\", arg: 1, scope: !35, file: !1, line: 13, type: !16)\\n+!43 = !DILocalVariable(name: \\\"f\\\", arg: 2, scope: !35, file: !1, line: 13, type: !38)\\n+!44 = !DILocation(line: 13, column: 13, scope: !35)\\n+!45 = !{!46, !46, i64 0}\\n+!46 = !{!\\\"any pointer\\\", !21, i64 0}\\n+!47 = !DILocation(line: 13, column: 22, scope: !35)\\n+!48 = !DILocation(line: 14, column: 10, scope: !35)\\n+!49 = !DILocation(line: 14, column: 12, scope: !35)\\n+!50 = !DILocation(line: 14, column: 10, scope: !51)\\n+!51 = !DILexicalBlockFile(scope: !35, file: !1, discriminator: 108527639)\\n+!52 = !DILocation(line: 14, column: 3, scope: !35)\\n+!53 = distinct !DISubprogram(name: \\\"main\\\", scope: !1, file: !1, line: 17, type: !54, scopeLine: 18, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !56)\\n+!54 = !DISubroutineType(types: !55)\\n+!55 = !{!16}\\n+!56 = !{!57, !59, !60}\\n+!57 = !DILocalVariable(name: \\\"x\\\", scope: !53, file: !1, line: 19, type: !58)\\n+!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)\\n+!59 = !DILocalVariable(name: \\\"sum\\\", scope: !53, file: !1, line: 25, type: !16)\\n+!60 = !DILocalVariable(name: \\\"i\\\", scope: !61, file: !1, line: 26, type: !16)\\n+!61 = distinct !DILexicalBlock(scope: !53, file: !1, line: 26, column: 5)\\n+!62 = !DILocation(line: 19, column: 3, scope: !53)\\n+!63 = !DILocation(line: 19, column: 9, scope: !53)\\n+!64 = !DILocation(line: 25, column: 5, scope: !53)\\n+!65 = !DILocation(line: 25, column: 9, scope: !53)\\n+!66 = !DILocation(line: 26, column: 10, scope: !61)\\n+!67 = !DILocation(line: 26, column: 14, scope: !61)\\n+!68 = !DILocation(line: 26, column: 21, scope: !69)\\n+!69 = distinct !DILexicalBlock(scope: !61, file: !1, line: 26, column: 5)\\n+!70 = !DILocation(line: 26, column: 23, scope: !69)\\n+!71 = !DILocation(line: 26, column: 5, scope: !61)\\n+!72 = !DILocation(line: 26, column: 5, scope: !69)\\n+!73 = !DILocation(line: 27, column: 10, scope: !74)\\n+!74 = distinct !DILexicalBlock(scope: !75, file: !1, line: 27, column: 10)\\n+!75 = distinct !DILexicalBlock(scope: !69, file: !1, line: 26, column: 45)\\n+!76 = !DILocation(line: 27, column: 12, scope: !74)\\n+!77 = !DILocation(line: 27, column: 19, scope: !74)\\n+!78 = !DILocation(line: 27, column: 10, scope: !75)\\n+!79 = !DILocation(line: 28, column: 11, scope: !74)\\n+!80 = !DILocation(line: 28, column: 9, scope: !74)\\n+!81 = !DILocation(line: 30, column: 11, scope: !74)\\n+!82 = !DILocation(line: 32, column: 17, scope: !75)\\n+!83 = !DILocation(line: 32, column: 20, scope: !75)\\n+!84 = !DILocation(line: 32, column: 13, scope: !85)\\n+!85 = !DILexicalBlockFile(scope: !75, file: !1, discriminator: 116916311)\\n+!86 = !DILocation(line: 32, column: 11, scope: !75)\\n+!87 = !DILocation(line: 33, column: 5, scope: !75)\\n+!88 = !DILocation(line: 26, column: 41, scope: !69)\\n+!89 = distinct !{!89, !71, !90, !91}\\n+!90 = !DILocation(line: 33, column: 5, scope: !61)\\n+!91 = !{!\\\"llvm.loop.mustprogress\\\"}\\n+!92 = !DILocation(line: 34, column: 21, scope: !53)\\n+!93 = !DILocation(line: 34, column: 5, scope: !94)\\n+!94 = !DILexicalBlockFile(scope: !53, file: !1, discriminator: 104333335)\\n+!95 = !DILocation(line: 36, column: 1, scope: !53)\\n+!96 = !DILocation(line: 35, column: 5, scope: !53)\\n+\\n+; CHECK: %[[#]] = call i32 (i32, ...) %30(i32 %[[#]]) #[[#]], !dbg ![[#DBGID:]], !prof ![[#]]\\n+\\n+;; A discriminator of 69206039 which is 0x4200017 in hexdecimal, stands for an indirect call probe\\n+;; with an index of 2 and probe factor of 0.04.\\n+; CHECK: ![[#DBGID]] = !DILocation(line: [[#]], column: [[#]], scope: ![[#SCOPE:]], inlinedAt: ![[#]])\\n+; CHECK: ![[#SCOPE]] = !DILexicalBlockFile(scope: ![[#]], file: ![[#]], discriminator: 69206039)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mNTY0NWVhNjVmMGRmZGVmMmFlOWM3NDA3NWNjNGI0NGYwNWRjYjgyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82", "content": "{\"sha\": \"f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZjU2NDVlYTY1ZjBkZmRlZjJhZTljNzQwNzVjYzRiNDRmMDVkY2I4Mg==\", \"commit\": {\"author\": {\"name\": \"CongzheUalberta\", \"email\": \"congzhecao@gmail.com\", \"date\": \"2021-04-08T00:44:32Z\"}, \"committer\": {\"name\": \"CongzheUalberta\", \"email\": \"congzhecao@gmail.com\", \"date\": \"2021-04-08T00:55:44Z\"}, \"message\": \"[LoopInterchange] Fix transformation bugs in loop interchange\\n\\nAfter loop interchange, the (old) outer loop header should not jump to\\n`LoopExit`. Note that the old outer loop becomes the new inner loop\\nafter interchange. If we branched to `LoopExit` then after interchange\\nwe would jump directly from the (new) inner loop header to `LoopExit`\\nwithout executing the rest of (new) outer loop.\\n\\nThis patch modifies adjustLoopBranches() such that the old outer\\nloop header (which becomes the new inner loop header) jumps to the\\nold inner loop latch which becomes the new outer loop latch after\\ninterchange.\\n\\nReviewed By: bmahjour\\n\\nDifferential Revision: https://reviews.llvm.org/D98475\", \"tree\": {\"sha\": \"b2c831c6f4eebd108edc7d3945e909db849b7a36\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/b2c831c6f4eebd108edc7d3945e909db849b7a36\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/comments\", \"author\": {\"login\": \"CongzheUalberta\", \"id\": 22824635, \"node_id\": \"MDQ6VXNlcjIyODI0NjM1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22824635?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/CongzheUalberta\", \"html_url\": \"https://github.com/CongzheUalberta\", \"followers_url\": \"https://api.github.com/users/CongzheUalberta/followers\", \"following_url\": \"https://api.github.com/users/CongzheUalberta/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/CongzheUalberta/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/CongzheUalberta/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/CongzheUalberta/subscriptions\", \"organizations_url\": \"https://api.github.com/users/CongzheUalberta/orgs\", \"repos_url\": \"https://api.github.com/users/CongzheUalberta/repos\", \"events_url\": \"https://api.github.com/users/CongzheUalberta/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/CongzheUalberta/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"CongzheUalberta\", \"id\": 22824635, \"node_id\": \"MDQ6VXNlcjIyODI0NjM1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22824635?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/CongzheUalberta\", \"html_url\": \"https://github.com/CongzheUalberta\", \"followers_url\": \"https://api.github.com/users/CongzheUalberta/followers\", \"following_url\": \"https://api.github.com/users/CongzheUalberta/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/CongzheUalberta/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/CongzheUalberta/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/CongzheUalberta/subscriptions\", \"organizations_url\": \"https://api.github.com/users/CongzheUalberta/orgs\", \"repos_url\": \"https://api.github.com/users/CongzheUalberta/repos\", \"events_url\": \"https://api.github.com/users/CongzheUalberta/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/CongzheUalberta/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5f6b3d1833fdf20e18a3c8bf3ede7b5060130f73\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5f6b3d1833fdf20e18a3c8bf3ede7b5060130f73\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5f6b3d1833fdf20e18a3c8bf3ede7b5060130f73\"}], \"stats\": {\"total\": 219, \"additions\": 212, \"deletions\": 7}, \"files\": [{\"sha\": \"36acf4624697be64f4789da1dc32505210735af2\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopInterchange.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp?ref=f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"patch\": \"@@ -1551,9 +1551,12 @@ bool LoopInterchangeTransform::adjustLoopBranches() {\\n                   InnerLoopPreHeader, DTUpdates, /*MustUpdateOnce=*/false);\\n   // The outer loop header might or might not branch to the outer latch.\\n   // We are guaranteed to branch to the inner loop preheader.\\n-  if (llvm::is_contained(OuterLoopHeaderBI->successors(), OuterLoopLatch))\\n-    updateSuccessor(OuterLoopHeaderBI, OuterLoopLatch, LoopExit, DTUpdates,\\n+  if (llvm::is_contained(OuterLoopHeaderBI->successors(), OuterLoopLatch)) {\\n+    // In this case the outerLoopHeader should branch to the InnerLoopLatch.\\n+    updateSuccessor(OuterLoopHeaderBI, OuterLoopLatch, InnerLoopLatch,\\n+                    DTUpdates,\\n                     /*MustUpdateOnce=*/false);\\n+  }\\n   updateSuccessor(OuterLoopHeaderBI, InnerLoopPreHeader,\\n                   InnerLoopHeaderSuccessor, DTUpdates,\\n                   /*MustUpdateOnce=*/false);\"}, {\"sha\": \"73fa3c36790b074b598b84b4536c7b595d6aec61\", \"filename\": \"llvm/test/Transforms/LoopInterchange/lcssa-preheader.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa-preheader.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa-preheader.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa-preheader.ll?ref=f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"patch\": \"@@ -25,12 +25,12 @@ define void @lcssa_08(i32 %n, i32 %m) {\\n ; CHECK-NEXT:    [[INDVARS_IV27:%.*]] = phi i64 [ 0, [[OUTER_PREHEADER:%.*]] ], [ [[INDVARS_IV_NEXT28:%.*]], [[OUTER_LATCH:%.*]] ]\\n ; CHECK-NEXT:    [[CMP222:%.*]] = icmp sgt i32 [[M:%.*]], 0\\n ; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[M]] to i64\\n-; CHECK-NEXT:    br i1 [[CMP222]], label [[INNER_FOR_BODY_SPLIT1:%.*]], label [[OUTER_CRIT_EDGE:%.*]]\\n+; CHECK-NEXT:    br i1 [[CMP222]], label [[INNER_FOR_BODY_SPLIT1:%.*]], label [[INNER_FOR_BODY_SPLIT:%.*]]\\n ; CHECK:       inner.preheader:\\n ; CHECK-NEXT:    [[WIDE_TRIP_COUNT29:%.*]] = zext i32 [[N]] to i64\\n ; CHECK-NEXT:    br label [[INNER_FOR_BODY:%.*]]\\n ; CHECK:       inner.for.body:\\n-; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[INNER_PREHEADER]] ], [ [[TMP1:%.*]], [[INNER_FOR_BODY_SPLIT:%.*]] ]\\n+; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[INNER_PREHEADER]] ], [ [[TMP1:%.*]], [[INNER_FOR_BODY_SPLIT]] ]\\n ; CHECK-NEXT:    br label [[OUTER_PREHEADER]]\\n ; CHECK:       inner.for.body.split1:\\n ; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* [[TEMP]], i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV27]]\\n@@ -41,10 +41,10 @@ define void @lcssa_08(i32 %n, i32 %m) {\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]\\n ; CHECK-NEXT:    br label [[INNER_CRIT_EDGE:%.*]]\\n ; CHECK:       inner.for.body.split:\\n-; CHECK-NEXT:    [[WIDE_TRIP_COUNT_LCSSA2:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[OUTER_LATCH]] ]\\n+; CHECK-NEXT:    [[WIDE_TRIP_COUNT_LCSSA:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[OUTER_LATCH]] ], [ [[WIDE_TRIP_COUNT]], [[OUTER_HEADER]] ]\\n ; CHECK-NEXT:    [[TMP1]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n-; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne i64 [[TMP1]], [[WIDE_TRIP_COUNT_LCSSA2]]\\n-; CHECK-NEXT:    br i1 [[TMP2]], label [[INNER_FOR_BODY]], label [[OUTER_CRIT_EDGE]]\\n+; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne i64 [[TMP1]], [[WIDE_TRIP_COUNT_LCSSA]]\\n+; CHECK-NEXT:    br i1 [[TMP2]], label [[INNER_FOR_BODY]], label [[OUTER_CRIT_EDGE:%.*]]\\n ; CHECK:       inner.crit_edge:\\n ; CHECK-NEXT:    br label [[OUTER_LATCH]]\\n ; CHECK:       outer.latch:\"}, {\"sha\": \"3a7c82b83bfc62f1a991b651f8607bcd8b61e12f\", \"filename\": \"llvm/test/Transforms/LoopInterchange/outer-header-jump-to-inner-latch.ll\", \"status\": \"added\", \"additions\": 202, \"deletions\": 0, \"changes\": 202, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Fouter-header-jump-to-inner-latch.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Fouter-header-jump-to-inner-latch.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Fouter-header-jump-to-inner-latch.ll?ref=f5645ea65f0dfdef2ae9c74075cc4b44f05dcb82\", \"patch\": \"@@ -0,0 +1,202 @@\\n+; RUN: opt -basic-aa -loop-interchange -verify-dom-info -verify-loop-info -verify-loop-lcssa -S %s | FileCheck %s\\n+\\n+@b = global [3 x [5 x [8 x i16]]] [[5 x [8 x i16]] zeroinitializer, [5 x [8 x i16]] [[8 x i16] zeroinitializer, [8 x i16] [i16 0, i16 0, i16 0, i16 6, i16 1, i16 6, i16 0, i16 0], [8 x i16] zeroinitializer, [8 x i16] zeroinitializer, [8 x i16] zeroinitializer], [5 x [8 x i16]] zeroinitializer], align 2\\n+@a = common global i32 0, align 4\\n+@d = common dso_local local_unnamed_addr global [1 x [6 x i32]] zeroinitializer, align 4\\n+\\n+\\n+;  Doubly nested loop\\n+;; C test case:\\n+;; int a;\\n+;; short b[3][5][8] = {{}, {{}, 0, 0, 0, 6, 1, 6}};\\n+;; void test1() {\\n+;;   int c = 0, d;\\n+;;   for (; c <= 2; c++) {\\n+;;     if (c)\\n+;;       continue;\\n+;;     d = 0;\\n+;;     for (; d <= 2; d++)\\n+;;       a |= b[d][d][c + 5];\\n+;;   }\\n+;; }\\n+\\n+define void @test1() {\\n+;CHECK-LABEL: @test1(\\n+;CHECK:          entry:\\n+;CHECK-NEXT:       br label [[FOR_COND1_PREHEADER:%.*]]\\n+;CHECK:          for.body.preheader:\\n+;CHECK-NEXT:       br label  [[FOR_BODY:%.*]]\\n+;CHECK:          for.body:\\n+;CHECK-NEXT:       [[INDVARS_IV22:%.*]] = phi i64 [ [[INDVARS_IV_NEXT23:%.*]], [[FOR_INC8:%.*]] ], [ 0, [[FOR_BODY_PREHEADER:%.*]] ]\\n+;CHECK-NEXT:       [[TOBOOL:%.*]] = icmp eq i64 [[INDVARS_IV22:%.*]], 0\\n+;CHECK-NEXT:       br i1 [[TOBOOL]], label [[FOR_BODY3_SPLIT1:%.*]], label [[FOR_BODY3_SPLIT:%.*]]\\n+;CHECK:          for.cond1.preheader:\\n+;CHECK-NEXT:       br label [[FOR_BODY3:%.*]]\\n+;CHECK:          for.body3:\\n+;CHECK-NEXT:       [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_COND1_PREHEADER]] ], [ %3, [[FOR_BODY3_SPLIT]] ]\\n+;CHECK-NEXT:        br label [[FOR_BODY_PREHEADER]]\\n+;CHECK:          for.body3.split1:\\n+;CHECK-NEXT:       [[TMP0:%.*]] = add nuw nsw i64 [[INDVARS_IV22]], 5\\n+;CHECK-NEXT:       [[ARRAYIDX7:%.*]] = getelementptr inbounds [3 x [5 x [8 x i16]]], [3 x [5 x [8 x i16]]]* @b, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV]], i64 [[TMP0]]\\n+;CHECK-NEXT:       [[TMP1:%.*]] = load i16, i16* [[ARRAYIDX7]]\\n+;CHECK-NEXT:       [[CONV:%.*]] = sext i16 [[TMP1]] to i32\\n+;CHECK-NEXT:       [[TMP2:%.*]] = load i32, i32* @a\\n+;CHECK-NEXT:       [[TMP_OR:%.*]] = or i32 [[TMP2]], [[CONV]]\\n+;CHECK-NEXT:       store i32 [[TMP_OR]], i32* @a\\n+;CHECK-NEXT:       [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n+;CHECK-NEXT:       [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 3\\n+;CHECK-NEXT:       br label [[FOR_INC8_LOOPEXIT:%.*]]\\n+;CHECK:          for.body3.split:\\n+;CHECK-NEXT:       [[TMP3:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n+;CHECK-NEXT:       [[TMP4:%.*]] = icmp ne i64 [[TMP3]], 3\\n+;CHECK-NEXT:       br i1 %4, label [[FOR_BODY3]], label [[FOR_END10:%.*]]\\n+;CHECK:          for.inc8.loopexit:\\n+;CHECK-NEXT:       br label [[FOR_INC8]]\\n+;CHECK:          for.inc8:\\n+;CHECK-NEXT:       [[INDVARS_IV_NEXT23]] = add nuw nsw i64 [[INDVARS_IV22]], 1\\n+;CHECK-NEXT:       [[EXITCOND25:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT23]], 3\\n+;CHECK-NEXT:       br i1 [[EXITCOND25]], label [[FOR_BODY]], label [[FOR_BODY3_SPLIT]]\\n+;CHECK:         for.end10:\\n+;CHECK-NEXT:       [[TMP5:%.*]] = load i32, i32* @a\\n+;CHECK-NEXT:       ret void\\n+\\n+entry:\\n+  br label %for.body\\n+\\n+for.body:                                         ; preds = %entry, %for.inc8\\n+  %indvars.iv22 = phi i64 [ 0, %entry ], [ %indvars.iv.next23, %for.inc8 ]\\n+  %tobool = icmp eq i64 %indvars.iv22, 0\\n+  br i1 %tobool, label %for.cond1.preheader, label %for.inc8\\n+\\n+for.cond1.preheader:                              ; preds = %for.body\\n+  br label %for.body3\\n+\\n+for.body3:                                        ; preds = %for.cond1.preheader, %for.body3\\n+  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]\\n+  %0 = add nuw nsw i64 %indvars.iv22, 5\\n+  %arrayidx7 = getelementptr inbounds [3 x [5 x [8 x i16]]], [3 x [5 x [8 x i16]]]* @b, i64 0, i64 %indvars.iv, i64 %indvars.iv, i64 %0\\n+  %1 = load i16, i16* %arrayidx7\\n+  %conv = sext i16 %1 to i32\\n+  %2 = load i32, i32* @a\\n+  %or = or i32 %2, %conv\\n+  store i32 %or, i32* @a\\n+  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\\n+  %exitcond = icmp ne i64 %indvars.iv.next, 3\\n+  br i1 %exitcond, label %for.body3, label %for.inc8.loopexit\\n+\\n+for.inc8.loopexit:                                ; preds = %for.body3\\n+  br label %for.inc8\\n+\\n+for.inc8:                                         ; preds = %for.inc8.loopexit, %for.body\\n+  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1\\n+  %exitcond25 = icmp ne i64 %indvars.iv.next23, 3\\n+  br i1 %exitcond25, label %for.body, label %for.end10\\n+\\n+for.end10:                                        ; preds = %for.inc8\\n+  %3 = load i32, i32* @a\\n+  ret void\\n+}\\n+\\n+; Triply nested loop\\n+; The innermost and the middle loop are interchanged.\\n+; C test case:\\n+;; a;\\n+;; d[][6];\\n+;; void test2() {\\n+;;   int g = 10;\\n+;;   for (; g; g = g - 5) {\\n+;;     short c = 4;\\n+;;     for (; c; c--) {\\n+;;       int i = 4;\\n+;;       for (; i; i--) {\\n+;;         if (a)\\n+;;           break;\\n+;;         d[i][c] = 0;\\n+;;       }\\n+;;     }\\n+;;   }\\n+;; }\\n+\\n+define void @test2() {\\n+; CHECK-LABEL: @test2(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br label [[OUTERMOST_HEADER:%.*]]\\n+; CHECK:       outermost.header:\\n+; CHECK-NEXT:    [[INDVAR_OUTERMOST:%.*]] = phi i32 [ 10, [[ENTRY:%.*]] ], [ [[INDVAR_OUTERMOST_NEXT:%.*]], [[OUTERMOST_LATCH:%.*]] ]\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* @a, align 4\\n+; CHECK-NEXT:    [[TOBOOL71_I:%.*]] = icmp eq i32 [[TMP0]], 0\\n+; CHECK-NEXT:    br label [[INNERMOST_PREHEADER:%.*]]\\n+; CHECK:       middle.header.preheader:\\n+; CHECK-NEXT:    br label [[MIDDLE_HEADER:%.*]]\\n+; CHECK:       middle.header:\\n+; CHECK-NEXT:    [[INDVAR_MIDDLE:%.*]] = phi i64 [ [[INDVAR_MIDDLE_NEXT:%.*]], [[MIDDLE_LATCH:%.*]] ], [ 4, [[MIDDLE_HEADER_PREHEADER:%.*]] ]\\n+; CHECK-NEXT:    br i1 [[TOBOOL71_I]], label [[INNERMOST_BODY_SPLIT1:%.*]], label [[INNERMOST_BODY_SPLIT:%.*]]\\n+; CHECK:       innermost.preheader:\\n+; CHECK-NEXT:    br label [[INNERMOST_BODY:%.*]]\\n+; CHECK:       innermost.body:\\n+; CHECK-NEXT:    [[INDVAR_INNERMOST:%.*]] = phi i64 [ [[TMP1:%.*]], [[INNERMOST_BODY_SPLIT]] ], [ 4, [[INNERMOST_PREHEADER]] ]\\n+; CHECK-NEXT:    br label [[MIDDLE_HEADER_PREHEADER]]\\n+; CHECK:       innermost.body.split1:\\n+; CHECK-NEXT:    [[ARRAYIDX9_I:%.*]] = getelementptr inbounds [1 x [6 x i32]], [1 x [6 x i32]]* @d, i64 0, i64 [[INDVAR_INNERMOST]], i64 [[INDVAR_MIDDLE]]\\n+; CHECK-NEXT:    store i32 0, i32* [[ARRAYIDX9_I]], align 4\\n+; CHECK-NEXT:    [[INDVAR_INNERMOST_NEXT:%.*]] = add nsw i64 [[INDVAR_INNERMOST]], -1\\n+; CHECK-NEXT:    [[TOBOOL5_I:%.*]] = icmp eq i64 [[INDVAR_INNERMOST_NEXT]], 0\\n+; CHECK-NEXT:    br label [[MIDDLE_LATCH_LOOPEXIT:%.*]]\\n+; CHECK:       innermost.body.split:\\n+; CHECK-NEXT:    [[TMP1]] = add nsw i64 [[INDVAR_INNERMOST]], -1\\n+; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[TMP1]], 0\\n+; CHECK-NEXT:    br i1 [[TMP2]], label [[OUTERMOST_LATCH]], label [[INNERMOST_BODY]]\\n+; CHECK:       innermost.loopexit:\\n+; CHECK-NEXT:    br label [[MIDDLE_LATCH]]\\n+; CHECK:       middle.latch:\\n+; CHECK-NEXT:    [[INDVAR_MIDDLE_NEXT]] = add nsw i64 [[INDVAR_MIDDLE]], -1\\n+; CHECK-NEXT:    [[TOBOOL2_I:%.*]] = icmp eq i64 [[INDVAR_MIDDLE_NEXT]], 0\\n+; CHECK-NEXT:    br i1 [[TOBOOL2_I]], label [[INNERMOST_BODY_SPLIT]], label [[MIDDLE_HEADER]]\\n+; CHECK:       outermost.latch:\\n+; CHECK-NEXT:    [[INDVAR_OUTERMOST_NEXT]] = add nsw i32 [[INDVAR_OUTERMOST]], -5\\n+; CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp eq i32 [[INDVAR_OUTERMOST_NEXT]], 0\\n+; CHECK-NEXT:    br i1 [[TOBOOL_I]], label [[OUTERMOST_EXIT:%.*]], label [[OUTERMOST_HEADER]]\\n+; CHECK:       outermost.exit:\\n+; CHECK-NEXT:    ret void\\n+;\\n+\\n+entry:\\n+  br label %outermost.header\\n+\\n+outermost.header:                      ; preds = %outermost.latch, %entry\\n+  %indvar.outermost = phi i32 [ 10, %entry ], [ %indvar.outermost.next, %outermost.latch ]\\n+  %0 = load i32, i32* @a, align 4\\n+  %tobool71.i = icmp eq i32 %0, 0\\n+  br label %middle.header\\n+\\n+middle.header:                            ; preds = %middle.latch, %outermost.header\\n+  %indvar.middle = phi i64 [ 4, %outermost.header ], [ %indvar.middle.next, %middle.latch ]\\n+  br i1 %tobool71.i, label %innermost.preheader, label %middle.latch\\n+\\n+innermost.preheader:                               ; preds = %middle.header\\n+  br label %innermost.body\\n+\\n+innermost.body:                                         ; preds = %innermost.preheader, %innermost.body\\n+  %indvar.innermost = phi i64 [ %indvar.innermost.next, %innermost.body ], [ 4, %innermost.preheader ]\\n+  %arrayidx9.i = getelementptr inbounds [1 x [6 x i32]], [1 x [6 x i32]]* @d, i64 0, i64 %indvar.innermost, i64 %indvar.middle\\n+  store i32 0, i32* %arrayidx9.i, align 4\\n+  %indvar.innermost.next = add nsw i64 %indvar.innermost, -1\\n+  %tobool5.i = icmp eq i64 %indvar.innermost.next, 0\\n+  br i1 %tobool5.i, label %innermost.loopexit, label %innermost.body\\n+\\n+innermost.loopexit:                             ; preds = %innermost.body\\n+  br label %middle.latch\\n+\\n+middle.latch:                                      ; preds = %middle.latch.loopexit, %middle.header\\n+  %indvar.middle.next = add nsw i64 %indvar.middle, -1\\n+  %tobool2.i = icmp eq i64 %indvar.middle.next, 0\\n+  br i1 %tobool2.i, label %outermost.latch, label %middle.header\\n+\\n+outermost.latch:                                      ; preds = %middle.latch\\n+  %indvar.outermost.next = add nsw i32 %indvar.outermost, -5\\n+  %tobool.i = icmp eq i32 %indvar.outermost.next, 0\\n+  br i1 %tobool.i, label %outermost.exit, label %outermost.header\\n+\\n+outermost.exit:                                           ; preds = %outermost.latch\\n+  ret void\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wNzdiZmYzOWQ0NjM2NDAzNWE1ZGNmYTMyZmM2OTkxMGFkMDk3NWQwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/077bff39d46364035a5dcfa32fc69910ad0975d0", "content": "{\"sha\": \"077bff39d46364035a5dcfa32fc69910ad0975d0\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDc3YmZmMzlkNDYzNjQwMzVhNWRjZmEzMmZjNjk5MTBhZDA5NzVkMA==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-04-09T21:31:56Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-04-09T21:56:28Z\"}, \"message\": \"[Analysis] isDereferenceableAndAlignedPointer(): recurse into select's hands\\n\\nBy doing this within the method itself,\\nwe support traversing multiple levels of selects (TODO: PHI's),\\nfixing the SROA `std::clamp()` testcase.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=47271\\nMostly fixes https://bugs.llvm.org/show_bug.cgi?id=49909\", \"tree\": {\"sha\": \"bb125d668e537244529013b0265ab57bbffa494c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/bb125d668e537244529013b0265ab57bbffa494c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/077bff39d46364035a5dcfa32fc69910ad0975d0\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAmBwzYwACgkQCDw+u0oW\\nieDUrg/+N0v4SY5nYq7QCVSx2iM/Dkup9M3R+g+3dovXkHgHoOR4tfGPPpamYvbG\\nFt2x0hW8QeSOTrrX/hy56iOP7HzYqeLQsh9TNsPhiUa8RQuTi2JEeqFUMXLHgKFX\\njoj/qAb4jUhtiMin7nvF8wRn/myjo3I8ESuSqrAbvpjaLilVImRnmpWIYf3qooMA\\nJDCElGePolNIjbj80H5e4lKImnNxRvqI7C9TsiUBneRbTGzLZfeifhdt+BX2vtE0\\nfd0BZgaonyp/DWHq5bRY9z0vAEhQshlwBqF5Vy9rXxu1QbEpanZbqs7IAZEcz1ao\\n1XJc09soDJEW6ZM3/kscrUtnHyrYdaamcjFaJaWzEAfdrwVCZkUkKowsIshw0dWh\\nnqTZaRrTIhDThWumLSAuZFVklzOIt+xGoQSe5h6HlnUqRWaVPXYCHYhr/J5exSJj\\nH6MExXWVIg+xavPndZ+BNLSOK1HsaAeYuLt+cQKdLKcTVo9+s5BR7m21ZyO1b9p0\\nIoUSHsjAZb5nmGXgizLfdo7/pOLwdXUutjZmJLF/UJXxiIjmXsjCu3uArjbwKFoz\\nYarut7Z3LwD+4Sfd4sW3IbdwWoFCjK0SIreInZUQb0lIZVtkOKaaXLTnLBDUNjR0\\nsqIqShSLR6ND+i1MDzc8V3r+rROpF9ru5pFvqhCMA4SNJzO80Vw=\\n=/AVX\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree bb125d668e537244529013b0265ab57bbffa494c\\nparent 99d6e31e0bd02d484c213a7446fd707c62dec45b\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1618003916 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1618005388 +0300\\n\\n[Analysis] isDereferenceableAndAlignedPointer(): recurse into select's hands\\n\\nBy doing this within the method itself,\\nwe support traversing multiple levels of selects (TODO: PHI's),\\nfixing the SROA `std::clamp()` testcase.\\n\\nFixes https://bugs.llvm.org/show_bug.cgi?id=47271\\nMostly fixes https://bugs.llvm.org/show_bug.cgi?id=49909\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/077bff39d46364035a5dcfa32fc69910ad0975d0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/077bff39d46364035a5dcfa32fc69910ad0975d0\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/077bff39d46364035a5dcfa32fc69910ad0975d0/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"99d6e31e0bd02d484c213a7446fd707c62dec45b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/99d6e31e0bd02d484c213a7446fd707c62dec45b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/99d6e31e0bd02d484c213a7446fd707c62dec45b\"}], \"stats\": {\"total\": 24, \"additions\": 15, \"deletions\": 9}, \"files\": [{\"sha\": \"2ae1fd5b5bde3ef82b95471b4fd0e13ef1241850\", \"filename\": \"llvm/lib/Analysis/Loads.cpp\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/077bff39d46364035a5dcfa32fc69910ad0975d0/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/077bff39d46364035a5dcfa32fc69910ad0975d0/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLoads.cpp?ref=077bff39d46364035a5dcfa32fc69910ad0975d0\", \"patch\": \"@@ -59,6 +59,16 @@ static bool isDereferenceableAndAlignedPointer(\\n   // Note that it is not safe to speculate into a malloc'd region because\\n   // malloc may return null.\\n \\n+  // Recurse into both hands of select.\\n+  if (const SelectInst *Sel = dyn_cast<SelectInst>(V)) {\\n+    return isDereferenceableAndAlignedPointer(Sel->getTrueValue(), Alignment,\\n+                                              Size, DL, CtxI, DT, TLI, Visited,\\n+                                              MaxDepth) &&\\n+           isDereferenceableAndAlignedPointer(Sel->getFalseValue(), Alignment,\\n+                                              Size, DL, CtxI, DT, TLI, Visited,\\n+                                              MaxDepth);\\n+  }\\n+\\n   // bitcast instructions are no-ops as far as dereferenceability is concerned.\\n   if (const BitCastOperator *BC = dyn_cast<BitCastOperator>(V)) {\\n     if (BC->getSrcTy()->isPointerTy())\"}, {\"sha\": \"c0132a519722b387ca172cdfe77a5e437d3a392c\", \"filename\": \"llvm/test/Transforms/SROA/std-clamp.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 9, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/077bff39d46364035a5dcfa32fc69910ad0975d0/llvm%2Ftest%2FTransforms%2FSROA%2Fstd-clamp.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/077bff39d46364035a5dcfa32fc69910ad0975d0/llvm%2Ftest%2FTransforms%2FSROA%2Fstd-clamp.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSROA%2Fstd-clamp.ll?ref=077bff39d46364035a5dcfa32fc69910ad0975d0\", \"patch\": \"@@ -6,18 +6,14 @@ target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16\\n define float @_Z8stdclampfff(float %x, float %lo, float %hi) {\\n ; CHECK-LABEL: @_Z8stdclampfff(\\n ; CHECK-NEXT:  bb:\\n-; CHECK-NEXT:    [[I:%.*]] = alloca float, align 4\\n-; CHECK-NEXT:    [[I3:%.*]] = alloca float, align 4\\n ; CHECK-NEXT:    [[I4:%.*]] = alloca float, align 4\\n-; CHECK-NEXT:    store float [[X:%.*]], float* [[I]], align 4\\n-; CHECK-NEXT:    store float [[LO:%.*]], float* [[I3]], align 4\\n ; CHECK-NEXT:    store float [[HI:%.*]], float* [[I4]], align 4\\n-; CHECK-NEXT:    [[I5:%.*]] = fcmp fast olt float [[X]], [[LO]]\\n+; CHECK-NEXT:    [[I5:%.*]] = fcmp fast olt float [[X:%.*]], [[LO:%.*]]\\n ; CHECK-NEXT:    [[I6:%.*]] = fcmp fast olt float [[HI]], [[X]]\\n-; CHECK-NEXT:    [[I7:%.*]] = select i1 [[I6]], float* [[I4]], float* [[I]]\\n-; CHECK-NEXT:    [[I8:%.*]] = select i1 [[I5]], float* [[I3]], float* [[I7]]\\n-; CHECK-NEXT:    [[I9:%.*]] = load float, float* [[I8]], align 4\\n-; CHECK-NEXT:    ret float [[I9]]\\n+; CHECK-NEXT:    [[I9_SROA_SPECULATE_LOAD_FALSE_SROA_SPECULATE_LOAD_TRUE:%.*]] = load float, float* [[I4]], align 4\\n+; CHECK-NEXT:    [[I9_SROA_SPECULATE_LOAD_FALSE_SROA_SPECULATED:%.*]] = select i1 [[I6]], float [[I9_SROA_SPECULATE_LOAD_FALSE_SROA_SPECULATE_LOAD_TRUE]], float [[X]]\\n+; CHECK-NEXT:    [[I9_SROA_SPECULATED:%.*]] = select i1 [[I5]], float [[LO]], float [[I9_SROA_SPECULATE_LOAD_FALSE_SROA_SPECULATED]]\\n+; CHECK-NEXT:    ret float [[I9_SROA_SPECULATED]]\\n ;\\n bb:\\n   %i = alloca float, align 4\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83NGY5ODM5MWE3YTQyZWNjZDdhYTk2NTQ2ODkyY2I5YjY1YTM5ZWRiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/74f98391a7a42eccd7aa96546892cb9b65a39edb", "content": "{\"sha\": \"74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6NzRmOTgzOTFhN2E0MmVjY2Q3YWE5NjU0Njg5MmNiOWI2NWEzOWVkYg==\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2021-04-13T14:54:40Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2021-04-13T16:37:24Z\"}, \"message\": \"[X86][SSE] combineSetCCMOVMSK - allow comparison with upper (known zero) bits in CMP(MOVMSK(PACKSS())) -> CMP(MOVMSK()) fold\\n\\nWe already allow the comparison of the upper bits of 'IsAllOf' (allbits) patterns, but we can safely compare the known zero bits for 'IsAnyOf' (zerobits) patterns as well.\\n\\nThis fixes an issues where we are comparing a type wide than the number of vector elements, which avoids a regression mentioned in rGbaadbe04bf75.\", \"tree\": {\"sha\": \"f5a42ba1dff268670c705f7dc03aa290436c322b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f5a42ba1dff268670c705f7dc03aa290436c322b\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/74f98391a7a42eccd7aa96546892cb9b65a39edb/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"62328f2f29b432dadbd327ff91ba3914c478e3fc\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/62328f2f29b432dadbd327ff91ba3914c478e3fc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/62328f2f29b432dadbd327ff91ba3914c478e3fc\"}], \"stats\": {\"total\": 12, \"additions\": 4, \"deletions\": 8}, \"files\": [{\"sha\": \"6c8051775915afc287f0474b6ef35f1ded4b839f\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"patch\": \"@@ -42347,7 +42347,7 @@ static SDValue combineSetCCMOVMSK(SDValue EFLAGS, X86::CondCode &CC,\\n     }\\n     // PMOVMSKB(PACKSSBW(LO(X), HI(X)))\\n     // -> PMOVMSKB(BITCAST_v32i8(X)) & 0xAAAAAAAA.\\n-    if (CmpBits == 16 && Subtarget.hasInt256() &&\\n+    if (CmpBits >= 16 && Subtarget.hasInt256() &&\\n         VecOp0.getOpcode() == ISD::EXTRACT_SUBVECTOR &&\\n         VecOp1.getOpcode() == ISD::EXTRACT_SUBVECTOR &&\\n         VecOp0.getOperand(0) == VecOp1.getOperand(0) &&\"}, {\"sha\": \"a4a8367f93294afe435a66f24ee9f73bbb1957e7\", \"filename\": \"llvm/test/CodeGen/X86/vector-compare-all_of.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 4, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-all_of.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-all_of.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-all_of.ll?ref=74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"patch\": \"@@ -743,10 +743,8 @@ define i16 @test_v16i16_legal_sext(<16 x i16> %a0, <16 x i16> %a1) {\\n ; AVX2-LABEL: test_v16i16_legal_sext:\\n ; AVX2:       # %bb.0:\\n ; AVX2-NEXT:    vpcmpgtw %ymm1, %ymm0, %ymm0\\n-; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1\\n-; AVX2-NEXT:    vpacksswb %xmm1, %xmm0, %xmm0\\n-; AVX2-NEXT:    vpmovmskb %xmm0, %eax\\n-; AVX2-NEXT:    cmpl $65535, %eax # imm = 0xFFFF\\n+; AVX2-NEXT:    vpmovmskb %ymm0, %eax\\n+; AVX2-NEXT:    cmpl $-1, %eax\\n ; AVX2-NEXT:    sete %al\\n ; AVX2-NEXT:    negb %al\\n ; AVX2-NEXT:    movsbl %al, %eax\"}, {\"sha\": \"c31a4c039eb3d10aa1ba585e2eb2d8be5b3dce35\", \"filename\": \"llvm/test/CodeGen/X86/vector-compare-any_of.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 3, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-any_of.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/74f98391a7a42eccd7aa96546892cb9b65a39edb/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-any_of.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-compare-any_of.ll?ref=74f98391a7a42eccd7aa96546892cb9b65a39edb\", \"patch\": \"@@ -645,9 +645,7 @@ define i16 @test_v16i16_legal_sext(<16 x i16> %a0, <16 x i16> %a1) {\\n ; AVX2-LABEL: test_v16i16_legal_sext:\\n ; AVX2:       # %bb.0:\\n ; AVX2-NEXT:    vpcmpgtw %ymm1, %ymm0, %ymm0\\n-; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1\\n-; AVX2-NEXT:    vpacksswb %xmm1, %xmm0, %xmm0\\n-; AVX2-NEXT:    vpmovmskb %xmm0, %eax\\n+; AVX2-NEXT:    vpmovmskb %ymm0, %eax\\n ; AVX2-NEXT:    negl %eax\\n ; AVX2-NEXT:    sbbl %eax, %eax\\n ; AVX2-NEXT:    # kill: def $ax killed $ax killed $eax\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xMTcwNzQzNWNjYjQ0YTkzNzdiZmVkNDA3NDUzZTA2NDZhMTU5NjM2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/11707435ccb44a9377bfed407453e0646a159636", "content": "{\"sha\": \"11707435ccb44a9377bfed407453e0646a159636\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MTE3MDc0MzVjY2I0NGE5Mzc3YmZlZDQwNzQ1M2UwNjQ2YTE1OTYzNg==\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-04-16T22:28:15Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-04-16T22:36:15Z\"}, \"message\": \"[inferattrs] Don't infer lib func attributes for nobuiltin functions\\n\\nIf we have a nobuiltin function, we can't assume we know anything about the implementation.\\n\\nI noticed this when tracing through a log from an in the wild miscompile (https://github.com/emscripten-core/emscripten/issues/9443) triggered after 8666463.  We were incorrectly assuming that a custom allocator could not free.  (It's not clear yet this is the only problem in said issue.)\\n\\nI also noticed something similiar mentioned in the commit message of ab243e when scrolling back through history.  Through, from what I can tell, that commit fixed symptom not root cause.\\n\\nThe interface we have for library function detection is extremely error prone, but given the interaction between ``nobuiltin`` decls and ``builtin`` callsites, it's really hard to imagine something much cleaner.  I may iterate on that, but it'll be invasive enough I didn't want to hold an obvious functional fix on it.\", \"tree\": {\"sha\": \"fd77f60f4c5b431313778dfe8a2fcfe686960869\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/fd77f60f4c5b431313778dfe8a2fcfe686960869\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/11707435ccb44a9377bfed407453e0646a159636\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/11707435ccb44a9377bfed407453e0646a159636\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/11707435ccb44a9377bfed407453e0646a159636\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/11707435ccb44a9377bfed407453e0646a159636/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bc636c1c2c8aafeac5ce3aba0b268fdcb1914864\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bc636c1c2c8aafeac5ce3aba0b268fdcb1914864\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bc636c1c2c8aafeac5ce3aba0b268fdcb1914864\"}], \"stats\": {\"total\": 8, \"additions\": 7, \"deletions\": 1}, \"files\": [{\"sha\": \"c32e09875a12b83a3f410b39c104f6d9bacf135d\", \"filename\": \"llvm/lib/Transforms/IPO/InferFunctionAttrs.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/11707435ccb44a9377bfed407453e0646a159636/llvm%2Flib%2FTransforms%2FIPO%2FInferFunctionAttrs.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/11707435ccb44a9377bfed407453e0646a159636/llvm%2Flib%2FTransforms%2FIPO%2FInferFunctionAttrs.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FInferFunctionAttrs.cpp?ref=11707435ccb44a9377bfed407453e0646a159636\", \"patch\": \"@@ -31,7 +31,8 @@ static bool inferAllPrototypeAttributes(\\n     // attribute logic on all calls to declarations (as declarations aren't\\n     // explicitly visited by CGSCC passes in the new pass manager.)\\n     if (F.isDeclaration() && !F.hasOptNone()) {\\n-      Changed |= inferLibFuncAttributes(F, GetTLI(F));\\n+      if (!F.hasFnAttribute(Attribute::NoBuiltin))\\n+        Changed |= inferLibFuncAttributes(F, GetTLI(F));\\n       Changed |= inferAttributesFromOthers(F);\\n     }\\n \"}, {\"sha\": \"1239a22a3a05c6c2f4e982df3decfeca9d6daefa\", \"filename\": \"llvm/test/Transforms/InferFunctionAttrs/nobuiltin.ll\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/11707435ccb44a9377bfed407453e0646a159636/llvm%2Ftest%2FTransforms%2FInferFunctionAttrs%2Fnobuiltin.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/11707435ccb44a9377bfed407453e0646a159636/llvm%2Ftest%2FTransforms%2FInferFunctionAttrs%2Fnobuiltin.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInferFunctionAttrs%2Fnobuiltin.ll?ref=11707435ccb44a9377bfed407453e0646a159636\", \"patch\": \"@@ -0,0 +1,5 @@\\n+; RUN: opt -S -inferattrs < %s | FileCheck %s\\n+\\n+; CHECK: Function Attrs: nobuiltin allocsize(0)\\n+; CHECK: declare i8* @_Znwm(i32)\\n+declare i8* @_Znwm(i32) nobuiltin allocsize(0)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lYTgxN2Q3OWJlMjY4NmQxZDVmYWQwNGQ0MjlkYmUzOTJlZTIyYjVmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ea817d79be2686d1d5fad04d429dbe392ee22b5f", "content": "{\"sha\": \"ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWE4MTdkNzliZTI2ODZkMWQ1ZmFkMDRkNDI5ZGJlMzkyZWUyMmI1Zg==\", \"commit\": {\"author\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2021-04-28T23:05:04Z\"}, \"committer\": {\"name\": \"Teresa Johnson\", \"email\": \"tejohnson@google.com\", \"date\": \"2021-05-03T20:32:22Z\"}, \"message\": \"[SimplifyCFG] Look for control flow changes instead of side effects.\\n\\nWhen passingValueIsAlwaysUndefined scans for an instruction between an\\ninst with a null or undef argument and its first use, it was checking\\nfor instructions that may have side effects, which is a superset of the\\ninstructions it intended to find (as per the comments, control flow\\nchanging instructions that would prevent reaching the uses). Switch\\nto using isGuaranteedToTransferExecutionToSuccessor() instead.\\n\\nWithout this change, when enabling -fwhole-program-vtables, which causes\\nassumes to be inserted by clang, we can get different simplification\\ndecisions. In particular, when building with instrumentation FDO it can\\naffect the optimizations decisions before FDO matching, leading to some\\nmismatches.\\n\\nI had to modify d83507-knowledge-retention-bug.ll since this fix enables\\nmore aggressive optimization of that code such that it no longer tested\\nthe original bug it was meant to test. I removed the undef which still\\nprovokes the original failure (confirmed by temporarily reverting the\\nfix) and also changed it to just invoke the passes of interest to narrow\\nthe testing.\\n\\nSimilarly I needed to adjust code for UnreachableEliminate.ll to avoid\\nan undef which was causing the function body to get optimized away with\\nthis fix.\\n\\nDifferential Revision: https://reviews.llvm.org/D101507\", \"tree\": {\"sha\": \"9265323f2bd9b1467c517c63d7fcc250dd011621\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9265323f2bd9b1467c517c63d7fcc250dd011621\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea817d79be2686d1d5fad04d429dbe392ee22b5f/comments\", \"author\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"teresajohnson\", \"id\": 20446403, \"node_id\": \"MDQ6VXNlcjIwNDQ2NDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20446403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/teresajohnson\", \"html_url\": \"https://github.com/teresajohnson\", \"followers_url\": \"https://api.github.com/users/teresajohnson/followers\", \"following_url\": \"https://api.github.com/users/teresajohnson/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/teresajohnson/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/teresajohnson/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/teresajohnson/subscriptions\", \"organizations_url\": \"https://api.github.com/users/teresajohnson/orgs\", \"repos_url\": \"https://api.github.com/users/teresajohnson/repos\", \"events_url\": \"https://api.github.com/users/teresajohnson/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/teresajohnson/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cd460c4d11eeeca485353ad6a1961b543980b664\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cd460c4d11eeeca485353ad6a1961b543980b664\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cd460c4d11eeeca485353ad6a1961b543980b664\"}], \"stats\": {\"total\": 179, \"additions\": 109, \"deletions\": 70}, \"files\": [{\"sha\": \"836ab432271e1960d4870ee553fa9cbcf9472d34\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"patch\": \"@@ -6627,9 +6627,12 @@ static bool passingValueIsAlwaysUndefined(Value *V, Instruction *I, bool PtrValu\\n     for (BasicBlock::iterator\\n              i = ++BasicBlock::iterator(I),\\n              UI = BasicBlock::iterator(dyn_cast<Instruction>(Use));\\n-         i != UI; ++i)\\n-      if (i == I->getParent()->end() || i->mayHaveSideEffects())\\n+         i != UI; ++i) {\\n+      if (i == I->getParent()->end())\\n         return false;\\n+      if (!isGuaranteedToTransferExecutionToSuccessor(&*i))\\n+        return false;\\n+    }\\n \\n     // Look through GEPs. A load from a GEP derived from NULL is still undefined\\n     if (GetElementPtrInst *GEP = dyn_cast<GetElementPtrInst>(Use))\"}, {\"sha\": \"a1dabc4231713d0217c17059a095425d28508093\", \"filename\": \"llvm/test/CodeGen/Thumb2/LowOverheadLoops/while-loops.ll\", \"status\": \"modified\", \"additions\": 63, \"deletions\": 62, \"changes\": 125, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FCodeGen%2FThumb2%2FLowOverheadLoops%2Fwhile-loops.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FCodeGen%2FThumb2%2FLowOverheadLoops%2Fwhile-loops.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FThumb2%2FLowOverheadLoops%2Fwhile-loops.ll?ref=ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"patch\": \"@@ -153,7 +153,7 @@ declare i32 @llvm.arm.mve.addv.predicated.v4i32.v4i1(<4 x i32>, i32, <4 x i1>)\\n \\n \\n ; Long test that was spilling lr between t2LoopDec and End\\n-define dso_local i32 @b(i32* %c, i32 %d, i32 %e) \\\"frame-pointer\\\"=\\\"all\\\" {\\n+define dso_local i32 @b(i32* %c, i32 %d, i32 %e, i32* %n) \\\"frame-pointer\\\"=\\\"all\\\" {\\n ; CHECK-LABEL: b:\\n ; CHECK:       @ %bb.0: @ %entry\\n ; CHECK-NEXT:    .save {r4, r5, r6, r7, lr}\\n@@ -162,79 +162,80 @@ define dso_local i32 @b(i32* %c, i32 %d, i32 %e) \\\"frame-pointer\\\"=\\\"all\\\" {\\n ; CHECK-NEXT:    add r7, sp, #12\\n ; CHECK-NEXT:    .save {r8, r9, r10, r11}\\n ; CHECK-NEXT:    push.w {r8, r9, r10, r11}\\n-; CHECK-NEXT:    .pad #8\\n-; CHECK-NEXT:    sub sp, #8\\n+; CHECK-NEXT:    .pad #12\\n+; CHECK-NEXT:    sub sp, #12\\n ; CHECK-NEXT:    wls lr, r1, .LBB2_3\\n ; CHECK-NEXT:  @ %bb.1: @ %while.body.preheader\\n-; CHECK-NEXT:    adds r1, r0, #4\\n-; CHECK-NEXT:    mvn r3, #1\\n-; CHECK-NEXT:    @ implicit-def: $r9\\n-; CHECK-NEXT:    @ implicit-def: $r10\\n+; CHECK-NEXT:    mov r4, r2\\n+; CHECK-NEXT:    adds r2, r3, #4\\n+; CHECK-NEXT:    add.w r9, r0, #4\\n+; CHECK-NEXT:    mvn r11, #1\\n ; CHECK-NEXT:    @ implicit-def: $r6\\n-; CHECK-NEXT:    @ implicit-def: $r4\\n-; CHECK-NEXT:    str r2, [sp] @ 4-byte Spill\\n+; CHECK-NEXT:    @ implicit-def: $r12\\n+; CHECK-NEXT:    str r4, [sp] @ 4-byte Spill\\n ; CHECK-NEXT:  .LBB2_2: @ %while.body\\n ; CHECK-NEXT:    @ =>This Inner Loop Header: Depth=1\\n-; CHECK-NEXT:    str r1, [sp, #4] @ 4-byte Spill\\n-; CHECK-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload\\n-; CHECK-NEXT:    ldr.w r8, [r10]\\n-; CHECK-NEXT:    ldr r1, [r1, #-4]\\n-; CHECK-NEXT:    mul r11, r8, r0\\n-; CHECK-NEXT:    adds r0, #4\\n-; CHECK-NEXT:    mul r1, r1, r9\\n-; CHECK-NEXT:    adds.w r12, r1, #-2147483648\\n+; CHECK-NEXT:    ldr r1, [r9, #-4]\\n+; CHECK-NEXT:    ldr.w r10, [r2]\\n+; CHECK-NEXT:    str r0, [sp, #4] @ 4-byte Spill\\n+; CHECK-NEXT:    muls r1, r3, r1\\n+; CHECK-NEXT:    adds.w r8, r1, #-2147483648\\n ; CHECK-NEXT:    asr.w r5, r1, #31\\n-; CHECK-NEXT:    add.w r1, r11, #-2147483648\\n-; CHECK-NEXT:    adc r5, r5, #0\\n-; CHECK-NEXT:    asrl r12, r5, r1\\n-; CHECK-NEXT:    smull r2, r1, r8, r12\\n-; CHECK-NEXT:    lsll r2, r1, #30\\n-; CHECK-NEXT:    asrs r5, r1, #31\\n-; CHECK-NEXT:    mov r2, r1\\n-; CHECK-NEXT:    lsll r2, r5, r8\\n-; CHECK-NEXT:    lsll r2, r5, #30\\n-; CHECK-NEXT:    ldrd r2, r11, [r3]\\n+; CHECK-NEXT:    adc r1, r5, #0\\n+; CHECK-NEXT:    mul r5, r10, r0\\n+; CHECK-NEXT:    mov r0, r2\\n+; CHECK-NEXT:    ldr.w r2, [r11, #4]\\n+; CHECK-NEXT:    str r2, [sp, #8] @ 4-byte Spill\\n+; CHECK-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload\\n+; CHECK-NEXT:    add.w r5, r5, #-2147483648\\n+; CHECK-NEXT:    asrl r8, r1, r5\\n+; CHECK-NEXT:    smull r4, r5, r10, r8\\n+; CHECK-NEXT:    lsll r4, r5, #30\\n ; CHECK-NEXT:    asrs r1, r5, #31\\n-; CHECK-NEXT:    mov r12, r5\\n-; CHECK-NEXT:    asrs r5, r4, #31\\n-; CHECK-NEXT:    muls r2, r6, r2\\n-; CHECK-NEXT:    adds r2, #2\\n-; CHECK-NEXT:    lsll r12, r1, r2\\n-; CHECK-NEXT:    ldr r2, [sp, #4] @ 4-byte Reload\\n-; CHECK-NEXT:    add.w r1, r12, #-2147483648\\n-; CHECK-NEXT:    ldr r2, [r2]\\n-; CHECK-NEXT:    mul r2, r2, r9\\n-; CHECK-NEXT:    add.w r9, r9, #4\\n-; CHECK-NEXT:    adds r4, r4, r2\\n-; CHECK-NEXT:    adc.w r2, r5, r2, asr #31\\n-; CHECK-NEXT:    adds.w r5, r4, #-2147483648\\n-; CHECK-NEXT:    smull r6, r4, r11, r6\\n-; CHECK-NEXT:    adc r2, r2, #0\\n-; CHECK-NEXT:    asrs r5, r2, #31\\n-; CHECK-NEXT:    subs r6, r2, r6\\n+; CHECK-NEXT:    mov r4, r5\\n+; CHECK-NEXT:    lsll r4, r1, r10\\n+; CHECK-NEXT:    lsll r4, r1, #30\\n+; CHECK-NEXT:    ldr.w r4, [r11]\\n+; CHECK-NEXT:    asrs r5, r1, #31\\n+; CHECK-NEXT:    mov r8, r1\\n+; CHECK-NEXT:    muls r4, r6, r4\\n+; CHECK-NEXT:    adds r4, #2\\n+; CHECK-NEXT:    lsll r8, r5, r4\\n+; CHECK-NEXT:    ldr r4, [r9], #4\\n+; CHECK-NEXT:    asr.w r5, r12, #31\\n+; CHECK-NEXT:    add.w r8, r8, #-2147483648\\n+; CHECK-NEXT:    muls r4, r3, r4\\n+; CHECK-NEXT:    adds r3, #4\\n+; CHECK-NEXT:    adds.w r1, r12, r4\\n+; CHECK-NEXT:    adc.w r5, r5, r4, asr #31\\n+; CHECK-NEXT:    smull r6, r4, r2, r6\\n+; CHECK-NEXT:    adds.w r1, r1, #-2147483648\\n+; CHECK-NEXT:    adc r1, r5, #0\\n+; CHECK-NEXT:    mov r2, r0\\n+; CHECK-NEXT:    asrs r5, r1, #31\\n+; CHECK-NEXT:    subs r6, r1, r6\\n ; CHECK-NEXT:    sbcs r5, r4\\n ; CHECK-NEXT:    adds.w r6, r6, #-2147483648\\n ; CHECK-NEXT:    adc r5, r5, #0\\n-; CHECK-NEXT:    asrl r6, r5, r1\\n-; CHECK-NEXT:    movs r1, #2\\n+; CHECK-NEXT:    asrl r6, r5, r8\\n ; CHECK-NEXT:    lsrl r6, r5, #2\\n-; CHECK-NEXT:    str r6, [r1]\\n-; CHECK-NEXT:    ldr r1, [r3], #-4\\n-; CHECK-NEXT:    mls r1, r1, r8, r2\\n-; CHECK-NEXT:    adds.w r4, r1, #-2147483648\\n-; CHECK-NEXT:    asr.w r2, r1, #31\\n-; CHECK-NEXT:    adc r1, r2, #0\\n-; CHECK-NEXT:    ldr r2, [sp] @ 4-byte Reload\\n-; CHECK-NEXT:    lsrl r4, r1, #2\\n-; CHECK-NEXT:    rsbs r1, r4, #0\\n-; CHECK-NEXT:    str r1, [r10, #-4]\\n-; CHECK-NEXT:    add.w r10, r10, #4\\n-; CHECK-NEXT:    str r1, [r2]\\n-; CHECK-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload\\n-; CHECK-NEXT:    adds r1, #4\\n+; CHECK-NEXT:    movs r5, #2\\n+; CHECK-NEXT:    str r6, [r5]\\n+; CHECK-NEXT:    ldr r5, [r11], #-4\\n+; CHECK-NEXT:    mls r1, r5, r10, r1\\n+; CHECK-NEXT:    adds.w r12, r1, #-2147483648\\n+; CHECK-NEXT:    asr.w r4, r1, #31\\n+; CHECK-NEXT:    adc r1, r4, #0\\n+; CHECK-NEXT:    ldrd r4, r0, [sp] @ 8-byte Folded Reload\\n+; CHECK-NEXT:    lsrl r12, r1, #2\\n+; CHECK-NEXT:    rsb.w r1, r12, #0\\n+; CHECK-NEXT:    adds r0, #4\\n+; CHECK-NEXT:    str r1, [r4]\\n+; CHECK-NEXT:    str r1, [r2, #-4]\\n+; CHECK-NEXT:    adds r2, #4\\n ; CHECK-NEXT:    le lr, .LBB2_2\\n ; CHECK-NEXT:  .LBB2_3: @ %while.end\\n-; CHECK-NEXT:    add sp, #8\\n+; CHECK-NEXT:    add sp, #12\\n ; CHECK-NEXT:    pop.w {r8, r9, r10, r11}\\n ; CHECK-NEXT:    pop {r4, r5, r6, r7, pc}\\n entry:\\n@@ -245,7 +246,7 @@ entry:\\n while.body:                                       ; preds = %entry, %while.body\\n   %p.077 = phi i32* [ %incdec.ptr22, %while.body ], [ inttoptr (i32 2 to i32*), %entry ]\\n   %c.addr.076 = phi i32* [ %incdec.ptr1, %while.body ], [ %c, %entry ]\\n-  %n.075 = phi i32* [ %incdec.ptr43, %while.body ], [ undef, %entry ]\\n+  %n.075 = phi i32* [ %incdec.ptr43, %while.body ], [ %n, %entry ]\\n   %m.074 = phi i32 [ %conv35, %while.body ], [ undef, %entry ]\\n   %d.addr.073 = phi i32 [ %dec, %while.body ], [ %d, %entry ]\\n   %h.072 = phi i32 [ %conv41, %while.body ], [ undef, %entry ]\"}, {\"sha\": \"e5dd8dbd77ec99f4031a1f681f555aaa2532aea5\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/d83507-knowledge-retention-bug.ll\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 6, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2Fd83507-knowledge-retention-bug.ll?ref=ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"patch\": \"@@ -1,15 +1,15 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n-; RUN: opt -O1                   -enable-knowledge-retention -S < %s  | FileCheck %s\\n-; RUN: opt -passes='default<O1>' -enable-knowledge-retention -S < %s  | FileCheck %s\\n+; RUN: opt -loop-rotate -instcombine -enable-knowledge-retention -S < %s  | FileCheck %s\\n+; RUN: opt -passes='loop(loop-rotate),instcombine' -enable-knowledge-retention -S < %s  | FileCheck %s\\n \\n %0 = type { %0* }\\n \\n-define %0* @f1() local_unnamed_addr {\\n+define %0* @f1(%0* %i0) local_unnamed_addr {\\n ; CHECK-LABEL: @f1(\\n ; CHECK-NEXT:  bb:\\n-; CHECK-NEXT:    br label [[BB3:%.*]]\\n+; CHECK:         br label [[BB3:%.*]]\\n ; CHECK:       bb3:\\n-; CHECK-NEXT:    [[I1:%.*]] = phi %0* [ [[I5:%.*]], [[BB3]] ], [ undef, [[BB:%.*]] ]\\n+; CHECK-NEXT:    [[I1:%.*]] = phi %0* [ %i0, [[BB:%.*]] ], [ [[I5:%.*]], [[BB3]] ]\\n ; CHECK-NEXT:    call void @llvm.assume(i1 true) [ \\\"nonnull\\\"(%0* [[I1]]) ]\\n ; CHECK-NEXT:    [[I4:%.*]] = getelementptr inbounds [[TMP0:%.*]], %0* [[I1]], i64 0, i32 0\\n ; CHECK-NEXT:    [[I5]] = load %0*, %0** [[I4]], align 8\\n@@ -22,7 +22,7 @@ bb:\\n   br label %bb1\\n \\n bb1:\\n-  %i = phi %0* [ undef, %bb ], [ %i5, %bb3 ]\\n+  %i = phi %0* [ %i0, %bb ], [ %i5, %bb3 ]\\n   %i2 = icmp eq %0* %i, null\\n   br i1 %i2, label %bb6, label %bb3\\n \"}, {\"sha\": \"0d6b941bb84f677a51d7b01508b7cbe43b90df25\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/UnreachableEliminate.ll\", \"status\": \"modified\", \"additions\": 35, \"deletions\": 0, \"changes\": 35, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FUnreachableEliminate.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea817d79be2686d1d5fad04d429dbe392ee22b5f/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FUnreachableEliminate.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2FUnreachableEliminate.ll?ref=ea817d79be2686d1d5fad04d429dbe392ee22b5f\", \"patch\": \"@@ -84,6 +84,41 @@ bb2:\\n   ret void\\n }\\n \\n+declare void @llvm.assume(i1)\\n+declare i1 @llvm.type.test(i8*, metadata) nounwind readnone\\n+\\n+;; Same as the above test but make sure the unreachable control flow is still\\n+;; removed in the presence of a type test / assume sequence.\\n+\\n+define void @test5_type_test_assume(i1 %cond, i8* %ptr, [3 x i8*]* %vtable) {\\n+; CHECK-LABEL: @test5_type_test_assume(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = xor i1 [[COND:%.*]], true\\n+; CHECK-NEXT:    call void @llvm.assume(i1 [[TMP0]])\\n+; CHECK-NEXT:    [[VTABLE:%.*]] = bitcast [3 x i8*]* %vtable to i8*\\n+; CHECK-NEXT:    [[P:%.*]] = call i1 @llvm.type.test(i8* [[VTABLE]], metadata !\\\"foo\\\")\\n+; CHECK-NEXT:    tail call void @llvm.assume(i1 [[P]])\\n+; CHECK-NEXT:    store i8 2, i8* [[PTR:%.*]], align 8\\n+; CHECK-NEXT:    ret void\\n+;\\n+entry:\\n+  br i1 %cond, label %bb1, label %bb3\\n+\\n+bb3:\\n+  br label %bb2\\n+\\n+bb1:\\n+  br label %bb2\\n+\\n+bb2:\\n+  %ptr.2 = phi i8* [ %ptr, %bb3 ], [ null, %bb1 ]\\n+  %vtablei8 = bitcast [3 x i8*]* %vtable to i8*\\n+  %p = call i1 @llvm.type.test(i8* %vtablei8, metadata !\\\"foo\\\")\\n+  tail call void @llvm.assume(i1 %p)\\n+  store i8 2, i8* %ptr.2, align 8\\n+  ret void\\n+}\\n+\\n define void @test5_no_null_opt(i1 %cond, i8* %ptr) #0 {\\n ; CHECK-LABEL: @test5_no_null_opt(\\n ; CHECK-NEXT:  entry:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8zZjhiZTE1ZjI5MTFhM2QzNjQ1MDMwOTExYmU4M2ExMTViZmU5ZTVjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/3f8be15f2911a3d3645030911be83a115bfe9e5c", "content": "{\"sha\": \"3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6M2Y4YmUxNWYyOTExYTNkMzY0NTAzMDkxMWJlODNhMTE1YmZlOWU1Yw==\", \"commit\": {\"author\": {\"name\": \"Congzhe Cao\", \"email\": \"congzhe.cao@huawei.com\", \"date\": \"2021-05-12T01:25:16Z\"}, \"committer\": {\"name\": \"CongzheUalberta\", \"email\": \"congzhecao@gmail.com\", \"date\": \"2021-05-12T01:30:54Z\"}, \"message\": \"[LoopInterchange] Handle lcssa PHIs with multiple predecessors\\n\\nThis is a bugfix in the transformation phase.\\n\\nIf the original outer loop header branches to both the inner loop\\n(header) and the outer loop latch, and if there is an lcssa PHI\\nnode outside the loop nest, then after interchange the new outer latch\\nwill have an lcssa PHI node inserted which has two predecessors, i.e.,\\nthe original outer header and the original outer latch. Currently\\nthe transformation assumes it has only one predecessor (the original\\nouter latch) and crashes, since the inserted lcssa PHI node does\\nnot take both predecessors as incoming BBs.\\n\\nReviewed By: Whitney\\n\\nDifferential Revision: https://reviews.llvm.org/D100792\", \"tree\": {\"sha\": \"901673ea548163291807b76f71bac822bec58e7a\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/901673ea548163291807b76f71bac822bec58e7a\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3f8be15f2911a3d3645030911be83a115bfe9e5c/comments\", \"author\": null, \"committer\": {\"login\": \"CongzheUalberta\", \"id\": 22824635, \"node_id\": \"MDQ6VXNlcjIyODI0NjM1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/22824635?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/CongzheUalberta\", \"html_url\": \"https://github.com/CongzheUalberta\", \"followers_url\": \"https://api.github.com/users/CongzheUalberta/followers\", \"following_url\": \"https://api.github.com/users/CongzheUalberta/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/CongzheUalberta/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/CongzheUalberta/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/CongzheUalberta/subscriptions\", \"organizations_url\": \"https://api.github.com/users/CongzheUalberta/orgs\", \"repos_url\": \"https://api.github.com/users/CongzheUalberta/repos\", \"events_url\": \"https://api.github.com/users/CongzheUalberta/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/CongzheUalberta/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"10c309ad81e2be156ab44a83ee56cddea20637cc\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/10c309ad81e2be156ab44a83ee56cddea20637cc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/10c309ad81e2be156ab44a83ee56cddea20637cc\"}], \"stats\": {\"total\": 39, \"additions\": 39, \"deletions\": 0}, \"files\": [{\"sha\": \"c63bf160706eab20c1937b165dcc63685e782b1a\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopInterchange.cpp\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 0, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/3f8be15f2911a3d3645030911be83a115bfe9e5c/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/3f8be15f2911a3d3645030911be83a115bfe9e5c/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopInterchange.cpp?ref=3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"patch\": \"@@ -1529,6 +1529,13 @@ static void moveLCSSAPhis(BasicBlock *InnerExit, BasicBlock *InnerHeader,\\n       PHINode *NewPhi = dyn_cast<PHINode>(P.clone());\\n       NewPhi->setIncomingValue(0, P.getIncomingValue(0));\\n       NewPhi->setIncomingBlock(0, OuterLatch);\\n+      // We might have incoming edges from other BBs, i.e., the original outer\\n+      // header.\\n+      for (auto *Pred : predecessors(InnerLatch)) {\\n+        if (Pred == OuterLatch)\\n+          continue;\\n+        NewPhi->addIncoming(P.getIncomingValue(0), Pred);\\n+      }\\n       NewPhi->insertBefore(InnerLatch->getFirstNonPHI());\\n       P.setIncomingValue(0, NewPhi);\\n     }\"}, {\"sha\": \"8dd449ba588befe39eed9ad51d952479400d550a\", \"filename\": \"llvm/test/Transforms/LoopInterchange/lcssa.ll\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/3f8be15f2911a3d3645030911be83a115bfe9e5c/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/3f8be15f2911a3d3645030911be83a115bfe9e5c/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopInterchange%2Flcssa.ll?ref=3f8be15f2911a3d3645030911be83a115bfe9e5c\", \"patch\": \"@@ -298,3 +298,35 @@ for.exit:                                         ; preds = %outer.inc\\n for.end16:                                        ; preds = %for.exit\\n   ret void\\n }\\n+\\n+; Should not crash when the outer header branches to\\n+; both the inner loop and the outer latch, and there\\n+; is an lcssa phi node outside the loopnest.\\n+; REMARK: Interchanged\\n+; REMARK-NEXT: lcssa_08\\n+define i64 @lcssa_08([100 x [100 x i64]]* %Arr) {\\n+entry:\\n+  br label %for1.header\\n+\\n+for1.header:                                         ; preds = %for1.inc, %entry\\n+  %indvars.iv23 = phi i64 [ 0, %entry ], [ %indvars.iv.next24, %for1.inc ]\\n+  br i1 undef, label %for2, label %for1.inc\\n+\\n+for2:                                        ; preds = %for2, %for1.header\\n+  %indvars.iv = phi i64 [ 0, %for1.header ], [ %indvars.iv.next.3, %for2 ]\\n+  %arrayidx = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %Arr, i64 0, i64 %indvars.iv, i64 %indvars.iv23\\n+  %lv = load i64, i64* %arrayidx, align 4\\n+  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 1\\n+  %exit1 = icmp eq i64 %indvars.iv.next.3, 100\\n+  br i1 %exit1, label %for1.inc, label %for2\\n+\\n+for1.inc:                                ; preds = %for2, %for1.header\\n+  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1\\n+  %exit2 = icmp eq i64 %indvars.iv.next24, 100\\n+  br i1 %exit2, label %for1.loopexit, label %for1.header\\n+\\n+for1.loopexit:                                 ; preds = %for1.inc\\n+  %sum.outer.lcssa = phi i64 [ %indvars.iv23, %for1.inc ]\\n+  ret i64 %sum.outer.lcssa\\n+}\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wMWM5MGJiZDRmZDEyYWE4NmRiNGE0NzU3N2FkZGI0N2U2ZTg0Mjg5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/01c90bbd4fd12aa86db4a47577addb47e6e84289", "content": "{\"sha\": \"01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MDFjOTBiYmQ0ZmQxMmFhODZkYjRhNDc1NzdhZGRiNDdlNmU4NDI4OQ==\", \"commit\": {\"author\": {\"name\": \"Djordje Todorovic\", \"email\": \"djordje.todorovic@syrmia.com\", \"date\": \"2021-05-14T09:06:46Z\"}, \"committer\": {\"name\": \"Djordje Todorovic\", \"email\": \"djordje.todorovic@syrmia.com\", \"date\": \"2021-05-14T12:06:13Z\"}, \"message\": \"[Transforms][Debugify] Fix \\\"Missing line\\\" false alarm on PHI nodes\\n\\nThis is a fix for https://bugs.llvm.org/show_bug.cgi?id=49959\\n\\nThe \\\"Missing line\\\" false alarm was introduced in D75242.\\n\\nPatch by Yilong Guo<yilong.guo@intel.com>\\n\\nDifferential Revision: https://reviews.llvm.org/D100446\", \"tree\": {\"sha\": \"87d9fe424f20cdba15ae9540c9adb718c6d5469c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/87d9fe424f20cdba15ae9540c9adb718c6d5469c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/01c90bbd4fd12aa86db4a47577addb47e6e84289/comments\", \"author\": {\"login\": \"djtodoro\", \"id\": 56676939, \"node_id\": \"MDQ6VXNlcjU2Njc2OTM5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/56676939?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/djtodoro\", \"html_url\": \"https://github.com/djtodoro\", \"followers_url\": \"https://api.github.com/users/djtodoro/followers\", \"following_url\": \"https://api.github.com/users/djtodoro/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/djtodoro/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/djtodoro/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/djtodoro/subscriptions\", \"organizations_url\": \"https://api.github.com/users/djtodoro/orgs\", \"repos_url\": \"https://api.github.com/users/djtodoro/repos\", \"events_url\": \"https://api.github.com/users/djtodoro/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/djtodoro/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"djtodoro\", \"id\": 56676939, \"node_id\": \"MDQ6VXNlcjU2Njc2OTM5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/56676939?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/djtodoro\", \"html_url\": \"https://github.com/djtodoro\", \"followers_url\": \"https://api.github.com/users/djtodoro/followers\", \"following_url\": \"https://api.github.com/users/djtodoro/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/djtodoro/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/djtodoro/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/djtodoro/subscriptions\", \"organizations_url\": \"https://api.github.com/users/djtodoro/orgs\", \"repos_url\": \"https://api.github.com/users/djtodoro/repos\", \"events_url\": \"https://api.github.com/users/djtodoro/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/djtodoro/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6ec66f681c3763916933057849587a44cfb8e6da\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6ec66f681c3763916933057849587a44cfb8e6da\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6ec66f681c3763916933057849587a44cfb8e6da\"}], \"stats\": {\"total\": 42, \"additions\": 40, \"deletions\": 2}, \"files\": [{\"sha\": \"cbea40773a0a2f3bbf0a4ce53c2511412d2a22cb\", \"filename\": \"llvm/lib/Transforms/Utils/Debugify.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01c90bbd4fd12aa86db4a47577addb47e6e84289/llvm%2Flib%2FTransforms%2FUtils%2FDebugify.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01c90bbd4fd12aa86db4a47577addb47e6e84289/llvm%2Flib%2FTransforms%2FUtils%2FDebugify.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FDebugify.cpp?ref=01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"patch\": \"@@ -623,7 +623,7 @@ bool checkDebugifyMetadata(Module &M,\\n \\n     // Find missing lines.\\n     for (Instruction &I : instructions(F)) {\\n-      if (isa<DbgValueInst>(&I) || isa<PHINode>(&I))\\n+      if (isa<DbgValueInst>(&I))\\n         continue;\\n \\n       auto DL = I.getDebugLoc();\\n@@ -632,7 +632,7 @@ bool checkDebugifyMetadata(Module &M,\\n         continue;\\n       }\\n \\n-      if (!DL) {\\n+      if (!isa<PHINode>(&I) && !DL) {\\n         dbg() << \\\"WARNING: Instruction with empty DebugLoc in function \\\";\\n         dbg() << F.getName() << \\\" --\\\";\\n         I.print(dbg());\"}, {\"sha\": \"bae91e4e52cb855266566d2cb36314bb377943ad\", \"filename\": \"llvm/test/DebugInfo/debugify-ignore-phi.ll\", \"status\": \"added\", \"additions\": 38, \"deletions\": 0, \"changes\": 38, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/01c90bbd4fd12aa86db4a47577addb47e6e84289/llvm%2Ftest%2FDebugInfo%2Fdebugify-ignore-phi.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/01c90bbd4fd12aa86db4a47577addb47e6e84289/llvm%2Ftest%2FDebugInfo%2Fdebugify-ignore-phi.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2Fdebugify-ignore-phi.ll?ref=01c90bbd4fd12aa86db4a47577addb47e6e84289\", \"patch\": \"@@ -0,0 +1,38 @@\\n+; RUN: opt -check-debugify < %s -S 2>&1 | FileCheck %s\\n+\\n+define void @test_phi(i1 %cond) !dbg !6 {\\n+  br i1 %cond, label %1, label %2, !dbg !11\\n+\\n+1:                                                ; preds = %0\\n+  br label %2, !dbg !12\\n+\\n+2:                                                ; preds = %1, %0\\n+  %v = phi i32 [ 0, %0 ], [ 1, %1 ], !dbg !13\\n+  call void @llvm.dbg.value(metadata i32 %v, metadata !9, metadata !DIExpression()), !dbg !13\\n+  ret void, !dbg !14\\n+}\\n+\\n+declare void @llvm.dbg.value(metadata, metadata, metadata)\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.debugify = !{!3, !4}\\n+!llvm.module.flags = !{!5}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: \\\"debugify\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)\\n+!1 = !DIFile(filename: \\\"<stdin>\\\", directory: \\\"/\\\")\\n+!2 = !{}\\n+!3 = !{i32 4}\\n+!4 = !{i32 1}\\n+!5 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!6 = distinct !DISubprogram(name: \\\"test_phi\\\", linkageName: \\\"test_phi\\\", scope: null, file: !1, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !8)\\n+!7 = !DISubroutineType(types: !2)\\n+!8 = !{!9}\\n+!9 = !DILocalVariable(name: \\\"1\\\", scope: !6, file: !1, line: 3, type: !10)\\n+!10 = !DIBasicType(name: \\\"ty32\\\", size: 32, encoding: DW_ATE_unsigned)\\n+!11 = !DILocation(line: 1, column: 1, scope: !6)\\n+!12 = !DILocation(line: 2, column: 1, scope: !6)\\n+!13 = !DILocation(line: 3, column: 1, scope: !6)\\n+!14 = !DILocation(line: 4, column: 1, scope: !6)\\n+\\n+; CHECK-NOT: WARNING: Missing line 3\\n+; CHECK: CheckModuleDebugify: PASS\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9mYWU3ZGViYWRjZWEzMzVkNGFhZGRlZTgyNDA2YThkMTA0MjZlNzMwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/fae7debadcea335d4aaddee82406a8d10426e730", "content": "{\"sha\": \"fae7debadcea335d4aaddee82406a8d10426e730\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZmFlN2RlYmFkY2VhMzM1ZDRhYWRkZWU4MjQwNmE4ZDEwNDI2ZTczMA==\", \"commit\": {\"author\": {\"name\": \"Xun Li\", \"email\": \"lxfind@gmail.com\", \"date\": \"2021-06-12T17:29:53Z\"}, \"committer\": {\"name\": \"Xun Li\", \"email\": \"lxfind@gmail.com\", \"date\": \"2021-06-12T17:29:53Z\"}, \"message\": \"[CHR] Don't run ControlHeightReduction if any BB has address taken\\n\\nThis patch is to address https://bugs.llvm.org/show_bug.cgi?id=50610.\\nIn computed goto pattern, there are usually a list of basic blocks that are all targets of indirectbr instruction, and each basic block also has address taken and stored in a variable.\\nCHR pass could potentially clone these basic blocks, which would generate a cloned version of the indirectbr and clonved version of all basic blocks in the list.\\nHowever these basic blocks will not have their addresses taken and stored anywhere. So latter SimplifyCFG pass will simply remove all tehse cloned basic blocks, resulting in incorrect code.\\nTo fix this, when searching for scopes, we skip scopes that contains BBs with addresses taken.\\nAdded a few test cases.\\n\\nReviewed By: aeubanks, wenlei, hoy\\n\\nDifferential Revision: https://reviews.llvm.org/D103867\", \"tree\": {\"sha\": \"6aac28222170e12dc750450438952ff4508c94d1\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/6aac28222170e12dc750450438952ff4508c94d1\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/fae7debadcea335d4aaddee82406a8d10426e730\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fae7debadcea335d4aaddee82406a8d10426e730\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fae7debadcea335d4aaddee82406a8d10426e730\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fae7debadcea335d4aaddee82406a8d10426e730/comments\", \"author\": {\"login\": \"lxfind\", \"id\": 1581614, \"node_id\": \"MDQ6VXNlcjE1ODE2MTQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1581614?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/lxfind\", \"html_url\": \"https://github.com/lxfind\", \"followers_url\": \"https://api.github.com/users/lxfind/followers\", \"following_url\": \"https://api.github.com/users/lxfind/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/lxfind/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/lxfind/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/lxfind/subscriptions\", \"organizations_url\": \"https://api.github.com/users/lxfind/orgs\", \"repos_url\": \"https://api.github.com/users/lxfind/repos\", \"events_url\": \"https://api.github.com/users/lxfind/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/lxfind/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"lxfind\", \"id\": 1581614, \"node_id\": \"MDQ6VXNlcjE1ODE2MTQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1581614?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/lxfind\", \"html_url\": \"https://github.com/lxfind\", \"followers_url\": \"https://api.github.com/users/lxfind/followers\", \"following_url\": \"https://api.github.com/users/lxfind/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/lxfind/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/lxfind/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/lxfind/subscriptions\", \"organizations_url\": \"https://api.github.com/users/lxfind/orgs\", \"repos_url\": \"https://api.github.com/users/lxfind/repos\", \"events_url\": \"https://api.github.com/users/lxfind/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/lxfind/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c997867dc084a1bcf631816f964b3ff49a297ba3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c997867dc084a1bcf631816f964b3ff49a297ba3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c997867dc084a1bcf631816f964b3ff49a297ba3\"}], \"stats\": {\"total\": 121, \"additions\": 121, \"deletions\": 0}, \"files\": [{\"sha\": \"3b4d80dc8023222881b118cdf61b8bec119bcb95\", \"filename\": \"llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fae7debadcea335d4aaddee82406a8d10426e730/llvm%2Flib%2FTransforms%2FInstrumentation%2FControlHeightReduction.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fae7debadcea335d4aaddee82406a8d10426e730/llvm%2Flib%2FTransforms%2FInstrumentation%2FControlHeightReduction.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstrumentation%2FControlHeightReduction.cpp?ref=fae7debadcea335d4aaddee82406a8d10426e730\", \"patch\": \"@@ -767,6 +767,11 @@ CHRScope * CHR::findScope(Region *R) {\\n   for (BasicBlock *Pred : predecessors(Entry))\\n     if (R->contains(Pred))\\n       return nullptr;\\n+  // If any of the basic blocks have address taken, we must skip this region\\n+  // because we cannot clone basic blocks that have address taken.\\n+  for (BasicBlock *BB : R->blocks())\\n+    if (BB->hasAddressTaken())\\n+      return nullptr;\\n   if (Exit) {\\n     // Try to find an if-then block (check if R is an if-then).\\n     // if (cond) {\"}, {\"sha\": \"6a95c68c5f139e8ac32d984ee7c7012b855a7655\", \"filename\": \"llvm/test/Transforms/PGOProfile/chr.ll\", \"status\": \"modified\", \"additions\": 116, \"deletions\": 0, \"changes\": 116, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/fae7debadcea335d4aaddee82406a8d10426e730/llvm%2Ftest%2FTransforms%2FPGOProfile%2Fchr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/fae7debadcea335d4aaddee82406a8d10426e730/llvm%2Ftest%2FTransforms%2FPGOProfile%2Fchr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPGOProfile%2Fchr.ll?ref=fae7debadcea335d4aaddee82406a8d10426e730\", \"patch\": \"@@ -2527,6 +2527,122 @@ bb3:\\n   ret void\\n }\\n \\n+; Test that chr will skip this function when addresses are taken on basic blocks.\\n+@gototable1 = weak_odr dso_local local_unnamed_addr constant [2 x i8*] [i8* blockaddress(@test_chr_with_bbs_address_taken1, %bb3), i8* blockaddress(@test_chr_with_bbs_address_taken1, %bb3)]\\n+define void @test_chr_with_bbs_address_taken1(i32* %i) !prof !14 {\\n+; CHECK-LABEL: @test_chr_with_bbs_address_taken1(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[I:%.*]], align 4\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[TMP0]], 1\\n+; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i32 [[TMP1]], 0\\n+; CHECK-NEXT:    br i1 [[TMP2]], label [[BB1:%.*]], label [[BB0:%.*]], !prof [[PROF16]]\\n+; CHECK:       bb0:\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    br label [[BB1]]\\n+; CHECK:       bb1:\\n+; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP0]], 2\\n+; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0\\n+; CHECK-NEXT:    br i1 [[TMP4]], label [[BB4:%.*]], label [[BB2:%.*]], !prof [[PROF16]]\\n+; CHECK:       bb2:\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    br label [[BB4]]\\n+; CHECK:       bb4:\\n+; CHECK-NEXT:    ret void\\n+;\\n+entry:\\n+  %0 = load i32, i32* %i\\n+  %1 = and i32 %0, 1\\n+  %2 = icmp eq i32 %1, 0\\n+  br i1 %2, label %bb1, label %bb0, !prof !15\\n+\\n+bb0:\\n+  call void @foo()\\n+  br label %bb1\\n+\\n+bb1:\\n+  %3 = and i32 %0, 2\\n+  %4 = icmp eq i32 %3, 0\\n+  br i1 %4, label %bb4, label %bb2, !prof !15\\n+\\n+bb2:\\n+  call void @foo()\\n+  %pc = bitcast i32* %i to i8*\\n+  indirectbr i8* %pc, [label %bb3, label %bb3]\\n+\\n+bb3:\\n+  br label %bb4\\n+\\n+bb4:\\n+  ret void\\n+}\\n+\\n+; Test that chr will still optimize the first 2 regions,\\n+; but will skip the last one due to basic blocks have address taken.\\n+@gototable2 = weak_odr dso_local local_unnamed_addr constant [2 x i8*] [i8* blockaddress(@test_chr_with_bbs_address_taken2, %bb5), i8* blockaddress(@test_chr_with_bbs_address_taken2, %bb5)]\\n+define void @test_chr_with_bbs_address_taken2(i32* %i) !prof !14 {\\n+; CHECK-LABEL: @test_chr_with_bbs_address_taken2(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[I:%.*]], align 4\\n+; CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[TMP0]], 3\\n+; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i32 [[TMP1]], 3\\n+; CHECK-NEXT:    br i1 [[TMP2]], label [[BB0:%.*]], label [[ENTRY_SPLIT_NONCHR:%.*]], !prof [[PROF15]]\\n+; CHECK:       bb0:\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    br label [[BB3:%.*]]\\n+; CHECK:       entry.split.nonchr:\\n+; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP0]], 1\\n+; CHECK-NEXT:    [[DOTNOT:%.*]] = icmp eq i32 [[TMP3]], 0\\n+; CHECK-NEXT:    br i1 [[DOTNOT]], label [[BB1_NONCHR:%.*]], label [[BB0_NONCHR:%.*]], !prof [[PROF16]]\\n+; CHECK:       bb0.nonchr:\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    br label [[BB1_NONCHR]]\\n+; CHECK:       bb1.nonchr:\\n+; CHECK-NEXT:    [[TMP4:%.*]] = and i32 [[TMP0]], 2\\n+; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0\\n+; CHECK-NEXT:    br i1 [[TMP5]], label [[BB3]], label [[BB2_NONCHR:%.*]], !prof [[PROF16]]\\n+; CHECK:       bb2.nonchr:\\n+; CHECK-NEXT:    call void @foo()\\n+; CHECK-NEXT:    br label [[BB3]]\\n+; CHECK:       bb3:\\n+; CHECK-NEXT:    ret void\\n+;\\n+entry:\\n+  %0 = load i32, i32* %i\\n+  %1 = and i32 %0, 1\\n+  %2 = icmp eq i32 %1, 0\\n+  br i1 %2, label %bb1, label %bb0, !prof !15\\n+\\n+bb0:\\n+  call void @foo()\\n+  br label %bb1\\n+\\n+bb1:\\n+  %3 = and i32 %0, 2\\n+  %4 = icmp eq i32 %3, 0\\n+  br i1 %4, label %bb3, label %bb2, !prof !15\\n+\\n+bb2:\\n+  call void @foo()\\n+  br label %bb3\\n+\\n+bb3:\\n+  %5 = and i32 %0, 2\\n+  %6 = icmp eq i32 %5, 0\\n+  br i1 %6, label %bb6, label %bb4, !prof !15\\n+\\n+bb4:\\n+  %pc = bitcast i32* %i to i8*\\n+  indirectbr i8* %pc, [label %bb5, label %bb5]\\n+\\n+bb5:\\n+  br label %bb6\\n+\\n+bb6:\\n+  ret void\\n+}\\n+\\n+\\n !llvm.module.flags = !{!0}\\n !0 = !{i32 1, !\\\"ProfileSummary\\\", !1}\\n !1 = !{!2, !3, !4, !5, !6, !7, !8, !9}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8zNGNjY2RhZWQ3ZTc5NTJhOTE5MTIzMWZmYTYyYjFiMjJlYWMzNWM4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/34cccdaed7e7952a9191231ffa62b1b22eac35c8", "content": "{\"sha\": \"34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MzRjY2NkYWVkN2U3OTUyYTkxOTEyMzFmZmE2MmIxYjIyZWFjMzVjOA==\", \"commit\": {\"author\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2021-06-22T13:48:45Z\"}, \"committer\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2021-06-22T13:52:16Z\"}, \"message\": \"[BitcodeReader] Validate Strtab before accessing.\\n\\nThis fixes a crash with invalid bitcode files that have records\\nreferencing names in Strtab, but Strtab is not present or the index is\\nout-of-bounds.\\n\\nThis fixes the following clusterfuzz issue:\\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29895\\n\\nReviewed By: arsenm\\n\\nDifferential Revision: https://reviews.llvm.org/D95554\", \"tree\": {\"sha\": \"79ef62c684422646e1246c2f695df0bf39e787cc\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/79ef62c684422646e1246c2f695df0bf39e787cc\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unknown_key\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCAAdFiEEATKaWvqCN3qxMHqBYddVS1zs3A0FAmDR6xAACgkQYddVS1zs\\n3A0Yxw/+Lf3syVqLVfGCi35xtYApPoR+lnTl6+zUEM5Se3s8v3iv2QI4dCPHf8Xj\\n2RvBzh+c1IUTMo87v7lXCSx+7B6rUPEl9YBIipT7AvRhmRC8U39L8tKVSZmedPf2\\nlVkEHD2+87gK4vgOBO8wTwFC4KvLaIb74xBoaeyO5qiuX+hVZFLLTHKx8hXMPkm5\\n6/UOwLxQZ3+Ns5ldISkP8iQmf+XHduh5bHIulRcHfW5lyO/kRjuhKsKPhm58LKHR\\nYHh2ssr22UVhKxi0XP/orZiRAE/GPO+8pmUmigtcPNa2CTmWU5AVc00L2jAeNH1/\\nRyxpvFLgX43DUQEbegP2nQlJUIcWDhy4JfeC4WSvZP9NbVRDAbQh2cnrDGfYoXah\\n8Xzn40LA9onT1ZkmTkss74e+S25/+yEnMWM6WCqkoYwOvie2RxOOLA0ufk8HQW1C\\nP/aRZCg7KwXI+s9rp9n5Lpg3zRhz/iwGGrh269LUJjEVks0Hwg4OgDZb8ihucF5T\\nL1LvfaSwJzHNqmNWQ73Ce4YvOH8OkIn2JiPwjioBI3UQUC53UBl3A60+R6dzGnjf\\nvJwHom57V0+idvNAVe4rbchl9Ahyl92tbA97fSKCb+5nFoc+dApx8zJf0SFrZTzV\\n3DoBjed1NtcbefHR0dmN2wDIqunWh19oiMiP253V+pr/Gdlw8B4=\\n=vShe\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree 79ef62c684422646e1246c2f695df0bf39e787cc\\nparent e638a290f7d0bb85dbf81ba34eaaeef8c8d1b42d\\nauthor Florian Hahn <flo@fhahn.com> 1624369725 +0100\\ncommitter Florian Hahn <flo@fhahn.com> 1624369936 +0100\\n\\n[BitcodeReader] Validate Strtab before accessing.\\n\\nThis fixes a crash with invalid bitcode files that have records\\nreferencing names in Strtab, but Strtab is not present or the index is\\nout-of-bounds.\\n\\nThis fixes the following clusterfuzz issue:\\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29895\\n\\nReviewed By: arsenm\\n\\nDifferential Revision: https://reviews.llvm.org/D95554\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/34cccdaed7e7952a9191231ffa62b1b22eac35c8/comments\", \"author\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e638a290f7d0bb85dbf81ba34eaaeef8c8d1b42d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e638a290f7d0bb85dbf81ba34eaaeef8c8d1b42d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e638a290f7d0bb85dbf81ba34eaaeef8c8d1b42d\"}], \"stats\": {\"total\": 12, \"additions\": 10, \"deletions\": 2}, \"files\": [{\"sha\": \"1631dc344bea664c1d20146b919c41b920174f3f\", \"filename\": \"llvm/lib/Bitcode/Reader/BitcodeReader.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FBitcode%2FReader%2FBitcodeReader.cpp?ref=34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"patch\": \"@@ -3407,9 +3407,12 @@ Error BitcodeReader::parseFunctionRecord(ArrayRef<uint64_t> Record) {\\n \\n   // Record[16] is the address space number.\\n \\n-  // Check whether we have enough values to read a partition name.\\n-  if (Record.size() > 18)\\n+  // Check whether we have enough values to read a partition name. Also make\\n+  // sure Strtab has enough values.\\n+  if (Record.size() > 18 && Strtab.data() &&\\n+      Record[17] + Record[18] <= Strtab.size()) {\\n     Func->setPartition(StringRef(Strtab.data() + Record[17], Record[18]));\\n+  }\\n \\n   ValueList.push_back(Func);\\n \"}, {\"sha\": \"4973090595e47d5d714d9321564403604add4c20\", \"filename\": \"llvm/test/Bitcode/invalid-record-strtab.ll\", \"status\": \"added\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll?ref=34cccdaed7e7952a9191231ffa62b1b22eac35c8\", \"patch\": \"@@ -0,0 +1,5 @@\\n+; Bitcode with an invalid record that indexes a name outside of strtab.\\n+\\n+; RUN: not llvm-dis %s.bc -o - 2>&1 | FileCheck %s\\n+\\n+; CHECK: error: Invalid record\"}, {\"sha\": \"8ff7e39649cc0db9239f78e442ed91e69bf92daf\", \"filename\": \"llvm/test/Bitcode/invalid-record-strtab.ll.bc\", \"status\": \"added\", \"additions\": 0, \"deletions\": 0, \"changes\": 0, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll.bc\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/34cccdaed7e7952a9191231ffa62b1b22eac35c8/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll.bc\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FBitcode%2Finvalid-record-strtab.ll.bc?ref=34cccdaed7e7952a9191231ffa62b1b22eac35c8\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8xNjA1NTkzNDQwMjY4MjRlZTBiNTEwNzQxYzc5MDZjMGUxNjVmOWE3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/160559344026824ee0b510741c7906c0e165f9a7", "content": "{\"sha\": \"160559344026824ee0b510741c7906c0e165f9a7\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MTYwNTU5MzQ0MDI2ODI0ZWUwYjUxMDc0MWM3OTA2YzBlMTY1ZjlhNw==\", \"commit\": {\"author\": {\"name\": \"Juneyoung Lee\", \"email\": \"aqjune@gmail.com\", \"date\": \"2021-06-25T08:56:10Z\"}, \"committer\": {\"name\": \"Juneyoung Lee\", \"email\": \"aqjune@gmail.com\", \"date\": \"2021-06-25T20:59:35Z\"}, \"message\": \"[SimplifyLibCalls] Fix memchr opt to use CreateLogicalAnd\\n\\nThis fixes a bug at LibCallSimplifier::optimizeMemChr which does the following transformation:\\n\\n```\\n// memchr(\\\"\\\\r\\\\n\\\", C, 2) != nullptr -> (1 << C & ((1 << '\\\\r') | (1 << '\\\\n')))\\n// != 0\\n//   after bounds check.\\n```\\n\\nAs written above, a bounds check on C (whether it is less than integer bitwidth) is done before doing `1 << C` otherwise 1 << C will overflow.\\nIf the bounds check is false, the result of (1 << C & ...) must not be used at all, otherwise the result of shift (which is poison) will contaminate the whole results.\\nA correct way to encode this is `select i1 (bounds check), (1 << C & ...), false`  because select does not allow the unused operand to contaminate the result.\\nHowever, this optimization was introducing `and (bounds check), (1 << C & ...)` which cannot do that.\\n\\nThe bug was found from compilation of this C++ code: https://reviews.llvm.org/rG2fd3037ac615#1007197\\n\\nReviewed By: nikic\\n\\nDifferential Revision: https://reviews.llvm.org/D104901\", \"tree\": {\"sha\": \"1f1f1a91849966d3b1336fd4357892cd99569e84\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/1f1f1a91849966d3b1336fd4357892cd99569e84\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/160559344026824ee0b510741c7906c0e165f9a7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/160559344026824ee0b510741c7906c0e165f9a7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/160559344026824ee0b510741c7906c0e165f9a7\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/160559344026824ee0b510741c7906c0e165f9a7/comments\", \"author\": {\"login\": \"aqjune\", \"id\": 6484889, \"node_id\": \"MDQ6VXNlcjY0ODQ4ODk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6484889?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aqjune\", \"html_url\": \"https://github.com/aqjune\", \"followers_url\": \"https://api.github.com/users/aqjune/followers\", \"following_url\": \"https://api.github.com/users/aqjune/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aqjune/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aqjune/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aqjune/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aqjune/orgs\", \"repos_url\": \"https://api.github.com/users/aqjune/repos\", \"events_url\": \"https://api.github.com/users/aqjune/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aqjune/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"aqjune\", \"id\": 6484889, \"node_id\": \"MDQ6VXNlcjY0ODQ4ODk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6484889?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aqjune\", \"html_url\": \"https://github.com/aqjune\", \"followers_url\": \"https://api.github.com/users/aqjune/followers\", \"following_url\": \"https://api.github.com/users/aqjune/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aqjune/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aqjune/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aqjune/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aqjune/orgs\", \"repos_url\": \"https://api.github.com/users/aqjune/repos\", \"events_url\": \"https://api.github.com/users/aqjune/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aqjune/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5ccb7424fab3bc8bf6cb2ced989cbd86ec8ccff6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5ccb7424fab3bc8bf6cb2ced989cbd86ec8ccff6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5ccb7424fab3bc8bf6cb2ced989cbd86ec8ccff6\"}], \"stats\": {\"total\": 9, \"additions\": 5, \"deletions\": 4}, \"files\": [{\"sha\": \"0f8c4b8b5ae283c70059651601404f505e5998dd\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyLibCalls.cpp?ref=160559344026824ee0b510741c7906c0e165f9a7\", \"patch\": \"@@ -933,7 +933,8 @@ Value *LibCallSimplifier::optimizeMemChr(CallInst *CI, IRBuilderBase &B) {\\n \\n     // Finally merge both checks and cast to pointer type. The inttoptr\\n     // implicitly zexts the i1 to intptr type.\\n-    return B.CreateIntToPtr(B.CreateAnd(Bounds, Bits, \\\"memchr\\\"), CI->getType());\\n+    return B.CreateIntToPtr(B.CreateLogicalAnd(Bounds, Bits, \\\"memchr\\\"),\\n+                            CI->getType());\\n   }\\n \\n   // Check if all arguments are constants.  If so, we can constant fold.\"}, {\"sha\": \"f3659882c98a821e4ab29e4e5cd370b3696627cd\", \"filename\": \"llvm/test/Transforms/InstCombine/memchr.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fmemchr.ll?ref=160559344026824ee0b510741c7906c0e165f9a7\", \"patch\": \"@@ -137,7 +137,7 @@ define i1 @test11(i32 %C) {\\n ; CHECK-NEXT:    [[TMP3:%.*]] = shl i16 1, [[TMP2]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = and i16 [[TMP3]], 9216\\n ; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i16 [[TMP4]], 0\\n-; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR_BOUNDS]], [[MEMCHR_BITS]]\\n+; CHECK-NEXT:    [[MEMCHR:%.*]] = select i1 [[MEMCHR_BOUNDS]], i1 [[MEMCHR_BITS]], i1 false\\n ; CHECK-NEXT:    ret i1 [[MEMCHR]]\\n ;\\n   %dst = call i8* @memchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @newlines, i64 0, i64 0), i32 %C, i32 2)\\n@@ -164,7 +164,7 @@ define i1 @test13(i32 %C) {\\n ; CHECK-NEXT:    [[TMP2:%.*]] = shl i32 1, [[TMP1]]\\n ; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP2]], -2147483647\\n ; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i32 [[TMP3]], 0\\n-; CHECK-NEXT:    [[MEMCHR:%.*]] = and i1 [[MEMCHR_BOUNDS]], [[MEMCHR_BITS]]\\n+; CHECK-NEXT:    [[MEMCHR:%.*]] = select i1 [[MEMCHR_BOUNDS]], i1 [[MEMCHR_BITS]], i1 false\\n ; CHECK-NEXT:    ret i1 [[MEMCHR]]\\n ;\\n   %dst = call i8* @memchr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @single, i64 0, i64 0), i32 %C, i32 2)\"}, {\"sha\": \"ad924761fa58e42b539666ae3cb9916782075c85\", \"filename\": \"llvm/test/Transforms/InstCombine/strchr-1.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/160559344026824ee0b510741c7906c0e165f9a7/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fstrchr-1.ll?ref=160559344026824ee0b510741c7906c0e165f9a7\", \"patch\": \"@@ -95,7 +95,7 @@ define i1 @test_simplify7(i32 %C) {\\n ; CHECK-NEXT:    [[TMP3:%.*]] = shl i16 1, [[TMP2]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = and i16 [[TMP3]], 9217\\n ; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i16 [[TMP4]], 0\\n-; CHECK-NEXT:    [[MEMCHR1:%.*]] = and i1 [[MEMCHR_BOUNDS]], [[MEMCHR_BITS]]\\n+; CHECK-NEXT:    [[MEMCHR1:%.*]] = select i1 [[MEMCHR_BOUNDS]], i1 [[MEMCHR_BITS]], i1 false\\n ; CHECK-NEXT:    ret i1 [[MEMCHR1]]\\n ;\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85ZWI2MTNiMmRlMzE2MzY4NmIxYTRiZDExNjBmMTVhYzU2YTRiMDgzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/9eb613b2de3163686b1a4bd1160f15ac56a4b083", "content": "{\"sha\": \"9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6OWViNjEzYjJkZTMxNjM2ODZiMWE0YmQxMTYwZjE1YWM1NmE0YjA4Mw==\", \"commit\": {\"author\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2021-07-01T21:30:04Z\"}, \"committer\": {\"name\": \"Sanjay Patel\", \"email\": \"spatel@rotateright.com\", \"date\": \"2021-07-01T21:40:07Z\"}, \"message\": \"[InstSimplify] do not propagate poison from select arm to icmp user\\n\\nThis is the cause of the miscompile in:\\nhttps://llvm.org/PR50944\\n\\nThe problem has likely existed for some time, but it was made visible with:\\n5af8bacc94024 ( D104661 )\\nhandleOtherCmpSelSimplifications() assumed it can convert select of\\nconstants to bool logic ops, but that does not work with poison.\\nWe had a very similar construct in InstCombine, so the fix here\\nmimics the fix there.\\n\\nThe bug is in instsimplify, but I'm not sure how to reproduce it outside of\\ninstcombine. The reason this is visible in instcombine is because we have a\\nhack (FIXME) to bypass simplification of a select when it has an icmp user:\\nhttps://github.com/llvm/llvm-project/blob/955f12589940634acc6c9901e8b25534808f691c/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp#L2632\\n\\nSo we get to an unusual case where we are trying to simplify an instruction\\nthat has an operand that would have already simplified if we had processed\\nit in normal order.\\n\\nDifferential Revision: https://reviews.llvm.org/D105298\", \"tree\": {\"sha\": \"ef21e8f8eefd510563d00690c2b70e1613ff25ad\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/ef21e8f8eefd510563d00690c2b70e1613ff25ad\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9eb613b2de3163686b1a4bd1160f15ac56a4b083/comments\", \"author\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rotateright\", \"id\": 18010834, \"node_id\": \"MDQ6VXNlcjE4MDEwODM0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/18010834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rotateright\", \"html_url\": \"https://github.com/rotateright\", \"followers_url\": \"https://api.github.com/users/rotateright/followers\", \"following_url\": \"https://api.github.com/users/rotateright/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rotateright/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rotateright/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rotateright/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rotateright/orgs\", \"repos_url\": \"https://api.github.com/users/rotateright/repos\", \"events_url\": \"https://api.github.com/users/rotateright/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rotateright/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"09e3bf01b3da978b5437bf84c0b0f290974d8743\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/09e3bf01b3da978b5437bf84c0b0f290974d8743\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/09e3bf01b3da978b5437bf84c0b0f290974d8743\"}], \"stats\": {\"total\": 11, \"additions\": 7, \"deletions\": 4}, \"files\": [{\"sha\": \"f713d5317b8cf5b35c1955a0e6b887474586cab2\", \"filename\": \"llvm/lib/Analysis/InstructionSimplify.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9eb613b2de3163686b1a4bd1160f15ac56a4b083/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9eb613b2de3163686b1a4bd1160f15ac56a4b083/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FInstructionSimplify.cpp?ref=9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"patch\": \"@@ -189,12 +189,15 @@ static Value *handleOtherCmpSelSimplifications(Value *TCmp, Value *FCmp,\\n   // If the false value simplified to false, then the result of the compare\\n   // is equal to \\\"Cond && TCmp\\\".  This also catches the case when the false\\n   // value simplified to false and the true value to true, returning \\\"Cond\\\".\\n-  if (match(FCmp, m_Zero()))\\n+  // Folding select to and/or isn't poison-safe in general; impliesPoison\\n+  // checks whether folding it does not convert a well-defined value into\\n+  // poison.\\n+  if (match(FCmp, m_Zero()) && impliesPoison(TCmp, Cond))\\n     if (Value *V = SimplifyAndInst(Cond, TCmp, Q, MaxRecurse))\\n       return V;\\n   // If the true value simplified to true, then the result of the compare\\n   // is equal to \\\"Cond || FCmp\\\".\\n-  if (match(TCmp, m_One()))\\n+  if (match(TCmp, m_One()) && impliesPoison(FCmp, Cond))\\n     if (Value *V = SimplifyOrInst(Cond, FCmp, Q, MaxRecurse))\\n       return V;\\n   // Finally, if the false value simplified to true and the true value to\"}, {\"sha\": \"c64f2ac54cd15db9503abb3e21ded9eebd35d3cc\", \"filename\": \"llvm/test/Transforms/InstCombine/icmp.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9eb613b2de3163686b1a4bd1160f15ac56a4b083/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9eb613b2de3163686b1a4bd1160f15ac56a4b083/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ficmp.ll?ref=9eb613b2de3163686b1a4bd1160f15ac56a4b083\", \"patch\": \"@@ -3935,7 +3935,7 @@ bb:\\n \\n define i1 @thread_cmp_over_select_with_poison_trueval(i1 %b) {\\n ; CHECK-LABEL: @thread_cmp_over_select_with_poison_trueval(\\n-; CHECK-NEXT:    ret i1 poison\\n+; CHECK-NEXT:    ret i1 false\\n ;\\n   %s = select i1 %b, i32 poison, i32 0\\n   %tobool = icmp ne i32 %s, 0\\n@@ -3944,7 +3944,7 @@ define i1 @thread_cmp_over_select_with_poison_trueval(i1 %b) {\\n \\n define i1 @thread_cmp_over_select_with_poison_falseval(i1 %b) {\\n ; CHECK-LABEL: @thread_cmp_over_select_with_poison_falseval(\\n-; CHECK-NEXT:    ret i1 poison\\n+; CHECK-NEXT:    ret i1 true\\n ;\\n   %s = select i1 %b, i32 1, i32 poison\\n   %tobool = icmp ne i32 %s, 0\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yNTJhMWVlY2MwNDA4MGQ4NTJiYTU4YzY3Mjc5NzBjNjg4ZWIxNjE5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/252a1eecc04080d852ba58c6727970c688eb1619", "content": "{\"sha\": \"252a1eecc04080d852ba58c6727970c688eb1619\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MjUyYTFlZWNjMDQwODBkODUyYmE1OGM2NzI3OTcwYzY4OGViMTYxOQ==\", \"commit\": {\"author\": {\"name\": \"Fangrui Song\", \"email\": \"i@maskray.me\", \"date\": \"2021-07-03T00:08:25Z\"}, \"committer\": {\"name\": \"Fangrui Song\", \"email\": \"i@maskray.me\", \"date\": \"2021-07-03T00:08:25Z\"}, \"message\": \"[ThinLTO] Respect ClearDSOLocalOnDeclarations for unimported functions\\n\\nD74751 added `ClearDSOLocalOnDeclarations` and dropped dso_local for\\nisDeclarationForLinker `GlobalValue`s. It missed a case for imported\\ndeclarations (`doImportAsDefinition` is false while `isPerformingImport` is\\ntrue). This can lead to a linker error for a default visibility symbol in\\n`ld.lld -shared`.\\n\\nWhen `ClearDSOLocalOnDeclarations` is true, we check\\n`isPerformingImport() && !doImportAsDefinition(&GV)` along with\\n`GV.isDeclarationForLinker()`. The new condition checks an imported declaration.\\n\\nThis patch fixes a `LLVMPolly.so` link error using a trunk clang -DLLVM_ENABLE_LTO=Thin.\\n\\nReviewed By: tejohnson\\n\\nDifferential Revision: https://reviews.llvm.org/D104986\", \"tree\": {\"sha\": \"8d098ebec0f70387376722a7e26a129ad0447475\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/8d098ebec0f70387376722a7e26a129ad0447475\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/252a1eecc04080d852ba58c6727970c688eb1619\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/252a1eecc04080d852ba58c6727970c688eb1619\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/252a1eecc04080d852ba58c6727970c688eb1619\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/252a1eecc04080d852ba58c6727970c688eb1619/comments\", \"author\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6b0d266036f73f5ee9556d211a7d0946091ff3b2\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6b0d266036f73f5ee9556d211a7d0946091ff3b2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6b0d266036f73f5ee9556d211a7d0946091ff3b2\"}], \"stats\": {\"total\": 130, \"additions\": 128, \"deletions\": 2}, \"files\": [{\"sha\": \"2946c0018c31f96b077b75e7f329808a9c79052a\", \"filename\": \"llvm/lib/Transforms/Utils/FunctionImportUtils.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FFunctionImportUtils.cpp?ref=252a1eecc04080d852ba58c6727970c688eb1619\", \"patch\": \"@@ -276,7 +276,9 @@ void FunctionImportGlobalProcessing::processGlobalForThinLTO(GlobalValue &GV) {\\n   // When ClearDSOLocalOnDeclarations is true, clear dso_local if GV is\\n   // converted to a declaration, to disable direct access. Don't do this if GV\\n   // is implicitly dso_local due to a non-default visibility.\\n-  if (ClearDSOLocalOnDeclarations && GV.isDeclarationForLinker() &&\\n+  if (ClearDSOLocalOnDeclarations &&\\n+      (GV.isDeclarationForLinker() ||\\n+       (isPerformingImport() && !doImportAsDefinition(&GV))) &&\\n       !GV.isImplicitDSOLocal()) {\\n     GV.setDSOLocal(false);\\n   } else if (VI && VI.isDSOLocal(ImportIndex.withDSOLocalPropagation())) {\"}, {\"sha\": \"11d41e70e19b64b7eb10697e98607b41a98d29c3\", \"filename\": \"llvm/test/ThinLTO/X86/import-dsolocal.ll\", \"status\": \"added\", \"additions\": 124, \"deletions\": 0, \"changes\": 124, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Ftest%2FThinLTO%2FX86%2Fimport-dsolocal.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Ftest%2FThinLTO%2FX86%2Fimport-dsolocal.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Fimport-dsolocal.ll?ref=252a1eecc04080d852ba58c6727970c688eb1619\", \"patch\": \"@@ -0,0 +1,124 @@\\n+; RUN: split-file %s %t\\n+; RUN: opt -module-summary %t/a.ll -o %t/a.bc\\n+; RUN: opt -module-summary %t/b.ll -o %t/b.bc\\n+\\n+;; With a small limit, *_aux are either imported declarations (external/linkonce_odr/weak_odr)\\n+;; or unimported (linkonce/weak). Check we discard dso_local.\\n+; RUN: llvm-lto2 run %t/a.bc %t/b.bc -o %t1 -save-temps -import-instr-limit=3 \\\\\\n+; RUN:   -r=%t/a.bc,main,plx -r=%t/a.bc,extern, -r=%t/a.bc,linkonce, -r=%t/a.bc,linkonceodr, -r=%t/a.bc,weak, -r=%t/a.bc,weakodr, \\\\\\n+; RUN:   -r=%t/b.bc,a,pl -r=%t/b.bc,b,pl -r=%t/b.bc,extern,pl -r=%t/b.bc,extern_aux,pl \\\\\\n+; RUN:   -r=%t/b.bc,linkonce,pl -r=%t/b.bc,linkonce_aux,pl -r=%t/b.bc,linkonceodr,pl -r=%t/b.bc,linkonceodr_aux,pl \\\\\\n+; RUN:   -r=%t/b.bc,weak,pl -r=%t/b.bc,weak_aux,pl -r=%t/b.bc,weakodr,pl -r=%t/b.bc,weakodr_aux,pl\\n+; RUN: llvm-dis %t1.1.3.import.bc -o - | FileCheck %s --check-prefixes=DEST,DEST1\\n+\\n+;; With a large limit, *_aux are either imported definitions (external/linkonce_odr/weak_odr)\\n+;; or unimported (linkonce/weak). Check we discard dso_local as well.\\n+; RUN: llvm-lto2 run %t/a.bc %t/b.bc -o %t2 -save-temps -import-instr-limit=10 \\\\\\n+; RUN:   -r=%t/a.bc,main,plx -r=%t/a.bc,extern, -r=%t/a.bc,linkonce, -r=%t/a.bc,linkonceodr, -r=%t/a.bc,weak, -r=%t/a.bc,weakodr, \\\\\\n+; RUN:   -r=%t/b.bc,a,pl -r=%t/b.bc,b,pl -r=%t/b.bc,extern,pl -r=%t/b.bc,extern_aux,pl \\\\\\n+; RUN:   -r=%t/b.bc,linkonce,pl -r=%t/b.bc,linkonce_aux,pl -r=%t/b.bc,linkonceodr,pl -r=%t/b.bc,linkonceodr_aux,pl \\\\\\n+; RUN:   -r=%t/b.bc,weak,pl -r=%t/b.bc,weak_aux,pl -r=%t/b.bc,weakodr,pl -r=%t/b.bc,weakodr_aux,pl\\n+; RUN: llvm-dis %t2.1.3.import.bc -o - | FileCheck %s --check-prefixes=DEST,DEST2\\n+\\n+; DEST:      @a = available_externally global i32 42, align 4\\n+; DEST-NEXT: @b = external global i32*, align 8\\n+; DEST:      declare void @linkonce()\\n+; DEST:      declare void @weak()\\n+; DEST:      define dso_local i32 @main()\\n+; DEST:      define available_externally void @extern()\\n+\\n+; DEST1:     declare i32 @extern_aux(i32*, i32**)\\n+; DEST1:     declare i32 @linkonceodr_aux(i32*, i32**)\\n+; DEST2:     define available_externally i32 @extern_aux(i32* %a, i32** %b)\\n+; DEST2:     define available_externally i32 @linkonceodr_aux(i32* %a, i32** %b)\\n+\\n+; DEST:      define available_externally void @weakodr()\\n+\\n+; DEST1:     declare i32 @weakodr_aux(i32*, i32**)\\n+; DEST2:     define available_externally i32 @weakodr_aux(i32* %a, i32** %b)\\n+\\n+;--- a.ll\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+declare void @extern()\\n+declare void @linkonce()\\n+declare void @linkonceodr()\\n+declare void @weak()\\n+declare void @weakodr()\\n+\\n+define i32 @main() {\\n+  call void @extern()\\n+  call void @linkonce()\\n+  call void @linkonceodr()\\n+  call void @weak()\\n+  call void @weakodr()\\n+  ret i32 0\\n+}\\n+\\n+;--- b.ll\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+@a = dso_local global i32 42, align 4\\n+@b = dso_local global i32* @a, align 8\\n+\\n+define dso_local void @extern() {\\n+  call i32 @extern_aux(i32* @a, i32** @b)\\n+  ret void\\n+}\\n+\\n+define dso_local i32 @extern_aux(i32* %a, i32** %b) {\\n+  %p = load i32*, i32** %b, align 8\\n+  store i32 33, i32* %p, align 4\\n+  %v = load i32, i32* %a, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define linkonce dso_local void @linkonce() {\\n+  call i32 @linkonce_aux(i32* @a, i32** @b)\\n+  ret void\\n+}\\n+\\n+define linkonce i32 @linkonce_aux(i32* %a, i32** %b) {\\n+  %p = load i32*, i32** %b, align 8\\n+  store i32 33, i32* %p, align 4\\n+  %v = load i32, i32* %a, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define linkonce_odr dso_local void @linkonceodr() {\\n+  call i32 @linkonceodr_aux(i32* @a, i32** @b)\\n+  ret void\\n+}\\n+\\n+define linkonce_odr i32 @linkonceodr_aux(i32* %a, i32** %b) {\\n+  %p = load i32*, i32** %b, align 8\\n+  store i32 33, i32* %p, align 4\\n+  %v = load i32, i32* %a, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define weak dso_local void @weak() {\\n+  call i32 @weak_aux(i32* @a, i32** @b)\\n+  ret void\\n+}\\n+\\n+define weak i32 @weak_aux(i32* %a, i32** %b) {\\n+  %p = load i32*, i32** %b, align 8\\n+  store i32 33, i32* %p, align 4\\n+  %v = load i32, i32* %a, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define weak_odr dso_local void @weakodr() {\\n+  call i32 @weakodr_aux(i32* @a, i32** @b)\\n+  ret void\\n+}\\n+\\n+define weak_odr i32 @weakodr_aux(i32* %a, i32** %b) {\\n+  %p = load i32*, i32** %b, align 8\\n+  store i32 33, i32* %p, align 4\\n+  %v = load i32, i32* %a, align 4\\n+  ret i32 %v\\n+}\"}, {\"sha\": \"80f3f11e2c543211dc34f4ef66f1851b25f3e6dc\", \"filename\": \"llvm/test/ThinLTO/X86/index-const-prop-linkage.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop-linkage.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/252a1eecc04080d852ba58c6727970c688eb1619/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop-linkage.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FThinLTO%2FX86%2Findex-const-prop-linkage.ll?ref=252a1eecc04080d852ba58c6727970c688eb1619\", \"patch\": \"@@ -10,7 +10,7 @@\\n ; - available_externally linkage\\n ; - reference from @llvm.used\\n ; CHECK:      @llvm.used = appending global [1 x i32*] [i32* @g2]\\n-; CHECK-NEXT: @g1 = external dso_local global i32, align 4\\n+; CHECK-NEXT: @g1 = external global i32, align 4\\n ; CHECK-NEXT: @g2 = available_externally global i32 42, align 4\\n ; CHECK-NEXT: @g3 = available_externally global i32 42, align 4\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yNzAyZmIxMTQ4NGE2ZjVkOTljNzEyYTBlOTJjMjIxMjg4OTU1YzU2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/2702fb11484a6f5d99c712a0e92c221288955c56", "content": "{\"sha\": \"2702fb11484a6f5d99c712a0e92c221288955c56\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MjcwMmZiMTE0ODRhNmY1ZDk5YzcxMmEwZTkyYzIyMTI4ODk1NWM1Ng==\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-08-13T12:35:01Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2021-08-13T12:45:03Z\"}, \"message\": \"[SimplifyCFG] Restart if `removeUndefIntroducingPredecessor()` made changes\\n\\nIt might changed the condition of a branch into a constant,\\nso we should restart and constant-fold terminator,\\ninstead of continuing with the tautological \\\"conditional\\\" branch.\\nThis fixes the issue reported at https://reviews.llvm.org/rGf30a7dff8a5b32919951dcbf92e4a9d56c4679ff\", \"tree\": {\"sha\": \"9e2cbd987a53d3b362bf50ce9ace68ffe3e8f188\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/9e2cbd987a53d3b362bf50ce9ace68ffe3e8f188\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/2702fb11484a6f5d99c712a0e92c221288955c56\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAmEWaU8ACgkQCDw+u0oW\\nieBtcRAAnNAOuNWpAfLKFqxxPFv48mn6hM2OD34hHrdGmysrFLVqypSsU5N+o35R\\n6mfrvp0/5Ex8TUkxWYHngZZrCv/flDm+8l12rjfjbrE0aSRUe0SasaKm652LJLfM\\neMyXRcdTf/lu/Sus5vGkTM58eTNSMFlzrNDB3Ctvn8+aXz/iqGQnhNub6xK8UFsD\\nqE3sJbud8CakZhlwYRW1srJdifMa39l0zlI2XEcjHHFE+4JtvMAUOr3YgNixofQO\\nE9aMOHuP3iPux4U1zXoQ92Kg1gy68Lta7t9XvCVUYkXhc1SGBW2GIM5G4hWmUu89\\nC35HEpnAF8rYJAQ+tmqtdIR0gg4Bsb6rO3FI48iI2NojL6RqSz7Z9FCuTX8kJW9e\\ngns5PG+CG2VEjuWXvbhRpOpNTbvwVlFcGn8wXOQCJBzMRokPMbmhqbVTBxQ9ECel\\ngqQT3pASFhJ9KxeIQ1oA68UK4gBzdR4fx/+RFMaPkm0Dr9n9EWvMBF10f/MLfq1p\\nzERVITypCiIVUt5nkZheQjkPuxcVNQE/pg2YoVm5EuFBvzqpExFRbO8+4Yni3L/g\\nbi3/+HUUa3Gom9Etoi9CJPF8iBqaL73Uax8TJJc+QCLCptx/I4eW+t6JnzAfv8rl\\nqNZFq08hBj3VGKlDnzFWgUIb7A9OMfB5moRlRLQLEBQFO0fcS0g=\\n=EpVH\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree 9e2cbd987a53d3b362bf50ce9ace68ffe3e8f188\\nparent cb7c01889ec21accc12b2c19a395b521e3b959a3\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1628858101 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1628858703 +0300\\n\\n[SimplifyCFG] Restart if `removeUndefIntroducingPredecessor()` made changes\\n\\nIt might changed the condition of a branch into a constant,\\nso we should restart and constant-fold terminator,\\ninstead of continuing with the tautological \\\"conditional\\\" branch.\\nThis fixes the issue reported at https://reviews.llvm.org/rGf30a7dff8a5b32919951dcbf92e4a9d56c4679ff\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2702fb11484a6f5d99c712a0e92c221288955c56\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2702fb11484a6f5d99c712a0e92c221288955c56\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2702fb11484a6f5d99c712a0e92c221288955c56/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cb7c01889ec21accc12b2c19a395b521e3b959a3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cb7c01889ec21accc12b2c19a395b521e3b959a3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cb7c01889ec21accc12b2c19a395b521e3b959a3\"}], \"stats\": {\"total\": 6, \"additions\": 3, \"deletions\": 3}, \"files\": [{\"sha\": \"c9d4641fd6ddd75f647d97815fcde6195a870b8f\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyCFG.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2702fb11484a6f5d99c712a0e92c221288955c56/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2702fb11484a6f5d99c712a0e92c221288955c56/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyCFG.cpp?ref=2702fb11484a6f5d99c712a0e92c221288955c56\", \"patch\": \"@@ -6634,7 +6634,8 @@ bool SimplifyCFGOpt::simplifyOnceImpl(BasicBlock *BB) {\\n   Changed |= EliminateDuplicatePHINodes(BB);\\n \\n   // Check for and remove branches that will always cause undefined behavior.\\n-  Changed |= removeUndefIntroducingPredecessor(BB, DTU);\\n+  if (removeUndefIntroducingPredecessor(BB, DTU))\\n+    return requestResimplify();\\n \\n   // Merge basic blocks into their predecessor if there is only one distinct\\n   // pred, and if there is only one distinct successor of the predecessor, and\"}, {\"sha\": \"912598197080e699a1734ea6aed7d987b976e643\", \"filename\": \"llvm/test/Transforms/SimplifyCFG/tautological-conditional-branch.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2702fb11484a6f5d99c712a0e92c221288955c56/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ftautological-conditional-branch.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2702fb11484a6f5d99c712a0e92c221288955c56/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ftautological-conditional-branch.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimplifyCFG%2Ftautological-conditional-branch.ll?ref=2702fb11484a6f5d99c712a0e92c221288955c56\", \"patch\": \"@@ -15,8 +15,7 @@ define void @eggs(i1 %arg, i1 %arg16, %0* %arg17, %0* %arg18, %0* %arg19) {\\n ; CHECK:       bb21:\\n ; CHECK-NEXT:    [[I:%.*]] = icmp eq %0* [[ARG17:%.*]], null\\n ; CHECK-NEXT:    call void @hoge()\\n-; CHECK-NEXT:    [[I26:%.*]] = select i1 [[ARG16:%.*]], %0* null, %0* [[ARG19:%.*]]\\n-; CHECK-NEXT:    [[I27:%.*]] = getelementptr inbounds [[TMP0:%.*]], %0* [[I26]], i64 0, i32 0\\n+; CHECK-NEXT:    [[I27:%.*]] = getelementptr inbounds [[TMP0:%.*]], %0* [[ARG19:%.*]], i64 0, i32 0\\n ; CHECK-NEXT:    [[I28:%.*]] = load %1*, %1** [[I27]], align 8\\n ; CHECK-NEXT:    call void @pluto.1(%1* [[I28]])\\n ; CHECK-NEXT:    call void @pluto()\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lYTg1MzkxMTFkNDQ0ZmZiOTNhYjA5YzU4NjVkOWExYTA5MjdjYjJjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ea8539111d444ffb93ab09c5865d9a1a0927cb2c", "content": "{\"sha\": \"ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6ZWE4NTM5MTExZDQ0NGZmYjkzYWIwOWM1ODY1ZDlhMWEwOTI3Y2IyYw==\", \"commit\": {\"author\": {\"name\": \"Keno Fischer\", \"email\": \"keno@juliacomputing.com\", \"date\": \"2021-08-19T18:31:39Z\"}, \"committer\": {\"name\": \"Jameson Nash\", \"email\": \"vtjnash@gmail.com\", \"date\": \"2021-08-30T21:26:57Z\"}, \"message\": \"[COFF] Force Symbols containing '.' to be quoted\\n\\nIn D87099, the mangler learned to quote export directives that contain\\nspecial characters. Only alhpanumerical characters as well as\\n'_', '$', '.' and '@' were exmpt from this quoting. However, at least\\nbinutils considers an unquoted '.' to be syntax and object files\\ncontaining such symbols will cause errors during linking. Fix that\\nby removing '.' from the list of allowed exemptions.\\n\\nDifferential Revision: https://reviews.llvm.org/D100359\", \"tree\": {\"sha\": \"f0369a46612a8caab762a4fa108ba1a3c36004a8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f0369a46612a8caab762a4fa108ba1a3c36004a8\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ea8539111d444ffb93ab09c5865d9a1a0927cb2c/comments\", \"author\": {\"login\": \"Keno\", \"id\": 1291671, \"node_id\": \"MDQ6VXNlcjEyOTE2NzE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1291671?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Keno\", \"html_url\": \"https://github.com/Keno\", \"followers_url\": \"https://api.github.com/users/Keno/followers\", \"following_url\": \"https://api.github.com/users/Keno/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Keno/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Keno/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Keno/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Keno/orgs\", \"repos_url\": \"https://api.github.com/users/Keno/repos\", \"events_url\": \"https://api.github.com/users/Keno/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Keno/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vtjnash\", \"id\": 330950, \"node_id\": \"MDQ6VXNlcjMzMDk1MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/330950?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vtjnash\", \"html_url\": \"https://github.com/vtjnash\", \"followers_url\": \"https://api.github.com/users/vtjnash/followers\", \"following_url\": \"https://api.github.com/users/vtjnash/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vtjnash/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vtjnash/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vtjnash/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vtjnash/orgs\", \"repos_url\": \"https://api.github.com/users/vtjnash/repos\", \"events_url\": \"https://api.github.com/users/vtjnash/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vtjnash/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"30dfd3449e45ac371012c6e46c77ab9089496d4e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/30dfd3449e45ac371012c6e46c77ab9089496d4e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/30dfd3449e45ac371012c6e46c77ab9089496d4e\"}], \"stats\": {\"total\": 7, \"additions\": 6, \"deletions\": 1}, \"files\": [{\"sha\": \"db833e3c668ff99e0d211109825ebb67a163a821\", \"filename\": \"llvm/lib/IR/Mangler.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea8539111d444ffb93ab09c5865d9a1a0927cb2c/llvm%2Flib%2FIR%2FMangler.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea8539111d444ffb93ab09c5865d9a1a0927cb2c/llvm%2Flib%2FIR%2FMangler.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FMangler.cpp?ref=ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"patch\": \"@@ -186,7 +186,7 @@ void Mangler::getNameWithPrefix(SmallVectorImpl<char> &OutName,\\n \\n // Check if the name needs quotes to be safe for the linker to interpret.\\n static bool canBeUnquotedInDirective(char C) {\\n-  return isAlnum(C) || C == '_' || C == '$' || C == '.' || C == '@';\\n+  return isAlnum(C) || C == '_' || C == '@';\\n }\\n \\n static bool canBeUnquotedInDirective(StringRef Name) {\"}, {\"sha\": \"043b18067574c7e682c8a3b6d25688e8958f47bf\", \"filename\": \"llvm/test/CodeGen/X86/dllexport.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ea8539111d444ffb93ab09c5865d9a1a0927cb2c/llvm%2Ftest%2FCodeGen%2FX86%2Fdllexport.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ea8539111d444ffb93ab09c5865d9a1a0927cb2c/llvm%2Ftest%2FCodeGen%2FX86%2Fdllexport.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fdllexport.ll?ref=ea8539111d444ffb93ab09c5865d9a1a0927cb2c\", \"patch\": \"@@ -84,6 +84,9 @@ define weak_odr dllexport void @weak1() {\\n ; CHECK: .globl \\\"_complex-name\\\"\\n @\\\"complex-name\\\" = dllexport global i32 1, align 4\\n \\n+; CHECK: .globl _complex.name\\n+@\\\"complex.name\\\" = dllexport global i32 1, align 4\\n+\\n \\n ; Verify items that should not be exported do not appear in the export table.\\n ; We use a separate check prefix to avoid confusion between -NOT and -SAME.\\n@@ -106,6 +109,7 @@ define weak_odr dllexport void @weak1() {\\n ; CHECK-CL: .ascii \\\" /EXPORT:_WeakVar1,DATA\\\"\\n ; CHECK-CL: .ascii \\\" /EXPORT:_WeakVar2,DATA\\\"\\n ; CHECK-CL: .ascii \\\" /EXPORT:\\\\\\\"_complex-name\\\\\\\",DATA\\\"\\n+; CHECK-CL: .ascii \\\" /EXPORT:\\\\\\\"_complex.name\\\\\\\",DATA\\\"\\n ; CHECK-CL: .ascii \\\" /EXPORT:_alias\\\"\\n ; CHECK-CL: .ascii \\\" /EXPORT:_alias2\\\"\\n ; CHECK-CL: .ascii \\\" /EXPORT:_alias3\\\"\\n@@ -124,6 +128,7 @@ define weak_odr dllexport void @weak1() {\\n ; CHECK-GCC: .ascii \\\" -export:WeakVar1,data\\\"\\n ; CHECK-GCC: .ascii \\\" -export:WeakVar2,data\\\"\\n ; CHECK-GCC: .ascii \\\" -export:\\\\\\\"complex-name\\\\\\\",data\\\"\\n+; CHECK-GCC: .ascii \\\" -export:\\\\\\\"complex.name\\\\\\\",data\\\"\\n ; CHECK-GCC: .ascii \\\" -export:alias\\\"\\n ; CHECK-GCC: .ascii \\\" -export:alias2\\\"\\n ; CHECK-GCC: .ascii \\\" -export:alias3\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8zMDc4OTBmODViMzNiYzE5MGI1NjNiY2IzZGFlYjIzMmI4ZWNhYTczIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/307890f85b33bc190b563bcb3daeb232b8ecaa73", "content": "{\"sha\": \"307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6MzA3ODkwZjg1YjMzYmMxOTBiNTYzYmNiM2RhZWIyMzJiOGVjYWE3Mw==\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2021-08-24T15:08:09Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2021-08-24T15:08:24Z\"}, \"message\": \"[X86] Freeze vXi8 shl(x,1) -> add(x,x) vector fold (PR50468)\\n\\nWe don't have any vXi8 shift instructions (other than on XOP which is handled separately), so replace the shl(x,1) -> add(x,x) fold with shl(x,1) -> add(freeze(x),freeze(x)) to avoid the undef issues identified in PR50468.\\n\\nSplit off from D106675 as I'm still looking at whether we can fix the vXi16/i32/i64 issues with the D106679 alternative.\\n\\nDifferential Revision: https://reviews.llvm.org/D108139\", \"tree\": {\"sha\": \"c5a642ed79b910abb3a7f628f14dc505679b98c2\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/c5a642ed79b910abb3a7f628f14dc505679b98c2\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/307890f85b33bc190b563bcb3daeb232b8ecaa73/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a643bd3189aeee138187509a9bfec2f798798d76\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a643bd3189aeee138187509a9bfec2f798798d76\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a643bd3189aeee138187509a9bfec2f798798d76\"}], \"stats\": {\"total\": 945, \"additions\": 476, \"deletions\": 469}, \"files\": [{\"sha\": \"e691096692485cd8a8f9a1c22651ac2456515cb2\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 1, \"changes\": 9, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -28731,8 +28731,15 @@ static SDValue LowerScalarImmediateShift(SDValue Op, SelectionDAG &DAG,\\n     MVT ShiftVT = MVT::getVectorVT(MVT::i16, NumElts / 2);\\n \\n     // Simple i8 add case\\n-    if (Op.getOpcode() == ISD::SHL && ShiftAmt == 1)\\n+    if (Op.getOpcode() == ISD::SHL && ShiftAmt == 1) {\\n+      // R may be undef at run-time, but (shl R, 1) must be an even number (LSB\\n+      // must be 0). (add undef, undef) however can be any value. To make this\\n+      // safe, we must freeze R to ensure that register allocation uses the same\\n+      // register for an undefined value. This ensures that the result will\\n+      // still be even and preserves the original semantics.\\n+      R = DAG.getNode(ISD::FREEZE, dl, VT, R);\\n       return DAG.getNode(ISD::ADD, dl, VT, R, R);\\n+    }\\n \\n     // ashr(R, 7)  === cmp_slt(R, 0)\\n     if (Op.getOpcode() == ISD::SRA && ShiftAmt == 7) {\"}, {\"sha\": \"b1c4cbead6c1577b8241e40d1819a6f6530eaa0e\", \"filename\": \"llvm/test/CodeGen/X86/bitreverse.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fbitreverse.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fbitreverse.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fbitreverse.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -69,11 +69,11 @@ define <2 x i16> @test_bitreverse_v2i16(<2 x i16> %a) nounwind {\\n ; X64-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; X64-NEXT:    psrlw $2, %xmm0\\n ; X64-NEXT:    por %xmm1, %xmm0\\n-; X64-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; X64-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; X64-NEXT:    pand %xmm0, %xmm1\\n-; X64-NEXT:    paddb %xmm1, %xmm1\\n+; X64-NEXT:    psrlw $1, %xmm1\\n ; X64-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; X64-NEXT:    psrlw $1, %xmm0\\n+; X64-NEXT:    paddb %xmm0, %xmm0\\n ; X64-NEXT:    por %xmm1, %xmm0\\n ; X64-NEXT:    retq\\n ;\"}, {\"sha\": \"8c41f533fd6b25d2057ebdfe4f29ef85d72ff7a4\", \"filename\": \"llvm/test/CodeGen/X86/combine-bitreverse.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fcombine-bitreverse.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fcombine-bitreverse.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fcombine-bitreverse.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -61,11 +61,11 @@ define <4 x i32> @test_demandedbits_bitreverse(<4 x i32> %a0) nounwind {\\n ; X86-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n ; X86-NEXT:    psrlw $2, %xmm0\\n ; X86-NEXT:    por %xmm1, %xmm0\\n-; X86-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; X86-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; X86-NEXT:    pand %xmm0, %xmm1\\n-; X86-NEXT:    paddb %xmm1, %xmm1\\n+; X86-NEXT:    psrlw $1, %xmm1\\n ; X86-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n-; X86-NEXT:    psrlw $1, %xmm0\\n+; X86-NEXT:    paddb %xmm0, %xmm0\\n ; X86-NEXT:    por %xmm1, %xmm0\\n ; X86-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n ; X86-NEXT:    retl\"}, {\"sha\": \"651418d271be514307ed4ba58b4bd67e26c492de\", \"filename\": \"llvm/test/CodeGen/X86/vector-bitreverse.ll\", \"status\": \"modified\", \"additions\": 76, \"deletions\": 76, \"changes\": 152, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-bitreverse.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-bitreverse.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-bitreverse.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -693,11 +693,11 @@ define <16 x i8> @test_bitreverse_v16i8(<16 x i8> %a) nounwind {\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    pand %xmm0, %xmm1\\n-; SSE2-NEXT:    paddb %xmm1, %xmm1\\n+; SSE2-NEXT:    psrlw $1, %xmm1\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -781,11 +781,11 @@ define <8 x i16> @test_bitreverse_v8i16(<8 x i16> %a) nounwind {\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    pand %xmm0, %xmm1\\n-; SSE2-NEXT:    paddb %xmm1, %xmm1\\n+; SSE2-NEXT:    psrlw $1, %xmm1\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -881,11 +881,11 @@ define <4 x i32> @test_bitreverse_v4i32(<4 x i32> %a) nounwind {\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    pand %xmm0, %xmm1\\n-; SSE2-NEXT:    paddb %xmm1, %xmm1\\n+; SSE2-NEXT:    psrlw $1, %xmm1\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -983,11 +983,11 @@ define <2 x i64> @test_bitreverse_v2i64(<2 x i64> %a) nounwind {\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    pand %xmm0, %xmm1\\n-; SSE2-NEXT:    paddb %xmm1, %xmm1\\n+; SSE2-NEXT:    psrlw $1, %xmm1\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm1, %xmm0\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -1079,13 +1079,13 @@ define <32 x i8> @test_bitreverse_v32i8(<32 x i8> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm5, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm4, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm6\\n ; SSE2-NEXT:    pand %xmm4, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm7, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm6\\n ; SSE2-NEXT:    psllw $4, %xmm6\\n@@ -1099,9 +1099,9 @@ define <32 x i8> @test_bitreverse_v32i8(<32 x i8> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm1\\n ; SSE2-NEXT:    por %xmm3, %xmm1\\n ; SSE2-NEXT:    pand %xmm1, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm7, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -1256,13 +1256,13 @@ define <16 x i16> @test_bitreverse_v16i16(<16 x i16> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm5, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm4, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm7\\n ; SSE2-NEXT:    pand %xmm4, %xmm7\\n-; SSE2-NEXT:    paddb %xmm7, %xmm7\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm7\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm6, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm7, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm7\\n ; SSE2-NEXT:    psrlw $8, %xmm7\\n@@ -1280,9 +1280,9 @@ define <16 x i16> @test_bitreverse_v16i16(<16 x i16> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm1\\n ; SSE2-NEXT:    por %xmm3, %xmm1\\n ; SSE2-NEXT:    pand %xmm1, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm6, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -1459,13 +1459,13 @@ define <8 x i32> @test_bitreverse_v8i32(<8 x i32> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm5, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm6\\n ; SSE2-NEXT:    pand %xmm5, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm7, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm6\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm6 = xmm6[8],xmm4[8],xmm6[9],xmm4[9],xmm6[10],xmm4[10],xmm6[11],xmm4[11],xmm6[12],xmm4[12],xmm6[13],xmm4[13],xmm6[14],xmm4[14],xmm6[15],xmm4[15]\\n@@ -1487,9 +1487,9 @@ define <8 x i32> @test_bitreverse_v8i32(<8 x i32> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm1\\n ; SSE2-NEXT:    por %xmm3, %xmm1\\n ; SSE2-NEXT:    pand %xmm1, %xmm5\\n-; SSE2-NEXT:    paddb %xmm5, %xmm5\\n+; SSE2-NEXT:    psrlw $1, %xmm5\\n ; SSE2-NEXT:    pand %xmm7, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm5, %xmm1\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -1668,13 +1668,13 @@ define <4 x i64> @test_bitreverse_v4i64(<4 x i64> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm5, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm6\\n ; SSE2-NEXT:    pand %xmm5, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm7, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm6\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm6 = xmm6[8],xmm4[8],xmm6[9],xmm4[9],xmm6[10],xmm4[10],xmm6[11],xmm4[11],xmm6[12],xmm4[12],xmm6[13],xmm4[13],xmm6[14],xmm4[14],xmm6[15],xmm4[15]\\n@@ -1698,9 +1698,9 @@ define <4 x i64> @test_bitreverse_v4i64(<4 x i64> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm1\\n ; SSE2-NEXT:    por %xmm3, %xmm1\\n ; SSE2-NEXT:    pand %xmm1, %xmm5\\n-; SSE2-NEXT:    paddb %xmm5, %xmm5\\n+; SSE2-NEXT:    psrlw $1, %xmm5\\n ; SSE2-NEXT:    pand %xmm7, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm5, %xmm1\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -1868,13 +1868,13 @@ define <64 x i8> @test_bitreverse_v64i8(<64 x i8> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm7\\n ; SSE2-NEXT:    pand %xmm6, %xmm7\\n-; SSE2-NEXT:    paddb %xmm7, %xmm7\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm7\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm9, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm7, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm7\\n ; SSE2-NEXT:    psllw $4, %xmm7\\n@@ -1891,9 +1891,9 @@ define <64 x i8> @test_bitreverse_v64i8(<64 x i8> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm4\\n ; SSE2-NEXT:    pand %xmm6, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    psllw $4, %xmm4\\n@@ -1910,9 +1910,9 @@ define <64 x i8> @test_bitreverse_v64i8(<64 x i8> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    pand %xmm6, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm2\\n-; SSE2-NEXT:    psrlw $1, %xmm2\\n+; SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm10, %xmm4\\n ; SSE2-NEXT:    psllw $4, %xmm4\\n@@ -1926,9 +1926,9 @@ define <64 x i8> @test_bitreverse_v64i8(<64 x i8> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm3\\n ; SSE2-NEXT:    por %xmm5, %xmm3\\n ; SSE2-NEXT:    pand %xmm3, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n ; SSE2-NEXT:    pand %xmm9, %xmm3\\n-; SSE2-NEXT:    psrlw $1, %xmm3\\n+; SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; SSE2-NEXT:    por %xmm6, %xmm3\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -2160,13 +2160,13 @@ define <32 x i16> @test_bitreverse_v32i16(<32 x i16> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm7\\n ; SSE2-NEXT:    pand %xmm6, %xmm7\\n-; SSE2-NEXT:    paddb %xmm7, %xmm7\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm7\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm9, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm7, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm7\\n ; SSE2-NEXT:    psrlw $8, %xmm7\\n@@ -2187,9 +2187,9 @@ define <32 x i16> @test_bitreverse_v32i16(<32 x i16> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm5, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm5\\n ; SSE2-NEXT:    pand %xmm6, %xmm5\\n-; SSE2-NEXT:    paddb %xmm5, %xmm5\\n+; SSE2-NEXT:    psrlw $1, %xmm5\\n ; SSE2-NEXT:    pand %xmm9, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm5, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm5\\n ; SSE2-NEXT:    psrlw $8, %xmm5\\n@@ -2210,9 +2210,9 @@ define <32 x i16> @test_bitreverse_v32i16(<32 x i16> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm5, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm5\\n ; SSE2-NEXT:    pand %xmm6, %xmm5\\n-; SSE2-NEXT:    paddb %xmm5, %xmm5\\n+; SSE2-NEXT:    psrlw $1, %xmm5\\n ; SSE2-NEXT:    pand %xmm9, %xmm2\\n-; SSE2-NEXT:    psrlw $1, %xmm2\\n+; SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; SSE2-NEXT:    por %xmm5, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm4, %xmm5\\n ; SSE2-NEXT:    psrlw $8, %xmm5\\n@@ -2230,9 +2230,9 @@ define <32 x i16> @test_bitreverse_v32i16(<32 x i16> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm3\\n ; SSE2-NEXT:    por %xmm10, %xmm3\\n ; SSE2-NEXT:    pand %xmm3, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n ; SSE2-NEXT:    pand %xmm9, %xmm3\\n-; SSE2-NEXT:    psrlw $1, %xmm3\\n+; SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; SSE2-NEXT:    por %xmm6, %xmm3\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -2504,13 +2504,13 @@ define <16 x i32> @test_bitreverse_v16i32(<16 x i32> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm7, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm6\\n ; SSE2-NEXT:    pand %xmm7, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm9, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm6\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm6 = xmm6[8],xmm10[8],xmm6[9],xmm10[9],xmm6[10],xmm10[10],xmm6[11],xmm10[11],xmm6[12],xmm10[12],xmm6[13],xmm10[13],xmm6[14],xmm10[14],xmm6[15],xmm10[15]\\n@@ -2535,9 +2535,9 @@ define <16 x i32> @test_bitreverse_v16i32(<16 x i32> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm4\\n ; SSE2-NEXT:    pand %xmm7, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm4 = xmm4[8],xmm10[8],xmm4[9],xmm10[9],xmm4[10],xmm10[10],xmm4[11],xmm10[11],xmm4[12],xmm10[12],xmm4[13],xmm10[13],xmm4[14],xmm10[14],xmm4[15],xmm10[15]\\n@@ -2562,9 +2562,9 @@ define <16 x i32> @test_bitreverse_v16i32(<16 x i32> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    pand %xmm7, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm2\\n-; SSE2-NEXT:    psrlw $1, %xmm2\\n+; SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm11, %xmm4\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm4 = xmm4[8],xmm10[8],xmm4[9],xmm10[9],xmm4[10],xmm10[10],xmm4[11],xmm10[11],xmm4[12],xmm10[12],xmm4[13],xmm10[13],xmm4[14],xmm10[14],xmm4[15],xmm10[15]\\n@@ -2586,9 +2586,9 @@ define <16 x i32> @test_bitreverse_v16i32(<16 x i32> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm3\\n ; SSE2-NEXT:    por %xmm5, %xmm3\\n ; SSE2-NEXT:    pand %xmm3, %xmm7\\n-; SSE2-NEXT:    paddb %xmm7, %xmm7\\n+; SSE2-NEXT:    psrlw $1, %xmm7\\n ; SSE2-NEXT:    pand %xmm9, %xmm3\\n-; SSE2-NEXT:    psrlw $1, %xmm3\\n+; SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; SSE2-NEXT:    por %xmm7, %xmm3\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -2862,13 +2862,13 @@ define <8 x i64> @test_bitreverse_v8i64(<8 x i64> %a) nounwind {\\n ; SSE2-NEXT:    pand %xmm8, %xmm0\\n ; SSE2-NEXT:    psrlw $2, %xmm0\\n ; SSE2-NEXT:    por %xmm7, %xmm0\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n ; SSE2-NEXT:    movdqa %xmm0, %xmm6\\n ; SSE2-NEXT:    pand %xmm7, %xmm6\\n-; SSE2-NEXT:    paddb %xmm6, %xmm6\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170]\\n+; SSE2-NEXT:    psrlw $1, %xmm6\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]\\n ; SSE2-NEXT:    pand %xmm9, %xmm0\\n-; SSE2-NEXT:    psrlw $1, %xmm0\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n ; SSE2-NEXT:    por %xmm6, %xmm0\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm6\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm6 = xmm6[8],xmm10[8],xmm6[9],xmm10[9],xmm6[10],xmm10[10],xmm6[11],xmm10[11],xmm6[12],xmm10[12],xmm6[13],xmm10[13],xmm6[14],xmm10[14],xmm6[15],xmm10[15]\\n@@ -2895,9 +2895,9 @@ define <8 x i64> @test_bitreverse_v8i64(<8 x i64> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm1, %xmm4\\n ; SSE2-NEXT:    pand %xmm7, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm1\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    por %xmm4, %xmm1\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm4 = xmm4[8],xmm10[8],xmm4[9],xmm10[9],xmm4[10],xmm10[10],xmm4[11],xmm10[11],xmm4[12],xmm10[12],xmm4[13],xmm10[13],xmm4[14],xmm10[14],xmm4[15],xmm10[15]\\n@@ -2924,9 +2924,9 @@ define <8 x i64> @test_bitreverse_v8i64(<8 x i64> %a) nounwind {\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n ; SSE2-NEXT:    pand %xmm7, %xmm4\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    psrlw $1, %xmm4\\n ; SSE2-NEXT:    pand %xmm9, %xmm2\\n-; SSE2-NEXT:    psrlw $1, %xmm2\\n+; SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm11, %xmm4\\n ; SSE2-NEXT:    punpckhbw {{.*#+}} xmm4 = xmm4[8],xmm10[8],xmm4[9],xmm10[9],xmm4[10],xmm10[10],xmm4[11],xmm10[11],xmm4[12],xmm10[12],xmm4[13],xmm10[13],xmm4[14],xmm10[14],xmm4[15],xmm10[15]\\n@@ -2950,9 +2950,9 @@ define <8 x i64> @test_bitreverse_v8i64(<8 x i64> %a) nounwind {\\n ; SSE2-NEXT:    psrlw $2, %xmm3\\n ; SSE2-NEXT:    por %xmm5, %xmm3\\n ; SSE2-NEXT:    pand %xmm3, %xmm7\\n-; SSE2-NEXT:    paddb %xmm7, %xmm7\\n+; SSE2-NEXT:    psrlw $1, %xmm7\\n ; SSE2-NEXT:    pand %xmm9, %xmm3\\n-; SSE2-NEXT:    psrlw $1, %xmm3\\n+; SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; SSE2-NEXT:    por %xmm7, %xmm3\\n ; SSE2-NEXT:    retq\\n ;\"}, {\"sha\": \"1e41aa019f7c10300ac793eec2b378a257bc809c\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshl-rot-128.ll\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 13, \"changes\": 26, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-128.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -517,10 +517,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; SSE2-NEXT:    pandn %xmm3, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm3\\n-; SSE2-NEXT:    paddb %xmm2, %xmm3\\n+; SSE2-NEXT:    psrlw $7, %xmm3\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; SSE2-NEXT:    psrlw $7, %xmm4\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm4\\n+; SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; SSE2-NEXT:    por %xmm3, %xmm4\\n ; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    pcmpgtb %xmm1, %xmm0\\n@@ -553,10 +553,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm0\\n ; SSE41-NEXT:    pblendvb %xmm0, %xmm3, %xmm1\\n ; SSE41-NEXT:    movdqa %xmm1, %xmm0\\n-; SSE41-NEXT:    paddb %xmm1, %xmm0\\n+; SSE41-NEXT:    psrlw $7, %xmm0\\n+; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE41-NEXT:    movdqa %xmm1, %xmm3\\n-; SSE41-NEXT:    psrlw $7, %xmm3\\n-; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3\\n+; SSE41-NEXT:    paddb %xmm1, %xmm3\\n ; SSE41-NEXT:    por %xmm0, %xmm3\\n ; SSE41-NEXT:    paddb %xmm2, %xmm2\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm0\\n@@ -580,10 +580,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n-; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm2\\n-; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm3\\n-; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3, %xmm3\\n-; AVX-NEXT:    vpor %xmm3, %xmm2, %xmm2\\n+; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm2\\n+; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm2, %xmm2\\n+; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm3\\n+; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n@@ -728,10 +728,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; X86-SSE2-NEXT:    pandn %xmm3, %xmm2\\n ; X86-SSE2-NEXT:    por %xmm4, %xmm2\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm3\\n-; X86-SSE2-NEXT:    paddb %xmm2, %xmm3\\n+; X86-SSE2-NEXT:    psrlw $7, %xmm3\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm3\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; X86-SSE2-NEXT:    psrlw $7, %xmm4\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm4\\n+; X86-SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; X86-SSE2-NEXT:    por %xmm3, %xmm4\\n ; X86-SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; X86-SSE2-NEXT:    pcmpgtb %xmm1, %xmm0\"}, {\"sha\": \"37343d66bf08bb35a144724d0f00e502778516c9\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshl-rot-256.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 8, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-256.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-256.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-256.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -443,10 +443,10 @@ define <32 x i8> @var_funnnel_v32i8(<32 x i8> %x, <32 x i8> %amt) nounwind {\\n ; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX2-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX2-NEXT:    retq\\n@@ -467,10 +467,10 @@ define <32 x i8> @var_funnnel_v32i8(<32 x i8> %x, <32 x i8> %amt) nounwind {\\n ; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX512F-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX512F-NEXT:    retq\"}, {\"sha\": \"488861ad53b39d6725b52932655631acaa2bf1a8\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshl-rot-512.ll\", \"status\": \"modified\", \"additions\": 96, \"deletions\": 96, \"changes\": 192, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-512.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-512.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshl-rot-512.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -272,154 +272,154 @@ define <64 x i8> @var_funnnel_v64i8(<64 x i8> %x, <64 x i8> %amt) nounwind {\\n ;\\n ; AVX512BW-LABEL: var_funnnel_v64i8:\\n ; AVX512BW:       # %bb.0:\\n-; AVX512BW-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n-; AVX512BW-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n-; AVX512BW-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512BW-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n-; AVX512BW-NEXT:    vpsllw $5, %zmm2, %zmm2\\n-; AVX512BW-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n+; AVX512BW-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512BW-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n+; AVX512BW-NEXT:    vpsllw $5, %zmm3, %zmm3\\n+; AVX512BW-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n ; AVX512BW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512BW-NEXT:    vpmovb2m %zmm2, %k2\\n-; AVX512BW-NEXT:    vpsrlw $4, %zmm0, %zmm2\\n-; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n-; AVX512BW-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n-; AVX512BW-NEXT:    vpsrlw $2, %zmm2, %zmm5\\n-; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512BW-NEXT:    vpsrlw $1, %zmm2, %zmm5\\n+; AVX512BW-NEXT:    vpmovb2m %zmm3, %k2\\n+; AVX512BW-NEXT:    vpsllw $4, %zmm0, %zmm3\\n+; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n+; AVX512BW-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n+; AVX512BW-NEXT:    vpsllw $2, %zmm3, %zmm5\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n ; AVX512BW-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512BW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512BW-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n+; AVX512BW-NEXT:    vpaddb %zmm3, %zmm3, %zmm3 {%k1}\\n+; AVX512BW-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n+; AVX512BW-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n+; AVX512BW-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512BW-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n-; AVX512BW-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512BW-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n+; AVX512BW-NEXT:    vpmovb2m %zmm2, %k1\\n ; AVX512BW-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512BW-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512BW-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512BW-NEXT:    vpaddb %zmm3, %zmm3, %zmm1\\n-; AVX512BW-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512BW-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512BW-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n+; AVX512BW-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512BW-NEXT:    vpaddb %zmm2, %zmm2, %zmm2\\n+; AVX512BW-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512BW-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n ; AVX512BW-NEXT:    retq\\n ;\\n ; AVX512VLBW-LABEL: var_funnnel_v64i8:\\n ; AVX512VLBW:       # %bb.0:\\n-; AVX512VLBW-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n-; AVX512VLBW-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n-; AVX512VLBW-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VLBW-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n-; AVX512VLBW-NEXT:    vpsllw $5, %zmm2, %zmm2\\n-; AVX512VLBW-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n+; AVX512VLBW-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VLBW-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n+; AVX512VLBW-NEXT:    vpsllw $5, %zmm3, %zmm3\\n+; AVX512VLBW-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm2, %k2\\n-; AVX512VLBW-NEXT:    vpsrlw $4, %zmm0, %zmm2\\n-; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n-; AVX512VLBW-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n-; AVX512VLBW-NEXT:    vpsrlw $2, %zmm2, %zmm5\\n-; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VLBW-NEXT:    vpsrlw $1, %zmm2, %zmm5\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm3, %k2\\n+; AVX512VLBW-NEXT:    vpsllw $4, %zmm0, %zmm3\\n+; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n+; AVX512VLBW-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n+; AVX512VLBW-NEXT:    vpsllw $2, %zmm3, %zmm5\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n ; AVX512VLBW-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VLBW-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm3, %zmm3, %zmm3 {%k1}\\n+; AVX512VLBW-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n+; AVX512VLBW-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n+; AVX512VLBW-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VLBW-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm2, %k1\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VLBW-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VLBW-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VLBW-NEXT:    vpaddb %zmm3, %zmm3, %zmm1\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VLBW-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VLBW-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n+; AVX512VLBW-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm2, %zmm2, %zmm2\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VLBW-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n ; AVX512VLBW-NEXT:    retq\\n ;\\n ; AVX512VBMI2-LABEL: var_funnnel_v64i8:\\n ; AVX512VBMI2:       # %bb.0:\\n-; AVX512VBMI2-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n-; AVX512VBMI2-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n-; AVX512VBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VBMI2-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n-; AVX512VBMI2-NEXT:    vpsllw $5, %zmm2, %zmm2\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n+; AVX512VBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n+; AVX512VBMI2-NEXT:    vpsllw $5, %zmm3, %zmm3\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm2, %k2\\n-; AVX512VBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm2\\n-; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n-; AVX512VBMI2-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n-; AVX512VBMI2-NEXT:    vpsrlw $2, %zmm2, %zmm5\\n-; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VBMI2-NEXT:    vpsrlw $1, %zmm2, %zmm5\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm3, %k2\\n+; AVX512VBMI2-NEXT:    vpsllw $4, %zmm0, %zmm3\\n+; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n+; AVX512VBMI2-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n+; AVX512VBMI2-NEXT:    vpsllw $2, %zmm3, %zmm5\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n ; AVX512VBMI2-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VBMI2-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm3 {%k1}\\n+; AVX512VBMI2-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n+; AVX512VBMI2-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n+; AVX512VBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VBMI2-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VBMI2-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm1\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VBMI2-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n+; AVX512VBMI2-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm2\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VBMI2-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n ; AVX512VBMI2-NEXT:    retq\\n ;\\n ; AVX512VLVBMI2-LABEL: var_funnnel_v64i8:\\n ; AVX512VLVBMI2:       # %bb.0:\\n-; AVX512VLVBMI2-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n-; AVX512VLVBMI2-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VLVBMI2-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm2, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n+; AVX512VLVBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VLVBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm3, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm2, %k2\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $2, %zmm2, %zmm5\\n-; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $1, %zmm2, %zmm5\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm3, %k2\\n+; AVX512VLVBMI2-NEXT:    vpsllw $4, %zmm0, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n+; AVX512VLVBMI2-NEXT:    vpsllw $2, %zmm3, %zmm5\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n ; AVX512VLVBMI2-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm3 {%k1}\\n+; AVX512VLVBMI2-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n+; AVX512VLVBMI2-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VLVBMI2-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VLVBMI2-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm1\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VLVBMI2-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n ; AVX512VLVBMI2-NEXT:    retq\\n   %res = call <64 x i8> @llvm.fshl.v64i8(<64 x i8> %x, <64 x i8> %x, <64 x i8> %amt)\\n   ret <64 x i8> %res\"}, {\"sha\": \"8c74560cbdd92e8323892b6302ce59a08bc02812\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshr-128.ll\", \"status\": \"modified\", \"additions\": 102, \"deletions\": 102, \"changes\": 204, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-128.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -732,65 +732,65 @@ define <8 x i16> @var_funnnel_v8i16(<8 x i16> %x, <8 x i16> %y, <8 x i16> %amt)\\n define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %y, <16 x i8> %amt) nounwind {\\n ; SSE2-LABEL: var_funnnel_v16i8:\\n ; SSE2:       # %bb.0:\\n-; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; SSE2-NEXT:    pandn %xmm5, %xmm4\\n-; SSE2-NEXT:    psllw $5, %xmm4\\n+; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; SSE2-NEXT:    movdqa %xmm2, %xmm5\\n+; SSE2-NEXT:    pand %xmm4, %xmm5\\n+; SSE2-NEXT:    psllw $5, %xmm5\\n ; SSE2-NEXT:    pxor %xmm3, %xmm3\\n ; SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n-; SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n ; SSE2-NEXT:    movdqa %xmm6, %xmm7\\n-; SSE2-NEXT:    pandn %xmm0, %xmm7\\n-; SSE2-NEXT:    psllw $4, %xmm0\\n-; SSE2-NEXT:    pand %xmm6, %xmm0\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    por %xmm7, %xmm0\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    pandn %xmm1, %xmm7\\n+; SSE2-NEXT:    psrlw $4, %xmm1\\n+; SSE2-NEXT:    pand %xmm6, %xmm1\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n+; SSE2-NEXT:    por %xmm7, %xmm1\\n+; SSE2-NEXT:    paddb %xmm5, %xmm5\\n ; SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n+; SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n ; SSE2-NEXT:    movdqa %xmm6, %xmm7\\n-; SSE2-NEXT:    pandn %xmm0, %xmm7\\n-; SSE2-NEXT:    psllw $2, %xmm0\\n-; SSE2-NEXT:    pand %xmm6, %xmm0\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n-; SSE2-NEXT:    por %xmm7, %xmm0\\n-; SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; SSE2-NEXT:    pandn %xmm1, %xmm7\\n+; SSE2-NEXT:    psrlw $2, %xmm1\\n+; SSE2-NEXT:    pand %xmm6, %xmm1\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n+; SSE2-NEXT:    por %xmm7, %xmm1\\n+; SSE2-NEXT:    paddb %xmm5, %xmm5\\n ; SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n-; SSE2-NEXT:    movdqa %xmm6, %xmm4\\n-; SSE2-NEXT:    pandn %xmm0, %xmm4\\n-; SSE2-NEXT:    paddb %xmm0, %xmm0\\n-; SSE2-NEXT:    pand %xmm6, %xmm0\\n-; SSE2-NEXT:    pand %xmm5, %xmm2\\n-; SSE2-NEXT:    psllw $5, %xmm2\\n-; SSE2-NEXT:    pxor %xmm5, %xmm5\\n-; SSE2-NEXT:    pcmpgtb %xmm2, %xmm5\\n-; SSE2-NEXT:    movdqa %xmm5, %xmm6\\n-; SSE2-NEXT:    pandn %xmm1, %xmm6\\n-; SSE2-NEXT:    psrlw $4, %xmm1\\n-; SSE2-NEXT:    pand %xmm5, %xmm1\\n+; SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n+; SSE2-NEXT:    movdqa %xmm6, %xmm5\\n+; SSE2-NEXT:    pandn %xmm1, %xmm5\\n+; SSE2-NEXT:    psrlw $1, %xmm1\\n+; SSE2-NEXT:    pand %xmm6, %xmm1\\n ; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n-; SSE2-NEXT:    por %xmm6, %xmm1\\n+; SSE2-NEXT:    por %xmm5, %xmm1\\n+; SSE2-NEXT:    pandn %xmm4, %xmm2\\n+; SSE2-NEXT:    psllw $5, %xmm2\\n+; SSE2-NEXT:    pxor %xmm4, %xmm4\\n+; SSE2-NEXT:    pcmpgtb %xmm2, %xmm4\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; SSE2-NEXT:    movdqa %xmm4, %xmm5\\n+; SSE2-NEXT:    pandn %xmm0, %xmm5\\n+; SSE2-NEXT:    psllw $4, %xmm0\\n+; SSE2-NEXT:    pand %xmm4, %xmm0\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n+; SSE2-NEXT:    por %xmm5, %xmm0\\n ; SSE2-NEXT:    paddb %xmm2, %xmm2\\n-; SSE2-NEXT:    pxor %xmm5, %xmm5\\n-; SSE2-NEXT:    pcmpgtb %xmm2, %xmm5\\n-; SSE2-NEXT:    movdqa %xmm5, %xmm6\\n-; SSE2-NEXT:    pandn %xmm1, %xmm6\\n-; SSE2-NEXT:    psrlw $2, %xmm1\\n-; SSE2-NEXT:    pand %xmm5, %xmm1\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n-; SSE2-NEXT:    por %xmm6, %xmm1\\n+; SSE2-NEXT:    pxor %xmm4, %xmm4\\n+; SSE2-NEXT:    pcmpgtb %xmm2, %xmm4\\n+; SSE2-NEXT:    movdqa %xmm4, %xmm5\\n+; SSE2-NEXT:    pandn %xmm0, %xmm5\\n+; SSE2-NEXT:    psllw $2, %xmm0\\n+; SSE2-NEXT:    pand %xmm4, %xmm0\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n+; SSE2-NEXT:    por %xmm5, %xmm0\\n ; SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; SSE2-NEXT:    pcmpgtb %xmm2, %xmm3\\n ; SSE2-NEXT:    movdqa %xmm3, %xmm2\\n-; SSE2-NEXT:    pandn %xmm1, %xmm2\\n-; SSE2-NEXT:    psrlw $1, %xmm1\\n-; SSE2-NEXT:    pand %xmm3, %xmm1\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n-; SSE2-NEXT:    por %xmm2, %xmm1\\n-; SSE2-NEXT:    por %xmm4, %xmm1\\n-; SSE2-NEXT:    por %xmm1, %xmm0\\n+; SSE2-NEXT:    pandn %xmm0, %xmm2\\n+; SSE2-NEXT:    por %xmm1, %xmm2\\n+; SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; SSE2-NEXT:    pand %xmm3, %xmm0\\n+; SSE2-NEXT:    por %xmm2, %xmm0\\n ; SSE2-NEXT:    retq\\n ;\\n ; SSE41-LABEL: var_funnnel_v16i8:\\n@@ -981,77 +981,77 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %y, <16 x i8> %amt)\\n ; XOP-LABEL: var_funnnel_v16i8:\\n ; XOP:       # %bb.0:\\n ; XOP-NEXT:    vmovdqa {{.*#+}} xmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; XOP-NEXT:    vpandn %xmm3, %xmm2, %xmm4\\n+; XOP-NEXT:    vpand %xmm3, %xmm2, %xmm4\\n+; XOP-NEXT:    vpxor %xmm5, %xmm5, %xmm5\\n+; XOP-NEXT:    vpsubb %xmm4, %xmm5, %xmm4\\n+; XOP-NEXT:    vpshlb %xmm4, %xmm1, %xmm1\\n+; XOP-NEXT:    vpandn %xmm3, %xmm2, %xmm2\\n ; XOP-NEXT:    vpaddb %xmm0, %xmm0, %xmm0\\n-; XOP-NEXT:    vpshlb %xmm4, %xmm0, %xmm0\\n-; XOP-NEXT:    vpand %xmm3, %xmm2, %xmm2\\n-; XOP-NEXT:    vpxor %xmm3, %xmm3, %xmm3\\n-; XOP-NEXT:    vpsubb %xmm2, %xmm3, %xmm2\\n-; XOP-NEXT:    vpshlb %xmm2, %xmm1, %xmm1\\n+; XOP-NEXT:    vpshlb %xmm2, %xmm0, %xmm0\\n ; XOP-NEXT:    vpor %xmm1, %xmm0, %xmm0\\n ; XOP-NEXT:    retq\\n ;\\n ; X86-SSE2-LABEL: var_funnnel_v16i8:\\n ; X86-SSE2:       # %bb.0:\\n-; X86-SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; X86-SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; X86-SSE2-NEXT:    pandn %xmm5, %xmm4\\n-; X86-SSE2-NEXT:    psllw $5, %xmm4\\n+; X86-SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; X86-SSE2-NEXT:    movdqa %xmm2, %xmm5\\n+; X86-SSE2-NEXT:    pand %xmm4, %xmm5\\n+; X86-SSE2-NEXT:    psllw $5, %xmm5\\n ; X86-SSE2-NEXT:    pxor %xmm3, %xmm3\\n ; X86-SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; X86-SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n-; X86-SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; X86-SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n ; X86-SSE2-NEXT:    movdqa %xmm6, %xmm7\\n-; X86-SSE2-NEXT:    pandn %xmm0, %xmm7\\n-; X86-SSE2-NEXT:    psllw $4, %xmm0\\n-; X86-SSE2-NEXT:    pand %xmm6, %xmm0\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n-; X86-SSE2-NEXT:    por %xmm7, %xmm0\\n-; X86-SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; X86-SSE2-NEXT:    pandn %xmm1, %xmm7\\n+; X86-SSE2-NEXT:    psrlw $4, %xmm1\\n+; X86-SSE2-NEXT:    pand %xmm6, %xmm1\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n+; X86-SSE2-NEXT:    por %xmm7, %xmm1\\n+; X86-SSE2-NEXT:    paddb %xmm5, %xmm5\\n ; X86-SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; X86-SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n+; X86-SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n ; X86-SSE2-NEXT:    movdqa %xmm6, %xmm7\\n-; X86-SSE2-NEXT:    pandn %xmm0, %xmm7\\n-; X86-SSE2-NEXT:    psllw $2, %xmm0\\n-; X86-SSE2-NEXT:    pand %xmm6, %xmm0\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n-; X86-SSE2-NEXT:    por %xmm7, %xmm0\\n-; X86-SSE2-NEXT:    paddb %xmm4, %xmm4\\n+; X86-SSE2-NEXT:    pandn %xmm1, %xmm7\\n+; X86-SSE2-NEXT:    psrlw $2, %xmm1\\n+; X86-SSE2-NEXT:    pand %xmm6, %xmm1\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n+; X86-SSE2-NEXT:    por %xmm7, %xmm1\\n+; X86-SSE2-NEXT:    paddb %xmm5, %xmm5\\n ; X86-SSE2-NEXT:    pxor %xmm6, %xmm6\\n-; X86-SSE2-NEXT:    pcmpgtb %xmm4, %xmm6\\n-; X86-SSE2-NEXT:    movdqa %xmm6, %xmm4\\n-; X86-SSE2-NEXT:    pandn %xmm0, %xmm4\\n-; X86-SSE2-NEXT:    paddb %xmm0, %xmm0\\n-; X86-SSE2-NEXT:    pand %xmm6, %xmm0\\n-; X86-SSE2-NEXT:    pand %xmm5, %xmm2\\n-; X86-SSE2-NEXT:    psllw $5, %xmm2\\n-; X86-SSE2-NEXT:    pxor %xmm5, %xmm5\\n-; X86-SSE2-NEXT:    pcmpgtb %xmm2, %xmm5\\n-; X86-SSE2-NEXT:    movdqa %xmm5, %xmm6\\n-; X86-SSE2-NEXT:    pandn %xmm1, %xmm6\\n-; X86-SSE2-NEXT:    psrlw $4, %xmm1\\n-; X86-SSE2-NEXT:    pand %xmm5, %xmm1\\n+; X86-SSE2-NEXT:    pcmpgtb %xmm5, %xmm6\\n+; X86-SSE2-NEXT:    movdqa %xmm6, %xmm5\\n+; X86-SSE2-NEXT:    pandn %xmm1, %xmm5\\n+; X86-SSE2-NEXT:    psrlw $1, %xmm1\\n+; X86-SSE2-NEXT:    pand %xmm6, %xmm1\\n ; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n-; X86-SSE2-NEXT:    por %xmm6, %xmm1\\n+; X86-SSE2-NEXT:    por %xmm5, %xmm1\\n+; X86-SSE2-NEXT:    pandn %xmm4, %xmm2\\n+; X86-SSE2-NEXT:    psllw $5, %xmm2\\n+; X86-SSE2-NEXT:    pxor %xmm4, %xmm4\\n+; X86-SSE2-NEXT:    pcmpgtb %xmm2, %xmm4\\n+; X86-SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; X86-SSE2-NEXT:    movdqa %xmm4, %xmm5\\n+; X86-SSE2-NEXT:    pandn %xmm0, %xmm5\\n+; X86-SSE2-NEXT:    psllw $4, %xmm0\\n+; X86-SSE2-NEXT:    pand %xmm4, %xmm0\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n+; X86-SSE2-NEXT:    por %xmm5, %xmm0\\n ; X86-SSE2-NEXT:    paddb %xmm2, %xmm2\\n-; X86-SSE2-NEXT:    pxor %xmm5, %xmm5\\n-; X86-SSE2-NEXT:    pcmpgtb %xmm2, %xmm5\\n-; X86-SSE2-NEXT:    movdqa %xmm5, %xmm6\\n-; X86-SSE2-NEXT:    pandn %xmm1, %xmm6\\n-; X86-SSE2-NEXT:    psrlw $2, %xmm1\\n-; X86-SSE2-NEXT:    pand %xmm5, %xmm1\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n-; X86-SSE2-NEXT:    por %xmm6, %xmm1\\n+; X86-SSE2-NEXT:    pxor %xmm4, %xmm4\\n+; X86-SSE2-NEXT:    pcmpgtb %xmm2, %xmm4\\n+; X86-SSE2-NEXT:    movdqa %xmm4, %xmm5\\n+; X86-SSE2-NEXT:    pandn %xmm0, %xmm5\\n+; X86-SSE2-NEXT:    psllw $2, %xmm0\\n+; X86-SSE2-NEXT:    pand %xmm4, %xmm0\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm0\\n+; X86-SSE2-NEXT:    por %xmm5, %xmm0\\n ; X86-SSE2-NEXT:    paddb %xmm2, %xmm2\\n ; X86-SSE2-NEXT:    pcmpgtb %xmm2, %xmm3\\n ; X86-SSE2-NEXT:    movdqa %xmm3, %xmm2\\n-; X86-SSE2-NEXT:    pandn %xmm1, %xmm2\\n-; X86-SSE2-NEXT:    psrlw $1, %xmm1\\n-; X86-SSE2-NEXT:    pand %xmm3, %xmm1\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n-; X86-SSE2-NEXT:    por %xmm2, %xmm1\\n-; X86-SSE2-NEXT:    por %xmm4, %xmm1\\n-; X86-SSE2-NEXT:    por %xmm1, %xmm0\\n+; X86-SSE2-NEXT:    pandn %xmm0, %xmm2\\n+; X86-SSE2-NEXT:    por %xmm1, %xmm2\\n+; X86-SSE2-NEXT:    paddb %xmm0, %xmm0\\n+; X86-SSE2-NEXT:    pand %xmm3, %xmm0\\n+; X86-SSE2-NEXT:    por %xmm2, %xmm0\\n ; X86-SSE2-NEXT:    retl\\n   %res = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %x, <16 x i8> %y, <16 x i8> %amt)\\n   ret <16 x i8> %res\"}, {\"sha\": \"6df47bcc837771af6cf15a79963e1dd773474576\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshr-256.ll\", \"status\": \"modified\", \"additions\": 29, \"deletions\": 29, \"changes\": 58, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-256.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-256.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-256.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -758,45 +758,45 @@ define <32 x i8> @var_funnnel_v32i8(<32 x i8> %x, <32 x i8> %y, <32 x i8> %amt)\\n ; XOPAVX1-LABEL: var_funnnel_v32i8:\\n ; XOPAVX1:       # %bb.0:\\n ; XOPAVX1-NEXT:    vmovaps {{.*#+}} ymm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; XOPAVX1-NEXT:    vandnps %ymm3, %ymm2, %ymm4\\n+; XOPAVX1-NEXT:    vandps %ymm3, %ymm2, %ymm4\\n ; XOPAVX1-NEXT:    vextractf128 $1, %ymm4, %xmm5\\n-; XOPAVX1-NEXT:    vextractf128 $1, %ymm0, %xmm6\\n-; XOPAVX1-NEXT:    vpaddb %xmm6, %xmm6, %xmm6\\n-; XOPAVX1-NEXT:    vpshlb %xmm5, %xmm6, %xmm5\\n-; XOPAVX1-NEXT:    vpaddb %xmm0, %xmm0, %xmm0\\n-; XOPAVX1-NEXT:    vpshlb %xmm4, %xmm0, %xmm0\\n-; XOPAVX1-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm0\\n-; XOPAVX1-NEXT:    vandps %ymm3, %ymm2, %ymm2\\n+; XOPAVX1-NEXT:    vpxor %xmm6, %xmm6, %xmm6\\n+; XOPAVX1-NEXT:    vpsubb %xmm5, %xmm6, %xmm5\\n+; XOPAVX1-NEXT:    vextractf128 $1, %ymm1, %xmm7\\n+; XOPAVX1-NEXT:    vpshlb %xmm5, %xmm7, %xmm5\\n+; XOPAVX1-NEXT:    vpsubb %xmm4, %xmm6, %xmm4\\n+; XOPAVX1-NEXT:    vpshlb %xmm4, %xmm1, %xmm1\\n+; XOPAVX1-NEXT:    vinsertf128 $1, %xmm5, %ymm1, %ymm1\\n+; XOPAVX1-NEXT:    vandnps %ymm3, %ymm2, %ymm2\\n ; XOPAVX1-NEXT:    vextractf128 $1, %ymm2, %xmm3\\n-; XOPAVX1-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; XOPAVX1-NEXT:    vpsubb %xmm3, %xmm4, %xmm3\\n-; XOPAVX1-NEXT:    vextractf128 $1, %ymm1, %xmm5\\n-; XOPAVX1-NEXT:    vpshlb %xmm3, %xmm5, %xmm3\\n-; XOPAVX1-NEXT:    vpsubb %xmm2, %xmm4, %xmm2\\n-; XOPAVX1-NEXT:    vpshlb %xmm2, %xmm1, %xmm1\\n-; XOPAVX1-NEXT:    vinsertf128 $1, %xmm3, %ymm1, %ymm1\\n+; XOPAVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4\\n+; XOPAVX1-NEXT:    vpaddb %xmm4, %xmm4, %xmm4\\n+; XOPAVX1-NEXT:    vpshlb %xmm3, %xmm4, %xmm3\\n+; XOPAVX1-NEXT:    vpaddb %xmm0, %xmm0, %xmm0\\n+; XOPAVX1-NEXT:    vpshlb %xmm2, %xmm0, %xmm0\\n+; XOPAVX1-NEXT:    vinsertf128 $1, %xmm3, %ymm0, %ymm0\\n ; XOPAVX1-NEXT:    vorps %ymm1, %ymm0, %ymm0\\n ; XOPAVX1-NEXT:    retq\\n ;\\n ; XOPAVX2-LABEL: var_funnnel_v32i8:\\n ; XOPAVX2:       # %bb.0:\\n ; XOPAVX2-NEXT:    vmovdqa {{.*#+}} ymm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; XOPAVX2-NEXT:    vpandn %ymm3, %ymm2, %ymm4\\n+; XOPAVX2-NEXT:    vpand %ymm3, %ymm2, %ymm4\\n ; XOPAVX2-NEXT:    vextracti128 $1, %ymm4, %xmm5\\n-; XOPAVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm0\\n-; XOPAVX2-NEXT:    vextracti128 $1, %ymm0, %xmm6\\n-; XOPAVX2-NEXT:    vpshlb %xmm5, %xmm6, %xmm5\\n-; XOPAVX2-NEXT:    vpshlb %xmm4, %xmm0, %xmm0\\n-; XOPAVX2-NEXT:    vinserti128 $1, %xmm5, %ymm0, %ymm0\\n-; XOPAVX2-NEXT:    vpand %ymm3, %ymm2, %ymm2\\n+; XOPAVX2-NEXT:    vpxor %xmm6, %xmm6, %xmm6\\n+; XOPAVX2-NEXT:    vpsubb %xmm5, %xmm6, %xmm5\\n+; XOPAVX2-NEXT:    vextracti128 $1, %ymm1, %xmm7\\n+; XOPAVX2-NEXT:    vpshlb %xmm5, %xmm7, %xmm5\\n+; XOPAVX2-NEXT:    vpsubb %xmm4, %xmm6, %xmm4\\n+; XOPAVX2-NEXT:    vpshlb %xmm4, %xmm1, %xmm1\\n+; XOPAVX2-NEXT:    vinserti128 $1, %xmm5, %ymm1, %ymm1\\n+; XOPAVX2-NEXT:    vpandn %ymm3, %ymm2, %ymm2\\n ; XOPAVX2-NEXT:    vextracti128 $1, %ymm2, %xmm3\\n-; XOPAVX2-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; XOPAVX2-NEXT:    vpsubb %xmm3, %xmm4, %xmm3\\n-; XOPAVX2-NEXT:    vextracti128 $1, %ymm1, %xmm5\\n-; XOPAVX2-NEXT:    vpshlb %xmm3, %xmm5, %xmm3\\n-; XOPAVX2-NEXT:    vpsubb %xmm2, %xmm4, %xmm2\\n-; XOPAVX2-NEXT:    vpshlb %xmm2, %xmm1, %xmm1\\n-; XOPAVX2-NEXT:    vinserti128 $1, %xmm3, %ymm1, %ymm1\\n+; XOPAVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm0\\n+; XOPAVX2-NEXT:    vextracti128 $1, %ymm0, %xmm4\\n+; XOPAVX2-NEXT:    vpshlb %xmm3, %xmm4, %xmm3\\n+; XOPAVX2-NEXT:    vpshlb %xmm2, %xmm0, %xmm0\\n+; XOPAVX2-NEXT:    vinserti128 $1, %xmm3, %ymm0, %ymm0\\n ; XOPAVX2-NEXT:    vpor %ymm1, %ymm0, %ymm0\\n ; XOPAVX2-NEXT:    retq\\n   %res = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %x, <32 x i8> %y, <32 x i8> %amt)\"}, {\"sha\": \"7bd47f0c21f25083c998eca82af98dc36b4c5610\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshr-rot-128.ll\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 13, \"changes\": 26, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-128.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -553,10 +553,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; SSE2-NEXT:    pandn %xmm1, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm1\\n-; SSE2-NEXT:    paddb %xmm2, %xmm1\\n+; SSE2-NEXT:    psrlw $7, %xmm1\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; SSE2-NEXT:    psrlw $7, %xmm4\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm4\\n+; SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; SSE2-NEXT:    por %xmm1, %xmm4\\n ; SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; SSE2-NEXT:    pcmpgtb %xmm3, %xmm0\\n@@ -588,10 +588,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; SSE41-NEXT:    paddb %xmm0, %xmm0\\n ; SSE41-NEXT:    pblendvb %xmm0, %xmm3, %xmm2\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm1\\n-; SSE41-NEXT:    paddb %xmm2, %xmm1\\n+; SSE41-NEXT:    psrlw $7, %xmm1\\n+; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm3\\n-; SSE41-NEXT:    psrlw $7, %xmm3\\n-; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3\\n+; SSE41-NEXT:    paddb %xmm2, %xmm3\\n ; SSE41-NEXT:    por %xmm1, %xmm3\\n ; SSE41-NEXT:    paddb %xmm0, %xmm0\\n ; SSE41-NEXT:    pblendvb %xmm0, %xmm3, %xmm2\\n@@ -616,10 +616,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n-; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm2\\n-; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm3\\n-; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3, %xmm3\\n-; AVX-NEXT:    vpor %xmm3, %xmm2, %xmm2\\n+; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm2\\n+; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm2, %xmm2\\n+; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm3\\n+; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n@@ -768,10 +768,10 @@ define <16 x i8> @var_funnnel_v16i8(<16 x i8> %x, <16 x i8> %amt) nounwind {\\n ; X86-SSE2-NEXT:    pandn %xmm1, %xmm2\\n ; X86-SSE2-NEXT:    por %xmm4, %xmm2\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm1\\n-; X86-SSE2-NEXT:    paddb %xmm2, %xmm1\\n+; X86-SSE2-NEXT:    psrlw $7, %xmm1\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm1\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; X86-SSE2-NEXT:    psrlw $7, %xmm4\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm4\\n+; X86-SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; X86-SSE2-NEXT:    por %xmm1, %xmm4\\n ; X86-SSE2-NEXT:    paddb %xmm3, %xmm3\\n ; X86-SSE2-NEXT:    pcmpgtb %xmm3, %xmm0\"}, {\"sha\": \"1566a18370ef90faab058897f3c736cfa4e215cb\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshr-rot-256.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 8, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-256.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-256.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-256.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -480,10 +480,10 @@ define <32 x i8> @var_funnnel_v32i8(<32 x i8> %x, <32 x i8> %amt) nounwind {\\n ; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX2-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX2-NEXT:    retq\\n@@ -506,10 +506,10 @@ define <32 x i8> @var_funnnel_v32i8(<32 x i8> %x, <32 x i8> %amt) nounwind {\\n ; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX512F-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX512F-NEXT:    retq\"}, {\"sha\": \"543a5cbab0d02537cc5313d465ab35014299660d\", \"filename\": \"llvm/test/CodeGen/X86/vector-fshr-rot-512.ll\", \"status\": \"modified\", \"additions\": 96, \"deletions\": 96, \"changes\": 192, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-512.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-512.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-fshr-rot-512.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -272,154 +272,154 @@ define <64 x i8> @var_funnnel_v64i8(<64 x i8> %x, <64 x i8> %amt) nounwind {\\n ;\\n ; AVX512BW-LABEL: var_funnnel_v64i8:\\n ; AVX512BW:       # %bb.0:\\n-; AVX512BW-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512BW-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n-; AVX512BW-NEXT:    vpsllw $5, %zmm3, %zmm3\\n-; AVX512BW-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n+; AVX512BW-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n+; AVX512BW-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n+; AVX512BW-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512BW-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n+; AVX512BW-NEXT:    vpsllw $5, %zmm2, %zmm2\\n+; AVX512BW-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n ; AVX512BW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512BW-NEXT:    vpmovb2m %zmm3, %k2\\n-; AVX512BW-NEXT:    vpsrlw $4, %zmm0, %zmm3\\n-; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n-; AVX512BW-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n-; AVX512BW-NEXT:    vpsrlw $2, %zmm3, %zmm5\\n-; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512BW-NEXT:    vpsrlw $1, %zmm3, %zmm5\\n+; AVX512BW-NEXT:    vpmovb2m %zmm2, %k2\\n+; AVX512BW-NEXT:    vpsllw $4, %zmm0, %zmm2\\n+; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n+; AVX512BW-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n+; AVX512BW-NEXT:    vpsllw $2, %zmm2, %zmm5\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n ; AVX512BW-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512BW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512BW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512BW-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; AVX512BW-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n-; AVX512BW-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n+; AVX512BW-NEXT:    vpaddb %zmm2, %zmm2, %zmm2 {%k1}\\n+; AVX512BW-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512BW-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n-; AVX512BW-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512BW-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n+; AVX512BW-NEXT:    vpmovb2m %zmm3, %k1\\n ; AVX512BW-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512BW-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512BW-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512BW-NEXT:    vpaddb %zmm2, %zmm2, %zmm1\\n-; AVX512BW-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512BW-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512BW-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n+; AVX512BW-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512BW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512BW-NEXT:    vpaddb %zmm3, %zmm3, %zmm3\\n+; AVX512BW-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512BW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512BW-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n ; AVX512BW-NEXT:    retq\\n ;\\n ; AVX512VLBW-LABEL: var_funnnel_v64i8:\\n ; AVX512VLBW:       # %bb.0:\\n-; AVX512VLBW-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VLBW-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n-; AVX512VLBW-NEXT:    vpsllw $5, %zmm3, %zmm3\\n-; AVX512VLBW-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n+; AVX512VLBW-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n+; AVX512VLBW-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n+; AVX512VLBW-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VLBW-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n+; AVX512VLBW-NEXT:    vpsllw $5, %zmm2, %zmm2\\n+; AVX512VLBW-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm3, %k2\\n-; AVX512VLBW-NEXT:    vpsrlw $4, %zmm0, %zmm3\\n-; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n-; AVX512VLBW-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n-; AVX512VLBW-NEXT:    vpsrlw $2, %zmm3, %zmm5\\n-; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VLBW-NEXT:    vpsrlw $1, %zmm3, %zmm5\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm2, %k2\\n+; AVX512VLBW-NEXT:    vpsllw $4, %zmm0, %zmm2\\n+; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n+; AVX512VLBW-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n+; AVX512VLBW-NEXT:    vpsllw $2, %zmm2, %zmm5\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n ; AVX512VLBW-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLBW-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VLBW-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; AVX512VLBW-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n-; AVX512VLBW-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm2, %zmm2, %zmm2 {%k1}\\n+; AVX512VLBW-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VLBW-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm3, %k1\\n ; AVX512VLBW-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VLBW-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VLBW-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VLBW-NEXT:    vpaddb %zmm2, %zmm2, %zmm1\\n-; AVX512VLBW-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VLBW-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VLBW-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n+; AVX512VLBW-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VLBW-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VLBW-NEXT:    vpaddb %zmm3, %zmm3, %zmm3\\n+; AVX512VLBW-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VLBW-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VLBW-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n ; AVX512VLBW-NEXT:    retq\\n ;\\n ; AVX512VBMI2-LABEL: var_funnnel_v64i8:\\n ; AVX512VBMI2:       # %bb.0:\\n-; AVX512VBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n-; AVX512VBMI2-NEXT:    vpsllw $5, %zmm3, %zmm3\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n+; AVX512VBMI2-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n+; AVX512VBMI2-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n+; AVX512VBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VBMI2-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n+; AVX512VBMI2-NEXT:    vpsllw $5, %zmm2, %zmm2\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm3, %k2\\n-; AVX512VBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm3\\n-; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n-; AVX512VBMI2-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n-; AVX512VBMI2-NEXT:    vpsrlw $2, %zmm3, %zmm5\\n-; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VBMI2-NEXT:    vpsrlw $1, %zmm3, %zmm5\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm2, %k2\\n+; AVX512VBMI2-NEXT:    vpsllw $4, %zmm0, %zmm2\\n+; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n+; AVX512VBMI2-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n+; AVX512VBMI2-NEXT:    vpsllw $2, %zmm2, %zmm5\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n ; AVX512VBMI2-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VBMI2-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; AVX512VBMI2-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n-; AVX512VBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm2 {%k1}\\n+; AVX512VBMI2-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n ; AVX512VBMI2-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VBMI2-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VBMI2-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm1\\n-; AVX512VBMI2-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VBMI2-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VBMI2-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n+; AVX512VBMI2-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm3\\n+; AVX512VBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VBMI2-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n ; AVX512VBMI2-NEXT:    retq\\n ;\\n ; AVX512VLVBMI2-LABEL: var_funnnel_v64i8:\\n ; AVX512VLVBMI2:       # %bb.0:\\n-; AVX512VLVBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm2 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n-; AVX512VLVBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm3\\n-; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm3, %zmm3\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm4\\n+; AVX512VLVBMI2-NEXT:    vpxor %xmm2, %xmm2, %xmm2\\n+; AVX512VLVBMI2-NEXT:    vpsubb %zmm1, %zmm2, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vmovdqa64 {{.*#+}} zmm3 = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]\\n+; AVX512VLVBMI2-NEXT:    vpandq %zmm3, %zmm2, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm2, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm4\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm3, %k2\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm3\\n-; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm3, %zmm3\\n-; AVX512VLVBMI2-NEXT:    vpblendmb %zmm3, %zmm0, %zmm3 {%k2}\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $2, %zmm3, %zmm5\\n-; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n-; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpsrlw $1, %zmm3, %zmm5\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm2, %k2\\n+; AVX512VLVBMI2-NEXT:    vpsllw $4, %zmm0, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm2, %zmm2\\n+; AVX512VLVBMI2-NEXT:    vpblendmb %zmm2, %zmm0, %zmm2 {%k2}\\n+; AVX512VLVBMI2-NEXT:    vpsllw $2, %zmm2, %zmm5\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm5, %zmm5\\n+; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm2 {%k1}\\n ; AVX512VLVBMI2-NEXT:    vpaddb %zmm4, %zmm4, %zmm4\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm4, %k1\\n-; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm5, %zmm3 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpxor %xmm4, %xmm4, %xmm4\\n-; AVX512VLVBMI2-NEXT:    vpsubb %zmm1, %zmm4, %zmm1\\n-; AVX512VLVBMI2-NEXT:    vpandq %zmm2, %zmm1, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm2 {%k1}\\n+; AVX512VLVBMI2-NEXT:    vpandq %zmm3, %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpsllw $5, %zmm1, %zmm1\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm2\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm2, %k1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm1, %zmm1, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n ; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm1, %k2\\n-; AVX512VLVBMI2-NEXT:    vpsllw $4, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $4, %zmm0, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k2}\\n-; AVX512VLVBMI2-NEXT:    vpsllw $2, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $2, %zmm0, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n ; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm2, %zmm2, %zmm1\\n-; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm1, %k1\\n-; AVX512VLVBMI2-NEXT:    vpaddb %zmm0, %zmm0, %zmm0 {%k1}\\n-; AVX512VLVBMI2-NEXT:    vporq %zmm0, %zmm3, %zmm0\\n+; AVX512VLVBMI2-NEXT:    vpsrlw $1, %zmm0, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpandq {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm1\\n+; AVX512VLVBMI2-NEXT:    vpaddb %zmm3, %zmm3, %zmm3\\n+; AVX512VLVBMI2-NEXT:    vpmovb2m %zmm3, %k1\\n+; AVX512VLVBMI2-NEXT:    vmovdqu8 %zmm1, %zmm0 {%k1}\\n+; AVX512VLVBMI2-NEXT:    vporq %zmm2, %zmm0, %zmm0\\n ; AVX512VLVBMI2-NEXT:    retq\\n   %res = call <64 x i8> @llvm.fshr.v64i8(<64 x i8> %x, <64 x i8> %x, <64 x i8> %amt)\\n   ret <64 x i8> %res\"}, {\"sha\": \"d43d9454872185bb509bed9c1abda943f52cc1ac\", \"filename\": \"llvm/test/CodeGen/X86/vector-rotate-128.ll\", \"status\": \"modified\", \"additions\": 13, \"deletions\": 13, \"changes\": 26, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-128.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -506,10 +506,10 @@ define <16 x i8> @var_rotate_v16i8(<16 x i8> %a, <16 x i8> %b) nounwind {\\n ; SSE2-NEXT:    pandn %xmm3, %xmm2\\n ; SSE2-NEXT:    por %xmm4, %xmm2\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm3\\n-; SSE2-NEXT:    paddb %xmm2, %xmm3\\n+; SSE2-NEXT:    psrlw $7, %xmm3\\n+; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3\\n ; SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; SSE2-NEXT:    psrlw $7, %xmm4\\n-; SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm4\\n+; SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; SSE2-NEXT:    por %xmm3, %xmm4\\n ; SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; SSE2-NEXT:    pcmpgtb %xmm1, %xmm0\\n@@ -542,10 +542,10 @@ define <16 x i8> @var_rotate_v16i8(<16 x i8> %a, <16 x i8> %b) nounwind {\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm0\\n ; SSE41-NEXT:    pblendvb %xmm0, %xmm3, %xmm1\\n ; SSE41-NEXT:    movdqa %xmm1, %xmm0\\n-; SSE41-NEXT:    paddb %xmm1, %xmm0\\n+; SSE41-NEXT:    psrlw $7, %xmm0\\n+; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0\\n ; SSE41-NEXT:    movdqa %xmm1, %xmm3\\n-; SSE41-NEXT:    psrlw $7, %xmm3\\n-; SSE41-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3\\n+; SSE41-NEXT:    paddb %xmm1, %xmm3\\n ; SSE41-NEXT:    por %xmm0, %xmm3\\n ; SSE41-NEXT:    paddb %xmm2, %xmm2\\n ; SSE41-NEXT:    movdqa %xmm2, %xmm0\\n@@ -569,10 +569,10 @@ define <16 x i8> @var_rotate_v16i8(<16 x i8> %a, <16 x i8> %b) nounwind {\\n ; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n-; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm2\\n-; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm3\\n-; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm3, %xmm3\\n-; AVX-NEXT:    vpor %xmm3, %xmm2, %xmm2\\n+; AVX-NEXT:    vpsrlw $7, %xmm0, %xmm2\\n+; AVX-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm2, %xmm2\\n+; AVX-NEXT:    vpaddb %xmm0, %xmm0, %xmm3\\n+; AVX-NEXT:    vpor %xmm2, %xmm3, %xmm2\\n ; AVX-NEXT:    vpaddb %xmm1, %xmm1, %xmm1\\n ; AVX-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0\\n ; AVX-NEXT:    retq\\n@@ -699,10 +699,10 @@ define <16 x i8> @var_rotate_v16i8(<16 x i8> %a, <16 x i8> %b) nounwind {\\n ; X86-SSE2-NEXT:    pandn %xmm3, %xmm2\\n ; X86-SSE2-NEXT:    por %xmm4, %xmm2\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm3\\n-; X86-SSE2-NEXT:    paddb %xmm2, %xmm3\\n+; X86-SSE2-NEXT:    psrlw $7, %xmm3\\n+; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm3\\n ; X86-SSE2-NEXT:    movdqa %xmm2, %xmm4\\n-; X86-SSE2-NEXT:    psrlw $7, %xmm4\\n-; X86-SSE2-NEXT:    pand {{\\\\.?LCPI[0-9]+_[0-9]+}}, %xmm4\\n+; X86-SSE2-NEXT:    paddb %xmm2, %xmm4\\n ; X86-SSE2-NEXT:    por %xmm3, %xmm4\\n ; X86-SSE2-NEXT:    paddb %xmm1, %xmm1\\n ; X86-SSE2-NEXT:    pcmpgtb %xmm1, %xmm0\"}, {\"sha\": \"bb853d717336e147ad4992357e42ac3818842ade\", \"filename\": \"llvm/test/CodeGen/X86/vector-rotate-256.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 8, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-256.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/307890f85b33bc190b563bcb3daeb232b8ecaa73/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-256.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvector-rotate-256.ll?ref=307890f85b33bc190b563bcb3daeb232b8ecaa73\", \"patch\": \"@@ -439,10 +439,10 @@ define <32 x i8> @var_rotate_v32i8(<32 x i8> %a, <32 x i8> %b) nounwind {\\n ; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX2-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX2-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX2-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX2-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX2-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX2-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX2-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX2-NEXT:    retq\\n@@ -463,10 +463,10 @@ define <32 x i8> @var_rotate_v32i8(<32 x i8> %a, <32 x i8> %b) nounwind {\\n ; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n-; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm2\\n-; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm3\\n-; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm3, %ymm3\\n-; AVX512F-NEXT:    vpor %ymm3, %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpsrlw $7, %ymm0, %ymm2\\n+; AVX512F-NEXT:    vpand {{\\\\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm2, %ymm2\\n+; AVX512F-NEXT:    vpaddb %ymm0, %ymm0, %ymm3\\n+; AVX512F-NEXT:    vpor %ymm2, %ymm3, %ymm2\\n ; AVX512F-NEXT:    vpaddb %ymm1, %ymm1, %ymm1\\n ; AVX512F-NEXT:    vpblendvb %ymm1, %ymm2, %ymm0, %ymm0\\n ; AVX512F-NEXT:    retq\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jZjUzYzZjOTcxMDYxN2VhNDY1ODYzZTExN2RkYTY5NWFmMmMzZWJiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/cf53c6c9710617ea465863e117dda695af2c3ebb", "content": "{\"sha\": \"cf53c6c9710617ea465863e117dda695af2c3ebb\", \"node_id\": \"MDY6Q29tbWl0NzU4MjE0MzI6Y2Y1M2M2Yzk3MTA2MTdlYTQ2NTg2M2UxMTdkZGE2OTVhZjJjM2ViYg==\", \"commit\": {\"author\": {\"name\": \"Kirill Stoimenov\", \"email\": \"kstoimenov@google.com\", \"date\": \"2021-09-02T19:26:54Z\"}, \"committer\": {\"name\": \"Kirill Stoimenov\", \"email\": \"kstoimenov@google.com\", \"date\": \"2021-09-02T21:50:56Z\"}, \"message\": \"[asan] Fixed link error by setting jump symbol to R_X86_64_PLT32.\\n\\nFixing this link error:\\nld: error: relocation R_X86_64_PC32 cannot be used against symbol __asan_report_load...; recompile with -fPIC\\n\\nReviewed By: vitalybuka\\n\\nDifferential Revision: https://reviews.llvm.org/D109183\", \"tree\": {\"sha\": \"aa6e4e4b7f1119f3b9b8c3a185f8be0811ab651f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/aa6e4e4b7f1119f3b9b8c3a185f8be0811ab651f\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/cf53c6c9710617ea465863e117dda695af2c3ebb\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cf53c6c9710617ea465863e117dda695af2c3ebb\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cf53c6c9710617ea465863e117dda695af2c3ebb\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cf53c6c9710617ea465863e117dda695af2c3ebb/comments\", \"author\": {\"login\": \"kstoimenov\", \"id\": 87100199, \"node_id\": \"MDQ6VXNlcjg3MTAwMTk5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/87100199?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kstoimenov\", \"html_url\": \"https://github.com/kstoimenov\", \"followers_url\": \"https://api.github.com/users/kstoimenov/followers\", \"following_url\": \"https://api.github.com/users/kstoimenov/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kstoimenov/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kstoimenov/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kstoimenov/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kstoimenov/orgs\", \"repos_url\": \"https://api.github.com/users/kstoimenov/repos\", \"events_url\": \"https://api.github.com/users/kstoimenov/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kstoimenov/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"kstoimenov\", \"id\": 87100199, \"node_id\": \"MDQ6VXNlcjg3MTAwMTk5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/87100199?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/kstoimenov\", \"html_url\": \"https://github.com/kstoimenov\", \"followers_url\": \"https://api.github.com/users/kstoimenov/followers\", \"following_url\": \"https://api.github.com/users/kstoimenov/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/kstoimenov/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/kstoimenov/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/kstoimenov/subscriptions\", \"organizations_url\": \"https://api.github.com/users/kstoimenov/orgs\", \"repos_url\": \"https://api.github.com/users/kstoimenov/repos\", \"events_url\": \"https://api.github.com/users/kstoimenov/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/kstoimenov/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"04ed6e7afc3054de654a31c2210834390ea00ecc\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/04ed6e7afc3054de654a31c2210834390ea00ecc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/04ed6e7afc3054de654a31c2210834390ea00ecc\"}], \"stats\": {\"total\": 23, \"additions\": 12, \"deletions\": 11}, \"files\": [{\"sha\": \"d49b99eff914af4bd26c94aaf9b2ee51deca2a68\", \"filename\": \"llvm/lib/Target/X86/X86MCInstLower.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Flib%2FTarget%2FX86%2FX86MCInstLower.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Flib%2FTarget%2FX86%2FX86MCInstLower.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86MCInstLower.cpp?ref=cf53c6c9710617ea465863e117dda695af2c3ebb\", \"patch\": \"@@ -1526,7 +1526,8 @@ void X86AsmPrinter::emitAsanReportError(Module &M, unsigned Reg,\\n                                STI);\\n   OutStreamer->emitInstruction(\\n       MCInstBuilder(X86::JMP_1)\\n-          .addExpr(MCSymbolRefExpr::create(ReportError, OutContext)),\\n+          .addExpr(MCSymbolRefExpr::create(ReportError, MCSymbolRefExpr::VK_PLT,\\n+                                           OutContext)),\\n       STI);\\n }\\n \"}, {\"sha\": \"40cd8f7f91975973f507ea49278abcb9ac1c56b4\", \"filename\": \"llvm/test/CodeGen/X86/asan-check-memaccess-add.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-add.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-add.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-add.ll?ref=cf53c6c9710617ea465863e117dda695af2c3ebb\", \"patch\": \"@@ -166,7 +166,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store1\\n+; CHECK-NEXT:         jmp     __asan_report_store1@PLT\\n \\n ; CHECK:              .type   __asan_check_store2_rn[[RN2]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store2_rn[[RN2]]\\n@@ -188,7 +188,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store2\\n+; CHECK-NEXT:         jmp     __asan_report_store2@PLT\\n \\n ; CHECK:              .type   __asan_check_store4_rn[[RN4]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store4_rn[[RN4]]\\n@@ -210,7 +210,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store4\\n+; CHECK-NEXT:         jmp     __asan_report_store4@PLT\\n \\n ; CHECK:              .type   __asan_check_store8_rn[[RN8]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store8_rn[[RN8]]\\n@@ -224,7 +224,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         retq\\n ; CHECK-NEXT: [[FAIL]]:\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store8\\n+; CHECK-NEXT:         jmp     __asan_report_store8@PLT\\n \\n ; CHECK:              .type   __asan_check_store16_rn[[RN16]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store16_rn[[RN16]]\\n@@ -238,6 +238,6 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         retq\\n ; CHECK-NEXT: [[FAIL]]:\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store16\\n+; CHECK-NEXT:         jmp     __asan_report_store16@PLT\\n \\n declare void @llvm.asan.check.memaccess(i8*, i32 immarg)\"}, {\"sha\": \"4b2e6a80e87a33fa8b7ecb5c5152d8a6aae339e1\", \"filename\": \"llvm/test/CodeGen/X86/asan-check-memaccess-or.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-or.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/cf53c6c9710617ea465863e117dda695af2c3ebb/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-or.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fasan-check-memaccess-or.ll?ref=cf53c6c9710617ea465863e117dda695af2c3ebb\", \"patch\": \"@@ -172,7 +172,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store1\\n+; CHECK-NEXT:         jmp     __asan_report_store1@PLT\\n \\n ; CHECK:              .type   __asan_check_store2_rn[[RN2]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store2_rn[[RN2]]\\n@@ -195,7 +195,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store2\\n+; CHECK-NEXT:         jmp     __asan_report_store2@PLT\\n \\n ; CHECK:              .type   __asan_check_store4_rn[[RN4]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store4_rn[[RN4]]\\n@@ -218,7 +218,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         popq    %rcx\\n ; CHECK-NEXT:         jl      [[RET]]\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store4\\n+; CHECK-NEXT:         jmp     __asan_report_store4@PLT\\n \\n ; CHECK:              .type   __asan_check_store8_rn[[RN8]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store8_rn[[RN8]]\\n@@ -233,7 +233,7 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         retq\\n ; CHECK-NEXT: [[FAIL]]:\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store8\\n+; CHECK-NEXT:         jmp     __asan_report_store8@PLT\\n \\n ; CHECK:              .type   __asan_check_store16_rn[[RN16]],@function\\n ; CHECK-NEXT:         .weak   __asan_check_store16_rn[[RN16]]\\n@@ -248,6 +248,6 @@ define void @load16(i128* nocapture readonly %x) {\\n ; CHECK-NEXT:         retq\\n ; CHECK-NEXT: [[FAIL]]:\\n ; CHECK-NEXT:         movq    [[REG:.*]], %rdi\\n-; CHECK-NEXT:         jmp     __asan_report_store16\\n+; CHECK-NEXT:         jmp     __asan_report_store16@PLT\\n \\n declare void @llvm.asan.check.memaccess(i8*, i32 immarg)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lYmE3NjA1NmEzNjRkMjA2ZGU3ZjBhYzk0NGM4NjAxYzk4OGI2NDA1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/eba76056a364d206de7f0ac944c8601c988b6405", "content": "{\"sha\": \"eba76056a364d206de7f0ac944c8601c988b6405\", \"node_id\": \"C_kwDOBITxeNoAKGViYTc2MDU2YTM2NGQyMDZkZTdmMGFjOTQ0Yzg2MDFjOTg4YjY0MDU\", \"commit\": {\"author\": {\"name\": \"Sjoerd Meijer\", \"email\": \"sjoerd.meijer@arm.com\", \"date\": \"2021-09-27T07:39:53Z\"}, \"committer\": {\"name\": \"Sjoerd Meijer\", \"email\": \"sjoerd.meijer@arm.com\", \"date\": \"2021-09-27T13:58:53Z\"}, \"message\": \"[FuncSpec] Don't specialise (or crash) on poison or constexpr values\\n\\nFunction specialization was crashing on poison values and constexpr values.\\nThe problem is that these values are not added to the solver, so it crashes\\nwhen a lookup is performed for these values. This fixes that by not\\nspecialising on these values. For poison that is obvious, but for constexpr\\nthis is a change in behaviour. Thus, in one way this is a bit of a stopgap, but\\nspecialising on constexpr values wasn't done very intentionally, and need some\\nmore work and tests if we wanted to support this.\\n\\nAs a follow up, we need to look if the solver should exit more gracefully and\\nreturn a \\\"don't know\\\", or that it should really support these constexprs.\\n\\nThis should fix PR51600 (https://bugs.llvm.org/show_bug.cgi?id=51600).\\n\\nDifferential Revision: https://reviews.llvm.org/D110529\", \"tree\": {\"sha\": \"cdfc1898bc9924ed80848288dea1dd6fb00b249c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/cdfc1898bc9924ed80848288dea1dd6fb00b249c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/eba76056a364d206de7f0ac944c8601c988b6405\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/eba76056a364d206de7f0ac944c8601c988b6405\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/eba76056a364d206de7f0ac944c8601c988b6405\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/eba76056a364d206de7f0ac944c8601c988b6405/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"ebee606e38451124b03e2adb3374703d51a09fcf\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ebee606e38451124b03e2adb3374703d51a09fcf\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ebee606e38451124b03e2adb3374703d51a09fcf\"}], \"stats\": {\"total\": 148, \"additions\": 115, \"deletions\": 33}, \"files\": [{\"sha\": \"0d2d55aa0cf7b4bc93c998ecff668e91e83185c0\", \"filename\": \"llvm/lib/Transforms/IPO/FunctionSpecialization.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Flib%2FTransforms%2FIPO%2FFunctionSpecialization.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Flib%2FTransforms%2FIPO%2FFunctionSpecialization.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FFunctionSpecialization.cpp?ref=eba76056a364d206de7f0ac944c8601c988b6405\", \"patch\": \"@@ -675,6 +675,11 @@ class FunctionSpecializer {\\n         continue;\\n \\n       auto *V = CS.getArgOperand(A->getArgNo());\\n+      if (isa<PoisonValue>(V))\\n+        return false;\\n+      if (isa<ConstantExpr>(V))\\n+        return false;\\n+\\n       // TrackValueOfGlobalVariable only tracks scalar global variables.\\n       if (auto *GV = dyn_cast<GlobalVariable>(V)) {\\n         // Check if we want to specialize on the address of non-constant\"}, {\"sha\": \"d5420108e733a589bc12c1b06dfc79afe405c687\", \"filename\": \"llvm/test/Transforms/FunctionSpecialization/function-specialization-constant-expression.ll\", \"status\": \"modified\", \"additions\": 24, \"deletions\": 33, \"changes\": 57, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression.ll?ref=eba76056a364d206de7f0ac944c8601c988b6405\", \"patch\": \"@@ -9,15 +9,37 @@\\n %struct = type { i8, i16, i32, i64, i64}\\n @Global = internal constant %struct {i8 0, i16 1, i32 2, i64 3, i64 4}\\n \\n+define internal i64 @func2(i64 *%x) {\\n+; CHECK-LABEL: @func2(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[VAL:%.*]] = ptrtoint i64* [[X:%.*]] to i64\\n+; CHECK-NEXT:    ret i64 [[VAL]]\\n+;\\n+entry:\\n+  %val = ptrtoint i64* %x to i64\\n+  ret i64 %val\\n+}\\n+\\n+define internal i64 @func(i64 *%x, i64 (i64*)* %binop) {\\n+; CHECK-LABEL: @func(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = call i64 [[BINOP:%.*]](i64* [[X:%.*]])\\n+; CHECK-NEXT:    ret i64 [[TMP0]]\\n+;\\n+entry:\\n+  %tmp0 = call i64 %binop(i64* %x)\\n+  ret i64 %tmp0\\n+}\\n+\\n define internal i64 @zoo(i1 %flag) {\\n ; CHECK-LABEL: @zoo(\\n ; CHECK-NEXT:  entry:\\n ; CHECK-NEXT:    br i1 [[FLAG:%.*]], label [[PLUS:%.*]], label [[MINUS:%.*]]\\n ; CHECK:       plus:\\n-; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @func2.1(i64* getelementptr inbounds ([[STRUCT:%.*]], %struct* @Global, i32 0, i32 3))\\n+; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @func2(i64* getelementptr inbounds ([[STRUCT:%.*]], %struct* @Global, i32 0, i32 3))\\n ; CHECK-NEXT:    br label [[MERGE:%.*]]\\n ; CHECK:       minus:\\n-; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @func2.2(i64* getelementptr inbounds ([[STRUCT]], %struct* @Global, i32 0, i32 4))\\n+; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @func2(i64* getelementptr inbounds ([[STRUCT]], %struct* @Global, i32 0, i32 4))\\n ; CHECK-NEXT:    br label [[MERGE]]\\n ; CHECK:       merge:\\n ; CHECK-NEXT:    [[TMP2:%.*]] = phi i64 [ [[TMP0]], [[PLUS]] ], [ [[TMP1]], [[MINUS]] ]\\n@@ -41,27 +63,6 @@ merge:\\n   ret i64 %tmp2\\n }\\n \\n-define internal i64 @func2(i64 *%x) {\\n-; CHECK-LABEL: @func2(\\n-; CHECK-NEXT:  entry:\\n-; CHECK-NEXT:    [[VAL:%.*]] = ptrtoint i64* [[X:%.*]] to i64\\n-; CHECK-NEXT:    ret i64 [[VAL]]\\n-;\\n-entry:\\n-  %val = ptrtoint i64* %x to i64\\n-  ret i64 %val\\n-}\\n-\\n-define internal i64 @func(i64 *%x, i64 (i64*)* %binop) {\\n-; CHECK-LABEL: @func(\\n-; CHECK-NEXT:  entry:\\n-; CHECK-NEXT:    [[TMP0:%.*]] = call i64 [[BINOP:%.*]](i64* [[X:%.*]])\\n-; CHECK-NEXT:    ret i64 [[TMP0]]\\n-;\\n-entry:\\n-  %tmp0 = call i64 %binop(i64* %x)\\n-  ret i64 %tmp0\\n-}\\n \\n define i64 @main() {\\n ; CHECK-LABEL: @main(\\n@@ -75,13 +76,3 @@ define i64 @main() {\\n   %3 = add i64 %1, %2\\n   ret i64 %3\\n }\\n-\\n-; CHECK-LABEL: define internal i64 @func2.1(\\n-; CHECK-NEXT:  entry:\\n-; CHECK-NEXT:    ret i64 ptrtoint (i64* getelementptr inbounds (%struct, %struct* @Global, i32 0, i32 3) to i64)\\n-; CHECK-NEXT:  }\\n-\\n-; CHECK-LABEL: define internal i64 @func2.2(\\n-; CHECK-NEXT:  entry:\\n-; CHECK-NEXT:    ret i64 ptrtoint (i64* getelementptr inbounds (%struct, %struct* @Global, i32 0, i32 4) to i64)\\n-; CHECK-NEXT:  }\"}, {\"sha\": \"0f3c79cb8e9f1efd4903676b3cfea33ded73b63a\", \"filename\": \"llvm/test/Transforms/FunctionSpecialization/function-specialization-constant-expression2.ll\", \"status\": \"added\", \"additions\": 44, \"deletions\": 0, \"changes\": 44, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-constant-expression2.ll?ref=eba76056a364d206de7f0ac944c8601c988b6405\", \"patch\": \"@@ -0,0 +1,44 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt -function-specialization -force-function-specialization -S < %s | FileCheck %s\\n+\\n+; Check that we don't crash and specialise on a constant expression.\\n+\\n+%struct.pluto = type { %struct.spam }\\n+%struct.quux = type { i16 }\\n+%struct.spam = type { i16 }\\n+\\n+@global.5 = external dso_local global [4 x %struct.pluto], align 1\\n+@global.12 = external global %struct.quux, align 1\\n+\\n+define internal i16 @wobble.972(%struct.quux* byval(%struct.quux) align 1 %arg, i16 %arg1, %struct.spam* byval(%struct.spam) align 1 %arg2, %struct.quux* byval(%struct.quux) align 1 %arg3) #4 {\\n+; CHECK-LABEL: @wobble.972(\\n+; CHECK-NEXT:  bb:\\n+; CHECK-NEXT:    [[TMP34:%.*]] = bitcast %struct.spam* [[ARG2:%.*]] to i16*\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb:\\n+  %tmp34 = bitcast %struct.spam* %arg2 to i16*\\n+  unreachable\\n+}\\n+\\n+define internal i16 @snork() {\\n+; CHECK-LABEL: @snork(\\n+; CHECK-NEXT:  bb4:\\n+; CHECK-NEXT:    [[TMP:%.*]] = call i16 @wobble.972(%struct.quux* byval([[STRUCT_QUUX:%.*]]) align 1 undef, i16 undef, %struct.spam* byval([[STRUCT_SPAM:%.*]]) align 1 getelementptr inbounds ([4 x %struct.pluto], [4 x %struct.pluto]* @global.5, i32 0, i32 3, i32 0), %struct.quux* byval([[STRUCT_QUUX]]) align 1 @global.12)\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb4:\\n+  %tmp = call i16 @wobble.972(%struct.quux* byval(%struct.quux) align 1 undef, i16 undef, %struct.spam* byval(%struct.spam) align 1 getelementptr inbounds ([4 x %struct.pluto], [4 x %struct.pluto]* @global.5, i32 0, i32 3, i32 0), %struct.quux* byval(%struct.quux) align 1 @global.12)\\n+  unreachable\\n+}\\n+\\n+define i16 @main() {\\n+; CHECK-LABEL: @main(\\n+; CHECK-NEXT:  bb:\\n+; CHECK-NEXT:    [[TMP:%.*]] = call i16 @snork()\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb:\\n+  %tmp = call i16 @snork()\\n+  unreachable\\n+}\"}, {\"sha\": \"d359deedcc496b7ca654619a460de3acb496a994\", \"filename\": \"llvm/test/Transforms/FunctionSpecialization/function-specialization-poison.ll\", \"status\": \"added\", \"additions\": 42, \"deletions\": 0, \"changes\": 42, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-poison.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/eba76056a364d206de7f0ac944c8601c988b6405/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-poison.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FFunctionSpecialization%2Ffunction-specialization-poison.ll?ref=eba76056a364d206de7f0ac944c8601c988b6405\", \"patch\": \"@@ -0,0 +1,42 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n+; RUN: opt -function-specialization -force-function-specialization -S < %s | FileCheck %s\\n+\\n+; Check that we don't crash and specialise on a poison value.\\n+\\n+%struct.quux = type { i16 }\\n+%struct.spam = type { i16 }\\n+\\n+@global.12 = external global %struct.quux, align 1\\n+\\n+define internal i16 @wobble(%struct.spam* byval(%struct.spam) %arg2) {\\n+; CHECK-LABEL: @wobble(\\n+; CHECK-NEXT:  bb:\\n+; CHECK-NEXT:    [[C:%.*]] = bitcast %struct.spam* [[ARG2:%.*]] to i16*\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb:\\n+  %C = bitcast %struct.spam* %arg2 to i16*\\n+  unreachable\\n+}\\n+\\n+define internal i16 @snork() {\\n+; CHECK-LABEL: @snork(\\n+; CHECK-NEXT:  bb4:\\n+; CHECK-NEXT:    [[B:%.*]] = call i16 @wobble(%struct.spam* poison)\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb4:\\n+  %B = call i16 @wobble(%struct.spam* poison)\\n+  unreachable\\n+}\\n+\\n+define i16 @main() {\\n+; CHECK-LABEL: @main(\\n+; CHECK-NEXT:  bb:\\n+; CHECK-NEXT:    [[A:%.*]] = call i16 @snork()\\n+; CHECK-NEXT:    unreachable\\n+;\\n+bb:\\n+  %A = call i16 @snork()\\n+  unreachable\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yZGQ4ODM0MzljNzg4NjE4MjkwMmMwYWExN2IzNGMwYThlZDg4YjY2Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/2dd883439c7886182902c0aa17b34c0a8ed88b66", "content": "{\"sha\": \"2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"node_id\": \"C_kwDOBITxeNoAKDJkZDg4MzQzOWM3ODg2MTgyOTAyYzBhYTE3YjM0YzBhOGVkODhiNjY\", \"commit\": {\"author\": {\"name\": \"Wesley Wiser\", \"email\": \"wesleywiser@microsoft.com\", \"date\": \"2021-09-29T18:36:13Z\"}, \"committer\": {\"name\": \"Reid Kleckner\", \"email\": \"rnk@google.com\", \"date\": \"2021-09-29T18:42:28Z\"}, \"message\": \"[Mangler] Calculate the argument list byte count suffix correctly when returning large values\\n\\n`__stdcall`, `__fastcall` and `__vectorcall` return large values via a\\nhidden pointer argument. However, the size of that argument should not\\nbe included in the argument list byte count suffix added to the\\nfunction's decorated name.\\n\\nThis patch fixes that issue so that LLVM generates the same decorated\\nname as MSVC does.\\n\\nMSVC example: https://godbolt.org/z/nc35MKPhr\\n\\nReviewed By: rnk\\n\\nDifferential Revision: https://reviews.llvm.org/D110719\", \"tree\": {\"sha\": \"a07dbae8a6daef767f0c94fe6f09a27ce1bd4e37\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a07dbae8a6daef767f0c94fe6f09a27ce1bd4e37\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2dd883439c7886182902c0aa17b34c0a8ed88b66/comments\", \"author\": {\"login\": \"wesleywiser\", \"id\": 831192, \"node_id\": \"MDQ6VXNlcjgzMTE5Mg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/831192?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/wesleywiser\", \"html_url\": \"https://github.com/wesleywiser\", \"followers_url\": \"https://api.github.com/users/wesleywiser/followers\", \"following_url\": \"https://api.github.com/users/wesleywiser/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/wesleywiser/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/wesleywiser/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/wesleywiser/subscriptions\", \"organizations_url\": \"https://api.github.com/users/wesleywiser/orgs\", \"repos_url\": \"https://api.github.com/users/wesleywiser/repos\", \"events_url\": \"https://api.github.com/users/wesleywiser/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/wesleywiser/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rnk\", \"id\": 50126, \"node_id\": \"MDQ6VXNlcjUwMTI2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/50126?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rnk\", \"html_url\": \"https://github.com/rnk\", \"followers_url\": \"https://api.github.com/users/rnk/followers\", \"following_url\": \"https://api.github.com/users/rnk/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rnk/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rnk/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rnk/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rnk/orgs\", \"repos_url\": \"https://api.github.com/users/rnk/repos\", \"events_url\": \"https://api.github.com/users/rnk/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rnk/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"385b2189cc4446745e1ea4ac803c22b3daef73ec\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/385b2189cc4446745e1ea4ac803c22b3daef73ec\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/385b2189cc4446745e1ea4ac803c22b3daef73ec\"}], \"stats\": {\"total\": 23, \"additions\": 21, \"deletions\": 2}, \"files\": [{\"sha\": \"2399ea27ee9d474b387ce8f828f37edce7dbd349\", \"filename\": \"llvm/lib/IR/Mangler.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Flib%2FIR%2FMangler.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Flib%2FIR%2FMangler.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FMangler.cpp?ref=2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"patch\": \"@@ -99,6 +99,11 @@ static void addByteCountSuffix(raw_ostream &OS, const Function *F,\\n   const unsigned PtrSize = DL.getPointerSize();\\n \\n   for (const Argument &A : F->args()) {\\n+    // For the purposes of the byte count suffix, structs returned by pointer\\n+    // do not count as function arguments.\\n+    if (A.hasStructRetAttr())\\n+      continue;\\n+\\n     // 'Dereference' type in case of byval or inalloca parameter attribute.\\n     uint64_t AllocSize = A.hasPassPointeeByValueCopyAttr() ?\\n       A.getPassPointeeByValueCopySize(DL) :\"}, {\"sha\": \"25107c5d93f25a8a943d6afc81ae7badd1e407e1\", \"filename\": \"llvm/test/CodeGen/X86/stdcall.ll\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Ftest%2FCodeGen%2FX86%2Fstdcall.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Ftest%2FCodeGen%2FX86%2Fstdcall.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fstdcall.ll?ref=2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"patch\": \"@@ -18,6 +18,21 @@ entry:\\n   ret i32 %a\\n }\\n \\n+%struct.large_type = type { i64, i64, i64 }\\n+\\n+define x86_stdcallcc void @ReturnLargeType(%struct.large_type* noalias nocapture sret(%struct.large_type) align 8 %agg.result) {\\n+; CHECK: ReturnLargeType@0:\\n+; CHECK: retl\\n+entry:\\n+  %a = getelementptr inbounds %struct.large_type, %struct.large_type* %agg.result, i32 0, i32 0\\n+  store i64 123, i64* %a, align 8\\n+  %b = getelementptr inbounds %struct.large_type, %struct.large_type* %agg.result, i32 0, i32 1\\n+  store i64 456, i64* %b, align 8\\n+  %c = getelementptr inbounds %struct.large_type, %struct.large_type* %agg.result, i32 0, i32 2\\n+  store i64 789, i64* %c, align 8\\n+  ret void\\n+}\\n+\\n @B = global %0 { void (...)* bitcast (void ()* @MyFunc to void (...)*) }, align 4\\n ; CHECK: _B:\\n ; CHECK: .long _MyFunc@0\"}, {\"sha\": \"b8d53eaf0bba2e89d86c2d100ed3ca5070c16ef8\", \"filename\": \"llvm/test/CodeGen/X86/vectorcall.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Ftest%2FCodeGen%2FX86%2Fvectorcall.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/2dd883439c7886182902c0aa17b34c0a8ed88b66/llvm%2Ftest%2FCodeGen%2FX86%2Fvectorcall.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fvectorcall.ll?ref=2dd883439c7886182902c0aa17b34c0a8ed88b66\", \"patch\": \"@@ -172,8 +172,7 @@ declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture r\\n declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1)\\n \\n define x86_vectorcallcc void @test_mixed_7(%struct.HVA5* noalias sret(%struct.HVA5) %agg.result) {\\n-; X86-LABEL: test_mixed_7@@4\\n-; X64-LABEL: test_mixed_7@@8\\n+; CHECK-LABEL: test_mixed_7@@0\\n ; X64:         mov{{[ql]}}\\t%rcx, %rax\\n ; CHECK:       movaps\\t%xmm{{[0-9]}}, 64(%{{rcx|eax}})\\n ; CHECK:       movaps\\t%xmm{{[0-9]}}, 48(%{{rcx|eax}})\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lMmI4MzhkZDkxMzIwMDcwMmYyZWVlMjkxMDBhNzg4YzA1NzNiYzUwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e2b838dd913200702f2eee29100a788c0573bc50", "content": "{\"sha\": \"e2b838dd913200702f2eee29100a788c0573bc50\", \"node_id\": \"C_kwDOBITxeNoAKGUyYjgzOGRkOTEzMjAwNzAyZjJlZWUyOTEwMGE3ODhjMDU3M2JjNTA\", \"commit\": {\"author\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse@sony.com\", \"date\": \"2021-10-04T22:01:28Z\"}, \"committer\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse@sony.com\", \"date\": \"2021-10-04T22:03:02Z\"}, \"message\": \"[DebugInfo][InstrRef] Accept landingpad block arguments\\n\\nThis patch makes instruction-referencing accepts an additional scenario\\nwhere values can be read from physical registers at the start of blocks. As\\nfar as I was aware, this only happened:\\n * With arguments in the entry block,\\n * With constant physical registers,\\n\\nTo which this patch adds a third case:\\n * With exception-handling landing-pad blocks\\n\\nIn the attached test: the operand of the dbg.value traces back to the\\n\\\"landingpad\\\" instruction, which becomes some copies from physregs. Right\\nnow, that's deemed unacceptable, and the assertion fires. The fix is to\\njust accept this scenario; this is a case where the value in question is\\ndefined by a register and a position, not by an instruction that defines\\nit. Reading it with a DBG_PHI is the correct behaviour, there isn't a\\nnon-copy instruction that we can refer to.\\n\\nDifferential Revision: https://reviews.llvm.org/D109005\", \"tree\": {\"sha\": \"50941f98f30a46f7b5225a75194efb4f2260c0bd\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/50941f98f30a46f7b5225a75194efb4f2260c0bd\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e2b838dd913200702f2eee29100a788c0573bc50\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e2b838dd913200702f2eee29100a788c0573bc50\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e2b838dd913200702f2eee29100a788c0573bc50\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e2b838dd913200702f2eee29100a788c0573bc50/comments\", \"author\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2568286892310877f24313c8e1626e415f9ae406\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2568286892310877f24313c8e1626e415f9ae406\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2568286892310877f24313c8e1626e415f9ae406\"}], \"stats\": {\"total\": 100, \"additions\": 96, \"deletions\": 4}, \"files\": [{\"sha\": \"bd13c280a82f63b41b4bebcf5005df92ec893e27\", \"filename\": \"llvm/lib/CodeGen/MachineFunction.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e2b838dd913200702f2eee29100a788c0573bc50/llvm%2Flib%2FCodeGen%2FMachineFunction.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e2b838dd913200702f2eee29100a788c0573bc50/llvm%2Flib%2FCodeGen%2FMachineFunction.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FMachineFunction.cpp?ref=e2b838dd913200702f2eee29100a788c0573bc50\", \"patch\": \"@@ -1148,11 +1148,11 @@ auto MachineFunction::salvageCopySSA(MachineInstr &MI)\\n     // locations.\\n     ;\\n   } else {\\n-    // Assert that this is the entry block. If it isn't, then there is some\\n-    // code construct we don't recognise that deals with physregs across\\n-    // blocks.\\n+    // Assert that this is the entry block, or an EH pad. If it isn't, then\\n+    // there is some code construct we don't recognise that deals with physregs\\n+    // across blocks.\\n     assert(!State.first.isVirtual());\\n-    assert(&*InsertBB.getParent()->begin() == &InsertBB);\\n+    assert(&*InsertBB.getParent()->begin() == &InsertBB || InsertBB.isEHPad());\\n   }\\n \\n   // Create DBG_PHI for specified physreg.\"}, {\"sha\": \"49894989fb5658f6e1dfb4bec023871ac104c929\", \"filename\": \"llvm/test/DebugInfo/X86/instr-ref-eh-landing-pad.ll\", \"status\": \"added\", \"additions\": 92, \"deletions\": 0, \"changes\": 92, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e2b838dd913200702f2eee29100a788c0573bc50/llvm%2Ftest%2FDebugInfo%2FX86%2Finstr-ref-eh-landing-pad.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e2b838dd913200702f2eee29100a788c0573bc50/llvm%2Ftest%2FDebugInfo%2FX86%2Finstr-ref-eh-landing-pad.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Finstr-ref-eh-landing-pad.ll?ref=e2b838dd913200702f2eee29100a788c0573bc50\", \"patch\": \"@@ -0,0 +1,92 @@\\n+; RUN: llc %s -stop-before=finalize-isel -o -\\\\\\n+; RUN:     -experimental-debug-variable-locations \\\\\\n+; RUN:   | FileCheck %s\\n+;\\n+; Test that instruction referencing variable locations can cope with exception\\n+; landing pads. Variable locations can be derived from the ABI-defined arguments\\n+; to landing-pad blocks, which should be treated much like argument locations.\\n+; This gloriously simple piece of C++:\\n+;\\n+;    void a() try { a(); } catch (int *&) { }\\n+;\\n+; Produces the code below. A nameless variable is attached to the landing-pad\\n+; record %0 (via %3), which salvages back to the entry to the landing pad. We\\n+; should place a DBG_PHI at that point. Instead of crashing.\\n+;\\n+; CHECK-LABEL: bb.1.lpad (landing-pad):\\n+; CHECK:       DBG_PHI $rax, 1\\n+; CHECK-NEXT:  EH_LABEL\\n+\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+@_ZTIPi = external dso_local constant i8*\\n+\\n+define dso_local void @_Z1av() local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) !dbg !8 {\\n+entry:\\n+  invoke void @_Z1av()\\n+          to label %try.cont unwind label %lpad, !dbg !17\\n+\\n+lpad:                                             ; preds = %entry\\n+  %0 = landingpad { i8*, i32 }\\n+          catch i8* bitcast (i8** @_ZTIPi to i8*), !dbg !19\\n+  %1 = extractvalue { i8*, i32 } %0, 1, !dbg !19\\n+  %2 = tail call i32 @llvm.eh.typeid.for(i8* bitcast (i8** @_ZTIPi to i8*)) #3, !dbg !20\\n+  %matches = icmp eq i32 %1, %2, !dbg !20\\n+  br i1 %matches, label %catch, label %eh.resume, !dbg !20\\n+\\n+catch:                                            ; preds = %lpad\\n+  %3 = extractvalue { i8*, i32 } %0, 0, !dbg !19\\n+  %4 = tail call i8* @__cxa_begin_catch(i8* %3) #3, !dbg !20\\n+  call void @llvm.dbg.value(metadata i8* %3, metadata !13, metadata !DIExpression(DW_OP_plus_uconst, 32, DW_OP_stack_value)), !dbg !21\\n+  tail call void @__cxa_end_catch() #3, !dbg !22\\n+  br label %try.cont, !dbg !22\\n+\\n+try.cont:                                         ; preds = %entry, %catch\\n+  ret void, !dbg !24\\n+\\n+eh.resume:                                        ; preds = %lpad\\n+  resume { i8*, i32 } %0, !dbg !20\\n+}\\n+\\n+declare dso_local i32 @__gxx_personality_v0(...)\\n+\\n+; Function Attrs: nofree nosync nounwind readnone\\n+declare i32 @llvm.eh.typeid.for(i8*) #1\\n+\\n+declare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\\n+\\n+declare dso_local void @__cxa_end_catch() local_unnamed_addr\\n+\\n+; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\\n+declare void @llvm.dbg.value(metadata, metadata, metadata) #2\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!3, !4, !5, !6}\\n+!llvm.ident = !{!7}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: \\\"clang\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\".\\\")\\n+!2 = !{}\\n+!3 = !{i32 7, !\\\"Dwarf Version\\\", i32 4}\\n+!4 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!5 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!6 = !{i32 7, !\\\"uwtable\\\", i32 1}\\n+!7 = !{!\\\"clang\\\"}\\n+!8 = distinct !DISubprogram(name: \\\"a\\\", linkageName: \\\"_Z1av\\\", scope: !9, file: !9, line: 1, type: !10, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)\\n+!9 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\"\\\")\\n+!10 = !DISubroutineType(types: !11)\\n+!11 = !{null}\\n+!12 = !{!13}\\n+!13 = !DILocalVariable(scope: !8, file: !9, line: 1, type: !14)\\n+!14 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !15, size: 64)\\n+!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)\\n+!16 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!17 = !DILocation(line: 1, column: 16, scope: !18)\\n+!18 = distinct !DILexicalBlock(scope: !8, file: !9, line: 1, column: 14)\\n+!19 = !DILocation(line: 2, column: 1, scope: !18)\\n+!20 = !DILocation(line: 1, column: 21, scope: !18)\\n+!21 = !DILocation(line: 0, scope: !8)\\n+!22 = !DILocation(line: 2, column: 1, scope: !23)\\n+!23 = distinct !DILexicalBlock(scope: !8, file: !9, line: 1, column: 38)\\n+!24 = !DILocation(line: 2, column: 1, scope: !8)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8yNTkzOTBkZTlhZjY1OWUyNDMyYzViMmFmMDQxZWM2NTc2YzFiMjZkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/259390de9af659e2432c5b2af041ec6576c1b26d", "content": "{\"sha\": \"259390de9af659e2432c5b2af041ec6576c1b26d\", \"node_id\": \"C_kwDOBITxeNoAKDI1OTM5MGRlOWFmNjU5ZTI0MzJjNWIyYWYwNDFlYzY1NzZjMWIyNmQ\", \"commit\": {\"author\": {\"name\": \"Arthur Eubanks\", \"email\": \"aeubanks@google.com\", \"date\": \"2021-10-06T21:32:08Z\"}, \"committer\": {\"name\": \"Arthur Eubanks\", \"email\": \"aeubanks@google.com\", \"date\": \"2021-10-11T20:30:47Z\"}, \"message\": \"[LCG] Don't skip invalidation of LazyCallGraph if CFG analyses are preserved\\n\\nThe CFG being changed and the overall call graph are not related, we can introduce/remove calls without changing the CFG.\\n\\nResolves one of the issues in PR51946.\\n\\nReviewed By: asbirlea\\n\\nDifferential Revision: https://reviews.llvm.org/D111275\", \"tree\": {\"sha\": \"e4aff4a8637a27a945c8de30bbbe4a5604564fa3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/e4aff4a8637a27a945c8de30bbbe4a5604564fa3\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/259390de9af659e2432c5b2af041ec6576c1b26d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/259390de9af659e2432c5b2af041ec6576c1b26d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/259390de9af659e2432c5b2af041ec6576c1b26d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/259390de9af659e2432c5b2af041ec6576c1b26d/comments\", \"author\": {\"login\": \"aeubanks\", \"id\": 10538900, \"node_id\": \"MDQ6VXNlcjEwNTM4OTAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/10538900?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aeubanks\", \"html_url\": \"https://github.com/aeubanks\", \"followers_url\": \"https://api.github.com/users/aeubanks/followers\", \"following_url\": \"https://api.github.com/users/aeubanks/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aeubanks/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aeubanks/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aeubanks/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aeubanks/orgs\", \"repos_url\": \"https://api.github.com/users/aeubanks/repos\", \"events_url\": \"https://api.github.com/users/aeubanks/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aeubanks/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"aeubanks\", \"id\": 10538900, \"node_id\": \"MDQ6VXNlcjEwNTM4OTAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/10538900?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aeubanks\", \"html_url\": \"https://github.com/aeubanks\", \"followers_url\": \"https://api.github.com/users/aeubanks/followers\", \"following_url\": \"https://api.github.com/users/aeubanks/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aeubanks/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aeubanks/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aeubanks/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aeubanks/orgs\", \"repos_url\": \"https://api.github.com/users/aeubanks/repos\", \"events_url\": \"https://api.github.com/users/aeubanks/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aeubanks/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"59441c73296e7c489ac1d71ffda2de3060bdd4f8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/59441c73296e7c489ac1d71ffda2de3060bdd4f8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/59441c73296e7c489ac1d71ffda2de3060bdd4f8\"}], \"stats\": {\"total\": 13, \"additions\": 11, \"deletions\": 2}, \"files\": [{\"sha\": \"8170c32a2d157126256a279111fd233d0ba7f60d\", \"filename\": \"llvm/lib/Analysis/LazyCallGraph.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/259390de9af659e2432c5b2af041ec6576c1b26d/llvm%2Flib%2FAnalysis%2FLazyCallGraph.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/259390de9af659e2432c5b2af041ec6576c1b26d/llvm%2Flib%2FAnalysis%2FLazyCallGraph.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLazyCallGraph.cpp?ref=259390de9af659e2432c5b2af041ec6576c1b26d\", \"patch\": \"@@ -220,8 +220,7 @@ bool LazyCallGraph::invalidate(Module &, const PreservedAnalyses &PA,\\n   // Check whether the analysis, all analyses on functions, or the function's\\n   // CFG have been preserved.\\n   auto PAC = PA.getChecker<llvm::LazyCallGraphAnalysis>();\\n-  return !(PAC.preserved() || PAC.preservedSet<AllAnalysesOn<Module>>() ||\\n-           PAC.preservedSet<CFGAnalyses>());\\n+  return !(PAC.preserved() || PAC.preservedSet<AllAnalysesOn<Module>>());\\n }\\n \\n LazyCallGraph &LazyCallGraph::operator=(LazyCallGraph &&G) {\"}, {\"sha\": \"b2f421086d3cf866b4cb1d5b78d2ff9f76cbeba0\", \"filename\": \"llvm/test/Analysis/LazyCallGraph/invalidate.ll\", \"status\": \"added\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/259390de9af659e2432c5b2af041ec6576c1b26d/llvm%2Ftest%2FAnalysis%2FLazyCallGraph%2Finvalidate.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/259390de9af659e2432c5b2af041ec6576c1b26d/llvm%2Ftest%2FAnalysis%2FLazyCallGraph%2Finvalidate.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FLazyCallGraph%2Finvalidate.ll?ref=259390de9af659e2432c5b2af041ec6576c1b26d\", \"patch\": \"@@ -0,0 +1,10 @@\\n+; Make sure we invalidate lcg even when preserving domtree\\n+; RUN: opt -passes='require<lcg>,function(instcombine)' -debug-pass-manager -disable-output < %s 2>&1 | FileCheck %s\\n+\\n+; CHECK: Invalidating {{.*}} LazyCallGraphAnalysis\\n+\\n+define void @f() {\\n+lbl:\\n+  %a = add i32 1, 2\\n+  unreachable\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80YzU3MDJjYjEyM2I4ZmQ3MDU5ODJjNjM4ZmIxOGM5OTlmNjlkNjNhIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/4c5702cb123b8fd705982c638fb18c999f69d63a", "content": "{\"sha\": \"4c5702cb123b8fd705982c638fb18c999f69d63a\", \"node_id\": \"C_kwDOBITxeNoAKDRjNTcwMmNiMTIzYjhmZDcwNTk4MmM2MzhmYjE4Yzk5OWY2OWQ2M2E\", \"commit\": {\"author\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-10-13T03:23:22Z\"}, \"committer\": {\"name\": \"Philip Reames\", \"email\": \"listmail@philipreames.com\", \"date\": \"2021-10-13T03:25:00Z\"}, \"message\": \"Fix bug introduced with 6f34839 (poison flags on floating point ops)\\n\\nThe newly introduced API for checking whether poison comes solely from flags which can be dropped was out of sync.  This was noticed by a reviewer post commit.\\n\\nFor the moment, disable the floating point flags.  In a follow up change, I plan to add support in dropPoisonGeneratingFlags, but that deserves to be a change of it's own.\", \"tree\": {\"sha\": \"fc17606b11360becf1296d07b0c13e25c7d6f593\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/fc17606b11360becf1296d07b0c13e25c7d6f593\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/4c5702cb123b8fd705982c638fb18c999f69d63a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4c5702cb123b8fd705982c638fb18c999f69d63a\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4c5702cb123b8fd705982c638fb18c999f69d63a\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4c5702cb123b8fd705982c638fb18c999f69d63a/comments\", \"author\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"preames\", \"id\": 1007061, \"node_id\": \"MDQ6VXNlcjEwMDcwNjE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1007061?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/preames\", \"html_url\": \"https://github.com/preames\", \"followers_url\": \"https://api.github.com/users/preames/followers\", \"following_url\": \"https://api.github.com/users/preames/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/preames/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/preames/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/preames/subscriptions\", \"organizations_url\": \"https://api.github.com/users/preames/orgs\", \"repos_url\": \"https://api.github.com/users/preames/repos\", \"events_url\": \"https://api.github.com/users/preames/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/preames/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a54f4eae0e1d0ef5adccdcf9f6c2b518dc1101aa\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a54f4eae0e1d0ef5adccdcf9f6c2b518dc1101aa\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a54f4eae0e1d0ef5adccdcf9f6c2b518dc1101aa\"}], \"stats\": {\"total\": 24, \"additions\": 19, \"deletions\": 5}, \"files\": [{\"sha\": \"ece7c88fb3466412b8daec2d8dbb168ed0b3091c\", \"filename\": \"llvm/lib/Analysis/ValueTracking.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 5, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c5702cb123b8fd705982c638fb18c999f69d63a/llvm%2Flib%2FAnalysis%2FValueTracking.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c5702cb123b8fd705982c638fb18c999f69d63a/llvm%2Flib%2FAnalysis%2FValueTracking.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FValueTracking.cpp?ref=4c5702cb123b8fd705982c638fb18c999f69d63a\", \"patch\": \"@@ -4959,11 +4959,14 @@ static bool canCreateUndefOrPoison(const Operator *Op, bool PoisonOnly,\\n     if (const auto *ExactOp = dyn_cast<PossiblyExactOperator>(Op))\\n       if (ExactOp->isExact())\\n         return true;\\n-    if (const auto *FP = dyn_cast<FPMathOperator>(Op)) {\\n-      auto FMF = FP->getFastMathFlags();\\n-      if (FMF.noNaNs() || FMF.noInfs())\\n-        return true;\\n-    }\\n+  }\\n+\\n+  // TODO: this should really be under the ConsiderFlags block, but currently\\n+  // these are not dropped by dropPoisonGeneratingFlags\\n+  if (const auto *FP = dyn_cast<FPMathOperator>(Op)) {\\n+    auto FMF = FP->getFastMathFlags();\\n+    if (FMF.noNaNs() || FMF.noInfs())\\n+      return true;\\n   }\\n \\n   unsigned Opcode = Op->getOpcode();\"}, {\"sha\": \"a2c788098ff32cc41531bb0f6c4cec59e4c0be10\", \"filename\": \"llvm/test/Transforms/InstCombine/freeze.ll\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4c5702cb123b8fd705982c638fb18c999f69d63a/llvm%2Ftest%2FTransforms%2FInstCombine%2Ffreeze.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4c5702cb123b8fd705982c638fb18c999f69d63a/llvm%2Ftest%2FTransforms%2FInstCombine%2Ffreeze.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Ffreeze.ll?ref=4c5702cb123b8fd705982c638fb18c999f69d63a\", \"patch\": \"@@ -374,3 +374,14 @@ define i8* @propagate_drop_gep2(i8* %arg, i64 %unknown) {\\n   ret i8* %v1.fr\\n }\\n \\n+\\n+define float @propagate_drop_fadd(float %arg) {\\n+; CHECK-LABEL: @propagate_drop_fadd(\\n+; CHECK-NEXT:    [[V1:%.*]] = fadd ninf float [[ARG:%.*]], 2.000000e+00\\n+; CHECK-NEXT:    [[V1_FR:%.*]] = freeze float [[V1]]\\n+; CHECK-NEXT:    ret float [[V1_FR]]\\n+;\\n+  %v1 = fadd ninf float %arg, 2.0\\n+  %v1.fr = freeze float %v1\\n+  ret float %v1.fr\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81ZWMyMzg2MzMyMGNhMTJiZmFiYjZkY2ZmMWQwNDI1Y2I2MTRiN2E1Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/5ec23863320ca12bfabb6dcff1d0425cb614b7a5", "content": "{\"sha\": \"5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"node_id\": \"C_kwDOBITxeNoAKDVlYzIzODYzMzIwY2ExMmJmYWJiNmRjZmYxZDA0MjVjYjYxNGI3YTU\", \"commit\": {\"author\": {\"name\": \"Dmitry Makogon\", \"email\": \"d.makogon@g.nsu.ru\", \"date\": \"2021-11-09T09:51:41Z\"}, \"committer\": {\"name\": \"Dmitry Makogon\", \"email\": \"d.makogon@g.nsu.ru\", \"date\": \"2021-11-09T10:42:29Z\"}, \"message\": \"Reapply db28934 \\\"[IndVars] Pass TTI to replaceCongruentIVs\\\"\\n\\nThis reapplies patch db289340c841990055a164e8eb2a3b5ff25677bf.\\n\\nThe test failures on build with expensive checks caused by the patch happened due\\nto the fact that we sorted loop Phis in replaceCongruentIVs using llvm::sort,\\nwhich shuffles the given container if the expensive checks are enabled,\\nso equivalent Phis in the sorted vector had different mutual order from run\\nto run. replaceCongruentIVs tries to replace narrow Phis with truncations\\nof wide ones. In some test cases there were several Phis with the same\\nwidth, so if their order differs from run to run, the narrow Phis would\\nbe replaced with a different Phi, depending on the shuffling result.\\n\\nThe patch ae14fae0ff4304022beda5ab484f84ac0fdda807 fixed this issue by\\nreplacing llvm::sort with llvm::stable_sort.\", \"tree\": {\"sha\": \"dea3aa2248ba2c59eb9afc7dea72600d16578622\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/dea3aa2248ba2c59eb9afc7dea72600d16578622\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/comments\", \"author\": {\"login\": \"d-makogon\", \"id\": 70710515, \"node_id\": \"MDQ6VXNlcjcwNzEwNTE1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/70710515?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/d-makogon\", \"html_url\": \"https://github.com/d-makogon\", \"followers_url\": \"https://api.github.com/users/d-makogon/followers\", \"following_url\": \"https://api.github.com/users/d-makogon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/d-makogon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/d-makogon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/d-makogon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/d-makogon/orgs\", \"repos_url\": \"https://api.github.com/users/d-makogon/repos\", \"events_url\": \"https://api.github.com/users/d-makogon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/d-makogon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"d-makogon\", \"id\": 70710515, \"node_id\": \"MDQ6VXNlcjcwNzEwNTE1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/70710515?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/d-makogon\", \"html_url\": \"https://github.com/d-makogon\", \"followers_url\": \"https://api.github.com/users/d-makogon/followers\", \"following_url\": \"https://api.github.com/users/d-makogon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/d-makogon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/d-makogon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/d-makogon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/d-makogon/orgs\", \"repos_url\": \"https://api.github.com/users/d-makogon/repos\", \"events_url\": \"https://api.github.com/users/d-makogon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/d-makogon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"acbefbf19f6c41854cca2e7df6507b345c502ec6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/acbefbf19f6c41854cca2e7df6507b345c502ec6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/acbefbf19f6c41854cca2e7df6507b345c502ec6\"}], \"stats\": {\"total\": 576, \"additions\": 286, \"deletions\": 290}, \"files\": [{\"sha\": \"dfdb6b20f62eb74434421e2d1db0b3f81995cb02\", \"filename\": \"llvm/lib/Transforms/Scalar/IndVarSimplify.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FIndVarSimplify.cpp?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -1924,7 +1924,7 @@ bool IndVarSimplify::run(Loop *L) {\\n   }\\n \\n   // Eliminate redundant IV cycles.\\n-  NumElimIV += Rewriter.replaceCongruentIVs(L, DT, DeadInsts);\\n+  NumElimIV += Rewriter.replaceCongruentIVs(L, DT, DeadInsts, TTI);\\n \\n   // Try to convert exit conditions to unsigned and rotate computation\\n   // out of the loop.  Note: Handles invalidation internally if needed.\"}, {\"sha\": \"0669719f0ac20bc13b1101a78deb2ba62a570590\", \"filename\": \"llvm/test/Transforms/GVN/gvn-eliminate-duplicating-phis.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 9, \"changes\": 17, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FGVN%2Fgvn-eliminate-duplicating-phis.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FGVN%2Fgvn-eliminate-duplicating-phis.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVN%2Fgvn-eliminate-duplicating-phis.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -47,11 +47,10 @@ define void @non_local_load_with_iv_zext(i32* %ptr) {\\n ; CHECK-NEXT:    br label [[LOOP:%.*]]\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]\\n-; CHECK-NEXT:    [[VAL:%.*]] = phi i32 [ [[VAL_INC:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]\\n-; CHECK-NEXT:    [[VAL_INC]] = add nuw nsw i32 [[VAL]], 1\\n-; CHECK-NEXT:    store i32 [[VAL_INC]], i32* [[PTR]], align 4\\n-; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n+; CHECK-NEXT:    [[INDVARS:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n+; CHECK-NEXT:    store i32 [[INDVARS]], i32* [[PTR]], align 4\\n+; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i64 [[INDVARS_IV]], 1000\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[EXIT:%.*]], label [[LOOP]]\\n ; CHECK:       exit:\\n@@ -85,12 +84,12 @@ define void @two_non_local_loads(i32* %ptr1) {\\n ; CHECK-NEXT:    br label [[LOOP:%.*]]\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]\\n-; CHECK-NEXT:    [[VAL2:%.*]] = phi i32 [ [[VAL2_INC:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]\\n-; CHECK-NEXT:    [[VAL2_INC]] = add nuw nsw i32 [[VAL2]], 1\\n-; CHECK-NEXT:    store i32 [[VAL2_INC]], i32* [[PTR1]], align 4\\n-; CHECK-NEXT:    store i32 [[VAL2_INC]], i32* [[PTR2]], align 4\\n-; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n+; CHECK-NEXT:    [[INDVARS4:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n+; CHECK-NEXT:    store i32 [[INDVARS4]], i32* [[PTR1]], align 4\\n+; CHECK-NEXT:    [[INDVARS:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n+; CHECK-NEXT:    store i32 [[INDVARS]], i32* [[PTR2]], align 4\\n+; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i64 [[INDVARS_IV]], 1000\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[EXIT:%.*]], label [[LOOP]]\\n ; CHECK:       exit:\"}, {\"sha\": \"75dd912590473c3eae231339643bd513f3a2be8c\", \"filename\": \"llvm/test/Transforms/IndVarSimplify/X86/pr27133.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2FX86%2Fpr27133.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2FX86%2Fpr27133.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2FX86%2Fpr27133.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -9,11 +9,11 @@ define i32 @fn2() personality i32 (...)* @__CxxFrameHandler3 {\\n ; CHECK-NEXT:    br label [[FOR_COND:%.*]]\\n ; CHECK:       for.cond:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC:%.*]] ], [ 0, [[ENTRY:%.*]] ]\\n-; CHECK-NEXT:    [[C_0:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_INC]] ], [ 0, [[ENTRY]] ]\\n+; CHECK-NEXT:    [[INDVARS1:%.*]] = trunc i64 [[INDVARS_IV]] to i32\\n ; CHECK-NEXT:    invoke void @fn1(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    to label [[FOR_INC]] unwind label [[CATCH_DISPATCH:%.*]]\\n ; CHECK:       catch.dispatch:\\n-; CHECK-NEXT:    [[C_0_LCSSA:%.*]] = phi i32 [ [[C_0]], [[FOR_COND]] ]\\n+; CHECK-NEXT:    [[C_0_LCSSA:%.*]] = phi i32 [ [[INDVARS1]], [[FOR_COND]] ]\\n ; CHECK-NEXT:    [[TMP0:%.*]] = catchswitch within none [label %catch] unwind to caller\\n ; CHECK:       catch:\\n ; CHECK-NEXT:    [[TMP1:%.*]] = catchpad within [[TMP0]] [i8* null, i32 64, i8* null]\\n@@ -22,7 +22,6 @@ define i32 @fn2() personality i32 (...)* @__CxxFrameHandler3 {\\n ; CHECK-NEXT:    ret i32 [[C_0_LCSSA]]\\n ; CHECK:       for.inc:\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i64 [[INDVARS_IV]], 1\\n-; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[C_0]], 1\\n ; CHECK-NEXT:    br label [[FOR_COND]]\\n ;\\n entry:\"}, {\"sha\": \"9f8a07063afd70531a3835f8f5f7170e8aaaeea3\", \"filename\": \"llvm/test/Transforms/IndVarSimplify/widen-loop-comp.ll\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 17, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fwiden-loop-comp.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fwiden-loop-comp.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fwiden-loop-comp.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -103,17 +103,17 @@ define void @test2([8 x i8]* %a, i8* %b, i8 %limit) {\\n ; CHECK:       for.cond1.preheader.preheader:\\n ; CHECK-NEXT:    br label [[FOR_COND1_PREHEADER:%.*]]\\n ; CHECK:       for.cond1.preheader.us:\\n-; CHECK-NEXT:    [[INDVARS_IV2:%.*]] = phi i64 [ 0, [[FOR_COND1_PREHEADER_US_PREHEADER]] ], [ [[INDVARS_IV_NEXT3:%.*]], [[FOR_INC13_US:%.*]] ]\\n+; CHECK-NEXT:    [[INDVARS_IV3:%.*]] = phi i64 [ 0, [[FOR_COND1_PREHEADER_US_PREHEADER]] ], [ [[INDVARS_IV_NEXT4:%.*]], [[FOR_INC13_US:%.*]] ]\\n ; CHECK-NEXT:    br i1 true, label [[FOR_BODY4_LR_PH_US:%.*]], label [[FOR_INC13_US]]\\n ; CHECK:       for.inc13.us.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_INC13_US]]\\n ; CHECK:       for.inc13.us:\\n-; CHECK-NEXT:    [[INDVARS_IV_NEXT3]] = add nuw nsw i64 [[INDVARS_IV2]], 1\\n-; CHECK-NEXT:    [[EXITCOND4:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT3]], 4\\n-; CHECK-NEXT:    br i1 [[EXITCOND4]], label [[FOR_COND1_PREHEADER_US]], label [[FOR_END_LOOPEXIT1:%.*]]\\n+; CHECK-NEXT:    [[INDVARS_IV_NEXT4]] = add nuw nsw i64 [[INDVARS_IV3]], 1\\n+; CHECK-NEXT:    [[EXITCOND6:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT4]], 4\\n+; CHECK-NEXT:    br i1 [[EXITCOND6]], label [[FOR_COND1_PREHEADER_US]], label [[FOR_END_LOOPEXIT1:%.*]]\\n ; CHECK:       for.body4.us:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY4_LR_PH_US]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY4_US:%.*]] ]\\n-; CHECK-NEXT:    [[ARRAYIDX6_US:%.*]] = getelementptr inbounds [8 x i8], [8 x i8]* [[A:%.*]], i64 [[INDVARS_IV2]], i64 [[INDVARS_IV]]\\n+; CHECK-NEXT:    [[ARRAYIDX6_US:%.*]] = getelementptr inbounds [8 x i8], [8 x i8]* [[A:%.*]], i64 [[INDVARS_IV3]], i64 [[INDVARS_IV]]\\n ; CHECK-NEXT:    [[TMP0:%.*]] = load i8, i8* [[ARRAYIDX6_US]], align 1\\n ; CHECK-NEXT:    [[IDXPROM7_US:%.*]] = zext i8 [[TMP0]] to i64\\n ; CHECK-NEXT:    [[ARRAYIDX8_US:%.*]] = getelementptr inbounds i8, i8* [[B:%.*]], i64 [[IDXPROM7_US]]\\n@@ -549,14 +549,14 @@ define i32 @test11(i32 %start, i32* %p, i32* %q) {\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[BACKEDGE:%.*]] ], [ [[TMP0]], [[ENTRY:%.*]] ]\\n ; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[INDVARS_IV]], -1\\n+; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp eq i64 [[INDVARS_IV]], 0\\n ; CHECK-NEXT:    br i1 [[COND]], label [[EXIT:%.*]], label [[BACKEDGE]]\\n ; CHECK:       backedge:\\n ; CHECK-NEXT:    [[STORE_ADDR:%.*]] = getelementptr i32, i32* [[P:%.*]], i64 [[TMP1]]\\n ; CHECK-NEXT:    store i32 1, i32* [[STORE_ADDR]], align 4\\n ; CHECK-NEXT:    [[STOP:%.*]] = load i32, i32* [[Q:%.*]], align 4\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i32 [[STOP]], 0\\n-; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[LOOP]], label [[FAILURE:%.*]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret i32 0\\n@@ -599,11 +599,11 @@ define i32 @test12(i32 %start, i32* %p, i32* %q) {\\n ; CHECK-NEXT:    br i1 [[COND]], label [[EXIT:%.*]], label [[BACKEDGE]]\\n ; CHECK:       backedge:\\n ; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[INDVARS_IV]], -1\\n+; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    [[STORE_ADDR:%.*]] = getelementptr i32, i32* [[P:%.*]], i64 [[TMP1]]\\n ; CHECK-NEXT:    store i32 1, i32* [[STORE_ADDR]], align 4\\n ; CHECK-NEXT:    [[STOP:%.*]] = load i32, i32* [[Q:%.*]], align 4\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i32 [[STOP]], 0\\n-; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[LOOP]], label [[FAILURE:%.*]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret i32 0\\n@@ -862,8 +862,8 @@ define i32 @test16_unsigned_pos1(i32 %start, i32* %p, i32* %q, i32 %x) {\\n ; CHECK-NEXT:    [[TMP3:%.*]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    br i1 [[COND]], label [[EXIT:%.*]], label [[GUARDED:%.*]]\\n ; CHECK:       guarded:\\n-; CHECK-NEXT:    [[ICMP_USER_WIDE4:%.*]] = icmp ult i64 [[TMP1]], [[TMP2]]\\n-; CHECK-NEXT:    br i1 [[ICMP_USER_WIDE4]], label [[BACKEDGE]], label [[SIDE_EXIT:%.*]]\\n+; CHECK-NEXT:    [[ICMP_USER_WIDE5:%.*]] = icmp ult i64 [[TMP1]], [[TMP2]]\\n+; CHECK-NEXT:    br i1 [[ICMP_USER_WIDE5]], label [[BACKEDGE]], label [[SIDE_EXIT:%.*]]\\n ; CHECK:       backedge:\\n ; CHECK-NEXT:    [[STORE_ADDR:%.*]] = getelementptr i32, i32* [[P:%.*]], i64 [[TMP3]]\\n ; CHECK-NEXT:    store i32 1, i32* [[STORE_ADDR]], align 4\\n@@ -1266,13 +1266,13 @@ define i32 @test17(i32* %p, i32 %len) {\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[BACKEDGE:%.*]] ], [ [[TMP0]], [[ENTRY:%.*]] ]\\n ; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[INDVARS_IV]], -1\\n+; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    [[COND_1:%.*]] = icmp eq i64 [[INDVARS_IV]], 0\\n ; CHECK-NEXT:    br i1 [[COND_1]], label [[EXIT:%.*]], label [[BACKEDGE]]\\n ; CHECK:       backedge:\\n ; CHECK-NEXT:    [[ADDR:%.*]] = getelementptr inbounds i32, i32* [[P:%.*]], i64 [[TMP1]]\\n ; CHECK-NEXT:    [[LOADED:%.*]] = load atomic i32, i32* [[ADDR]] unordered, align 4\\n ; CHECK-NEXT:    [[COND_2:%.*]] = icmp eq i32 [[LOADED]], 0\\n-; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; CHECK-NEXT:    br i1 [[COND_2]], label [[FAILURE:%.*]], label [[LOOP]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 -1 to i32\\n@@ -1312,10 +1312,9 @@ define void @test18() {\\n ; CHECK-NEXT:    br label [[LOOP:%.*]]\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]\\n-; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ [[IV_NEXT:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]\\n-; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i32 [[IV]], 1\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n-; CHECK-NEXT:    call void @bar(i32 [[IV_NEXT]])\\n+; CHECK-NEXT:    [[INDVARS2:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n+; CHECK-NEXT:    call void @bar(i32 [[INDVARS2]])\\n ; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i64 [[INDVARS_IV]], 1000\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[EXIT:%.*]], label [[LOOP]]\\n@@ -1412,11 +1411,10 @@ define void @test21(i32* %ptr) {\\n ; CHECK-NEXT:    br label [[LOOP:%.*]]\\n ; CHECK:       loop:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]\\n-; CHECK-NEXT:    [[VAL:%.*]] = phi i32 [ [[VAL_INC:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]\\n-; CHECK-NEXT:    [[VAL_INC]] = add nuw nsw i32 [[VAL]], 1\\n-; CHECK-NEXT:    store i32 [[VAL_INC]], i32* [[PTR]], align 4\\n-; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n+; CHECK-NEXT:    [[INDVARS:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n+; CHECK-NEXT:    store i32 [[INDVARS]], i32* [[PTR]], align 4\\n+; CHECK-NEXT:    call void @foo(i64 [[INDVARS_IV]])\\n ; CHECK-NEXT:    [[LOOP_COND:%.*]] = icmp eq i64 [[INDVARS_IV]], 1000\\n ; CHECK-NEXT:    br i1 [[LOOP_COND]], label [[EXIT:%.*]], label [[LOOP]]\\n ; CHECK:       exit:\"}, {\"sha\": \"1ab06e8ba51b4882dd5269a567f84854b19375d4\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/gather_scatter.ll\", \"status\": \"modified\", \"additions\": 229, \"deletions\": 229, \"changes\": 458, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\"}, {\"sha\": \"c5953b621d055f73e2ddea60ba8fdd6b4093867c\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/X86/pixel-splat.ll\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 6, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fpixel-splat.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fpixel-splat.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fpixel-splat.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -26,7 +26,7 @@ define void @loop_or(i8* noalias %pIn, i32* noalias %pOut, i32 %s) {\\n ; CHECK:       for.body.preheader:\\n ; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[S]] to i64\\n ; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[S]], 8\\n-; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY_PREHEADER4:%.*]], label [[VECTOR_PH:%.*]]\\n+; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY_PREHEADER5:%.*]], label [[VECTOR_PH:%.*]]\\n ; CHECK:       vector.ph:\\n ; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 4294967288\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n@@ -37,9 +37,9 @@ define void @loop_or(i8* noalias %pIn, i32* noalias %pOut, i32 %s) {\\n ; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i8>, <4 x i8>* [[TMP1]], align 1\\n ; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i8, i8* [[TMP0]], i64 4\\n ; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i8* [[TMP2]] to <4 x i8>*\\n-; CHECK-NEXT:    [[WIDE_LOAD3:%.*]] = load <4 x i8>, <4 x i8>* [[TMP3]], align 1\\n+; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <4 x i8>, <4 x i8>* [[TMP3]], align 1\\n ; CHECK-NEXT:    [[TMP4:%.*]] = zext <4 x i8> [[WIDE_LOAD]] to <4 x i32>\\n-; CHECK-NEXT:    [[TMP5:%.*]] = zext <4 x i8> [[WIDE_LOAD3]] to <4 x i32>\\n+; CHECK-NEXT:    [[TMP5:%.*]] = zext <4 x i8> [[WIDE_LOAD4]] to <4 x i32>\\n ; CHECK-NEXT:    [[TMP6:%.*]] = mul nuw nsw <4 x i32> [[TMP4]], <i32 65792, i32 65792, i32 65792, i32 65792>\\n ; CHECK-NEXT:    [[TMP7:%.*]] = mul nuw nsw <4 x i32> [[TMP5]], <i32 65792, i32 65792, i32 65792, i32 65792>\\n ; CHECK-NEXT:    [[TMP8:%.*]] = or <4 x i32> [[TMP4]], <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>\\n@@ -57,12 +57,12 @@ define void @loop_or(i8* noalias %pIn, i32* noalias %pOut, i32 %s) {\\n ; CHECK-NEXT:    br i1 [[TMP16]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY_PREHEADER4]]\\n-; CHECK:       for.body.preheader4:\\n+; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY_PREHEADER5]]\\n+; CHECK:       for.body.preheader5:\\n ; CHECK-NEXT:    [[INDVARS_IV_PH:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[N_VEC]], [[MIDDLE_BLOCK]] ]\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK:       for.body:\\n-; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER4]] ]\\n+; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER5]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIN]], i64 [[INDVARS_IV]]\\n ; CHECK-NEXT:    [[TMP17:%.*]] = load i8, i8* [[ARRAYIDX]], align 1\\n ; CHECK-NEXT:    [[CONV:%.*]] = zext i8 [[TMP17]] to i32\"}, {\"sha\": \"70238d98b2cd7666bd444ffd63a6ff30697854a6\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/X86/vdiv.ll\", \"status\": \"modified\", \"additions\": 25, \"deletions\": 25, \"changes\": 50, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5ec23863320ca12bfabb6dcff1d0425cb614b7a5/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll?ref=5ec23863320ca12bfabb6dcff1d0425cb614b7a5\", \"patch\": \"@@ -19,28 +19,28 @@ define void @vdiv(double* %x, double* %y, double %a, i32 %N) #0 {\\n ; CHECK:       for.body.preheader:\\n ; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64\\n ; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[N]], 16\\n-; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY_PREHEADER17:%.*]], label [[VECTOR_MEMCHECK:%.*]]\\n+; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY_PREHEADER18:%.*]], label [[VECTOR_MEMCHECK:%.*]]\\n ; CHECK:       vector.memcheck:\\n ; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr double, double* [[X:%.*]], i64 [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    [[SCEVGEP6:%.*]] = getelementptr double, double* [[Y:%.*]], i64 [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt double* [[SCEVGEP6]], [[X]]\\n+; CHECK-NEXT:    [[SCEVGEP7:%.*]] = getelementptr double, double* [[Y:%.*]], i64 [[WIDE_TRIP_COUNT]]\\n+; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt double* [[SCEVGEP7]], [[X]]\\n ; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ugt double* [[SCEVGEP]], [[Y]]\\n ; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]\\n-; CHECK-NEXT:    br i1 [[FOUND_CONFLICT]], label [[FOR_BODY_PREHEADER17]], label [[VECTOR_PH:%.*]]\\n+; CHECK-NEXT:    br i1 [[FOUND_CONFLICT]], label [[FOR_BODY_PREHEADER18]], label [[VECTOR_PH:%.*]]\\n ; CHECK:       vector.ph:\\n ; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 4294967280\\n ; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> poison, double [[A:%.*]], i32 0\\n ; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> poison, <4 x i32> zeroinitializer\\n-; CHECK-NEXT:    [[BROADCAST_SPLATINSERT11:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n-; CHECK-NEXT:    [[BROADCAST_SPLAT12:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT11]], <4 x double> poison, <4 x i32> zeroinitializer\\n-; CHECK-NEXT:    [[BROADCAST_SPLATINSERT13:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n-; CHECK-NEXT:    [[BROADCAST_SPLAT14:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT13]], <4 x double> poison, <4 x i32> zeroinitializer\\n-; CHECK-NEXT:    [[BROADCAST_SPLATINSERT15:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n-; CHECK-NEXT:    [[BROADCAST_SPLAT16:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT15]], <4 x double> poison, <4 x i32> zeroinitializer\\n+; CHECK-NEXT:    [[BROADCAST_SPLATINSERT12:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n+; CHECK-NEXT:    [[BROADCAST_SPLAT13:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT12]], <4 x double> poison, <4 x i32> zeroinitializer\\n+; CHECK-NEXT:    [[BROADCAST_SPLATINSERT14:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n+; CHECK-NEXT:    [[BROADCAST_SPLAT15:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT14]], <4 x double> poison, <4 x i32> zeroinitializer\\n+; CHECK-NEXT:    [[BROADCAST_SPLATINSERT16:%.*]] = insertelement <4 x double> poison, double [[A]], i32 0\\n+; CHECK-NEXT:    [[BROADCAST_SPLAT17:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT16]], <4 x double> poison, <4 x i32> zeroinitializer\\n ; CHECK-NEXT:    [[TMP0:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT]]\\n-; CHECK-NEXT:    [[TMP1:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT12]]\\n-; CHECK-NEXT:    [[TMP2:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT14]]\\n-; CHECK-NEXT:    [[TMP3:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT16]]\\n+; CHECK-NEXT:    [[TMP1:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT13]]\\n+; CHECK-NEXT:    [[TMP2:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT15]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT17]]\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n@@ -49,17 +49,17 @@ define void @vdiv(double* %x, double* %y, double %a, i32 %N) #0 {\\n ; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x double>, <4 x double>* [[TMP5]], align 8, !tbaa [[TBAA3:![0-9]+]], !alias.scope !7\\n ; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds double, double* [[TMP4]], i64 4\\n ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast double* [[TMP6]] to <4 x double>*\\n-; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x double>, <4 x double>* [[TMP7]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n+; CHECK-NEXT:    [[WIDE_LOAD9:%.*]] = load <4 x double>, <4 x double>* [[TMP7]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n ; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, double* [[TMP4]], i64 8\\n ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast double* [[TMP8]] to <4 x double>*\\n-; CHECK-NEXT:    [[WIDE_LOAD9:%.*]] = load <4 x double>, <4 x double>* [[TMP9]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n+; CHECK-NEXT:    [[WIDE_LOAD10:%.*]] = load <4 x double>, <4 x double>* [[TMP9]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n ; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, double* [[TMP4]], i64 12\\n ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast double* [[TMP10]] to <4 x double>*\\n-; CHECK-NEXT:    [[WIDE_LOAD10:%.*]] = load <4 x double>, <4 x double>* [[TMP11]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n+; CHECK-NEXT:    [[WIDE_LOAD11:%.*]] = load <4 x double>, <4 x double>* [[TMP11]], align 8, !tbaa [[TBAA3]], !alias.scope !7\\n ; CHECK-NEXT:    [[TMP12:%.*]] = fmul fast <4 x double> [[WIDE_LOAD]], [[TMP0]]\\n-; CHECK-NEXT:    [[TMP13:%.*]] = fmul fast <4 x double> [[WIDE_LOAD8]], [[TMP1]]\\n-; CHECK-NEXT:    [[TMP14:%.*]] = fmul fast <4 x double> [[WIDE_LOAD9]], [[TMP2]]\\n-; CHECK-NEXT:    [[TMP15:%.*]] = fmul fast <4 x double> [[WIDE_LOAD10]], [[TMP3]]\\n+; CHECK-NEXT:    [[TMP13:%.*]] = fmul fast <4 x double> [[WIDE_LOAD9]], [[TMP1]]\\n+; CHECK-NEXT:    [[TMP14:%.*]] = fmul fast <4 x double> [[WIDE_LOAD10]], [[TMP2]]\\n+; CHECK-NEXT:    [[TMP15:%.*]] = fmul fast <4 x double> [[WIDE_LOAD11]], [[TMP3]]\\n ; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds double, double* [[X]], i64 [[INDEX]]\\n ; CHECK-NEXT:    [[TMP17:%.*]] = bitcast double* [[TMP16]] to <4 x double>*\\n ; CHECK-NEXT:    store <4 x double> [[TMP12]], <4 x double>* [[TMP17]], align 8, !tbaa [[TBAA3]], !alias.scope !10, !noalias !7\\n@@ -77,8 +77,8 @@ define void @vdiv(double* %x, double* %y, double %a, i32 %N) #0 {\\n ; CHECK-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY_PREHEADER17]]\\n-; CHECK:       for.body.preheader17:\\n+; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY_PREHEADER18]]\\n+; CHECK:       for.body.preheader18:\\n ; CHECK-NEXT:    [[INDVARS_IV_PH:%.*]] = phi i64 [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ [[N_VEC]], [[MIDDLE_BLOCK]] ]\\n ; CHECK-NEXT:    [[TMP25:%.*]] = xor i64 [[INDVARS_IV_PH]], -1\\n ; CHECK-NEXT:    [[TMP26:%.*]] = add nsw i64 [[TMP25]], [[WIDE_TRIP_COUNT]]\\n@@ -101,17 +101,17 @@ define void @vdiv(double* %x, double* %y, double %a, i32 %N) #0 {\\n ; CHECK-NEXT:    [[PROL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[PROL_ITER_SUB]], 0\\n ; CHECK-NEXT:    br i1 [[PROL_ITER_CMP_NOT]], label [[FOR_BODY_PROL_LOOPEXIT]], label [[FOR_BODY_PROL]], !llvm.loop [[LOOP14:![0-9]+]]\\n ; CHECK:       for.body.prol.loopexit:\\n-; CHECK-NEXT:    [[INDVARS_IV_UNR:%.*]] = phi i64 [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER17]] ], [ [[INDVARS_IV_NEXT_PROL]], [[FOR_BODY_PROL]] ]\\n+; CHECK-NEXT:    [[INDVARS_IV_UNR:%.*]] = phi i64 [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER18]] ], [ [[INDVARS_IV_NEXT_PROL]], [[FOR_BODY_PROL]] ]\\n ; CHECK-NEXT:    [[TMP29:%.*]] = icmp ult i64 [[TMP26]], 3\\n-; CHECK-NEXT:    br i1 [[TMP29]], label [[FOR_END]], label [[FOR_BODY_PREHEADER17_NEW:%.*]]\\n-; CHECK:       for.body.preheader17.new:\\n+; CHECK-NEXT:    br i1 [[TMP29]], label [[FOR_END]], label [[FOR_BODY_PREHEADER18_NEW:%.*]]\\n+; CHECK:       for.body.preheader18.new:\\n ; CHECK-NEXT:    [[TMP30:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    [[TMP31:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    [[TMP32:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    [[TMP33:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK:       for.body:\\n-; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_UNR]], [[FOR_BODY_PREHEADER17_NEW]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY]] ]\\n+; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_UNR]], [[FOR_BODY_PREHEADER18_NEW]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[Y]], i64 [[INDVARS_IV]]\\n ; CHECK-NEXT:    [[T0:%.*]] = load double, double* [[ARRAYIDX]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[TMP34:%.*]] = fmul fast double [[T0]], [[TMP30]]\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iMDMxOWFiNzliZjU5NjY5ODAzY2MyNDc1ZmFlMWQxMmY4ZWVhY2E5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/b0319ab79bf59669803cc2475fae1d12f8eeaca9", "content": "{\"sha\": \"b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"node_id\": \"C_kwDOBITxeNoAKGIwMzE5YWI3OWJmNTk2Njk4MDNjYzI0NzVmYWUxZDEyZjhlZWFjYTk\", \"commit\": {\"author\": {\"name\": \"Fraser Cormack\", \"email\": \"fraser@codeplay.com\", \"date\": \"2021-11-30T12:28:45Z\"}, \"committer\": {\"name\": \"Fraser Cormack\", \"email\": \"fraser@codeplay.com\", \"date\": \"2021-12-13T10:46:32Z\"}, \"message\": \"[PR52475] Ensure a correct chain in copies to/from hidden sret parameter\\n\\nThis patch fixes an issue during SelectionDAG construction. When the\\ntarget is unable to lower the function's return value, a hidden sret\\nparameter is created. It is initialized and copied to a stored variable\\n(DemoteRegister) with CopyToReg and is later fetched with\\nCopyFromReg. The bug is that the chains used for each copy are\\ninconsistent, and thus in rare cases the scheduler may issue them out of\\norder.\\n\\nThe fix is to ensure that the CopyFromReg uses the DAG root which is set\\nas the chain corresponding to the initial CopyToReg.\\n\\nFixes https://llvm.org/PR52475\\n\\nReviewed By: craig.topper\\n\\nDifferential Revision: https://reviews.llvm.org/D114795\", \"tree\": {\"sha\": \"f1306d975da22061649e05cb73f6f636a5714fc1\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f1306d975da22061649e05cb73f6f636a5714fc1\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b0319ab79bf59669803cc2475fae1d12f8eeaca9/comments\", \"author\": {\"login\": \"frasercrmck\", \"id\": 1158422, \"node_id\": \"MDQ6VXNlcjExNTg0MjI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1158422?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/frasercrmck\", \"html_url\": \"https://github.com/frasercrmck\", \"followers_url\": \"https://api.github.com/users/frasercrmck/followers\", \"following_url\": \"https://api.github.com/users/frasercrmck/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/frasercrmck/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/frasercrmck/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/frasercrmck/subscriptions\", \"organizations_url\": \"https://api.github.com/users/frasercrmck/orgs\", \"repos_url\": \"https://api.github.com/users/frasercrmck/repos\", \"events_url\": \"https://api.github.com/users/frasercrmck/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/frasercrmck/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"frasercrmck\", \"id\": 1158422, \"node_id\": \"MDQ6VXNlcjExNTg0MjI=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1158422?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/frasercrmck\", \"html_url\": \"https://github.com/frasercrmck\", \"followers_url\": \"https://api.github.com/users/frasercrmck/followers\", \"following_url\": \"https://api.github.com/users/frasercrmck/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/frasercrmck/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/frasercrmck/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/frasercrmck/subscriptions\", \"organizations_url\": \"https://api.github.com/users/frasercrmck/orgs\", \"repos_url\": \"https://api.github.com/users/frasercrmck/repos\", \"events_url\": \"https://api.github.com/users/frasercrmck/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/frasercrmck/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"396370e889faf77324d4aea378739af66447ef97\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/396370e889faf77324d4aea378739af66447ef97\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/396370e889faf77324d4aea378739af66447ef97\"}], \"stats\": {\"total\": 853, \"additions\": 447, \"deletions\": 406}, \"files\": [{\"sha\": \"d0e2b7ee882d308e96b5ba0a56b966135ba052c9\", \"filename\": \"llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FSelectionDAGBuilder.cpp?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -1920,8 +1920,8 @@ void SelectionDAGBuilder::visitRet(const ReturnInst &I) {\\n                         DAG.getDataLayout().getAllocaAddrSpace()),\\n                     PtrValueVTs);\\n \\n-    SDValue RetPtr = DAG.getCopyFromReg(DAG.getEntryNode(), getCurSDLoc(),\\n-                                        DemoteReg, PtrValueVTs[0]);\\n+    SDValue RetPtr =\\n+        DAG.getCopyFromReg(Chain, getCurSDLoc(), DemoteReg, PtrValueVTs[0]);\\n     SDValue RetOp = getValue(I.getOperand(0));\\n \\n     SmallVector<EVT, 4> ValueVTs, MemVTs;\"}, {\"sha\": \"1afa7b94221ae951bd33b88e8150e68264b1e338\", \"filename\": \"llvm/test/CodeGen/RISCV/rvv/fixed-vectors-calling-conv-fastcc.ll\", \"status\": \"modified\", \"additions\": 26, \"deletions\": 26, \"changes\": 52, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv-fastcc.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv-fastcc.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv-fastcc.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -101,56 +101,56 @@ define fastcc <64 x i32> @ret_split_v64i32(<64 x i32>* %x) {\\n define fastcc <128 x i32> @ret_split_v128i32(<128 x i32>* %x) {\\n ; LMULMAX8-LABEL: ret_split_v128i32:\\n ; LMULMAX8:       # %bb.0:\\n-; LMULMAX8-NEXT:    li a2, 32\\n-; LMULMAX8-NEXT:    vsetvli zero, a2, e32, m8, ta, mu\\n-; LMULMAX8-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX8-NEXT:    addi a2, a1, 128\\n-; LMULMAX8-NEXT:    vle32.v v16, (a2)\\n-; LMULMAX8-NEXT:    addi a2, a1, 384\\n-; LMULMAX8-NEXT:    vle32.v v24, (a2)\\n-; LMULMAX8-NEXT:    addi a1, a1, 256\\n-; LMULMAX8-NEXT:    vle32.v v0, (a1)\\n+; LMULMAX8-NEXT:    li a3, 32\\n+; LMULMAX8-NEXT:    vsetvli zero, a3, e32, m8, ta, mu\\n+; LMULMAX8-NEXT:    vle32.v v8, (a2)\\n+; LMULMAX8-NEXT:    addi a2, a1, 256\\n+; LMULMAX8-NEXT:    vle32.v v16, (a1)\\n+; LMULMAX8-NEXT:    addi a1, a1, 384\\n+; LMULMAX8-NEXT:    vle32.v v24, (a1)\\n+; LMULMAX8-NEXT:    vle32.v v0, (a2)\\n+; LMULMAX8-NEXT:    vse32.v v16, (a0)\\n ; LMULMAX8-NEXT:    addi a1, a0, 384\\n ; LMULMAX8-NEXT:    vse32.v v24, (a1)\\n ; LMULMAX8-NEXT:    addi a1, a0, 256\\n ; LMULMAX8-NEXT:    vse32.v v0, (a1)\\n-; LMULMAX8-NEXT:    addi a1, a0, 128\\n-; LMULMAX8-NEXT:    vse32.v v16, (a1)\\n+; LMULMAX8-NEXT:    addi a0, a0, 128\\n ; LMULMAX8-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX8-NEXT:    ret\\n ;\\n ; LMULMAX4-LABEL: ret_split_v128i32:\\n ; LMULMAX4:       # %bb.0:\\n-; LMULMAX4-NEXT:    vsetivli zero, 16, e32, m4, ta, mu\\n-; LMULMAX4-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX4-NEXT:    addi a2, a1, 64\\n-; LMULMAX4-NEXT:    vle32.v v12, (a2)\\n+; LMULMAX4-NEXT:    vsetivli zero, 16, e32, m4, ta, mu\\n+; LMULMAX4-NEXT:    vle32.v v8, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 128\\n-; LMULMAX4-NEXT:    vle32.v v16, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v12, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 192\\n-; LMULMAX4-NEXT:    vle32.v v20, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v16, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 256\\n-; LMULMAX4-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v20, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 320\\n-; LMULMAX4-NEXT:    vle32.v v28, (a2)\\n-; LMULMAX4-NEXT:    addi a2, a1, 448\\n-; LMULMAX4-NEXT:    vle32.v v0, (a2)\\n-; LMULMAX4-NEXT:    addi a1, a1, 384\\n-; LMULMAX4-NEXT:    vle32.v v4, (a1)\\n+; LMULMAX4-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX4-NEXT:    addi a2, a1, 384\\n+; LMULMAX4-NEXT:    vle32.v v28, (a1)\\n+; LMULMAX4-NEXT:    addi a1, a1, 448\\n+; LMULMAX4-NEXT:    vle32.v v0, (a1)\\n+; LMULMAX4-NEXT:    vle32.v v4, (a2)\\n+; LMULMAX4-NEXT:    vse32.v v28, (a0)\\n ; LMULMAX4-NEXT:    addi a1, a0, 448\\n ; LMULMAX4-NEXT:    vse32.v v0, (a1)\\n ; LMULMAX4-NEXT:    addi a1, a0, 384\\n ; LMULMAX4-NEXT:    vse32.v v4, (a1)\\n ; LMULMAX4-NEXT:    addi a1, a0, 320\\n-; LMULMAX4-NEXT:    vse32.v v28, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 256\\n ; LMULMAX4-NEXT:    vse32.v v24, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 192\\n+; LMULMAX4-NEXT:    addi a1, a0, 256\\n ; LMULMAX4-NEXT:    vse32.v v20, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 128\\n+; LMULMAX4-NEXT:    addi a1, a0, 192\\n ; LMULMAX4-NEXT:    vse32.v v16, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 64\\n+; LMULMAX4-NEXT:    addi a1, a0, 128\\n ; LMULMAX4-NEXT:    vse32.v v12, (a1)\\n+; LMULMAX4-NEXT:    addi a0, a0, 64\\n ; LMULMAX4-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX4-NEXT:    ret\\n   %v = load <128 x i32>, <128 x i32>* %x\"}, {\"sha\": \"6c4c0e783854ea9094431734b7e8047b6a929654\", \"filename\": \"llvm/test/CodeGen/RISCV/rvv/fixed-vectors-calling-conv.ll\", \"status\": \"modified\", \"additions\": 122, \"deletions\": 122, \"changes\": 244, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Ffixed-vectors-calling-conv.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -233,254 +233,254 @@ define <64 x i32> @ret_split_v64i32(<64 x i32>* %x) {\\n define <128 x i32> @ret_split_v128i32(<128 x i32>* %x) {\\n ; LMULMAX8-LABEL: ret_split_v128i32:\\n ; LMULMAX8:       # %bb.0:\\n-; LMULMAX8-NEXT:    li a2, 32\\n-; LMULMAX8-NEXT:    vsetvli zero, a2, e32, m8, ta, mu\\n-; LMULMAX8-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX8-NEXT:    addi a2, a1, 128\\n-; LMULMAX8-NEXT:    vle32.v v16, (a2)\\n-; LMULMAX8-NEXT:    addi a2, a1, 384\\n-; LMULMAX8-NEXT:    vle32.v v24, (a2)\\n-; LMULMAX8-NEXT:    addi a1, a1, 256\\n-; LMULMAX8-NEXT:    vle32.v v0, (a1)\\n+; LMULMAX8-NEXT:    li a3, 32\\n+; LMULMAX8-NEXT:    vsetvli zero, a3, e32, m8, ta, mu\\n+; LMULMAX8-NEXT:    vle32.v v8, (a2)\\n+; LMULMAX8-NEXT:    addi a2, a1, 256\\n+; LMULMAX8-NEXT:    vle32.v v16, (a1)\\n+; LMULMAX8-NEXT:    addi a1, a1, 384\\n+; LMULMAX8-NEXT:    vle32.v v24, (a1)\\n+; LMULMAX8-NEXT:    vle32.v v0, (a2)\\n+; LMULMAX8-NEXT:    vse32.v v16, (a0)\\n ; LMULMAX8-NEXT:    addi a1, a0, 384\\n ; LMULMAX8-NEXT:    vse32.v v24, (a1)\\n ; LMULMAX8-NEXT:    addi a1, a0, 256\\n ; LMULMAX8-NEXT:    vse32.v v0, (a1)\\n-; LMULMAX8-NEXT:    addi a1, a0, 128\\n-; LMULMAX8-NEXT:    vse32.v v16, (a1)\\n+; LMULMAX8-NEXT:    addi a0, a0, 128\\n ; LMULMAX8-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX8-NEXT:    ret\\n ;\\n ; LMULMAX4-LABEL: ret_split_v128i32:\\n ; LMULMAX4:       # %bb.0:\\n-; LMULMAX4-NEXT:    vsetivli zero, 16, e32, m4, ta, mu\\n-; LMULMAX4-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX4-NEXT:    addi a2, a1, 64\\n-; LMULMAX4-NEXT:    vle32.v v12, (a2)\\n+; LMULMAX4-NEXT:    vsetivli zero, 16, e32, m4, ta, mu\\n+; LMULMAX4-NEXT:    vle32.v v8, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 128\\n-; LMULMAX4-NEXT:    vle32.v v16, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v12, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 192\\n-; LMULMAX4-NEXT:    vle32.v v20, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v16, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 256\\n-; LMULMAX4-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX4-NEXT:    vle32.v v20, (a2)\\n ; LMULMAX4-NEXT:    addi a2, a1, 320\\n-; LMULMAX4-NEXT:    vle32.v v28, (a2)\\n-; LMULMAX4-NEXT:    addi a2, a1, 448\\n-; LMULMAX4-NEXT:    vle32.v v0, (a2)\\n-; LMULMAX4-NEXT:    addi a1, a1, 384\\n-; LMULMAX4-NEXT:    vle32.v v4, (a1)\\n+; LMULMAX4-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX4-NEXT:    addi a2, a1, 384\\n+; LMULMAX4-NEXT:    vle32.v v28, (a1)\\n+; LMULMAX4-NEXT:    addi a1, a1, 448\\n+; LMULMAX4-NEXT:    vle32.v v0, (a1)\\n+; LMULMAX4-NEXT:    vle32.v v4, (a2)\\n+; LMULMAX4-NEXT:    vse32.v v28, (a0)\\n ; LMULMAX4-NEXT:    addi a1, a0, 448\\n ; LMULMAX4-NEXT:    vse32.v v0, (a1)\\n ; LMULMAX4-NEXT:    addi a1, a0, 384\\n ; LMULMAX4-NEXT:    vse32.v v4, (a1)\\n ; LMULMAX4-NEXT:    addi a1, a0, 320\\n-; LMULMAX4-NEXT:    vse32.v v28, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 256\\n ; LMULMAX4-NEXT:    vse32.v v24, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 192\\n+; LMULMAX4-NEXT:    addi a1, a0, 256\\n ; LMULMAX4-NEXT:    vse32.v v20, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 128\\n+; LMULMAX4-NEXT:    addi a1, a0, 192\\n ; LMULMAX4-NEXT:    vse32.v v16, (a1)\\n-; LMULMAX4-NEXT:    addi a1, a0, 64\\n+; LMULMAX4-NEXT:    addi a1, a0, 128\\n ; LMULMAX4-NEXT:    vse32.v v12, (a1)\\n+; LMULMAX4-NEXT:    addi a0, a0, 64\\n ; LMULMAX4-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX4-NEXT:    ret\\n ;\\n ; LMULMAX2-LABEL: ret_split_v128i32:\\n ; LMULMAX2:       # %bb.0:\\n-; LMULMAX2-NEXT:    vsetivli zero, 8, e32, m2, ta, mu\\n-; LMULMAX2-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX2-NEXT:    addi a2, a1, 32\\n-; LMULMAX2-NEXT:    vle32.v v10, (a2)\\n+; LMULMAX2-NEXT:    vsetivli zero, 8, e32, m2, ta, mu\\n+; LMULMAX2-NEXT:    vle32.v v8, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 64\\n-; LMULMAX2-NEXT:    vle32.v v12, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v10, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 96\\n-; LMULMAX2-NEXT:    vle32.v v14, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v12, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 128\\n-; LMULMAX2-NEXT:    vle32.v v16, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v14, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 160\\n-; LMULMAX2-NEXT:    vle32.v v18, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v16, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 192\\n-; LMULMAX2-NEXT:    vle32.v v20, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v18, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 224\\n-; LMULMAX2-NEXT:    vle32.v v22, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v20, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 256\\n-; LMULMAX2-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v22, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 288\\n-; LMULMAX2-NEXT:    vle32.v v26, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v24, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 320\\n-; LMULMAX2-NEXT:    vle32.v v28, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v26, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 352\\n-; LMULMAX2-NEXT:    vle32.v v30, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v28, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 384\\n-; LMULMAX2-NEXT:    vle32.v v0, (a2)\\n+; LMULMAX2-NEXT:    vle32.v v30, (a2)\\n ; LMULMAX2-NEXT:    addi a2, a1, 416\\n-; LMULMAX2-NEXT:    vle32.v v2, (a2)\\n-; LMULMAX2-NEXT:    addi a2, a1, 480\\n-; LMULMAX2-NEXT:    vle32.v v4, (a2)\\n-; LMULMAX2-NEXT:    addi a1, a1, 448\\n-; LMULMAX2-NEXT:    vle32.v v6, (a1)\\n+; LMULMAX2-NEXT:    vle32.v v0, (a2)\\n+; LMULMAX2-NEXT:    addi a2, a1, 448\\n+; LMULMAX2-NEXT:    vle32.v v2, (a1)\\n+; LMULMAX2-NEXT:    addi a1, a1, 480\\n+; LMULMAX2-NEXT:    vle32.v v4, (a1)\\n+; LMULMAX2-NEXT:    vle32.v v6, (a2)\\n+; LMULMAX2-NEXT:    vse32.v v2, (a0)\\n ; LMULMAX2-NEXT:    addi a1, a0, 480\\n ; LMULMAX2-NEXT:    vse32.v v4, (a1)\\n ; LMULMAX2-NEXT:    addi a1, a0, 448\\n ; LMULMAX2-NEXT:    vse32.v v6, (a1)\\n ; LMULMAX2-NEXT:    addi a1, a0, 416\\n-; LMULMAX2-NEXT:    vse32.v v2, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 384\\n ; LMULMAX2-NEXT:    vse32.v v0, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 352\\n+; LMULMAX2-NEXT:    addi a1, a0, 384\\n ; LMULMAX2-NEXT:    vse32.v v30, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 320\\n+; LMULMAX2-NEXT:    addi a1, a0, 352\\n ; LMULMAX2-NEXT:    vse32.v v28, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 288\\n+; LMULMAX2-NEXT:    addi a1, a0, 320\\n ; LMULMAX2-NEXT:    vse32.v v26, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 256\\n+; LMULMAX2-NEXT:    addi a1, a0, 288\\n ; LMULMAX2-NEXT:    vse32.v v24, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 224\\n+; LMULMAX2-NEXT:    addi a1, a0, 256\\n ; LMULMAX2-NEXT:    vse32.v v22, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 192\\n+; LMULMAX2-NEXT:    addi a1, a0, 224\\n ; LMULMAX2-NEXT:    vse32.v v20, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 160\\n+; LMULMAX2-NEXT:    addi a1, a0, 192\\n ; LMULMAX2-NEXT:    vse32.v v18, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 128\\n+; LMULMAX2-NEXT:    addi a1, a0, 160\\n ; LMULMAX2-NEXT:    vse32.v v16, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 96\\n+; LMULMAX2-NEXT:    addi a1, a0, 128\\n ; LMULMAX2-NEXT:    vse32.v v14, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 64\\n+; LMULMAX2-NEXT:    addi a1, a0, 96\\n ; LMULMAX2-NEXT:    vse32.v v12, (a1)\\n-; LMULMAX2-NEXT:    addi a1, a0, 32\\n+; LMULMAX2-NEXT:    addi a1, a0, 64\\n ; LMULMAX2-NEXT:    vse32.v v10, (a1)\\n+; LMULMAX2-NEXT:    addi a0, a0, 32\\n ; LMULMAX2-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX2-NEXT:    ret\\n ;\\n ; LMULMAX1-LABEL: ret_split_v128i32:\\n ; LMULMAX1:       # %bb.0:\\n-; LMULMAX1-NEXT:    vsetivli zero, 4, e32, m1, ta, mu\\n-; LMULMAX1-NEXT:    vle32.v v8, (a1)\\n ; LMULMAX1-NEXT:    addi a2, a1, 16\\n-; LMULMAX1-NEXT:    vle32.v v9, (a2)\\n+; LMULMAX1-NEXT:    vsetivli zero, 4, e32, m1, ta, mu\\n+; LMULMAX1-NEXT:    vle32.v v8, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 32\\n-; LMULMAX1-NEXT:    vle32.v v10, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v9, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 48\\n-; LMULMAX1-NEXT:    vle32.v v11, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v10, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 64\\n-; LMULMAX1-NEXT:    vle32.v v12, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v11, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 80\\n-; LMULMAX1-NEXT:    vle32.v v13, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v12, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 96\\n-; LMULMAX1-NEXT:    vle32.v v14, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v13, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 112\\n-; LMULMAX1-NEXT:    vle32.v v15, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v14, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 128\\n-; LMULMAX1-NEXT:    vle32.v v16, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v15, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 144\\n-; LMULMAX1-NEXT:    vle32.v v17, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v16, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 160\\n-; LMULMAX1-NEXT:    vle32.v v18, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v17, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 176\\n-; LMULMAX1-NEXT:    vle32.v v19, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v18, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 192\\n-; LMULMAX1-NEXT:    vle32.v v20, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v19, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 208\\n-; LMULMAX1-NEXT:    vle32.v v21, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v20, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 224\\n-; LMULMAX1-NEXT:    vle32.v v22, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v21, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 240\\n-; LMULMAX1-NEXT:    vle32.v v23, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v22, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 256\\n-; LMULMAX1-NEXT:    vle32.v v24, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v23, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 272\\n-; LMULMAX1-NEXT:    vle32.v v25, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v24, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 288\\n-; LMULMAX1-NEXT:    vle32.v v26, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v25, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 304\\n-; LMULMAX1-NEXT:    vle32.v v27, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v26, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 320\\n-; LMULMAX1-NEXT:    vle32.v v28, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v27, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 336\\n-; LMULMAX1-NEXT:    vle32.v v29, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v28, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 352\\n-; LMULMAX1-NEXT:    vle32.v v30, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v29, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 368\\n-; LMULMAX1-NEXT:    vle32.v v31, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v30, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 384\\n-; LMULMAX1-NEXT:    vle32.v v0, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v31, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 400\\n-; LMULMAX1-NEXT:    vle32.v v1, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v0, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 416\\n-; LMULMAX1-NEXT:    vle32.v v2, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v1, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 432\\n-; LMULMAX1-NEXT:    vle32.v v3, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v2, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 448\\n-; LMULMAX1-NEXT:    vle32.v v4, (a2)\\n+; LMULMAX1-NEXT:    vle32.v v3, (a2)\\n ; LMULMAX1-NEXT:    addi a2, a1, 464\\n-; LMULMAX1-NEXT:    vle32.v v5, (a2)\\n-; LMULMAX1-NEXT:    addi a2, a1, 496\\n-; LMULMAX1-NEXT:    vle32.v v6, (a2)\\n-; LMULMAX1-NEXT:    addi a1, a1, 480\\n-; LMULMAX1-NEXT:    vle32.v v7, (a1)\\n+; LMULMAX1-NEXT:    vle32.v v4, (a2)\\n+; LMULMAX1-NEXT:    addi a2, a1, 480\\n+; LMULMAX1-NEXT:    vle32.v v5, (a1)\\n+; LMULMAX1-NEXT:    addi a1, a1, 496\\n+; LMULMAX1-NEXT:    vle32.v v6, (a1)\\n+; LMULMAX1-NEXT:    vle32.v v7, (a2)\\n+; LMULMAX1-NEXT:    vse32.v v5, (a0)\\n ; LMULMAX1-NEXT:    addi a1, a0, 496\\n ; LMULMAX1-NEXT:    vse32.v v6, (a1)\\n ; LMULMAX1-NEXT:    addi a1, a0, 480\\n ; LMULMAX1-NEXT:    vse32.v v7, (a1)\\n ; LMULMAX1-NEXT:    addi a1, a0, 464\\n-; LMULMAX1-NEXT:    vse32.v v5, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 448\\n ; LMULMAX1-NEXT:    vse32.v v4, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 432\\n+; LMULMAX1-NEXT:    addi a1, a0, 448\\n ; LMULMAX1-NEXT:    vse32.v v3, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 416\\n+; LMULMAX1-NEXT:    addi a1, a0, 432\\n ; LMULMAX1-NEXT:    vse32.v v2, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 400\\n+; LMULMAX1-NEXT:    addi a1, a0, 416\\n ; LMULMAX1-NEXT:    vse32.v v1, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 384\\n+; LMULMAX1-NEXT:    addi a1, a0, 400\\n ; LMULMAX1-NEXT:    vse32.v v0, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 368\\n+; LMULMAX1-NEXT:    addi a1, a0, 384\\n ; LMULMAX1-NEXT:    vse32.v v31, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 352\\n+; LMULMAX1-NEXT:    addi a1, a0, 368\\n ; LMULMAX1-NEXT:    vse32.v v30, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 336\\n+; LMULMAX1-NEXT:    addi a1, a0, 352\\n ; LMULMAX1-NEXT:    vse32.v v29, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 320\\n+; LMULMAX1-NEXT:    addi a1, a0, 336\\n ; LMULMAX1-NEXT:    vse32.v v28, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 304\\n+; LMULMAX1-NEXT:    addi a1, a0, 320\\n ; LMULMAX1-NEXT:    vse32.v v27, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 288\\n+; LMULMAX1-NEXT:    addi a1, a0, 304\\n ; LMULMAX1-NEXT:    vse32.v v26, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 272\\n+; LMULMAX1-NEXT:    addi a1, a0, 288\\n ; LMULMAX1-NEXT:    vse32.v v25, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 256\\n+; LMULMAX1-NEXT:    addi a1, a0, 272\\n ; LMULMAX1-NEXT:    vse32.v v24, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 240\\n+; LMULMAX1-NEXT:    addi a1, a0, 256\\n ; LMULMAX1-NEXT:    vse32.v v23, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 224\\n+; LMULMAX1-NEXT:    addi a1, a0, 240\\n ; LMULMAX1-NEXT:    vse32.v v22, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 208\\n+; LMULMAX1-NEXT:    addi a1, a0, 224\\n ; LMULMAX1-NEXT:    vse32.v v21, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 192\\n+; LMULMAX1-NEXT:    addi a1, a0, 208\\n ; LMULMAX1-NEXT:    vse32.v v20, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 176\\n+; LMULMAX1-NEXT:    addi a1, a0, 192\\n ; LMULMAX1-NEXT:    vse32.v v19, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 160\\n+; LMULMAX1-NEXT:    addi a1, a0, 176\\n ; LMULMAX1-NEXT:    vse32.v v18, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 144\\n+; LMULMAX1-NEXT:    addi a1, a0, 160\\n ; LMULMAX1-NEXT:    vse32.v v17, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 128\\n+; LMULMAX1-NEXT:    addi a1, a0, 144\\n ; LMULMAX1-NEXT:    vse32.v v16, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 112\\n+; LMULMAX1-NEXT:    addi a1, a0, 128\\n ; LMULMAX1-NEXT:    vse32.v v15, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 96\\n+; LMULMAX1-NEXT:    addi a1, a0, 112\\n ; LMULMAX1-NEXT:    vse32.v v14, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 80\\n+; LMULMAX1-NEXT:    addi a1, a0, 96\\n ; LMULMAX1-NEXT:    vse32.v v13, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 64\\n+; LMULMAX1-NEXT:    addi a1, a0, 80\\n ; LMULMAX1-NEXT:    vse32.v v12, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 48\\n+; LMULMAX1-NEXT:    addi a1, a0, 64\\n ; LMULMAX1-NEXT:    vse32.v v11, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 32\\n+; LMULMAX1-NEXT:    addi a1, a0, 48\\n ; LMULMAX1-NEXT:    vse32.v v10, (a1)\\n-; LMULMAX1-NEXT:    addi a1, a0, 16\\n+; LMULMAX1-NEXT:    addi a1, a0, 32\\n ; LMULMAX1-NEXT:    vse32.v v9, (a1)\\n+; LMULMAX1-NEXT:    addi a0, a0, 16\\n ; LMULMAX1-NEXT:    vse32.v v8, (a0)\\n ; LMULMAX1-NEXT:    ret\\n   %v = load <128 x i32>, <128 x i32>* %x\"}, {\"sha\": \"5e1e94965f1fabda125be7ec3b2c8a53706b0f29\", \"filename\": \"llvm/test/CodeGen/RISCV/rvv/pr52475.ll\", \"status\": \"added\", \"additions\": 44, \"deletions\": 0, \"changes\": 44, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Fpr52475.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Fpr52475.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FRISCV%2Frvv%2Fpr52475.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -0,0 +1,44 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py\\n+; RUN: llc -mtriple=riscv32 -mattr=+experimental-v -riscv-v-vector-bits-min=128 -riscv-v-fixed-length-vector-lmul-max=4 \\\\\\n+; RUN:   -pre-RA-sched=list-burr -disable-machine-cse -verify-machineinstrs < %s | FileCheck %s\\n+; RUN: llc -mtriple=riscv64 -mattr=+experimental-v -riscv-v-vector-bits-min=128 -riscv-v-fixed-length-vector-lmul-max=4 \\\\\\n+; RUN:   -pre-RA-sched=list-burr -disable-machine-cse -verify-machineinstrs < %s | FileCheck %s\\n+\\n+define <128 x i32> @ret_split_v128i32(<128 x i32>* %x) {\\n+; CHECK-LABEL: ret_split_v128i32:\\n+; CHECK:       # %bb.0:\\n+; CHECK-NEXT:    vsetivli zero, 16, e32, m4, ta, mu\\n+; CHECK-NEXT:    vle32.v v8, (a1)\\n+; CHECK-NEXT:    vse32.v v8, (a0)\\n+; CHECK-NEXT:    addi a2, a1, 448\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 448\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a1, 384\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 384\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a1, 320\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 320\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a1, 256\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 256\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a1, 192\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 192\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a1, 128\\n+; CHECK-NEXT:    vle32.v v8, (a2)\\n+; CHECK-NEXT:    addi a2, a0, 128\\n+; CHECK-NEXT:    vse32.v v8, (a2)\\n+; CHECK-NEXT:    addi a1, a1, 64\\n+; CHECK-NEXT:    vle32.v v8, (a1)\\n+; CHECK-NEXT:    addi a0, a0, 64\\n+; CHECK-NEXT:    vse32.v v8, (a0)\\n+; CHECK-NEXT:    ret\\n+  %v = load <128 x i32>, <128 x i32>* %x\\n+  ret <128 x i32> %v\\n+}\"}, {\"sha\": \"84af77b944f6937ead3465400d437460dca0fc50\", \"filename\": \"llvm/test/CodeGen/RISCV/srem-vector-lkk.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Fsrem-vector-lkk.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Fsrem-vector-lkk.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FRISCV%2Fsrem-vector-lkk.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -842,10 +842,10 @@ define <4 x i16> @dont_fold_srem_one(<4 x i16> %x) nounwind {\\n ; RV32I-NEXT:    addi a1, a0, 1327\\n ; RV32I-NEXT:    mv a0, s2\\n ; RV32I-NEXT:    call __modsi3@plt\\n-; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    sh a0, 6(s0)\\n ; RV32I-NEXT:    sh s1, 4(s0)\\n ; RV32I-NEXT:    sh s3, 2(s0)\\n+; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    lw ra, 28(sp) # 4-byte Folded Reload\\n ; RV32I-NEXT:    lw s0, 24(sp) # 4-byte Folded Reload\\n ; RV32I-NEXT:    lw s1, 20(sp) # 4-byte Folded Reload\\n@@ -919,10 +919,10 @@ define <4 x i16> @dont_fold_srem_one(<4 x i16> %x) nounwind {\\n ; RV64I-NEXT:    addiw a1, a0, 1327\\n ; RV64I-NEXT:    mv a0, s2\\n ; RV64I-NEXT:    call __moddi3@plt\\n-; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    sh a0, 6(s0)\\n ; RV64I-NEXT:    sh s1, 4(s0)\\n ; RV64I-NEXT:    sh s3, 2(s0)\\n+; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s1, 24(sp) # 8-byte Folded Reload\\n@@ -1018,9 +1018,9 @@ define <4 x i16> @dont_fold_urem_i16_smax(<4 x i16> %x) nounwind {\\n ; RV32I-NEXT:    addi a1, a0, 1327\\n ; RV32I-NEXT:    mv a0, s2\\n ; RV32I-NEXT:    call __modsi3@plt\\n-; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    sh a0, 6(s0)\\n ; RV32I-NEXT:    sh s1, 4(s0)\\n+; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    sh s3, 2(s0)\\n ; RV32I-NEXT:    lw ra, 28(sp) # 4-byte Folded Reload\\n ; RV32I-NEXT:    lw s0, 24(sp) # 4-byte Folded Reload\\n@@ -1090,9 +1090,9 @@ define <4 x i16> @dont_fold_urem_i16_smax(<4 x i16> %x) nounwind {\\n ; RV64I-NEXT:    addiw a1, a0, 1327\\n ; RV64I-NEXT:    mv a0, s2\\n ; RV64I-NEXT:    call __moddi3@plt\\n-; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    sh a0, 6(s0)\\n ; RV64I-NEXT:    sh s1, 4(s0)\\n+; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    sh s3, 2(s0)\\n ; RV64I-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload\\n@@ -1321,10 +1321,10 @@ define <4 x i64> @dont_fold_srem_i64(<4 x i64> %x) nounwind {\\n ; RV64I-NEXT:    addiw a1, a0, 1327\\n ; RV64I-NEXT:    mv a0, s2\\n ; RV64I-NEXT:    call __moddi3@plt\\n-; RV64I-NEXT:    sd zero, 0(s0)\\n ; RV64I-NEXT:    sd a0, 24(s0)\\n ; RV64I-NEXT:    sd s1, 16(s0)\\n ; RV64I-NEXT:    sd s3, 8(s0)\\n+; RV64I-NEXT:    sd zero, 0(s0)\\n ; RV64I-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s1, 24(sp) # 8-byte Folded Reload\"}, {\"sha\": \"1bcb9069681371de0efa4d23515773409ccb5b8a\", \"filename\": \"llvm/test/CodeGen/RISCV/urem-vector-lkk.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Furem-vector-lkk.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FRISCV%2Furem-vector-lkk.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FRISCV%2Furem-vector-lkk.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -799,10 +799,10 @@ define <4 x i16> @dont_fold_urem_one(<4 x i16> %x) nounwind {\\n ; RV32I-NEXT:    addi a1, a0, 1327\\n ; RV32I-NEXT:    mv a0, s2\\n ; RV32I-NEXT:    call __umodsi3@plt\\n-; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    sh a0, 6(s0)\\n ; RV32I-NEXT:    sh s1, 4(s0)\\n ; RV32I-NEXT:    sh s3, 2(s0)\\n+; RV32I-NEXT:    sh zero, 0(s0)\\n ; RV32I-NEXT:    lw ra, 28(sp) # 4-byte Folded Reload\\n ; RV32I-NEXT:    lw s0, 24(sp) # 4-byte Folded Reload\\n ; RV32I-NEXT:    lw s1, 20(sp) # 4-byte Folded Reload\\n@@ -869,10 +869,10 @@ define <4 x i16> @dont_fold_urem_one(<4 x i16> %x) nounwind {\\n ; RV64I-NEXT:    addiw a1, a0, 1327\\n ; RV64I-NEXT:    mv a0, s2\\n ; RV64I-NEXT:    call __umoddi3@plt\\n-; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    sh a0, 6(s0)\\n ; RV64I-NEXT:    sh s1, 4(s0)\\n ; RV64I-NEXT:    sh s3, 2(s0)\\n+; RV64I-NEXT:    sh zero, 0(s0)\\n ; RV64I-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s1, 24(sp) # 8-byte Folded Reload\\n@@ -1116,10 +1116,10 @@ define <4 x i64> @dont_fold_urem_i64(<4 x i64> %x) nounwind {\\n ; RV64I-NEXT:    addiw a1, a0, 1327\\n ; RV64I-NEXT:    mv a0, s2\\n ; RV64I-NEXT:    call __umoddi3@plt\\n-; RV64I-NEXT:    sd zero, 0(s0)\\n ; RV64I-NEXT:    sd a0, 24(s0)\\n ; RV64I-NEXT:    sd s1, 16(s0)\\n ; RV64I-NEXT:    sd s3, 8(s0)\\n+; RV64I-NEXT:    sd zero, 0(s0)\\n ; RV64I-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload\\n ; RV64I-NEXT:    ld s1, 24(sp) # 8-byte Folded Reload\"}, {\"sha\": \"5eed2ec4f247dea5009909c2c091b28565fd65ec\", \"filename\": \"llvm/test/CodeGen/WebAssembly/multi-return.ll\", \"status\": \"modified\", \"additions\": 34, \"deletions\": 34, \"changes\": 68, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fmulti-return.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fmulti-return.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fmulti-return.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -86,10 +86,10 @@ define { i64, i128 } @test5() {\\n ; CHECK: i64.load\\t$[[L2:[0-9]+]]=, 8($[[SP]])\\n ; CHECK: i64.load\\t$push2=, 16($[[SP]])\\n ; CHECK: i64.store\\t8($0), $pop2\\n+; CHECK: i64.store\\t0($0), $[[L2]]\\n ; CHECK: i32.const\\t$push12=, 16\\n ; CHECK: i32.add \\t$push3=, $0, $pop12\\n ; CHECK: i64.store\\t0($pop3), $[[L1]]\\n-; CHECK: i64.store\\t0($0), $[[L2]]\\n   %t0 = call { i64, i128, i192, i128, i64 } @return_multi_multi()\\n   %r0 = extractvalue { i64, i128, i192, i128, i64 } %t0, 0\\n   %r1 = extractvalue { i64, i128, i192, i128, i64 } %t0, 1\\n@@ -101,20 +101,20 @@ define { i64, i128 } @test5() {\\n define { i128, i128 } @test6() {\\n ; CHECK-LABEL: test6\\n ; CHECK: call    \\treturn_multi_multi\\n-; CHECK: i32.const\\t$push0=, 24\\n+; CHECK: i32.const\\t$push0=, 64\\n ; CHECK: i32.add \\t$push1=, $[[SP:[0-9]+]], $pop0\\n ; CHECK: i64.load\\t$[[L1:[0-9]+]]=, 0($pop1)\\n-; CHECK: i32.const\\t$push2=, 64\\n+; CHECK: i32.const\\t$push2=, 24\\n ; CHECK: i32.add \\t$push3=, $[[SP]], $pop2\\n ; CHECK: i64.load\\t$[[L2:[0-9]+]]=, 0($pop3)\\n ; CHECK: i64.load\\t$[[L3:[0-9]+]]=, 16($[[SP]])\\n ; CHECK: i64.load\\t$push4=, 56($[[SP]])\\n ; CHECK: i64.store\\t16($0), $pop4\\n+; CHECK: i64.store\\t0($0), $[[L3]]\\n+; CHECK: i64.store\\t8($0), $[[L2]]\\n ; CHECK: i32.const\\t$push5=, 24\\n ; CHECK: i32.add \\t$push6=, $0, $pop5\\n-; CHECK: i64.store\\t0($pop6), $[[L2]]\\n-; CHECK: i64.store\\t0($0), $[[L3]]\\n-; CHECK: i64.store\\t8($0), $[[L1]]\\n+; CHECK: i64.store\\t0($pop6), $[[L1]]\\n   %t0 = call { i64, i128, i192, i128, i64 } @return_multi_multi()\\n   %r1 = extractvalue { i64, i128, i192, i128, i64 } %t0, 1\\n   %r3 = extractvalue { i64, i128, i192, i128, i64 } %t0, 3\\n@@ -126,22 +126,22 @@ define { i128, i128 } @test6() {\\n define { i64, i192 } @test7() {\\n ; CHECK-LABEL: test7\\n ; CHECK: call    \\treturn_multi_multi\\n-; CHECK: i32.const\\t$push2=, 40\\n-; CHECK: i32.add \\t$push3=, $[[SP:[0-9]+]], $pop2\\n-; CHECK: i64.load\\t$[[L1:[0-9]+]]=, 0($pop3)\\n-; CHECK: i64.load\\t$[[L2:[0-9]+]]=, 8($[[SP]])\\n-; CHECK: i64.load\\t$[[L3:[0-9]+]]=, 32($[[SP]])\\n-; CHECK: i32.const\\t$push0=, 24\\n-; CHECK: i32.add \\t$push1=, $0, $pop0\\n-; CHECK: i32.const\\t$push4=, 48\\n-; CHECK: i32.add \\t$push5=, $[[SP]], $pop4\\n-; CHECK: i64.load\\t$push6=, 0($pop5)\\n-; CHECK: i64.store\\t0($pop1), $pop6\\n-; CHECK: i64.store\\t8($0), $[[L3]]\\n+; CHECK: i32.const\\t$push0=, 40\\n+; CHECK: i32.add \\t$push1=, $[[SP:[0-9]+]], $pop0\\n+; CHECK: i64.load\\t$[[L1:[0-9]+]]=, 0($pop1)\\n+; CHECK: i32.const\\t$push2=, 48\\n+; CHECK: i32.add \\t$push3=, $[[SP]], $pop2\\n+; CHECK: i64.load\\t$[[L2:[0-9]+]]=, 0($pop3)\\n+; CHECK: i64.load\\t$[[L3:[0-9]+]]=, 8($[[SP]])\\n+; CHECK: i64.load\\t$push4=, 32($[[SP]])\\n+; CHECK: i64.store\\t8($0), $pop4\\n+; CHECK: i64.store\\t0($0), $[[L3]]\\n+; CHECK: i32.const\\t$push5=, 24\\n+; CHECK: i32.add \\t$push6=, $0, $pop5\\n+; CHECK: i64.store\\t0($pop6), $[[L2]]\\n ; CHECK: i32.const\\t$push7=, 16\\n ; CHECK: i32.add \\t$push8=, $0, $pop7\\n ; CHECK: i64.store\\t0($pop8), $[[L1]]\\n-; CHECK: i64.store\\t0($0), $[[L2]]\\n   %t0 = call { i64, i128, i192, i128, i64 } @return_multi_multi()\\n   %r0 = extractvalue { i64, i128, i192, i128, i64 } %t0, 0\\n   %r2 = extractvalue { i64, i128, i192, i128, i64 } %t0, 2\\n@@ -153,38 +153,38 @@ define { i64, i192 } @test7() {\\n define { i128, i192, i128, i64 } @test8() {\\n ; CHECK-LABEL: test8\\n ; CHECK: call    \\treturn_multi_multi\\n-; CHECK: i32.const\\t$push0=, 64\\n-; CHECK: i32.add \\t$push1=, $[[SP:[0-9]+]], $pop0\\n-; CHECK: i64.load\\t$[[L1:[0-9]+]]=, 0($pop1)\\n ; CHECK: i32.const\\t$push20=, 8\\n-; CHECK: i32.add \\t$push21=, $[[SP]], $pop20\\n-; CHECK: i32.const\\t$push2=, 32\\n-; CHECK: i32.add \\t$push3=, $pop21, $pop2\\n+; CHECK: i32.add \\t$push21=, $[[SP:[0-9]+]], $pop20\\n+; CHECK: i32.const\\t$push0=, 32\\n+; CHECK: i32.add \\t$push1=, $pop21, $pop0\\n+; CHECK: i64.load\\t$[[L1:[0-9]+]]=, 0($pop1)\\n+; CHECK: i32.const\\t$push2=, 48\\n+; CHECK: i32.add \\t$push3=, $[[SP]], $pop2\\n ; CHECK: i64.load\\t$[[L2:[0-9]+]]=, 0($pop3)\\n-; CHECK: i32.const\\t$push4=, 48\\n+; CHECK: i32.const\\t$push4=, 24\\n ; CHECK: i32.add \\t$push5=, $[[SP]], $pop4\\n ; CHECK: i64.load\\t$[[L3:[0-9]+]]=, 0($pop5)\\n-; CHECK: i32.const\\t$push6=, 24\\n+; CHECK: i32.const\\t$push6=, 64\\n ; CHECK: i32.add \\t$push7=, $[[SP]], $pop6\\n ; CHECK: i64.load\\t$[[L4:[0-9]+]]=, 0($pop7)\\n ; CHECK: i64.load\\t$[[L5:[0-9]+]]=, 8($[[SP]])\\n ; CHECK: i64.load\\t$[[L6:[0-9]+]]=, 56($[[SP]])\\n ; CHECK: i64.load\\t$[[L7:[0-9]+]]=, 32($[[SP]])\\n ; CHECK: i64.load\\t$push8=, 16($[[SP]])\\n ; CHECK: i64.store\\t40($0), $pop8\\n+; CHECK: i64.store\\t16($0), $[[L7]]\\n+; CHECK: i64.store\\t0($0), $[[L6]]\\n+; CHECK: i64.store\\t8($0), $[[L4]]\\n+; CHECK: i64.store\\t56($0), $[[L5]]\\n ; CHECK: i32.const\\t$push9=, 48\\n ; CHECK: i32.add \\t$push10=, $0, $pop9\\n-; CHECK: i64.store\\t0($pop10), $[[L4]]\\n+; CHECK: i64.store\\t0($pop10), $[[L3]]\\n ; CHECK: i32.const\\t$push22=, 32\\n ; CHECK: i32.add \\t$push11=, $0, $pop22\\n-; CHECK: i64.store\\t0($pop11), $[[L3]]\\n-; CHECK: i64.store\\t16($0), $[[L7]]\\n+; CHECK: i64.store\\t0($pop11), $[[L2]]\\n ; CHECK: i32.const\\t$push12=, 24\\n ; CHECK: i32.add \\t$push13=, $0, $pop12\\n-; CHECK: i64.store\\t0($pop13), $[[L2]]\\n-; CHECK: i64.store\\t0($0), $[[L6]]\\n-; CHECK: i64.store\\t8($0), $[[L1]]\\n-; CHECK: i64.store\\t56($0), $[[L5]]\\n+; CHECK: i64.store\\t0($pop13), $[[L1]]\\n   %t0 = call { i64, i128, i192, i128, i64 } @return_multi_multi()\\n   %r0 = extractvalue { i64, i128, i192, i128, i64 } %t0, 0\\n   %r1 = extractvalue { i64, i128, i192, i128, i64 } %t0, 1\"}, {\"sha\": \"aec6b9496e1a2a6ec6711e98018a2c5f8683b390\", \"filename\": \"llvm/test/CodeGen/WebAssembly/simd-conversions.ll\", \"status\": \"modified\", \"additions\": 24, \"deletions\": 24, \"changes\": 48, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fsimd-conversions.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fsimd-conversions.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FWebAssembly%2Fsimd-conversions.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -313,14 +313,14 @@ define <4 x double> @convert_low_s_v4f64(<8 x i32> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = shufflevector <8 x i32> %x, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\\n   %a = sitofp <4 x i32> %v to <4 x double>\\n@@ -333,14 +333,14 @@ define <4 x double> @convert_low_u_v4f64(<8 x i32> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = shufflevector <8 x i32> %x, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\\n   %a = uitofp <4 x i32> %v to <4 x double>\\n@@ -354,14 +354,14 @@ define <4 x double> @convert_low_s_v4f64_2(<8 x i32> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.convert_low_i32x4_s\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = sitofp <8 x i32> %x to <8 x double>\\n   %a = shufflevector <8 x double> %v, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\\n@@ -374,14 +374,14 @@ define <4 x double> @convert_low_u_v4f64_2(<8 x i32> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.convert_low_i32x4_u\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = uitofp <8 x i32> %x to <8 x double>\\n   %a = shufflevector <8 x double> %v, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\\n@@ -394,14 +394,14 @@ define <4 x double> @promote_low_v4f64(<8 x float> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.promote_low_f32x4\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.promote_low_f32x4\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.promote_low_f32x4\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = shufflevector <8 x float> %x, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\\n   %a = fpext <4 x float> %v to <4 x double>\\n@@ -414,14 +414,14 @@ define <4 x double> @promote_low_v4f64_2(<8 x float> %x) {\\n ; CHECK-NEXT:  # %bb.0:\\n ; CHECK-NEXT:    local.get 0\\n ; CHECK-NEXT:    local.get 1\\n-; CHECK-NEXT:    f64x2.promote_low_f32x4\\n-; CHECK-NEXT:    v128.store 0\\n-; CHECK-NEXT:    local.get 0\\n-; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    local.get 1\\n ; CHECK-NEXT:    i8x16.shuffle 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0\\n ; CHECK-NEXT:    f64x2.promote_low_f32x4\\n ; CHECK-NEXT:    v128.store 16\\n+; CHECK-NEXT:    local.get 0\\n+; CHECK-NEXT:    local.get 1\\n+; CHECK-NEXT:    f64x2.promote_low_f32x4\\n+; CHECK-NEXT:    v128.store 0\\n ; CHECK-NEXT:    # fallthrough-return\\n   %v = fpext <8 x float> %x to <8 x double>\\n   %a = shufflevector <8 x double> %v, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\"}, {\"sha\": \"f8f7d7ed2c5561e346e238ca133a16a420ded0dd\", \"filename\": \"llvm/test/CodeGen/X86/addcarry.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Faddcarry.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Faddcarry.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Faddcarry.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -51,9 +51,9 @@ define i256 @add256(i256 %a, i256 %b) nounwind {\\n ; CHECK-NEXT:    adcq {{[0-9]+}}(%rsp), %rdx\\n ; CHECK-NEXT:    adcq {{[0-9]+}}(%rsp), %rcx\\n ; CHECK-NEXT:    adcq {{[0-9]+}}(%rsp), %r8\\n+; CHECK-NEXT:    movq %rcx, 16(%rdi)\\n ; CHECK-NEXT:    movq %rdx, 8(%rdi)\\n ; CHECK-NEXT:    movq %rsi, (%rdi)\\n-; CHECK-NEXT:    movq %rcx, 16(%rdi)\\n ; CHECK-NEXT:    movq %r8, 24(%rdi)\\n ; CHECK-NEXT:    retq\\n entry:\"}, {\"sha\": \"500cb0c677ff59af64f76ef2fda17fb0f7781f7d\", \"filename\": \"llvm/test/CodeGen/X86/fp128-cast.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Ffp128-cast.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Ffp128-cast.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffp128-cast.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -1225,9 +1225,9 @@ define fp128 @TestPair128(i64 %a, i64 %b) nounwind {\\n ; X32-NEXT:    adcl $0, %edx\\n ; X32-NEXT:    adcl $0, %esi\\n ; X32-NEXT:    adcl $0, %edi\\n+; X32-NEXT:    movl %esi, 8(%eax)\\n ; X32-NEXT:    movl %edx, 4(%eax)\\n ; X32-NEXT:    movl %ecx, (%eax)\\n-; X32-NEXT:    movl %esi, 8(%eax)\\n ; X32-NEXT:    movl %edi, 12(%eax)\\n ; X32-NEXT:    popl %esi\\n ; X32-NEXT:    popl %edi\"}, {\"sha\": \"b033fc155e7008b5aa20d10376fc9d98c0e05613\", \"filename\": \"llvm/test/CodeGen/X86/i128-add.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fi128-add.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fi128-add.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fi128-add.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -20,8 +20,8 @@ define i128 @add_i128(i128 %x, i128 %y) nounwind {\\n ; X86-NEXT:    adcl $0, %edi\\n ; X86-NEXT:    adcl $0, %edx\\n ; X86-NEXT:    adcl $0, %ecx\\n-; X86-NEXT:    movl %esi, (%eax)\\n ; X86-NEXT:    movl %edi, 4(%eax)\\n+; X86-NEXT:    movl %esi, (%eax)\\n ; X86-NEXT:    movl %edx, 8(%eax)\\n ; X86-NEXT:    movl %ecx, 12(%eax)\\n ; X86-NEXT:    popl %esi\\n@@ -61,8 +61,8 @@ define <1 x i128> @add_v1i128(<1 x i128> %x, <1 x i128> %y) nounwind {\\n ; X86-NEXT:    adcl $0, %edi\\n ; X86-NEXT:    adcl $0, %edx\\n ; X86-NEXT:    adcl $0, %ecx\\n-; X86-NEXT:    movl %esi, (%eax)\\n ; X86-NEXT:    movl %edi, 4(%eax)\\n+; X86-NEXT:    movl %esi, (%eax)\\n ; X86-NEXT:    movl %edx, 8(%eax)\\n ; X86-NEXT:    movl %ecx, 12(%eax)\\n ; X86-NEXT:    popl %esi\"}, {\"sha\": \"3051abd172b50ed465b1ef3d3fe5cbba15b9ab5b\", \"filename\": \"llvm/test/CodeGen/X86/masked_load.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fmasked_load.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fmasked_load.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fmasked_load.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -7179,12 +7179,12 @@ define <16 x i64> @load_one_mask_bit_set6(<16 x i64>* %addr, <16 x i64> %val) {\\n ; SSE2-NEXT:    movsd {{.*#+}} xmm8 = mem[0],zero\\n ; SSE2-NEXT:    movlhps {{.*#+}} xmm6 = xmm6[0],xmm8[0]\\n ; SSE2-NEXT:    movaps %xmm7, 112(%rdi)\\n+; SSE2-NEXT:    movaps %xmm5, 80(%rdi)\\n ; SSE2-NEXT:    movaps %xmm4, 64(%rdi)\\n ; SSE2-NEXT:    movaps %xmm3, 48(%rdi)\\n ; SSE2-NEXT:    movaps %xmm2, 32(%rdi)\\n-; SSE2-NEXT:    movaps %xmm0, (%rdi)\\n-; SSE2-NEXT:    movaps %xmm5, 80(%rdi)\\n ; SSE2-NEXT:    movaps %xmm1, 16(%rdi)\\n+; SSE2-NEXT:    movaps %xmm0, (%rdi)\\n ; SSE2-NEXT:    movaps %xmm6, 96(%rdi)\\n ; SSE2-NEXT:    retq\\n ;\\n@@ -7195,13 +7195,13 @@ define <16 x i64> @load_one_mask_bit_set6(<16 x i64>* %addr, <16 x i64> %val) {\\n ; SSE42-NEXT:    pinsrq $0, 80(%rsi), %xmm5\\n ; SSE42-NEXT:    pinsrq $1, 104(%rsi), %xmm6\\n ; SSE42-NEXT:    movaps %xmm7, 112(%rdi)\\n+; SSE42-NEXT:    movdqa %xmm6, 96(%rdi)\\n+; SSE42-NEXT:    movdqa %xmm5, 80(%rdi)\\n ; SSE42-NEXT:    movaps %xmm4, 64(%rdi)\\n ; SSE42-NEXT:    movaps %xmm3, 48(%rdi)\\n ; SSE42-NEXT:    movaps %xmm2, 32(%rdi)\\n-; SSE42-NEXT:    movaps %xmm0, (%rdi)\\n-; SSE42-NEXT:    movdqa %xmm6, 96(%rdi)\\n-; SSE42-NEXT:    movdqa %xmm5, 80(%rdi)\\n ; SSE42-NEXT:    movdqa %xmm1, 16(%rdi)\\n+; SSE42-NEXT:    movaps %xmm0, (%rdi)\\n ; SSE42-NEXT:    retq\\n ;\\n ; AVX1-LABEL: load_one_mask_bit_set6:\"}, {\"sha\": \"492438edbce3728d26a4bb582b0ab2920a4a3cbf\", \"filename\": \"llvm/test/CodeGen/X86/mul128.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fmul128.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fmul128.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fmul128.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -52,13 +52,13 @@ define i128 @foo(i128 %t, i128 %u) {\\n ; X86-NEXT:    imull %esi, %ecx\\n ; X86-NEXT:    addl %edx, %ecx\\n ; X86-NEXT:    addl %ebx, %eax\\n-; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n+; X86-NEXT:    movl %eax, (%esp) # 4-byte Spill\\n ; X86-NEXT:    adcl %edi, %ecx\\n ; X86-NEXT:    movl %esi, %eax\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n ; X86-NEXT:    mull %esi\\n ; X86-NEXT:    movl %edx, %edi\\n-; X86-NEXT:    movl %eax, (%esp) # 4-byte Spill\\n+; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n ; X86-NEXT:    movl %ebp, %eax\\n ; X86-NEXT:    mull %esi\\n ; X86-NEXT:    movl %edx, %ebx\\n@@ -77,12 +77,12 @@ define i128 @foo(i128 %t, i128 %u) {\\n ; X86-NEXT:    addl %edi, %eax\\n ; X86-NEXT:    movzbl %bl, %esi\\n ; X86-NEXT:    adcl %esi, %edx\\n-; X86-NEXT:    addl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Folded Reload\\n+; X86-NEXT:    addl (%esp), %eax # 4-byte Folded Reload\\n ; X86-NEXT:    adcl %ecx, %edx\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n-; X86-NEXT:    movl (%esp), %esi # 4-byte Reload\\n-; X86-NEXT:    movl %esi, (%ecx)\\n ; X86-NEXT:    movl %ebp, 4(%ecx)\\n+; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n+; X86-NEXT:    movl %esi, (%ecx)\\n ; X86-NEXT:    movl %eax, 8(%ecx)\\n ; X86-NEXT:    movl %edx, 12(%ecx)\\n ; X86-NEXT:    movl %ecx, %eax\"}, {\"sha\": \"7eb192dca1211eae50a5a012de4cf2ecb1b59eed\", \"filename\": \"llvm/test/CodeGen/X86/pmulh.ll\", \"status\": \"modified\", \"additions\": 58, \"deletions\": 58, \"changes\": 116, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fpmulh.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fpmulh.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fpmulh.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -1279,29 +1279,29 @@ define <32 x i32> @mulhsw_v32i16_ashr(<32 x i16> %a, <32 x i16> %b) {\\n ; SSE41:       # %bb.0:\\n ; SSE41-NEXT:    movq %rdi, %rax\\n ; SSE41-NEXT:    pmulhw %xmm4, %xmm0\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm4, %xmm4\\n-; SSE41-NEXT:    pmulhw %xmm5, %xmm1\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm1[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm5, %xmm5\\n-; SSE41-NEXT:    pmulhw %xmm6, %xmm2\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm6, %xmm6\\n-; SSE41-NEXT:    pmulhw %xmm7, %xmm3\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm3[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm7, %xmm7\\n+; SSE41-NEXT:    pmovsxwd %xmm0, %xmm4\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm0, %xmm0\\n+; SSE41-NEXT:    pmulhw %xmm5, %xmm1\\n+; SSE41-NEXT:    pmovsxwd %xmm1, %xmm5\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm1, %xmm1\\n+; SSE41-NEXT:    pmulhw %xmm6, %xmm2\\n+; SSE41-NEXT:    pmovsxwd %xmm2, %xmm6\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm2, %xmm2\\n+; SSE41-NEXT:    pmulhw %xmm7, %xmm3\\n+; SSE41-NEXT:    pmovsxwd %xmm3, %xmm7\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm3, %xmm3\\n-; SSE41-NEXT:    movdqa %xmm3, 96(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm2, 64(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm1, 32(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm0, (%rdi)\\n-; SSE41-NEXT:    movdqa %xmm7, 112(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm6, 80(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm5, 48(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm4, 16(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm3, 112(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm7, 96(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm2, 80(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm6, 64(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm1, 48(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm5, 32(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm0, 16(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm4, (%rdi)\\n ; SSE41-NEXT:    retq\\n ;\\n ; AVX2-LABEL: mulhsw_v32i16_ashr:\\n@@ -1770,53 +1770,53 @@ define <64 x i32> @mulhsw_v64i16_ashr(<64 x i16> %a, <64 x i16> %b) {\\n ; SSE41:       # %bb.0:\\n ; SSE41-NEXT:    movq %rdi, %rax\\n ; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm0\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm8 = xmm0[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm8, %xmm8\\n+; SSE41-NEXT:    pmovsxwd %xmm0, %xmm8\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,2,3]\\n+; SSE41-NEXT:    pmovsxwd %xmm0, %xmm9\\n ; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm1\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm1[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm9, %xmm9\\n+; SSE41-NEXT:    pmovsxwd %xmm1, %xmm10\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[2,3,2,3]\\n+; SSE41-NEXT:    pmovsxwd %xmm0, %xmm11\\n ; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm2\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm10 = xmm2[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm10, %xmm10\\n+; SSE41-NEXT:    pmovsxwd %xmm2, %xmm12\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[2,3,2,3]\\n+; SSE41-NEXT:    pmovsxwd %xmm2, %xmm13\\n ; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm3\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm11 = xmm3[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm11, %xmm11\\n+; SSE41-NEXT:    pmovsxwd %xmm3, %xmm14\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[2,3,2,3]\\n+; SSE41-NEXT:    pmovsxwd %xmm3, %xmm15\\n ; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm4\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm12 = xmm4[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm12, %xmm12\\n-; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm5\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm13 = xmm5[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm13, %xmm13\\n-; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm6\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm14 = xmm6[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm14, %xmm14\\n-; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm7\\n-; SSE41-NEXT:    pshufd {{.*#+}} xmm15 = xmm7[2,3,2,3]\\n-; SSE41-NEXT:    pmovsxwd %xmm15, %xmm15\\n-; SSE41-NEXT:    pmovsxwd %xmm0, %xmm0\\n-; SSE41-NEXT:    pmovsxwd %xmm1, %xmm1\\n-; SSE41-NEXT:    pmovsxwd %xmm2, %xmm2\\n-; SSE41-NEXT:    pmovsxwd %xmm3, %xmm3\\n+; SSE41-NEXT:    pmovsxwd %xmm4, %xmm0\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm4, %xmm4\\n+; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm5\\n+; SSE41-NEXT:    pmovsxwd %xmm5, %xmm2\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm5, %xmm5\\n+; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm6\\n+; SSE41-NEXT:    pmovsxwd %xmm6, %xmm1\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm6, %xmm6\\n+; SSE41-NEXT:    pmulhw {{[0-9]+}}(%rsp), %xmm7\\n+; SSE41-NEXT:    pmovsxwd %xmm7, %xmm3\\n+; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[2,3,2,3]\\n ; SSE41-NEXT:    pmovsxwd %xmm7, %xmm7\\n-; SSE41-NEXT:    movdqa %xmm7, 224(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm6, 192(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm5, 160(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm4, 128(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm3, 96(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm2, 64(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm1, 32(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm0, (%rdi)\\n-; SSE41-NEXT:    movdqa %xmm15, 240(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm14, 208(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm13, 176(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm12, 144(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm11, 112(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm10, 80(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm9, 48(%rdi)\\n-; SSE41-NEXT:    movdqa %xmm8, 16(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm7, 240(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm3, 224(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm6, 208(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm1, 192(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm5, 176(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm2, 160(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm4, 144(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm0, 128(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm15, 112(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm14, 96(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm13, 80(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm12, 64(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm11, 48(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm10, 32(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm9, 16(%rdi)\\n+; SSE41-NEXT:    movdqa %xmm8, (%rdi)\\n ; SSE41-NEXT:    retq\\n ;\\n ; AVX2-LABEL: mulhsw_v64i16_ashr:\"}, {\"sha\": \"36f17a6628ac0e8d3b290f0febcc894a7882876c\", \"filename\": \"llvm/test/CodeGen/X86/scheduler-backtracking.ll\", \"status\": \"modified\", \"additions\": 62, \"deletions\": 62, \"changes\": 124, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fscheduler-backtracking.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fscheduler-backtracking.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fscheduler-backtracking.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -18,42 +18,40 @@ define i256 @test1(i256 %a) nounwind {\\n ; ILP-NEXT:    xorl %r8d, %r8d\\n ; ILP-NEXT:    addl %esi, %esi\\n ; ILP-NEXT:    leal 3(%rsi), %r9d\\n-; ILP-NEXT:    movb $125, %r10b\\n-; ILP-NEXT:    movl $1, %edi\\n-; ILP-NEXT:    xorl %r11d, %r11d\\n+; ILP-NEXT:    movl $1, %r11d\\n+; ILP-NEXT:    xorl %r14d, %r14d\\n ; ILP-NEXT:    movl %r9d, %ecx\\n-; ILP-NEXT:    shldq %cl, %rdi, %r11\\n-; ILP-NEXT:    subb %sil, %r10b\\n-; ILP-NEXT:    addb $-125, %sil\\n-; ILP-NEXT:    xorl %ebx, %ebx\\n-; ILP-NEXT:    movl %esi, %ecx\\n-; ILP-NEXT:    shldq %cl, %rdi, %rbx\\n+; ILP-NEXT:    shldq %cl, %r11, %r14\\n ; ILP-NEXT:    movl $1, %edx\\n ; ILP-NEXT:    shlq %cl, %rdx\\n-; ILP-NEXT:    movl $1, %r14d\\n+; ILP-NEXT:    leal -125(%rsi), %r10d\\n+; ILP-NEXT:    xorl %ebx, %ebx\\n ; ILP-NEXT:    movl %r10d, %ecx\\n-; ILP-NEXT:    shrdq %cl, %r8, %r14\\n-; ILP-NEXT:    movl %r9d, %ecx\\n-; ILP-NEXT:    shlq %cl, %rdi\\n+; ILP-NEXT:    shldq %cl, %r11, %rbx\\n ; ILP-NEXT:    testb $64, %r9b\\n-; ILP-NEXT:    cmovneq %rdi, %r11\\n-; ILP-NEXT:    cmovneq %r8, %rdi\\n-; ILP-NEXT:    testb $64, %r10b\\n-; ILP-NEXT:    cmovneq %r8, %r14\\n-; ILP-NEXT:    testb $64, %sil\\n-; ILP-NEXT:    cmovneq %rdx, %rbx\\n+; ILP-NEXT:    cmovneq %rdx, %r14\\n ; ILP-NEXT:    cmovneq %r8, %rdx\\n+; ILP-NEXT:    movl $1, %edi\\n+; ILP-NEXT:    shlq %cl, %rdi\\n+; ILP-NEXT:    movb $125, %cl\\n+; ILP-NEXT:    subb %sil, %cl\\n+; ILP-NEXT:    shrdq %cl, %r8, %r11\\n+; ILP-NEXT:    testb $64, %cl\\n+; ILP-NEXT:    cmovneq %r8, %r11\\n+; ILP-NEXT:    testb $64, %r10b\\n+; ILP-NEXT:    cmovneq %rdi, %rbx\\n+; ILP-NEXT:    cmovneq %r8, %rdi\\n ; ILP-NEXT:    testb %r9b, %r9b\\n-; ILP-NEXT:    cmovsq %r8, %r11\\n-; ILP-NEXT:    cmovsq %r8, %rdi\\n-; ILP-NEXT:    movq %r11, 8(%rax)\\n-; ILP-NEXT:    movq %rdi, (%rax)\\n+; ILP-NEXT:    cmovsq %r8, %r14\\n+; ILP-NEXT:    cmovsq %r8, %rdx\\n+; ILP-NEXT:    movq %r14, 8(%rax)\\n+; ILP-NEXT:    movq %rdx, (%rax)\\n ; ILP-NEXT:    cmovnsq %r8, %rbx\\n ; ILP-NEXT:    cmoveq %r8, %rbx\\n ; ILP-NEXT:    movq %rbx, 24(%rax)\\n-; ILP-NEXT:    cmovnsq %r14, %rdx\\n-; ILP-NEXT:    cmoveq %r8, %rdx\\n-; ILP-NEXT:    movq %rdx, 16(%rax)\\n+; ILP-NEXT:    cmovnsq %r11, %rdi\\n+; ILP-NEXT:    cmoveq %r8, %rdi\\n+; ILP-NEXT:    movq %rdi, 16(%rax)\\n ; ILP-NEXT:    popq %rbx\\n ; ILP-NEXT:    popq %r14\\n ; ILP-NEXT:    retq\\n@@ -252,27 +250,24 @@ define i256 @test2(i256 %a) nounwind {\\n ; ILP-LABEL: test2:\\n ; ILP:       # %bb.0:\\n ; ILP-NEXT:    movq %rdi, %rax\\n-; ILP-NEXT:    xorl %edi, %edi\\n+; ILP-NEXT:    xorl %r9d, %r9d\\n ; ILP-NEXT:    movq %rsi, %r11\\n ; ILP-NEXT:    negq %r11\\n ; ILP-NEXT:    movl $0, %r10d\\n ; ILP-NEXT:    sbbq %rdx, %r10\\n-; ILP-NEXT:    movl $0, %r9d\\n-; ILP-NEXT:    sbbq %rcx, %r9\\n-; ILP-NEXT:    sbbq %r8, %rdi\\n-; ILP-NEXT:    andq %rcx, %r9\\n-; ILP-NEXT:    bsrq %r9, %rcx\\n-; ILP-NEXT:    xorq $63, %rcx\\n-; ILP-NEXT:    andq %r8, %rdi\\n-; ILP-NEXT:    bsrq %rdi, %r8\\n+; ILP-NEXT:    movl $0, %edi\\n+; ILP-NEXT:    sbbq %rcx, %rdi\\n+; ILP-NEXT:    sbbq %r8, %r9\\n+; ILP-NEXT:    andq %r8, %r9\\n+; ILP-NEXT:    bsrq %r9, %r8\\n ; ILP-NEXT:    andq %rdx, %r10\\n ; ILP-NEXT:    bsrq %r10, %rdx\\n ; ILP-NEXT:    xorq $63, %r8\\n+; ILP-NEXT:    andq %rcx, %rdi\\n+; ILP-NEXT:    bsrq %rdi, %rcx\\n+; ILP-NEXT:    xorq $63, %rcx\\n ; ILP-NEXT:    addq $64, %rcx\\n-; ILP-NEXT:    testq %rdi, %rdi\\n-; ILP-NEXT:    movq $0, 24(%rax)\\n-; ILP-NEXT:    movq $0, 16(%rax)\\n-; ILP-NEXT:    movq $0, 8(%rax)\\n+; ILP-NEXT:    testq %r9, %r9\\n ; ILP-NEXT:    cmovneq %r8, %rcx\\n ; ILP-NEXT:    xorq $63, %rdx\\n ; ILP-NEXT:    andq %rsi, %r11\\n@@ -287,6 +282,9 @@ define i256 @test2(i256 %a) nounwind {\\n ; ILP-NEXT:    orq %r9, %rdi\\n ; ILP-NEXT:    cmovneq %rcx, %rsi\\n ; ILP-NEXT:    movq %rsi, (%rax)\\n+; ILP-NEXT:    movq $0, 24(%rax)\\n+; ILP-NEXT:    movq $0, 16(%rax)\\n+; ILP-NEXT:    movq $0, 8(%rax)\\n ; ILP-NEXT:    retq\\n ;\\n ; HYBRID-LABEL: test2:\\n@@ -457,46 +455,48 @@ define i256 @test2(i256 %a) nounwind {\\n define i256 @test3(i256 %n) nounwind {\\n ; ILP-LABEL: test3:\\n ; ILP:       # %bb.0:\\n+; ILP-NEXT:    pushq %rbx\\n ; ILP-NEXT:    movq %rdi, %rax\\n-; ILP-NEXT:    xorl %r10d, %r10d\\n+; ILP-NEXT:    xorl %edi, %edi\\n ; ILP-NEXT:    movq %rsi, %r9\\n ; ILP-NEXT:    negq %r9\\n+; ILP-NEXT:    movl $0, %r10d\\n+; ILP-NEXT:    sbbq %rdx, %r10\\n ; ILP-NEXT:    movl $0, %r11d\\n-; ILP-NEXT:    sbbq %rdx, %r11\\n-; ILP-NEXT:    movl $0, %edi\\n-; ILP-NEXT:    sbbq %rcx, %rdi\\n-; ILP-NEXT:    sbbq %r8, %r10\\n+; ILP-NEXT:    sbbq %rcx, %r11\\n+; ILP-NEXT:    sbbq %r8, %rdi\\n+; ILP-NEXT:    notq %r8\\n+; ILP-NEXT:    andq %rdi, %r8\\n+; ILP-NEXT:    bsrq %r8, %rbx\\n+; ILP-NEXT:    notq %rdx\\n+; ILP-NEXT:    andq %r10, %rdx\\n+; ILP-NEXT:    bsrq %rdx, %r10\\n+; ILP-NEXT:    notq %rsi\\n+; ILP-NEXT:    xorq $63, %rbx\\n ; ILP-NEXT:    notq %rcx\\n-; ILP-NEXT:    andq %rdi, %rcx\\n+; ILP-NEXT:    andq %r11, %rcx\\n ; ILP-NEXT:    bsrq %rcx, %rdi\\n-; ILP-NEXT:    notq %rdx\\n-; ILP-NEXT:    andq %r11, %rdx\\n ; ILP-NEXT:    xorq $63, %rdi\\n-; ILP-NEXT:    notq %r8\\n-; ILP-NEXT:    andq %r10, %r8\\n-; ILP-NEXT:    bsrq %r8, %r10\\n-; ILP-NEXT:    xorq $63, %r10\\n ; ILP-NEXT:    addq $64, %rdi\\n-; ILP-NEXT:    bsrq %rdx, %r11\\n-; ILP-NEXT:    notq %rsi\\n ; ILP-NEXT:    testq %r8, %r8\\n-; ILP-NEXT:    movq $0, 24(%rax)\\n-; ILP-NEXT:    movq $0, 16(%rax)\\n-; ILP-NEXT:    movq $0, 8(%rax)\\n-; ILP-NEXT:    cmovneq %r10, %rdi\\n-; ILP-NEXT:    xorq $63, %r11\\n+; ILP-NEXT:    cmovneq %rbx, %rdi\\n+; ILP-NEXT:    xorq $63, %r10\\n ; ILP-NEXT:    andq %r9, %rsi\\n-; ILP-NEXT:    movl $127, %r9d\\n+; ILP-NEXT:    movl $127, %ebx\\n ; ILP-NEXT:    bsrq %rsi, %rsi\\n-; ILP-NEXT:    cmoveq %r9, %rsi\\n+; ILP-NEXT:    cmoveq %rbx, %rsi\\n ; ILP-NEXT:    xorq $63, %rsi\\n ; ILP-NEXT:    addq $64, %rsi\\n ; ILP-NEXT:    testq %rdx, %rdx\\n-; ILP-NEXT:    cmovneq %r11, %rsi\\n+; ILP-NEXT:    cmovneq %r10, %rsi\\n ; ILP-NEXT:    subq $-128, %rsi\\n-; ILP-NEXT:    orq %rcx, %r8\\n+; ILP-NEXT:    orq %r8, %rcx\\n ; ILP-NEXT:    cmovneq %rdi, %rsi\\n ; ILP-NEXT:    movq %rsi, (%rax)\\n+; ILP-NEXT:    movq $0, 24(%rax)\\n+; ILP-NEXT:    movq $0, 16(%rax)\\n+; ILP-NEXT:    movq $0, 8(%rax)\\n+; ILP-NEXT:    popq %rbx\\n ; ILP-NEXT:    retq\\n ;\\n ; HYBRID-LABEL: test3:\"}, {\"sha\": \"6a2681210b4650f41c1d3fb8ed1a12c1cabe3146\", \"filename\": \"llvm/test/CodeGen/X86/subcarry.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fsubcarry.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fsubcarry.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fsubcarry.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -25,9 +25,9 @@ define i256 @sub256(i256 %a, i256 %b) nounwind {\\n ; CHECK-NEXT:    sbbq {{[0-9]+}}(%rsp), %rdx\\n ; CHECK-NEXT:    sbbq {{[0-9]+}}(%rsp), %rcx\\n ; CHECK-NEXT:    sbbq {{[0-9]+}}(%rsp), %r8\\n+; CHECK-NEXT:    movq %rcx, 16(%rdi)\\n ; CHECK-NEXT:    movq %rdx, 8(%rdi)\\n ; CHECK-NEXT:    movq %rsi, (%rdi)\\n-; CHECK-NEXT:    movq %rcx, 16(%rdi)\\n ; CHECK-NEXT:    movq %r8, 24(%rdi)\\n ; CHECK-NEXT:    retq\\n entry:\"}, {\"sha\": \"a17551deb7656c49710808972ec64671addca2c4\", \"filename\": \"llvm/test/CodeGen/X86/umul-with-overflow.ll\", \"status\": \"modified\", \"additions\": 20, \"deletions\": 20, \"changes\": 40, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fumul-with-overflow.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fumul-with-overflow.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fumul-with-overflow.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -494,10 +494,10 @@ define i300 @test4(i300 %a, i300 %b) nounwind {\\n ; X86-NEXT:    adcl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Folded Reload\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n ; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n-; X86-NEXT:    movl %esi, (%edx)\\n-; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n ; X86-NEXT:    movl %esi, 4(%edx)\\n ; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n+; X86-NEXT:    movl %esi, (%edx)\\n+; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n ; X86-NEXT:    movl %esi, 8(%edx)\\n ; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n ; X86-NEXT:    movl %esi, 12(%edx)\\n@@ -530,17 +530,17 @@ define i300 @test4(i300 %a, i300 %b) nounwind {\\n ; X64-NEXT:    pushq %rbx\\n ; X64-NEXT:    movq %r9, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n ; X64-NEXT:    movq %r8, %r11\\n-; X64-NEXT:    movq %rcx, %r8\\n+; X64-NEXT:    movq %rcx, %r10\\n ; X64-NEXT:    movq %rdx, %r13\\n ; X64-NEXT:    movq %rdi, %r12\\n-; X64-NEXT:    movq {{[0-9]+}}(%rsp), %r10\\n+; X64-NEXT:    movq {{[0-9]+}}(%rsp), %r8\\n ; X64-NEXT:    movq {{[0-9]+}}(%rsp), %rbp\\n ; X64-NEXT:    movq %rsi, %rax\\n-; X64-NEXT:    mulq %r10\\n+; X64-NEXT:    mulq %r8\\n ; X64-NEXT:    movq %rdx, %r14\\n ; X64-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill\\n ; X64-NEXT:    movq %r13, %rax\\n-; X64-NEXT:    mulq %r10\\n+; X64-NEXT:    mulq %r8\\n ; X64-NEXT:    movq %rdx, %rbx\\n ; X64-NEXT:    movq %rax, %rdi\\n ; X64-NEXT:    addq %r14, %rdi\\n@@ -559,22 +559,22 @@ define i300 @test4(i300 %a, i300 %b) nounwind {\\n ; X64-NEXT:    movq %rax, %rbp\\n ; X64-NEXT:    addq %rcx, %rbp\\n ; X64-NEXT:    adcq %rdi, %rbx\\n-; X64-NEXT:    movq %r8, %rax\\n-; X64-NEXT:    mulq %r10\\n+; X64-NEXT:    movq %r10, %rax\\n+; X64-NEXT:    mulq %r8\\n ; X64-NEXT:    movq %rdx, %rcx\\n ; X64-NEXT:    movq %rax, %r15\\n ; X64-NEXT:    movq %r11, %rax\\n-; X64-NEXT:    mulq %r10\\n-; X64-NEXT:    movq %rdx, %r10\\n+; X64-NEXT:    mulq %r8\\n+; X64-NEXT:    movq %rdx, %r8\\n ; X64-NEXT:    movq %rax, %r14\\n ; X64-NEXT:    addq %rcx, %r14\\n-; X64-NEXT:    adcq $0, %r10\\n-; X64-NEXT:    movq %r8, %rax\\n+; X64-NEXT:    adcq $0, %r8\\n+; X64-NEXT:    movq %r10, %rax\\n ; X64-NEXT:    movq {{[0-9]+}}(%rsp), %rcx\\n ; X64-NEXT:    mulq %rcx\\n ; X64-NEXT:    movq %rax, %rdi\\n ; X64-NEXT:    addq %r14, %rdi\\n-; X64-NEXT:    adcq %r10, %rdx\\n+; X64-NEXT:    adcq %r8, %rdx\\n ; X64-NEXT:    imulq %rcx, %r11\\n ; X64-NEXT:    movq {{[0-9]+}}(%rsp), %r14\\n ; X64-NEXT:    addq %rbp, %r15\\n@@ -583,7 +583,7 @@ define i300 @test4(i300 %a, i300 %b) nounwind {\\n ; X64-NEXT:    movq %rsi, %rax\\n ; X64-NEXT:    mulq %r14\\n ; X64-NEXT:    movq %rdx, %rcx\\n-; X64-NEXT:    movq %rax, %r10\\n+; X64-NEXT:    movq %rax, %r8\\n ; X64-NEXT:    movq %r13, %rax\\n ; X64-NEXT:    mulq %r14\\n ; X64-NEXT:    movq %rdx, %rbp\\n@@ -597,20 +597,20 @@ define i300 @test4(i300 %a, i300 %b) nounwind {\\n ; X64-NEXT:    adcq %rbp, %rdx\\n ; X64-NEXT:    imulq %rcx, %r13\\n ; X64-NEXT:    addq %rdx, %r13\\n-; X64-NEXT:    addq %r15, %r10\\n+; X64-NEXT:    addq %r15, %r8\\n ; X64-NEXT:    adcq %rdi, %rax\\n ; X64-NEXT:    adcq %r11, %r13\\n-; X64-NEXT:    imulq %r14, %r8\\n-; X64-NEXT:    addq %r13, %r8\\n+; X64-NEXT:    imulq %r14, %r10\\n+; X64-NEXT:    addq %r13, %r10\\n ; X64-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload\\n ; X64-NEXT:    imulq {{[0-9]+}}(%rsp), %rcx\\n ; X64-NEXT:    imulq {{[0-9]+}}(%rsp), %rsi\\n ; X64-NEXT:    addq %rcx, %rsi\\n-; X64-NEXT:    addq %r8, %rsi\\n+; X64-NEXT:    addq %r10, %rsi\\n+; X64-NEXT:    movq %r9, 8(%r12)\\n ; X64-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload\\n ; X64-NEXT:    movq %rcx, (%r12)\\n-; X64-NEXT:    movq %r9, 8(%r12)\\n-; X64-NEXT:    movq %r10, 16(%r12)\\n+; X64-NEXT:    movq %r8, 16(%r12)\\n ; X64-NEXT:    movq %rax, 24(%r12)\\n ; X64-NEXT:    movl %esi, 32(%r12)\\n ; X64-NEXT:    shrq $32, %rsi\"}, {\"sha\": \"40fc6db7fe6b25a912d4ddd075baba55fd5ea87b\", \"filename\": \"llvm/test/CodeGen/X86/umulo-128-legalisation-lowering.ll\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 35, \"changes\": 67, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fumulo-128-legalisation-lowering.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b0319ab79bf59669803cc2475fae1d12f8eeaca9/llvm%2Ftest%2FCodeGen%2FX86%2Fumulo-128-legalisation-lowering.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fumulo-128-legalisation-lowering.ll?ref=b0319ab79bf59669803cc2475fae1d12f8eeaca9\", \"patch\": \"@@ -38,8 +38,8 @@ define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {\\n ; X86-NEXT:    .cfi_def_cfa_offset 16\\n ; X86-NEXT:    pushl %esi\\n ; X86-NEXT:    .cfi_def_cfa_offset 20\\n-; X86-NEXT:    subl $24, %esp\\n-; X86-NEXT:    .cfi_def_cfa_offset 44\\n+; X86-NEXT:    subl $28, %esp\\n+; X86-NEXT:    .cfi_def_cfa_offset 48\\n ; X86-NEXT:    .cfi_offset %esi, -20\\n ; X86-NEXT:    .cfi_offset %edi, -16\\n ; X86-NEXT:    .cfi_offset %ebx, -12\\n@@ -60,58 +60,55 @@ define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {\\n ; X86-NEXT:    movl %edi, %eax\\n ; X86-NEXT:    mull %ebx\\n ; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n-; X86-NEXT:    movl %edx, %ecx\\n-; X86-NEXT:    addl %esi, %ecx\\n+; X86-NEXT:    movl %edx, %ebp\\n+; X86-NEXT:    addl %esi, %ebp\\n ; X86-NEXT:    setb {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n ; X86-NEXT:    mull %esi\\n-; X86-NEXT:    movl %esi, %ebx\\n-; X86-NEXT:    movl %eax, %esi\\n+; X86-NEXT:    movl %eax, %ecx\\n ; X86-NEXT:    seto {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n-; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi\\n-; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebx\\n+; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-NEXT:    mull %edi\\n-; X86-NEXT:    movl %eax, %ebp\\n-; X86-NEXT:    seto {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n-; X86-NEXT:    addl %esi, %ebp\\n-; X86-NEXT:    movl %edi, %eax\\n ; X86-NEXT:    mull %ebx\\n-; X86-NEXT:    movl %ebx, %esi\\n-; X86-NEXT:    movl %eax, %ebx\\n-; X86-NEXT:    movl %edx, %edi\\n-; X86-NEXT:    addl %ebp, %edi\\n+; X86-NEXT:    movl %eax, %edi\\n+; X86-NEXT:    seto {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n+; X86-NEXT:    addl %ecx, %edi\\n+; X86-NEXT:    movl %ebx, %eax\\n+; X86-NEXT:    mull %esi\\n+; X86-NEXT:    movl %edx, %ebx\\n+; X86-NEXT:    addl %edi, %ebx\\n ; X86-NEXT:    setb {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n-; X86-NEXT:    addl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Folded Reload\\n-; X86-NEXT:    adcl %ecx, %edi\\n+; X86-NEXT:    addl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Folded Reload\\n+; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n+; X86-NEXT:    adcl %ebp, %ebx\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-NEXT:    movl %esi, %ecx\\n ; X86-NEXT:    mull %esi\\n-; X86-NEXT:    movl %edx, %esi\\n+; X86-NEXT:    movl %edx, %edi\\n ; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-NEXT:    mull %ecx\\n+; X86-NEXT:    mull %esi\\n ; X86-NEXT:    movl %edx, %ebp\\n ; X86-NEXT:    movl %eax, %ecx\\n-; X86-NEXT:    addl %esi, %ecx\\n+; X86-NEXT:    addl %edi, %ecx\\n ; X86-NEXT:    adcl $0, %ebp\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n-; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n-; X86-NEXT:    mull %edx\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi\\n+; X86-NEXT:    mull %edi\\n ; X86-NEXT:    movl %edx, %esi\\n ; X86-NEXT:    addl %ecx, %eax\\n ; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill\\n ; X86-NEXT:    adcl %ebp, %esi\\n ; X86-NEXT:    setb %cl\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp\\n ; X86-NEXT:    movl %ebp, %eax\\n-; X86-NEXT:    mull {{[0-9]+}}(%esp)\\n+; X86-NEXT:    mull %edi\\n ; X86-NEXT:    addl %esi, %eax\\n ; X86-NEXT:    movzbl %cl, %ecx\\n ; X86-NEXT:    adcl %ecx, %edx\\n-; X86-NEXT:    addl %ebx, %eax\\n-; X86-NEXT:    adcl %edi, %edx\\n+; X86-NEXT:    addl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Folded Reload\\n+; X86-NEXT:    adcl %ebx, %edx\\n ; X86-NEXT:    setb {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill\\n ; X86-NEXT:    testl %ebp, %ebp\\n ; X86-NEXT:    setne %cl\\n@@ -124,10 +121,10 @@ define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {\\n ; X86-NEXT:    orb {{[-0-9]+}}(%e{{[sb]}}p), %cl # 1-byte Folded Reload\\n ; X86-NEXT:    orb %ch, %cl\\n ; X86-NEXT:    movb %cl, {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Spill\\n-; X86-NEXT:    cmpl $0, {{[0-9]+}}(%esp)\\n-; X86-NEXT:    setne %cl\\n-; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi\\n ; X86-NEXT:    testl %edi, %edi\\n+; X86-NEXT:    setne %cl\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp\\n+; X86-NEXT:    testl %ebp, %ebp\\n ; X86-NEXT:    setne %bh\\n ; X86-NEXT:    andb %cl, %bh\\n ; X86-NEXT:    movb {{[-0-9]+}}(%e{{[sb]}}p), %cl # 1-byte Reload\\n@@ -136,12 +133,12 @@ define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {\\n ; X86-NEXT:    movb %cl, {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Spill\\n ; X86-NEXT:    orl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill\\n ; X86-NEXT:    setne %bl\\n-; X86-NEXT:    orl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill\\n+; X86-NEXT:    orl %ebp, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n ; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n-; X86-NEXT:    movl %esi, (%ecx)\\n-; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n ; X86-NEXT:    movl %esi, 4(%ecx)\\n+; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload\\n+; X86-NEXT:    movl %esi, (%ecx)\\n ; X86-NEXT:    movl %eax, 8(%ecx)\\n ; X86-NEXT:    movl %edx, 12(%ecx)\\n ; X86-NEXT:    setne %al\\n@@ -153,7 +150,7 @@ define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {\\n ; X86-NEXT:    andb $1, %al\\n ; X86-NEXT:    movb %al, 16(%ecx)\\n ; X86-NEXT:    movl %ecx, %eax\\n-; X86-NEXT:    addl $24, %esp\\n+; X86-NEXT:    addl $28, %esp\\n ; X86-NEXT:    .cfi_def_cfa_offset 20\\n ; X86-NEXT:    popl %esi\\n ; X86-NEXT:    .cfi_def_cfa_offset 16\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lNWE4YWY3YTkwYzZhOWFjNDYyOTNlYjM2MDAwMjlkNDNkNjk1YjhlIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e5a8af7a90c6a9ac46293eb3600029d43d695b8e", "content": "{\"sha\": \"e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"node_id\": \"C_kwDOBITxeNoAKGU1YThhZjdhOTBjNmE5YWM0NjI5M2ViMzYwMDAyOWQ0M2Q2OTViOGU\", \"commit\": {\"author\": {\"name\": \"Gulfem Savrun Yeniceri\", \"email\": \"gulfem@google.com\", \"date\": \"2021-12-11T03:14:48Z\"}, \"committer\": {\"name\": \"Gulfem Savrun Yeniceri\", \"email\": \"gulfem@google.com\", \"date\": \"2021-12-12T04:40:17Z\"}, \"message\": \"[Passes] Fix relative lookup table converter pass\\n\\nThis patch fixes the relative table converter pass for the lookup table\\naccesses that are resulted in an instruction sequence, where gep is not\\nimmediately followed by a load, such as gep being hoisted outside the loop\\nor another instruction is inserted in between them. The fix inserts the\\ncall to load.relative.instrinsic in the original place of load instead of gep.\\nIssue is reported by FreeBSD via https://bugs.freebsd.org/259921.\\n\\nDifferential Revision: https://reviews.llvm.org/D115571\", \"tree\": {\"sha\": \"95053367b185ba790d0eafd016e1f5bc94e0408f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/95053367b185ba790d0eafd016e1f5bc94e0408f\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e5a8af7a90c6a9ac46293eb3600029d43d695b8e/comments\", \"author\": {\"login\": \"gulfemsavrun\", \"id\": 8526989, \"node_id\": \"MDQ6VXNlcjg1MjY5ODk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8526989?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gulfemsavrun\", \"html_url\": \"https://github.com/gulfemsavrun\", \"followers_url\": \"https://api.github.com/users/gulfemsavrun/followers\", \"following_url\": \"https://api.github.com/users/gulfemsavrun/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gulfemsavrun/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gulfemsavrun/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gulfemsavrun/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gulfemsavrun/orgs\", \"repos_url\": \"https://api.github.com/users/gulfemsavrun/repos\", \"events_url\": \"https://api.github.com/users/gulfemsavrun/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gulfemsavrun/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"gulfemsavrun\", \"id\": 8526989, \"node_id\": \"MDQ6VXNlcjg1MjY5ODk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/8526989?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gulfemsavrun\", \"html_url\": \"https://github.com/gulfemsavrun\", \"followers_url\": \"https://api.github.com/users/gulfemsavrun/followers\", \"following_url\": \"https://api.github.com/users/gulfemsavrun/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gulfemsavrun/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gulfemsavrun/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gulfemsavrun/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gulfemsavrun/orgs\", \"repos_url\": \"https://api.github.com/users/gulfemsavrun/repos\", \"events_url\": \"https://api.github.com/users/gulfemsavrun/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gulfemsavrun/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"93fbaa46c82abd2d54bce9a7c3b39b01c30220d6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/93fbaa46c82abd2d54bce9a7c3b39b01c30220d6\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/93fbaa46c82abd2d54bce9a7c3b39b01c30220d6\"}], \"stats\": {\"total\": 84, \"additions\": 84, \"deletions\": 0}, \"files\": [{\"sha\": \"65207056a3f40fd37ed8331efd4104c5ca58ee73\", \"filename\": \"llvm/lib/Transforms/Utils/RelLookupTableConverter.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e5a8af7a90c6a9ac46293eb3600029d43d695b8e/llvm%2Flib%2FTransforms%2FUtils%2FRelLookupTableConverter.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e5a8af7a90c6a9ac46293eb3600029d43d695b8e/llvm%2Flib%2FTransforms%2FUtils%2FRelLookupTableConverter.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FRelLookupTableConverter.cpp?ref=e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"patch\": \"@@ -144,6 +144,10 @@ static void convertToRelLookupTable(GlobalVariable &LookupTable) {\\n   Value *Offset =\\n       Builder.CreateShl(Index, ConstantInt::get(IntTy, 2), \\\"reltable.shift\\\");\\n \\n+  // Insert the call to load.relative instrinsic before LOAD.\\n+  // GEP might not be immediately followed by a LOAD, like it can be hoisted\\n+  // outside the loop or another instruction might be inserted them in between.\\n+  Builder.SetInsertPoint(Load);\\n   Function *LoadRelIntrinsic = llvm::Intrinsic::getDeclaration(\\n       &M, Intrinsic::load_relative, {Index->getType()});\\n   Value *Base = Builder.CreateBitCast(RelLookupTable, Builder.getInt8PtrTy());\"}, {\"sha\": \"c4bb91eafe531fb44788edd3abd18fe597e163fe\", \"filename\": \"llvm/test/Transforms/RelLookupTableConverter/X86/relative_lookup_table.ll\", \"status\": \"modified\", \"additions\": 80, \"deletions\": 0, \"changes\": 80, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e5a8af7a90c6a9ac46293eb3600029d43d695b8e/llvm%2Ftest%2FTransforms%2FRelLookupTableConverter%2FX86%2Frelative_lookup_table.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e5a8af7a90c6a9ac46293eb3600029d43d695b8e/llvm%2Ftest%2FTransforms%2FRelLookupTableConverter%2FX86%2Frelative_lookup_table.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FRelLookupTableConverter%2FX86%2Frelative_lookup_table.ll?ref=e5a8af7a90c6a9ac46293eb3600029d43d695b8e\", \"patch\": \"@@ -12,6 +12,9 @@ target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n @.str.5 = private unnamed_addr constant [5 x i8] c\\\"str1\\\\00\\\", align 1\\n @.str.6 = private unnamed_addr constant [5 x i8] c\\\"str2\\\\00\\\", align 1\\n @.str.7 = private unnamed_addr constant [12 x i8] c\\\"singlevalue\\\\00\\\", align 1\\n+@.str.8 = private unnamed_addr constant [2 x i8] c\\\"a\\\\00\\\", align 1\\n+@.str.9 = private unnamed_addr constant [2 x i8] c\\\"b\\\\00\\\", align 1\\n+@.str.10 = private unnamed_addr constant [2 x i8] c\\\"c\\\\00\\\", align 1\\n \\n @a1 = external global i32, align 4\\n @b1 = external global i32, align 4\\n@@ -56,6 +59,16 @@ target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n                                     i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)\\n                                    ], align 16\\n \\n+@table = internal constant [2 x i8*] [\\n+  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0),\\n+  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)\\n+], align 16\\n+\\n+@table2 = internal constant [2 x i8*] [\\n+  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0),\\n+  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)\\n+], align 16\\n+\\n ; Lookup table check for integer pointers that have external linkage\\n ; CHECK: @switch.table.external_linkage = private unnamed_addr constant [3 x i32*] [i32* @a1, i32* @b1, i32* @c1], align\\n \\n@@ -93,6 +106,20 @@ target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n ; CHECK-SAME: ], align 4\\n ;\\n \\n+; Relative lookup table for the loop hoist check test\\n+; CHECK: @reltable.loop_hoist = internal unnamed_addr constant [2 x i32]\\n+; CHECK-SAME: [\\n+; CHECK-SAME: i32 trunc (i64 sub (i64 ptrtoint ([2 x i8]* @.str.8 to i64), i64 ptrtoint ([2 x i32]* @reltable.loop_hoist to i64)) to i32),\\n+; CHECK-SAME: i32 trunc (i64 sub (i64 ptrtoint ([2 x i8]* @.str.9 to i64), i64 ptrtoint ([2 x i32]* @reltable.loop_hoist to i64)) to i32)\\n+; CHECK-SAME: ], align 4\\n+\\n+; Relative look up table for the test where gep is not immediately followed by a load check\\n+; CHECK: @reltable.gep_is_not_imm_followed_by_load = internal unnamed_addr constant [2 x i32]\\n+; CHECK-SAME: [\\n+; CHECK-SAME: i32 trunc (i64 sub (i64 ptrtoint ([2 x i8]* @.str.8 to i64), i64 ptrtoint ([2 x i32]* @reltable.gep_is_not_imm_followed_by_load to i64)) to i32),\\n+; CHECK-SAME: i32 trunc (i64 sub (i64 ptrtoint ([2 x i8]* @.str.9 to i64), i64 ptrtoint ([2 x i32]* @reltable.gep_is_not_imm_followed_by_load to i64)) to i32)\\n+; CHECK-SAME: ], align 4\\n+\\n ; Lookup table check for integer pointers that have external linkage\\n define i32* @external_linkage(i32 %cond) {\\n ; CHECK-LABEL: @external_linkage(\\n@@ -260,6 +287,59 @@ cond.end:                                         ; preds = %entry, %cond.false\\n   ret i8* %cond1\\n }\\n \\n+; Check to ensure that call @llvm.load.relative is inserted before load, not before gep.\\n+; When a lookup table is accessed inside a loop, and a gep is hosted outside the loop via licm,\\n+; make sure that call @llvm.load.relative is inserted before load.\\n+define i8* @loop_hoist(i32 %x) {\\n+; CHECK-LABEL: @loop_hoist(i32 %x)\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = icmp sgt i32 [[X:%.*]], 1\\n+; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0\\n+; CHECK-NEXT:    [[RELTABLE_SHIFT:%.*]] = shl i32 [[X:%.*]], 2\\n+; CHECK-NEXT:    br i1 [[TMP0]], label %if.done, label %if.false\\n+; CHECK:       if.false:\\n+; CHECK-NEXT:    [[RELTABLE_INTRINSIC:%.*]] = call i8* @llvm.load.relative.i32(i8* bitcast ([2 x i32]* @reltable.loop_hoist to i8*), i32 [[RELTABLE_SHIFT]])\\n+; CHECK-NEXT:    br label %if.done\\n+; CHECK:       if.done:\\n+; CHECK-NEXT:    [[TMP2:%.*]] = phi i8* [ [[TMP1]], %entry ], [ [[RELTABLE_INTRINSIC]], %if.false ]\\n+; CHECK-NEXT:    ret i8* [[TMP2]]\\n+;\\n+entry:\\n+  %0 = icmp sgt i32 %x, 1\\n+  %1 = getelementptr inbounds [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0\\n+  %2 = getelementptr [2 x i8*], [2 x i8*]* @table, i32 0, i32 %x\\n+  br i1 %0, label %if.done, label %if.false\\n+\\n+if.false:\\n+  %3 = load i8*, i8** %2\\n+  br label %if.done\\n+\\n+if.done:\\n+  %4 = phi i8* [ %1, %entry ], [ %3, %if.false ]\\n+  ret i8* %4\\n+}\\n+\\n+; Another check to ensure that call @llvm.load.relative is inserted before load but not before gep.\\n+; When a lookup table is accessed, and gep is not immediately followed by a load (like if there is a function call\\n+; or an exception in between), make sure that call @llvm.load.relative is inserted before load.\\n+; CHECK-LABEL: @may_not_return()\\n+declare void @may_not_return()\\n+\\n+define i8* @gep_is_not_imm_followed_by_load(i32 %x) {\\n+; CHECK-LABEL: @gep_is_not_imm_followed_by_load(i32 %x)\\n+; CHECK:       entry:\\n+; CHECK-NEXT:    [[RELTABLE_SHIFT:%.*]] = shl i32 [[X:%.*]], 2\\n+; CHECK-NEXT:    call void @may_not_return()\\n+; CHECK-NEXT:    [[RELTABLE_INTRINSIC:%.*]] = call i8* @llvm.load.relative.i32(i8* bitcast ([2 x i32]* @reltable.gep_is_not_imm_followed_by_load to i8*), i32 [[RELTABLE_SHIFT]])\\n+; CHECK-NEXT:    ret i8* [[RELTABLE_INTRINSIC]]\\n+;\\n+entry:\\n+  %0 = getelementptr [2 x i8*], [2 x i8*]* @table2, i32 0, i32 %x\\n+  call void @may_not_return()\\n+  %1 = load i8*, i8** %0\\n+  ret i8* %1\\n+}\\n+\\n !llvm.module.flags = !{!0, !1}\\n !0 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n !1 = !{i32 1, !\\\"Code Model\\\", i32 1}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iNmE0MWZkZGNmZDM3NWNlMzA0ODdlZjg3Y2EyY2Q2NWE2YmUwYmNjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc", "content": "{\"sha\": \"b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"node_id\": \"C_kwDOBITxeNoAKGI2YTQxZmRkY2ZkMzc1Y2UzMDQ4N2VmODdjYTJjZDY1YTZiZTBiY2M\", \"commit\": {\"author\": {\"name\": \"OCHyams\", \"email\": \"orlando.hyams@sony.com\", \"date\": \"2022-01-21T10:54:53Z\"}, \"committer\": {\"name\": \"OCHyams\", \"email\": \"orlando.hyams@sony.com\", \"date\": \"2022-01-21T11:37:49Z\"}, \"message\": \"[DWARF][DebugInfo] Fix off-by-one error in size of DW_TAG_base_type types\\n\\nFix PR53163 by rounding the byte size of DW_TAG_base_type types up. Without\\nthis fix we risk emitting types with a truncated size (including rounding\\nless-than-byte-sized types' sizes down to zero).\\n\\nReviewed By: probinson\\n\\nDifferential Revision: https://reviews.llvm.org/D117124\", \"tree\": {\"sha\": \"c48a6d34d62dac8ce059068964b04aabb8f627b3\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/c48a6d34d62dac8ce059068964b04aabb8f627b3\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc/comments\", \"author\": {\"login\": \"OCHyams\", \"id\": 16819903, \"node_id\": \"MDQ6VXNlcjE2ODE5OTAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16819903?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/OCHyams\", \"html_url\": \"https://github.com/OCHyams\", \"followers_url\": \"https://api.github.com/users/OCHyams/followers\", \"following_url\": \"https://api.github.com/users/OCHyams/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/OCHyams/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/OCHyams/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/OCHyams/subscriptions\", \"organizations_url\": \"https://api.github.com/users/OCHyams/orgs\", \"repos_url\": \"https://api.github.com/users/OCHyams/repos\", \"events_url\": \"https://api.github.com/users/OCHyams/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/OCHyams/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"OCHyams\", \"id\": 16819903, \"node_id\": \"MDQ6VXNlcjE2ODE5OTAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/16819903?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/OCHyams\", \"html_url\": \"https://github.com/OCHyams\", \"followers_url\": \"https://api.github.com/users/OCHyams/followers\", \"following_url\": \"https://api.github.com/users/OCHyams/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/OCHyams/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/OCHyams/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/OCHyams/subscriptions\", \"organizations_url\": \"https://api.github.com/users/OCHyams/orgs\", \"repos_url\": \"https://api.github.com/users/OCHyams/repos\", \"events_url\": \"https://api.github.com/users/OCHyams/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/OCHyams/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"597eae998a874a872b67d1a22a04d7c45d2ef94b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/597eae998a874a872b67d1a22a04d7c45d2ef94b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/597eae998a874a872b67d1a22a04d7c45d2ef94b\"}], \"stats\": {\"total\": 53, \"additions\": 52, \"deletions\": 1}, \"files\": [{\"sha\": \"ab3c9f486670e805c376b11b8eb6a98322fab53f\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfCompileUnit.cpp?ref=b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"patch\": \"@@ -1581,7 +1581,8 @@ void DwarfCompileUnit::createBaseTypeDIEs() {\\n               Twine(dwarf::AttributeEncodingString(Btr.Encoding) +\\n                     \\\"_\\\" + Twine(Btr.BitSize)).toStringRef(Str));\\n     addUInt(Die, dwarf::DW_AT_encoding, dwarf::DW_FORM_data1, Btr.Encoding);\\n-    addUInt(Die, dwarf::DW_AT_byte_size, None, Btr.BitSize / 8);\\n+    // Round up to smallest number of bytes that contains this number of bits.\\n+    addUInt(Die, dwarf::DW_AT_byte_size, None, divideCeil(Btr.BitSize, 8));\\n \\n     Btr.Die = &Die;\\n   }\"}, {\"sha\": \"3a8dc37bdc65fd9ad195f3b962c8e14fc6bcff38\", \"filename\": \"llvm/test/DebugInfo/X86/base-type-size.ll\", \"status\": \"added\", \"additions\": 50, \"deletions\": 0, \"changes\": 50, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc/llvm%2Ftest%2FDebugInfo%2FX86%2Fbase-type-size.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc/llvm%2Ftest%2FDebugInfo%2FX86%2Fbase-type-size.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbase-type-size.ll?ref=b6a41fddcfd375ce30487ef87ca2cd65a6be0bcc\", \"patch\": \"@@ -0,0 +1,50 @@\\n+; RUN: llc %s --filetype=obj -o - | llvm-dwarfdump - -o - | FileCheck %s\\n+\\n+;; cat test.cpp\\n+;; void ext(bool);\\n+;; void fun(bool b) { ext(b); }\\n+;; $ clang++ test.cpp -o - -emit-llvm -S -O2 -gdwarf-5\\n+;;\\n+;; Check that the DW_TAG_base_type DIE for the 1u conversion in the DIExpression\\n+;; has a non-zero DW_AT_byte_size attribute.\\n+\\n+; CHECK: DW_TAG_base_type\\n+; CHECK-NEXT: DW_AT_name      (\\\"DW_ATE_unsigned_1\\\")\\n+; CHECK-NEXT: DW_AT_encoding  (DW_ATE_unsigned)\\n+; CHECK-NEXT: DW_AT_byte_size (0x01)\\n+\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+define dso_local void @_Z3funb(i1 zeroext %b) local_unnamed_addr #0 !dbg !7 {\\n+entry:\\n+  call void @llvm.dbg.value(metadata i1 %b, metadata !12, metadata !DIExpression(DW_OP_LLVM_convert, 1, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !13\\n+  tail call void @_Z3extb(i1 zeroext %b), !dbg !14\\n+  ret void, !dbg !15\\n+}\\n+\\n+declare !dbg !16 dso_local void @_Z3extb(i1 zeroext) local_unnamed_addr\\n+declare void @llvm.dbg.value(metadata, metadata, metadata)\\n+\\n+!llvm.dbg.cu = !{!0}\\n+!llvm.module.flags = !{!2, !3, !4, !5}\\n+!llvm.ident = !{!6}\\n+\\n+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: \\\"clang version 14.0.0\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)\\n+!1 = !DIFile(filename: \\\"test.cpp\\\", directory: \\\"/\\\")\\n+!2 = !{i32 7, !\\\"Dwarf Version\\\", i32 5}\\n+!3 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!4 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!5 = !{i32 7, !\\\"uwtable\\\", i32 1}\\n+!6 = !{!\\\"clang version 14.0.0\\\"}\\n+!7 = distinct !DISubprogram(name: \\\"fun\\\", linkageName: \\\"_Z3funb\\\", scope: !1, file: !1, line: 2, type: !8, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)\\n+!8 = !DISubroutineType(types: !9)\\n+!9 = !{null, !10}\\n+!10 = !DIBasicType(name: \\\"bool\\\", size: 8, encoding: DW_ATE_boolean)\\n+!11 = !{!12}\\n+!12 = !DILocalVariable(name: \\\"b\\\", arg: 1, scope: !7, file: !1, line: 2, type: !10)\\n+!13 = !DILocation(line: 0, scope: !7)\\n+!14 = !DILocation(line: 2, column: 20, scope: !7)\\n+!15 = !DILocation(line: 2, column: 28, scope: !7)\\n+!16 = !DISubprogram(name: \\\"ext\\\", linkageName: \\\"_Z3extb\\\", scope: !1, file: !1, line: 1, type: !8, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !17)\\n+!17 = !{}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wZTc0ZDc1YTI5NTcyOWJjMTQ1NzI0ZmZhMDQ5NWZlZTRkMWI1OThjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0e74d75a295729bc145724ffa0495fee4d1b598c", "content": "{\"sha\": \"0e74d75a295729bc145724ffa0495fee4d1b598c\", \"node_id\": \"C_kwDOBITxeNoAKDBlNzRkNzVhMjk1NzI5YmMxNDU3MjRmZmEwNDk1ZmVlNGQxYjU5OGM\", \"commit\": {\"author\": {\"name\": \"Jay Foad\", \"email\": \"jay.foad@amd.com\", \"date\": \"2022-02-22T09:49:19Z\"}, \"committer\": {\"name\": \"Jay Foad\", \"email\": \"jay.foad@amd.com\", \"date\": \"2022-02-22T17:36:20Z\"}, \"message\": \"[StructurizeCFG] Fix boolean not bug\\n\\nD118623 added code to fold not-of-compare into a compare\\nwith the inverted predicate, if the compare had no other\\nuses. This relies on accurate use lists in the IR but it\\nwas run before setPhiValues, when some phi inputs are still\\nstored in a data structure on the side, instead of being\\nreal uses in the IR. The effect was that a phi that should\\nbe using the original compare result would now get an\\ninverted result instead.\\n\\nFix this by moving simplifyConditions after setPhiValues.\\n\\nDifferential Revision: https://reviews.llvm.org/D120312\", \"tree\": {\"sha\": \"42d97fb4dbfa795790fa4377823f6fd251cfbf32\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/42d97fb4dbfa795790fa4377823f6fd251cfbf32\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0e74d75a295729bc145724ffa0495fee4d1b598c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0e74d75a295729bc145724ffa0495fee4d1b598c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0e74d75a295729bc145724ffa0495fee4d1b598c\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0e74d75a295729bc145724ffa0495fee4d1b598c/comments\", \"author\": {\"login\": \"jayfoad\", \"id\": 108316, \"node_id\": \"MDQ6VXNlcjEwODMxNg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/108316?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jayfoad\", \"html_url\": \"https://github.com/jayfoad\", \"followers_url\": \"https://api.github.com/users/jayfoad/followers\", \"following_url\": \"https://api.github.com/users/jayfoad/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jayfoad/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jayfoad/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jayfoad/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jayfoad/orgs\", \"repos_url\": \"https://api.github.com/users/jayfoad/repos\", \"events_url\": \"https://api.github.com/users/jayfoad/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jayfoad/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jayfoad\", \"id\": 108316, \"node_id\": \"MDQ6VXNlcjEwODMxNg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/108316?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jayfoad\", \"html_url\": \"https://github.com/jayfoad\", \"followers_url\": \"https://api.github.com/users/jayfoad/followers\", \"following_url\": \"https://api.github.com/users/jayfoad/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jayfoad/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jayfoad/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jayfoad/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jayfoad/orgs\", \"repos_url\": \"https://api.github.com/users/jayfoad/repos\", \"events_url\": \"https://api.github.com/users/jayfoad/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jayfoad/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"cedc23bc8612feea61c0a7d92ccaae1ce51520ce\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/cedc23bc8612feea61c0a7d92ccaae1ce51520ce\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/cedc23bc8612feea61c0a7d92ccaae1ce51520ce\"}], \"stats\": {\"total\": 9, \"additions\": 4, \"deletions\": 5}, \"files\": [{\"sha\": \"14c7433531e5cc3b246293bed3f521ea0b5cf3cd\", \"filename\": \"llvm/lib/Transforms/Scalar/StructurizeCFG.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0e74d75a295729bc145724ffa0495fee4d1b598c/llvm%2Flib%2FTransforms%2FScalar%2FStructurizeCFG.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0e74d75a295729bc145724ffa0495fee4d1b598c/llvm%2Flib%2FTransforms%2FScalar%2FStructurizeCFG.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FStructurizeCFG.cpp?ref=0e74d75a295729bc145724ffa0495fee4d1b598c\", \"patch\": \"@@ -1089,8 +1089,8 @@ bool StructurizeCFG::run(Region *R, DominatorTree *DT) {\\n   createFlow();\\n   insertConditions(false);\\n   insertConditions(true);\\n-  simplifyConditions();\\n   setPhiValues();\\n+  simplifyConditions();\\n   simplifyAffectedPhis();\\n   rebuildSSA();\\n \"}, {\"sha\": \"aa8589563484c5ff6963c6bd3ae62e9cc74e97ac\", \"filename\": \"llvm/test/Transforms/StructurizeCFG/invert-condition.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 4, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0e74d75a295729bc145724ffa0495fee4d1b598c/llvm%2Ftest%2FTransforms%2FStructurizeCFG%2Finvert-condition.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0e74d75a295729bc145724ffa0495fee4d1b598c/llvm%2Ftest%2FTransforms%2FStructurizeCFG%2Finvert-condition.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FStructurizeCFG%2Finvert-condition.ll?ref=0e74d75a295729bc145724ffa0495fee4d1b598c\", \"patch\": \"@@ -29,13 +29,12 @@ bb5:                                              ; preds = %bb2\\n   ret void\\n }\\n \\n-; FIXME: StructurizeCFG modifies I5 in-place without updating the use of I5 in\\n-; the phi instruction.\\n define void @invert_condition_phi(i32 %arg) {\\n ; CHECK-LABEL: @invert_condition_phi(\\n ; CHECK-NEXT:  main_body:\\n-; CHECK-NEXT:    [[I5:%.*]] = icmp ne i32 [[ARG:%.*]], 0\\n-; CHECK-NEXT:    br i1 [[I5]], label [[IF1:%.*]], label [[ENDIF1:%.*]]\\n+; CHECK-NEXT:    [[I5:%.*]] = icmp eq i32 [[ARG:%.*]], 0\\n+; CHECK-NEXT:    [[I5_INV:%.*]] = xor i1 [[I5]], true\\n+; CHECK-NEXT:    br i1 [[I5_INV]], label [[IF1:%.*]], label [[ENDIF1:%.*]]\\n ; CHECK:       if1:\\n ; CHECK-NEXT:    br label [[ENDIF1]]\\n ; CHECK:       endif1:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hNWMzYjU3NDhjMTE3NmMxMWJkYzA0MTI3MWVhZDUzOTIyOTU3NDJkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/a5c3b5748c1176c11bdc041271ead5392295742d", "content": "{\"sha\": \"a5c3b5748c1176c11bdc041271ead5392295742d\", \"node_id\": \"C_kwDOBITxeNoAKGE1YzNiNTc0OGMxMTc2YzExYmRjMDQxMjcxZWFkNTM5MjI5NTc0MmQ\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-01T14:33:35Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-04T08:19:51Z\"}, \"message\": \"[MemCpyOpt] Work around PR54682\\n\\nAs discussed on https://github.com/llvm/llvm-project/issues/54682,\\nMemorySSA currently has a bug when computing the clobber of calls\\nthat access loop-varying locations. I think a \\\"proper\\\" fix for this\\non the MemorySSA side might be non-trivial, but we can easily work\\naround this in MemCpyOpt:\\n\\nCurrently, MemCpyOpt uses a location-less getClobberingMemoryAccess()\\ncall to find a clobber on either the src or dest location, and then\\nrefines it for the src and dest clobber. This was intended as an\\noptimization, as the location-less API is cached, while the\\nlocation-affected APIs are not.\\n\\nHowever, I don't think this really makes a difference in practice,\\nbecause I don't think anything will use the cached clobbers on\\nthose calls later anyway. On CTMark, this patch seems to be very\\nmildly positive actually.\\n\\nSo I think this is a reasonable way to avoid the problem for now,\\nthough MemorySSA should also get a fix.\\n\\nDifferential Revision: https://reviews.llvm.org/D122911\", \"tree\": {\"sha\": \"d9c9cf79509b835013aa32845b9feea2e12ad089\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d9c9cf79509b835013aa32845b9feea2e12ad089\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/a5c3b5748c1176c11bdc041271ead5392295742d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a5c3b5748c1176c11bdc041271ead5392295742d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/a5c3b5748c1176c11bdc041271ead5392295742d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/a5c3b5748c1176c11bdc041271ead5392295742d/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c0cc98251a453e2850c25adb10a3fd6b3e86a2e8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c0cc98251a453e2850c25adb10a3fd6b3e86a2e8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c0cc98251a453e2850c25adb10a3fd6b3e86a2e8\"}], \"stats\": {\"total\": 7, \"additions\": 5, \"deletions\": 2}, \"files\": [{\"sha\": \"6fa998bf134feefc5d8fe28f879549c2ad955c8a\", \"filename\": \"llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a5c3b5748c1176c11bdc041271ead5392295742d/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a5c3b5748c1176c11bdc041271ead5392295742d/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FMemCpyOptimizer.cpp?ref=a5c3b5748c1176c11bdc041271ead5392295742d\", \"patch\": \"@@ -1427,7 +1427,8 @@ bool MemCpyOptPass::processMemCpy(MemCpyInst *M, BasicBlock::iterator &BBI) {\\n       }\\n \\n   MemoryUseOrDef *MA = MSSA->getMemoryAccess(M);\\n-  MemoryAccess *AnyClobber = MSSA->getWalker()->getClobberingMemoryAccess(MA);\\n+  // FIXME: Not using getClobberingMemoryAccess() here due to PR54682.\\n+  MemoryAccess *AnyClobber = MA->getDefiningAccess();\\n   MemoryLocation DestLoc = MemoryLocation::getForDest(M);\\n   const MemoryAccess *DestClobber =\\n       MSSA->getWalker()->getClobberingMemoryAccess(AnyClobber, DestLoc);\"}, {\"sha\": \"2f18382636f8b50073567937deaf932d19bdedef\", \"filename\": \"llvm/test/Transforms/MemCpyOpt/pr54682.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/a5c3b5748c1176c11bdc041271ead5392295742d/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fpr54682.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/a5c3b5748c1176c11bdc041271ead5392295742d/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fpr54682.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FMemCpyOpt%2Fpr54682.ll?ref=a5c3b5748c1176c11bdc041271ead5392295742d\", \"patch\": \"@@ -1,7 +1,8 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt -S -memcpyopt < %s | FileCheck %s\\n \\n-; FIXME: This currently gets miscompiled.\\n+; The memcpy here is *not* dead, because it reads memory written in a previous\\n+; loop iteration.\\n \\n define void @test(i1 %c, i8* nocapture noundef readonly %path, i8* noundef writeonly %name) {\\n ; CHECK-LABEL: @test(\\n@@ -17,6 +18,7 @@ define void @test(i1 %c, i8* nocapture noundef readonly %path, i8* noundef write\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    [[TMP_IV_1:%.*]] = getelementptr inbounds i8, i8* [[TMP_IV]], i64 1\\n ; CHECK-NEXT:    [[LEN:%.*]] = sub nsw i64 259, [[IV]]\\n+; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 [[NAME:%.*]], i8* nonnull align 1 [[TMP_IV_1]], i64 [[LEN]], i1 false)\\n ; CHECK-NEXT:    ret void\\n ;\\n entry:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wNTlkMWY4NGQyZDU5MDkzMzAwYTgxYzI0NmRlODFiMWMxZGE3NjdiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/059d1f84d2d59093300a81c246de81b1c1da767b", "content": "{\"sha\": \"059d1f84d2d59093300a81c246de81b1c1da767b\", \"node_id\": \"C_kwDOBITxeNoAKDA1OWQxZjg0ZDJkNTkwOTMzMDBhODFjMjQ2ZGU4MWIxYzFkYTc2N2I\", \"commit\": {\"author\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse@sony.com\", \"date\": \"2022-04-04T10:11:24Z\"}, \"committer\": {\"name\": \"Jeremy Morse\", \"email\": \"jeremy.morse@sony.com\", \"date\": \"2022-04-04T10:14:13Z\"}, \"message\": \"[DebugInfo] Correctly recognize bitfields when emitting dwarf\\n\\nUse the \\\"isBitfield\\\" flag for debug types to determine whether something is\\na bitfield, rather than trying to guess from it's layout. Fixes\\nhttps://bugs.llvm.org/show_bug.cgi?id=44601\\n\\nPatch by: mahkoh\\n\\nDifferential Revision: https://reviews.llvm.org/D96334\", \"tree\": {\"sha\": \"3f28ba640e616e47f7a20134458ba76bbba96d97\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/3f28ba640e616e47f7a20134458ba76bbba96d97\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/059d1f84d2d59093300a81c246de81b1c1da767b\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/059d1f84d2d59093300a81c246de81b1c1da767b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/059d1f84d2d59093300a81c246de81b1c1da767b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/059d1f84d2d59093300a81c246de81b1c1da767b/comments\", \"author\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jmorse\", \"id\": 1631649, \"node_id\": \"MDQ6VXNlcjE2MzE2NDk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1631649?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jmorse\", \"html_url\": \"https://github.com/jmorse\", \"followers_url\": \"https://api.github.com/users/jmorse/followers\", \"following_url\": \"https://api.github.com/users/jmorse/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jmorse/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jmorse/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jmorse/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jmorse/orgs\", \"repos_url\": \"https://api.github.com/users/jmorse/repos\", \"events_url\": \"https://api.github.com/users/jmorse/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jmorse/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"623d4b57873df98ffad852462cf292601e79fb93\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/623d4b57873df98ffad852462cf292601e79fb93\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/623d4b57873df98ffad852462cf292601e79fb93\"}], \"stats\": {\"total\": 106, \"additions\": 80, \"deletions\": 26}, \"files\": [{\"sha\": \"3026dac37181edab0893dfafa3ae98b80449ee09\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -1621,7 +1621,7 @@ DIE &DwarfUnit::constructMemberDIE(DIE &Buffer, const DIDerivedType *DT) {\\n     uint32_t AlignInBytes = DT->getAlignInBytes();\\n     uint64_t OffsetInBytes;\\n \\n-    bool IsBitfield = FieldSize && Size != FieldSize;\\n+    bool IsBitfield = DT->isBitField();\\n     if (IsBitfield) {\\n       // Handle bitfield, assume bytes are 8 bits.\\n       if (DD->useDWARF2Bitfields())\"}, {\"sha\": \"868ac330d4fcad7f51741903dd995fabd5946666\", \"filename\": \"llvm/test/DebugInfo/AArch64/bitfields.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 4, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -24,6 +24,9 @@\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"b\\\"\\n ; CHECK-NOT: DW_TAG_member\\n+; CHECK:      DW_AT_byte_size  {{.*}} (0x04)\\n+; CHECK-NEXT: DW_AT_bit_size   {{.*}} (0x20)\\n+; CHECK-NEXT: DW_AT_bit_offset {{.*}} (0x00)\\n ; CHECK:      DW_AT_data_member_location {{.*}} (DW_OP_plus_uconst 0x4)\\n \\n ; CHECK: DW_TAG_member\\n@@ -63,11 +66,11 @@ target triple = \\\"aarch64_be--linux-gnu\\\"\\n !5 = !{!0}\\n !6 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 96, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2, flags: DIFlagBitField)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !14 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !15 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"168c88a5e480ac80cdd1fe3233c6ac5f5c6e2c6f\", \"filename\": \"llvm/test/DebugInfo/ARM/big-endian-bitfield.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -27,15 +27,15 @@ target datalayout = \\\"E-m:e-p:32:32-i64:64-v128:64:128-n32-S64\\\"\\n !5 = !{!0}\\n !6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"S\\\", file: !3, line: 1, size: 32, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 5)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 5, flags: DIFlagBitField)\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"j\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x00)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"k\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 6, offset: 5)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"m\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 5, offset: 11)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"n\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 8, offset: 16)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"k\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 6, offset: 5, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"m\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 5, offset: 11, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"n\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 8, offset: 16, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"k\\\"\"}, {\"sha\": \"c85680ef96055292bd3f767e7b650ac11c2d6f5d\", \"filename\": \"llvm/test/DebugInfo/ARM/bitfield.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -36,7 +36,7 @@ target triple = \\\"thumbv7-apple-ios\\\"\\n !7 = !{!8, !10}\\n !8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 8, align: 8)\\n !9 = !DIBasicType(name: \\\"char\\\", size: 8, align: 8, encoding: DW_ATE_signed_char)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"reserved\\\", scope: !6, file: !3, line: 4, baseType: !11, size: 28, align: 32, offset: 12)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"reserved\\\", scope: !6, file: !3, line: 4, baseType: !11, size: 28, align: 32, offset: 12, flags: DIFlagBitField)\\n !11 = !DIBasicType(name: \\\"int\\\", size: 32, align: 32, encoding: DW_ATE_signed)\\n !12 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !13 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\"}, {\"sha\": \"52382be51fec7cbcbbcc301a8016248b5aad377e\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields-dwarf4.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -43,7 +43,7 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NOT:  DW_AT_data_bit_offset\\n ; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !9 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 6, baseType: !11, size: 5, offset: 8)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 6, baseType: !11, size: 5, offset: 8, flags: DIFlagBitField)\\n !11 = !DIDerivedType(tag: DW_TAG_typedef, name: \\\"uint32_t\\\", file: !12, line: 183, baseType: !13)\\n !12 = !DIFile(filename: \\\"/Volumes/Data/llvm/_build.ninja.release/bin/../lib/clang/3.9.0/include/stdint.h\\\", directory: \\\"/Volumes/Data/llvm\\\")\\n !13 = !DIBasicType(name: \\\"unsigned int\\\", size: 32, encoding: DW_ATE_unsigned)\\n@@ -56,7 +56,7 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NOT:  DW_AT_byte_size\\n ; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x08)\\n ; CHECK-NOT:  DW_AT_data_member_location\\n-!14 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 7, baseType: !11, size: 27, offset: 13)\\n+!14 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 7, baseType: !11, size: 27, offset: 13, flags: DIFlagBitField)\\n !15 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n !16 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !17 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"dae92f9785e05904542a6c7ac0035f11bf2cecf7\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -63,11 +63,11 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n !5 = !{!0}\\n !6 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 96, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2, flags: DIFlagBitField)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !14 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !15 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"d252318cb79d43a5416c989afc585f6851e83273\", \"filename\": \"llvm/test/DebugInfo/X86/debug-info-packed-struct.ll\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 10, \"changes\": 20, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -157,7 +157,7 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !12 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n !13 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs1\\\", scope: !9, file: !8, line: 36, baseType: !14, size: 64, offset: 8)\\n !14 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_anon\\\", file: !8, line: 30, size: 64, elements: !4)\\n-!15 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs9\\\", scope: !9, file: !8, line: 37, baseType: !16, size: 1, offset: 72)\\n+!15 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs9\\\", scope: !9, file: !8, line: 37, baseType: !16, size: 1, offset: 72, flags: DIFlagBitField)\\n !16 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n !17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())\\n !18 = !DIGlobalVariable(name: \\\"l2\\\", scope: !2, file: !8, line: 90, type: !19, isLocal: false, isDefinition: true)\\n@@ -167,10 +167,10 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !22 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs1\\\", scope: !19, file: !8, line: 56, baseType: !23, size: 64, offset: 8)\\n !23 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_pack1\\\", file: !8, line: 50, size: 64, elements: !24)\\n !24 = !{!25, !26}\\n-!25 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !23, file: !8, line: 51, baseType: !16, size: 4)\\n-!26 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !23, file: !8, line: 52, baseType: !27, size: 60, offset: 4)\\n+!25 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !23, file: !8, line: 51, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!26 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !23, file: !8, line: 52, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n !27 = !DIBasicType(name: \\\"long long int\\\", size: 64, encoding: DW_ATE_signed)\\n-!28 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs9\\\", scope: !19, file: !8, line: 57, baseType: !16, size: 1, offset: 72)\\n+!28 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs9\\\", scope: !19, file: !8, line: 57, baseType: !16, size: 1, offset: 72, flags: DIFlagBitField)\\n !29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())\\n !30 = !DIGlobalVariable(name: \\\"l3\\\", scope: !2, file: !8, line: 91, type: !31, isLocal: false, isDefinition: true)\\n !31 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"layout3\\\", file: !8, line: 76, size: 128, elements: !32)\\n@@ -179,18 +179,18 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !34 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs4\\\", scope: !31, file: !8, line: 78, baseType: !35, size: 64, offset: 32)\\n !35 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_pack4\\\", file: !8, line: 72, size: 64, elements: !36)\\n !36 = !{!37, !38}\\n-!37 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !35, file: !8, line: 73, baseType: !16, size: 4)\\n-!38 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !35, file: !8, line: 74, baseType: !27, size: 60, offset: 4)\\n-!39 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs12\\\", scope: !31, file: !8, line: 79, baseType: !16, size: 1, offset: 96)\\n+!37 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !35, file: !8, line: 73, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!38 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !35, file: !8, line: 74, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n+!39 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs12\\\", scope: !31, file: !8, line: 79, baseType: !16, size: 1, offset: 96, flags: DIFlagBitField)\\n !40 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"layout0\\\", file: !8, line: 15, size: 192, elements: !41)\\n !41 = !{!42, !43, !48}\\n !42 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs0\\\", scope: !40, file: !8, line: 16, baseType: !12, size: 8)\\n !43 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs8\\\", scope: !40, file: !8, line: 17, baseType: !44, size: 64, offset: 64)\\n !44 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8\\\", file: !8, line: 11, size: 64, elements: !45)\\n !45 = !{!46, !47}\\n-!46 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !44, file: !8, line: 12, baseType: !16, size: 4)\\n-!47 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !44, file: !8, line: 13, baseType: !27, size: 60, offset: 4)\\n-!48 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs16\\\", scope: !40, file: !8, line: 18, baseType: !16, size: 1, offset: 128)\\n+!46 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !44, file: !8, line: 12, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!47 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !44, file: !8, line: 13, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n+!48 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs16\\\", scope: !40, file: !8, line: 18, baseType: !16, size: 1, offset: 128, flags: DIFlagBitField)\\n !49 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !50 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !51 = !{!\\\"clang version 3.7.0 (trunk 240791) (llvm/trunk 240790)\\\"}\"}, {\"sha\": \"904187aa89a524c8c0e062b9fb6c9d7943b320ed\", \"filename\": \"llvm/test/DebugInfo/X86/packed_bitfields2.ll\", \"status\": \"added\", \"additions\": 51, \"deletions\": 0, \"changes\": 51, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/059d1f84d2d59093300a81c246de81b1c1da767b/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll?ref=059d1f84d2d59093300a81c246de81b1c1da767b\", \"patch\": \"@@ -0,0 +1,51 @@\\n+; RUN: llc -dwarf-version=5 -debugger-tune=lldb -mtriple x86_64-unknown-linux-gnu -O0 -filetype=obj -o %t_2_le.o %s\\n+; RUN: llvm-dwarfdump -v -debug-info %t_2_le.o | FileCheck %s\\n+\\n+; Produced at -O0 from:\\n+; struct __attribute__((packed)) bitfield {\\n+; \\tint i:1;\\n+; \\tint j:32;\\n+; } bitfield;\\n+\\n+; CHECK: DW_TAG_member\\n+; CHECK-NEXT: DW_AT_name{{.*}}\\\"i\\\"\\n+; CHECK-NOT: DW_TAG_member\\n+; CHECK: DW_AT_bit_size   {{.*}} (0x01)\\n+; CHECK-NEXT: DW_AT_data_bit_offset {{.*}} (0x00)\\n+\\n+; CHECK: DW_TAG_member\\n+; CHECK-NEXT: DW_AT_name{{.*}}\\\"j\\\"\\n+; CHECK-NOT: DW_TAG_member\\n+; CHECK: DW_AT_bit_size   {{.*}} (0x20)\\n+; CHECK-NEXT: DW_AT_data_bit_offset {{.*}} (0x01)\\n+\\n+; ModuleID = 'packed_bitfields2.c'\\n+source_filename = \\\"packed_bitfields2.c\\\"\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-pc-linux-gnu\\\"\\n+\\n+%struct.bitfield = type { [5 x i8] }\\n+\\n+@bitfield = dso_local global %struct.bitfield zeroinitializer, align 1, !dbg !0\\n+\\n+!llvm.dbg.cu = !{!2}\\n+!llvm.module.flags = !{!11, !12, !13, !14, !15}\\n+!llvm.ident = !{!16}\\n+\\n+!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())\\n+!1 = distinct !DIGlobalVariable(name: \\\"bitfield\\\", scope: !2, file: !3, line: 4, type: !6, isLocal: false, isDefinition: true)\\n+!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: \\\"clang version 11.0.1\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None, sysroot: \\\"/\\\")\\n+!3 = !DIFile(filename: \\\"packed_bitfields2.c\\\", directory: \\\"/\\\")\\n+!4 = !{}\\n+!5 = !{!0}\\n+!6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 40, elements: !7)\\n+!7 = !{!8, !10}\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 1, flags: DIFlagBitField, extraData: i64 0)\\n+!9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 1, flags: DIFlagBitField, extraData: i64 0)\\n+!11 = !{i32 7, !\\\"Dwarf Version\\\", i32 5}\\n+!12 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!13 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!14 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+!15 = !{i32 7, !\\\"PIE Level\\\", i32 2}\\n+!16 = !{!\\\"clang version 11.0.1\\\"}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lMjJhZjAzYTc5NGQ2MzM5MTVkMGI1MWMxNWUwNWJiOWNiOWI0ZWM5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e22af03a794d633915d0b51c15e05bb9cb9b4ec9", "content": "{\"sha\": \"e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"node_id\": \"C_kwDOBITxeNoAKGUyMmFmMDNhNzk0ZDYzMzkxNWQwYjUxYzE1ZTA1YmI5Y2I5YjRlYzk\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-07T14:23:56Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-07T14:35:05Z\"}, \"message\": \"[Sink] Don't sink non-willreturn calls (PR51188)\\n\\nFixes https://github.com/llvm/llvm-project/issues/51188.\", \"tree\": {\"sha\": \"f49ae9f9d66ebb86ff9a56473d8a04ae727bb56c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/f49ae9f9d66ebb86ff9a56473d8a04ae727bb56c\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e22af03a794d633915d0b51c15e05bb9cb9b4ec9/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7d452742632dc0d14e45bac72a2874c75d64e15e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7d452742632dc0d14e45bac72a2874c75d64e15e\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7d452742632dc0d14e45bac72a2874c75d64e15e\"}], \"stats\": {\"total\": 14, \"additions\": 7, \"deletions\": 7}, \"files\": [{\"sha\": \"e8fde53005f0b7c6b59034d01a60aadbbc3f1124\", \"filename\": \"llvm/lib/Transforms/Scalar/Sink.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e22af03a794d633915d0b51c15e05bb9cb9b4ec9/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e22af03a794d633915d0b51c15e05bb9cb9b4ec9/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FSink.cpp?ref=e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"patch\": \"@@ -43,7 +43,7 @@ static bool isSafeToMove(Instruction *Inst, AliasAnalysis &AA,\\n   }\\n \\n   if (Inst->isTerminator() || isa<PHINode>(Inst) || Inst->isEHPad() ||\\n-      Inst->mayThrow())\\n+      Inst->mayThrow() || !Inst->willReturn())\\n     return false;\\n \\n   if (auto *Call = dyn_cast<CallBase>(Inst)) {\"}, {\"sha\": \"2fb339a69ac8c454fcffe6442917bf85d5588ce9\", \"filename\": \"llvm/test/Transforms/Sink/call.ll\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 6, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e22af03a794d633915d0b51c15e05bb9cb9b4ec9/llvm%2Ftest%2FTransforms%2FSink%2Fcall.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e22af03a794d633915d0b51c15e05bb9cb9b4ec9/llvm%2Ftest%2FTransforms%2FSink%2Fcall.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSink%2Fcall.ll?ref=e22af03a794d633915d0b51c15e05bb9cb9b4ec9\", \"patch\": \"@@ -4,11 +4,11 @@\\n declare i32 @f_load_global() nounwind willreturn readonly\\n declare i32 @f_load_global_throwable() willreturn readonly\\n declare i32 @f_load_global_may_not_return() nounwind readonly\\n-declare i32 @f_load_arg(i32*) nounwind readonly argmemonly\\n-declare void @f_store_global(i32) nounwind\\n-declare void @f_store_arg(i32*) nounwind argmemonly\\n-declare void @f_readonly_arg(i32* readonly, i32*) nounwind argmemonly\\n-declare i32 @f_readnone(i32) nounwind readnone\\n+declare i32 @f_load_arg(i32*) nounwind willreturn readonly argmemonly\\n+declare void @f_store_global(i32) nounwind willreturn\\n+declare void @f_store_arg(i32*) nounwind willreturn argmemonly\\n+declare void @f_readonly_arg(i32* readonly, i32*) nounwind willreturn argmemonly\\n+declare i32 @f_readnone(i32) nounwind willreturn readnone\\n \\n @A = external global i32\\n @B = external global i32\\n@@ -51,9 +51,9 @@ false:\\n \\n define i32 @test_may_not_return_no_stores(i1 %z) {\\n ; CHECK-LABEL: @test_may_not_return_no_stores(\\n+; CHECK-NEXT:    [[L:%.*]] = call i32 @f_load_global_may_not_return()\\n ; CHECK-NEXT:    br i1 [[Z:%.*]], label [[TRUE:%.*]], label [[FALSE:%.*]]\\n ; CHECK:       true:\\n-; CHECK-NEXT:    [[L:%.*]] = call i32 @f_load_global_may_not_return()\\n ; CHECK-NEXT:    ret i32 [[L]]\\n ; CHECK:       false:\\n ; CHECK-NEXT:    ret i32 0\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85MzBhNjg3NjVkZmY5NjkyN2Q3MDZkMjU4ZWYwYzJhZDljN2VjMmFiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/930a68765dff96927d706d258ef0c2ad9c7ec2ab", "content": "{\"sha\": \"930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"node_id\": \"C_kwDOBITxeNoAKDkzMGE2ODc2NWRmZjk2OTI3ZDcwNmQyNThlZjBjMmFkOWM3ZWMyYWI\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-08T15:26:29Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-04-08T15:29:29Z\"}, \"message\": \"[Loads] Check type size in bits during store to load forwarding\\n\\nRather than checking the rounded type store size, check the type\\nsize in bits. We don't want to forward a store of i1 to a load\\nof i8 for example, even though they have the same type store size.\\nThe padding bits have unspecified contents.\\n\\nThis is a partial fix for the issue reported at\\nhttps://reviews.llvm.org/D115924#inline-1179482,\\nthe problem also needs to be addressed more generally in the\\nconstant folding code.\", \"tree\": {\"sha\": \"2c43903fa980fc2559db6535dfd40f2aa444f840\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2c43903fa980fc2559db6535dfd40f2aa444f840\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/930a68765dff96927d706d258ef0c2ad9c7ec2ab/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"29fe998eaa38d52d0f764800e17917cff1375598\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/29fe998eaa38d52d0f764800e17917cff1375598\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/29fe998eaa38d52d0f764800e17917cff1375598\"}], \"stats\": {\"total\": 8, \"additions\": 5, \"deletions\": 3}, \"files\": [{\"sha\": \"bc1d82cf148065dc2c5ff5fc404eaf83846e76e0\", \"filename\": \"llvm/lib/Analysis/Loads.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/930a68765dff96927d706d258ef0c2ad9c7ec2ab/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/930a68765dff96927d706d258ef0c2ad9c7ec2ab/llvm%2Flib%2FAnalysis%2FLoads.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLoads.cpp?ref=930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"patch\": \"@@ -504,8 +504,8 @@ static Value *getAvailableLoadStore(Instruction *Inst, const Value *Ptr,\\n     if (CastInst::isBitOrNoopPointerCastable(Val->getType(), AccessTy, DL))\\n       return Val;\\n \\n-    TypeSize StoreSize = DL.getTypeStoreSize(Val->getType());\\n-    TypeSize LoadSize = DL.getTypeStoreSize(AccessTy);\\n+    TypeSize StoreSize = DL.getTypeSizeInBits(Val->getType());\\n+    TypeSize LoadSize = DL.getTypeSizeInBits(AccessTy);\\n     if (TypeSize::isKnownLE(LoadSize, StoreSize))\\n       if (auto *C = dyn_cast<Constant>(Val))\\n         return ConstantFoldLoadFromConst(C, AccessTy, DL);\"}, {\"sha\": \"750eb51e405d16d405917d5c4d602d64e82853a2\", \"filename\": \"llvm/test/Transforms/InstCombine/load-store-forward.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/930a68765dff96927d706d258ef0c2ad9c7ec2ab/llvm%2Ftest%2FTransforms%2FInstCombine%2Fload-store-forward.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/930a68765dff96927d706d258ef0c2ad9c7ec2ab/llvm%2Ftest%2FTransforms%2FInstCombine%2Fload-store-forward.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fload-store-forward.ll?ref=930a68765dff96927d706d258ef0c2ad9c7ec2ab\", \"patch\": \"@@ -293,7 +293,9 @@ entry:\\n define i8 @load_i8_store_i1(i1* %a) {\\n ; CHECK-LABEL: @load_i8_store_i1(\\n ; CHECK-NEXT:    store i1 true, i1* [[A:%.*]], align 1\\n-; CHECK-NEXT:    ret i8 -1\\n+; CHECK-NEXT:    [[A_I8:%.*]] = bitcast i1* [[A]] to i8*\\n+; CHECK-NEXT:    [[V:%.*]] = load i8, i8* [[A_I8]], align 1\\n+; CHECK-NEXT:    ret i8 [[V]]\\n ;\\n   store i1 true, i1* %a\\n   %a.i8 = bitcast i1* %a to i8*\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83MzNkN2NmOTY0OTk2OGMwNWY0MTQ4MDc0N2VkOTFjN2IwYzNhODJmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/733d7cf9649968c05f41480747ed91c7b0c3a82f", "content": "{\"sha\": \"733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"node_id\": \"C_kwDOBITxeNoAKDczM2Q3Y2Y5NjQ5OTY4YzA1ZjQxNDgwNzQ3ZWQ5MWM3YjBjM2E4MmY\", \"commit\": {\"author\": {\"name\": \"Chuanqi Xu\", \"email\": \"yedeng.yd@linux.alibaba.com\", \"date\": \"2022-05-24T06:09:18Z\"}, \"committer\": {\"name\": \"Chuanqi Xu\", \"email\": \"yedeng.yd@linux.alibaba.com\", \"date\": \"2022-06-08T02:53:51Z\"}, \"message\": \"[Debug] [Coroutines] Add deref operator for non complex expression\\n\\nBackground:\\n\\nWhen we construct coroutine frame, we would insert a dbg.declare\\nintrinsic for it:\\n```\\n%hdl = call void @llvm.coro.begin() ; would return coroutine handle\\ncall void @llvm.dbg.declare(metadata ptr %hdl, metadata\\n![[DEBUG_VARIABLE: __coro_frame]], metadata !DIExpression())\\n```\\n\\nAnd in the splitted coroutine, it looks like:\\n```\\ndefine void @coro_func.resume(ptr *hdl) {\\nentry.resume:\\n    call void @llvm.dbg.declare(metadata ptr %hdl, metadata\\n![[DEBUG_VARIABLE: __coro_frame]], metadata !DIExpression())\\n}\\n```\\n\\nAnd we would salvage the debug info by inserting a new alloca here:\\n```\\ndefine void @coro_func.resume(ptr %hdl) {\\nentry.resume:\\n    %frame.debug = alloca ptr\\n    call void @llvm.dbg.declare(metadata ptr %frame.debug, metadata\\n![[DEBUG_VARIABLE: __coro_frame]], metadata !DIExpression())\\n    store ptr %hdl, %frame.debug\\n}\\n```\\n\\nBut now, the problem comes since the `dbg.declare` refers to the address\\nof that alloca instead of actual coroutine handle. I saw there are codes\\nto solve the problem but it only applies to complex expression only. I\\nfeel if it is OK to relax the condition to make it work for\\n`__coro_frame`.\\n\\nReviewed By: jmorse\\n\\nDifferential Revision: https://reviews.llvm.org/D126277\", \"tree\": {\"sha\": \"da3cc863a1ea424ca4fba4e4451b9e1724c201af\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/da3cc863a1ea424ca4fba4e4451b9e1724c201af\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/733d7cf9649968c05f41480747ed91c7b0c3a82f/comments\", \"author\": {\"login\": \"ChuanqiXu9\", \"id\": 68680648, \"node_id\": \"MDQ6VXNlcjY4NjgwNjQ4\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/68680648?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ChuanqiXu9\", \"html_url\": \"https://github.com/ChuanqiXu9\", \"followers_url\": \"https://api.github.com/users/ChuanqiXu9/followers\", \"following_url\": \"https://api.github.com/users/ChuanqiXu9/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ChuanqiXu9/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ChuanqiXu9/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ChuanqiXu9/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ChuanqiXu9/orgs\", \"repos_url\": \"https://api.github.com/users/ChuanqiXu9/repos\", \"events_url\": \"https://api.github.com/users/ChuanqiXu9/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ChuanqiXu9/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"ChuanqiXu9\", \"id\": 68680648, \"node_id\": \"MDQ6VXNlcjY4NjgwNjQ4\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/68680648?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/ChuanqiXu9\", \"html_url\": \"https://github.com/ChuanqiXu9\", \"followers_url\": \"https://api.github.com/users/ChuanqiXu9/followers\", \"following_url\": \"https://api.github.com/users/ChuanqiXu9/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/ChuanqiXu9/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/ChuanqiXu9/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/ChuanqiXu9/subscriptions\", \"organizations_url\": \"https://api.github.com/users/ChuanqiXu9/orgs\", \"repos_url\": \"https://api.github.com/users/ChuanqiXu9/repos\", \"events_url\": \"https://api.github.com/users/ChuanqiXu9/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/ChuanqiXu9/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"9b3c5cba9f71e0d7d81feec9260ce7aafec858a0\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9b3c5cba9f71e0d7d81feec9260ce7aafec858a0\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/9b3c5cba9f71e0d7d81feec9260ce7aafec858a0\"}], \"stats\": {\"total\": 7, \"additions\": 4, \"deletions\": 3}, \"files\": [{\"sha\": \"dea190901aa97d7538f755e63a8003faec22f45d\", \"filename\": \"llvm/lib/Transforms/Coroutines/CoroFrame.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/733d7cf9649968c05f41480747ed91c7b0c3a82f/llvm%2Flib%2FTransforms%2FCoroutines%2FCoroFrame.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/733d7cf9649968c05f41480747ed91c7b0c3a82f/llvm%2Flib%2FTransforms%2FCoroutines%2FCoroFrame.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FCoroutines%2FCoroFrame.cpp?ref=733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"patch\": \"@@ -2564,6 +2564,7 @@ void coro::salvageDebugInfo(\\n   bool SkipOutermostLoad = !isa<DbgValueInst>(DVI);\\n   Value *Storage = DVI->getVariableLocationOp(0);\\n   Value *OriginalStorage = Storage;\\n+\\n   while (auto *Inst = dyn_cast_or_null<Instruction>(Storage)) {\\n     if (auto *LdInst = dyn_cast<LoadInst>(Inst)) {\\n       Storage = LdInst->getOperand(0);\\n@@ -2619,8 +2620,7 @@ void coro::salvageDebugInfo(\\n       // expression, we need to add a DW_OP_deref at the *start* of the\\n       // expression to first load the contents of the alloca before\\n       // adjusting it with the expression.\\n-      if (Expr && Expr->isComplex())\\n-        Expr = DIExpression::prepend(Expr, DIExpression::DerefBefore);\\n+      Expr = DIExpression::prepend(Expr, DIExpression::DerefBefore);\\n     }\\n \\n   DVI->replaceVariableLocationOp(OriginalStorage, Storage);\"}, {\"sha\": \"f275e50cfb2812cab3dfff7419b92ffb3740e297\", \"filename\": \"llvm/test/Transforms/Coroutines/coro-debug-coro-frame.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/733d7cf9649968c05f41480747ed91c7b0c3a82f/llvm%2Ftest%2FTransforms%2FCoroutines%2Fcoro-debug-coro-frame.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/733d7cf9649968c05f41480747ed91c7b0c3a82f/llvm%2Ftest%2FTransforms%2FCoroutines%2Fcoro-debug-coro-frame.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FCoroutines%2Fcoro-debug-coro-frame.ll?ref=733d7cf9649968c05f41480747ed91c7b0c3a82f\", \"patch\": \"@@ -10,7 +10,8 @@\\n ;\\n ; CHECK:       define internal fastcc void @f.resume(\\n ; CHECK:       entry.resume:\\n-; CHECK:            call void @llvm.dbg.declare(metadata %f.Frame** %[[FramePtr_RESUME:.*]], metadata ![[CORO_FRAME_IN_RESUME:[0-9]+]], metadata !DIExpression()\\n+; CHECK:            %[[FramePtr_RESUME:.*]] = alloca %f.Frame*\\n+; CHECK:            call void @llvm.dbg.declare(metadata %f.Frame** %[[FramePtr_RESUME]], metadata ![[CORO_FRAME_IN_RESUME:[0-9]+]], metadata !DIExpression(DW_OP_deref)\\n ;\\n ; CHECK-DAG: ![[FILE:[0-9]+]] = !DIFile(filename: \\\"coro-debug.cpp\\\"\\n ; CHECK-DAG: ![[RAMP:[0-9]+]] = distinct !DISubprogram(name: \\\"foo\\\", linkageName: \\\"_Z3foov\\\",\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81MzRiOTI0NmEyMDQ5OGUyY2Q0ZDJiOWE1MTJlN2M1ZTc1YzgzYmM3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7", "content": "{\"sha\": \"534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"node_id\": \"C_kwDOBITxeNoAKDUzNGI5MjQ2YTIwNDk4ZTJjZDRkMmI5YTUxMmU3YzVlNzVjODNiYzc\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-07-15T10:35:08Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-07-19T07:57:28Z\"}, \"message\": \"[LoopInfo] Allow cloning of callbr\\n\\nAfter D129288, callbr is safe to clone without special handling.\\nThis permits optimizations like loop unroll and loop unswitch on\\nloops containing callbrs.\\n\\nFixes https://github.com/llvm/llvm-project/issues/41834.\\n\\nDifferential Revision: https://reviews.llvm.org/D129993\", \"tree\": {\"sha\": \"bcbc923fa8b547ed793a0518fe1a76f2b50a5254\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/bcbc923fa8b547ed793a0518fe1a76f2b50a5254\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d489b3807f096584175c321ce7f20e9dcd49b1da\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d489b3807f096584175c321ce7f20e9dcd49b1da\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d489b3807f096584175c321ce7f20e9dcd49b1da\"}], \"stats\": {\"total\": 51, \"additions\": 34, \"deletions\": 17}, \"files\": [{\"sha\": \"693b9ebd450a8a5f8594c8aa5a5c331b6c448fb8\", \"filename\": \"llvm/lib/Analysis/LoopInfo.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 4, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Flib%2FAnalysis%2FLoopInfo.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Flib%2FAnalysis%2FLoopInfo.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLoopInfo.cpp?ref=534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"patch\": \"@@ -482,11 +482,8 @@ bool Loop::isLoopSimplifyForm() const {\\n bool Loop::isSafeToClone() const {\\n   // Return false if any loop blocks contain indirectbrs, or there are any calls\\n   // to noduplicate functions.\\n-  // FIXME: it should be ok to clone CallBrInst's if we correctly update the\\n-  // operand list to reflect the newly cloned labels.\\n   for (BasicBlock *BB : this->blocks()) {\\n-    if (isa<IndirectBrInst>(BB->getTerminator()) ||\\n-        isa<CallBrInst>(BB->getTerminator()))\\n+    if (isa<IndirectBrInst>(BB->getTerminator()))\\n       return false;\\n \\n     for (Instruction &I : *BB)\"}, {\"sha\": \"80c4d4c47ad27d97e3e19d84b095a452d3f2b04a\", \"filename\": \"llvm/test/Transforms/LoopUnroll/callbr.ll\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 11, \"changes\": 34, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fcallbr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fcallbr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fcallbr.ll?ref=534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"patch\": \"@@ -1,19 +1,13 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt -loop-unroll -S %s | FileCheck %s\\n \\n-; Check that the loop body does not get unrolled.  We could modify this test in\\n-; the future to support loop unrolling callbr's IFF we checked that the callbr\\n-; operands were unrolled/updated correctly, as today they are not.\\n+; Check that the loop body containing callbr is correctly unrolled.\\n define dso_local void @d() {\\n ; CHECK-LABEL: @d(\\n ; CHECK-NEXT:  entry:\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n-; CHECK:       for.cond.cleanup:\\n-; CHECK-NEXT:    ret void\\n ; CHECK:       for.body:\\n-; CHECK-NEXT:    [[E_04:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[FOR_INC:%.*]] ]\\n-; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp eq i32 [[E_04]], 0\\n-; CHECK-NEXT:    br i1 [[TOBOOL]], label [[FOR_INC]], label [[IF_THEN:%.*]]\\n+; CHECK-NEXT:    br i1 true, label [[FOR_INC:%.*]], label [[IF_THEN:%.*]]\\n ; CHECK:       if.then:\\n ; CHECK-NEXT:    callbr void asm sideeffect \\\"1: nop\\\\0A\\\\09.quad b, ${0:l}, $$5\\\\0A\\\\09\\\", \\\"!i,~{dirflag},~{fpsr},~{flags}\\\"()\\n ; CHECK-NEXT:    to label [[ASM_FALLTHROUGH:%.*]] [label %l_yes]\\n@@ -23,9 +17,27 @@ define dso_local void @d() {\\n ; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 (...) @g()\\n ; CHECK-NEXT:    br label [[FOR_INC]]\\n ; CHECK:       for.inc:\\n-; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[E_04]], 1\\n-; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[INC]], 3\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY]]\\n+; CHECK-NEXT:    br i1 false, label [[FOR_INC_1:%.*]], label [[IF_THEN_1:%.*]]\\n+; CHECK:       if.then.1:\\n+; CHECK-NEXT:    callbr void asm sideeffect \\\"1: nop\\\\0A\\\\09.quad b, ${0:l}, $$5\\\\0A\\\\09\\\", \\\"!i,~{dirflag},~{fpsr},~{flags}\\\"()\\n+; CHECK-NEXT:    to label [[ASM_FALLTHROUGH_1:%.*]] [label %l_yes.1]\\n+; CHECK:       asm.fallthrough.1:\\n+; CHECK-NEXT:    br label [[L_YES_1:%.*]]\\n+; CHECK:       l_yes.1:\\n+; CHECK-NEXT:    [[CALL_1:%.*]] = tail call i32 (...) @g()\\n+; CHECK-NEXT:    br label [[FOR_INC_1]]\\n+; CHECK:       for.inc.1:\\n+; CHECK-NEXT:    br i1 false, label [[FOR_INC_2:%.*]], label [[IF_THEN_2:%.*]]\\n+; CHECK:       if.then.2:\\n+; CHECK-NEXT:    callbr void asm sideeffect \\\"1: nop\\\\0A\\\\09.quad b, ${0:l}, $$5\\\\0A\\\\09\\\", \\\"!i,~{dirflag},~{fpsr},~{flags}\\\"()\\n+; CHECK-NEXT:    to label [[ASM_FALLTHROUGH_2:%.*]] [label %l_yes.2]\\n+; CHECK:       asm.fallthrough.2:\\n+; CHECK-NEXT:    br label [[L_YES_2:%.*]]\\n+; CHECK:       l_yes.2:\\n+; CHECK-NEXT:    [[CALL_2:%.*]] = tail call i32 (...) @g()\\n+; CHECK-NEXT:    br label [[FOR_INC_2]]\\n+; CHECK:       for.inc.2:\\n+; CHECK-NEXT:    ret void\\n ;\\n entry:\\n   br label %for.body\"}, {\"sha\": \"98bf3edc6b8d53deb7f216885f006573d125ff2b\", \"filename\": \"llvm/test/Transforms/SimpleLoopUnswitch/callbr.ll\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 2, \"changes\": 12, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fcallbr.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/534b9246a20498e2cd4d2b9a512e7c5e75c83bc7/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fcallbr.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSimpleLoopUnswitch%2Fcallbr.ll?ref=534b9246a20498e2cd4d2b9a512e7c5e75c83bc7\", \"patch\": \"@@ -6,12 +6,20 @@ declare i1 @foo()\\n define i32 @mem_cgroup_node_nr_lru_pages(i1 %tree) {\\n ; CHECK-LABEL: @mem_cgroup_node_nr_lru_pages(\\n ; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br i1 [[TREE:%.*]], label [[ENTRY_SPLIT_US:%.*]], label [[ENTRY_SPLIT:%.*]]\\n+; CHECK:       entry.split.us:\\n+; CHECK-NEXT:    br label [[FOR_COND_US:%.*]]\\n+; CHECK:       for.cond.us:\\n+; CHECK-NEXT:    br label [[IF_END8_US:%.*]]\\n+; CHECK:       if.end8.us:\\n+; CHECK-NEXT:    br label [[FOR_COND_US]]\\n+; CHECK:       entry.split:\\n ; CHECK-NEXT:    br label [[FOR_COND:%.*]]\\n ; CHECK:       for.cond:\\n-; CHECK-NEXT:    br i1 [[TREE:%.*]], label [[IF_END8:%.*]], label [[IF_ELSE:%.*]]\\n+; CHECK-NEXT:    br label [[IF_ELSE:%.*]]\\n ; CHECK:       if.else:\\n ; CHECK-NEXT:    callbr void asm sideeffect \\\".pushsection __jump_table, \\\\22aw\\\\22 \\\\0A\\\\09.popsection \\\\0A\\\\09\\\", \\\"!i,~{dirflag},~{fpsr},~{flags}\\\"()\\n-; CHECK-NEXT:    to label [[IF_END8]] [label %for.cond5.preheader]\\n+; CHECK-NEXT:    to label [[IF_END8:%.*]] [label %for.cond5.preheader]\\n ; CHECK:       for.cond5.preheader:\\n ; CHECK-NEXT:    br label [[FOR_COND5:%.*]]\\n ; CHECK:       for.cond5:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80ZjA0NmJjOGUwYjk0MzllZmViMjkwNmNlZDc5MzBmODMxNDk1ZWU0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/4f046bc8e0b9439efeb2906ced7930f831495ee4", "content": "{\"sha\": \"4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"node_id\": \"C_kwDOBITxeNoAKDRmMDQ2YmM4ZTBiOTQzOWVmZWIyOTA2Y2VkNzkzMGY4MzE0OTVlZTQ\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-08-30T12:26:36Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-09-01T14:26:42Z\"}, \"message\": \"[PHITranslateAddr] Require dominance when searching for translated address (PR57025)\\n\\nThis is a fix for PR57025 and an alternative to D131776. The problem\\nin the phi-translation-to-wrong-context.ll test case is that phi\\ntranslation of %gep.j into if2 pick %gep.i as the result. While this\\ninstruction has the correct pointer address, it occurs in a context\\nwhere %i != 0. As such, we get a NoAlias result for the store in\\nif2, even though they do alias for %i == 0 (which is legal in the\\noriginal context of the pointer).\\n\\nPHITranslateValue already has a MustDominate option, which can be\\nused to restrict PHI translation results to values that dominate the\\ntranslated-into block. However, this is more aggressive than what we\\nneed and would significantly regress GVN results. In particular, if\\nwe have a pointer value that does not require any translation, then\\nit is fine to continue using that value in the predecessor, because\\nthe context is still correct for the original query. We only run into\\nproblems if PHITranslateSubExpr() picks a completely random\\ninstruction in a context that may have preconditions that do not hold.\\n\\nFix this by always performing the dominance checks in\\nPHITranslateSubExpr(), without enabling the more general MustDominate\\nrequirement.\\n\\nFixes https://github.com/llvm/llvm-project/issues/57025. This also\\nfixes the test case for https://github.com/llvm/llvm-project/issues/30999,\\nbut I'm not sure whether that's just the particular test case,\\nor a general solution to the problem.\\n\\nDifferential Revision: https://reviews.llvm.org/D132935\", \"tree\": {\"sha\": \"987d889fbaa5fdd23b492f2ab0a9fb383e8f95e4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/987d889fbaa5fdd23b492f2ab0a9fb383e8f95e4\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4f046bc8e0b9439efeb2906ced7930f831495ee4/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8dd14c427ae5c86cc2af4b8cac05b41bc4a49e86\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8dd14c427ae5c86cc2af4b8cac05b41bc4a49e86\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8dd14c427ae5c86cc2af4b8cac05b41bc4a49e86\"}], \"stats\": {\"total\": 37, \"additions\": 13, \"deletions\": 24}, \"files\": [{\"sha\": \"4afacabd9e80246030738ab9e6900c4188919f3d\", \"filename\": \"llvm/lib/Analysis/PHITransAddr.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Flib%2FAnalysis%2FPHITransAddr.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Flib%2FAnalysis%2FPHITransAddr.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FPHITransAddr.cpp?ref=4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"patch\": \"@@ -317,8 +317,7 @@ bool PHITransAddr::PHITranslateValue(BasicBlock *CurBB, BasicBlock *PredBB,\\n   assert(DT || !MustDominate);\\n   assert(Verify() && \\\"Invalid PHITransAddr!\\\");\\n   if (DT && DT->isReachableFromEntry(PredBB))\\n-    Addr =\\n-        PHITranslateSubExpr(Addr, CurBB, PredBB, MustDominate ? DT : nullptr);\\n+    Addr = PHITranslateSubExpr(Addr, CurBB, PredBB, DT);\\n   else\\n     Addr = nullptr;\\n   assert(Verify() && \\\"Invalid PHITransAddr!\\\");\"}, {\"sha\": \"c077f934c2cbb3606559ac2fe59ff1325e0671fa\", \"filename\": \"llvm/test/Transforms/GVN/condprop-memdep-invalidation.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 9, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fcondprop-memdep-invalidation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fcondprop-memdep-invalidation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVN%2Fcondprop-memdep-invalidation.ll?ref=4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"patch\": \"@@ -35,23 +35,18 @@ define i16 @test_PR31651(ptr %ub.16) {\\n ; CHECK-NEXT:    call void @use(i16 [[L_3]])\\n ; CHECK-NEXT:    br label [[LOOP_1_LATCH]]\\n ; CHECK:       loop.1.latch:\\n-; CHECK-NEXT:    [[L_42:%.*]] = phi i16 [ [[L_3]], [[ELSE_2]] ], [ [[L_2]], [[THEN_2]] ]\\n ; CHECK-NEXT:    [[IV_1_NEXT]] = add i16 [[IV_1]], 1\\n ; CHECK-NEXT:    [[CMP_3:%.*]] = icmp slt i16 [[IV_1_NEXT]], 2\\n ; CHECK-NEXT:    br i1 [[CMP_3]], label [[LOOP_1_HEADER]], label [[LOOP_2:%.*]]\\n ; CHECK:       loop.2:\\n-; CHECK-NEXT:    [[L_4:%.*]] = phi i16 [ [[L_42]], [[LOOP_1_LATCH]] ], [ [[L_4_PRE:%.*]], [[LOOP_2_LOOP_2_CRIT_EDGE:%.*]] ]\\n-; CHECK-NEXT:    [[IV_2:%.*]] = phi i16 [ 0, [[LOOP_1_LATCH]] ], [ [[IV_2_NEXT:%.*]], [[LOOP_2_LOOP_2_CRIT_EDGE]] ]\\n-; CHECK-NEXT:    [[SUM:%.*]] = phi i16 [ 0, [[LOOP_1_LATCH]] ], [ [[SUM_NEXT:%.*]], [[LOOP_2_LOOP_2_CRIT_EDGE]] ]\\n+; CHECK-NEXT:    [[IV_2:%.*]] = phi i16 [ 0, [[LOOP_1_LATCH]] ], [ [[IV_2_NEXT:%.*]], [[LOOP_2]] ]\\n+; CHECK-NEXT:    [[SUM:%.*]] = phi i16 [ 0, [[LOOP_1_LATCH]] ], [ [[SUM_NEXT:%.*]], [[LOOP_2]] ]\\n ; CHECK-NEXT:    [[GEP_5:%.*]] = getelementptr [4 x i16], ptr [[UB_16]], i16 1, i16 [[IV_2]]\\n+; CHECK-NEXT:    [[L_4:%.*]] = load i16, ptr [[GEP_5]], align 2\\n ; CHECK-NEXT:    [[SUM_NEXT]] = add i16 [[SUM]], [[L_4]]\\n ; CHECK-NEXT:    [[IV_2_NEXT]] = add i16 [[IV_2]], 1\\n ; CHECK-NEXT:    [[CMP_4:%.*]] = icmp slt i16 [[IV_2_NEXT]], 2\\n-; CHECK-NEXT:    br i1 [[CMP_4]], label [[LOOP_2_LOOP_2_CRIT_EDGE]], label [[EXIT:%.*]]\\n-; CHECK:       loop.2.loop.2_crit_edge:\\n-; CHECK-NEXT:    [[GEP_5_PHI_TRANS_INSERT:%.*]] = getelementptr [4 x i16], ptr [[UB_16]], i16 1, i16 [[IV_2_NEXT]]\\n-; CHECK-NEXT:    [[L_4_PRE]] = load i16, ptr [[GEP_5_PHI_TRANS_INSERT]], align 2\\n-; CHECK-NEXT:    br label [[LOOP_2]]\\n+; CHECK-NEXT:    br i1 [[CMP_4]], label [[LOOP_2]], label [[EXIT:%.*]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret i16 [[SUM_NEXT]]\\n ;\"}, {\"sha\": \"af1bc98dc54f0401ef48fcb9845e1cdc4926a8b0\", \"filename\": \"llvm/test/Transforms/GVN/memdep-unknown-deadblocks.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 10, \"changes\": 13, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fmemdep-unknown-deadblocks.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fmemdep-unknown-deadblocks.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVN%2Fmemdep-unknown-deadblocks.ll?ref=4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"patch\": \"@@ -26,11 +26,6 @@\\n ; Expected semantic of the function is that verify() will be called three\\n ; times, with the values 7, 42 and 42.\\n \\n-; FIXME: The value passed to the verify function is loaded by\\n-;           %value = load i16, ptr %arr.j, align 1\\n-;        but currently GVN is replacing it with a faulty PHI in the\\n-;        store.done block.\\n-\\n declare void @verify(i16)\\n \\n define void @test(i16 %g) {\\n@@ -39,8 +34,7 @@ define void @test(i16 %g) {\\n ; CHECK-GVN-NEXT:    [[ARR:%.*]] = alloca [4 x i16], align 1\\n ; CHECK-GVN-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK-GVN:       for.body:\\n-; CHECK-GVN-NEXT:    [[VALUE2:%.*]] = phi i16 [ undef, [[ENTRY:%.*]] ], [ [[DEAD:%.*]], [[WHILE_END:%.*]] ]\\n-; CHECK-GVN-NEXT:    [[I:%.*]] = phi i16 [ 0, [[ENTRY]] ], [ [[NEXT_I:%.*]], [[WHILE_END]] ]\\n+; CHECK-GVN-NEXT:    [[I:%.*]] = phi i16 [ 0, [[ENTRY:%.*]] ], [ [[NEXT_I:%.*]], [[WHILE_END:%.*]] ]\\n ; CHECK-GVN-NEXT:    [[CMP0:%.*]] = icmp eq i16 [[I]], 0\\n ; CHECK-GVN-NEXT:    br i1 [[CMP0]], label [[STORE_IDX_0:%.*]], label [[STORE_IDX_I:%.*]]\\n ; CHECK-GVN:       store.idx.0:\\n@@ -51,26 +45,25 @@ define void @test(i16 %g) {\\n ; CHECK-GVN-NEXT:    store i16 42, ptr [[ARR_I]], align 1\\n ; CHECK-GVN-NEXT:    br label [[STORE_DONE]]\\n ; CHECK-GVN:       store.done:\\n-; CHECK-GVN-NEXT:    [[VALUE:%.*]] = phi i16 [ 42, [[STORE_IDX_I]] ], [ [[VALUE2]], [[STORE_IDX_0]] ]\\n ; CHECK-GVN-NEXT:    br label [[WHILE_BODY:%.*]]\\n ; CHECK-GVN:       while.body:\\n ; CHECK-GVN-NEXT:    br i1 false, label [[WHILE_BODY_WHILE_BODY_CRIT_EDGE:%.*]], label [[WHILE_END]]\\n ; CHECK-GVN:       while.body.while.body_crit_edge:\\n ; CHECK-GVN-NEXT:    br label [[WHILE_BODY]]\\n ; CHECK-GVN:       while.end:\\n ; CHECK-GVN-NEXT:    [[ARR_J:%.*]] = getelementptr [4 x i16], ptr [[ARR]], i16 0, i16 [[I]]\\n+; CHECK-GVN-NEXT:    [[VALUE:%.*]] = load i16, ptr [[ARR_J]], align 1\\n ; CHECK-GVN-NEXT:    tail call void @verify(i16 [[VALUE]])\\n ; CHECK-GVN-NEXT:    [[NEXT_I]] = add i16 [[I]], 1\\n ; CHECK-GVN-NEXT:    [[ARR_NEXT_I:%.*]] = getelementptr [4 x i16], ptr [[ARR]], i16 0, i16 [[NEXT_I]]\\n-; CHECK-GVN-NEXT:    [[DEAD]] = load i16, ptr [[ARR_NEXT_I]], align 1\\n ; CHECK-GVN-NEXT:    [[CMP4:%.*]] = icmp slt i16 [[NEXT_I]], 3\\n ; CHECK-GVN-NEXT:    br i1 [[CMP4]], label [[FOR_BODY]], label [[FOR_END:%.*]]\\n ; CHECK-GVN:       for.end:\\n ; CHECK-GVN-NEXT:    ret void\\n ;\\n ; CHECK-GVN-O1-LABEL: @test(\\n ; CHECK-GVN-O1-NEXT:  entry:\\n-; CHECK-GVN-O1-NEXT:    tail call void @verify(i16 42)\\n+; CHECK-GVN-O1-NEXT:    tail call void @verify(i16 7)\\n ; CHECK-GVN-O1-NEXT:    tail call void @verify(i16 42)\\n ; CHECK-GVN-O1-NEXT:    tail call void @verify(i16 42)\\n ; CHECK-GVN-O1-NEXT:    ret void\"}, {\"sha\": \"025ed4c3dcd0abf2158401be6e9e4257db0c1173\", \"filename\": \"llvm/test/Transforms/GVN/phi-translation-to-wrong-context.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 3, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fphi-translation-to-wrong-context.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/4f046bc8e0b9439efeb2906ced7930f831495ee4/llvm%2Ftest%2FTransforms%2FGVN%2Fphi-translation-to-wrong-context.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVN%2Fphi-translation-to-wrong-context.ll?ref=4f046bc8e0b9439efeb2906ced7930f831495ee4\", \"patch\": \"@@ -1,7 +1,6 @@\\n ; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt -S -gvn < %s | FileCheck %s\\n \\n-; FIXME\\n ; Phi translation of %gep.j cannot use %gep.i, which is located in a context\\n ; where %i != 0, and would result in incorrect NoAlias results in a context\\n ; where %i == 0 may hold.\\n@@ -15,14 +14,17 @@ define i32 @test(i64 %i, i1 %c1, i1 %c2) {\\n ; CHECK-NEXT:    br i1 [[C2:%.*]], label [[IF2:%.*]], label [[ELSE2:%.*]]\\n ; CHECK:       if2:\\n ; CHECK-NEXT:    store i32 1, ptr [[PTR]], align 4\\n+; CHECK-NEXT:    [[GEP_J_PHI_TRANS_INSERT:%.*]] = getelementptr inbounds i32, ptr [[PTR]], i64 [[I:%.*]]\\n+; CHECK-NEXT:    [[V_PRE:%.*]] = load i32, ptr [[GEP_J_PHI_TRANS_INSERT]], align 4\\n ; CHECK-NEXT:    br label [[JOIN:%.*]]\\n ; CHECK:       else2:\\n ; CHECK-NEXT:    store i32 2, ptr [[PTR]], align 4\\n ; CHECK-NEXT:    br label [[JOIN]]\\n ; CHECK:       join:\\n-; CHECK-NEXT:    [[J:%.*]] = phi i64 [ [[I:%.*]], [[IF2]] ], [ 0, [[ELSE2]] ]\\n+; CHECK-NEXT:    [[V:%.*]] = phi i32 [ [[V_PRE]], [[IF2]] ], [ 2, [[ELSE2]] ]\\n+; CHECK-NEXT:    [[J:%.*]] = phi i64 [ [[I]], [[IF2]] ], [ 0, [[ELSE2]] ]\\n ; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr inbounds i32, ptr [[PTR]], i64 [[J]]\\n-; CHECK-NEXT:    ret i32 2\\n+; CHECK-NEXT:    ret i32 [[V]]\\n ; CHECK:       else:\\n ; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i64 [[I]], 0\\n ; CHECK-NEXT:    call void @llvm.assume(i1 [[CMP]])\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81MWQ0YzdjZWVhNjFiNWQ4M2JhNTIzOThiNWNhNmQ1OGQ3NTUxMDQ0Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/51d4c7ceea61b5d83ba52398b5ca6d58d7551044", "content": "{\"sha\": \"51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"node_id\": \"C_kwDOBITxeNoAKDUxZDRjN2NlZWE2MWI1ZDgzYmE1MjM5OGI1Y2E2ZDU4ZDc1NTEwNDQ\", \"commit\": {\"author\": {\"name\": \"Mikael Holmen\", \"email\": \"mikael.holmen@ericsson.com\", \"date\": \"2022-09-02T08:56:11Z\"}, \"committer\": {\"name\": \"Mikael Holmen\", \"email\": \"mikael.holmen@ericsson.com\", \"date\": \"2022-09-02T10:29:44Z\"}, \"message\": \"[GlobalOpt] Fix debug variance problem in hasOnlyColdCalls\\n\\nhasOnlyColdCalls skipped over calls to intrinsics, but it did so after\\nchecking the linkage of the called function. This meant that the presence\\nof a call to a debug intrinsic could affect the outcome of the\\noptimization.\\n\\nIn my original reproducer (for an out of tree target) it was particularly\\ninteresting, because the actual IR after GlobalOpt was not different with\\ndebug instrinsics present, so -print-after-all printouts didn't show\\nanything there.\\n\\nHowever, without debuginfo, GlobalOpt went further and ran\\nBlockFrequencyAnalysis and (more importanly) LoopAnalysis, and later on in\\nthe pipeline, instcombine behaved in different ways when LoopInfo was\\npresent.\\n\\nSo a call to a dbg.declare prevented running LoopAnalysis in\\nGlobalOpt, which later prevented InstCombine from doing an optimization.\\n\\nThe dbg-intrinsic-loopanalysis.ll testcase tries to expose this.\\n\\nThen I also noted that adding a dbg.declare actually made the existing\\ntestcase colccc_coldsites.ll generate different code, so I modified that\\nto now test it behaves the same way with and without the dbg.declare.\\n\\nReviewed By: nikic, fhahn\\n\\nDifferential Revision: https://reviews.llvm.org/D133193\", \"tree\": {\"sha\": \"2d2f3efe58093469d401cf93dd4f5eebcd98825b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2d2f3efe58093469d401cf93dd4f5eebcd98825b\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/comments\", \"author\": {\"login\": \"mikaelholmen\", \"id\": 55733087, \"node_id\": \"MDQ6VXNlcjU1NzMzMDg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/55733087?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mikaelholmen\", \"html_url\": \"https://github.com/mikaelholmen\", \"followers_url\": \"https://api.github.com/users/mikaelholmen/followers\", \"following_url\": \"https://api.github.com/users/mikaelholmen/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mikaelholmen/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mikaelholmen/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mikaelholmen/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mikaelholmen/orgs\", \"repos_url\": \"https://api.github.com/users/mikaelholmen/repos\", \"events_url\": \"https://api.github.com/users/mikaelholmen/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mikaelholmen/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"mikaelholmen\", \"id\": 55733087, \"node_id\": \"MDQ6VXNlcjU1NzMzMDg3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/55733087?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/mikaelholmen\", \"html_url\": \"https://github.com/mikaelholmen\", \"followers_url\": \"https://api.github.com/users/mikaelholmen/followers\", \"following_url\": \"https://api.github.com/users/mikaelholmen/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/mikaelholmen/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/mikaelholmen/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/mikaelholmen/subscriptions\", \"organizations_url\": \"https://api.github.com/users/mikaelholmen/orgs\", \"repos_url\": \"https://api.github.com/users/mikaelholmen/repos\", \"events_url\": \"https://api.github.com/users/mikaelholmen/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/mikaelholmen/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"be37caca0055df77c9e3ca0a63d4b2ccefe94f7d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/be37caca0055df77c9e3ca0a63d4b2ccefe94f7d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/be37caca0055df77c9e3ca0a63d4b2ccefe94f7d\"}], \"stats\": {\"total\": 79, \"additions\": 76, \"deletions\": 3}, \"files\": [{\"sha\": \"094ac815a6d47439165aa5a242e5f8f17e626f1b\", \"filename\": \"llvm/lib/Transforms/IPO/GlobalOpt.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FGlobalOpt.cpp?ref=51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"patch\": \"@@ -1821,11 +1821,14 @@ hasOnlyColdCalls(Function &F,\\n         Function *CalledFn = CI->getCalledFunction();\\n         if (!CalledFn)\\n           return false;\\n-        if (!CalledFn->hasLocalLinkage())\\n-          return false;\\n         // Skip over intrinsics since they won't remain as function calls.\\n+        // Important to do this check before the linkage check below so we\\n+        // won't bail out on debug intrinsics, possibly making the generated\\n+        // code dependent on the presence of debug info.\\n         if (CalledFn->getIntrinsicID() != Intrinsic::not_intrinsic)\\n           continue;\\n+        if (!CalledFn->hasLocalLinkage())\\n+          return false;\\n         // Check if it's valid to use coldcc calling convention.\\n         if (!hasChangeableCC(CalledFn) || CalledFn->isVarArg() ||\\n             CalledFn->hasAddressTaken())\"}, {\"sha\": \"38628d5de638dda7318a531d56317e57492dc0df\", \"filename\": \"llvm/test/Transforms/GlobalOpt/PowerPC/coldcc_coldsites.ll\", \"status\": \"modified\", \"additions\": 25, \"deletions\": 1, \"changes\": 26, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Ftest%2FTransforms%2FGlobalOpt%2FPowerPC%2Fcoldcc_coldsites.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Ftest%2FTransforms%2FGlobalOpt%2FPowerPC%2Fcoldcc_coldsites.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGlobalOpt%2FPowerPC%2Fcoldcc_coldsites.ll?ref=51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"patch\": \"@@ -1,7 +1,9 @@\\n+; RUN: opt -strip-debug -S < %s | opt -passes=globalopt -mtriple=powerpc64le-unknown-linux-gnu -ppc-enable-coldcc -S | FileCheck %s -check-prefix=COLDCC\\n+; RUN: opt -strip-debug -S < %s | opt -passes=globalopt -S | FileCheck %s -check-prefix=CHECK\\n ; RUN: opt -passes=globalopt -mtriple=powerpc64le-unknown-linux-gnu -ppc-enable-coldcc -S < %s | FileCheck %s -check-prefix=COLDCC\\n ; RUN: opt -passes=globalopt -S < %s | FileCheck %s -check-prefix=CHECK\\n \\n-define signext i32 @caller(i32 signext %a, i32 signext %b, i32 signext %lim, i32 signext %i) local_unnamed_addr #0 !prof !30 {\\n+define signext i32 @caller(i32 signext %a, i32 signext %b, i32 signext %lim, i32 signext %i, ptr %k) local_unnamed_addr #0 !prof !30 {\\n entry:\\n ; COLDCC: call coldcc signext i32 @callee\\n ; CHECK: call fastcc signext i32 @callee\\n@@ -11,6 +13,7 @@ entry:\\n   br i1 %cmp, label %if.then, label %if.end, !prof !31\\n \\n if.then:                                          ; preds = %entry\\n+  call void @llvm.dbg.declare(metadata ptr %k, metadata !101, metadata !DIExpression()), !dbg !122\\n   %call = tail call signext i32 @callee(i32 signext %a, i32 signext %b)\\n   br label %if.end\\n \\n@@ -45,7 +48,15 @@ for.body:                                         ; preds = %for.body, %entry\\n   %exitcond = icmp eq i32 %inc, 10000000\\n   br i1 %exitcond, label %for.cond.cleanup, label %for.body, !prof !34\\n }\\n+\\n+; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata)  #2\\n+\\n attributes #0 = { noinline }\\n+attributes #2 = { nocallback nofree nosync nounwind readnone speculatable willreturn }\\n+\\n+!llvm.dbg.cu = !{!117}\\n+!llvm.module.flags = !{!100}\\n \\n !0 = !{i32 1, !\\\"ProfileSummary\\\", !1}\\n !1 = !{!2, !3, !4, !5, !6, !7, !8, !9}\\n@@ -79,3 +90,16 @@ attributes #0 = { noinline }\\n !32 = !{i32 59}\\n !33 = !{!\\\"function_entry_count\\\", i64 1}\\n !34 = !{!\\\"branch_weights\\\", i32 2, i32 10000001}\\n+\\n+!100 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!101 = !DILocalVariable(name: \\\"k\\\", arg: 1, scope: !102, file: !103, line: 13, type: !119)\\n+!102 = distinct !DISubprogram(name: \\\"h\\\", scope: !103, file: !103, line: 13, type: !104, scopeLine: 13, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !117, retainedNodes: !121)\\n+!103 = !DIFile(filename: \\\"foo2.c\\\", directory: \\\"/bar\\\")\\n+!104 = !DISubroutineType(types: !105)\\n+!105 = !{!119}\\n+!117 = distinct !DICompileUnit(language: DW_LANG_C99, file: !103, producer: \\\"clang version 16\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !118, globals: !120, splitDebugInlining: false, nameTableKind: None)\\n+!118 = !{!119}\\n+!119 = !DIBasicType(name: \\\"int\\\", size: 16, encoding: DW_ATE_signed)\\n+!120 = !{}\\n+!121 = !{!101}\\n+!122 = !DILocation(line: 13, column: 27, scope: !102)\"}, {\"sha\": \"2e82fe5bba5992a54f148b83a41f3d69e3a16dea\", \"filename\": \"llvm/test/Transforms/GlobalOpt/dbg-intrinsic-loopanalysis.ll\", \"status\": \"added\", \"additions\": 46, \"deletions\": 0, \"changes\": 46, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Fdbg-intrinsic-loopanalysis.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/51d4c7ceea61b5d83ba52398b5ca6d58d7551044/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Fdbg-intrinsic-loopanalysis.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGlobalOpt%2Fdbg-intrinsic-loopanalysis.ll?ref=51d4c7ceea61b5d83ba52398b5ca6d58d7551044\", \"patch\": \"@@ -0,0 +1,46 @@\\n+; RUN: opt -passes=\\\"globalopt\\\" < %s -o /dev/null -debug-pass-manager 2>&1 | FileCheck %s\\n+; RUN: opt -strip-debug -S < %s | opt -passes=\\\"globalopt\\\" -o /dev/null -debug-pass-manager 2>&1 | FileCheck %s\\n+\\n+; Make sure that the call to dbg.declare does not prevent running BlockFrequency\\n+; and (especially) Loop Analysis.\\n+; Later passes (e.g. instcombine) may behave in different ways depending on if\\n+; LoopInfo is available or not. Therefore, letting GlobalOpt run or not run\\n+; LoopAnalysis depending on the presence of a dbg.declare may make the compiler\\n+; generate different code with and without debug info.\\n+\\n+; CHECK: Running pass: GlobalOptPass on [module]\\n+; CHECK: Running analysis: BlockFrequencyAnalysis on h\\n+; CHECK: Running analysis: LoopAnalysis on h\\n+\\n+define i16 @h(ptr %k) {\\n+entry:\\n+  call void @llvm.dbg.declare(metadata ptr %k, metadata !1, metadata !DIExpression()), !dbg !22\\n+  %call = call i16 @gaz()\\n+  ret i16 %call\\n+}\\n+\\n+; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn\\n+declare void @llvm.dbg.declare(metadata, metadata, metadata)  #0\\n+\\n+define internal i16 @gaz() {\\n+entry:\\n+  ret i16 0\\n+}\\n+\\n+attributes #0 = { nocallback nofree nosync nounwind readnone speculatable willreturn }\\n+\\n+!llvm.dbg.cu = !{!17}\\n+!llvm.module.flags = !{!0}\\n+\\n+!0 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!1 = !DILocalVariable(name: \\\"k\\\", arg: 1, scope: !2, file: !3, line: 13, type: !19)\\n+!2 = distinct !DISubprogram(name: \\\"h\\\", scope: !3, file: !3, line: 13, type: !4, scopeLine: 13, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !17, retainedNodes: !21)\\n+!3 = !DIFile(filename: \\\"foo2.c\\\", directory: \\\"/bar\\\")\\n+!4 = !DISubroutineType(types: !5)\\n+!5 = !{!19}\\n+!17 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: \\\"clang version 16\\\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !18, globals: !20, splitDebugInlining: false, nameTableKind: None)\\n+!18 = !{!19}\\n+!19 = !DIBasicType(name: \\\"int\\\", size: 16, encoding: DW_ATE_signed)\\n+!20 = !{}\\n+!21 = !{!1}\\n+!22 = !DILocation(line: 13, column: 27, scope: !2)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84ZGYzNzZkYjcyODJiOTU1ZTc5OTBjYjg4ODdlZTlkY2QzNTY1MDQwIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/8df376db7282b955e7990cb8887ee9dcd3565040", "content": "{\"sha\": \"8df376db7282b955e7990cb8887ee9dcd3565040\", \"node_id\": \"C_kwDOBITxeNoAKDhkZjM3NmRiNzI4MmI5NTVlNzk5MGNiODg4N2VlOWRjZDM1NjUwNDA\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-09-22T14:35:07Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2022-09-22T14:37:10Z\"}, \"message\": \"[InstCombine] Remove buggy zext of icmp eq with pow2 fold (PR57899)\\n\\nFor the case where the constant is a power of two rather than zero,\\nthe fold is incorrect, because it fails to check that the bit set\\nin the LHS matches the bit in the RHS.\\n\\nRather than fixing this, remove the power of two handling entirely,\\nas a different fold will already canonicalize such comparisons to\\nuse a zero constant.\\n\\nFixes https://github.com/llvm/llvm-project/issues/57899.\", \"tree\": {\"sha\": \"557f740e20e97e32a9e74714d620ce77c299c8c8\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/557f740e20e97e32a9e74714d620ce77c299c8c8\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/8df376db7282b955e7990cb8887ee9dcd3565040\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8df376db7282b955e7990cb8887ee9dcd3565040\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8df376db7282b955e7990cb8887ee9dcd3565040\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8df376db7282b955e7990cb8887ee9dcd3565040/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"76fd4bf675b5ceeeca0e4e15cf15d89c7acf4947\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/76fd4bf675b5ceeeca0e4e15cf15d89c7acf4947\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/76fd4bf675b5ceeeca0e4e15cf15d89c7acf4947\"}], \"stats\": {\"total\": 13, \"additions\": 3, \"deletions\": 10}, \"files\": [{\"sha\": \"c91786148beb49919117ccfe40c209cb3d43d51f\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 8, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8df376db7282b955e7990cb8887ee9dcd3565040/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8df376db7282b955e7990cb8887ee9dcd3565040/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineCasts.cpp?ref=8df376db7282b955e7990cb8887ee9dcd3565040\", \"patch\": \"@@ -1014,15 +1014,9 @@ Instruction *InstCombinerImpl::transformZExtICmp(ICmpInst *Cmp, ZExtInst &Zext)\\n \\n     // zext (X == 0) to i32 --> X^1      iff X has only the low bit set.\\n     // zext (X == 0) to i32 --> (X>>1)^1 iff X has only the 2nd bit set.\\n-    // zext (X == 1) to i32 --> X        iff X has only the low bit set.\\n-    // zext (X == 2) to i32 --> X>>1     iff X has only the 2nd bit set.\\n     // zext (X != 0) to i32 --> X        iff X has only the low bit set.\\n     // zext (X != 0) to i32 --> X>>1     iff X has only the 2nd bit set.\\n-    // zext (X != 1) to i32 --> X^1      iff X has only the low bit set.\\n-    // zext (X != 2) to i32 --> (X>>1)^1 iff X has only the 2nd bit set.\\n-    if ((Op1CV->isZero() || Op1CV->isPowerOf2()) &&\\n-        // This only works for EQ and NE\\n-        Cmp->isEquality()) {\\n+    if (Op1CV->isZero() && Cmp->isEquality()) {\\n       // If Op1C some other power of two, convert:\\n       KnownBits Known = computeKnownBits(Cmp->getOperand(0), 0, &Zext);\\n \\n@@ -1038,7 +1032,7 @@ Instruction *InstCombinerImpl::transformZExtICmp(ICmpInst *Cmp, ZExtInst &Zext)\\n                                   In->getName() + \\\".lobit\\\");\\n         }\\n \\n-        if (!Op1CV->isZero() == isNE) { // Toggle the low bit.\\n+        if (!isNE) { // Toggle the low bit.\\n           Constant *One = ConstantInt::get(In->getType(), 1);\\n           In = Builder.CreateXor(In, One);\\n         }\"}, {\"sha\": \"765ae1a1b64a54344bf6d14eacf39da97d0df0b4\", \"filename\": \"llvm/test/Transforms/InstCombine/zext.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/8df376db7282b955e7990cb8887ee9dcd3565040/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/8df376db7282b955e7990cb8887ee9dcd3565040/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext.ll?ref=8df376db7282b955e7990cb8887ee9dcd3565040\", \"patch\": \"@@ -511,15 +511,14 @@ define i8 @disguised_signbit_clear_test(i64 %x) {\\n   ret i8 %t6\\n }\\n \\n-; FIXME: Currently miscompiled.\\n define i16 @pr57899(i1 %c, i32 %x) {\\n ; CHECK-LABEL: @pr57899(\\n ; CHECK-NEXT:  entry:\\n ; CHECK-NEXT:    br i1 [[C:%.*]], label [[IF:%.*]], label [[JOIN:%.*]]\\n ; CHECK:       if:\\n ; CHECK-NEXT:    br label [[JOIN]]\\n ; CHECK:       join:\\n-; CHECK-NEXT:    ret i16 0\\n+; CHECK-NEXT:    ret i16 1\\n ;\\n entry:\\n   br i1 %c, label %if, label %join\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy8wNTEzYjAzMDVhY2RlOTFhMGE1ZjdmNWVhNDA2MTQ3NjAxMWYwZDFkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/0513b0305acde91a0a5f7f5ea4061476011f0d1d", "content": "{\"sha\": \"0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"node_id\": \"C_kwDOBITxeNoAKDA1MTNiMDMwNWFjZGU5MWEwYTVmN2Y1ZWE0MDYxNDc2MDExZjBkMWQ\", \"commit\": {\"author\": {\"name\": \"Bjorn Pettersson\", \"email\": \"bjorn.a.pettersson@ericsson.com\", \"date\": \"2022-09-29T16:22:56Z\"}, \"committer\": {\"name\": \"Bjorn Pettersson\", \"email\": \"bjorn.a.pettersson@ericsson.com\", \"date\": \"2022-09-29T19:24:31Z\"}, \"message\": \"[X86] Avoid miscompile in combineOr (X86ISelLowering.cpp)\\n\\nIn combineOr (X86ISelLowering.cpp) there is a DAG combine that rewrite\\na \\\"(0 - SetCC) | C\\\" pattern into something simpler given that a LEA\\ncan be used. Another requirement is that C has some specific value,\\nfor example 1 or 7. When checking those requirements the code used a\\n32-bit unsigned variable to store the value of C. So for a 64-bit OR\\nthis could miscompile in case any of the 32 most significant bits in\\nC were non zero.\\n\\nThis patch adds fixes the bug by using a large enough type for the\\nC value.\\n\\nThe faulty code seem to have been introduced by commit 9bceb8981d32fe\\n(D131358).\\n\\nReviewed By: RKSimon\\n\\nDifferential Revision: https://reviews.llvm.org/D134892\", \"tree\": {\"sha\": \"0e050d89c72f0bc1dd61ec80e6e160ec58e6695e\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/0e050d89c72f0bc1dd61ec80e6e160ec58e6695e\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0513b0305acde91a0a5f7f5ea4061476011f0d1d/comments\", \"author\": {\"login\": \"bjope\", \"id\": 45821403, \"node_id\": \"MDQ6VXNlcjQ1ODIxNDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/45821403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bjope\", \"html_url\": \"https://github.com/bjope\", \"followers_url\": \"https://api.github.com/users/bjope/followers\", \"following_url\": \"https://api.github.com/users/bjope/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bjope/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bjope/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bjope/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bjope/orgs\", \"repos_url\": \"https://api.github.com/users/bjope/repos\", \"events_url\": \"https://api.github.com/users/bjope/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bjope/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"bjope\", \"id\": 45821403, \"node_id\": \"MDQ6VXNlcjQ1ODIxNDAz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/45821403?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/bjope\", \"html_url\": \"https://github.com/bjope\", \"followers_url\": \"https://api.github.com/users/bjope/followers\", \"following_url\": \"https://api.github.com/users/bjope/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/bjope/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/bjope/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/bjope/subscriptions\", \"organizations_url\": \"https://api.github.com/users/bjope/orgs\", \"repos_url\": \"https://api.github.com/users/bjope/repos\", \"events_url\": \"https://api.github.com/users/bjope/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/bjope/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e4fcbf3950092a78852e09f7cd8fe1d703967516\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e4fcbf3950092a78852e09f7cd8fe1d703967516\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e4fcbf3950092a78852e09f7cd8fe1d703967516\"}], \"stats\": {\"total\": 10, \"additions\": 6, \"deletions\": 4}, \"files\": [{\"sha\": \"ec6c4e520d57202e788cd7f7ee622b64549b51fc\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0513b0305acde91a0a5f7f5ea4061476011f0d1d/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0513b0305acde91a0a5f7f5ea4061476011f0d1d/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"patch\": \"@@ -48592,7 +48592,7 @@ static SDValue combineOr(SDNode *N, SelectionDAG &DAG,\\n \\n     if (Cond.getOpcode() == X86ISD::SETCC && Cond.hasOneUse()) {\\n       if (auto *CN = dyn_cast<ConstantSDNode>(N1)) {\\n-        unsigned Val = CN->getZExtValue();\\n+        uint64_t Val = CN->getZExtValue();\\n         if (Val == 1 || Val == 2 || Val == 3 || Val == 4 || Val == 7 || Val == 8) {\\n           X86::CondCode CCode = (X86::CondCode)Cond.getConstantOperandVal(0);\\n           CCode = X86::GetOppositeBranchCondition(CCode);\"}, {\"sha\": \"ab9b917803248e28452488cf29ddb9fcca26de76\", \"filename\": \"llvm/test/CodeGen/X86/or-lea.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 3, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/0513b0305acde91a0a5f7f5ea4061476011f0d1d/llvm%2Ftest%2FCodeGen%2FX86%2For-lea.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/0513b0305acde91a0a5f7f5ea4061476011f0d1d/llvm%2Ftest%2FCodeGen%2FX86%2For-lea.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2For-lea.ll?ref=0513b0305acde91a0a5f7f5ea4061476011f0d1d\", \"patch\": \"@@ -811,10 +811,12 @@ define i64 @or_large_constant(i64 %x) {\\n ;\\n ; X64-LABEL: or_large_constant:\\n ; X64:       # %bb.0: # %entry\\n-; X64-NEXT:    xorl %eax, %eax\\n+; X64-NEXT:    xorl %ecx, %ecx\\n ; X64-NEXT:    cmpq $2, %rdi\\n-; X64-NEXT:    setl %al\\n-; X64-NEXT:    leaq -1(%rax,%rax), %rax\\n+; X64-NEXT:    setge %cl\\n+; X64-NEXT:    negq %rcx\\n+; X64-NEXT:    movabsq $549755813889, %rax # imm = 0x8000000001\\n+; X64-NEXT:    orq %rcx, %rax\\n ; X64-NEXT:    retq\\n entry:\\n   %cmp = icmp sgt i64 %x, 1\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82YWNmNjY2MWRkMTdhZjlmOTg1OGYzZDNmZjY3ZWI4OGY3Njc1ZDMxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/6acf6661dd17af9f9858f3d3ff67eb88f7675d31", "content": "{\"sha\": \"6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"node_id\": \"C_kwDOBITxeNoAKDZhY2Y2NjYxZGQxN2FmOWY5ODU4ZjNkM2ZmNjdlYjg4Zjc2NzVkMzE\", \"commit\": {\"author\": {\"name\": \"Matt Arsenault\", \"email\": \"Matthew.Arsenault@amd.com\", \"date\": \"2022-12-13T13:12:36Z\"}, \"committer\": {\"name\": \"Matt Arsenault\", \"email\": \"Matthew.Arsenault@amd.com\", \"date\": \"2022-12-13T13:44:21Z\"}, \"message\": \"ConstantFolding: Ignore output denorm mode for canonicalize\\n\\nAlive2 opt plugin is now happy with the test. Fixes issue 59245\", \"tree\": {\"sha\": \"0c52584f62a705c1beacb95d031f0aecddf96a14\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/0c52584f62a705c1beacb95d031f0aecddf96a14\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6acf6661dd17af9f9858f3d3ff67eb88f7675d31/comments\", \"author\": {\"login\": \"arsenm\", \"id\": 138339, \"node_id\": \"MDQ6VXNlcjEzODMzOQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/138339?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/arsenm\", \"html_url\": \"https://github.com/arsenm\", \"followers_url\": \"https://api.github.com/users/arsenm/followers\", \"following_url\": \"https://api.github.com/users/arsenm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/arsenm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/arsenm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/arsenm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/arsenm/orgs\", \"repos_url\": \"https://api.github.com/users/arsenm/repos\", \"events_url\": \"https://api.github.com/users/arsenm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/arsenm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"arsenm\", \"id\": 138339, \"node_id\": \"MDQ6VXNlcjEzODMzOQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/138339?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/arsenm\", \"html_url\": \"https://github.com/arsenm\", \"followers_url\": \"https://api.github.com/users/arsenm/followers\", \"following_url\": \"https://api.github.com/users/arsenm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/arsenm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/arsenm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/arsenm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/arsenm/orgs\", \"repos_url\": \"https://api.github.com/users/arsenm/repos\", \"events_url\": \"https://api.github.com/users/arsenm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/arsenm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4fa54f8b8196e83c7ab8856dab582387ce07282f\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/4fa54f8b8196e83c7ab8856dab582387ce07282f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/4fa54f8b8196e83c7ab8856dab582387ce07282f\"}], \"stats\": {\"total\": 9, \"additions\": 5, \"deletions\": 4}, \"files\": [{\"sha\": \"687c325a2ab0b3a45c3e31b9bc57f047fef17fe5\", \"filename\": \"llvm/lib/Analysis/ConstantFolding.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 3, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6acf6661dd17af9f9858f3d3ff67eb88f7675d31/llvm%2Flib%2FAnalysis%2FConstantFolding.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6acf6661dd17af9f9858f3d3ff67eb88f7675d31/llvm%2Flib%2FAnalysis%2FConstantFolding.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FConstantFolding.cpp?ref=6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"patch\": \"@@ -1970,9 +1970,10 @@ static Constant *constantFoldCanonicalize(const Type *Ty, const CallBase *CI,\\n     if (DenormMode == DenormalMode::getIEEE())\\n       return nullptr;\\n \\n-    bool IsPositive = !Src.isNegative() ||\\n-                      DenormMode.Input == DenormalMode::PositiveZero ||\\n-                      DenormMode.Output == DenormalMode::PositiveZero;\\n+    bool IsPositive =\\n+        (!Src.isNegative() || DenormMode.Input == DenormalMode::PositiveZero ||\\n+         (DenormMode.Output == DenormalMode::PositiveZero &&\\n+          DenormMode.Input == DenormalMode::IEEE));\\n     return ConstantFP::get(CI->getContext(),\\n                            APFloat::getZero(Src.getSemantics(), !IsPositive));\\n   }\"}, {\"sha\": \"f3d3ce9c8ad0c02503eb93808909c713755c18ce\", \"filename\": \"llvm/test/Transforms/InstSimplify/canonicalize.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6acf6661dd17af9f9858f3d3ff67eb88f7675d31/llvm%2Ftest%2FTransforms%2FInstSimplify%2Fcanonicalize.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6acf6661dd17af9f9858f3d3ff67eb88f7675d31/llvm%2Ftest%2FTransforms%2FInstSimplify%2Fcanonicalize.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstSimplify%2Fcanonicalize.ll?ref=6acf6661dd17af9f9858f3d3ff67eb88f7675d31\", \"patch\": \"@@ -238,7 +238,7 @@ define float @canonicalize_neg_denorm_preserve_sign_output_positive_zero_input()\\n \\n define float @canonicalize_neg_denorm_positive_zero_output_preserve_sign_input() \\\"denormal-fp-math\\\"=\\\"positive-zero,preserve-sign\\\" {\\n ; CHECK-LABEL: @canonicalize_neg_denorm_positive_zero_output_preserve_sign_input(\\n-; CHECK-NEXT:    ret float 0.000000e+00\\n+; CHECK-NEXT:    ret float -0.000000e+00\\n ;\\n   %ret = call float @llvm.canonicalize.f32(float bitcast (i32 -2139095041 to float))\\n   ret float %ret\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kZDg4MWM5ZGJmNWQ5NDBlZWRmZjdkMjMzOTUxNDE0NTRjNWEyNmI5Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/dd881c9dbf5d940eedff7d23395141454c5a26b9", "content": "{\"sha\": \"dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"node_id\": \"C_kwDOBITxeNoAKGRkODgxYzlkYmY1ZDk0MGVlZGZmN2QyMzM5NTE0MTQ1NGM1YTI2Yjk\", \"commit\": {\"author\": {\"name\": \"Juan Manuel MARTINEZ CAAMA\\u00d1O\", \"email\": \"juamarti@amd.com\", \"date\": \"2022-12-22T08:31:36Z\"}, \"committer\": {\"name\": \"Juan Manuel MARTINEZ CAAMA\\u00d1O\", \"email\": \"juamarti@amd.com\", \"date\": \"2022-12-22T08:31:36Z\"}, \"message\": \"Revert \\\"Revert \\\"[DebugInfo] Correctly recognize bitfields when emitting dwarf\\\"\\\"\\n\\nhttps://reviews.llvm.org/D140195 should have fixed the fail in\\ngreen-dragon that was reported in https://reviews.llvm.org/D96334 and\\nresulted in the revert.\\n\\nThis reverts commit 920de9c94caff0b3ac21bf637487b07cb9aea98a.\", \"tree\": {\"sha\": \"03393fe0ac2956ad83516bbf45f4937fe0c6d506\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/03393fe0ac2956ad83516bbf45f4937fe0c6d506\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/dd881c9dbf5d940eedff7d23395141454c5a26b9/comments\", \"author\": null, \"committer\": null, \"parents\": [{\"sha\": \"f406db91f341d83996ba076ac851dc731af7be2d\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f406db91f341d83996ba076ac851dc731af7be2d\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f406db91f341d83996ba076ac851dc731af7be2d\"}], \"stats\": {\"total\": 106, \"additions\": 80, \"deletions\": 26}, \"files\": [{\"sha\": \"9497a6a3207f0f3eafa7ae8d0de91429de19a468\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FDwarfUnit.cpp?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -1623,7 +1623,7 @@ DIE &DwarfUnit::constructMemberDIE(DIE &Buffer, const DIDerivedType *DT) {\\n     uint32_t AlignInBytes = DT->getAlignInBytes();\\n     uint64_t OffsetInBytes;\\n \\n-    bool IsBitfield = FieldSize && Size != FieldSize;\\n+    bool IsBitfield = DT->isBitField();\\n     if (IsBitfield) {\\n       // Handle bitfield, assume bytes are 8 bits.\\n       if (DD->useDWARF2Bitfields())\"}, {\"sha\": \"868ac330d4fcad7f51741903dd995fabd5946666\", \"filename\": \"llvm/test/DebugInfo/AArch64/bitfields.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 4, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FAArch64%2Fbitfields.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -24,6 +24,9 @@\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"b\\\"\\n ; CHECK-NOT: DW_TAG_member\\n+; CHECK:      DW_AT_byte_size  {{.*}} (0x04)\\n+; CHECK-NEXT: DW_AT_bit_size   {{.*}} (0x20)\\n+; CHECK-NEXT: DW_AT_bit_offset {{.*}} (0x00)\\n ; CHECK:      DW_AT_data_member_location {{.*}} (DW_OP_plus_uconst 0x4)\\n \\n ; CHECK: DW_TAG_member\\n@@ -63,11 +66,11 @@ target triple = \\\"aarch64_be--linux-gnu\\\"\\n !5 = !{!0}\\n !6 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 96, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2, flags: DIFlagBitField)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !14 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !15 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"168c88a5e480ac80cdd1fe3233c6ac5f5c6e2c6f\", \"filename\": \"llvm/test/DebugInfo/ARM/big-endian-bitfield.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FARM%2Fbig-endian-bitfield.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -27,15 +27,15 @@ target datalayout = \\\"E-m:e-p:32:32-i64:64-v128:64:128-n32-S64\\\"\\n !5 = !{!0}\\n !6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"S\\\", file: !3, line: 1, size: 32, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 5)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 5, flags: DIFlagBitField)\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"j\\\"\\n ; CHECK-NOT:  DW_TAG\\n ; CHECK:      DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x00)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"k\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 6, offset: 5)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"m\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 5, offset: 11)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"n\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 8, offset: 16)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"k\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 6, offset: 5, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"m\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 5, offset: 11, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"n\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 8, offset: 16, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n ; CHECK: DW_TAG_member\\n ; CHECK-NEXT: DW_AT_name{{.*}}\\\"k\\\"\"}, {\"sha\": \"5bd06b785b159c12ef0d39a1b662916164535288\", \"filename\": \"llvm/test/DebugInfo/ARM/bitfield.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FARM%2Fbitfield.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -33,7 +33,7 @@\\n !7 = !{!8, !10}\\n !8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 8, align: 8)\\n !9 = !DIBasicType(name: \\\"char\\\", size: 8, align: 8, encoding: DW_ATE_signed_char)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"reserved\\\", scope: !6, file: !3, line: 4, baseType: !11, size: 28, align: 32, offset: 12)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"reserved\\\", scope: !6, file: !3, line: 4, baseType: !11, size: 28, align: 32, offset: 12, flags: DIFlagBitField)\\n !11 = !DIBasicType(name: \\\"int\\\", size: 32, align: 32, encoding: DW_ATE_signed)\\n !12 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !13 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\"}, {\"sha\": \"e137b1c766f9500128a237ee86585b356ecfdf1d\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields-dwarf4.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields-dwarf4.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -44,7 +44,7 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NOT:  DW_AT_data_bit_offset\\n ; CHECK:      DW_AT_data_member_location [DW_FORM_data1]\\t(0x00)\\n !9 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 6, baseType: !11, size: 5, offset: 8)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 6, baseType: !11, size: 5, offset: 8, flags: DIFlagBitField)\\n !11 = !DIDerivedType(tag: DW_TAG_typedef, name: \\\"uint32_t\\\", file: !12, line: 183, baseType: !13)\\n !12 = !DIFile(filename: \\\"/Volumes/Data/llvm/_build.ninja.release/bin/../lib/clang/3.9.0/include/stdint.h\\\", directory: \\\"/Volumes/Data/llvm\\\")\\n !13 = !DIBasicType(name: \\\"unsigned int\\\", size: 32, encoding: DW_ATE_unsigned)\\n@@ -57,7 +57,7 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n ; CHECK-NOT:  DW_AT_byte_size\\n ; CHECK-NEXT: DW_AT_data_bit_offset      [DW_FORM_data1]\\t(0x08)\\n ; CHECK-NOT:  DW_AT_data_member_location\\n-!14 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 7, baseType: !11, size: 27, offset: 13)\\n+!14 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 7, baseType: !11, size: 27, offset: 13, flags: DIFlagBitField)\\n !15 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\\n !16 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !17 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"dae92f9785e05904542a6c7ac0035f11bf2cecf7\", \"filename\": \"llvm/test/DebugInfo/X86/bitfields.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fbitfields.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -63,11 +63,11 @@ target triple = \\\"x86_64-apple-macosx\\\"\\n !5 = !{!0}\\n !6 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 96, elements: !7)\\n !7 = !{!8, !10, !11, !12}\\n-!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2)\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"a\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 2, flags: DIFlagBitField)\\n !9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n-!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32)\\n-!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64)\\n-!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"b\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 32, flags: DIFlagBitField)\\n+!11 = !DIDerivedType(tag: DW_TAG_member, name: \\\"c\\\", scope: !6, file: !3, line: 4, baseType: !9, size: 1, offset: 64, flags: DIFlagBitField)\\n+!12 = !DIDerivedType(tag: DW_TAG_member, name: \\\"d\\\", scope: !6, file: !3, line: 5, baseType: !9, size: 28, offset: 65, flags: DIFlagBitField)\\n !13 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !14 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !15 = !{i32 1, !\\\"PIC Level\\\", i32 2}\"}, {\"sha\": \"d252318cb79d43a5416c989afc585f6851e83273\", \"filename\": \"llvm/test/DebugInfo/X86/debug-info-packed-struct.ll\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 10, \"changes\": 20, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fdebug-info-packed-struct.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -157,7 +157,7 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !12 = !DIBasicType(name: \\\"char\\\", size: 8, encoding: DW_ATE_signed_char)\\n !13 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs1\\\", scope: !9, file: !8, line: 36, baseType: !14, size: 64, offset: 8)\\n !14 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_anon\\\", file: !8, line: 30, size: 64, elements: !4)\\n-!15 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs9\\\", scope: !9, file: !8, line: 37, baseType: !16, size: 1, offset: 72)\\n+!15 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l1_ofs9\\\", scope: !9, file: !8, line: 37, baseType: !16, size: 1, offset: 72, flags: DIFlagBitField)\\n !16 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n !17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())\\n !18 = !DIGlobalVariable(name: \\\"l2\\\", scope: !2, file: !8, line: 90, type: !19, isLocal: false, isDefinition: true)\\n@@ -167,10 +167,10 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !22 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs1\\\", scope: !19, file: !8, line: 56, baseType: !23, size: 64, offset: 8)\\n !23 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_pack1\\\", file: !8, line: 50, size: 64, elements: !24)\\n !24 = !{!25, !26}\\n-!25 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !23, file: !8, line: 51, baseType: !16, size: 4)\\n-!26 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !23, file: !8, line: 52, baseType: !27, size: 60, offset: 4)\\n+!25 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !23, file: !8, line: 51, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!26 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !23, file: !8, line: 52, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n !27 = !DIBasicType(name: \\\"long long int\\\", size: 64, encoding: DW_ATE_signed)\\n-!28 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs9\\\", scope: !19, file: !8, line: 57, baseType: !16, size: 1, offset: 72)\\n+!28 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l2_ofs9\\\", scope: !19, file: !8, line: 57, baseType: !16, size: 1, offset: 72, flags: DIFlagBitField)\\n !29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())\\n !30 = !DIGlobalVariable(name: \\\"l3\\\", scope: !2, file: !8, line: 91, type: !31, isLocal: false, isDefinition: true)\\n !31 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"layout3\\\", file: !8, line: 76, size: 128, elements: !32)\\n@@ -179,18 +179,18 @@ target triple = \\\"x86_64-apple-darwin\\\"\\n !34 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs4\\\", scope: !31, file: !8, line: 78, baseType: !35, size: 64, offset: 32)\\n !35 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8_pack4\\\", file: !8, line: 72, size: 64, elements: !36)\\n !36 = !{!37, !38}\\n-!37 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !35, file: !8, line: 73, baseType: !16, size: 4)\\n-!38 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !35, file: !8, line: 74, baseType: !27, size: 60, offset: 4)\\n-!39 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs12\\\", scope: !31, file: !8, line: 79, baseType: !16, size: 1, offset: 96)\\n+!37 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !35, file: !8, line: 73, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!38 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !35, file: !8, line: 74, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n+!39 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l3_ofs12\\\", scope: !31, file: !8, line: 79, baseType: !16, size: 1, offset: 96, flags: DIFlagBitField)\\n !40 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"layout0\\\", file: !8, line: 15, size: 192, elements: !41)\\n !41 = !{!42, !43, !48}\\n !42 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs0\\\", scope: !40, file: !8, line: 16, baseType: !12, size: 8)\\n !43 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs8\\\", scope: !40, file: !8, line: 17, baseType: !44, size: 64, offset: 64)\\n !44 = !DICompositeType(tag: DW_TAG_structure_type, name: \\\"size8\\\", file: !8, line: 11, size: 64, elements: !45)\\n !45 = !{!46, !47}\\n-!46 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !44, file: !8, line: 12, baseType: !16, size: 4)\\n-!47 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !44, file: !8, line: 13, baseType: !27, size: 60, offset: 4)\\n-!48 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs16\\\", scope: !40, file: !8, line: 18, baseType: !16, size: 1, offset: 128)\\n+!46 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !44, file: !8, line: 12, baseType: !16, size: 4, flags: DIFlagBitField)\\n+!47 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l\\\", scope: !44, file: !8, line: 13, baseType: !27, size: 60, offset: 4, flags: DIFlagBitField)\\n+!48 = !DIDerivedType(tag: DW_TAG_member, name: \\\"l0_ofs16\\\", scope: !40, file: !8, line: 18, baseType: !16, size: 1, offset: 128, flags: DIFlagBitField)\\n !49 = !{i32 2, !\\\"Dwarf Version\\\", i32 2}\\n !50 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n !51 = !{!\\\"clang version 3.7.0 (trunk 240791) (llvm/trunk 240790)\\\"}\"}, {\"sha\": \"904187aa89a524c8c0e062b9fb6c9d7943b320ed\", \"filename\": \"llvm/test/DebugInfo/X86/packed_bitfields2.ll\", \"status\": \"added\", \"additions\": 51, \"deletions\": 0, \"changes\": 51, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dd881c9dbf5d940eedff7d23395141454c5a26b9/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FDebugInfo%2FX86%2Fpacked_bitfields2.ll?ref=dd881c9dbf5d940eedff7d23395141454c5a26b9\", \"patch\": \"@@ -0,0 +1,51 @@\\n+; RUN: llc -dwarf-version=5 -debugger-tune=lldb -mtriple x86_64-unknown-linux-gnu -O0 -filetype=obj -o %t_2_le.o %s\\n+; RUN: llvm-dwarfdump -v -debug-info %t_2_le.o | FileCheck %s\\n+\\n+; Produced at -O0 from:\\n+; struct __attribute__((packed)) bitfield {\\n+; \\tint i:1;\\n+; \\tint j:32;\\n+; } bitfield;\\n+\\n+; CHECK: DW_TAG_member\\n+; CHECK-NEXT: DW_AT_name{{.*}}\\\"i\\\"\\n+; CHECK-NOT: DW_TAG_member\\n+; CHECK: DW_AT_bit_size   {{.*}} (0x01)\\n+; CHECK-NEXT: DW_AT_data_bit_offset {{.*}} (0x00)\\n+\\n+; CHECK: DW_TAG_member\\n+; CHECK-NEXT: DW_AT_name{{.*}}\\\"j\\\"\\n+; CHECK-NOT: DW_TAG_member\\n+; CHECK: DW_AT_bit_size   {{.*}} (0x20)\\n+; CHECK-NEXT: DW_AT_data_bit_offset {{.*}} (0x01)\\n+\\n+; ModuleID = 'packed_bitfields2.c'\\n+source_filename = \\\"packed_bitfields2.c\\\"\\n+target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\"\\n+target triple = \\\"x86_64-pc-linux-gnu\\\"\\n+\\n+%struct.bitfield = type { [5 x i8] }\\n+\\n+@bitfield = dso_local global %struct.bitfield zeroinitializer, align 1, !dbg !0\\n+\\n+!llvm.dbg.cu = !{!2}\\n+!llvm.module.flags = !{!11, !12, !13, !14, !15}\\n+!llvm.ident = !{!16}\\n+\\n+!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())\\n+!1 = distinct !DIGlobalVariable(name: \\\"bitfield\\\", scope: !2, file: !3, line: 4, type: !6, isLocal: false, isDefinition: true)\\n+!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: \\\"clang version 11.0.1\\\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None, sysroot: \\\"/\\\")\\n+!3 = !DIFile(filename: \\\"packed_bitfields2.c\\\", directory: \\\"/\\\")\\n+!4 = !{}\\n+!5 = !{!0}\\n+!6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: \\\"bitfield\\\", file: !3, line: 1, size: 40, elements: !7)\\n+!7 = !{!8, !10}\\n+!8 = !DIDerivedType(tag: DW_TAG_member, name: \\\"i\\\", scope: !6, file: !3, line: 2, baseType: !9, size: 1, flags: DIFlagBitField, extraData: i64 0)\\n+!9 = !DIBasicType(name: \\\"int\\\", size: 32, encoding: DW_ATE_signed)\\n+!10 = !DIDerivedType(tag: DW_TAG_member, name: \\\"j\\\", scope: !6, file: !3, line: 3, baseType: !9, size: 32, offset: 1, flags: DIFlagBitField, extraData: i64 0)\\n+!11 = !{i32 7, !\\\"Dwarf Version\\\", i32 5}\\n+!12 = !{i32 2, !\\\"Debug Info Version\\\", i32 3}\\n+!13 = !{i32 1, !\\\"wchar_size\\\", i32 4}\\n+!14 = !{i32 7, !\\\"PIC Level\\\", i32 2}\\n+!15 = !{i32 7, !\\\"PIE Level\\\", i32 2}\\n+!16 = !{!\\\"clang version 11.0.1\\\"}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kOGY1NDFlZmU3YjQwZmU0OTY2NDA1NGFkMGU3MzA2NjQxNzYyMTMxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/d8f541efe7b40fe49664054ad0e7306641762131", "content": "{\"sha\": \"d8f541efe7b40fe49664054ad0e7306641762131\", \"node_id\": \"C_kwDOBITxeNoAKGQ4ZjU0MWVmZTdiNDBmZTQ5NjY0MDU0YWQwZTczMDY2NDE3NjIxMzE\", \"commit\": {\"author\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2022-12-23T14:14:22Z\"}, \"committer\": {\"name\": \"Roman Lebedev\", \"email\": \"lebedev.ri@gmail.com\", \"date\": \"2022-12-23T14:26:05Z\"}, \"message\": \"[DAGCombiner] `visitFREEZE()`: fix handling of no maybe-poison ops\\n\\nThe original code was confusing. It was stripping poison-generating flags,\\nbut the comments were saying that doing so was a TODO.\\n\\nIf the poison-generating flags are present, then even if all operands\\nare guaranteed not to be undef or poison, the whole operation may still\\nproduce undef or poison. We can still deal with that case,\\nand we already do deal with it in fact, by also dropping those flags.\\n\\nRefs. https://github.com/llvm/llvm-project/issues/59676\", \"tree\": {\"sha\": \"25af48826945f0fa3c676d07a264ae351e6976d7\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/25af48826945f0fa3c676d07a264ae351e6976d7\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/d8f541efe7b40fe49664054ad0e7306641762131\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQIzBAABCgAdFiEEjkF6151RK40WXe2HCDw+u0oWieAFAmOlun0ACgkQCDw+u0oW\\nieATJA/8Cae8hW/RD3redWbHMno7CUAsBCIAF3UA7EbIJdsa7J3JCF82p5TkEUiX\\nXTpEgfqzZFBEDR0aFjx3vyZFE2ZwJpzUG2PzfPtL8BQOrKdAqt45lf5CM+/U6czR\\nOXcj9iXjIXr1G3Jx41ZfIKKEsrb9chg1Bdn9md7UDwt4/w0FDFVBdZi2nmc3inLs\\nkIFqYGUpF00PWAaSLEcNYVaE0yjRBXAnwQ3j4O5XbYLNtjLrYOcmyKbSHNdIgR7P\\n9D7nkSqdrlx1UwlQ/19xsy75Rf9h5X9EFxeGTYHX5S9rMW6e9GLac5UuH64QYcoq\\nWG4jP7g48mh8kNuqX/b15fzaCF6yBaTXkueHWTqXda7k3L5T6XZdNZoI1YOQYe5l\\n0EkxJvyTXbvne2Bi14wS7GdIZNPLcMBPCE3s9ACamTX24sc24LxdwKN4uQDLpPzv\\n8tv8BJ/Ow+QE/yQ4CJoaI/GHQ+MgxZLD1IZIHdVcM1xSksZvR3aSZDVEMRUqghkp\\nC+VuN3Y0WaSDnyqFgroW6cCbI29CIeGicTfrqlO52EauyF1VmpuG244Qlr4XSDgV\\n4ldISpsHe9JQ14Vnhom67OSwIXmjk5TUQDjw3alRHr9uBPXZWYyXJNUuyWnZpa96\\nZ64wXsphQRvRgE7SMI95aqMEWEaxVj2mR9o4DM9owoUsw/DffUc=\\n=MGJM\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree 25af48826945f0fa3c676d07a264ae351e6976d7\\nparent d7a63a0421d5dfe91eace88dda1e5b20550b771c\\nauthor Roman Lebedev <lebedev.ri@gmail.com> 1671804862 +0300\\ncommitter Roman Lebedev <lebedev.ri@gmail.com> 1671805565 +0300\\n\\n[DAGCombiner] `visitFREEZE()`: fix handling of no maybe-poison ops\\n\\nThe original code was confusing. It was stripping poison-generating flags,\\nbut the comments were saying that doing so was a TODO.\\n\\nIf the poison-generating flags are present, then even if all operands\\nare guaranteed not to be undef or poison, the whole operation may still\\nproduce undef or poison. We can still deal with that case,\\nand we already do deal with it in fact, by also dropping those flags.\\n\\nRefs. https://github.com/llvm/llvm-project/issues/59676\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d8f541efe7b40fe49664054ad0e7306641762131\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d8f541efe7b40fe49664054ad0e7306641762131\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d8f541efe7b40fe49664054ad0e7306641762131/comments\", \"author\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"LebedevRI\", \"id\": 88600, \"node_id\": \"MDQ6VXNlcjg4NjAw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/88600?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/LebedevRI\", \"html_url\": \"https://github.com/LebedevRI\", \"followers_url\": \"https://api.github.com/users/LebedevRI/followers\", \"following_url\": \"https://api.github.com/users/LebedevRI/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/LebedevRI/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/LebedevRI/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/LebedevRI/subscriptions\", \"organizations_url\": \"https://api.github.com/users/LebedevRI/orgs\", \"repos_url\": \"https://api.github.com/users/LebedevRI/repos\", \"events_url\": \"https://api.github.com/users/LebedevRI/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/LebedevRI/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d7a63a0421d5dfe91eace88dda1e5b20550b771c\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d7a63a0421d5dfe91eace88dda1e5b20550b771c\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d7a63a0421d5dfe91eace88dda1e5b20550b771c\"}], \"stats\": {\"total\": 32, \"additions\": 15, \"deletions\": 17}, \"files\": [{\"sha\": \"bf1f550c23c02a16d53b44281541edfa1ccd4280\", \"filename\": \"llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 3, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d8f541efe7b40fe49664054ad0e7306641762131/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d8f541efe7b40fe49664054ad0e7306641762131/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FSelectionDAG%2FDAGCombiner.cpp?ref=d8f541efe7b40fe49664054ad0e7306641762131\", \"patch\": \"@@ -14252,6 +14252,7 @@ SDValue DAGCombiner::visitFREEZE(SDNode *N) {\\n   // conditions 1) one-use, 2) does not produce poison, and 3) has all but one\\n   // guaranteed-non-poison operands (or is a BUILD_VECTOR or similar) then push\\n   // the freeze through to the operands that are not guaranteed non-poison.\\n+  // NOTE: we will strip poison-generating flags, so ignore them here.\\n   if (DAG.canCreateUndefOrPoison(N0, /*PoisonOnly*/ false,\\n                                  /*ConsiderFlags*/ false) ||\\n       N0->getNumValues() != 1 || !N0->hasOneUse())\\n@@ -14273,8 +14274,9 @@ SDValue DAGCombiner::visitFREEZE(SDNode *N) {\\n       return SDValue();\\n     }\\n   }\\n-  if (MaybePoisonOperands.empty())\\n-    return SDValue();\\n+  // NOTE: the whole op may be not guaranteed to not be undef or poison because\\n+  // it could create undef or poison due to it's poison-generating flags.\\n+  // So not finding any maybe-poison flags is fine.\\n \\n   for (SDValue MaybePoisonOperand : MaybePoisonOperands) {\\n     // Don't replace every single UNDEF everywhere with frozen UNDEF, though.\\n@@ -14298,7 +14300,7 @@ SDValue DAGCombiner::visitFREEZE(SDNode *N) {\\n     if (Op.getOpcode() == ISD::UNDEF)\\n       Op = DAG.getFreeze(Op);\\n   }\\n-  // TODO: Just strip poison generating flags?\\n+  // NOTE: this strips poison generating flags.\\n   SDValue R = DAG.getNode(N0.getOpcode(), SDLoc(N0), N0->getVTList(), Ops);\\n   assert(DAG.isGuaranteedNotToBeUndefOrPoison(R, /*PoisonOnly*/ false) &&\\n          \\\"Can't create node that may be undef/poison!\\\");\"}, {\"sha\": \"ea6e1fb3662053f664047cc86fae6898a0c07fc2\", \"filename\": \"llvm/test/CodeGen/X86/freeze-binary.ll\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 14, \"changes\": 24, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/d8f541efe7b40fe49664054ad0e7306641762131/llvm%2Ftest%2FCodeGen%2FX86%2Ffreeze-binary.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/d8f541efe7b40fe49664054ad0e7306641762131/llvm%2Ftest%2FCodeGen%2FX86%2Ffreeze-binary.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Ffreeze-binary.ll?ref=d8f541efe7b40fe49664054ad0e7306641762131\", \"patch\": \"@@ -836,10 +836,9 @@ define void @pr59676_nsw_frozen(ptr %dst, i32 %x.orig) {\\n ; X86-LABEL: pr59676_nsw_frozen:\\n ; X86:       # %bb.0:\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n-; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n-; X86-NEXT:    imull $42, %edx, %eax\\n-; X86-NEXT:    imull %edx, %eax\\n-; X86-NEXT:    addl %eax, %eax\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n+; X86-NEXT:    imull %eax, %eax\\n+; X86-NEXT:    imull $84, %eax, %eax\\n ; X86-NEXT:    movl $818089009, %edx # imm = 0x30C30C31\\n ; X86-NEXT:    imull %edx\\n ; X86-NEXT:    movl %edx, %eax\\n@@ -851,9 +850,8 @@ define void @pr59676_nsw_frozen(ptr %dst, i32 %x.orig) {\\n ;\\n ; X64-LABEL: pr59676_nsw_frozen:\\n ; X64:       # %bb.0:\\n-; X64-NEXT:    imull $42, %esi, %eax\\n-; X64-NEXT:    imull %esi, %eax\\n-; X64-NEXT:    addl %eax, %eax\\n+; X64-NEXT:    imull %esi, %esi\\n+; X64-NEXT:    imull $84, %esi, %eax\\n ; X64-NEXT:    cltq\\n ; X64-NEXT:    imulq $818089009, %rax, %rax # imm = 0x30C30C31\\n ; X64-NEXT:    movq %rax, %rcx\\n@@ -875,11 +873,10 @@ define void @pr59676_nsw_frozen(ptr %dst, i32 %x.orig) {\\n define void @pr59676_nsw(ptr %dst, i32 %x) {\\n ; X86-LABEL: pr59676_nsw:\\n ; X86:       # %bb.0:\\n-; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx\\n+; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax\\n ; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx\\n-; X86-NEXT:    imull $42, %edx, %eax\\n-; X86-NEXT:    imull %edx, %eax\\n-; X86-NEXT:    addl %eax, %eax\\n+; X86-NEXT:    imull %eax, %eax\\n+; X86-NEXT:    imull $84, %eax, %eax\\n ; X86-NEXT:    movl $818089009, %edx # imm = 0x30C30C31\\n ; X86-NEXT:    imull %edx\\n ; X86-NEXT:    movl %edx, %eax\\n@@ -891,9 +888,8 @@ define void @pr59676_nsw(ptr %dst, i32 %x) {\\n ;\\n ; X64-LABEL: pr59676_nsw:\\n ; X64:       # %bb.0:\\n-; X64-NEXT:    imull $42, %esi, %eax\\n-; X64-NEXT:    imull %esi, %eax\\n-; X64-NEXT:    addl %eax, %eax\\n+; X64-NEXT:    imull %esi, %esi\\n+; X64-NEXT:    imull $84, %esi, %eax\\n ; X64-NEXT:    cltq\\n ; X64-NEXT:    imulq $818089009, %rax, %rax # imm = 0x30C30C31\\n ; X64-NEXT:    movq %rax, %rcx\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82ODQ2OWE4MGNiNzQ2OGM1Nzc3MDFkNzI1YTU2YTg2NDU0YjhmMGNiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/68469a80cb7468c577701d725a56a86454b8f0cb", "content": "{\"sha\": \"68469a80cb7468c577701d725a56a86454b8f0cb\", \"node_id\": \"C_kwDOBITxeNoAKDY4NDY5YTgwY2I3NDY4YzU3NzcwMWQ3MjVhNTZhODY0NTRiOGYwY2I\", \"commit\": {\"author\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2023-01-06T10:56:17Z\"}, \"committer\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2023-01-06T10:56:17Z\"}, \"message\": \"[LV] Disable runtime unrolling for vectorized loops.\\n\\nThis patch adds metadata to disable runtime unrolling to the vectorized\\nloop. If runtime unrolling/interleaving is considered profitable, LV\\nwill interleave the loop directly. There should be no need to perform\\nruntime unrolling at a later stage.\\n\\nNote that we already add metadata to disable runtime unrolling to the\\nscalar loop after vectorization.\\n\\nThe additional unrolling unnecessarily increases code size and compile\\ntime. In addition to that we have several bug reports of unncessary\\nruntime unrolling for vectorized loops, e.g. PR40961\\n\\nCompile-time improvements:\\n\\n  NewPM-O3: -1.04%\\n  NewPM-ReleaseThinLTO: -0.59%\\n  NewPM-ReleaseLTO-g: -0.97%\\n\\nhttps://llvm-compile-time-tracker.com/compare.php?from=ce1be13a868d0f8afa367975558c1a6175cce33a&to=78bc2e67f22e9e10e61cdb6cdac4bb857d95eb1b&stat=instructions:u\\n\\nFixes #40306.\\n\\nReviewed By: lebedev.ri, nikic\\n\\nDifferential Revision: https://reviews.llvm.org/D115261\", \"tree\": {\"sha\": \"d2310c78ed45802de8204ba605cbd91ec0a3e3a1\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/d2310c78ed45802de8204ba605cbd91ec0a3e3a1\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/68469a80cb7468c577701d725a56a86454b8f0cb\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niHUEABYKAB0WIQQ77BqkmrEb53BHnLHu9xK7XoDrugUCY7f+UQAKCRDu9xK7XoDr\\nuqvYAQCeBvEejCtAV+hOCXC8kFfpcMt0H2ytFJGdx2ZrmEQ05AD8DvAdK7nm/fz+\\nJ4tCQwWQk9OwBqMSwhTBvEa2rubJxAo=\\n=7/sf\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree d2310c78ed45802de8204ba605cbd91ec0a3e3a1\\nparent 7ea47f9e41935e0d132499e8832bb8d45f39d698\\nauthor Florian Hahn <flo@fhahn.com> 1673002577 +0000\\ncommitter Florian Hahn <flo@fhahn.com> 1673002577 +0000\\n\\n[LV] Disable runtime unrolling for vectorized loops.\\n\\nThis patch adds metadata to disable runtime unrolling to the vectorized\\nloop. If runtime unrolling/interleaving is considered profitable, LV\\nwill interleave the loop directly. There should be no need to perform\\nruntime unrolling at a later stage.\\n\\nNote that we already add metadata to disable runtime unrolling to the\\nscalar loop after vectorization.\\n\\nThe additional unrolling unnecessarily increases code size and compile\\ntime. In addition to that we have several bug reports of unncessary\\nruntime unrolling for vectorized loops, e.g. PR40961\\n\\nCompile-time improvements:\\n\\n  NewPM-O3: -1.04%\\n  NewPM-ReleaseThinLTO: -0.59%\\n  NewPM-ReleaseLTO-g: -0.97%\\n\\nhttps://llvm-compile-time-tracker.com/compare.php?from=ce1be13a868d0f8afa367975558c1a6175cce33a&to=78bc2e67f22e9e10e61cdb6cdac4bb857d95eb1b&stat=instructions:u\\n\\nFixes #40306.\\n\\nReviewed By: lebedev.ri, nikic\\n\\nDifferential Revision: https://reviews.llvm.org/D115261\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/68469a80cb7468c577701d725a56a86454b8f0cb\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/68469a80cb7468c577701d725a56a86454b8f0cb\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/68469a80cb7468c577701d725a56a86454b8f0cb/comments\", \"author\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7ea47f9e41935e0d132499e8832bb8d45f39d698\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7ea47f9e41935e0d132499e8832bb8d45f39d698\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7ea47f9e41935e0d132499e8832bb8d45f39d698\"}], \"stats\": {\"total\": 1144, \"additions\": 383, \"deletions\": 761}, \"files\": [{\"sha\": \"c37c63c1bc28fb7594a24174704139fd05a77692\", \"filename\": \"llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 3, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Flib%2FTransforms%2FVectorize%2FLoopVectorize.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Flib%2FTransforms%2FVectorize%2FLoopVectorize.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FVectorize%2FLoopVectorize.cpp?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -7698,9 +7698,7 @@ void LoopVectorizationPlanner::executePlan(ElementCount BestVF, unsigned BestUF,\\n     LoopVectorizeHints Hints(L, true, *ORE);\\n     Hints.setAlreadyVectorized();\\n   }\\n-  // Disable runtime unrolling when vectorizing the epilogue loop.\\n-  if (CanonicalIVStartValue)\\n-    AddRuntimeUnrollDisableMetaData(L);\\n+  AddRuntimeUnrollDisableMetaData(L);\\n \\n   // 3. Fix the vectorized code: take care of header phi's, live-outs,\\n   //    predication, updating analyses.\"}, {\"sha\": \"12fb1fa821cd4584029e4162f8f1f5914be3f9fb\", \"filename\": \"llvm/test/Transforms/LoopVectorize/ARM/pointer_iv.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Fpointer_iv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Fpointer_iv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Fpointer_iv.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -62,8 +62,8 @@ define hidden void @pointer_phi_v4i32_add2(ptr noalias nocapture readonly %A, pt\\n ; CHECK-NEXT:    [[TMP2:%.*]] = add nsw <4 x i32> [[STRIDED_VEC]], [[BROADCAST_SPLAT]]\\n ; CHECK-NEXT:    store <4 x i32> [[TMP2]], ptr [[NEXT_GEP4]], align 4\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4\\n-; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[INDEX_NEXT]], 996\\n-; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[INDEX_NEXT]], 996\\n+; CHECK-NEXT:    br i1 [[TMP4]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[A_ADDR_09:%.*]] = phi ptr [ [[ADD_PTR:%.*]], [[FOR_BODY]] ], [ [[IND_END]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_BODY]] ], [ 996, [[VECTOR_BODY]] ]\\n@@ -75,7 +75,7 @@ define hidden void @pointer_phi_v4i32_add2(ptr noalias nocapture readonly %A, pt\\n ; CHECK-NEXT:    [[INCDEC_PTR]] = getelementptr inbounds i32, ptr [[B_ADDR_07]], i32 1\\n ; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[INC]], 1000\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[END:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[END:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n ; CHECK:       end:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"77cc3b70edb93956ab8c53ab5505c64be9d412a2\", \"filename\": \"llvm/test/Transforms/LoopVectorize/ARM/tail-folding-loop-hint.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Ftail-folding-loop-hint.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Ftail-folding-loop-hint.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FARM%2Ftail-folding-loop-hint.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -74,11 +74,11 @@ for.body:\\n   br i1 %exitcond, label %for.cond.cleanup, label %for.body, !llvm.loop !6\\n }\\n \\n-; CHECK:      [[VEC_LOOP1]] = distinct !{[[VEC_LOOP1]], [[MD_IS_VEC:![0-9]+]]}\\n+; CHECK:      [[VEC_LOOP1]] = distinct !{[[VEC_LOOP1]], [[MD_IS_VEC:![0-9]+]], [[MD_RT_UNROLL_DIS:![0-9]+]]}\\n ; CHECK-NEXT: [[MD_IS_VEC:![0-9]+]] = !{!\\\"llvm.loop.isvectorized\\\", i32 1}\\n-; CHECK-NEXT: [[SCALAR_LOOP1]] = distinct !{[[SCALAR_LOOP1]], [[MD_RT_UNROLL_DIS:![0-9]+]], [[MD_IS_VEC]]}\\n ; CHECK-NEXT: [[MD_RT_UNROLL_DIS]] = !{!\\\"llvm.loop.unroll.runtime.disable\\\"}\\n-; CHECK-NEXT: [[VEC_LOOP2]] = distinct !{[[VEC_LOOP2]], [[MD_IS_VEC]]}\\n+; CHECK-NEXT: [[SCALAR_LOOP1]] = distinct !{[[SCALAR_LOOP1]], [[MD_RT_UNROLL_DIS]], [[MD_IS_VEC]]}\\n+; CHECK-NEXT: [[VEC_LOOP2]] = distinct !{[[VEC_LOOP2]], [[MD_IS_VEC]], [[MD_RT_UNROLL_DIS]]}\\n ; CHECK-NEXT: [[SCALAR_LOOP2]] = distinct !{[[SCALAR_LOOP2]], [[MD_RT_UNROLL_DIS]], [[MD_IS_VEC]]}\\n \\n !6 = distinct !{!6, !7, !8}\"}, {\"sha\": \"269a2feda5117605c8a5c91b08992f6e90e305fb\", \"filename\": \"llvm/test/Transforms/LoopVectorize/PowerPC/optimal-epilog-vectorization.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FPowerPC%2Foptimal-epilog-vectorization.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FPowerPC%2Foptimal-epilog-vectorization.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FPowerPC%2Foptimal-epilog-vectorization.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -1003,13 +1003,13 @@ for.end:                                          ; preds = %for.end.loopexit, %\\n   ret i32 0\\n }\\n \\n-; VF-TWO-CHECK-DAG: [[LOOPID_MV]] = distinct !{[[LOOPID_MV]], [[LOOPID_DISABLE_VECT:!.*]]}\\n-; VF-TWO-CHECK-DAG: [[LOOPID_EV]] = distinct !{[[LOOPID_EV]], [[LOOPID_DISABLE_VECT]], [[LOOPID_DISABLE_UNROLL:!.*]]}\\n+; VF-TWO-CHECK-DAG: [[LOOPID_MV]] = distinct !{[[LOOPID_MV]], [[LOOPID_DISABLE_VECT:!.*]], [[LOOPID_DISABLE_UNROLL:!.*]]}\\n+; VF-TWO-CHECK-DAG: [[LOOPID_EV]] = distinct !{[[LOOPID_EV]], [[LOOPID_DISABLE_VECT]], [[LOOPID_DISABLE_UNROLL]]}\\n ; VF-TWO-CHECK-DAG: [[LOOPID_DISABLE_VECT]] = [[DISABLE_VECT_STR:!{!\\\"llvm.loop.isvectorized\\\".*}.*]]\\n ; VF-TWO-CHECK-DAG: [[LOOPID_DISABLE_UNROLL]] = [[DISABLE_UNROLL_STR:!{!\\\"llvm.loop.unroll.runtime.disable\\\"}.*]]\\n ;\\n-; VF-FOUR-CHECK-DAG: [[LOOPID_MV_CM]] = distinct !{[[LOOPID_MV_CM]], [[LOOPID_DISABLE_VECT_CM:!.*]]}\\n-; VF-FOUR-CHECK-DAG: [[LOOPID_EV_CM]] = distinct !{[[LOOPID_EV_CM]], [[LOOPID_DISABLE_VECT_CM]], [[LOOPID_DISABLE_UNROLL_CM:!.*]]}\\n+; VF-FOUR-CHECK-DAG: [[LOOPID_MV_CM]] = distinct !{[[LOOPID_MV_CM]], [[LOOPID_DISABLE_VECT_CM:!.*]], [[LOOPID_DISABLE_UNROLL_CM:!.*]]}\\n+; VF-FOUR-CHECK-DAG: [[LOOPID_EV_CM]] = distinct !{[[LOOPID_EV_CM]], [[LOOPID_DISABLE_VECT_CM]], [[LOOPID_DISABLE_UNROLL_CM]]}\\n ; VF-FOUR-CHECK-DAG: [[LOOPID_DISABLE_VECT_CM]] = [[DISABLE_VECT_STR_CM:!{!\\\"llvm.loop.isvectorized\\\".*}.*]]\\n ; VF-FOUR-CHECK-DAG: [[LOOPID_DISABLE_UNROLL_CM]] = [[DISABLE_UNROLL_STR_CM:!{!\\\"llvm.loop.unroll.runtime.disable\\\"}.*]]\\n ;\"}, {\"sha\": \"41fdcf2eb56d0974a02fbaf2dc9cada71ec0fce9\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/already-vectorized.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Falready-vectorized.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Falready-vectorized.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Falready-vectorized.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -41,8 +41,7 @@ for.end:                                          ; preds = %for.body\\n }\\n \\n ; Now, we check for the Hint metadata\\n-; CHECK: [[vect]] = distinct !{[[vect]], [[width:![0-9]+]]}\\n+; CHECK: [[vect]] = distinct !{[[vect]], [[width:![0-9]+]], [[runtime_unroll:![0-9]+]]}\\n ; CHECK: [[width]] = !{!\\\"llvm.loop.isvectorized\\\", i32 1}\\n-; CHECK: [[scalar]] = distinct !{[[scalar]], [[runtime_unroll:![0-9]+]], [[width]]}\\n ; CHECK: [[runtime_unroll]] = !{!\\\"llvm.loop.unroll.runtime.disable\\\"}\\n-\\n+; CHECK: [[scalar]] = distinct !{[[scalar]], [[runtime_unroll]], [[width]]}\"}, {\"sha\": \"021ac57bdfe6634791ac6fd806b2dad7db3aa9fd\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/float-induction-x86.ll\", \"status\": \"modified\", \"additions\": 68, \"deletions\": 273, \"changes\": 341, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ffloat-induction-x86.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ffloat-induction-x86.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ffloat-induction-x86.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -25,102 +25,28 @@ define void @fp_iv_loop1(ptr noalias nocapture %A, i32 %N) #0 {\\n ; AUTO_VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]\\n ; AUTO_VEC:       vector.ph:\\n ; AUTO_VEC-NEXT:    [[N_VEC:%.*]] = and i64 [[ZEXT]], 4294967264\\n-; AUTO_VEC-NEXT:    [[CAST_VTC:%.*]] = sitofp i64 [[N_VEC]] to float\\n-; AUTO_VEC-NEXT:    [[TMP0:%.*]] = fmul fast float [[CAST_VTC]], 5.000000e-01\\n+; AUTO_VEC-NEXT:    [[DOTCAST:%.*]] = sitofp i64 [[N_VEC]] to float\\n+; AUTO_VEC-NEXT:    [[TMP0:%.*]] = fmul fast float [[DOTCAST]], 5.000000e-01\\n ; AUTO_VEC-NEXT:    [[IND_END:%.*]] = fadd fast float [[TMP0]], 1.000000e+00\\n-; AUTO_VEC-NEXT:    [[TMP1:%.*]] = add nsw i64 [[ZEXT]], -32\\n-; AUTO_VEC-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP1]], 5\\n-; AUTO_VEC-NEXT:    [[TMP3:%.*]] = add nuw nsw i64 [[TMP2]], 1\\n-; AUTO_VEC-NEXT:    [[XTRAITER:%.*]] = and i64 [[TMP3]], 3\\n-; AUTO_VEC-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP1]], 96\\n-; AUTO_VEC-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK_UNR_LCSSA:%.*]], label [[VECTOR_PH_NEW:%.*]]\\n-; AUTO_VEC:       vector.ph.new:\\n-; AUTO_VEC-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[TMP3]], -4\\n ; AUTO_VEC-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; AUTO_VEC:       vector.body:\\n-; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[INDEX_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 1.500000e+00, float 2.000000e+00, float 2.500000e+00, float 3.000000e+00, float 3.500000e+00, float 4.000000e+00, float 4.500000e+00>, [[VECTOR_PH_NEW]] ], [ [[VEC_IND_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[NITER_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 1.500000e+00, float 2.000000e+00, float 2.500000e+00, float 3.000000e+00, float 3.500000e+00, float 4.000000e+00, float 4.500000e+00>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; AUTO_VEC-NEXT:    [[STEP_ADD:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD2:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD3:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP5:%.*]] = getelementptr inbounds float, ptr [[A:%.*]], i64 [[INDEX]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND]], ptr [[TMP5]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP7:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i64 8\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD]], ptr [[TMP7]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP9:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i64 16\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2]], ptr [[TMP9]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i64 24\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3]], ptr [[TMP11]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT:%.*]] = or i64 [[INDEX]], 32\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_1:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 2.000000e+01, float 2.000000e+01, float 2.000000e+01, float 2.000000e+01, float 2.000000e+01, float 2.000000e+01, float 2.000000e+01, float 2.000000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_1:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 2.400000e+01, float 2.400000e+01, float 2.400000e+01, float 2.400000e+01, float 2.400000e+01, float 2.400000e+01, float 2.400000e+01, float 2.400000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_1:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 2.800000e+01, float 2.800000e+01, float 2.800000e+01, float 2.800000e+01, float 2.800000e+01, float 2.800000e+01, float 2.800000e+01, float 2.800000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP13:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX_NEXT]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND_NEXT]], ptr [[TMP13]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP15:%.*]] = getelementptr inbounds float, ptr [[TMP13]], i64 8\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD_1]], ptr [[TMP15]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP17:%.*]] = getelementptr inbounds float, ptr [[TMP13]], i64 16\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2_1]], ptr [[TMP17]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP19:%.*]] = getelementptr inbounds float, ptr [[TMP13]], i64 24\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3_1]], ptr [[TMP19]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_1:%.*]] = or i64 [[INDEX]], 64\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_1:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 3.200000e+01, float 3.200000e+01, float 3.200000e+01, float 3.200000e+01, float 3.200000e+01, float 3.200000e+01, float 3.200000e+01, float 3.200000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_2:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_2:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 4.000000e+01, float 4.000000e+01, float 4.000000e+01, float 4.000000e+01, float 4.000000e+01, float 4.000000e+01, float 4.000000e+01, float 4.000000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_2:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 4.400000e+01, float 4.400000e+01, float 4.400000e+01, float 4.400000e+01, float 4.400000e+01, float 4.400000e+01, float 4.400000e+01, float 4.400000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP21:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX_NEXT_1]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND_NEXT_1]], ptr [[TMP21]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP23:%.*]] = getelementptr inbounds float, ptr [[TMP21]], i64 8\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD_2]], ptr [[TMP23]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP25:%.*]] = getelementptr inbounds float, ptr [[TMP21]], i64 16\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2_2]], ptr [[TMP25]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP27:%.*]] = getelementptr inbounds float, ptr [[TMP21]], i64 24\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3_2]], ptr [[TMP27]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_2:%.*]] = or i64 [[INDEX]], 96\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_2:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_3:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 5.200000e+01, float 5.200000e+01, float 5.200000e+01, float 5.200000e+01, float 5.200000e+01, float 5.200000e+01, float 5.200000e+01, float 5.200000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_3:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 5.600000e+01, float 5.600000e+01, float 5.600000e+01, float 5.600000e+01, float 5.600000e+01, float 5.600000e+01, float 5.600000e+01, float 5.600000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_3:%.*]] = fadd fast <8 x float> [[VEC_IND]], <float 6.000000e+01, float 6.000000e+01, float 6.000000e+01, float 6.000000e+01, float 6.000000e+01, float 6.000000e+01, float 6.000000e+01, float 6.000000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP29:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX_NEXT_2]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND_NEXT_2]], ptr [[TMP29]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP31:%.*]] = getelementptr inbounds float, ptr [[TMP29]], i64 8\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD_3]], ptr [[TMP31]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP33:%.*]] = getelementptr inbounds float, ptr [[TMP29]], i64 16\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2_3]], ptr [[TMP33]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP35:%.*]] = getelementptr inbounds float, ptr [[TMP29]], i64 24\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3_3]], ptr [[TMP35]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_3]] = add nuw i64 [[INDEX]], 128\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_3]] = fadd fast <8 x float> [[VEC_IND]], <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>\\n-; AUTO_VEC-NEXT:    [[NITER_NEXT_3]] = add i64 [[NITER]], 4\\n-; AUTO_VEC-NEXT:    [[NITER_NCMP_3:%.*]] = icmp eq i64 [[NITER_NEXT_3]], [[UNROLL_ITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[NITER_NCMP_3]], label [[MIDDLE_BLOCK_UNR_LCSSA]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n-; AUTO_VEC:       middle.block.unr-lcssa:\\n-; AUTO_VEC-NEXT:    [[INDEX_UNR:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT_3]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND_UNR:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 1.500000e+00, float 2.000000e+00, float 2.500000e+00, float 3.000000e+00, float 3.500000e+00, float 4.000000e+00, float 4.500000e+00>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT_3]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n-; AUTO_VEC-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY_EPIL:%.*]]\\n-; AUTO_VEC:       vector.body.epil:\\n-; AUTO_VEC-NEXT:    [[INDEX_EPIL:%.*]] = phi i64 [ [[INDEX_NEXT_EPIL:%.*]], [[VECTOR_BODY_EPIL]] ], [ [[INDEX_UNR]], [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND_EPIL:%.*]] = phi <8 x float> [ [[VEC_IND_NEXT_EPIL:%.*]], [[VECTOR_BODY_EPIL]] ], [ [[VEC_IND_UNR]], [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER:%.*]] = phi i64 [ [[EPIL_ITER_NEXT:%.*]], [[VECTOR_BODY_EPIL]] ], [ 0, [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_EPIL:%.*]] = fadd fast <8 x float> [[VEC_IND_EPIL]], <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_EPIL:%.*]] = fadd fast <8 x float> [[VEC_IND_EPIL]], <float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_EPIL:%.*]] = fadd fast <8 x float> [[VEC_IND_EPIL]], <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP37:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX_EPIL]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND_EPIL]], ptr [[TMP37]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP39:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i64 8\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD_EPIL]], ptr [[TMP39]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP41:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i64 16\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2_EPIL]], ptr [[TMP41]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP43:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i64 24\\n-; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3_EPIL]], ptr [[TMP43]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_EPIL]] = add nuw i64 [[INDEX_EPIL]], 32\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_EPIL]] = fadd fast <8 x float> [[VEC_IND_EPIL]], <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[MIDDLE_BLOCK]], label [[VECTOR_BODY_EPIL]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; AUTO_VEC-NEXT:    [[TMP1:%.*]] = getelementptr inbounds float, ptr [[A:%.*]], i64 [[INDEX]]\\n+; AUTO_VEC-NEXT:    store <8 x float> [[VEC_IND]], ptr [[TMP1]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP2:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 8\\n+; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD]], ptr [[TMP2]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP3:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 16\\n+; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD2]], ptr [[TMP3]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP4:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 24\\n+; AUTO_VEC-NEXT:    store <8 x float> [[STEP_ADD3]], ptr [[TMP4]], align 4\\n+; AUTO_VEC-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32\\n+; AUTO_VEC-NEXT:    [[VEC_IND_NEXT]] = fadd fast <8 x float> [[VEC_IND]], <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>\\n+; AUTO_VEC-NEXT:    [[TMP5:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; AUTO_VEC-NEXT:    br i1 [[TMP5]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n ; AUTO_VEC:       middle.block:\\n ; AUTO_VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[ZEXT]]\\n ; AUTO_VEC-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY]]\\n@@ -131,8 +57,8 @@ define void @fp_iv_loop1(ptr noalias nocapture %A, i32 %N) #0 {\\n ; AUTO_VEC-NEXT:    store float [[X_06]], ptr [[ARRAYIDX]], align 4\\n ; AUTO_VEC-NEXT:    [[CONV1]] = fadd fast float [[X_06]], 5.000000e-01\\n ; AUTO_VEC-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n-; AUTO_VEC-NEXT:    [[TMP45:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[ZEXT]]\\n-; AUTO_VEC-NEXT:    br i1 [[TMP45]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n+; AUTO_VEC-NEXT:    [[TMP6:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[ZEXT]]\\n+; AUTO_VEC-NEXT:    br i1 [[TMP6]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; AUTO_VEC:       for.end:\\n ; AUTO_VEC-NEXT:    ret void\\n ;\\n@@ -238,7 +164,7 @@ define void @fp_iv_loop2(ptr noalias nocapture %A, i32 %N) {\\n ; AUTO_VEC-NEXT:    [[INDVARS_IV_NEXT_EPIL]] = add nuw nsw i64 [[INDVARS_IV_EPIL]], 1\\n ; AUTO_VEC-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1\\n ; AUTO_VEC-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[FOR_END]], label [[FOR_BODY_EPIL]], !llvm.loop [[LOOP6:![0-9]+]]\\n+; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[FOR_END]], label [[FOR_BODY_EPIL]], !llvm.loop [[LOOP4:![0-9]+]]\\n ; AUTO_VEC:       for.end:\\n ; AUTO_VEC-NEXT:    ret void\\n ;\\n@@ -275,106 +201,32 @@ define double @external_use_with_fast_math(ptr %a, i64 %n) {\\n ; AUTO_VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]\\n ; AUTO_VEC:       vector.ph:\\n ; AUTO_VEC-NEXT:    [[N_VEC:%.*]] = and i64 [[SMAX]], 9223372036854775792\\n-; AUTO_VEC-NEXT:    [[CAST_VTC:%.*]] = sitofp i64 [[N_VEC]] to double\\n-; AUTO_VEC-NEXT:    [[TMP0:%.*]] = fmul fast double [[CAST_VTC]], 3.000000e+00\\n-; AUTO_VEC-NEXT:    [[TMP1:%.*]] = add nsw i64 [[SMAX]], -16\\n-; AUTO_VEC-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP1]], 4\\n-; AUTO_VEC-NEXT:    [[TMP3:%.*]] = add nuw nsw i64 [[TMP2]], 1\\n-; AUTO_VEC-NEXT:    [[XTRAITER:%.*]] = and i64 [[TMP3]], 3\\n-; AUTO_VEC-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP1]], 48\\n-; AUTO_VEC-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK_UNR_LCSSA:%.*]], label [[VECTOR_PH_NEW:%.*]]\\n-; AUTO_VEC:       vector.ph.new:\\n-; AUTO_VEC-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[TMP3]], -4\\n+; AUTO_VEC-NEXT:    [[DOTCAST:%.*]] = sitofp i64 [[N_VEC]] to double\\n+; AUTO_VEC-NEXT:    [[TMP0:%.*]] = fmul fast double [[DOTCAST]], 3.000000e+00\\n ; AUTO_VEC-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; AUTO_VEC:       vector.body:\\n-; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[INDEX_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <4 x double> [ <double 0.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00>, [[VECTOR_PH_NEW]] ], [ [[VEC_IND_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[NITER_NEXT_3:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <4 x double> [ <double 0.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; AUTO_VEC-NEXT:    [[STEP_ADD:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD2:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 2.400000e+01, double 2.400000e+01, double 2.400000e+01, double 2.400000e+01>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD3:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 3.600000e+01, double 3.600000e+01, double 3.600000e+01, double 3.600000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP5:%.*]] = getelementptr double, ptr [[A:%.*]], i64 [[INDEX]]\\n-; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND]], ptr [[TMP5]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP7:%.*]] = getelementptr double, ptr [[TMP5]], i64 4\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD]], ptr [[TMP7]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP9:%.*]] = getelementptr double, ptr [[TMP5]], i64 8\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2]], ptr [[TMP9]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP11:%.*]] = getelementptr double, ptr [[TMP5]], i64 12\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3]], ptr [[TMP11]], align 8\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT:%.*]] = or i64 [[INDEX]], 16\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 4.800000e+01, double 4.800000e+01, double 4.800000e+01, double 4.800000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_1:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 6.000000e+01, double 6.000000e+01, double 6.000000e+01, double 6.000000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_1:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 7.200000e+01, double 7.200000e+01, double 7.200000e+01, double 7.200000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_1:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 8.400000e+01, double 8.400000e+01, double 8.400000e+01, double 8.400000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP13:%.*]] = getelementptr double, ptr [[A]], i64 [[INDEX_NEXT]]\\n-; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND_NEXT]], ptr [[TMP13]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP15:%.*]] = getelementptr double, ptr [[TMP13]], i64 4\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD_1]], ptr [[TMP15]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP17:%.*]] = getelementptr double, ptr [[TMP13]], i64 8\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2_1]], ptr [[TMP17]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP19:%.*]] = getelementptr double, ptr [[TMP13]], i64 12\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3_1]], ptr [[TMP19]], align 8\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_1:%.*]] = or i64 [[INDEX]], 32\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_1:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 9.600000e+01, double 9.600000e+01, double 9.600000e+01, double 9.600000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_2:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.080000e+02, double 1.080000e+02, double 1.080000e+02, double 1.080000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_2:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.200000e+02, double 1.200000e+02, double 1.200000e+02, double 1.200000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_2:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.320000e+02, double 1.320000e+02, double 1.320000e+02, double 1.320000e+02>\\n-; AUTO_VEC-NEXT:    [[TMP21:%.*]] = getelementptr double, ptr [[A]], i64 [[INDEX_NEXT_1]]\\n-; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND_NEXT_1]], ptr [[TMP21]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP23:%.*]] = getelementptr double, ptr [[TMP21]], i64 4\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD_2]], ptr [[TMP23]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP25:%.*]] = getelementptr double, ptr [[TMP21]], i64 8\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2_2]], ptr [[TMP25]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP27:%.*]] = getelementptr double, ptr [[TMP21]], i64 12\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3_2]], ptr [[TMP27]], align 8\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_2:%.*]] = or i64 [[INDEX]], 48\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_2:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.440000e+02, double 1.440000e+02, double 1.440000e+02, double 1.440000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_3:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.560000e+02, double 1.560000e+02, double 1.560000e+02, double 1.560000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_3:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.680000e+02, double 1.680000e+02, double 1.680000e+02, double 1.680000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_3:%.*]] = fadd fast <4 x double> [[VEC_IND]], <double 1.800000e+02, double 1.800000e+02, double 1.800000e+02, double 1.800000e+02>\\n-; AUTO_VEC-NEXT:    [[TMP29:%.*]] = getelementptr double, ptr [[A]], i64 [[INDEX_NEXT_2]]\\n-; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND_NEXT_2]], ptr [[TMP29]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP31:%.*]] = getelementptr double, ptr [[TMP29]], i64 4\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD_3]], ptr [[TMP31]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP33:%.*]] = getelementptr double, ptr [[TMP29]], i64 8\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2_3]], ptr [[TMP33]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP35:%.*]] = getelementptr double, ptr [[TMP29]], i64 12\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3_3]], ptr [[TMP35]], align 8\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_3]] = add nuw i64 [[INDEX]], 64\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_3]] = fadd fast <4 x double> [[VEC_IND]], <double 1.920000e+02, double 1.920000e+02, double 1.920000e+02, double 1.920000e+02>\\n-; AUTO_VEC-NEXT:    [[NITER_NEXT_3]] = add i64 [[NITER]], 4\\n-; AUTO_VEC-NEXT:    [[NITER_NCMP_3:%.*]] = icmp eq i64 [[NITER_NEXT_3]], [[UNROLL_ITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[NITER_NCMP_3]], label [[MIDDLE_BLOCK_UNR_LCSSA]], label [[VECTOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n-; AUTO_VEC:       middle.block.unr-lcssa:\\n-; AUTO_VEC-NEXT:    [[INDEX_UNR:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT_3]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND_UNR:%.*]] = phi <4 x double> [ <double 0.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT_3]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n-; AUTO_VEC-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY_EPIL:%.*]]\\n-; AUTO_VEC:       vector.body.epil:\\n-; AUTO_VEC-NEXT:    [[INDEX_EPIL:%.*]] = phi i64 [ [[INDEX_NEXT_EPIL:%.*]], [[VECTOR_BODY_EPIL]] ], [ [[INDEX_UNR]], [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND_EPIL:%.*]] = phi <4 x double> [ [[VEC_IND_NEXT_EPIL:%.*]], [[VECTOR_BODY_EPIL]] ], [ [[VEC_IND_UNR]], [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER:%.*]] = phi i64 [ [[EPIL_ITER_NEXT:%.*]], [[VECTOR_BODY_EPIL]] ], [ 0, [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_EPIL:%.*]] = fadd fast <4 x double> [[VEC_IND_EPIL]], <double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_EPIL:%.*]] = fadd fast <4 x double> [[VEC_IND_EPIL]], <double 2.400000e+01, double 2.400000e+01, double 2.400000e+01, double 2.400000e+01>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_EPIL:%.*]] = fadd fast <4 x double> [[VEC_IND_EPIL]], <double 3.600000e+01, double 3.600000e+01, double 3.600000e+01, double 3.600000e+01>\\n-; AUTO_VEC-NEXT:    [[TMP37:%.*]] = getelementptr double, ptr [[A]], i64 [[INDEX_EPIL]]\\n-; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND_EPIL]], ptr [[TMP37]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP39:%.*]] = getelementptr double, ptr [[TMP37]], i64 4\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD_EPIL]], ptr [[TMP39]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP41:%.*]] = getelementptr double, ptr [[TMP37]], i64 8\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2_EPIL]], ptr [[TMP41]], align 8\\n-; AUTO_VEC-NEXT:    [[TMP43:%.*]] = getelementptr double, ptr [[TMP37]], i64 12\\n-; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3_EPIL]], ptr [[TMP43]], align 8\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_EPIL]] = add nuw i64 [[INDEX_EPIL]], 16\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_EPIL]] = fadd fast <4 x double> [[VEC_IND_EPIL]], <double 4.800000e+01, double 4.800000e+01, double 4.800000e+01, double 4.800000e+01>\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1\\n-; AUTO_VEC-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[MIDDLE_BLOCK]], label [[VECTOR_BODY_EPIL]], !llvm.loop [[LOOP8:![0-9]+]]\\n+; AUTO_VEC-NEXT:    [[TMP1:%.*]] = getelementptr double, ptr [[A:%.*]], i64 [[INDEX]]\\n+; AUTO_VEC-NEXT:    store <4 x double> [[VEC_IND]], ptr [[TMP1]], align 8\\n+; AUTO_VEC-NEXT:    [[TMP2:%.*]] = getelementptr double, ptr [[TMP1]], i64 4\\n+; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD]], ptr [[TMP2]], align 8\\n+; AUTO_VEC-NEXT:    [[TMP3:%.*]] = getelementptr double, ptr [[TMP1]], i64 8\\n+; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD2]], ptr [[TMP3]], align 8\\n+; AUTO_VEC-NEXT:    [[TMP4:%.*]] = getelementptr double, ptr [[TMP1]], i64 12\\n+; AUTO_VEC-NEXT:    store <4 x double> [[STEP_ADD3]], ptr [[TMP4]], align 8\\n+; AUTO_VEC-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n+; AUTO_VEC-NEXT:    [[VEC_IND_NEXT]] = fadd fast <4 x double> [[VEC_IND]], <double 4.800000e+01, double 4.800000e+01, double 4.800000e+01, double 4.800000e+01>\\n+; AUTO_VEC-NEXT:    [[TMP5:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; AUTO_VEC-NEXT:    br i1 [[TMP5]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]\\n ; AUTO_VEC:       middle.block:\\n ; AUTO_VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX]], [[N_VEC]]\\n-; AUTO_VEC-NEXT:    [[TMP45:%.*]] = add nsw i64 [[N_VEC]], -1\\n-; AUTO_VEC-NEXT:    [[CAST_CMO:%.*]] = sitofp i64 [[TMP45]] to double\\n-; AUTO_VEC-NEXT:    [[TMP46:%.*]] = fmul fast double [[CAST_CMO]], 3.000000e+00\\n+; AUTO_VEC-NEXT:    [[CMO:%.*]] = add nsw i64 [[N_VEC]], -1\\n+; AUTO_VEC-NEXT:    [[DOTCAST6:%.*]] = sitofp i64 [[CMO]] to double\\n+; AUTO_VEC-NEXT:    [[TMP6:%.*]] = fmul fast double [[DOTCAST6]], 3.000000e+00\\n ; AUTO_VEC-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[FOR_BODY]]\\n ; AUTO_VEC:       for.body:\\n ; AUTO_VEC-NEXT:    [[I:%.*]] = phi i64 [ [[I_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ], [ [[N_VEC]], [[MIDDLE_BLOCK]] ]\\n@@ -384,9 +236,9 @@ define double @external_use_with_fast_math(ptr %a, i64 %n) {\\n ; AUTO_VEC-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; AUTO_VEC-NEXT:    [[J_NEXT]] = fadd fast double [[J]], 3.000000e+00\\n ; AUTO_VEC-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[I_NEXT]], [[SMAX]]\\n-; AUTO_VEC-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]\\n+; AUTO_VEC-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n ; AUTO_VEC:       for.end:\\n-; AUTO_VEC-NEXT:    [[J_LCSSA:%.*]] = phi double [ [[TMP46]], [[MIDDLE_BLOCK]] ], [ [[J]], [[FOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[J_LCSSA:%.*]] = phi double [ [[TMP6]], [[MIDDLE_BLOCK]] ], [ [[J]], [[FOR_BODY]] ]\\n ; AUTO_VEC-NEXT:    ret double [[J_LCSSA]]\\n ;\\n entry:\\n@@ -473,7 +325,7 @@ define double @external_use_without_fast_math(ptr %a, i64 %n) {\\n ; AUTO_VEC-NEXT:    [[J_NEXT_EPIL]] = fadd double [[J_EPIL]], 3.000000e+00\\n ; AUTO_VEC-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1\\n ; AUTO_VEC-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[FOR_END]], label [[FOR_BODY_EPIL]], !llvm.loop [[LOOP10:![0-9]+]]\\n+; AUTO_VEC-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[FOR_END]], label [[FOR_BODY_EPIL]], !llvm.loop [[LOOP8:![0-9]+]]\\n ; AUTO_VEC:       for.end:\\n ; AUTO_VEC-NEXT:    [[J_LCSSA:%.*]] = phi double [ [[J_LCSSA_PH]], [[FOR_END_UNR_LCSSA]] ], [ [[J_EPIL]], [[FOR_BODY_EPIL]] ]\\n ; AUTO_VEC-NEXT:    ret double [[J_LCSSA]]\\n@@ -515,93 +367,36 @@ define void @fadd_reassoc_FMF(ptr nocapture %p, i32 %N) {\\n ; AUTO_VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]\\n ; AUTO_VEC:       vector.ph:\\n ; AUTO_VEC-NEXT:    [[N_VEC:%.*]] = and i64 [[TMP0]], 4294967264\\n-; AUTO_VEC-NEXT:    [[CAST_VTC:%.*]] = sitofp i64 [[N_VEC]] to float\\n-; AUTO_VEC-NEXT:    [[TMP1:%.*]] = fmul reassoc float [[CAST_VTC]], 4.200000e+01\\n+; AUTO_VEC-NEXT:    [[DOTCAST:%.*]] = sitofp i64 [[N_VEC]] to float\\n+; AUTO_VEC-NEXT:    [[TMP1:%.*]] = fmul reassoc float [[DOTCAST]], 4.200000e+01\\n ; AUTO_VEC-NEXT:    [[IND_END:%.*]] = fadd reassoc float [[TMP1]], 1.000000e+00\\n-; AUTO_VEC-NEXT:    [[TMP2:%.*]] = add nsw i64 [[TMP0]], -32\\n-; AUTO_VEC-NEXT:    [[TMP3:%.*]] = lshr i64 [[TMP2]], 5\\n-; AUTO_VEC-NEXT:    [[TMP4:%.*]] = add nuw nsw i64 [[TMP3]], 1\\n-; AUTO_VEC-NEXT:    [[XTRAITER:%.*]] = and i64 [[TMP4]], 1\\n-; AUTO_VEC-NEXT:    [[TMP5:%.*]] = icmp ult i64 [[TMP2]], 32\\n-; AUTO_VEC-NEXT:    br i1 [[TMP5]], label [[MIDDLE_BLOCK_UNR_LCSSA:%.*]], label [[VECTOR_PH_NEW:%.*]]\\n-; AUTO_VEC:       vector.ph.new:\\n-; AUTO_VEC-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[TMP4]], -2\\n ; AUTO_VEC-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; AUTO_VEC:       vector.body:\\n-; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[INDEX_NEXT_1:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 4.300000e+01, float 8.500000e+01, float 1.270000e+02, float 1.690000e+02, float 2.110000e+02, float 2.530000e+02, float 2.950000e+02>, [[VECTOR_PH_NEW]] ], [ [[VEC_IND_NEXT_1:%.*]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[NITER_NEXT_1:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; AUTO_VEC-NEXT:    [[VEC_IND:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 4.300000e+01, float 8.500000e+01, float 1.270000e+02, float 1.690000e+02, float 2.110000e+02, float 2.530000e+02, float 2.950000e+02>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; AUTO_VEC-NEXT:    [[STEP_ADD:%.*]] = fadd reassoc <8 x float> [[VEC_IND]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD2:%.*]] = fadd reassoc <8 x float> [[STEP_ADD]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n ; AUTO_VEC-NEXT:    [[STEP_ADD3:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, ptr [[P:%.*]], i64 [[INDEX]]\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x float>, ptr [[TMP6]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP8:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i64 8\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD5:%.*]] = load <8 x float>, ptr [[TMP8]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i64 16\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD6:%.*]] = load <8 x float>, ptr [[TMP10]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i64 24\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD7:%.*]] = load <8 x float>, ptr [[TMP12]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP14:%.*]] = fadd reassoc <8 x float> [[VEC_IND]], [[WIDE_LOAD]]\\n-; AUTO_VEC-NEXT:    [[TMP15:%.*]] = fadd reassoc <8 x float> [[STEP_ADD]], [[WIDE_LOAD5]]\\n-; AUTO_VEC-NEXT:    [[TMP16:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2]], [[WIDE_LOAD6]]\\n-; AUTO_VEC-NEXT:    [[TMP17:%.*]] = fadd reassoc <8 x float> [[STEP_ADD3]], [[WIDE_LOAD7]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP14]], ptr [[TMP6]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP15]], ptr [[TMP8]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP16]], ptr [[TMP10]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP17]], ptr [[TMP12]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT:%.*]] = or i64 [[INDEX]], 32\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT:%.*]] = fadd reassoc <8 x float> [[STEP_ADD3]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_1:%.*]] = fadd reassoc <8 x float> [[VEC_IND_NEXT]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_1:%.*]] = fadd reassoc <8 x float> [[STEP_ADD_1]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_1:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2_1]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[TMP22:%.*]] = getelementptr inbounds float, ptr [[P]], i64 [[INDEX_NEXT]]\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD_1:%.*]] = load <8 x float>, ptr [[TMP22]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP24:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i64 8\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD5_1:%.*]] = load <8 x float>, ptr [[TMP24]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP26:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i64 16\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD6_1:%.*]] = load <8 x float>, ptr [[TMP26]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP28:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i64 24\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD7_1:%.*]] = load <8 x float>, ptr [[TMP28]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP30:%.*]] = fadd reassoc <8 x float> [[VEC_IND_NEXT]], [[WIDE_LOAD_1]]\\n-; AUTO_VEC-NEXT:    [[TMP31:%.*]] = fadd reassoc <8 x float> [[STEP_ADD_1]], [[WIDE_LOAD5_1]]\\n-; AUTO_VEC-NEXT:    [[TMP32:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2_1]], [[WIDE_LOAD6_1]]\\n-; AUTO_VEC-NEXT:    [[TMP33:%.*]] = fadd reassoc <8 x float> [[STEP_ADD3_1]], [[WIDE_LOAD7_1]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP30]], ptr [[TMP22]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP31]], ptr [[TMP24]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP32]], ptr [[TMP26]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP33]], ptr [[TMP28]], align 4\\n-; AUTO_VEC-NEXT:    [[INDEX_NEXT_1]] = add nuw i64 [[INDEX]], 64\\n-; AUTO_VEC-NEXT:    [[VEC_IND_NEXT_1]] = fadd reassoc <8 x float> [[STEP_ADD3_1]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[NITER_NEXT_1]] = add i64 [[NITER]], 2\\n-; AUTO_VEC-NEXT:    [[NITER_NCMP_1:%.*]] = icmp eq i64 [[NITER_NEXT_1]], [[UNROLL_ITER]]\\n-; AUTO_VEC-NEXT:    br i1 [[NITER_NCMP_1]], label [[MIDDLE_BLOCK_UNR_LCSSA]], label [[VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]\\n-; AUTO_VEC:       middle.block.unr-lcssa:\\n-; AUTO_VEC-NEXT:    [[INDEX_UNR:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT_1]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[VEC_IND_UNR:%.*]] = phi <8 x float> [ <float 1.000000e+00, float 4.300000e+01, float 8.500000e+01, float 1.270000e+02, float 1.690000e+02, float 2.110000e+02, float 2.530000e+02, float 2.950000e+02>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT_1]], [[VECTOR_BODY]] ]\\n-; AUTO_VEC-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n-; AUTO_VEC-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY_EPIL:%.*]]\\n-; AUTO_VEC:       vector.body.epil:\\n-; AUTO_VEC-NEXT:    [[STEP_ADD_EPIL:%.*]] = fadd reassoc <8 x float> [[VEC_IND_UNR]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD2_EPIL:%.*]] = fadd reassoc <8 x float> [[STEP_ADD_EPIL]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[STEP_ADD3_EPIL:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2_EPIL]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n-; AUTO_VEC-NEXT:    [[TMP38:%.*]] = getelementptr inbounds float, ptr [[P]], i64 [[INDEX_UNR]]\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD_EPIL:%.*]] = load <8 x float>, ptr [[TMP38]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP40:%.*]] = getelementptr inbounds float, ptr [[TMP38]], i64 8\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD5_EPIL:%.*]] = load <8 x float>, ptr [[TMP40]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP42:%.*]] = getelementptr inbounds float, ptr [[TMP38]], i64 16\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD6_EPIL:%.*]] = load <8 x float>, ptr [[TMP42]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP44:%.*]] = getelementptr inbounds float, ptr [[TMP38]], i64 24\\n-; AUTO_VEC-NEXT:    [[WIDE_LOAD7_EPIL:%.*]] = load <8 x float>, ptr [[TMP44]], align 4\\n-; AUTO_VEC-NEXT:    [[TMP46:%.*]] = fadd reassoc <8 x float> [[VEC_IND_UNR]], [[WIDE_LOAD_EPIL]]\\n-; AUTO_VEC-NEXT:    [[TMP47:%.*]] = fadd reassoc <8 x float> [[STEP_ADD_EPIL]], [[WIDE_LOAD5_EPIL]]\\n-; AUTO_VEC-NEXT:    [[TMP48:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2_EPIL]], [[WIDE_LOAD6_EPIL]]\\n-; AUTO_VEC-NEXT:    [[TMP49:%.*]] = fadd reassoc <8 x float> [[STEP_ADD3_EPIL]], [[WIDE_LOAD7_EPIL]]\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP46]], ptr [[TMP38]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP47]], ptr [[TMP40]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP48]], ptr [[TMP42]], align 4\\n-; AUTO_VEC-NEXT:    store <8 x float> [[TMP49]], ptr [[TMP44]], align 4\\n-; AUTO_VEC-NEXT:    br label [[MIDDLE_BLOCK]]\\n+; AUTO_VEC-NEXT:    [[TMP2:%.*]] = getelementptr inbounds float, ptr [[P:%.*]], i64 [[INDEX]]\\n+; AUTO_VEC-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x float>, ptr [[TMP2]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP3:%.*]] = getelementptr inbounds float, ptr [[TMP2]], i64 8\\n+; AUTO_VEC-NEXT:    [[WIDE_LOAD5:%.*]] = load <8 x float>, ptr [[TMP3]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP4:%.*]] = getelementptr inbounds float, ptr [[TMP2]], i64 16\\n+; AUTO_VEC-NEXT:    [[WIDE_LOAD6:%.*]] = load <8 x float>, ptr [[TMP4]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP5:%.*]] = getelementptr inbounds float, ptr [[TMP2]], i64 24\\n+; AUTO_VEC-NEXT:    [[WIDE_LOAD7:%.*]] = load <8 x float>, ptr [[TMP5]], align 4\\n+; AUTO_VEC-NEXT:    [[TMP6:%.*]] = fadd reassoc <8 x float> [[VEC_IND]], [[WIDE_LOAD]]\\n+; AUTO_VEC-NEXT:    [[TMP7:%.*]] = fadd reassoc <8 x float> [[STEP_ADD]], [[WIDE_LOAD5]]\\n+; AUTO_VEC-NEXT:    [[TMP8:%.*]] = fadd reassoc <8 x float> [[STEP_ADD2]], [[WIDE_LOAD6]]\\n+; AUTO_VEC-NEXT:    [[TMP9:%.*]] = fadd reassoc <8 x float> [[STEP_ADD3]], [[WIDE_LOAD7]]\\n+; AUTO_VEC-NEXT:    store <8 x float> [[TMP6]], ptr [[TMP2]], align 4\\n+; AUTO_VEC-NEXT:    store <8 x float> [[TMP7]], ptr [[TMP3]], align 4\\n+; AUTO_VEC-NEXT:    store <8 x float> [[TMP8]], ptr [[TMP4]], align 4\\n+; AUTO_VEC-NEXT:    store <8 x float> [[TMP9]], ptr [[TMP5]], align 4\\n+; AUTO_VEC-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32\\n+; AUTO_VEC-NEXT:    [[VEC_IND_NEXT]] = fadd reassoc <8 x float> [[STEP_ADD3]], <float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02, float 3.360000e+02>\\n+; AUTO_VEC-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; AUTO_VEC-NEXT:    br i1 [[TMP10]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]\\n ; AUTO_VEC:       middle.block:\\n ; AUTO_VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[TMP0]]\\n ; AUTO_VEC-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]]\\n@@ -611,13 +406,13 @@ define void @fadd_reassoc_FMF(ptr nocapture %p, i32 %N) {\\n ; AUTO_VEC-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ [[N_VEC]], [[MIDDLE_BLOCK]] ]\\n ; AUTO_VEC-NEXT:    [[X_012:%.*]] = phi float [ [[ADD3:%.*]], [[FOR_BODY]] ], [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[IND_END]], [[MIDDLE_BLOCK]] ]\\n ; AUTO_VEC-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[P]], i64 [[INDVARS_IV]]\\n-; AUTO_VEC-NEXT:    [[TMP54:%.*]] = load float, ptr [[ARRAYIDX]], align 4\\n-; AUTO_VEC-NEXT:    [[ADD:%.*]] = fadd reassoc float [[X_012]], [[TMP54]]\\n+; AUTO_VEC-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX]], align 4\\n+; AUTO_VEC-NEXT:    [[ADD:%.*]] = fadd reassoc float [[X_012]], [[TMP11]]\\n ; AUTO_VEC-NEXT:    store float [[ADD]], ptr [[ARRAYIDX]], align 4\\n ; AUTO_VEC-NEXT:    [[ADD3]] = fadd reassoc float [[X_012]], 4.200000e+01\\n ; AUTO_VEC-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AUTO_VEC-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[TMP0]]\\n-; AUTO_VEC-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n+; AUTO_VEC-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]\\n ;\\n entry:\\n   %cmp.not11 = icmp eq i32 %N, 0\"}, {\"sha\": \"7b727bb3a26f1940a0a91edaa0983d4fb798d073\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/gather_scatter.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fgather_scatter.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -67,7 +67,7 @@ define void @foo1(ptr noalias %in, ptr noalias %out, ptr noalias %trigger, ptr n\\n ; AVX512:       for.inc:\\n ; AVX512-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX512-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 4096\\n-; AVX512-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; AVX512-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; AVX512:       for.end:\\n ; AVX512-NEXT:    ret void\\n ;\\n@@ -116,7 +116,7 @@ define void @foo1(ptr noalias %in, ptr noalias %out, ptr noalias %trigger, ptr n\\n ; FVW2:       for.inc:\\n ; FVW2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; FVW2-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 4096\\n-; FVW2-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; FVW2-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; FVW2:       for.end:\\n ; FVW2-NEXT:    ret void\\n ;\"}, {\"sha\": \"9b432de35c9d11c9f453d46dd86e939f8e2406a0\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/invariant-load-gather.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-load-gather.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-load-gather.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-load-gather.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -59,13 +59,13 @@ define i32 @inv_load_conditional(ptr %a, i64 %n, ptr %b, i32 %k) {\\n ; CHECK:       vec.epilog.vector.body:\\n ; CHECK-NEXT:    [[INDEX9:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT17:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX9]]\\n-; CHECK-NEXT:    store <8 x i32> [[BROADCAST_SPLAT14]], ptr [[TMP5]], align 4, !alias.scope !7, !noalias !10\\n+; CHECK-NEXT:    store <8 x i32> [[BROADCAST_SPLAT14]], ptr [[TMP5]], align 4, !alias.scope !8, !noalias !11\\n ; CHECK-NEXT:    [[INDEX_NEXT17]] = add nuw i64 [[INDEX9]], 8\\n ; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq i64 [[INDEX_NEXT17]], [[N_VEC7]]\\n-; CHECK-NEXT:    br i1 [[TMP6]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP6]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]\\n ; CHECK:       vec.epilog.middle.block:\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp ne <8 x ptr> [[BROADCAST_SPLAT12]], zeroinitializer\\n-; CHECK-NEXT:    [[WIDE_MASKED_GATHER15:%.*]] = call <8 x i32> @llvm.masked.gather.v8i32.v8p0(<8 x ptr> [[BROADCAST_SPLAT12]], i32 4, <8 x i1> [[TMP7]], <8 x i32> poison), !alias.scope !10\\n+; CHECK-NEXT:    [[WIDE_MASKED_GATHER15:%.*]] = call <8 x i32> @llvm.masked.gather.v8i32.v8p0(<8 x ptr> [[BROADCAST_SPLAT12]], i32 4, <8 x i1> [[TMP7]], <8 x i32> poison), !alias.scope !11\\n ; CHECK-NEXT:    [[PREDPHI16:%.*]] = select <8 x i1> [[TMP7]], <8 x i32> [[WIDE_MASKED_GATHER15]], <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 1>\\n ; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <8 x i32> [[PREDPHI16]], i64 7\\n ; CHECK-NEXT:    [[CMP_N8:%.*]] = icmp eq i64 [[SMAX2]], [[N_VEC7]]\"}, {\"sha\": \"ccee24887f10072472320b4915b83d495852c2cc\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/invariant-store-vectorization.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-store-vectorization.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-store-vectorization.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Finvariant-store-vectorization.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -72,12 +72,12 @@ define i32 @inv_val_store_to_inv_address_with_reduction(ptr %a, i64 %n, ptr %b)\\n ; CHECK-NEXT:    [[INDEX15:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT18:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[VEC_PHI16:%.*]] = phi <8 x i32> [ [[TMP11]], [[VEC_EPILOG_PH]] ], [ [[TMP13:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX15]]\\n-; CHECK-NEXT:    [[WIDE_LOAD17:%.*]] = load <8 x i32>, ptr [[TMP12]], align 8, !alias.scope !7\\n+; CHECK-NEXT:    [[WIDE_LOAD17:%.*]] = load <8 x i32>, ptr [[TMP12]], align 8, !alias.scope !8\\n ; CHECK-NEXT:    [[TMP13]] = add <8 x i32> [[VEC_PHI16]], [[WIDE_LOAD17]]\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !10, !noalias !7\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !11, !noalias !8\\n ; CHECK-NEXT:    [[INDEX_NEXT18]] = add nuw i64 [[INDEX15]], 8\\n ; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT18]], [[N_VEC13]]\\n-; CHECK-NEXT:    br i1 [[TMP14]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP14]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]\\n ; CHECK:       vec.epilog.middle.block:\\n ; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> [[TMP13]])\\n ; CHECK-NEXT:    [[CMP_N14:%.*]] = icmp eq i64 [[SMAX2]], [[N_VEC13]]\"}, {\"sha\": \"a4b962f59b6c9f519bad507116cc6e42b90294a2\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/masked_load_store.ll\", \"status\": \"modified\", \"additions\": 43, \"deletions\": 43, \"changes\": 86, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmasked_load_store.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmasked_load_store.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmasked_load_store.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -72,7 +72,7 @@ define void @foo1(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX1:       for.inc:\\n ; AVX1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; AVX1:       for.end:\\n ; AVX1-NEXT:    ret void\\n ;\\n@@ -166,7 +166,7 @@ define void @foo1(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX2:       for.inc:\\n ; AVX2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; AVX2:       for.end:\\n ; AVX2-NEXT:    ret void\\n ;\\n@@ -264,7 +264,7 @@ define void @foo1(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX512-NEXT:    call void @llvm.masked.store.v8i32.p0(<8 x i32> [[TMP45]], ptr [[TMP47]], i32 4, <8 x i1> [[TMP42]])\\n ; AVX512-NEXT:    [[INDEX_NEXT15]] = add nuw i64 [[INDEX12]], 8\\n ; AVX512-NEXT:    [[TMP48:%.*]] = icmp eq i64 [[INDEX_NEXT15]], 10000\\n-; AVX512-NEXT:    br i1 [[TMP48]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; AVX512-NEXT:    br i1 [[TMP48]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; AVX512:       vec.epilog.middle.block:\\n ; AVX512-NEXT:    [[CMP_N11:%.*]] = icmp eq i64 10000, 10000\\n ; AVX512-NEXT:    br i1 [[CMP_N11]], label [[FOR_END]], label [[VEC_EPILOG_SCALAR_PH]]\\n@@ -352,7 +352,7 @@ define void @foo1_addrspace1(ptr addrspace(1) nocapture %A, ptr addrspace(1) noc\\n ; AVX1-NEXT:    call void @llvm.masked.store.v8i32.p1(<8 x i32> [[TMP8]], ptr addrspace(1) [[TMP10]], i32 4, <8 x i1> [[TMP5]])\\n ; AVX1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8\\n ; AVX1-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], 10000\\n-; AVX1-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n ; AVX1:       middle.block:\\n ; AVX1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 10000, 10000\\n ; AVX1-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -375,7 +375,7 @@ define void @foo1_addrspace1(ptr addrspace(1) nocapture %A, ptr addrspace(1) noc\\n ; AVX1:       for.inc:\\n ; AVX1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]\\n ; AVX1:       for.end:\\n ; AVX1-NEXT:    ret void\\n ;\\n@@ -446,7 +446,7 @@ define void @foo1_addrspace1(ptr addrspace(1) nocapture %A, ptr addrspace(1) noc\\n ; AVX2-NEXT:    call void @llvm.masked.store.v8i32.p1(<8 x i32> [[TMP29]], ptr addrspace(1) [[TMP37]], i32 4, <8 x i1> [[TMP17]])\\n ; AVX2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32\\n ; AVX2-NEXT:    [[TMP38:%.*]] = icmp eq i64 [[INDEX_NEXT]], 9984\\n-; AVX2-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n ; AVX2:       middle.block:\\n ; AVX2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 10000, 9984\\n ; AVX2-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -469,7 +469,7 @@ define void @foo1_addrspace1(ptr addrspace(1) nocapture %A, ptr addrspace(1) noc\\n ; AVX2:       for.inc:\\n ; AVX2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]\\n ; AVX2:       for.end:\\n ; AVX2-NEXT:    ret void\\n ;\\n@@ -665,7 +665,7 @@ define void @foo2(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX1-NEXT:    call void @llvm.masked.store.v8f32.p0(<8 x float> [[TMP9]], ptr [[TMP11]], i32 4, <8 x i1> [[TMP5]])\\n ; AVX1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8\\n ; AVX1-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], 10000\\n-; AVX1-NEXT:    br i1 [[TMP12]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[TMP12]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]\\n ; AVX1:       middle.block:\\n ; AVX1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 10000, 10000\\n ; AVX1-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -689,7 +689,7 @@ define void @foo2(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX1:       for.inc:\\n ; AVX1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n ; AVX1:       for.end:\\n ; AVX1-NEXT:    ret void\\n ;\\n@@ -764,7 +764,7 @@ define void @foo2(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX2-NEXT:    call void @llvm.masked.store.v8f32.p0(<8 x float> [[TMP33]], ptr [[TMP41]], i32 4, <8 x i1> [[TMP17]])\\n ; AVX2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32\\n ; AVX2-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[INDEX_NEXT]], 9984\\n-; AVX2-NEXT:    br i1 [[TMP42]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[TMP42]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]\\n ; AVX2:       middle.block:\\n ; AVX2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 10000, 9984\\n ; AVX2-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -788,7 +788,7 @@ define void @foo2(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX2:       for.inc:\\n ; AVX2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n ; AVX2:       for.end:\\n ; AVX2-NEXT:    ret void\\n ;\\n@@ -987,13 +987,13 @@ define void @foo3(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[TRIGGER]], i64 [[TMP2]]\\n ; AVX-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[TRIGGER]], i64 [[TMP3]]\\n ; AVX-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 0\\n-; AVX-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP8]], align 4, !alias.scope !7\\n+; AVX-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP8]], align 4, !alias.scope !8\\n ; AVX-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 4\\n-; AVX-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, ptr [[TMP9]], align 4, !alias.scope !7\\n+; AVX-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, ptr [[TMP9]], align 4, !alias.scope !8\\n ; AVX-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 8\\n-; AVX-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x i32>, ptr [[TMP10]], align 4, !alias.scope !7\\n+; AVX-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x i32>, ptr [[TMP10]], align 4, !alias.scope !8\\n ; AVX-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 12\\n-; AVX-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x i32>, ptr [[TMP11]], align 4, !alias.scope !7\\n+; AVX-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x i32>, ptr [[TMP11]], align 4, !alias.scope !8\\n ; AVX-NEXT:    [[TMP12:%.*]] = icmp slt <4 x i32> [[WIDE_LOAD]], <i32 100, i32 100, i32 100, i32 100>\\n ; AVX-NEXT:    [[TMP13:%.*]] = icmp slt <4 x i32> [[WIDE_LOAD6]], <i32 100, i32 100, i32 100, i32 100>\\n ; AVX-NEXT:    [[TMP14:%.*]] = icmp slt <4 x i32> [[WIDE_LOAD7]], <i32 100, i32 100, i32 100, i32 100>\\n@@ -1003,13 +1003,13 @@ define void @foo3(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX-NEXT:    [[TMP18:%.*]] = getelementptr double, ptr [[B]], i64 [[TMP2]]\\n ; AVX-NEXT:    [[TMP19:%.*]] = getelementptr double, ptr [[B]], i64 [[TMP3]]\\n ; AVX-NEXT:    [[TMP20:%.*]] = getelementptr double, ptr [[TMP16]], i32 0\\n-; AVX-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP20]], i32 8, <4 x i1> [[TMP12]], <4 x double> poison), !alias.scope !10\\n+; AVX-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP20]], i32 8, <4 x i1> [[TMP12]], <4 x double> poison), !alias.scope !11\\n ; AVX-NEXT:    [[TMP21:%.*]] = getelementptr double, ptr [[TMP16]], i32 4\\n-; AVX-NEXT:    [[WIDE_MASKED_LOAD9:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP21]], i32 8, <4 x i1> [[TMP13]], <4 x double> poison), !alias.scope !10\\n+; AVX-NEXT:    [[WIDE_MASKED_LOAD9:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP21]], i32 8, <4 x i1> [[TMP13]], <4 x double> poison), !alias.scope !11\\n ; AVX-NEXT:    [[TMP22:%.*]] = getelementptr double, ptr [[TMP16]], i32 8\\n-; AVX-NEXT:    [[WIDE_MASKED_LOAD10:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP22]], i32 8, <4 x i1> [[TMP14]], <4 x double> poison), !alias.scope !10\\n+; AVX-NEXT:    [[WIDE_MASKED_LOAD10:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP22]], i32 8, <4 x i1> [[TMP14]], <4 x double> poison), !alias.scope !11\\n ; AVX-NEXT:    [[TMP23:%.*]] = getelementptr double, ptr [[TMP16]], i32 12\\n-; AVX-NEXT:    [[WIDE_MASKED_LOAD11:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP23]], i32 8, <4 x i1> [[TMP15]], <4 x double> poison), !alias.scope !10\\n+; AVX-NEXT:    [[WIDE_MASKED_LOAD11:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP23]], i32 8, <4 x i1> [[TMP15]], <4 x double> poison), !alias.scope !11\\n ; AVX-NEXT:    [[TMP24:%.*]] = sitofp <4 x i32> [[WIDE_LOAD]] to <4 x double>\\n ; AVX-NEXT:    [[TMP25:%.*]] = sitofp <4 x i32> [[WIDE_LOAD6]] to <4 x double>\\n ; AVX-NEXT:    [[TMP26:%.*]] = sitofp <4 x i32> [[WIDE_LOAD7]] to <4 x double>\\n@@ -1023,16 +1023,16 @@ define void @foo3(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX-NEXT:    [[TMP34:%.*]] = getelementptr double, ptr [[A]], i64 [[TMP2]]\\n ; AVX-NEXT:    [[TMP35:%.*]] = getelementptr double, ptr [[A]], i64 [[TMP3]]\\n ; AVX-NEXT:    [[TMP36:%.*]] = getelementptr double, ptr [[TMP32]], i32 0\\n-; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP28]], ptr [[TMP36]], i32 8, <4 x i1> [[TMP12]]), !alias.scope !12, !noalias !14\\n+; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP28]], ptr [[TMP36]], i32 8, <4 x i1> [[TMP12]]), !alias.scope !13, !noalias !15\\n ; AVX-NEXT:    [[TMP37:%.*]] = getelementptr double, ptr [[TMP32]], i32 4\\n-; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP29]], ptr [[TMP37]], i32 8, <4 x i1> [[TMP13]]), !alias.scope !12, !noalias !14\\n+; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP29]], ptr [[TMP37]], i32 8, <4 x i1> [[TMP13]]), !alias.scope !13, !noalias !15\\n ; AVX-NEXT:    [[TMP38:%.*]] = getelementptr double, ptr [[TMP32]], i32 8\\n-; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP30]], ptr [[TMP38]], i32 8, <4 x i1> [[TMP14]]), !alias.scope !12, !noalias !14\\n+; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP30]], ptr [[TMP38]], i32 8, <4 x i1> [[TMP14]]), !alias.scope !13, !noalias !15\\n ; AVX-NEXT:    [[TMP39:%.*]] = getelementptr double, ptr [[TMP32]], i32 12\\n-; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP31]], ptr [[TMP39]], i32 8, <4 x i1> [[TMP15]]), !alias.scope !12, !noalias !14\\n+; AVX-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP31]], ptr [[TMP39]], i32 8, <4 x i1> [[TMP15]]), !alias.scope !13, !noalias !15\\n ; AVX-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n ; AVX-NEXT:    [[TMP40:%.*]] = icmp eq i64 [[INDEX_NEXT]], 10000\\n-; AVX-NEXT:    br i1 [[TMP40]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP15:![0-9]+]]\\n+; AVX-NEXT:    br i1 [[TMP40]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP16:![0-9]+]]\\n ; AVX:       middle.block:\\n ; AVX-NEXT:    [[CMP_N:%.*]] = icmp eq i64 10000, 10000\\n ; AVX-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -1056,7 +1056,7 @@ define void @foo3(ptr nocapture %A, ptr nocapture readonly %B, ptr nocapture rea\\n ; AVX:       for.inc:\\n ; AVX-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 10000\\n-; AVX-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP16:![0-9]+]]\\n+; AVX-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP17:![0-9]+]]\\n ; AVX:       for.end:\\n ; AVX-NEXT:    ret void\\n ;\\n@@ -1384,19 +1384,19 @@ define void @foo6(ptr nocapture readonly %in, ptr nocapture %out, i32 %size, ptr\\n ; AVX2-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[TRIGGER]], i64 [[TMP3]]\\n ; AVX2-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 0\\n ; AVX2-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, ptr [[TMP8]], i32 -3\\n-; AVX2-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP9]], align 4, !alias.scope !17\\n+; AVX2-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP9]], align 4, !alias.scope !18\\n ; AVX2-NEXT:    [[REVERSE:%.*]] = shufflevector <4 x i32> [[WIDE_LOAD]], <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 -4\\n ; AVX2-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32, ptr [[TMP10]], i32 -3\\n-; AVX2-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, ptr [[TMP11]], align 4, !alias.scope !17\\n+; AVX2-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x i32>, ptr [[TMP11]], align 4, !alias.scope !18\\n ; AVX2-NEXT:    [[REVERSE7:%.*]] = shufflevector <4 x i32> [[WIDE_LOAD6]], <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 -8\\n ; AVX2-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i32, ptr [[TMP12]], i32 -3\\n-; AVX2-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x i32>, ptr [[TMP13]], align 4, !alias.scope !17\\n+; AVX2-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x i32>, ptr [[TMP13]], align 4, !alias.scope !18\\n ; AVX2-NEXT:    [[REVERSE9:%.*]] = shufflevector <4 x i32> [[WIDE_LOAD8]], <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 -12\\n ; AVX2-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 -3\\n-; AVX2-NEXT:    [[WIDE_LOAD10:%.*]] = load <4 x i32>, ptr [[TMP15]], align 4, !alias.scope !17\\n+; AVX2-NEXT:    [[WIDE_LOAD10:%.*]] = load <4 x i32>, ptr [[TMP15]], align 4, !alias.scope !18\\n ; AVX2-NEXT:    [[REVERSE11:%.*]] = shufflevector <4 x i32> [[WIDE_LOAD10]], <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP16:%.*]] = icmp sgt <4 x i32> [[REVERSE]], zeroinitializer\\n ; AVX2-NEXT:    [[TMP17:%.*]] = icmp sgt <4 x i32> [[REVERSE7]], zeroinitializer\\n@@ -1409,22 +1409,22 @@ define void @foo6(ptr nocapture readonly %in, ptr nocapture %out, i32 %size, ptr\\n ; AVX2-NEXT:    [[TMP24:%.*]] = getelementptr double, ptr [[TMP20]], i32 0\\n ; AVX2-NEXT:    [[TMP25:%.*]] = getelementptr double, ptr [[TMP24]], i32 -3\\n ; AVX2-NEXT:    [[REVERSE12:%.*]] = shufflevector <4 x i1> [[TMP16]], <4 x i1> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n-; AVX2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP25]], i32 8, <4 x i1> [[REVERSE12]], <4 x double> poison), !alias.scope !20\\n+; AVX2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP25]], i32 8, <4 x i1> [[REVERSE12]], <4 x double> poison), !alias.scope !21\\n ; AVX2-NEXT:    [[REVERSE13:%.*]] = shufflevector <4 x double> [[WIDE_MASKED_LOAD]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP26:%.*]] = getelementptr double, ptr [[TMP20]], i32 -4\\n ; AVX2-NEXT:    [[TMP27:%.*]] = getelementptr double, ptr [[TMP26]], i32 -3\\n ; AVX2-NEXT:    [[REVERSE14:%.*]] = shufflevector <4 x i1> [[TMP17]], <4 x i1> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n-; AVX2-NEXT:    [[WIDE_MASKED_LOAD15:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP27]], i32 8, <4 x i1> [[REVERSE14]], <4 x double> poison), !alias.scope !20\\n+; AVX2-NEXT:    [[WIDE_MASKED_LOAD15:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP27]], i32 8, <4 x i1> [[REVERSE14]], <4 x double> poison), !alias.scope !21\\n ; AVX2-NEXT:    [[REVERSE16:%.*]] = shufflevector <4 x double> [[WIDE_MASKED_LOAD15]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP28:%.*]] = getelementptr double, ptr [[TMP20]], i32 -8\\n ; AVX2-NEXT:    [[TMP29:%.*]] = getelementptr double, ptr [[TMP28]], i32 -3\\n ; AVX2-NEXT:    [[REVERSE17:%.*]] = shufflevector <4 x i1> [[TMP18]], <4 x i1> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n-; AVX2-NEXT:    [[WIDE_MASKED_LOAD18:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP29]], i32 8, <4 x i1> [[REVERSE17]], <4 x double> poison), !alias.scope !20\\n+; AVX2-NEXT:    [[WIDE_MASKED_LOAD18:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP29]], i32 8, <4 x i1> [[REVERSE17]], <4 x double> poison), !alias.scope !21\\n ; AVX2-NEXT:    [[REVERSE19:%.*]] = shufflevector <4 x double> [[WIDE_MASKED_LOAD18]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP30:%.*]] = getelementptr double, ptr [[TMP20]], i32 -12\\n ; AVX2-NEXT:    [[TMP31:%.*]] = getelementptr double, ptr [[TMP30]], i32 -3\\n ; AVX2-NEXT:    [[REVERSE20:%.*]] = shufflevector <4 x i1> [[TMP19]], <4 x i1> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n-; AVX2-NEXT:    [[WIDE_MASKED_LOAD21:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP31]], i32 8, <4 x i1> [[REVERSE20]], <4 x double> poison), !alias.scope !20\\n+; AVX2-NEXT:    [[WIDE_MASKED_LOAD21:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP31]], i32 8, <4 x i1> [[REVERSE20]], <4 x double> poison), !alias.scope !21\\n ; AVX2-NEXT:    [[REVERSE22:%.*]] = shufflevector <4 x double> [[WIDE_MASKED_LOAD21]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP32:%.*]] = fadd <4 x double> [[REVERSE13]], <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>\\n ; AVX2-NEXT:    [[TMP33:%.*]] = fadd <4 x double> [[REVERSE16]], <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>\\n@@ -1437,22 +1437,22 @@ define void @foo6(ptr nocapture readonly %in, ptr nocapture %out, i32 %size, ptr\\n ; AVX2-NEXT:    [[REVERSE23:%.*]] = shufflevector <4 x double> [[TMP32]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP40:%.*]] = getelementptr double, ptr [[TMP36]], i32 0\\n ; AVX2-NEXT:    [[TMP41:%.*]] = getelementptr double, ptr [[TMP40]], i32 -3\\n-; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE23]], ptr [[TMP41]], i32 8, <4 x i1> [[REVERSE12]]), !alias.scope !22, !noalias !24\\n+; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE23]], ptr [[TMP41]], i32 8, <4 x i1> [[REVERSE12]]), !alias.scope !23, !noalias !25\\n ; AVX2-NEXT:    [[REVERSE25:%.*]] = shufflevector <4 x double> [[TMP33]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP42:%.*]] = getelementptr double, ptr [[TMP36]], i32 -4\\n ; AVX2-NEXT:    [[TMP43:%.*]] = getelementptr double, ptr [[TMP42]], i32 -3\\n-; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE25]], ptr [[TMP43]], i32 8, <4 x i1> [[REVERSE14]]), !alias.scope !22, !noalias !24\\n+; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE25]], ptr [[TMP43]], i32 8, <4 x i1> [[REVERSE14]]), !alias.scope !23, !noalias !25\\n ; AVX2-NEXT:    [[REVERSE27:%.*]] = shufflevector <4 x double> [[TMP34]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP44:%.*]] = getelementptr double, ptr [[TMP36]], i32 -8\\n ; AVX2-NEXT:    [[TMP45:%.*]] = getelementptr double, ptr [[TMP44]], i32 -3\\n-; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE27]], ptr [[TMP45]], i32 8, <4 x i1> [[REVERSE17]]), !alias.scope !22, !noalias !24\\n+; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE27]], ptr [[TMP45]], i32 8, <4 x i1> [[REVERSE17]]), !alias.scope !23, !noalias !25\\n ; AVX2-NEXT:    [[REVERSE29:%.*]] = shufflevector <4 x double> [[TMP35]], <4 x double> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\\n ; AVX2-NEXT:    [[TMP46:%.*]] = getelementptr double, ptr [[TMP36]], i32 -12\\n ; AVX2-NEXT:    [[TMP47:%.*]] = getelementptr double, ptr [[TMP46]], i32 -3\\n-; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE29]], ptr [[TMP47]], i32 8, <4 x i1> [[REVERSE20]]), !alias.scope !22, !noalias !24\\n+; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[REVERSE29]], ptr [[TMP47]], i32 8, <4 x i1> [[REVERSE20]]), !alias.scope !23, !noalias !25\\n ; AVX2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n ; AVX2-NEXT:    [[TMP48:%.*]] = icmp eq i64 [[INDEX_NEXT]], 4096\\n-; AVX2-NEXT:    br i1 [[TMP48]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[TMP48]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n ; AVX2:       middle.block:\\n ; AVX2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 4096, 4096\\n ; AVX2-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -1475,7 +1475,7 @@ define void @foo6(ptr nocapture readonly %in, ptr nocapture %out, i32 %size, ptr\\n ; AVX2:       for.inc:\\n ; AVX2-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1\\n ; AVX2-NEXT:    [[CMP:%.*]] = icmp eq i64 [[INDVARS_IV]], 0\\n-; AVX2-NEXT:    br i1 [[CMP]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[CMP]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP27:![0-9]+]]\\n ; AVX2:       for.end:\\n ; AVX2-NEXT:    ret void\\n ;\\n@@ -1720,7 +1720,7 @@ define void @foo7(ptr noalias nocapture %out, ptr noalias nocapture readonly %in\\n ; AVX1-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, ptr [[TMP51]], i32 8, <4 x i1> [[TMP47]])\\n ; AVX1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n ; AVX1-NEXT:    [[TMP52:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; AVX1-NEXT:    br i1 [[TMP52]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP17:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[TMP52]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP18:![0-9]+]]\\n ; AVX1:       middle.block:\\n ; AVX1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]\\n ; AVX1-NEXT:    br i1 [[CMP_N]], label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]\\n@@ -1746,7 +1746,7 @@ define void @foo7(ptr noalias nocapture %out, ptr noalias nocapture readonly %in\\n ; AVX1:       for.inc:\\n ; AVX1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]\\n-; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP18:![0-9]+]]\\n+; AVX1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP19:![0-9]+]]\\n ; AVX1:       for.end.loopexit:\\n ; AVX1-NEXT:    br label [[FOR_END]]\\n ; AVX1:       for.end:\\n@@ -1832,7 +1832,7 @@ define void @foo7(ptr noalias nocapture %out, ptr noalias nocapture readonly %in\\n ; AVX2-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, ptr [[TMP51]], i32 8, <4 x i1> [[TMP47]])\\n ; AVX2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n ; AVX2-NEXT:    [[TMP52:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; AVX2-NEXT:    br i1 [[TMP52]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP27:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[TMP52]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP28:![0-9]+]]\\n ; AVX2:       middle.block:\\n ; AVX2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]\\n ; AVX2-NEXT:    br i1 [[CMP_N]], label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]\\n@@ -1858,7 +1858,7 @@ define void @foo7(ptr noalias nocapture %out, ptr noalias nocapture readonly %in\\n ; AVX2:       for.inc:\\n ; AVX2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; AVX2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]\\n-; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP28:![0-9]+]]\\n+; AVX2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP29:![0-9]+]]\\n ; AVX2:       for.end.loopexit:\\n ; AVX2-NEXT:    br label [[FOR_END]]\\n ; AVX2:       for.end:\"}, {\"sha\": \"2051e37b2a6774af2820e006c6ab6907c154c977\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/metadata-enable.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmetadata-enable.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmetadata-enable.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Fmetadata-enable.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -1211,7 +1211,7 @@ define i32 @nopragma(ptr noalias nocapture %a, ptr noalias nocapture readonly %b\\n ; O1VEC2-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX2]], align 4\\n ; O1VEC2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; O1VEC2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 64\\n-; O1VEC2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; O1VEC2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; O1VEC2:       for.end:\\n ; O1VEC2-NEXT:    [[TMP8:%.*]] = load i32, ptr [[A]], align 4\\n ; O1VEC2-NEXT:    ret i32 [[TMP8]]\\n@@ -1251,7 +1251,7 @@ define i32 @nopragma(ptr noalias nocapture %a, ptr noalias nocapture readonly %b\\n ; OzVEC2-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX2]], align 4\\n ; OzVEC2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; OzVEC2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 64\\n-; OzVEC2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; OzVEC2-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; OzVEC2:       for.end:\\n ; OzVEC2-NEXT:    [[TMP8:%.*]] = load i32, ptr [[A]], align 4\\n ; OzVEC2-NEXT:    ret i32 [[TMP8]]\"}, {\"sha\": \"b255d15b5970246e041a39919b4cf66c008d7d92\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/tail_loop_folding.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ftail_loop_folding.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ftail_loop_folding.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Ftail_loop_folding.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -49,7 +49,7 @@ define dso_local void @tail_folding_enabled(ptr noalias nocapture %A, ptr noalia\\n ; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 430\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ;\\n entry:\\n   br label %for.body\"}, {\"sha\": \"5f2c8676653c0683b2aaefab8c80a11ae1d50699\", \"filename\": \"llvm/test/Transforms/LoopVectorize/X86/uniform_mem_op.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Funiform_mem_op.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Funiform_mem_op.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2FX86%2Funiform_mem_op.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -31,7 +31,7 @@ define i32 @uniform_load(ptr align(4) %addr) {\\n ; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr [[ADDR]], align 4\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[IV]], 4096\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       loopexit:\\n ; CHECK-NEXT:    [[LOAD_LCSSA:%.*]] = phi i32 [ [[LOAD]], [[FOR_BODY]] ], [ [[TMP0]], [[MIDDLE_BLOCK]] ]\\n ; CHECK-NEXT:    ret i32 [[LOAD_LCSSA]]\"}, {\"sha\": \"979cc12d8a3310e55d395bb75efb0e4f02b67539\", \"filename\": \"llvm/test/Transforms/LoopVectorize/followup.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Ffollowup.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Ffollowup.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Ffollowup.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -36,8 +36,9 @@ for.end:\\n ; CHECK-LABEL: for.body:\\n ; CHECK: br i1 %exitcond, label %for.end.loopexit, label %for.body, !llvm.loop ![[LOOP_EPILOGUE:[0-9]+]]\\n \\n-; CHECK: ![[LOOP_VECTOR]] = distinct !{![[LOOP_VECTOR]], ![[FOLLOWUP_ALL:[0-9]+]], ![[FOLLOWUP_VECTORIZED:[0-9]+]]}\\n+; CHECK: ![[LOOP_VECTOR]] = distinct !{![[LOOP_VECTOR]], ![[FOLLOWUP_ALL:[0-9]+]], ![[FOLLOWUP_VECTORIZED:[0-9]+]], ![[RT_UNROLL_DIS:[0-9]+]]}\\n ; CHECK: ![[FOLLOWUP_ALL]] = !{!\\\"FollowupAll\\\"}\\n ; CHECK: ![[FOLLOWUP_VECTORIZED:[0-9]+]] = !{!\\\"FollowupVectorized\\\"}\\n+; CHECK: ![[RT_UNROLL_DIS]] = !{!\\\"llvm.loop.unroll.runtime.disable\\\"}\\n ; CHECK: ![[LOOP_EPILOGUE]] = distinct !{![[LOOP_EPILOGUE]], ![[FOLLOWUP_ALL]], ![[FOLLOWUP_EPILOGUE:[0-9]+]]}\\n ; CHECK: ![[FOLLOWUP_EPILOGUE]] = !{!\\\"FollowupEpilogue\\\"}\"}, {\"sha\": \"13cd1a5caab2de744f6fca609319e07727ed4e7d\", \"filename\": \"llvm/test/Transforms/LoopVectorize/if-pred-non-void.ll\", \"status\": \"modified\", \"additions\": 48, \"deletions\": 48, \"changes\": 96, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-pred-non-void.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-pred-non-void.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fif-pred-non-void.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -165,7 +165,7 @@ define void @test(ptr nocapture %asd, ptr nocapture %aud,\\n ; CHECK-NEXT:    store i32 [[YUR_0]], ptr [[IUR]], align 4\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP18:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP19:![0-9]+]]\\n ;\\n ; UNROLL-NO-VF-LABEL: @test(\\n ; UNROLL-NO-VF-NEXT:  entry:\\n@@ -317,7 +317,7 @@ define void @test(ptr nocapture %asd, ptr nocapture %aud,\\n ; UNROLL-NO-VF-NEXT:    store i32 [[YUR_0]], ptr [[IUR]], align 4\\n ; UNROLL-NO-VF-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; UNROLL-NO-VF-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP18:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP19:![0-9]+]]\\n ;\\n   ptr nocapture %asr, ptr nocapture %aur) {\\n entry:\\n@@ -378,10 +378,10 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; CHECK-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0\\n ; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP0]]\\n ; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i32>, ptr [[TMP2]], align 4, !alias.scope !19, !noalias !22\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i32>, ptr [[TMP2]], align 4, !alias.scope !20, !noalias !23\\n ; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP0]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i32 0\\n-; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <2 x i32>, ptr [[TMP4]], align 4, !alias.scope !22\\n+; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <2 x i32>, ptr [[TMP4]], align 4, !alias.scope !23\\n ; CHECK-NEXT:    [[TMP5:%.*]] = add nsw <2 x i32> [[WIDE_LOAD]], <i32 23, i32 23>\\n ; CHECK-NEXT:    [[TMP6:%.*]] = icmp slt <2 x i32> [[WIDE_LOAD]], <i32 100, i32 100>\\n ; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i1> [[TMP6]], i32 0\\n@@ -413,10 +413,10 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; CHECK-NEXT:    [[TMP25:%.*]] = xor <2 x i1> [[TMP6]], <i1 true, i1 true>\\n ; CHECK-NEXT:    [[PREDPHI:%.*]] = select <2 x i1> [[TMP25]], <2 x i32> [[TMP5]], <2 x i32> [[TMP24]]\\n ; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0\\n-; CHECK-NEXT:    store <2 x i32> [[PREDPHI]], ptr [[TMP26]], align 4, !alias.scope !19, !noalias !22\\n+; CHECK-NEXT:    store <2 x i32> [[PREDPHI]], ptr [[TMP26]], align 4, !alias.scope !20, !noalias !23\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128\\n-; CHECK-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP24:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 128, 128\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]\\n@@ -443,7 +443,7 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; CHECK-NEXT:    store i32 [[YSD_0]], ptr [[ISD]], align 4\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n ;\\n ; UNROLL-NO-VF-LABEL: @test_scalar2scalar(\\n ; UNROLL-NO-VF-NEXT:  entry:\\n@@ -463,16 +463,16 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; UNROLL-NO-VF-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1\\n ; UNROLL-NO-VF-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP0]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP1]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4, !alias.scope !19, !noalias !22\\n-; UNROLL-NO-VF-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP3]], align 4, !alias.scope !19, !noalias !22\\n+; UNROLL-NO-VF-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4, !alias.scope !20, !noalias !23\\n+; UNROLL-NO-VF-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP3]], align 4, !alias.scope !20, !noalias !23\\n ; UNROLL-NO-VF-NEXT:    [[TMP6:%.*]] = add nsw i32 [[TMP4]], 23\\n ; UNROLL-NO-VF-NEXT:    [[TMP7:%.*]] = add nsw i32 [[TMP5]], 23\\n ; UNROLL-NO-VF-NEXT:    [[TMP8:%.*]] = icmp slt i32 [[TMP4]], 100\\n ; UNROLL-NO-VF-NEXT:    [[TMP9:%.*]] = icmp slt i32 [[TMP5]], 100\\n ; UNROLL-NO-VF-NEXT:    br i1 [[TMP8]], label [[PRED_SDIV_IF:%.*]], label [[PRED_SDIV_CONTINUE:%.*]]\\n ; UNROLL-NO-VF:       pred.sdiv.if:\\n ; UNROLL-NO-VF-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP0]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4, !alias.scope !22\\n+; UNROLL-NO-VF-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4, !alias.scope !23\\n ; UNROLL-NO-VF-NEXT:    [[TMP12:%.*]] = sdiv i32 [[TMP6]], [[TMP4]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP13:%.*]] = sdiv i32 [[TMP11]], [[TMP12]]\\n ; UNROLL-NO-VF-NEXT:    br label [[PRED_SDIV_CONTINUE]]\\n@@ -482,7 +482,7 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; UNROLL-NO-VF-NEXT:    br i1 [[TMP9]], label [[PRED_SDIV_IF2:%.*]], label [[PRED_SDIV_CONTINUE3]]\\n ; UNROLL-NO-VF:       pred.sdiv.if2:\\n ; UNROLL-NO-VF-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP1]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4, !alias.scope !22\\n+; UNROLL-NO-VF-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4, !alias.scope !23\\n ; UNROLL-NO-VF-NEXT:    [[TMP18:%.*]] = sdiv i32 [[TMP7]], [[TMP5]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP19:%.*]] = sdiv i32 [[TMP17]], [[TMP18]]\\n ; UNROLL-NO-VF-NEXT:    br label [[PRED_SDIV_CONTINUE3]]\\n@@ -493,11 +493,11 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; UNROLL-NO-VF-NEXT:    [[TMP23:%.*]] = xor i1 [[TMP9]], true\\n ; UNROLL-NO-VF-NEXT:    [[PREDPHI:%.*]] = select i1 [[TMP22]], i32 [[TMP6]], i32 [[TMP15]]\\n ; UNROLL-NO-VF-NEXT:    [[PREDPHI4:%.*]] = select i1 [[TMP23]], i32 [[TMP7]], i32 [[TMP21]]\\n-; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI]], ptr [[TMP2]], align 4, !alias.scope !19, !noalias !22\\n-; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI4]], ptr [[TMP3]], align 4, !alias.scope !19, !noalias !22\\n+; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI]], ptr [[TMP2]], align 4, !alias.scope !20, !noalias !23\\n+; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI4]], ptr [[TMP3]], align 4, !alias.scope !20, !noalias !23\\n ; UNROLL-NO-VF-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; UNROLL-NO-VF-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128\\n-; UNROLL-NO-VF-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP24:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n ; UNROLL-NO-VF:       middle.block:\\n ; UNROLL-NO-VF-NEXT:    [[CMP_N:%.*]] = icmp eq i64 128, 128\\n ; UNROLL-NO-VF-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]\\n@@ -524,7 +524,7 @@ define void @test_scalar2scalar(ptr nocapture %asd, ptr nocapture %bsd) {\\n ; UNROLL-NO-VF-NEXT:    store i32 [[YSD_0]], ptr [[ISD]], align 4\\n ; UNROLL-NO-VF-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; UNROLL-NO-VF-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n ;\\n entry:\\n   br label %for.body\\n@@ -570,15 +570,15 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; CHECK-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0\\n ; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP0]]\\n ; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i32>, ptr [[TMP2]], align 4, !alias.scope !28, !noalias !31\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i32>, ptr [[TMP2]], align 4, !alias.scope !29, !noalias !32\\n ; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP0]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i32 0\\n-; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <2 x i32>, ptr [[TMP4]], align 4, !alias.scope !31\\n+; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <2 x i32>, ptr [[TMP4]], align 4, !alias.scope !32\\n ; CHECK-NEXT:    [[TMP5:%.*]] = add nsw <2 x i32> [[WIDE_LOAD]], <i32 23, i32 23>\\n ; CHECK-NEXT:    [[TMP6:%.*]] = icmp slt <2 x i32> [[WIDE_LOAD]], <i32 100, i32 100>\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp sge <2 x i32> [[WIDE_LOAD]], <i32 200, i32 200>\\n-; CHECK-NEXT:    [[TMP8:%.*]] = xor <2 x i1> [[TMP6]], <i1 true, i1 true>, !dbg [[DBG33:![0-9]+]]\\n-; CHECK-NEXT:    [[TMP9:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP7]], <2 x i1> zeroinitializer, !dbg [[DBG34:![0-9]+]]\\n+; CHECK-NEXT:    [[TMP8:%.*]] = xor <2 x i1> [[TMP6]], <i1 true, i1 true>, !dbg [[DBG34:![0-9]+]]\\n+; CHECK-NEXT:    [[TMP9:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP7]], <2 x i1> zeroinitializer, !dbg [[DBG35:![0-9]+]]\\n ; CHECK-NEXT:    [[TMP10:%.*]] = or <2 x i1> [[TMP9]], [[TMP6]]\\n ; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <2 x i1> [[TMP10]], i32 0\\n ; CHECK-NEXT:    br i1 [[TMP11]], label [[PRED_SDIV_IF:%.*]], label [[PRED_SDIV_CONTINUE:%.*]]\\n@@ -606,14 +606,14 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; CHECK:       pred.sdiv.continue4:\\n ; CHECK-NEXT:    [[TMP27:%.*]] = phi i32 [ poison, [[PRED_SDIV_CONTINUE]] ], [ [[TMP23]], [[PRED_SDIV_IF3]] ]\\n ; CHECK-NEXT:    [[TMP28:%.*]] = phi <2 x i32> [ [[TMP19]], [[PRED_SDIV_CONTINUE]] ], [ [[TMP26]], [[PRED_SDIV_IF3]] ]\\n-; CHECK-NEXT:    [[TMP29:%.*]] = xor <2 x i1> [[TMP7]], <i1 true, i1 true>, !dbg [[DBG34]]\\n-; CHECK-NEXT:    [[TMP30:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP29]], <2 x i1> zeroinitializer, !dbg [[DBG34]]\\n+; CHECK-NEXT:    [[TMP29:%.*]] = xor <2 x i1> [[TMP7]], <i1 true, i1 true>, !dbg [[DBG35]]\\n+; CHECK-NEXT:    [[TMP30:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP29]], <2 x i1> zeroinitializer, !dbg [[DBG35]]\\n ; CHECK-NEXT:    [[PREDPHI:%.*]] = select <2 x i1> [[TMP30]], <2 x i32> [[TMP5]], <2 x i32> [[TMP28]]\\n ; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0\\n-; CHECK-NEXT:    store <2 x i32> [[PREDPHI]], ptr [[TMP31]], align 4, !alias.scope !28, !noalias !31\\n+; CHECK-NEXT:    store <2 x i32> [[PREDPHI]], ptr [[TMP31]], align 4, !alias.scope !29, !noalias !32\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP32:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128\\n-; CHECK-NEXT:    br i1 [[TMP32]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP35:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP32]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP36:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 128, 128\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]\\n@@ -631,8 +631,8 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; CHECK-NEXT:    [[PSD:%.*]] = add nsw i32 [[LSD]], 23\\n ; CHECK-NEXT:    [[CMP1:%.*]] = icmp slt i32 [[LSD]], 100\\n ; CHECK-NEXT:    [[CMP2:%.*]] = icmp sge i32 [[LSD]], 200\\n-; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP1]], [[CMP2]], !dbg [[DBG33]]\\n-; CHECK-NEXT:    br i1 [[OR_COND]], label [[IF_THEN:%.*]], label [[IF_END]], !dbg [[DBG33]]\\n+; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP1]], [[CMP2]], !dbg [[DBG34]]\\n+; CHECK-NEXT:    br i1 [[OR_COND]], label [[IF_THEN:%.*]], label [[IF_END]], !dbg [[DBG34]]\\n ; CHECK:       if.then:\\n ; CHECK-NEXT:    [[SD1:%.*]] = sdiv i32 [[PSD]], [[LSD]]\\n ; CHECK-NEXT:    [[RSD:%.*]] = sdiv i32 [[LSD_B]], [[SD1]]\\n@@ -642,7 +642,7 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; CHECK-NEXT:    store i32 [[YSD_0]], ptr [[ISD]], align 4\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP36:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP37:![0-9]+]]\\n ;\\n ; UNROLL-NO-VF-LABEL: @pr30172(\\n ; UNROLL-NO-VF-NEXT:  entry:\\n@@ -662,24 +662,24 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; UNROLL-NO-VF-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1\\n ; UNROLL-NO-VF-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP0]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i32, ptr [[ASD]], i64 [[TMP1]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4, !alias.scope !28, !noalias !31\\n-; UNROLL-NO-VF-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP3]], align 4, !alias.scope !28, !noalias !31\\n+; UNROLL-NO-VF-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4, !alias.scope !29, !noalias !32\\n+; UNROLL-NO-VF-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP3]], align 4, !alias.scope !29, !noalias !32\\n ; UNROLL-NO-VF-NEXT:    [[TMP6:%.*]] = add nsw i32 [[TMP4]], 23\\n ; UNROLL-NO-VF-NEXT:    [[TMP7:%.*]] = add nsw i32 [[TMP5]], 23\\n ; UNROLL-NO-VF-NEXT:    [[TMP8:%.*]] = icmp slt i32 [[TMP4]], 100\\n ; UNROLL-NO-VF-NEXT:    [[TMP9:%.*]] = icmp slt i32 [[TMP5]], 100\\n ; UNROLL-NO-VF-NEXT:    [[TMP10:%.*]] = icmp sge i32 [[TMP4]], 200\\n ; UNROLL-NO-VF-NEXT:    [[TMP11:%.*]] = icmp sge i32 [[TMP5]], 200\\n-; UNROLL-NO-VF-NEXT:    [[TMP12:%.*]] = xor i1 [[TMP8]], true, !dbg [[DBG33:![0-9]+]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP9]], true, !dbg [[DBG33]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP14:%.*]] = select i1 [[TMP12]], i1 [[TMP10]], i1 false, !dbg [[DBG34:![0-9]+]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP15:%.*]] = select i1 [[TMP13]], i1 [[TMP11]], i1 false, !dbg [[DBG34]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP12:%.*]] = xor i1 [[TMP8]], true, !dbg [[DBG34:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP9]], true, !dbg [[DBG34]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP14:%.*]] = select i1 [[TMP12]], i1 [[TMP10]], i1 false, !dbg [[DBG35:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP15:%.*]] = select i1 [[TMP13]], i1 [[TMP11]], i1 false, !dbg [[DBG35]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP16:%.*]] = or i1 [[TMP14]], [[TMP8]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP17:%.*]] = or i1 [[TMP15]], [[TMP9]]\\n ; UNROLL-NO-VF-NEXT:    br i1 [[TMP16]], label [[PRED_SDIV_IF:%.*]], label [[PRED_SDIV_CONTINUE:%.*]]\\n ; UNROLL-NO-VF:       pred.sdiv.if:\\n ; UNROLL-NO-VF-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP0]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP19:%.*]] = load i32, ptr [[TMP18]], align 4, !alias.scope !31\\n+; UNROLL-NO-VF-NEXT:    [[TMP19:%.*]] = load i32, ptr [[TMP18]], align 4, !alias.scope !32\\n ; UNROLL-NO-VF-NEXT:    [[TMP20:%.*]] = sdiv i32 [[TMP6]], [[TMP4]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP21:%.*]] = sdiv i32 [[TMP19]], [[TMP20]]\\n ; UNROLL-NO-VF-NEXT:    br label [[PRED_SDIV_CONTINUE]]\\n@@ -689,24 +689,24 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; UNROLL-NO-VF-NEXT:    br i1 [[TMP17]], label [[PRED_SDIV_IF2:%.*]], label [[PRED_SDIV_CONTINUE3]]\\n ; UNROLL-NO-VF:       pred.sdiv.if2:\\n ; UNROLL-NO-VF-NEXT:    [[TMP24:%.*]] = getelementptr inbounds i32, ptr [[BSD]], i64 [[TMP1]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP24]], align 4, !alias.scope !31\\n+; UNROLL-NO-VF-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP24]], align 4, !alias.scope !32\\n ; UNROLL-NO-VF-NEXT:    [[TMP26:%.*]] = sdiv i32 [[TMP7]], [[TMP5]]\\n ; UNROLL-NO-VF-NEXT:    [[TMP27:%.*]] = sdiv i32 [[TMP25]], [[TMP26]]\\n ; UNROLL-NO-VF-NEXT:    br label [[PRED_SDIV_CONTINUE3]]\\n ; UNROLL-NO-VF:       pred.sdiv.continue3:\\n ; UNROLL-NO-VF-NEXT:    [[TMP28:%.*]] = phi i32 [ poison, [[PRED_SDIV_CONTINUE]] ], [ [[TMP26]], [[PRED_SDIV_IF2]] ]\\n ; UNROLL-NO-VF-NEXT:    [[TMP29:%.*]] = phi i32 [ poison, [[PRED_SDIV_CONTINUE]] ], [ [[TMP27]], [[PRED_SDIV_IF2]] ]\\n-; UNROLL-NO-VF-NEXT:    [[TMP30:%.*]] = xor i1 [[TMP10]], true, !dbg [[DBG34]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP31:%.*]] = xor i1 [[TMP11]], true, !dbg [[DBG34]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP32:%.*]] = select i1 [[TMP12]], i1 [[TMP30]], i1 false, !dbg [[DBG34]]\\n-; UNROLL-NO-VF-NEXT:    [[TMP33:%.*]] = select i1 [[TMP13]], i1 [[TMP31]], i1 false, !dbg [[DBG34]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP30:%.*]] = xor i1 [[TMP10]], true, !dbg [[DBG35]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP31:%.*]] = xor i1 [[TMP11]], true, !dbg [[DBG35]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP32:%.*]] = select i1 [[TMP12]], i1 [[TMP30]], i1 false, !dbg [[DBG35]]\\n+; UNROLL-NO-VF-NEXT:    [[TMP33:%.*]] = select i1 [[TMP13]], i1 [[TMP31]], i1 false, !dbg [[DBG35]]\\n ; UNROLL-NO-VF-NEXT:    [[PREDPHI:%.*]] = select i1 [[TMP32]], i32 [[TMP6]], i32 [[TMP23]]\\n ; UNROLL-NO-VF-NEXT:    [[PREDPHI4:%.*]] = select i1 [[TMP33]], i32 [[TMP7]], i32 [[TMP29]]\\n-; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI]], ptr [[TMP2]], align 4, !alias.scope !28, !noalias !31\\n-; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI4]], ptr [[TMP3]], align 4, !alias.scope !28, !noalias !31\\n+; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI]], ptr [[TMP2]], align 4, !alias.scope !29, !noalias !32\\n+; UNROLL-NO-VF-NEXT:    store i32 [[PREDPHI4]], ptr [[TMP3]], align 4, !alias.scope !29, !noalias !32\\n ; UNROLL-NO-VF-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; UNROLL-NO-VF-NEXT:    [[TMP34:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128\\n-; UNROLL-NO-VF-NEXT:    br i1 [[TMP34]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP35:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[TMP34]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP36:![0-9]+]]\\n ; UNROLL-NO-VF:       middle.block:\\n ; UNROLL-NO-VF-NEXT:    [[CMP_N:%.*]] = icmp eq i64 128, 128\\n ; UNROLL-NO-VF-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]\\n@@ -723,10 +723,10 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; UNROLL-NO-VF-NEXT:    [[LSD_B:%.*]] = load i32, ptr [[ISD_B]], align 4\\n ; UNROLL-NO-VF-NEXT:    [[PSD:%.*]] = add nsw i32 [[LSD]], 23\\n ; UNROLL-NO-VF-NEXT:    [[CMP1:%.*]] = icmp slt i32 [[LSD]], 100\\n-; UNROLL-NO-VF-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[CHECKBB:%.*]], !dbg [[DBG33]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[CHECKBB:%.*]], !dbg [[DBG34]]\\n ; UNROLL-NO-VF:       checkbb:\\n ; UNROLL-NO-VF-NEXT:    [[CMP2:%.*]] = icmp sge i32 [[LSD]], 200\\n-; UNROLL-NO-VF-NEXT:    br i1 [[CMP2]], label [[IF_THEN]], label [[IF_END]], !dbg [[DBG34]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[CMP2]], label [[IF_THEN]], label [[IF_END]], !dbg [[DBG35]]\\n ; UNROLL-NO-VF:       if.then:\\n ; UNROLL-NO-VF-NEXT:    [[SD1:%.*]] = sdiv i32 [[PSD]], [[LSD]]\\n ; UNROLL-NO-VF-NEXT:    [[RSD:%.*]] = sdiv i32 [[LSD_B]], [[SD1]]\\n@@ -736,7 +736,7 @@ define void @pr30172(ptr nocapture %asd, ptr nocapture %bsd) !dbg !5 {;\\n ; UNROLL-NO-VF-NEXT:    store i32 [[YSD_0]], ptr [[ISD]], align 4\\n ; UNROLL-NO-VF-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; UNROLL-NO-VF-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 128\\n-; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP36:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP37:![0-9]+]]\\n ;\\n entry:\\n   br label %for.body\\n@@ -817,7 +817,7 @@ define i32 @predicated_udiv_scalarized_operand(ptr %a, i1 %c, i32 %x, i64 %n) {\\n ; CHECK-NEXT:    [[TMP18]] = add <2 x i32> [[VEC_PHI]], [[PREDPHI]]\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP37:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP38:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.vector.reduce.add.v2i32(<2 x i32> [[TMP18]])\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX]], [[N_VEC]]\\n@@ -841,7 +841,7 @@ define i32 @predicated_udiv_scalarized_operand(ptr %a, i1 %c, i32 %x, i64 %n) {\\n ; CHECK-NEXT:    [[T6]] = add i32 [[R]], [[T5]]\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP38:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP39:![0-9]+]]\\n ; CHECK:       for.end:\\n ; CHECK-NEXT:    [[T7:%.*]] = phi i32 [ [[T6]], [[FOR_INC]] ], [ [[TMP20]], [[MIDDLE_BLOCK]] ]\\n ; CHECK-NEXT:    ret i32 [[T7]]\\n@@ -887,7 +887,7 @@ define i32 @predicated_udiv_scalarized_operand(ptr %a, i1 %c, i32 %x, i64 %n) {\\n ; UNROLL-NO-VF-NEXT:    [[TMP15]] = add i32 [[VEC_PHI1]], [[PREDPHI4]]\\n ; UNROLL-NO-VF-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n ; UNROLL-NO-VF-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; UNROLL-NO-VF-NEXT:    br i1 [[TMP16]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP37:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[TMP16]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP38:![0-9]+]]\\n ; UNROLL-NO-VF:       middle.block:\\n ; UNROLL-NO-VF-NEXT:    [[BIN_RDX:%.*]] = add i32 [[TMP15]], [[TMP14]]\\n ; UNROLL-NO-VF-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX]], [[N_VEC]]\\n@@ -911,7 +911,7 @@ define i32 @predicated_udiv_scalarized_operand(ptr %a, i1 %c, i32 %x, i64 %n) {\\n ; UNROLL-NO-VF-NEXT:    [[T6]] = add i32 [[R]], [[T5]]\\n ; UNROLL-NO-VF-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; UNROLL-NO-VF-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; UNROLL-NO-VF-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP38:![0-9]+]]\\n+; UNROLL-NO-VF-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP39:![0-9]+]]\\n ; UNROLL-NO-VF:       for.end:\\n ; UNROLL-NO-VF-NEXT:    [[T7:%.*]] = phi i32 [ [[T6]], [[FOR_INC]] ], [ [[BIN_RDX]], [[MIDDLE_BLOCK]] ]\\n ; UNROLL-NO-VF-NEXT:    ret i32 [[T7]]\"}, {\"sha\": \"4b41a32da1a959e192c3826bec7783205385468b\", \"filename\": \"llvm/test/Transforms/LoopVectorize/induction.ll\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 5, \"changes\": 10, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finduction.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finduction.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finduction.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -50,7 +50,7 @@ define void @multi_int_induction(ptr %A, i32 %N) {\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[LFTR_WIDEIV]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       for.end:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -91,7 +91,7 @@ define void @multi_int_induction(ptr %A, i32 %N) {\\n ; IND-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1\\n ; IND-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; IND-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[LFTR_WIDEIV]], [[N]]\\n-; IND-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; IND-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; IND:       for.end:\\n ; IND-NEXT:    ret void\\n ;\\n@@ -135,7 +135,7 @@ define void @multi_int_induction(ptr %A, i32 %N) {\\n ; UNROLL-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1\\n ; UNROLL-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; UNROLL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[LFTR_WIDEIV]], [[N]]\\n-; UNROLL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; UNROLL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; UNROLL:       for.end:\\n ; UNROLL-NEXT:    ret void\\n ;\\n@@ -184,7 +184,7 @@ define void @multi_int_induction(ptr %A, i32 %N) {\\n ; UNROLL-NO-IC-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1\\n ; UNROLL-NO-IC-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; UNROLL-NO-IC-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[LFTR_WIDEIV]], [[N]]\\n-; UNROLL-NO-IC-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; UNROLL-NO-IC-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; UNROLL-NO-IC:       for.end:\\n ; UNROLL-NO-IC-NEXT:    ret void\\n ;\\n@@ -228,7 +228,7 @@ define void @multi_int_induction(ptr %A, i32 %N) {\\n ; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1\\n ; INTERLEAVE-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[LFTR_WIDEIV]], [[N]]\\n-; INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; INTERLEAVE:       for.end:\\n ; INTERLEAVE-NEXT:    ret void\\n ;\"}, {\"sha\": \"a3633874790cc4278ac8216237dfcb48320c3c4b\", \"filename\": \"llvm/test/Transforms/LoopVectorize/interleaved-accesses.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finterleaved-accesses.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finterleaved-accesses.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finterleaved-accesses.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -55,7 +55,7 @@ define void @test_array_load2_store2(i32 %C, i32 %D) {\\n ; CHECK:       scalar.ph:\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK:       for.body:\\n-; CHECK-NEXT:    br i1 poison, label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    br i1 poison, label [[FOR_BODY]], label [[FOR_END]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       for.end:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"d10b8bf458dfd7d1878961198ee6df93d3893334\", \"filename\": \"llvm/test/Transforms/LoopVectorize/invariant-store-vectorization-2.ll\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 9, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization-2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization-2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization-2.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -74,7 +74,7 @@ define void @inv_val_store_to_inv_address_conditional_diff_values_ic(ptr %a, i64\\n ; CHECK-NEXT:    store i32 [[STOREVAL]], ptr [[A]], align 4\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP7:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP8:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_END]]\\n ; CHECK:       for.end:\\n@@ -146,11 +146,11 @@ define void @inv_val_store_to_inv_address_conditional_inv(ptr %a, i64 %n, ptr %b\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT]], ptr [[TMP3]], align 4, !alias.scope !8, !noalias !11\\n-; CHECK-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !alias.scope !11\\n+; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT]], ptr [[TMP3]], align 4, !alias.scope !9, !noalias !12\\n+; CHECK-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !alias.scope !12\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP14:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -171,7 +171,7 @@ define void @inv_val_store_to_inv_address_conditional_inv(ptr %a, i64 %n, ptr %b\\n ; CHECK-NEXT:    store i32 [[STOREVAL]], ptr [[A]], align 4\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP14:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP15:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_END]]\\n ; CHECK:       for.end:\\n@@ -231,13 +231,13 @@ define i32 @variant_val_store_to_inv_address(ptr %a, i64 %n, ptr %b, i32 %k) {\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP3:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP1]], align 8, !alias.scope !15\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP1]], align 8, !alias.scope !16\\n ; CHECK-NEXT:    [[TMP2:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i64 3\\n-; CHECK-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !alias.scope !18, !noalias !15\\n+; CHECK-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !alias.scope !19, !noalias !16\\n ; CHECK-NEXT:    [[TMP3]] = add <4 x i32> [[VEC_PHI]], [[WIDE_LOAD]]\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP20:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP21:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <4 x i32> [ [[TMP3]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> [[DOTLCSSA]])\\n@@ -256,7 +256,7 @@ define i32 @variant_val_store_to_inv_address(ptr %a, i64 %n, ptr %b, i32 %k) {\\n ; CHECK-NEXT:    [[I3]] = add i32 [[I0]], [[I2]]\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP21:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP22:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    [[I3_LCSSA:%.*]] = phi i32 [ [[I3]], [[FOR_BODY]] ]\\n ; CHECK-NEXT:    br label [[FOR_END]]\"}, {\"sha\": \"6c60ae89ef074fcf832f167909d9d0b6d4d81e82\", \"filename\": \"llvm/test/Transforms/LoopVectorize/invariant-store-vectorization.ll\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 16, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Finvariant-store-vectorization.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -63,7 +63,7 @@ define i32 @inv_val_store_to_inv_address_with_reduction(ptr %a, i64 %n, ptr %b)\\n ; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP7:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP8:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    [[I3_LCSSA:%.*]] = phi i32 [ [[I3]], [[FOR_BODY]] ]\\n ; CHECK-NEXT:    br label [[FOR_END]]\\n@@ -115,11 +115,11 @@ define void @inv_val_store_to_inv_address(ptr %a, i64 %n, ptr %b) {\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !8, !noalias !11\\n-; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT]], ptr [[TMP1]], align 4, !alias.scope !11\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !9, !noalias !12\\n+; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT]], ptr [[TMP1]], align 4, !alias.scope !12\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP2]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP2]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP14:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -133,7 +133,7 @@ define void @inv_val_store_to_inv_address(ptr %a, i64 %n, ptr %b) {\\n ; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[I1]], align 4\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP14:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP15:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_END]]\\n ; CHECK:       for.end:\\n@@ -193,36 +193,36 @@ define void @inv_val_store_to_inv_address_conditional(ptr %a, i64 %n, ptr %b, i3\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE10:%.*]] ]\\n ; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP1]], align 8, !alias.scope !15, !noalias !18\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP1]], align 8, !alias.scope !16, !noalias !19\\n ; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq <4 x i32> [[WIDE_LOAD]], [[BROADCAST_SPLAT]]\\n-; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT4]], ptr [[TMP1]], align 4, !alias.scope !15, !noalias !18\\n+; CHECK-NEXT:    store <4 x i32> [[BROADCAST_SPLAT4]], ptr [[TMP1]], align 4, !alias.scope !16, !noalias !19\\n ; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <4 x i1> [[TMP2]], i64 0\\n ; CHECK-NEXT:    br i1 [[TMP3]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]\\n ; CHECK:       pred.store.if:\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !18\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !19\\n ; CHECK-NEXT:    br label [[PRED_STORE_CONTINUE]]\\n ; CHECK:       pred.store.continue:\\n ; CHECK-NEXT:    [[TMP4:%.*]] = extractelement <4 x i1> [[TMP2]], i64 1\\n ; CHECK-NEXT:    br i1 [[TMP4]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6:%.*]]\\n ; CHECK:       pred.store.if5:\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !18\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !19\\n ; CHECK-NEXT:    br label [[PRED_STORE_CONTINUE6]]\\n ; CHECK:       pred.store.continue6:\\n ; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x i1> [[TMP2]], i64 2\\n ; CHECK-NEXT:    br i1 [[TMP5]], label [[PRED_STORE_IF7:%.*]], label [[PRED_STORE_CONTINUE8:%.*]]\\n ; CHECK:       pred.store.if7:\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !18\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !19\\n ; CHECK-NEXT:    br label [[PRED_STORE_CONTINUE8]]\\n ; CHECK:       pred.store.continue8:\\n ; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <4 x i1> [[TMP2]], i64 3\\n ; CHECK-NEXT:    br i1 [[TMP6]], label [[PRED_STORE_IF9:%.*]], label [[PRED_STORE_CONTINUE10]]\\n ; CHECK:       pred.store.if9:\\n-; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !18\\n+; CHECK-NEXT:    store i32 [[NTRUNC]], ptr [[A]], align 4, !alias.scope !19\\n ; CHECK-NEXT:    br label [[PRED_STORE_CONTINUE10]]\\n ; CHECK:       pred.store.continue10:\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP7]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP20:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP7]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP21:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[SMAX2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n@@ -242,7 +242,7 @@ define void @inv_val_store_to_inv_address_conditional(ptr %a, i64 %n, ptr %b, i3\\n ; CHECK:       latch:\\n ; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1\\n ; CHECK-NEXT:    [[COND:%.*]] = icmp slt i64 [[I_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP21:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[COND]], label [[FOR_BODY]], label [[FOR_END_LOOPEXIT:%.*]], !llvm.loop [[LOOP22:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_END]]\\n ; CHECK:       for.end:\\n@@ -390,12 +390,12 @@ define i32 @multiple_uniform_stores(ptr nocapture %var1, ptr nocapture readonly\\n ; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i32> [ [[TMP13]], [[VECTOR_PH]] ], [ [[TMP16:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = add i64 [[INDEX]], [[TMP2]]\\n ; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32, ptr [[VAR2]], i64 [[OFFSET_IDX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP14]], align 4, !alias.scope !22\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP14]], align 4, !alias.scope !23\\n ; CHECK-NEXT:    [[TMP15:%.*]] = add <4 x i32> [[VEC_PHI]], [[WIDE_LOAD]]\\n ; CHECK-NEXT:    [[TMP16]] = add <4 x i32> [[TMP15]], <i32 1, i32 1, i32 1, i32 1>\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <4 x i32> [ [[TMP16]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> [[DOTLCSSA]])\\n@@ -417,7 +417,7 @@ define i32 @multiple_uniform_stores(ptr nocapture %var1, ptr nocapture readonly\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[LFTR_WIDEIV]], [[ITR]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_INC8_LOOPEXIT_LOOPEXIT:%.*]], label [[FOR_BODY3]], !llvm.loop [[LOOP26:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_INC8_LOOPEXIT_LOOPEXIT:%.*]], label [[FOR_BODY3]], !llvm.loop [[LOOP27:![0-9]+]]\\n ; CHECK:       for.inc8.loopexit.loopexit:\\n ; CHECK-NEXT:    br label [[FOR_INC8_LOOPEXIT]]\\n ; CHECK:       for.inc8.loopexit:\"}, {\"sha\": \"0515e6f07bf015a23e66c8ecfe04a72d39b6ea70\", \"filename\": \"llvm/test/Transforms/LoopVectorize/memdep-fold-tail.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fmemdep-fold-tail.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fmemdep-fold-tail.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fmemdep-fold-tail.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -67,7 +67,7 @@ define void @maxvf3() {\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <2 x i32> [[VEC_IND]], <i32 2, i32 2>\\n ; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], 16\\n-; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop !0\\n+; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n ; CHECK:       scalar.ph:\\n@@ -82,7 +82,7 @@ define void @maxvf3() {\\n ; CHECK-NEXT:    store i8 7, ptr [[AJP3]], align 8\\n ; CHECK-NEXT:    [[J_NEXT]] = add nuw nsw i32 [[J]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[J_NEXT]], 15\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop !2\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       for.end:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"781f510abfcd0385a7d728c734ecd4c1bb5f7aad\", \"filename\": \"llvm/test/Transforms/LoopVectorize/optsize.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Foptsize.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Foptsize.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Foptsize.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -253,7 +253,7 @@ define void @stride1(ptr noalias %B, i32 %BStride) optsize {\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <2 x i32> [[VEC_IND]], <i32 2, i32 2>\\n ; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i32 [[INDEX_NEXT]], 1026\\n-; CHECK-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop !21\\n+; CHECK-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]\\n ; CHECK:       scalar.ph:\"}, {\"sha\": \"38ab07b28b701de0ab7b0c86c80750f45d79703d\", \"filename\": \"llvm/test/Transforms/LoopVectorize/pointer-select-runtime-checks.ll\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 21, \"changes\": 42, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fpointer-select-runtime-checks.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fpointer-select-runtime-checks.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fpointer-select-runtime-checks.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -51,7 +51,7 @@ define void @test1_select_invariant(ptr %src.1, ptr %src.2, ptr %dst, i1 %c, i8\\n ; CHECK-NEXT:    store i8 [[L_1]], ptr [[GEP_DST]], align 2\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i8 [[IV]], 1\\n ; CHECK-NEXT:    [[EC:%.*]] = icmp eq i8 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP7:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP8:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -118,7 +118,7 @@ define void @test_loop_dependent_select1(ptr %src.1, ptr %src.2, ptr %dst, i1 %c\\n ; CHECK-NEXT:    store i8 [[TMP12]], ptr [[TMP14]], align 2\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP15]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP15]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[EXIT:%.*]], label [[SCALAR_PH]]\\n@@ -135,7 +135,7 @@ define void @test_loop_dependent_select1(ptr %src.1, ptr %src.2, ptr %dst, i1 %c\\n ; CHECK-NEXT:    store i8 [[L_1]], ptr [[GEP_DST]], align 2\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i8 [[IV]], 1\\n ; CHECK-NEXT:    [[EC:%.*]] = icmp eq i8 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP9:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP10:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -200,15 +200,15 @@ define void @test_loop_dependent_select2(ptr %src.1, ptr %src.2, ptr %dst, i8 %n\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i8 [[INDUCTION6]], [[X]]\\n ; CHECK-NEXT:    [[TMP8:%.*]] = select i1 [[TMP6]], ptr [[SRC_1]], ptr [[SRC_2]]\\n ; CHECK-NEXT:    [[TMP9:%.*]] = select i1 [[TMP7]], ptr [[SRC_1]], ptr [[SRC_2]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !10\\n-; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !10\\n+; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !11\\n+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !11\\n ; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION]]\\n ; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION6]]\\n-; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !13, !noalias !15\\n-; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !13, !noalias !15\\n+; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !14, !noalias !16\\n+; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !14, !noalias !16\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP17:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP18:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[EXIT:%.*]], label [[SCALAR_PH]]\\n@@ -224,7 +224,7 @@ define void @test_loop_dependent_select2(ptr %src.1, ptr %src.2, ptr %dst, i8 %n\\n ; CHECK-NEXT:    store i8 [[L_1]], ptr [[GEP_DST]], align 2\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i8 [[IV]], 1\\n ; CHECK-NEXT:    [[EC:%.*]] = icmp eq i8 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP18:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP19:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -285,15 +285,15 @@ define void @test_loop_dependent_select_first_ptr_noundef(ptr noundef %src.1, pt\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i8 [[INDUCTION6]], [[X]]\\n ; CHECK-NEXT:    [[TMP8:%.*]] = select i1 [[TMP6]], ptr [[SRC_1]], ptr [[SRC_2]]\\n ; CHECK-NEXT:    [[TMP9:%.*]] = select i1 [[TMP7]], ptr [[SRC_1]], ptr [[SRC_2]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !19\\n-; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !19\\n+; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !20\\n+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !20\\n ; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION]]\\n ; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION6]]\\n-; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !22, !noalias !24\\n-; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !22, !noalias !24\\n+; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !23, !noalias !25\\n+; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !23, !noalias !25\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP26:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP27:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[EXIT:%.*]], label [[SCALAR_PH]]\\n@@ -309,7 +309,7 @@ define void @test_loop_dependent_select_first_ptr_noundef(ptr noundef %src.1, pt\\n ; CHECK-NEXT:    store i8 [[L_1]], ptr [[GEP_DST]], align 2\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i8 [[IV]], 1\\n ; CHECK-NEXT:    [[EC:%.*]] = icmp eq i8 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP27:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP28:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -370,15 +370,15 @@ define void @test_loop_dependent_select_second_ptr_noundef(ptr %src.1, ptr nound\\n ; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i8 [[INDUCTION6]], [[X]]\\n ; CHECK-NEXT:    [[TMP8:%.*]] = select i1 [[TMP6]], ptr [[SRC_1]], ptr [[SRC_2]]\\n ; CHECK-NEXT:    [[TMP9:%.*]] = select i1 [[TMP7]], ptr [[SRC_1]], ptr [[SRC_2]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !28\\n-; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !28\\n+; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 8, !alias.scope !29\\n+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 8, !alias.scope !29\\n ; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION]]\\n ; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[DST]], i8 [[INDUCTION6]]\\n-; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !31, !noalias !33\\n-; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !31, !noalias !33\\n+; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP12]], align 2, !alias.scope !32, !noalias !34\\n+; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP13]], align 2, !alias.scope !32, !noalias !34\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2\\n ; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP35:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP36:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP2]], [[N_VEC]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[EXIT:%.*]], label [[SCALAR_PH]]\\n@@ -394,7 +394,7 @@ define void @test_loop_dependent_select_second_ptr_noundef(ptr %src.1, ptr nound\\n ; CHECK-NEXT:    store i8 [[L_1]], ptr [[GEP_DST]], align 2\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i8 [[IV]], 1\\n ; CHECK-NEXT:    [[EC:%.*]] = icmp eq i8 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP36:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP37:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"00c3baed26ad21af1bb3ae4b74268a712e5ca640\", \"filename\": \"llvm/test/Transforms/LoopVectorize/reduction-with-invariant-store.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 8, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Freduction-with-invariant-store.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Freduction-with-invariant-store.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Freduction-with-invariant-store.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -188,10 +188,10 @@ for.end:\\n ; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[TMP1]]\\n ; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[TMP2]]\\n ; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[TMP3]]\\n-; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP4]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[TMP5]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP6]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[TMP7]], align 4, !alias.scope !11\\n+; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP4]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[TMP5]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP6]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[TMP7]], align 4, !alias.scope !12\\n ; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <4 x i32> poison, i32 [[TMP8]], i32 0\\n ; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <4 x i32> [[TMP12]], i32 [[TMP9]], i32 1\\n ; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x i32> [[TMP13]], i32 [[TMP10]], i32 2\\n@@ -206,10 +206,10 @@ for.end:\\n ; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[TMP22]]\\n ; CHECK-NEXT:    [[TMP24:%.*]] = extractelement <4 x i64> [[TMP17]], i32 3\\n ; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[TMP24]]\\n-; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[TMP19]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP27:%.*]] = load i32, i32* [[TMP21]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[TMP23]], align 4, !alias.scope !11\\n-; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[TMP25]], align 4, !alias.scope !11\\n+; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[TMP19]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP27:%.*]] = load i32, i32* [[TMP21]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[TMP23]], align 4, !alias.scope !12\\n+; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[TMP25]], align 4, !alias.scope !12\\n ; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <4 x i32> poison, i32 [[TMP26]], i32 0\\n ; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <4 x i32> [[TMP30]], i32 [[TMP27]], i32 1\\n ; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <4 x i32> [[TMP31]], i32 [[TMP28]], i32 2\"}, {\"sha\": \"4342d681b4e3b9e1a8c98ab9112040c39ab661c8\", \"filename\": \"llvm/test/Transforms/LoopVectorize/runtime-check.ll\", \"status\": \"modified\", \"additions\": 39, \"deletions\": 9, \"changes\": 48, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fruntime-check.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -58,11 +58,11 @@ define i32 @foo(float* nocapture %a, float* nocapture %b, i32 %n) nounwind uwtab\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1, !dbg [[DBG9]]\\n ; CHECK-NEXT:    [[LFTR_WIDEIV:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32, !dbg [[DBG9]]\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[LFTR_WIDEIV]], [[N]], !dbg [[DBG9]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !dbg [[DBG9]], !llvm.loop [[LOOP12:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !dbg [[DBG9]], !llvm.loop [[LOOP13:![0-9]+]]\\n ; CHECK:       for.end.loopexit:\\n-; CHECK-NEXT:    br label [[FOR_END]], !dbg [[DBG13:![0-9]+]]\\n+; CHECK-NEXT:    br label [[FOR_END]], !dbg [[DBG14:![0-9]+]]\\n ; CHECK:       for.end:\\n-; CHECK-NEXT:    ret i32 undef, !dbg [[DBG13]]\\n+; CHECK-NEXT:    ret i32 undef, !dbg [[DBG14]]\\n ;\\n ; FORCED_OPTSIZE-LABEL: @foo(\\n ; FORCED_OPTSIZE-NEXT:  entry:\\n@@ -135,18 +135,18 @@ define void @test_runtime_check(float* %a, float %b, i64 %offset, i64 %offset2,\\n ; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], [[OFFSET]]\\n ; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds float, float* [[A]], i64 [[TMP2]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast float* [[TMP3]] to <4 x float>*\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x float>, <4 x float>* [[TMP4]], align 4, !alias.scope !14, !noalias !17\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x float>, <4 x float>* [[TMP4]], align 4, !alias.scope !15, !noalias !18\\n ; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], [[OFFSET2]]\\n ; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, float* [[A]], i64 [[TMP5]]\\n ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast float* [[TMP6]] to <4 x float>*\\n-; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x float>, <4 x float>* [[TMP7]], align 4, !alias.scope !17\\n+; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x float>, <4 x float>* [[TMP7]], align 4, !alias.scope !18\\n ; CHECK-NEXT:    [[TMP8:%.*]] = fmul fast <4 x float> [[BROADCAST_SPLAT]], [[WIDE_LOAD8]]\\n ; CHECK-NEXT:    [[TMP9:%.*]] = fadd fast <4 x float> [[WIDE_LOAD]], [[TMP8]]\\n ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast float* [[TMP3]] to <4 x float>*\\n-; CHECK-NEXT:    store <4 x float> [[TMP9]], <4 x float>* [[TMP10]], align 4, !alias.scope !14, !noalias !17\\n+; CHECK-NEXT:    store <4 x float> [[TMP9]], <4 x float>* [[TMP10]], align 4, !alias.scope !15, !noalias !18\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n-; CHECK-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP19:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP20:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[N]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[LOOPEXIT:%.*]], label [[SCALAR_PH]]\\n@@ -166,7 +166,7 @@ define void @test_runtime_check(float* %a, float %b, i64 %offset, i64 %offset2,\\n ; CHECK-NEXT:    store float [[AD]], float* [[ARR_IDX]], align 4\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[IV_NEXT]], [[N]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND]], label [[LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP20:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND]], label [[LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP21:![0-9]+]]\\n ; CHECK:       loopexit:\\n ; CHECK-NEXT:    ret void\\n ;\\n@@ -304,9 +304,37 @@ loopexit:\\n   ret void\\n }\\n \\n-; CHECK: !9 = !DILocation(line: 101, column: 1, scope: !{{.*}})\\n \\n define dso_local void @forced_optsize(i64* noalias nocapture readonly %x_p, i64* noalias nocapture readonly %y_p, i64* noalias nocapture %z_p) minsize optsize {\\n+; CHECK-LABEL: @forced_optsize(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]\\n+; CHECK:       vector.ph:\\n+; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n+; CHECK:       vector.body:\\n+; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i64, i64* [[X_P:%.*]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64* [[TMP0]] to <2 x i64>*\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i64>, <2 x i64>* [[TMP1]], align 8\\n+; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i64, i64* [[Y_P:%.*]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64* [[TMP2]] to <2 x i64>*\\n+; CHECK-NEXT:    [[WIDE_LOAD1:%.*]] = load <2 x i64>, <2 x i64>* [[TMP3]], align 8\\n+; CHECK-NEXT:    [[TMP4:%.*]] = add nsw <2 x i64> [[WIDE_LOAD1]], [[WIDE_LOAD]]\\n+; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i64, i64* [[Z_P:%.*]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64* [[TMP5]] to <2 x i64>*\\n+; CHECK-NEXT:    store <2 x i64> [[TMP4]], <2 x i64>* [[TMP6]], align 8\\n+; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\\n+; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128\\n+; CHECK-NEXT:    br i1 [[TMP7]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP22:![0-9]+]]\\n+; CHECK:       middle.block:\\n+; CHECK-NEXT:    br i1 true, label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]\\n+; CHECK:       scalar.ph:\\n+; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n+; CHECK:       for.cond.cleanup:\\n+; CHECK-NEXT:    ret void\\n+; CHECK:       for.body:\\n+; CHECK-NEXT:    br i1 poison, label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP23:![0-9]+]]\\n+;\\n ; FORCED_OPTSIZE-LABEL: @forced_optsize(\\n ; FORCED_OPTSIZE-NEXT:  entry:\\n ; FORCED_OPTSIZE-NEXT:    br label [[FOR_BODY:%.*]]\\n@@ -345,6 +373,8 @@ for.body:\\n   br i1 %exitcond, label %for.cond.cleanup, label %for.body, !llvm.loop !12\\n }\\n \\n+; CHECK: !9 = !DILocation(line: 101, column: 1, scope: !{{.*}})\\n+\\n !llvm.module.flags = !{!0, !1}\\n !llvm.dbg.cu = !{!9}\\n !0 = !{i32 2, !\\\"Dwarf Version\\\", i32 4}\"}, {\"sha\": \"e535f8d4f5ff9efd5ee9918539d52d630c2eda9d\", \"filename\": \"llvm/test/Transforms/LoopVectorize/vectorize-once.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvectorize-once.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvectorize-once.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvectorize-once.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -69,10 +69,10 @@ _ZSt10accumulateIPiiET0_T_S2_S1_.exit:            ; preds = %for.body.i, %entry\\n \\n attributes #0 = { nounwind readonly ssp uwtable \\\"fp-contract-model\\\"=\\\"standard\\\" \\\"frame-pointer\\\"=\\\"non-leaf\\\" \\\"realign-stack\\\" \\\"relocation-model\\\"=\\\"pic\\\" \\\"ssp-buffers-size\\\"=\\\"8\\\" }\\n \\n-; CHECK:      [[VEC_LOOP1]] = distinct !{[[VEC_LOOP1]], [[MD_IS_VEC:![0-9]+]]}\\n+; CHECK:      [[VEC_LOOP1]] = distinct !{[[VEC_LOOP1]], [[MD_IS_VEC:![0-9]+]], [[MD_RT_UNROLL_DIS:![0-9]+]]}\\n ; CHECK-NEXT: [[MD_IS_VEC:![0-9]+]] = !{!\\\"llvm.loop.isvectorized\\\", i32 1}\\n-; CHECK-NEXT: [[SCALAR_LOOP1]] = distinct !{[[SCALAR_LOOP1]], [[MD_RT_UNROLL_DIS:![0-9]+]], [[MD_IS_VEC]]}\\n ; CHECK-NEXT: [[MD_RT_UNROLL_DIS]] = !{!\\\"llvm.loop.unroll.runtime.disable\\\"}\\n+; CHECK-NEXT: [[SCALAR_LOOP1]] = distinct !{[[SCALAR_LOOP1]], [[MD_RT_UNROLL_DIS:![0-9]+]], [[MD_IS_VEC]]}\\n ; CHECK-NEXT: [[SCALAR_LOOP2]] = distinct !{[[SCALAR_LOOP2]], [[VEC_WIDTH_1:![0-9]+]]}\\n ; CHECK-NEXT: [[VEC_WIDTH_1]] = !{!\\\"llvm.loop.vectorize.width\\\", i32 1}\\n \"}, {\"sha\": \"c25d68c9b67ad6a6301e9098d19886082bbd4141\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/AArch64/hoisting-sinking-required-for-vectorization.ll\", \"status\": \"modified\", \"additions\": 7, \"deletions\": 7, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FAArch64%2Fhoisting-sinking-required-for-vectorization.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FAArch64%2Fhoisting-sinking-required-for-vectorization.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FAArch64%2Fhoisting-sinking-required-for-vectorization.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -83,7 +83,7 @@ define void @loop(ptr %X, ptr %Y) {\\n ; CHECK-NEXT:    store double [[RETVAL_0_I]], ptr [[ARRAYIDX2]], align 8\\n ; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_04]], 1\\n ; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i32 [[I_04]], 19999\\n-; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP]], !llvm.loop [[LOOP3:![0-9]+]]\\n ;\\n entry:\\n   %X.addr = alloca ptr, align 8\\n@@ -151,19 +151,19 @@ define void @loop2(ptr %A, ptr %B, ptr %C, float %x) {\\n ; CHECK:       vector.body:\\n ; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n ; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP0]], align 4, !alias.scope !3\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP0]], align 4, !alias.scope !4\\n ; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq <4 x i32> [[WIDE_LOAD]], <i32 20, i32 20, i32 20, i32 20>\\n ; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x float>, ptr [[TMP2]], align 4, !alias.scope !6\\n+; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x float>, ptr [[TMP2]], align 4, !alias.scope !7\\n ; CHECK-NEXT:    [[TMP3:%.*]] = fmul <4 x float> [[WIDE_LOAD7]], [[BROADCAST_SPLAT]]\\n ; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr float, ptr [[B]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x float>, ptr [[TMP4]], align 4, !alias.scope !8, !noalias !10\\n+; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x float>, ptr [[TMP4]], align 4, !alias.scope !9, !noalias !11\\n ; CHECK-NEXT:    [[TMP5:%.*]] = select <4 x i1> [[TMP1]], <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> [[WIDE_LOAD8]]\\n ; CHECK-NEXT:    [[PREDPHI:%.*]] = fadd <4 x float> [[TMP3]], [[TMP5]]\\n-; CHECK-NEXT:    store <4 x float> [[PREDPHI]], ptr [[TMP4]], align 4, !alias.scope !8, !noalias !10\\n+; CHECK-NEXT:    store <4 x float> [[PREDPHI]], ptr [[TMP4]], align 4, !alias.scope !9, !noalias !11\\n ; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n ; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq i64 [[INDEX_NEXT]], 10000\\n-; CHECK-NEXT:    br i1 [[TMP6]], label [[EXIT:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[TMP6]], label [[EXIT:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n ; CHECK:       loop.body:\\n ; CHECK-NEXT:    [[IV1:%.*]] = phi i64 [ [[IV_NEXT:%.*]], [[LOOP_LATCH:%.*]] ], [ 0, [[ENTRY:%.*]] ]\\n ; CHECK-NEXT:    [[C_GEP:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[IV1]]\\n@@ -183,7 +183,7 @@ define void @loop2(ptr %A, ptr %B, ptr %C, float %x) {\\n ; CHECK-NEXT:    store float [[ADD_SINK]], ptr [[B_GEP_0]], align 4\\n ; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV1]], 1\\n ; CHECK-NEXT:    [[CMP_0:%.*]] = icmp ult i64 [[IV1]], 9999\\n-; CHECK-NEXT:    br i1 [[CMP_0]], label [[LOOP_BODY]], label [[EXIT]], !llvm.loop [[LOOP12:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[CMP_0]], label [[LOOP_BODY]], label [[EXIT]], !llvm.loop [[LOOP13:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"80f96b17c9083e4f30d3be24f8a14cba6bd76a8f\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/X86/excessive-unrolling.ll\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 161, \"changes\": 182, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fexcessive-unrolling.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fexcessive-unrolling.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fexcessive-unrolling.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -176,166 +176,26 @@ define void @test_runtime_trip_count(i32 %N) {\\n ; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[FOR_BODY_PREHEADER7:%.*]], label [[VECTOR_PH:%.*]]\\n ; CHECK:       vector.ph:\\n ; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 4294967292\\n-; CHECK-NEXT:    [[TMP0:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -4\\n-; CHECK-NEXT:    [[TMP1:%.*]] = lshr i64 [[TMP0]], 2\\n-; CHECK-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[TMP1]], 1\\n-; CHECK-NEXT:    [[XTRAITER:%.*]] = and i64 [[TMP2]], 7\\n-; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], 28\\n-; CHECK-NEXT:    br i1 [[TMP3]], label [[MIDDLE_BLOCK_UNR_LCSSA:%.*]], label [[VECTOR_PH_NEW:%.*]]\\n-; CHECK:       vector.ph.new:\\n-; CHECK-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[TMP2]], -8\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; CHECK:       vector.body:\\n-; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[INDEX_NEXT_7:%.*]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[NITER_NEXT_7:%.*]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x double>, ptr [[TMP4]], align 16\\n-; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds double, ptr [[TMP4]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <2 x double>, ptr [[TMP5]], align 16\\n-; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5:%.*]] = load <2 x double>, ptr [[TMP6]], align 16\\n+; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX]]\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x double>, ptr [[TMP0]], align 16\\n+; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i64 2\\n+; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <2 x double>, ptr [[TMP1]], align 16\\n+; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX]]\\n+; CHECK-NEXT:    [[WIDE_LOAD5:%.*]] = load <2 x double>, ptr [[TMP2]], align 16\\n+; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i64 2\\n+; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <2 x double>, ptr [[TMP3]], align 16\\n+; CHECK-NEXT:    [[TMP4:%.*]] = fadd <2 x double> [[WIDE_LOAD]], [[WIDE_LOAD5]]\\n+; CHECK-NEXT:    [[TMP5:%.*]] = fadd <2 x double> [[WIDE_LOAD4]], [[WIDE_LOAD6]]\\n+; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX]]\\n+; CHECK-NEXT:    store <2 x double> [[TMP4]], ptr [[TMP6]], align 16\\n ; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds double, ptr [[TMP6]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <2 x double>, ptr [[TMP7]], align 16\\n-; CHECK-NEXT:    [[TMP8:%.*]] = fadd <2 x double> [[WIDE_LOAD]], [[WIDE_LOAD5]]\\n-; CHECK-NEXT:    [[TMP9:%.*]] = fadd <2 x double> [[WIDE_LOAD4]], [[WIDE_LOAD6]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP8]], ptr [[TMP10]], align 16\\n-; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP10]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP9]], ptr [[TMP11]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT:%.*]] = or i64 [[INDEX]], 4\\n-; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_1:%.*]] = load <2 x double>, ptr [[TMP12]], align 16\\n-; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[TMP12]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_1:%.*]] = load <2 x double>, ptr [[TMP13]], align 16\\n-; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_1:%.*]] = load <2 x double>, ptr [[TMP14]], align 16\\n-; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds double, ptr [[TMP14]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_1:%.*]] = load <2 x double>, ptr [[TMP15]], align 16\\n-; CHECK-NEXT:    [[TMP16:%.*]] = fadd <2 x double> [[WIDE_LOAD_1]], [[WIDE_LOAD5_1]]\\n-; CHECK-NEXT:    [[TMP17:%.*]] = fadd <2 x double> [[WIDE_LOAD4_1]], [[WIDE_LOAD6_1]]\\n-; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP16]], ptr [[TMP18]], align 16\\n-; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds double, ptr [[TMP18]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP17]], ptr [[TMP19]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_1:%.*]] = or i64 [[INDEX]], 8\\n-; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_1]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_2:%.*]] = load <2 x double>, ptr [[TMP20]], align 16\\n-; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds double, ptr [[TMP20]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_2:%.*]] = load <2 x double>, ptr [[TMP21]], align 16\\n-; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_1]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_2:%.*]] = load <2 x double>, ptr [[TMP22]], align 16\\n-; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[TMP22]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_2:%.*]] = load <2 x double>, ptr [[TMP23]], align 16\\n-; CHECK-NEXT:    [[TMP24:%.*]] = fadd <2 x double> [[WIDE_LOAD_2]], [[WIDE_LOAD5_2]]\\n-; CHECK-NEXT:    [[TMP25:%.*]] = fadd <2 x double> [[WIDE_LOAD4_2]], [[WIDE_LOAD6_2]]\\n-; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_1]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP24]], ptr [[TMP26]], align 16\\n-; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds double, ptr [[TMP26]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP25]], ptr [[TMP27]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_2:%.*]] = or i64 [[INDEX]], 12\\n-; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_2]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_3:%.*]] = load <2 x double>, ptr [[TMP28]], align 16\\n-; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds double, ptr [[TMP28]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_3:%.*]] = load <2 x double>, ptr [[TMP29]], align 16\\n-; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_2]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_3:%.*]] = load <2 x double>, ptr [[TMP30]], align 16\\n-; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds double, ptr [[TMP30]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_3:%.*]] = load <2 x double>, ptr [[TMP31]], align 16\\n-; CHECK-NEXT:    [[TMP32:%.*]] = fadd <2 x double> [[WIDE_LOAD_3]], [[WIDE_LOAD5_3]]\\n-; CHECK-NEXT:    [[TMP33:%.*]] = fadd <2 x double> [[WIDE_LOAD4_3]], [[WIDE_LOAD6_3]]\\n-; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_2]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP32]], ptr [[TMP34]], align 16\\n-; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr inbounds double, ptr [[TMP34]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP33]], ptr [[TMP35]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_3:%.*]] = or i64 [[INDEX]], 16\\n-; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_3]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_4:%.*]] = load <2 x double>, ptr [[TMP36]], align 16\\n-; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds double, ptr [[TMP36]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_4:%.*]] = load <2 x double>, ptr [[TMP37]], align 16\\n-; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_3]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_4:%.*]] = load <2 x double>, ptr [[TMP38]], align 16\\n-; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds double, ptr [[TMP38]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_4:%.*]] = load <2 x double>, ptr [[TMP39]], align 16\\n-; CHECK-NEXT:    [[TMP40:%.*]] = fadd <2 x double> [[WIDE_LOAD_4]], [[WIDE_LOAD5_4]]\\n-; CHECK-NEXT:    [[TMP41:%.*]] = fadd <2 x double> [[WIDE_LOAD4_4]], [[WIDE_LOAD6_4]]\\n-; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_3]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP40]], ptr [[TMP42]], align 16\\n-; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr inbounds double, ptr [[TMP42]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP41]], ptr [[TMP43]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_4:%.*]] = or i64 [[INDEX]], 20\\n-; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_4]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_5:%.*]] = load <2 x double>, ptr [[TMP44]], align 16\\n-; CHECK-NEXT:    [[TMP45:%.*]] = getelementptr inbounds double, ptr [[TMP44]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_5:%.*]] = load <2 x double>, ptr [[TMP45]], align 16\\n-; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_4]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_5:%.*]] = load <2 x double>, ptr [[TMP46]], align 16\\n-; CHECK-NEXT:    [[TMP47:%.*]] = getelementptr inbounds double, ptr [[TMP46]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_5:%.*]] = load <2 x double>, ptr [[TMP47]], align 16\\n-; CHECK-NEXT:    [[TMP48:%.*]] = fadd <2 x double> [[WIDE_LOAD_5]], [[WIDE_LOAD5_5]]\\n-; CHECK-NEXT:    [[TMP49:%.*]] = fadd <2 x double> [[WIDE_LOAD4_5]], [[WIDE_LOAD6_5]]\\n-; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_4]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP48]], ptr [[TMP50]], align 16\\n-; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds double, ptr [[TMP50]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP49]], ptr [[TMP51]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_5:%.*]] = or i64 [[INDEX]], 24\\n-; CHECK-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_5]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_6:%.*]] = load <2 x double>, ptr [[TMP52]], align 16\\n-; CHECK-NEXT:    [[TMP53:%.*]] = getelementptr inbounds double, ptr [[TMP52]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_6:%.*]] = load <2 x double>, ptr [[TMP53]], align 16\\n-; CHECK-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_5]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_6:%.*]] = load <2 x double>, ptr [[TMP54]], align 16\\n-; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds double, ptr [[TMP54]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_6:%.*]] = load <2 x double>, ptr [[TMP55]], align 16\\n-; CHECK-NEXT:    [[TMP56:%.*]] = fadd <2 x double> [[WIDE_LOAD_6]], [[WIDE_LOAD5_6]]\\n-; CHECK-NEXT:    [[TMP57:%.*]] = fadd <2 x double> [[WIDE_LOAD4_6]], [[WIDE_LOAD6_6]]\\n-; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_5]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP56]], ptr [[TMP58]], align 16\\n-; CHECK-NEXT:    [[TMP59:%.*]] = getelementptr inbounds double, ptr [[TMP58]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP57]], ptr [[TMP59]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_6:%.*]] = or i64 [[INDEX]], 28\\n-; CHECK-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_NEXT_6]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_7:%.*]] = load <2 x double>, ptr [[TMP60]], align 16\\n-; CHECK-NEXT:    [[TMP61:%.*]] = getelementptr inbounds double, ptr [[TMP60]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_7:%.*]] = load <2 x double>, ptr [[TMP61]], align 16\\n-; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_NEXT_6]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_7:%.*]] = load <2 x double>, ptr [[TMP62]], align 16\\n-; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds double, ptr [[TMP62]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_7:%.*]] = load <2 x double>, ptr [[TMP63]], align 16\\n-; CHECK-NEXT:    [[TMP64:%.*]] = fadd <2 x double> [[WIDE_LOAD_7]], [[WIDE_LOAD5_7]]\\n-; CHECK-NEXT:    [[TMP65:%.*]] = fadd <2 x double> [[WIDE_LOAD4_7]], [[WIDE_LOAD6_7]]\\n-; CHECK-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_NEXT_6]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP64]], ptr [[TMP66]], align 16\\n-; CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds double, ptr [[TMP66]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP65]], ptr [[TMP67]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_7]] = add nuw i64 [[INDEX]], 32\\n-; CHECK-NEXT:    [[NITER_NEXT_7]] = add i64 [[NITER]], 8\\n-; CHECK-NEXT:    [[NITER_NCMP_7:%.*]] = icmp eq i64 [[NITER_NEXT_7]], [[UNROLL_ITER]]\\n-; CHECK-NEXT:    br i1 [[NITER_NCMP_7]], label [[MIDDLE_BLOCK_UNR_LCSSA]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n-; CHECK:       middle.block.unr-lcssa:\\n-; CHECK-NEXT:    [[INDEX_UNR:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT_7]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n-; CHECK-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY_EPIL:%.*]]\\n-; CHECK:       vector.body.epil:\\n-; CHECK-NEXT:    [[INDEX_EPIL:%.*]] = phi i64 [ [[INDEX_NEXT_EPIL:%.*]], [[VECTOR_BODY_EPIL]] ], [ [[INDEX_UNR]], [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; CHECK-NEXT:    [[EPIL_ITER:%.*]] = phi i64 [ [[EPIL_ITER_NEXT:%.*]], [[VECTOR_BODY_EPIL]] ], [ 0, [[MIDDLE_BLOCK_UNR_LCSSA]] ]\\n-; CHECK-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDEX_EPIL]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_EPIL:%.*]] = load <2 x double>, ptr [[TMP68]], align 16\\n-; CHECK-NEXT:    [[TMP69:%.*]] = getelementptr inbounds double, ptr [[TMP68]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD4_EPIL:%.*]] = load <2 x double>, ptr [[TMP69]], align 16\\n-; CHECK-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDEX_EPIL]]\\n-; CHECK-NEXT:    [[WIDE_LOAD5_EPIL:%.*]] = load <2 x double>, ptr [[TMP70]], align 16\\n-; CHECK-NEXT:    [[TMP71:%.*]] = getelementptr inbounds double, ptr [[TMP70]], i64 2\\n-; CHECK-NEXT:    [[WIDE_LOAD6_EPIL:%.*]] = load <2 x double>, ptr [[TMP71]], align 16\\n-; CHECK-NEXT:    [[TMP72:%.*]] = fadd <2 x double> [[WIDE_LOAD_EPIL]], [[WIDE_LOAD5_EPIL]]\\n-; CHECK-NEXT:    [[TMP73:%.*]] = fadd <2 x double> [[WIDE_LOAD4_EPIL]], [[WIDE_LOAD6_EPIL]]\\n-; CHECK-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDEX_EPIL]]\\n-; CHECK-NEXT:    store <2 x double> [[TMP72]], ptr [[TMP74]], align 16\\n-; CHECK-NEXT:    [[TMP75:%.*]] = getelementptr inbounds double, ptr [[TMP74]], i64 2\\n-; CHECK-NEXT:    store <2 x double> [[TMP73]], ptr [[TMP75]], align 16\\n-; CHECK-NEXT:    [[INDEX_NEXT_EPIL]] = add nuw i64 [[INDEX_EPIL]], 4\\n-; CHECK-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1\\n-; CHECK-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]\\n-; CHECK-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[MIDDLE_BLOCK]], label [[VECTOR_BODY_EPIL]], !llvm.loop [[LOOP2:![0-9]+]]\\n+; CHECK-NEXT:    store <2 x double> [[TMP5]], ptr [[TMP7]], align 16\\n+; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\\n+; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; CHECK-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[WIDE_TRIP_COUNT]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[EXIT]], label [[FOR_BODY_PREHEADER7]]\\n@@ -345,15 +205,15 @@ define void @test_runtime_trip_count(i32 %N) {\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER7]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV]]\\n-; CHECK-NEXT:    [[TMP76:%.*]] = load double, ptr [[ARRAYIDX]], align 8\\n+; CHECK-NEXT:    [[TMP9:%.*]] = load double, ptr [[ARRAYIDX]], align 8\\n ; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV]]\\n-; CHECK-NEXT:    [[TMP77:%.*]] = load double, ptr [[ARRAYIDX2]], align 8\\n-; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP76]], [[TMP77]]\\n+; CHECK-NEXT:    [[TMP10:%.*]] = load double, ptr [[ARRAYIDX2]], align 8\\n+; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP9]], [[TMP10]]\\n ; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV]]\\n ; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX4]], align 8\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[EXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[EXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]\\n ; CHECK:       exit:\\n ; CHECK-NEXT:    ret void\\n ;\"}, {\"sha\": \"4f77c652c291c0dedc407a56bce5d5e70538affa\", \"filename\": \"llvm/test/Transforms/PhaseOrdering/X86/vdiv.ll\", \"status\": \"modified\", \"additions\": 65, \"deletions\": 126, \"changes\": 191, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/68469a80cb7468c577701d725a56a86454b8f0cb/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FPhaseOrdering%2FX86%2Fvdiv.ll?ref=68469a80cb7468c577701d725a56a86454b8f0cb\", \"patch\": \"@@ -35,188 +35,127 @@ define void @vdiv(ptr %x, ptr %y, double %a, i32 %N) #0 {\\n ; CHECK-NEXT:    [[BROADCAST_SPLAT12:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT11]], <4 x double> poison, <4 x i32> zeroinitializer\\n ; CHECK-NEXT:    [[BROADCAST_SPLATINSERT13:%.*]] = insertelement <4 x double> poison, double [[A]], i64 0\\n ; CHECK-NEXT:    [[BROADCAST_SPLAT14:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT13]], <4 x double> poison, <4 x i32> zeroinitializer\\n-; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -16\\n-; CHECK-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP1]], 4\\n-; CHECK-NEXT:    [[TMP3:%.*]] = add nuw nsw i64 [[TMP2]], 1\\n-; CHECK-NEXT:    [[XTRAITER:%.*]] = and i64 [[TMP3]], 1\\n-; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP1]], 16\\n-; CHECK-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK_UNR_LCSSA:%.*]], label [[VECTOR_PH_NEW:%.*]]\\n-; CHECK:       vector.ph.new:\\n-; CHECK-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[TMP3]], -2\\n-; CHECK-NEXT:    [[TMP5:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT]]\\n-; CHECK-NEXT:    [[TMP6:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT10]]\\n-; CHECK-NEXT:    [[TMP7:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT12]]\\n-; CHECK-NEXT:    [[TMP8:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT14]]\\n-; CHECK-NEXT:    [[TMP9:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT]]\\n-; CHECK-NEXT:    [[TMP10:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT10]]\\n-; CHECK-NEXT:    [[TMP11:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT12]]\\n-; CHECK-NEXT:    [[TMP12:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT14]]\\n+; CHECK-NEXT:    [[TMP1:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT]]\\n+; CHECK-NEXT:    [[TMP2:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT10]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT12]]\\n+; CHECK-NEXT:    [[TMP4:%.*]] = fdiv fast <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, [[BROADCAST_SPLAT14]]\\n ; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]\\n ; CHECK:       vector.body:\\n-; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[INDEX_NEXT_1:%.*]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[VECTOR_PH_NEW]] ], [ [[NITER_NEXT_1:%.*]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDEX]]\\n-; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x double>, ptr [[TMP13]], align 8, !tbaa [[TBAA3:![0-9]+]]\\n-; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 4\\n-; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x double>, ptr [[TMP15]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 8\\n-; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x double>, ptr [[TMP17]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 12\\n-; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x double>, ptr [[TMP19]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP21:%.*]] = fmul fast <4 x double> [[WIDE_LOAD]], [[TMP5]]\\n-; CHECK-NEXT:    [[TMP22:%.*]] = fmul fast <4 x double> [[WIDE_LOAD6]], [[TMP6]]\\n-; CHECK-NEXT:    [[TMP23:%.*]] = fmul fast <4 x double> [[WIDE_LOAD7]], [[TMP7]]\\n-; CHECK-NEXT:    [[TMP24:%.*]] = fmul fast <4 x double> [[WIDE_LOAD8]], [[TMP8]]\\n-; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDEX]]\\n-; CHECK-NEXT:    store <4 x double> [[TMP21]], ptr [[TMP25]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds double, ptr [[TMP25]], i64 4\\n-; CHECK-NEXT:    store <4 x double> [[TMP22]], ptr [[TMP27]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds double, ptr [[TMP25]], i64 8\\n-; CHECK-NEXT:    store <4 x double> [[TMP23]], ptr [[TMP29]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds double, ptr [[TMP25]], i64 12\\n-; CHECK-NEXT:    store <4 x double> [[TMP24]], ptr [[TMP31]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[INDEX_NEXT:%.*]] = or i64 [[INDEX]], 16\\n-; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDEX_NEXT]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_1:%.*]] = load <4 x double>, ptr [[TMP33]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr inbounds double, ptr [[TMP33]], i64 4\\n-; CHECK-NEXT:    [[WIDE_LOAD6_1:%.*]] = load <4 x double>, ptr [[TMP35]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds double, ptr [[TMP33]], i64 8\\n-; CHECK-NEXT:    [[WIDE_LOAD7_1:%.*]] = load <4 x double>, ptr [[TMP37]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds double, ptr [[TMP33]], i64 12\\n-; CHECK-NEXT:    [[WIDE_LOAD8_1:%.*]] = load <4 x double>, ptr [[TMP39]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP41:%.*]] = fmul fast <4 x double> [[WIDE_LOAD_1]], [[TMP9]]\\n-; CHECK-NEXT:    [[TMP42:%.*]] = fmul fast <4 x double> [[WIDE_LOAD6_1]], [[TMP10]]\\n-; CHECK-NEXT:    [[TMP43:%.*]] = fmul fast <4 x double> [[WIDE_LOAD7_1]], [[TMP11]]\\n-; CHECK-NEXT:    [[TMP44:%.*]] = fmul fast <4 x double> [[WIDE_LOAD8_1]], [[TMP12]]\\n-; CHECK-NEXT:    [[TMP45:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDEX_NEXT]]\\n-; CHECK-NEXT:    store <4 x double> [[TMP41]], ptr [[TMP45]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP47:%.*]] = getelementptr inbounds double, ptr [[TMP45]], i64 4\\n-; CHECK-NEXT:    store <4 x double> [[TMP42]], ptr [[TMP47]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP49:%.*]] = getelementptr inbounds double, ptr [[TMP45]], i64 8\\n-; CHECK-NEXT:    store <4 x double> [[TMP43]], ptr [[TMP49]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds double, ptr [[TMP45]], i64 12\\n-; CHECK-NEXT:    store <4 x double> [[TMP44]], ptr [[TMP51]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[INDEX_NEXT_1]] = add nuw i64 [[INDEX]], 32\\n-; CHECK-NEXT:    [[NITER_NEXT_1]] = add i64 [[NITER]], 2\\n-; CHECK-NEXT:    [[NITER_NCMP_1:%.*]] = icmp eq i64 [[NITER_NEXT_1]], [[UNROLL_ITER]]\\n-; CHECK-NEXT:    br i1 [[NITER_NCMP_1]], label [[MIDDLE_BLOCK_UNR_LCSSA]], label [[VECTOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n-; CHECK:       middle.block.unr-lcssa:\\n-; CHECK-NEXT:    [[INDEX_UNR:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT_1]], [[VECTOR_BODY]] ]\\n-; CHECK-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n-; CHECK-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY_EPIL:%.*]]\\n-; CHECK:       vector.body.epil:\\n-; CHECK-NEXT:    [[TMP53:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDEX_UNR]]\\n-; CHECK-NEXT:    [[WIDE_LOAD_EPIL:%.*]] = load <4 x double>, ptr [[TMP53]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds double, ptr [[TMP53]], i64 4\\n-; CHECK-NEXT:    [[WIDE_LOAD6_EPIL:%.*]] = load <4 x double>, ptr [[TMP55]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP57:%.*]] = getelementptr inbounds double, ptr [[TMP53]], i64 8\\n-; CHECK-NEXT:    [[WIDE_LOAD7_EPIL:%.*]] = load <4 x double>, ptr [[TMP57]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP59:%.*]] = getelementptr inbounds double, ptr [[TMP53]], i64 12\\n-; CHECK-NEXT:    [[WIDE_LOAD8_EPIL:%.*]] = load <4 x double>, ptr [[TMP59]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP61:%.*]] = fdiv fast <4 x double> [[WIDE_LOAD_EPIL]], [[BROADCAST_SPLAT]]\\n-; CHECK-NEXT:    [[TMP62:%.*]] = fdiv fast <4 x double> [[WIDE_LOAD6_EPIL]], [[BROADCAST_SPLAT10]]\\n-; CHECK-NEXT:    [[TMP63:%.*]] = fdiv fast <4 x double> [[WIDE_LOAD7_EPIL]], [[BROADCAST_SPLAT12]]\\n-; CHECK-NEXT:    [[TMP64:%.*]] = fdiv fast <4 x double> [[WIDE_LOAD8_EPIL]], [[BROADCAST_SPLAT14]]\\n-; CHECK-NEXT:    [[TMP65:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDEX_UNR]]\\n-; CHECK-NEXT:    store <4 x double> [[TMP61]], ptr [[TMP65]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds double, ptr [[TMP65]], i64 4\\n-; CHECK-NEXT:    store <4 x double> [[TMP62]], ptr [[TMP67]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP69:%.*]] = getelementptr inbounds double, ptr [[TMP65]], i64 8\\n-; CHECK-NEXT:    store <4 x double> [[TMP63]], ptr [[TMP69]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP71:%.*]] = getelementptr inbounds double, ptr [[TMP65]], i64 12\\n-; CHECK-NEXT:    store <4 x double> [[TMP64]], ptr [[TMP71]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    br label [[MIDDLE_BLOCK]]\\n+; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]\\n+; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDEX]]\\n+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x double>, ptr [[TMP5]], align 8, !tbaa [[TBAA3:![0-9]+]]\\n+; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i64 4\\n+; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <4 x double>, ptr [[TMP6]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i64 8\\n+; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <4 x double>, ptr [[TMP7]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i64 12\\n+; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <4 x double>, ptr [[TMP8]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP9:%.*]] = fmul fast <4 x double> [[WIDE_LOAD]], [[TMP1]]\\n+; CHECK-NEXT:    [[TMP10:%.*]] = fmul fast <4 x double> [[WIDE_LOAD6]], [[TMP2]]\\n+; CHECK-NEXT:    [[TMP11:%.*]] = fmul fast <4 x double> [[WIDE_LOAD7]], [[TMP3]]\\n+; CHECK-NEXT:    [[TMP12:%.*]] = fmul fast <4 x double> [[WIDE_LOAD8]], [[TMP4]]\\n+; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDEX]]\\n+; CHECK-NEXT:    store <4 x double> [[TMP9]], ptr [[TMP13]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 4\\n+; CHECK-NEXT:    store <4 x double> [[TMP10]], ptr [[TMP14]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 8\\n+; CHECK-NEXT:    store <4 x double> [[TMP11]], ptr [[TMP15]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i64 12\\n+; CHECK-NEXT:    store <4 x double> [[TMP12]], ptr [[TMP16]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16\\n+; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\\n+; CHECK-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]\\n ; CHECK:       middle.block:\\n ; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[WIDE_TRIP_COUNT]]\\n ; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[FOR_BODY_PREHEADER15]]\\n ; CHECK:       for.body.preheader15:\\n ; CHECK-NEXT:    [[INDVARS_IV_PH:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[N_VEC]], [[MIDDLE_BLOCK]] ]\\n-; CHECK-NEXT:    [[TMP73:%.*]] = xor i64 [[INDVARS_IV_PH]], -1\\n-; CHECK-NEXT:    [[TMP74:%.*]] = add nsw i64 [[TMP73]], [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    [[XTRAITER16:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 7\\n-; CHECK-NEXT:    [[LCMP_MOD17_NOT:%.*]] = icmp eq i64 [[XTRAITER16]], 0\\n-; CHECK-NEXT:    br i1 [[LCMP_MOD17_NOT]], label [[FOR_BODY_PROL_LOOPEXIT:%.*]], label [[FOR_BODY_PROL_PREHEADER:%.*]]\\n+; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[INDVARS_IV_PH]], -1\\n+; CHECK-NEXT:    [[TMP19:%.*]] = add nsw i64 [[TMP18]], [[WIDE_TRIP_COUNT]]\\n+; CHECK-NEXT:    [[XTRAITER:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 7\\n+; CHECK-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0\\n+; CHECK-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[FOR_BODY_PROL_LOOPEXIT:%.*]], label [[FOR_BODY_PROL_PREHEADER:%.*]]\\n ; CHECK:       for.body.prol.preheader:\\n-; CHECK-NEXT:    [[TMP75:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP20:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    br label [[FOR_BODY_PROL:%.*]]\\n ; CHECK:       for.body.prol:\\n ; CHECK-NEXT:    [[INDVARS_IV_PROL:%.*]] = phi i64 [ [[INDVARS_IV_NEXT_PROL:%.*]], [[FOR_BODY_PROL]] ], [ [[INDVARS_IV_PH]], [[FOR_BODY_PROL_PREHEADER]] ]\\n ; CHECK-NEXT:    [[PROL_ITER:%.*]] = phi i64 [ [[PROL_ITER_NEXT:%.*]], [[FOR_BODY_PROL]] ], [ 0, [[FOR_BODY_PROL_PREHEADER]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX_PROL:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_PROL]]\\n ; CHECK-NEXT:    [[T0_PROL:%.*]] = load double, ptr [[ARRAYIDX_PROL]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP76:%.*]] = fmul fast double [[T0_PROL]], [[TMP75]]\\n+; CHECK-NEXT:    [[TMP21:%.*]] = fmul fast double [[T0_PROL]], [[TMP20]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_PROL:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_PROL]]\\n-; CHECK-NEXT:    store double [[TMP76]], ptr [[ARRAYIDX2_PROL]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP21]], ptr [[ARRAYIDX2_PROL]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_PROL]] = add nuw nsw i64 [[INDVARS_IV_PROL]], 1\\n ; CHECK-NEXT:    [[PROL_ITER_NEXT]] = add i64 [[PROL_ITER]], 1\\n-; CHECK-NEXT:    [[PROL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[PROL_ITER_NEXT]], [[XTRAITER16]]\\n-; CHECK-NEXT:    br i1 [[PROL_ITER_CMP_NOT]], label [[FOR_BODY_PROL_LOOPEXIT]], label [[FOR_BODY_PROL]], !llvm.loop [[LOOP9:![0-9]+]]\\n+; CHECK-NEXT:    [[PROL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[PROL_ITER_NEXT]], [[XTRAITER]]\\n+; CHECK-NEXT:    br i1 [[PROL_ITER_CMP_NOT]], label [[FOR_BODY_PROL_LOOPEXIT]], label [[FOR_BODY_PROL]], !llvm.loop [[LOOP10:![0-9]+]]\\n ; CHECK:       for.body.prol.loopexit:\\n ; CHECK-NEXT:    [[INDVARS_IV_UNR:%.*]] = phi i64 [ [[INDVARS_IV_PH]], [[FOR_BODY_PREHEADER15]] ], [ [[INDVARS_IV_NEXT_PROL]], [[FOR_BODY_PROL]] ]\\n-; CHECK-NEXT:    [[TMP77:%.*]] = icmp ult i64 [[TMP74]], 7\\n-; CHECK-NEXT:    br i1 [[TMP77]], label [[FOR_END]], label [[FOR_BODY_PREHEADER15_NEW:%.*]]\\n+; CHECK-NEXT:    [[TMP22:%.*]] = icmp ult i64 [[TMP19]], 7\\n+; CHECK-NEXT:    br i1 [[TMP22]], label [[FOR_END]], label [[FOR_BODY_PREHEADER15_NEW:%.*]]\\n ; CHECK:       for.body.preheader15.new:\\n-; CHECK-NEXT:    [[TMP78:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP79:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP80:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP81:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP82:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP83:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP84:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n-; CHECK-NEXT:    [[TMP85:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP23:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP24:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP25:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP26:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP27:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP28:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP29:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n+; CHECK-NEXT:    [[TMP30:%.*]] = fdiv fast double 1.000000e+00, [[A]]\\n ; CHECK-NEXT:    br label [[FOR_BODY:%.*]]\\n ; CHECK:       for.body:\\n ; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_UNR]], [[FOR_BODY_PREHEADER15_NEW]] ], [ [[INDVARS_IV_NEXT_7:%.*]], [[FOR_BODY]] ]\\n ; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV]]\\n ; CHECK-NEXT:    [[T0:%.*]] = load double, ptr [[ARRAYIDX]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP86:%.*]] = fmul fast double [[T0]], [[TMP78]]\\n+; CHECK-NEXT:    [[TMP31:%.*]] = fmul fast double [[T0]], [[TMP23]]\\n ; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV]]\\n-; CHECK-NEXT:    store double [[TMP86]], ptr [[ARRAYIDX2]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP31]], ptr [[ARRAYIDX2]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1\\n ; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT]]\\n ; CHECK-NEXT:    [[T0_1:%.*]] = load double, ptr [[ARRAYIDX_1]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP87:%.*]] = fmul fast double [[T0_1]], [[TMP79]]\\n+; CHECK-NEXT:    [[TMP32:%.*]] = fmul fast double [[T0_1]], [[TMP24]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_1:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT]]\\n-; CHECK-NEXT:    store double [[TMP87]], ptr [[ARRAYIDX2_1]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP32]], ptr [[ARRAYIDX2_1]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_1:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 2\\n ; CHECK-NEXT:    [[ARRAYIDX_2:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_1]]\\n ; CHECK-NEXT:    [[T0_2:%.*]] = load double, ptr [[ARRAYIDX_2]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP88:%.*]] = fmul fast double [[T0_2]], [[TMP80]]\\n+; CHECK-NEXT:    [[TMP33:%.*]] = fmul fast double [[T0_2]], [[TMP25]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_2:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_1]]\\n-; CHECK-NEXT:    store double [[TMP88]], ptr [[ARRAYIDX2_2]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP33]], ptr [[ARRAYIDX2_2]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_2:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 3\\n ; CHECK-NEXT:    [[ARRAYIDX_3:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_2]]\\n ; CHECK-NEXT:    [[T0_3:%.*]] = load double, ptr [[ARRAYIDX_3]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP89:%.*]] = fmul fast double [[T0_3]], [[TMP81]]\\n+; CHECK-NEXT:    [[TMP34:%.*]] = fmul fast double [[T0_3]], [[TMP26]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_3:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_2]]\\n-; CHECK-NEXT:    store double [[TMP89]], ptr [[ARRAYIDX2_3]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP34]], ptr [[ARRAYIDX2_3]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_3:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 4\\n ; CHECK-NEXT:    [[ARRAYIDX_4:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_3]]\\n ; CHECK-NEXT:    [[T0_4:%.*]] = load double, ptr [[ARRAYIDX_4]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP90:%.*]] = fmul fast double [[T0_4]], [[TMP82]]\\n+; CHECK-NEXT:    [[TMP35:%.*]] = fmul fast double [[T0_4]], [[TMP27]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_4:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_3]]\\n-; CHECK-NEXT:    store double [[TMP90]], ptr [[ARRAYIDX2_4]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP35]], ptr [[ARRAYIDX2_4]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_4:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 5\\n ; CHECK-NEXT:    [[ARRAYIDX_5:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_4]]\\n ; CHECK-NEXT:    [[T0_5:%.*]] = load double, ptr [[ARRAYIDX_5]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP91:%.*]] = fmul fast double [[T0_5]], [[TMP83]]\\n+; CHECK-NEXT:    [[TMP36:%.*]] = fmul fast double [[T0_5]], [[TMP28]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_5:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_4]]\\n-; CHECK-NEXT:    store double [[TMP91]], ptr [[ARRAYIDX2_5]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP36]], ptr [[ARRAYIDX2_5]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_5:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 6\\n ; CHECK-NEXT:    [[ARRAYIDX_6:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_5]]\\n ; CHECK-NEXT:    [[T0_6:%.*]] = load double, ptr [[ARRAYIDX_6]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP92:%.*]] = fmul fast double [[T0_6]], [[TMP84]]\\n+; CHECK-NEXT:    [[TMP37:%.*]] = fmul fast double [[T0_6]], [[TMP29]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_6:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_5]]\\n-; CHECK-NEXT:    store double [[TMP92]], ptr [[ARRAYIDX2_6]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP37]], ptr [[ARRAYIDX2_6]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_6:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 7\\n ; CHECK-NEXT:    [[ARRAYIDX_7:%.*]] = getelementptr inbounds double, ptr [[Y]], i64 [[INDVARS_IV_NEXT_6]]\\n ; CHECK-NEXT:    [[T0_7:%.*]] = load double, ptr [[ARRAYIDX_7]], align 8, !tbaa [[TBAA3]]\\n-; CHECK-NEXT:    [[TMP93:%.*]] = fmul fast double [[T0_7]], [[TMP85]]\\n+; CHECK-NEXT:    [[TMP38:%.*]] = fmul fast double [[T0_7]], [[TMP30]]\\n ; CHECK-NEXT:    [[ARRAYIDX2_7:%.*]] = getelementptr inbounds double, ptr [[X]], i64 [[INDVARS_IV_NEXT_6]]\\n-; CHECK-NEXT:    store double [[TMP93]], ptr [[ARRAYIDX2_7]], align 8, !tbaa [[TBAA3]]\\n+; CHECK-NEXT:    store double [[TMP38]], ptr [[ARRAYIDX2_7]], align 8, !tbaa [[TBAA3]]\\n ; CHECK-NEXT:    [[INDVARS_IV_NEXT_7]] = add nuw nsw i64 [[INDVARS_IV]], 8\\n ; CHECK-NEXT:    [[EXITCOND_NOT_7:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_7]], [[WIDE_TRIP_COUNT]]\\n-; CHECK-NEXT:    br i1 [[EXITCOND_NOT_7]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]\\n+; CHECK-NEXT:    br i1 [[EXITCOND_NOT_7]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]\\n ; CHECK:       for.end:\\n ; CHECK-NEXT:    ret void\\n ;\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85NDk3NjgwMDY3Y2M1YTJlN2Q0ZTBiZjY1N2IyM2Q1N2MwNmU1ZTk3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/9497680067cc5a2e7d4e0bf657b23d57c06e5e97", "content": "{\"sha\": \"9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"node_id\": \"C_kwDOBITxeNoAKDk0OTc2ODAwNjdjYzVhMmU3ZDRlMGJmNjU3YjIzZDU3YzA2ZTVlOTc\", \"commit\": {\"author\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2023-02-10T17:12:21Z\"}, \"committer\": {\"name\": \"Florian Hahn\", \"email\": \"flo@fhahn.com\", \"date\": \"2023-02-10T17:12:21Z\"}, \"message\": \"[ConstraintElim] Update getLastConstraint to return to last row. (NFC)\\n\\nThe current code incorrectly returned the first instead of the last row.\\nThis fixes the debug output.\", \"tree\": {\"sha\": \"aa2f82dd7cecf2de2a4686687881c39a9af03399\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/aa2f82dd7cecf2de2a4686687881c39a9af03399\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\niHUEABYKAB0WIQQ77BqkmrEb53BHnLHu9xK7XoDrugUCY+Z69QAKCRDu9xK7XoDr\\num1qAQDmwKTkFtPiNKhn3fP9a5GcKmEDWZeEKLBz1V8KXjdDbwEAhKSYFMmKKZp0\\neKSgMVha2qRwg6OL2Hh8B1LjU3CFbQw=\\n=BdeQ\\n-----END PGP SIGNATURE-----\", \"payload\": \"tree aa2f82dd7cecf2de2a4686687881c39a9af03399\\nparent ff8742df9e65c60de2fce0b19c0f52fd663626a1\\nauthor Florian Hahn <flo@fhahn.com> 1676049141 +0000\\ncommitter Florian Hahn <flo@fhahn.com> 1676049141 +0000\\n\\n[ConstraintElim] Update getLastConstraint to return to last row. (NFC)\\n\\nThe current code incorrectly returned the first instead of the last row.\\nThis fixes the debug output.\\n\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9497680067cc5a2e7d4e0bf657b23d57c06e5e97/comments\", \"author\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"fhahn\", \"id\": 450489, \"node_id\": \"MDQ6VXNlcjQ1MDQ4OQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/450489?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/fhahn\", \"html_url\": \"https://github.com/fhahn\", \"followers_url\": \"https://api.github.com/users/fhahn/followers\", \"following_url\": \"https://api.github.com/users/fhahn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/fhahn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/fhahn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/fhahn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/fhahn/orgs\", \"repos_url\": \"https://api.github.com/users/fhahn/repos\", \"events_url\": \"https://api.github.com/users/fhahn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/fhahn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ff8742df9e65c60de2fce0b19c0f52fd663626a1\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ff8742df9e65c60de2fce0b19c0f52fd663626a1\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ff8742df9e65c60de2fce0b19c0f52fd663626a1\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"e348b38f152ab84ab1679b7633284ff9e1479e13\", \"filename\": \"llvm/include/llvm/Analysis/ConstraintSystem.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9497680067cc5a2e7d4e0bf657b23d57c06e5e97/llvm%2Finclude%2Fllvm%2FAnalysis%2FConstraintSystem.h\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9497680067cc5a2e7d4e0bf657b23d57c06e5e97/llvm%2Finclude%2Fllvm%2FAnalysis%2FConstraintSystem.h\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Finclude%2Fllvm%2FAnalysis%2FConstraintSystem.h?ref=9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"patch\": \"@@ -91,7 +91,7 @@ class ConstraintSystem {\\n \\n   bool isConditionImplied(SmallVector<int64_t, 8> R) const;\\n \\n-  ArrayRef<int64_t> getLastConstraint() { return Constraints[0]; }\\n+  ArrayRef<int64_t> getLastConstraint() { return Constraints.back(); }\\n   void popLastConstraint() { Constraints.pop_back(); }\\n   void popLastNVariables(unsigned N) {\\n     for (auto &C : Constraints) {\"}, {\"sha\": \"580b6d9d0fb55a2f32d575a6375cf1881e0f0c88\", \"filename\": \"llvm/test/Transforms/ConstraintElimination/debug.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9497680067cc5a2e7d4e0bf657b23d57c06e5e97/llvm%2Ftest%2FTransforms%2FConstraintElimination%2Fdebug.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9497680067cc5a2e7d4e0bf657b23d57c06e5e97/llvm%2Ftest%2FTransforms%2FConstraintElimination%2Fdebug.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FConstraintElimination%2Fdebug.ll?ref=9497680067cc5a2e7d4e0bf657b23d57c06e5e97\", \"patch\": \"@@ -16,7 +16,7 @@ define i1 @test_and_ule(i4 %x, i4 %y, i4 %z) {\\n ; CHECK: Checking   %t.1 = icmp ule i4 %x, %z\\n ; CHECK: Condition   %t.1 = icmp ule i4 %x, %z implied by dominating constraints\\n \\n-; CHECK: Removing %x + -1 * %y <= 0\\n+; CHECK: Removing %y + -1 * %z <= 0\\n ; CHECK: Removing %x + -1 * %y <= 0\\n \\n entry:\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy83YjU0YTI5YzJlNzJlM2U2YmY3YmI4Y2I1YWNmZTI1NDMzNTU4NGQ3Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7", "content": "{\"sha\": \"7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"node_id\": \"C_kwDOBITxeNoAKDdiNTRhMjljMmU3MmUzZTZiZjdiYjhjYjVhY2ZlMjU0MzM1NTg0ZDc\", \"commit\": {\"author\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2023-03-06T16:13:58Z\"}, \"committer\": {\"name\": \"Simon Pilgrim\", \"email\": \"llvm-dev@redking.me.uk\", \"date\": \"2023-03-06T16:14:05Z\"}, \"message\": \"[X86] combineBitcastvxi1/checkBitcastSrcVectorSize - sign-extend vXi1 allones vselect operands\\n\\nMinor fix to Issue #61104\", \"tree\": {\"sha\": \"88d91d68badfff42b556ac25f657869a98655c71\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/88d91d68badfff42b556ac25f657869a98655c71\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7/comments\", \"author\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"RKSimon\", \"id\": 2175834, \"node_id\": \"MDQ6VXNlcjIxNzU4MzQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2175834?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/RKSimon\", \"html_url\": \"https://github.com/RKSimon\", \"followers_url\": \"https://api.github.com/users/RKSimon/followers\", \"following_url\": \"https://api.github.com/users/RKSimon/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/RKSimon/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/RKSimon/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/RKSimon/subscriptions\", \"organizations_url\": \"https://api.github.com/users/RKSimon/orgs\", \"repos_url\": \"https://api.github.com/users/RKSimon/repos\", \"events_url\": \"https://api.github.com/users/RKSimon/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/RKSimon/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6103147fb4fe694b5c4f5367619598a78ffc6710\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6103147fb4fe694b5c4f5367619598a78ffc6710\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6103147fb4fe694b5c4f5367619598a78ffc6710\"}], \"stats\": {\"total\": 28, \"additions\": 10, \"deletions\": 18}, \"files\": [{\"sha\": \"26b6866cf476317739098c3b06de26aa458ef793\", \"filename\": \"llvm/lib/Target/X86/X86ISelLowering.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTarget%2FX86%2FX86ISelLowering.cpp?ref=7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"patch\": \"@@ -43676,8 +43676,8 @@ static bool checkBitcastSrcVectorSize(SDValue Src, unsigned Size,\\n            checkBitcastSrcVectorSize(Src.getOperand(1), Size, AllowTruncate) &&\\n            checkBitcastSrcVectorSize(Src.getOperand(2), Size, AllowTruncate);\\n   case ISD::BUILD_VECTOR:\\n-    return ISD::isBuildVectorAllZeros(Src.getNode());\\n-\\n+    return ISD::isBuildVectorAllZeros(Src.getNode()) ||\\n+           ISD::isBuildVectorAllOnes(Src.getNode());\\n   }\\n   return false;\\n }\"}, {\"sha\": \"e092bf59e34835a3f774af9ddab877983b870efc\", \"filename\": \"llvm/test/CodeGen/X86/bitcast-and-setcc-256.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 16, \"changes\": 24, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7/llvm%2Ftest%2FCodeGen%2FX86%2Fbitcast-and-setcc-256.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7/llvm%2Ftest%2FCodeGen%2FX86%2Fbitcast-and-setcc-256.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fbitcast-and-setcc-256.ll?ref=7b54a29c2e72e3e6bf7bb8cb5acfe254335584d7\", \"patch\": \"@@ -463,30 +463,22 @@ define i8 @v8i32_or_select(<8 x i32> %a0, <8 x i32> %a1, <8 x i32> %a2) {\\n ;\\n ; AVX1-LABEL: v8i32_or_select:\\n ; AVX1:       # %bb.0:\\n-; AVX1-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm3\\n-; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm1\\n-; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm0\\n+; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm3\\n+; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4\\n+; AVX1-NEXT:    vpcmpeqd %xmm3, %xmm4, %xmm3\\n ; AVX1-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0\\n-; AVX1-NEXT:    vextractf128 $1, %ymm2, %xmm1\\n-; AVX1-NEXT:    vpor %xmm1, %xmm0, %xmm0\\n-; AVX1-NEXT:    vpor %xmm2, %xmm3, %xmm1\\n-; AVX1-NEXT:    vpackssdw %xmm0, %xmm1, %xmm0\\n-; AVX1-NEXT:    vpacksswb %xmm0, %xmm0, %xmm0\\n-; AVX1-NEXT:    vpmovmskb %xmm0, %eax\\n+; AVX1-NEXT:    vinsertf128 $1, %xmm3, %ymm0, %ymm0\\n+; AVX1-NEXT:    vorps %ymm2, %ymm0, %ymm0\\n+; AVX1-NEXT:    vmovmskps %ymm0, %eax\\n ; AVX1-NEXT:    # kill: def $al killed $al killed $eax\\n ; AVX1-NEXT:    vzeroupper\\n ; AVX1-NEXT:    retq\\n ;\\n ; AVX2-LABEL: v8i32_or_select:\\n ; AVX2:       # %bb.0:\\n ; AVX2-NEXT:    vpcmpeqd %ymm1, %ymm0, %ymm0\\n-; AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1\\n-; AVX2-NEXT:    vpcmpgtd %ymm2, %ymm1, %ymm1\\n-; AVX2-NEXT:    vpor %ymm1, %ymm0, %ymm0\\n-; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1\\n-; AVX2-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0\\n-; AVX2-NEXT:    vpacksswb %xmm0, %xmm0, %xmm0\\n-; AVX2-NEXT:    vpmovmskb %xmm0, %eax\\n+; AVX2-NEXT:    vpor %ymm2, %ymm0, %ymm0\\n+; AVX2-NEXT:    vmovmskps %ymm0, %eax\\n ; AVX2-NEXT:    # kill: def $al killed $al killed $eax\\n ; AVX2-NEXT:    vzeroupper\\n ; AVX2-NEXT:    retq\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy84MzFlOTlmZWU5MGU5NDA2YzcyNjBjYTY2ZDY4OGVjMzUzMTEwMTgzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/831e99fee90e9406c7260ca66d688ec353110183", "content": "{\"sha\": \"831e99fee90e9406c7260ca66d688ec353110183\", \"node_id\": \"C_kwDOBITxeNoAKDgzMWU5OWZlZTkwZTk0MDZjNzI2MGNhNjZkNjg4ZWMzNTMxMTAxODM\", \"commit\": {\"author\": {\"name\": \"Nick Desaulniers\", \"email\": \"ndesaulniers@google.com\", \"date\": \"2023-03-13T17:14:02Z\"}, \"committer\": {\"name\": \"Nick Desaulniers\", \"email\": \"ndesaulniers@google.com\", \"date\": \"2023-03-13T17:20:57Z\"}, \"message\": \"[GVNHoist] don't hoist callbr users into the callbr's block\\n\\nThis isn't safe to do.\\n\\nLink: https://github.com/llvm/llvm-project/issues/53562\\nFixes: https://github.com/llvm/llvm-project/issues/61023\\n\\nReviewed By: efriedma, nikic\\n\\nDifferential Revision: https://reviews.llvm.org/D144927\", \"tree\": {\"sha\": \"a4ea66cd3c0e3e765a0ce4632badce5d397f9c84\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a4ea66cd3c0e3e765a0ce4632badce5d397f9c84\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/831e99fee90e9406c7260ca66d688ec353110183\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/831e99fee90e9406c7260ca66d688ec353110183\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/831e99fee90e9406c7260ca66d688ec353110183\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/831e99fee90e9406c7260ca66d688ec353110183/comments\", \"author\": {\"login\": \"nickdesaulniers\", \"id\": 1823839, \"node_id\": \"MDQ6VXNlcjE4MjM4Mzk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1823839?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nickdesaulniers\", \"html_url\": \"https://github.com/nickdesaulniers\", \"followers_url\": \"https://api.github.com/users/nickdesaulniers/followers\", \"following_url\": \"https://api.github.com/users/nickdesaulniers/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nickdesaulniers/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nickdesaulniers/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nickdesaulniers/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nickdesaulniers/orgs\", \"repos_url\": \"https://api.github.com/users/nickdesaulniers/repos\", \"events_url\": \"https://api.github.com/users/nickdesaulniers/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nickdesaulniers/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nickdesaulniers\", \"id\": 1823839, \"node_id\": \"MDQ6VXNlcjE4MjM4Mzk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1823839?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nickdesaulniers\", \"html_url\": \"https://github.com/nickdesaulniers\", \"followers_url\": \"https://api.github.com/users/nickdesaulniers/followers\", \"following_url\": \"https://api.github.com/users/nickdesaulniers/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nickdesaulniers/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nickdesaulniers/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nickdesaulniers/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nickdesaulniers/orgs\", \"repos_url\": \"https://api.github.com/users/nickdesaulniers/repos\", \"events_url\": \"https://api.github.com/users/nickdesaulniers/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nickdesaulniers/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c5363678932a8187b06f931ea30c5d06017b1bb5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c5363678932a8187b06f931ea30c5d06017b1bb5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c5363678932a8187b06f931ea30c5d06017b1bb5\"}], \"stats\": {\"total\": 194, \"additions\": 187, \"deletions\": 7}, \"files\": [{\"sha\": \"f13b52fecba3d50a81a4180904fbbe23906c7ab2\", \"filename\": \"llvm/lib/Transforms/Scalar/GVNHoist.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 1, \"changes\": 7, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/831e99fee90e9406c7260ca66d688ec353110183/llvm%2Flib%2FTransforms%2FScalar%2FGVNHoist.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/831e99fee90e9406c7260ca66d688ec353110183/llvm%2Flib%2FTransforms%2FScalar%2FGVNHoist.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FGVNHoist.cpp?ref=831e99fee90e9406c7260ca66d688ec353110183\", \"patch\": \"@@ -808,15 +808,20 @@ bool GVNHoist::valueAnticipable(CHIArgs C, Instruction *TI) const {\\n void GVNHoist::checkSafety(CHIArgs C, BasicBlock *BB, GVNHoist::InsKind K,\\n                            SmallVectorImpl<CHIArg> &Safe) {\\n   int NumBBsOnAllPaths = MaxNumberOfBBSInPath;\\n+  const Instruction *T = BB->getTerminator();\\n   for (auto CHI : C) {\\n     Instruction *Insn = CHI.I;\\n     if (!Insn) // No instruction was inserted in this CHI.\\n       continue;\\n+    // If the Terminator is some kind of \\\"exotic terminator\\\" that produces a\\n+    // value (such as InvokeInst, CallBrInst, or CatchSwitchInst) which the CHI\\n+    // uses, it is not safe to hoist the use above the def.\\n+    if (!T->use_empty() && is_contained(Insn->operands(), T))\\n+      continue;\\n     if (K == InsKind::Scalar) {\\n       if (safeToHoistScalar(BB, Insn->getParent(), NumBBsOnAllPaths))\\n         Safe.push_back(CHI);\\n     } else {\\n-      auto *T = BB->getTerminator();\\n       if (MemoryUseOrDef *UD = MSSA->getMemoryAccess(Insn))\\n         if (safeToHoistLdSt(T, Insn, UD, K, NumBBsOnAllPaths))\\n           Safe.push_back(CHI);\"}, {\"sha\": \"7c1fe26a827ccf8b46a541027e597330156f0801\", \"filename\": \"llvm/test/Transforms/GVNHoist/hoist-call.ll\", \"status\": \"modified\", \"additions\": 181, \"deletions\": 6, \"changes\": 187, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/831e99fee90e9406c7260ca66d688ec353110183/llvm%2Ftest%2FTransforms%2FGVNHoist%2Fhoist-call.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/831e99fee90e9406c7260ca66d688ec353110183/llvm%2Ftest%2FTransforms%2FGVNHoist%2Fhoist-call.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FGVNHoist%2Fhoist-call.ll?ref=831e99fee90e9406c7260ca66d688ec353110183\", \"patch\": \"@@ -1,13 +1,20 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py\\n ; RUN: opt -S -passes=gvn-hoist < %s | FileCheck %s\\n \\n ; Check that the call and fcmp are hoisted.\\n-; CHECK-LABEL: define void @fun(\\n-; CHECK: call float\\n-; CHECK: fcmp oeq\\n-; CHECK-NOT: call float\\n-; CHECK-NOT: fcmp oeq\\n-\\n define void @fun(float %__b) minsize {\\n+; CHECK-LABEL: @fun(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br label [[IF_THEN:%.*]]\\n+; CHECK:       if.then:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = call float @llvm.fabs.f32(float [[__B:%.*]])\\n+; CHECK-NEXT:    [[CMPINF7:%.*]] = fcmp oeq float [[TMP0]], 0x7FF0000000000000\\n+; CHECK-NEXT:    br i1 undef, label [[IF_THEN8:%.*]], label [[LOR_LHS_FALSE:%.*]]\\n+; CHECK:       lor.lhs.false:\\n+; CHECK-NEXT:    unreachable\\n+; CHECK:       if.then8:\\n+; CHECK-NEXT:    ret void\\n+;\\n entry:\\n   br label %if.then\\n \\n@@ -26,3 +33,171 @@ if.then8:                                         ; preds = %if.then\\n }\\n \\n declare float @llvm.fabs.f32(float)\\n+\\n+; Check that extractvalues are not hoisted into entry, but that non-dependent\\n+; adds are.\\n+define i32 @foo(i32 %x) {\\n+; CHECK-LABEL: @foo(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[X:%.*]], 1\\n+; CHECK-NEXT:    [[TMP0:%.*]] = callbr { i32, i32 } asm sideeffect \\\"somestuff\\\", \\\"=r,=r,!i\\\"()\\n+; CHECK-NEXT:    to label [[ASM_FALLTHROUGH:%.*]] [label %err.split]\\n+; CHECK:       asm.fallthrough:\\n+; CHECK-NEXT:    [[ASMRESULT:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0\\n+; CHECK-NEXT:    ret i32 [[ADD]]\\n+; CHECK:       err.split:\\n+; CHECK-NEXT:    [[ASMRESULT2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0\\n+; CHECK-NEXT:    ret i32 [[ADD]]\\n+;\\n+entry:\\n+  %0 = callbr { i32, i32 } asm sideeffect \\\"somestuff\\\", \\\"=r,=r,!i\\\"()\\n+  to label %asm.fallthrough [label %err.split]\\n+\\n+asm.fallthrough:                                  ; preds = %entry\\n+  %asmresult = extractvalue { i32, i32 } %0, 0\\n+  %add = add nsw i32 %x, 1\\n+  ret i32 %add\\n+\\n+err.split:                                        ; preds = %entry\\n+  %asmresult2 = extractvalue { i32, i32 } %0, 0\\n+  %add2 = add nsw i32 %x, 1\\n+  ret i32 %add2\\n+}\\n+\\n+; Check that extractvalues and dependent adds are not hoisted into entry.\\n+define i32 @foo2() {\\n+; CHECK-LABEL: @foo2(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = callbr { i32, i32 } asm sideeffect \\\"somestuff\\\", \\\"=r,=r,!i\\\"()\\n+; CHECK-NEXT:    to label [[ASM_FALLTHROUGH:%.*]] [label %err.split]\\n+; CHECK:       asm.fallthrough:\\n+; CHECK-NEXT:    [[ASMRESULT:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0\\n+; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[ASMRESULT]], 1\\n+; CHECK-NEXT:    ret i32 [[ADD]]\\n+; CHECK:       err.split:\\n+; CHECK-NEXT:    [[ASMRESULT2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0\\n+; CHECK-NEXT:    [[ADD2:%.*]] = add nsw i32 [[ASMRESULT2]], 1\\n+; CHECK-NEXT:    ret i32 [[ADD2]]\\n+;\\n+entry:\\n+  %0 = callbr { i32, i32 } asm sideeffect \\\"somestuff\\\", \\\"=r,=r,!i\\\"()\\n+  to label %asm.fallthrough [label %err.split]\\n+\\n+asm.fallthrough:                                  ; preds = %entry\\n+  %asmresult = extractvalue { i32, i32 } %0, 0\\n+  %add = add nsw i32 %asmresult, 1\\n+  ret i32 %add\\n+\\n+err.split:                                        ; preds = %entry\\n+  %asmresult2 = extractvalue { i32, i32 } %0, 0\\n+  %add2 = add nsw i32 %asmresult2, 1\\n+  ret i32 %add2\\n+}\\n+\\n+; Ensure we don't hoist loads that are modified by callbr.\\n+@x = global i32 0\\n+define i32 @foo3() {\\n+; CHECK-LABEL: @foo3(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x)\\n+; CHECK-NEXT:    to label [[ASM_FALLTHROUGH:%.*]] [label %err.split]\\n+; CHECK:       asm.fallthrough:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @x, align 4\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+; CHECK:       err.split:\\n+; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @x, align 4\\n+; CHECK-NEXT:    ret i32 [[TMP1]]\\n+;\\n+entry:\\n+  callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x)\\n+  to label %asm.fallthrough [label %err.split]\\n+\\n+asm.fallthrough:                                  ; preds = %entry\\n+  %0 = load i32, ptr @x\\n+  ret i32 %0\\n+\\n+err.split:                                        ; preds = %entry\\n+  %1 = load i32, ptr @x\\n+  ret i32 %1\\n+}\\n+\\n+; Ensure we do hoist loads that aren't modified by callbr, if the callbr has\\n+; the attribute memory(argmem:readwrite).\\n+@y = global i32 0\\n+define i32 @foo4() {\\n+; CHECK-LABEL: @foo4(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @y, align 4\\n+; CHECK-NEXT:    callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) #[[ATTR2:[0-9]+]]\\n+; CHECK-NEXT:    to label [[A:%.*]] [label %b]\\n+; CHECK:       a:\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+; CHECK:       b:\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+;\\n+entry:\\n+  callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) memory(argmem: readwrite)\\n+  to label %a [label %b]\\n+\\n+a:                                  ; preds = %entry\\n+  %0 = load i32, ptr @y\\n+  ret i32 %0\\n+\\n+b:                                        ; preds = %entry\\n+  %1 = load i32, ptr @y\\n+  ret i32 %1\\n+}\\n+\\n+; Ensure we don't hoist loads that are modified by callbr, if the callbr has\\n+; the attribute memory(argmem:readwrite).\\n+define i32 @foo5() {\\n+; CHECK-LABEL: @foo5(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) #[[ATTR2]]\\n+; CHECK-NEXT:    to label [[A:%.*]] [label %b]\\n+; CHECK:       a:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @x, align 4\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+; CHECK:       b:\\n+; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @x, align 4\\n+; CHECK-NEXT:    ret i32 [[TMP1]]\\n+;\\n+entry:\\n+  callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) memory(argmem: readwrite)\\n+  to label %a [label %b]\\n+\\n+a:                                  ; preds = %entry\\n+  %0 = load i32, ptr @x\\n+  ret i32 %0\\n+\\n+b:                                        ; preds = %entry\\n+  %1 = load i32, ptr @x\\n+  ret i32 %1\\n+}\\n+\\n+; Ensure we hoist loads that are modified by callbr, if the callbr has the\\n+; attribute memory(argmem:none).\\n+define i32 @foo6() {\\n+; CHECK-LABEL: @foo6(\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @x, align 4\\n+; CHECK-NEXT:    callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) #[[ATTR3:[0-9]+]]\\n+; CHECK-NEXT:    to label [[A:%.*]] [label %b]\\n+; CHECK:       a:\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+; CHECK:       b:\\n+; CHECK-NEXT:    ret i32 [[TMP0]]\\n+;\\n+entry:\\n+  callbr void asm \\\"\\\", \\\"=*m,!i\\\"(ptr elementtype(i32) @x) memory(argmem: none)\\n+  to label %a [label %b]\\n+\\n+a:                                  ; preds = %entry\\n+  %0 = load i32, ptr @x\\n+  ret i32 %0\\n+\\n+b:                                        ; preds = %entry\\n+  %1 = load i32, ptr @x\\n+  ret i32 %1\\n+}\\n+\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85Y2YxODgxZjhmMTJhNzBjMjg0MzIyNzhhMjg3OGE2MTEzYzAxN2MxIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/9cf1881f8f12a70c28432278a2878a6113c017c1", "content": "{\"sha\": \"9cf1881f8f12a70c28432278a2878a6113c017c1\", \"node_id\": \"C_kwDOBITxeNoAKDljZjE4ODFmOGYxMmE3MGMyODQzMjI3OGEyODc4YTYxMTNjMDE3YzE\", \"commit\": {\"author\": {\"name\": \"Paul Osmialowski\", \"email\": \"pawel.osmialowski@arm.com\", \"date\": \"2023-04-25T20:44:35Z\"}, \"committer\": {\"name\": \"Paul Osmialowski\", \"email\": \"pawel.osmialowski@arm.com\", \"date\": \"2023-04-25T20:47:14Z\"}, \"message\": \"[SCEV] Do not plant SCEV checks unnecessarily\\n\\nThe vectorisation analysis collects strides for loop invariant\\npointers, which is wrong because they are not strided. We don't\\nneed to generate SCEV checks (which are costly performancewise)\\nfor such pointers, we just need to do the appropriate aliasing\\nchecks.\\n\\nThis patch fixes the problem by changing getStrideFromPointer()\\nto treat loop invariant pointers as having no stride.\\n\\nOriginally proposed by David Sherwood with further suggestions\\nfrom Florian Hahn.\\n\\nReviewed By: fhahn\\n\\nDifferential Revision: https://reviews.llvm.org/D146958\", \"tree\": {\"sha\": \"362c81e112551b51452030e1d91e4f3743225c62\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/362c81e112551b51452030e1d91e4f3743225c62\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/9cf1881f8f12a70c28432278a2878a6113c017c1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9cf1881f8f12a70c28432278a2878a6113c017c1\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/9cf1881f8f12a70c28432278a2878a6113c017c1\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9cf1881f8f12a70c28432278a2878a6113c017c1/comments\", \"author\": {\"login\": \"pawosm-arm\", \"id\": 20681839, \"node_id\": \"MDQ6VXNlcjIwNjgxODM5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20681839?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pawosm-arm\", \"html_url\": \"https://github.com/pawosm-arm\", \"followers_url\": \"https://api.github.com/users/pawosm-arm/followers\", \"following_url\": \"https://api.github.com/users/pawosm-arm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pawosm-arm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pawosm-arm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pawosm-arm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pawosm-arm/orgs\", \"repos_url\": \"https://api.github.com/users/pawosm-arm/repos\", \"events_url\": \"https://api.github.com/users/pawosm-arm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pawosm-arm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"pawosm-arm\", \"id\": 20681839, \"node_id\": \"MDQ6VXNlcjIwNjgxODM5\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20681839?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pawosm-arm\", \"html_url\": \"https://github.com/pawosm-arm\", \"followers_url\": \"https://api.github.com/users/pawosm-arm/followers\", \"following_url\": \"https://api.github.com/users/pawosm-arm/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pawosm-arm/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pawosm-arm/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pawosm-arm/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pawosm-arm/orgs\", \"repos_url\": \"https://api.github.com/users/pawosm-arm/repos\", \"events_url\": \"https://api.github.com/users/pawosm-arm/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pawosm-arm/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fd527ceff1c7bcaa2c9b5c27a52164cdd16a4ebe\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/fd527ceff1c7bcaa2c9b5c27a52164cdd16a4ebe\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/fd527ceff1c7bcaa2c9b5c27a52164cdd16a4ebe\"}], \"stats\": {\"total\": 11, \"additions\": 7, \"deletions\": 4}, \"files\": [{\"sha\": \"4420d729e2883d44a549c19de34dc74fd7188542\", \"filename\": \"llvm/lib/Analysis/LoopAccessAnalysis.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9cf1881f8f12a70c28432278a2878a6113c017c1/llvm%2Flib%2FAnalysis%2FLoopAccessAnalysis.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9cf1881f8f12a70c28432278a2878a6113c017c1/llvm%2Flib%2FAnalysis%2FLoopAccessAnalysis.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FLoopAccessAnalysis.cpp?ref=9cf1881f8f12a70c28432278a2878a6113c017c1\", \"patch\": \"@@ -2642,6 +2642,11 @@ static Value *getStrideFromPointer(Value *Ptr, ScalarEvolution *SE, Loop *Lp) {\\n   if (!S)\\n     return nullptr;\\n \\n+  // If the pointer is invariant then there is no stride and it makes no\\n+  // sense to add it here.\\n+  if (Lp != S->getLoop())\\n+    return nullptr;\\n+\\n   V = S->getStepRecurrence(*SE);\\n   if (!V)\\n     return nullptr;\"}, {\"sha\": \"60d782815915919e46b444754b3556128fe0588b\", \"filename\": \"llvm/test/Transforms/LoopVectorize/vector-no-scevcheck.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 4, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9cf1881f8f12a70c28432278a2878a6113c017c1/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvector-no-scevcheck.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9cf1881f8f12a70c28432278a2878a6113c017c1/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvector-no-scevcheck.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopVectorize%2Fvector-no-scevcheck.ll?ref=9cf1881f8f12a70c28432278a2878a6113c017c1\", \"patch\": \"@@ -5,8 +5,7 @@\\n \\n define void @foo(ptr %pout, ptr %pin, i64 %val0, i64 %val1, i64 %val2) {\\n ; CHECK-LABEL: @foo(\\n-; FIXME: CHECK below needs to be changed to CHECK-NOT to confirm the change.\\n-; CHECK: vector.scevcheck\\n+; CHECK-NOT: vector.scevcheck\\n ; CHECK: vector.body\\n entry:\\n   %0 = getelementptr double, ptr %pin, i64 %val0\\n@@ -45,8 +44,7 @@ exit:                                             ; preds = %loop1.latch\\n \\n define void @bar(ptr %pout, ptr %pin, i64 %val0, i64 %val1, i64 %val2) {\\n ; CHECK-LABEL: @bar(\\n-; FIXME: CHECK below needs to be changed to CHECK-NOT to confirm the change.\\n-; CHECK: vector.scevcheck\\n+; CHECK-NOT: vector.scevcheck\\n ; CHECK: vector.body\\n entry:\\n   %0 = getelementptr double, ptr %pin, i64 %val0\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9kYzgxZTY5ZWIxMjZlYTFkYmFiMjAyNzMzYWUzNGIxYTNkNmViMGNmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf", "content": "{\"sha\": \"dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"node_id\": \"C_kwDOBITxeNoAKGRjODFlNjllYjEyNmVhMWRiYWIyMDI3MzNhZTM0YjFhM2Q2ZWIwY2Y\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-05-31T09:18:53Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-05-31T09:21:35Z\"}, \"message\": \"[IndVars] Check expansion safety in makeIVComparisonInvariant() (PR62992)\\n\\nMake sure the invariant expressions are safe to expand. In\\nparticular, we should not speculative a trapping division into\\nthe preheader.\\n\\nFixes https://github.com/llvm/llvm-project/issues/62992.\", \"tree\": {\"sha\": \"2fce5cdcaeaadc1d5967f40016e81bd925f159a2\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/2fce5cdcaeaadc1d5967f40016e81bd925f159a2\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8d7e90c3b5d22e31c6af25c2f95b8047038590c4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/8d7e90c3b5d22e31c6af25c2f95b8047038590c4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/8d7e90c3b5d22e31c6af25c2f95b8047038590c4\"}], \"stats\": {\"total\": 52, \"additions\": 50, \"deletions\": 2}, \"files\": [{\"sha\": \"62821f149f4449f3cbfe1a2b409b95c920e6065d\", \"filename\": \"llvm/lib/Transforms/Utils/SimplifyIndVar.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyIndVar.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyIndVar.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FSimplifyIndVar.cpp?ref=dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"patch\": \"@@ -217,8 +217,10 @@ bool SimplifyIndvar::makeIVComparisonInvariant(ICmpInst *ICmp,\\n \\n   // Do not generate something ridiculous.\\n   auto *PHTerm = Preheader->getTerminator();\\n-  if (Rewriter.isHighCostExpansion({ InvariantLHS, InvariantRHS }, L,\\n-                                   2 * SCEVCheapExpansionBudget, TTI, PHTerm))\\n+  if (Rewriter.isHighCostExpansion({InvariantLHS, InvariantRHS}, L,\\n+                                   2 * SCEVCheapExpansionBudget, TTI, PHTerm) ||\\n+      !Rewriter.isSafeToExpandAt(InvariantLHS, PHTerm) ||\\n+      !Rewriter.isSafeToExpandAt(InvariantRHS, PHTerm))\\n     return false;\\n   auto *NewLHS =\\n       Rewriter.expandCodeFor(InvariantLHS, IVOperand->getType(), PHTerm);\"}, {\"sha\": \"c8f47b57f1edaacec8d33f6e55f04e79a7016ce7\", \"filename\": \"llvm/test/Transforms/IndVarSimplify/pr62992.ll\", \"status\": \"added\", \"additions\": 46, \"deletions\": 0, \"changes\": 46, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fpr62992.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fpr62992.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FIndVarSimplify%2Fpr62992.ll?ref=dc81e69eb126ea1dbab202733ae34b1a3d6eb0cf\", \"patch\": \"@@ -0,0 +1,46 @@\\n+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2\\n+; RUN: opt -S -passes=indvars < %s | FileCheck %s\\n+\\n+declare void @use(i1)\\n+\\n+; Make sure the division does not get expanded into the preheader.\\n+\\n+define i32 @test(i32 %arg) {\\n+; CHECK-LABEL: define i32 @test\\n+; CHECK-SAME: (i32 [[ARG:%.*]]) {\\n+; CHECK-NEXT:  entry:\\n+; CHECK-NEXT:    br label [[LOOP:%.*]]\\n+; CHECK:       loop:\\n+; CHECK-NEXT:    br i1 false, label [[IF:%.*]], label [[LOOP_LATCH:%.*]]\\n+; CHECK:       if:\\n+; CHECK-NEXT:    [[DIV:%.*]] = udiv i32 7, [[ARG]]\\n+; CHECK-NEXT:    [[CMP2:%.*]] = icmp ult i32 1, [[DIV]]\\n+; CHECK-NEXT:    call void @use(i1 [[CMP2]])\\n+; CHECK-NEXT:    br label [[LOOP_LATCH]]\\n+; CHECK:       loop.latch:\\n+; CHECK-NEXT:    br i1 false, label [[LOOP]], label [[EXIT:%.*]]\\n+; CHECK:       exit:\\n+; CHECK-NEXT:    ret i32 1\\n+;\\n+entry:\\n+  br label %loop\\n+\\n+loop:\\n+  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\\n+  %iv.next = add i32 %iv, 1\\n+  %cmp = icmp eq i32 %iv, 1\\n+  br i1 %cmp, label %if, label %loop.latch\\n+\\n+if:\\n+  %div = udiv i32 7, %arg\\n+  %cmp2 = icmp ult i32 %iv.next, %div\\n+  call void @use(i1 %cmp2)\\n+  br label %loop.latch\\n+\\n+loop.latch:\\n+  br i1 false, label %loop, label %exit\\n+\\n+exit:\\n+  %inc.lcssa = phi i32 [ %iv.next, %loop.latch ]\\n+  ret i32 %inc.lcssa\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9iZWY4Mjk0NjUwZjAxMTkyMzg4MzBkNzNhNzUyNzAyM2M3YzhhOTdmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/bef8294650f0119238830d73a7527023c7c8a97f", "content": "{\"sha\": \"bef8294650f0119238830d73a7527023c7c8a97f\", \"node_id\": \"C_kwDOBITxeNoAKGJlZjgyOTQ2NTBmMDExOTIzODgzMGQ3M2E3NTI3MDIzYzdjOGE5N2Y\", \"commit\": {\"author\": {\"name\": \"Fangrui Song\", \"email\": \"i@maskray.me\", \"date\": \"2023-06-22T17:03:17Z\"}, \"committer\": {\"name\": \"Fangrui Song\", \"email\": \"i@maskray.me\", \"date\": \"2023-06-22T17:03:17Z\"}, \"message\": \"[XRay] Make xray_instr_map compatible with Mach-O\\n\\nThe `__DATA,xray_instr_map` section has label differences like\\n`.quad Lxray_sled_0-Ltmp0` that is represented as a pair of UNSIGNED and SUBTRACTOR relocations.\\n\\nLLVM integrated assembler attempts to rewrite A-B into A-B'+offset where B' can\\nbe included in the symbol table. B' is called an atom and should be a\\nnon-temporary symbol in the same section. However, since `xray_instr_map` does\\nnot define a non-temporary symbol, the SUBTRACTOR relocation will have no\\nassociated symbol, and its `r_extern` value will be 0. Therefore, we will see\\nlinker errors like:\\n\\n    error: SUBTRACTOR relocation must be extern at offset 0 of __DATA,xray_instr_map in a.o\\n\\nTo fix this issue, we need to define a non-temporary symbol in the section. We\\ncan accomplish this by renaming `Lxray_sleds_start0` to `lxray_sleds_start0`\\n(\\\"L\\\" to \\\"l\\\").\\n\\n`lxray_sleds_start0` serves as the atom for this dead-strippable subsection.\\nWith the `S_ATTR_LIVE_SUPPORT` attribute, `ld -dead_strip` will retain\\nsubsections that reference live functions.\\n\\nSpecial thanks to Oleksii Lozovskyi for reporting the issue and providing\\ninitial analysis.\\n\\nDifferential Revision: https://reviews.llvm.org/D153239\", \"tree\": {\"sha\": \"75478b04364bc38e4a724225b7cf011d68ec28c0\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/75478b04364bc38e4a724225b7cf011d68ec28c0\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/bef8294650f0119238830d73a7527023c7c8a97f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bef8294650f0119238830d73a7527023c7c8a97f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/bef8294650f0119238830d73a7527023c7c8a97f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/bef8294650f0119238830d73a7527023c7c8a97f/comments\", \"author\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"MaskRay\", \"id\": 416322, \"node_id\": \"MDQ6VXNlcjQxNjMyMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/416322?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/MaskRay\", \"html_url\": \"https://github.com/MaskRay\", \"followers_url\": \"https://api.github.com/users/MaskRay/followers\", \"following_url\": \"https://api.github.com/users/MaskRay/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/MaskRay/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/MaskRay/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/MaskRay/subscriptions\", \"organizations_url\": \"https://api.github.com/users/MaskRay/orgs\", \"repos_url\": \"https://api.github.com/users/MaskRay/repos\", \"events_url\": \"https://api.github.com/users/MaskRay/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/MaskRay/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d2fafa79ef08f9ef9cd0108a6caa7fc61a31bdeb\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/d2fafa79ef08f9ef9cd0108a6caa7fc61a31bdeb\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/d2fafa79ef08f9ef9cd0108a6caa7fc61a31bdeb\"}], \"stats\": {\"total\": 73, \"additions\": 38, \"deletions\": 35}, \"files\": [{\"sha\": \"872e53f7b6d4fc4bc96797330df9e95c602ed2fb\", \"filename\": \"llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FCodeGen%2FAsmPrinter%2FAsmPrinter.cpp?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -4033,7 +4033,8 @@ void AsmPrinter::emitXRayTable() {\\n   // per-function, we are able to create an index entry that will represent the\\n   // range of sleds associated with a function.\\n   auto &Ctx = OutContext;\\n-  MCSymbol *SledsStart = OutContext.createTempSymbol(\\\"xray_sleds_start\\\", true);\\n+  MCSymbol *SledsStart =\\n+      OutContext.createLinkerPrivateSymbol(\\\"xray_sleds_start\\\");\\n   OutStreamer->switchSection(InstMap);\\n   OutStreamer->emitLabel(SledsStart);\\n   for (const auto &Sled : Sleds) {\"}, {\"sha\": \"a1017891db7d89146e7ba542902d39f2e8b950ec\", \"filename\": \"llvm/test/CodeGen/AArch64/xray-attribute-instrumentation.ll\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 3, \"changes\": 6, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-attribute-instrumentation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-attribute-instrumentation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-attribute-instrumentation.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -22,7 +22,7 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end0:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n@@ -48,7 +48,7 @@ define i32 @bar() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-never\\\" \\\"\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end1:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:         .quad Lxray_sled_2\\n ; CHECK-MACOS:         .quad Lxray_sled_3\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n@@ -74,7 +74,7 @@ define i32 @instrumented() nounwind noinline uwtable \\\"xray-instruction-threshold\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end2:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start2:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start2:\\n ; CHECK-MACOS:         .quad Lxray_sled_4\\n ; CHECK-MACOS:         .quad Lxray_sled_5\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end2:\"}, {\"sha\": \"54a45e03d0f05ec2249895126c74fa60c67049ae\", \"filename\": \"llvm/test/CodeGen/AArch64/xray-omit-function-index.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-omit-function-index.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-omit-function-index.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-omit-function-index.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -32,7 +32,7 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end0:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\"}, {\"sha\": \"97717d6e2fc8c3c8828ae3fe71e4607037d44bcb\", \"filename\": \"llvm/test/CodeGen/AArch64/xray-partial-instrumentation-skip-entry.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-entry.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-entry.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-entry.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -23,6 +23,6 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end0:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\"}, {\"sha\": \"189be432a3443ea18b2052bf5a4b8c5873ead1a3\", \"filename\": \"llvm/test/CodeGen/AArch64/xray-partial-instrumentation-skip-exit.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-exit.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-exit.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-partial-instrumentation-skip-exit.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -23,6 +23,6 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-LABEL: Lxray_sleds_end0:\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\"}, {\"sha\": \"484dca11104ad0f0224dcb6414bcf50dd3b95b59\", \"filename\": \"llvm/test/CodeGen/AArch64/xray-tail-call-sled.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-tail-call-sled.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-tail-call-sled.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FAArch64%2Fxray-tail-call-sled.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -29,15 +29,15 @@ define i32 @callee() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-alway\\n ; CHECK-LINUX-NEXT:    .xword 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS-NEXT:  [[TMP:Ltmp[0-9]+]]:\\n ; CHECK-MACOS:         .quad Lxray_sled_0-[[TMP]]\\n ; CHECK-MACOS:       [[TMP:Ltmp[0-9]+]]:\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sled_1-[[TMP]]\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start0-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start0-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\\n \\n define i32 @caller() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" {\\n@@ -68,11 +68,11 @@ define i32 @caller() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-alway\\n ; CHECK-LINUX-NEXT:    .xword 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:         .quad Lxray_sled_2\\n ; CHECK-MACOS:         .quad Lxray_sled_3\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start1-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start1-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\"}, {\"sha\": \"425ffc33bf810f4d96da7624959c91ee048b777b\", \"filename\": \"llvm/test/CodeGen/ARM/xray-armv6-attribute-instrumentation.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv6-attribute-instrumentation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv6-attribute-instrumentation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv6-attribute-instrumentation.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -34,10 +34,10 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-NEXT:    .long 2\\n \\n ; CHECK-IOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-IOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-IOS-LABEL: lxray_sleds_start0:\\n ; CHECK-IOS:         .long Lxray_sled_0\\n ; CHECK-IOS:         .long Lxray_sled_1\\n ; CHECK-IOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-IOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n-; CHECK-IOS:         .long Lxray_sleds_start0-lxray_fn_idx0\\n+; CHECK-IOS:         .long lxray_sleds_start0-lxray_fn_idx0\\n ; CHECK-IOS-NEXT:    .long 2\"}, {\"sha\": \"745a8562a8f291550035e8adba750cf72b7b956f\", \"filename\": \"llvm/test/CodeGen/ARM/xray-armv7-attribute-instrumentation.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv7-attribute-instrumentation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv7-attribute-instrumentation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FARM%2Fxray-armv7-attribute-instrumentation.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -25,11 +25,11 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-NEXT:    .long 2\\n \\n ; CHECK-IOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-IOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-IOS-LABEL: lxray_sleds_start0:\\n ; CHECK-IOS:         .long Lxray_sled_0\\n ; CHECK-IOS:         .long Lxray_sled_1\\n ; CHECK-IOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-IOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-IOS:       lxray_fn_idx0:\\n-; CHECK-IOS:         .long Lxray_sleds_start0-lxray_fn_idx0\\n+; CHECK-IOS:         .long lxray_sleds_start0-lxray_fn_idx0\\n ; CHECK-IOS-NEXT:    .long 2\"}, {\"sha\": \"9cebffc3abe9ab8f2711d1527d0c01aa1507e726\", \"filename\": \"llvm/test/CodeGen/X86/xray-attribute-instrumentation.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-attribute-instrumentation.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-attribute-instrumentation.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-attribute-instrumentation.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -25,13 +25,13 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-NEXT:    .quad 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start0-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start0-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\\n \\n \\n@@ -74,7 +74,7 @@ NotEqual:\\n ; CHECK-LINUX-NEXT:    .quad 3\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:       [[TMP:Ltmp[0-9]+]]:\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sled_2-[[TMP]]\\n ; CHECK-MACOS:       [[TMP:Ltmp[0-9]+]]:\\n@@ -84,5 +84,5 @@ NotEqual:\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start1-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start1-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 3\"}, {\"sha\": \"240a6392f276cd8a69de3e88dbda966f1074e68a\", \"filename\": \"llvm/test/CodeGen/X86/xray-log-args.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-log-args.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-log-args.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-log-args.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -25,7 +25,7 @@ define i32 @callee(i32 %arg) nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xr\\n ; CHECK-LINUX-NEXT:    .byte 0x02\\n ; CHECK-LINUX:         .zero 13\\n \\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS-NEXT:  [[TMP:Ltmp[0-9]+]]:\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sled_0-[[TMP]]\\n ; CHECK-MACOS-NEXT:    .quad Lfunc_begin0-([[TMP]]+8)\\n@@ -62,7 +62,7 @@ define i32 @caller(i32 %arg) nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xr\\n ; CHECK-LINUX-NEXT:    .byte 0x02\\n ; CHECK-LINUX:         .zero 13\\n \\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS-NEXT:  [[TMP:Ltmp[0-9]+]]:\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sled_2-[[TMP]]\\n ; CHECK-MACOS-NEXT:    .quad Lfunc_begin1-([[TMP]]+8)\"}, {\"sha\": \"f58d743d465dddde0bbe28fc04ef27c025c93422\", \"filename\": \"llvm/test/CodeGen/X86/xray-partial-instrumentation-skip-entry.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-entry.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-entry.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-entry.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -21,12 +21,12 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX-NEXT:    .quad 1\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start0-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start0-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 1\\n \\n \\n@@ -62,11 +62,11 @@ NotEqual:\\n ; CHECK-LINUX-NEXT:    .quad 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS:         .quad Lxray_sled_2\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start1-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start1-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\"}, {\"sha\": \"3d631d73b68c506c20fb7bbd8fcbd8602446e19d\", \"filename\": \"llvm/test/CodeGen/X86/xray-partial-instrumentation-skip-exit.ll\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 6, \"changes\": 14, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-exit.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-exit.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-partial-instrumentation-skip-exit.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -18,15 +18,17 @@ define i32 @foo() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\"\\n ; CHECK-LINUX:         .quad .Lxray_sled_0\\n ; CHECK-LINUX-LABEL: .Lxray_sleds_end0:\\n ; CHECK-LINUX-LABEL: .section xray_fn_idx,\\\"awo\\\",@progbits,foo{{$}}\\n-; CHECK-LINUX:         .quad .Lxray_sleds_start0\\n+; CHECK-LINUX:       [[IDX:.lxray_fn_idx[0-9]+]]:\\n+; CHECK-LINUX:         .quad .Lxray_sleds_start0-[[IDX]]\\n ; CHECK-LINUX-NEXT:    .quad .Lxray_sleds_end0\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n-; CHECK-MACOS:         .quad Lxray_sleds_start0\\n+; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n+; CHECK-MACOS:         .quad lxray_sleds_start0-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sleds_end0\\n \\n \\n@@ -57,13 +59,13 @@ NotEqual:\\n ; CHECK-LINUX-LABEL: .section xray_fn_idx,\\\"awo\\\",@progbits,bar{[$}}\\n ; CHECK-LINUX:       .Lxray_fn_idx0:\\n ; CHECK-LINUX-NEXT:    .quad .Lxray_sleds_start1-.Lxray_fn_idx0\\n-; CHECK-LINUX-NEXT:    .quad .Lxray_sleds_end1\\n+; CHECK-LINUX-NEXT:    .quad 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       Lxray_fn_idx0:\\n ; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start1-Lxray_fn_idx0\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_end1\\n+; CHECK-MACOS-NEXT:    .quad 2\"}, {\"sha\": \"4d0c359f0dc3191abde01eebaf29dd9096671335\", \"filename\": \"llvm/test/CodeGen/X86/xray-tail-call-sled.ll\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 4, \"changes\": 8, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-tail-call-sled.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/bef8294650f0119238830d73a7527023c7c8a97f/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-tail-call-sled.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FCodeGen%2FX86%2Fxray-tail-call-sled.ll?ref=bef8294650f0119238830d73a7527023c7c8a97f\", \"patch\": \"@@ -24,13 +24,13 @@ define dso_local i32 @callee() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"\\n ; CHECK-LINUX-NEXT:    .quad 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start0:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start0:\\n ; CHECK-MACOS:         .quad Lxray_sled_0\\n ; CHECK-MACOS:         .quad Lxray_sled_1\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end0:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start0-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start0-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\\n \\n define dso_local i32 @caller() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"xray-always\\\" {\\n@@ -58,11 +58,11 @@ define dso_local i32 @caller() nounwind noinline uwtable \\\"function-instrument\\\"=\\\"\\n ; CHECK-LINUX-NEXT:    .quad 2\\n \\n ; CHECK-MACOS-LABEL: .section __DATA,xray_instr_map,regular,live_support{{$}}\\n-; CHECK-MACOS-LABEL: Lxray_sleds_start1:\\n+; CHECK-MACOS-LABEL: lxray_sleds_start1:\\n ; CHECK-MACOS:         .quad Lxray_sled_2\\n ; CHECK-MACOS:         .quad Lxray_sled_3\\n ; CHECK-MACOS-LABEL: Lxray_sleds_end1:\\n ; CHECK-MACOS-LABEL: .section __DATA,xray_fn_idx,regular,live_support{{$}}\\n ; CHECK-MACOS:       [[IDX:lxray_fn_idx[0-9]+]]:\\n-; CHECK-MACOS-NEXT:    .quad Lxray_sleds_start1-[[IDX]]\\n+; CHECK-MACOS-NEXT:    .quad lxray_sleds_start1-[[IDX]]\\n ; CHECK-MACOS-NEXT:    .quad 2\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81YTQwNmI2M2U5ZDcwMjI1Y2Q1NmZkNWMzYjc5MWU3OGY0YWVkM2NjIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc", "content": "{\"sha\": \"5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"node_id\": \"C_kwDOBITxeNoAKDVhNDA2YjYzZTlkNzAyMjVjZDU2ZmQ1YzNiNzkxZTc4ZjRhZWQzY2M\", \"commit\": {\"author\": {\"name\": \"Johannes Doerfert\", \"email\": \"johannes@jdoerfert.de\", \"date\": \"2023-08-11T18:17:47Z\"}, \"committer\": {\"name\": \"Johannes Doerfert\", \"email\": \"johannes@jdoerfert.de\", \"date\": \"2023-08-11T21:17:33Z\"}, \"message\": \"[Attributor][FIX] Stores capture, even for readonly functions\\n\\nIf we end up visiting a store use, we couldn't follow to the \\\"reloads\\\".\\nThe capture effect of a store is more than memory as the reloads are\\nunknown.\\n\\nFixes: https://github.com/llvm/llvm-project/issues/64613\", \"tree\": {\"sha\": \"98d7c2844b5ec2e513186251acff532a01c16714\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/98d7c2844b5ec2e513186251acff532a01c16714\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc/comments\", \"author\": {\"login\": \"jdoerfert\", \"id\": 6248191, \"node_id\": \"MDQ6VXNlcjYyNDgxOTE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6248191?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jdoerfert\", \"html_url\": \"https://github.com/jdoerfert\", \"followers_url\": \"https://api.github.com/users/jdoerfert/followers\", \"following_url\": \"https://api.github.com/users/jdoerfert/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jdoerfert/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jdoerfert/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jdoerfert/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jdoerfert/orgs\", \"repos_url\": \"https://api.github.com/users/jdoerfert/repos\", \"events_url\": \"https://api.github.com/users/jdoerfert/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jdoerfert/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"jdoerfert\", \"id\": 6248191, \"node_id\": \"MDQ6VXNlcjYyNDgxOTE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6248191?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/jdoerfert\", \"html_url\": \"https://github.com/jdoerfert\", \"followers_url\": \"https://api.github.com/users/jdoerfert/followers\", \"following_url\": \"https://api.github.com/users/jdoerfert/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/jdoerfert/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/jdoerfert/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/jdoerfert/subscriptions\", \"organizations_url\": \"https://api.github.com/users/jdoerfert/orgs\", \"repos_url\": \"https://api.github.com/users/jdoerfert/repos\", \"events_url\": \"https://api.github.com/users/jdoerfert/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/jdoerfert/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3d53744b871f93b5062a33b7e854d9d46bdfdae5\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/3d53744b871f93b5062a33b7e854d9d46bdfdae5\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/3d53744b871f93b5062a33b7e854d9d46bdfdae5\"}], \"stats\": {\"total\": 8, \"additions\": 4, \"deletions\": 4}, \"files\": [{\"sha\": \"e4b79acf3f02e3ff63271851520501215c432dec\", \"filename\": \"llvm/lib/Transforms/IPO/AttributorAttributes.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc/llvm%2Flib%2FTransforms%2FIPO%2FAttributorAttributes.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc/llvm%2Flib%2FTransforms%2FIPO%2FAttributorAttributes.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FIPO%2FAttributorAttributes.cpp?ref=5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"patch\": \"@@ -5885,8 +5885,8 @@ struct AANoCaptureImpl : public AANoCapture {\\n     // For stores we already checked if we can follow them, if they make it\\n     // here we give up.\\n     if (isa<StoreInst>(UInst))\\n-      return isCapturedIn(State, /* Memory */ true, /* Integer */ false,\\n-                          /* Return */ false);\\n+      return isCapturedIn(State, /* Memory */ true, /* Integer */ true,\\n+                          /* Return */ true);\\n \\n     // Explicitly catch return instructions.\\n     if (isa<ReturnInst>(UInst)) {\"}, {\"sha\": \"1e5e9da19909f6431cd73b8dfe9bf1a11a7437c0\", \"filename\": \"llvm/test/Transforms/Attributor/nocapture-2.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc/llvm%2Ftest%2FTransforms%2FAttributor%2Fnocapture-2.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/5a406b63e9d70225cd56fd5c3b791e78f4aed3cc/llvm%2Ftest%2FTransforms%2FAttributor%2Fnocapture-2.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FAttributor%2Fnocapture-2.ll?ref=5a406b63e9d70225cd56fd5c3b791e78f4aed3cc\", \"patch\": \"@@ -756,7 +756,7 @@ define ptr @b64613_a(ptr noundef %p) {\\n define ptr @b64613_b(ptr noundef %p, i32 %i) {\\n ; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)\\n ; TUNIT-LABEL: define ptr @b64613_b\\n-; TUNIT-SAME: (ptr nocapture nofree noundef [[P:%.*]], i32 [[I:%.*]]) #[[ATTR11]] {\\n+; TUNIT-SAME: (ptr nofree noundef [[P:%.*]], i32 [[I:%.*]]) #[[ATTR11]] {\\n ; TUNIT-NEXT:    [[P_ADDR:%.*]] = alloca <2 x ptr>, align 1\\n ; TUNIT-NEXT:    [[G:%.*]] = getelementptr i8, ptr [[P_ADDR]], i32 [[I]]\\n ; TUNIT-NEXT:    store ptr [[P]], ptr [[G]], align 1\\n@@ -765,7 +765,7 @@ define ptr @b64613_b(ptr noundef %p, i32 %i) {\\n ;\\n ; CGSCC: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)\\n ; CGSCC-LABEL: define ptr @b64613_b\\n-; CGSCC-SAME: (ptr nocapture nofree noundef [[P:%.*]], i32 [[I:%.*]]) #[[ATTR12]] {\\n+; CGSCC-SAME: (ptr nofree noundef [[P:%.*]], i32 [[I:%.*]]) #[[ATTR12]] {\\n ; CGSCC-NEXT:    [[P_ADDR:%.*]] = alloca <2 x ptr>, align 1\\n ; CGSCC-NEXT:    [[G:%.*]] = getelementptr i8, ptr [[P_ADDR]], i32 [[I]]\\n ; CGSCC-NEXT:    store ptr [[P]], ptr [[G]], align 1\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9jMTVjY2ZiMjRhZmE2N2QzYzNmNTRlNTJjYzFkMWFmYTU2NDcxNWVkIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed", "content": "{\"sha\": \"c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"node_id\": \"C_kwDOBITxeNoAKGMxNWNjZmIyNGFmYTY3ZDNjM2Y1NGU1MmNjMWQxYWZhNTY0NzE1ZWQ\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-08-14T15:39:48Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-08-14T15:44:23Z\"}, \"message\": \"[InstCombine] Fix select + cast fold with constant expression (PR64669)\\n\\nThe zext constant expression was detected by the fold, but then\\nhandled as a sext. Use ZExtOperator instead of ZExtInst to handle\\nconstant expressions.\\n\\nFixes https://github.com/llvm/llvm-project/issues/64669.\", \"tree\": {\"sha\": \"3d7721a566c48e456e720cae1303ef357f1766ca\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/3d7721a566c48e456e720cae1303ef357f1766ca\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f44beecb78d25dca27de74823e1d958c8bd57d31\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/f44beecb78d25dca27de74823e1d958c8bd57d31\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/f44beecb78d25dca27de74823e1d958c8bd57d31\"}], \"stats\": {\"total\": 18, \"additions\": 17, \"deletions\": 1}, \"files\": [{\"sha\": \"2722160e72c1499601c3d72bec0f91faf70b5ef4\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstructionCombining.cpp?ref=c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"patch\": \"@@ -908,7 +908,7 @@ InstCombinerImpl::foldBinOpOfSelectAndCastOfSelectCondition(BinaryOperator &I) {\\n \\n   auto NewFoldedConst = [&](bool IsTrueArm, Value *V) {\\n     bool IsCastOpRHS = (CastOp == RHS);\\n-    bool IsZExt = isa<ZExtInst>(CastOp);\\n+    bool IsZExt = isa<ZExtOperator>(CastOp);\\n     Constant *C;\\n \\n     if (IsTrueArm) {\"}, {\"sha\": \"6cf8bb73c9ff76af89db5b4bc9343bbf9fda11a5\", \"filename\": \"llvm/test/Transforms/InstCombine/binop-select-cast-of-select-cond.ll\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed/llvm%2Ftest%2FTransforms%2FInstCombine%2Fbinop-select-cast-of-select-cond.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/c15ccfb24afa67d3c3f54e52cc1d1afa564715ed/llvm%2Ftest%2FTransforms%2FInstCombine%2Fbinop-select-cast-of-select-cond.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fbinop-select-cast-of-select-cond.ll?ref=c15ccfb24afa67d3c3f54e52cc1d1afa564715ed\", \"patch\": \"@@ -224,3 +224,19 @@ define <2 x i8> @vectorized_add(<2 x i1> %c, <2 x i8> %arg) {\\n   %add = add <2 x i8> %sel, %zext\\n   ret <2 x i8> %add\\n }\\n+\\n+@b = external global [72 x i32]\\n+@c = external global i32\\n+\\n+define i64 @pr64669(i64 %a) {\\n+; CHECK-LABEL: define i64 @pr64669\\n+; CHECK-SAME: (i64 [[A:%.*]]) {\\n+; CHECK-NEXT:    [[TMP1:%.*]] = add i64 [[A]], 1\\n+; CHECK-NEXT:    [[ADD:%.*]] = select i1 icmp ne (ptr getelementptr inbounds ([72 x i32], ptr @b, i64 0, i64 25), ptr @c), i64 [[TMP1]], i64 0\\n+; CHECK-NEXT:    ret i64 [[ADD]]\\n+;\\n+  %mul = select i1 icmp ne (ptr getelementptr inbounds ([72 x i32], ptr @b, i64 0, i64 25), ptr @c), i64 %a, i64 0\\n+  %conv3 = zext i1 icmp ne (ptr getelementptr inbounds ([72 x i32], ptr @b, i64 0, i64 25), ptr @c) to i64\\n+  %add = add nsw i64 %mul, %conv3\\n+  ret i64 %add\\n+}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy81N2E1NTQ4MDBiODA0YTBkODQ5ODU4OTcyODIyMTQyZTFmNzVkMzdmIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/57a554800b804a0d849858972822142e1f75d37f", "content": "{\"sha\": \"57a554800b804a0d849858972822142e1f75d37f\", \"node_id\": \"C_kwDOBITxeNoAKDU3YTU1NDgwMGI4MDRhMGQ4NDk4NTg5NzI4MjIxNDJlMWY3NWQzN2Y\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-09-20T12:10:01Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-09-20T12:12:31Z\"}, \"message\": \"[SROA] Don't shrink volatile load past end\\n\\nFor volatile atomic, this may result in a verifier errors, if the\\nnew alloca type is not legal for atomic accesses.\\n\\nI've opted to disable this special case for volatile accesses in\\ngeneral, as changing the size of the volatile access seems\\ndubious in any case.\\n\\nFixes https://github.com/llvm/llvm-project/issues/64721.\", \"tree\": {\"sha\": \"4a0a596dc877b748e87ab8e1fb11dae356e23cfe\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/4a0a596dc877b748e87ab8e1fb11dae356e23cfe\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/57a554800b804a0d849858972822142e1f75d37f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/57a554800b804a0d849858972822142e1f75d37f\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/57a554800b804a0d849858972822142e1f75d37f\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/57a554800b804a0d849858972822142e1f75d37f/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"24f437f31e0b4bcf9e55e55ebe986e544d89e5cd\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/24f437f31e0b4bcf9e55e55ebe986e544d89e5cd\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/24f437f31e0b4bcf9e55e55ebe986e544d89e5cd\"}], \"stats\": {\"total\": 34, \"additions\": 33, \"deletions\": 1}, \"files\": [{\"sha\": \"9612799e48337cc5940d5fc7a05f93545c3388ad\", \"filename\": \"llvm/lib/Transforms/Scalar/SROA.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/57a554800b804a0d849858972822142e1f75d37f/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/57a554800b804a0d849858972822142e1f75d37f/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FSROA.cpp?ref=57a554800b804a0d849858972822142e1f75d37f\", \"patch\": \"@@ -2713,7 +2713,7 @@ class llvm::sroa::AllocaSliceRewriter\\n                NewEndOffset == NewAllocaEndOffset &&\\n                (canConvertValue(DL, NewAllocaTy, TargetTy) ||\\n                 (IsLoadPastEnd && NewAllocaTy->isIntegerTy() &&\\n-                 TargetTy->isIntegerTy()))) {\\n+                 TargetTy->isIntegerTy() && !LI.isVolatile()))) {\\n       Value *NewPtr =\\n           getPtrToNewAI(LI.getPointerAddressSpace(), LI.isVolatile());\\n       LoadInst *NewLI = IRB.CreateAlignedLoad(NewAI.getAllocatedType(), NewPtr,\"}, {\"sha\": \"145da5259fab36a90e701a3f0f7a7973c92948b9\", \"filename\": \"llvm/test/Transforms/SROA/basictest.ll\", \"status\": \"modified\", \"additions\": 32, \"deletions\": 0, \"changes\": 32, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/57a554800b804a0d849858972822142e1f75d37f/llvm%2Ftest%2FTransforms%2FSROA%2Fbasictest.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/57a554800b804a0d849858972822142e1f75d37f/llvm%2Ftest%2FTransforms%2FSROA%2Fbasictest.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FSROA%2Fbasictest.ll?ref=57a554800b804a0d849858972822142e1f75d37f\", \"patch\": \"@@ -1968,6 +1968,38 @@ bb7:\\n   ret void\\n }\\n \\n+define i32 @load_atomic_volatile_past_end() {\\n+; CHECK-LABEL: @load_atomic_volatile_past_end(\\n+; CHECK-NEXT:    [[A:%.*]] = alloca i1, align 1\\n+; CHECK-NEXT:    [[A_0_V:%.*]] = load atomic volatile i32, ptr [[A]] seq_cst, align 1\\n+; CHECK-NEXT:    ret i32 [[A_0_V]]\\n+;\\n+  %a = alloca i1, align 1\\n+  %v = load atomic volatile i32, ptr %a seq_cst, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define i32 @load_volatile_past_end() {\\n+; CHECK-LABEL: @load_volatile_past_end(\\n+; CHECK-NEXT:    [[A:%.*]] = alloca i1, align 1\\n+; CHECK-NEXT:    [[A_0_V:%.*]] = load volatile i32, ptr [[A]], align 1\\n+; CHECK-NEXT:    ret i32 [[A_0_V]]\\n+;\\n+  %a = alloca i1, align 1\\n+  %v = load volatile i32, ptr %a, align 4\\n+  ret i32 %v\\n+}\\n+\\n+define i32 @load_atomic_past_end() {\\n+; CHECK-LABEL: @load_atomic_past_end(\\n+; CHECK-NEXT:    [[A_0_LOAD_EXT:%.*]] = zext i1 undef to i32\\n+; CHECK-NEXT:    ret i32 [[A_0_LOAD_EXT]]\\n+;\\n+  %a = alloca i1, align 1\\n+  %v = load atomic i32, ptr %a seq_cst, align 4\\n+  ret i32 %v\\n+}\\n+\\n !0 = !{!1, !1, i64 0, i64 200}\\n !1 = !{!2, i64 1, !\\\"type_0\\\"}\\n !2 = !{!\\\"root\\\"}\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9lOGQ1ZGIyMDZjMmY1YzRhZmFjODI4OGFiOTYxOTNhNTYzODI3MGFlIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/e8d5db206c2f5c4afac8288ab96193a5638270ae", "content": "{\"sha\": \"e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"node_id\": \"C_kwDOBITxeNoAKGU4ZDVkYjIwNmMyZjVjNGFmYWM4Mjg4YWI5NjE5M2E1NjM4MjcwYWU\", \"commit\": {\"author\": {\"name\": \"Aleksandr Popov\", \"email\": \"42888396+aleks-tmb@users.noreply.github.com\", \"date\": \"2023-10-31T13:02:42Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-10-31T13:02:42Z\"}, \"message\": \"[LoopPeeling] Fix weights updating of peeled off branches (#70094)\\n\\nIn https://reviews.llvm.org/D64235 a new algorithm has been introduced\\r\\nfor updating the branch weights of latch blocks and their copies.\\r\\n\\r\\nIt increases the probability of going to the exit block for each next\\r\\npeel iteration, calculating weights by (F - I * E, E), where:\\r\\n- F is a weight of the edge from latch to header.\\r\\n- E is a weight of the edge from latch to exit.\\r\\n- I is a number of peeling iteration.\\r\\n\\r\\nE.g: Let's say the latch branch weights are (100,300) and the estimated\\r\\ntrip count is 4. If we peel off all 4 iterations the weights of the\\r\\ncopied branches will be:\\r\\n0: (100,300)\\r\\n1: (100,200)\\r\\n2: (100,100)\\r\\n3: (100,1)\\r\\n\\r\\nhttps://godbolt.org/z/93KnoEsT6\\r\\n\\r\\nSo we make the original loop almost unreachable from the 3rd peeled copy\\r\\naccording to the profile data. But that's only true if the profiling\\r\\ndata is accurate.\\r\\nUnderestimated trip count can lead to a performance issues with the\\r\\nregister allocator, which may decide to spill intervals inside the loop\\r\\nassuming it's unreachable.\\r\\n\\r\\nSince we don't know how accurate the profiling data is, it seems better\\r\\nto set neutral 1/1 weights on the last peeled latch branch. After this\\r\\nchange, the weights in the example above will look like this:\\r\\n0: (100,300)\\r\\n1: (100,200)\\r\\n2: (100,100)\\r\\n3: (100,100)\\r\\n\\r\\nCo-authored-by: Aleksandr Popov <apopov@azul.com>\", \"tree\": {\"sha\": \"42aed00ef25df6d2f8203ddc4583745a5c4eeb64\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/42aed00ef25df6d2f8203ddc4583745a5c4eeb64\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlQPryCRBK7hj4Ov3rIwAAgYUIADR4iEQH2STbN92oV/UO1bzy\\nwWdbsqfFWTknr9N5H6Lj0C8wTOZC4SKwORADu+t1heUQPIcqLZ/hkbJLlDVUSFjr\\nTG+qaY/s1n1xl5hAX15AUsjxKJInOFKYg++/WYNmBojJBhwkuBSK5lwRz2g+RKQz\\nJ4M3lnIGjVcY5eO7DiX/SZKunFTjSvQuIX+p6Ri0hQbiJfAn5ZexgEGhlrJ9Aljz\\n4sVMi/qnf0KmoW8zP1VlwNPBZkMo3Kf7xebQVQpwmrnJjUxtc1CD4xBmmzDNoYma\\nFIht/LLb9IWW2OeL/eGD08hzHX0ntwxEVMhNzUdApVZgVaVIdvuv1r4V/U9iUMQ=\\n=NuVI\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 42aed00ef25df6d2f8203ddc4583745a5c4eeb64\\nparent e62d25e37d3f218b6dbe4289a8cf7f32c5bc110b\\nauthor Aleksandr Popov <42888396+aleks-tmb@users.noreply.github.com> 1698757362 +0100\\ncommitter GitHub <noreply@github.com> 1698757362 +0100\\n\\n[LoopPeeling] Fix weights updating of peeled off branches (#70094)\\n\\nIn https://reviews.llvm.org/D64235 a new algorithm has been introduced\\r\\nfor updating the branch weights of latch blocks and their copies.\\r\\n\\r\\nIt increases the probability of going to the exit block for each next\\r\\npeel iteration, calculating weights by (F - I * E, E), where:\\r\\n- F is a weight of the edge from latch to header.\\r\\n- E is a weight of the edge from latch to exit.\\r\\n- I is a number of peeling iteration.\\r\\n\\r\\nE.g: Let's say the latch branch weights are (100,300) and the estimated\\r\\ntrip count is 4. If we peel off all 4 iterations the weights of the\\r\\ncopied branches will be:\\r\\n0: (100,300)\\r\\n1: (100,200)\\r\\n2: (100,100)\\r\\n3: (100,1)\\r\\n\\r\\nhttps://godbolt.org/z/93KnoEsT6\\r\\n\\r\\nSo we make the original loop almost unreachable from the 3rd peeled copy\\r\\naccording to the profile data. But that's only true if the profiling\\r\\ndata is accurate.\\r\\nUnderestimated trip count can lead to a performance issues with the\\r\\nregister allocator, which may decide to spill intervals inside the loop\\r\\nassuming it's unreachable.\\r\\n\\r\\nSince we don't know how accurate the profiling data is, it seems better\\r\\nto set neutral 1/1 weights on the last peeled latch branch. After this\\r\\nchange, the weights in the example above will look like this:\\r\\n0: (100,300)\\r\\n1: (100,200)\\r\\n2: (100,100)\\r\\n3: (100,100)\\r\\n\\r\\nCo-authored-by: Aleksandr Popov <apopov@azul.com>\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e8d5db206c2f5c4afac8288ab96193a5638270ae/comments\", \"author\": {\"login\": \"aleks-tmb\", \"id\": 42888396, \"node_id\": \"MDQ6VXNlcjQyODg4Mzk2\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/42888396?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/aleks-tmb\", \"html_url\": \"https://github.com/aleks-tmb\", \"followers_url\": \"https://api.github.com/users/aleks-tmb/followers\", \"following_url\": \"https://api.github.com/users/aleks-tmb/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/aleks-tmb/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/aleks-tmb/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/aleks-tmb/subscriptions\", \"organizations_url\": \"https://api.github.com/users/aleks-tmb/orgs\", \"repos_url\": \"https://api.github.com/users/aleks-tmb/repos\", \"events_url\": \"https://api.github.com/users/aleks-tmb/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/aleks-tmb/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e62d25e37d3f218b6dbe4289a8cf7f32c5bc110b\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/e62d25e37d3f218b6dbe4289a8cf7f32c5bc110b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/e62d25e37d3f218b6dbe4289a8cf7f32c5bc110b\"}], \"stats\": {\"total\": 21, \"additions\": 12, \"deletions\": 9}, \"files\": [{\"sha\": \"2881444206b0bb5902f398a2740dda7be778dcd8\", \"filename\": \"llvm/lib/Transforms/Utils/LoopPeel.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 3, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Flib%2FTransforms%2FUtils%2FLoopPeel.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Flib%2FTransforms%2FUtils%2FLoopPeel.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FUtils%2FLoopPeel.cpp?ref=e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"patch\": \"@@ -636,9 +636,14 @@ static void updateBranchWeights(Instruction *Term, WeightInfo &Info) {\\n                     MDB.createBranchWeights(Info.Weights));\\n   for (auto [Idx, SubWeight] : enumerate(Info.SubWeights))\\n     if (SubWeight != 0)\\n-      Info.Weights[Idx] = Info.Weights[Idx] > SubWeight\\n-                              ? Info.Weights[Idx] - SubWeight\\n-                              : 1;\\n+      // Don't set the probability of taking the edge from latch to loop header\\n+      // to less than 1:1 ratio (meaning Weight should not be lower than\\n+      // SubWeight), as this could significantly reduce the loop's hotness,\\n+      // which would be incorrect in the case of underestimating the trip count.\\n+      Info.Weights[Idx] =\\n+          Info.Weights[Idx] > SubWeight\\n+              ? std::max(Info.Weights[Idx] - SubWeight, SubWeight)\\n+              : SubWeight;\\n }\\n \\n /// Initialize the weights for all exiting blocks.\"}, {\"sha\": \"d91cb5bab3827828c8273550f4eac5e93d308035\", \"filename\": \"llvm/test/Transforms/LoopUnroll/peel-loop-pgo-deopt.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo-deopt.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo-deopt.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo-deopt.ll?ref=e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"patch\": \"@@ -21,7 +21,7 @@\\n ; CHECK: br i1 %{{.*}}, label %[[NEXT2:.*]], label %for.cond.for.end_crit_edge, !prof !18\\n ; CHECK: [[NEXT2]]:\\n ; CHECK: br i1 %c, label %{{.*}}, label %side_exit.loopexit, !prof !15\\n-; CHECK: br i1 %{{.*}}, label %for.body, label %{{.*}}, !prof !19\\n+; CHECK: br i1 %{{.*}}, label %for.body, label %{{.*}}, !prof !18\\n \\n define i32 @basic(ptr %p, i32 %k, i1 %c) #0 !prof !15 {\\n entry:\\n@@ -85,6 +85,5 @@ attributes #1 = { nounwind optsize }\\n ; This is a weights of latch and its copies.\\n ;CHECK: !16 = !{!\\\"branch_weights\\\", i32 3001, i32 1001}\\n ;CHECK: !17 = !{!\\\"branch_weights\\\", i32 2000, i32 1001}\\n-;CHECK: !18 = !{!\\\"branch_weights\\\", i32 999, i32 1001}\\n-;CHECK: !19 = !{!\\\"branch_weights\\\", i32 1, i32 1001}\\n+;CHECK: !18 = !{!\\\"branch_weights\\\", i32 1001, i32 1001}\\n \"}, {\"sha\": \"15dce234baee91d575dfe286b26521ef9fa4e0b4\", \"filename\": \"llvm/test/Transforms/LoopUnroll/peel-loop-pgo.ll\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/e8d5db206c2f5c4afac8288ab96193a5638270ae/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FLoopUnroll%2Fpeel-loop-pgo.ll?ref=e8d5db206c2f5c4afac8288ab96193a5638270ae\", \"patch\": \"@@ -24,7 +24,7 @@\\n ; CHECK: [[NEXT1]]:\\n ; CHECK: br i1 %{{.*}}, label %[[NEXT2:.*]], label %for.cond.for.end_crit_edge, !prof !17\\n ; CHECK: [[NEXT2]]:\\n-; CHECK: br i1 %{{.*}}, label %for.body, label %{{.*}}, !prof !18\\n+; CHECK: br i1 %{{.*}}, label %for.body, label %{{.*}}, !prof !17\\n \\n define void @basic(ptr %p, i32 %k) #0 !prof !15 {\\n entry:\\n@@ -105,6 +105,5 @@ attributes #1 = { nounwind optsize }\\n \\n ;CHECK: !15 = !{!\\\"branch_weights\\\", i32 3001, i32 1001}\\n ;CHECK: !16 = !{!\\\"branch_weights\\\", i32 2000, i32 1001}\\n-;CHECK: !17 = !{!\\\"branch_weights\\\", i32 999, i32 1001}\\n-;CHECK: !18 = !{!\\\"branch_weights\\\", i32 1, i32 1001}\\n+;CHECK: !17 = !{!\\\"branch_weights\\\", i32 1001, i32 1001}\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy85ZWY4MjkwOTdiYmM0Y2Y5MDg2OThlMzg5MWFmMTFhMTU0ZTFkM2UyIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/9ef829097bbc4cf908698e3891af11a154e1d3e2", "content": "{\"sha\": \"9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"node_id\": \"C_kwDOBITxeNoAKDllZjgyOTA5N2JiYzRjZjkwODY5OGUzODkxYWYxMWExNTRlMWQzZTI\", \"commit\": {\"author\": {\"name\": \"Noah Goldstein\", \"email\": \"goldstein.w.n@gmail.com\", \"date\": \"2023-11-07T19:40:01Z\"}, \"committer\": {\"name\": \"Noah Goldstein\", \"email\": \"goldstein.w.n@gmail.com\", \"date\": \"2023-11-09T22:36:49Z\"}, \"message\": \"[InstCombine] Fix buggy transform in `foldNestedSelects`; PR 71330\\n\\nThe bug is that `IsAndVariant` is used to assume which arm in the\\nselect the output `SelInner` should be placed but match the inner\\nselect condition with `m_c_LogicalOp`. With fully simplified ops, this\\nworks fine, but its possible if the select condition is not\\nsimplified, for it match both `LogicalAnd` and `LogicalOr` i.e `select\\ntrue, true, false`.\\n\\nIn PR71330 for example, the issue occurs in the following IR:\\n```\\ndefine i32 @bad() {\\n  %..i.i = select i1 false, i32 0, i32 3\\n  %brmerge = select i1 true, i1 true, i1 false\\n  %not.cmp.i.i.not = xor i1 true, true\\n  %.mux = zext i1 %not.cmp.i.i.not to i32\\n  %retval.0.i.i = select i1 %brmerge, i32 %.mux, i32 %..i.i\\n  ret i32 %retval.0.i.i\\n}\\n```\\n\\nWhen simplifying:\\n```\\n%retval.0.i.i = select i1 %brmerge, i32 %.mux, i32 %..i.i\\n```\\n\\nWe end up matching `%brmerge` as `LogicalAnd` for `IsAndVariant`, but\\nthe inner select (`%..i.i`) condition which is `false` with\\n`LogicalOr`.\\n\\nCloses #71489\", \"tree\": {\"sha\": \"a72d9116eb8f558733232850b2226e06afd74206\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/a72d9116eb8f558733232850b2226e06afd74206\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/9ef829097bbc4cf908698e3891af11a154e1d3e2/comments\", \"author\": {\"login\": \"goldsteinn\", \"id\": 35538541, \"node_id\": \"MDQ6VXNlcjM1NTM4NTQx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/35538541?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/goldsteinn\", \"html_url\": \"https://github.com/goldsteinn\", \"followers_url\": \"https://api.github.com/users/goldsteinn/followers\", \"following_url\": \"https://api.github.com/users/goldsteinn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/goldsteinn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/goldsteinn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/goldsteinn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/goldsteinn/orgs\", \"repos_url\": \"https://api.github.com/users/goldsteinn/repos\", \"events_url\": \"https://api.github.com/users/goldsteinn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/goldsteinn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"goldsteinn\", \"id\": 35538541, \"node_id\": \"MDQ6VXNlcjM1NTM4NTQx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/35538541?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/goldsteinn\", \"html_url\": \"https://github.com/goldsteinn\", \"followers_url\": \"https://api.github.com/users/goldsteinn/followers\", \"following_url\": \"https://api.github.com/users/goldsteinn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/goldsteinn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/goldsteinn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/goldsteinn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/goldsteinn/orgs\", \"repos_url\": \"https://api.github.com/users/goldsteinn/repos\", \"events_url\": \"https://api.github.com/users/goldsteinn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/goldsteinn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5cc9347aa3f13e3bcea92640771f6352e2181ef4\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/5cc9347aa3f13e3bcea92640771f6352e2181ef4\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/5cc9347aa3f13e3bcea92640771f6352e2181ef4\"}], \"stats\": {\"total\": 14, \"additions\": 10, \"deletions\": 4}, \"files\": [{\"sha\": \"71c2d68881441ac15f2e1d2cfd460a15b0099f6f\", \"filename\": \"llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 2, \"changes\": 11, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9ef829097bbc4cf908698e3891af11a154e1d3e2/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineSelect.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9ef829097bbc4cf908698e3891af11a154e1d3e2/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineSelect.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FInstCombine%2FInstCombineSelect.cpp?ref=9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"patch\": \"@@ -2891,8 +2891,15 @@ static Instruction *foldNestedSelects(SelectInst &OuterSelVal,\\n     std::swap(InnerSel.TrueVal, InnerSel.FalseVal);\\n \\n   Value *AltCond = nullptr;\\n-  auto matchOuterCond = [OuterSel, &AltCond](auto m_InnerCond) {\\n-    return match(OuterSel.Cond, m_c_LogicalOp(m_InnerCond, m_Value(AltCond)));\\n+  auto matchOuterCond = [OuterSel, IsAndVariant, &AltCond](auto m_InnerCond) {\\n+    // An unsimplified select condition can match both LogicalAnd and LogicalOr\\n+    // (select true, true, false). Since below we assume that LogicalAnd implies\\n+    // InnerSel match the FVal and vice versa for LogicalOr, we can't match the\\n+    // alternative pattern here.\\n+    return IsAndVariant ? match(OuterSel.Cond,\\n+                                m_c_LogicalAnd(m_InnerCond, m_Value(AltCond)))\\n+                        : match(OuterSel.Cond,\\n+                                m_c_LogicalOr(m_InnerCond, m_Value(AltCond)));\\n   };\\n \\n   // Finally, match the condition that was driving the outermost `select`,\"}, {\"sha\": \"8eb98b2f6436b7e659ee74ac51c39217213f0591\", \"filename\": \"llvm/test/Transforms/InstCombine/pr71330.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/9ef829097bbc4cf908698e3891af11a154e1d3e2/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr71330.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/9ef829097bbc4cf908698e3891af11a154e1d3e2/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr71330.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fpr71330.ll?ref=9ef829097bbc4cf908698e3891af11a154e1d3e2\", \"patch\": \"@@ -15,8 +15,7 @@ define void @pr71330(i32 %conv, i1 %tobool19.not4, i16 %lb) {\\n ; CHECK:       for.cond7.preheader.split.us.split:\\n ; CHECK-NEXT:    ret void\\n ; CHECK:       for.cond7:\\n-; CHECK-NEXT:    [[ADD9:%.*]] = add i32 [[CONV]], 3\\n-; CHECK-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ADD9]], 0\\n+; CHECK-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[CONV]], 0\\n ; CHECK-NEXT:    br i1 [[CMP12]], label [[FOR_BODY14:%.*]], label [[FOR_END25]]\\n ; CHECK:       for.body14:\\n ; CHECK-NEXT:    ret void\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy80NGFmNTkyNGIxY2JiYjM5NWU3ZTcxMjUwYTU0NDUwNTNjNGVjNGEzIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/44af5924b1cbbb395e7e71250a5445053c4ec4a3", "content": "{\"sha\": \"44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"node_id\": \"C_kwDOBITxeNoAKDQ0YWY1OTI0YjFjYmJiMzk1ZTdlNzEyNTBhNTQ0NTA1M2M0ZWM0YTM\", \"commit\": {\"author\": {\"name\": \"Danila Malyutin\", \"email\": \"danilaml@users.noreply.github.com\", \"date\": \"2023-11-17T14:32:52Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-11-17T14:32:52Z\"}, \"message\": \"[Statepoint] Return undef value for the statepoint of the none token (#72552)\\n\\nHelps avoid the crash in verifier when it tries to print the error.\\r\\n`none` token might be produced by llvm-reduce, since it's a default\\r\\nvalue, so by extension this also fixes llvm-reduce crash, allowing it to\\r\\njust discard invalid IR.\\r\\n\\r\\n---------\\r\\n\\r\\nCo-authored-by: arpilipe <apilipenko@azul.com>\", \"tree\": {\"sha\": \"3901a6ee1f2f50e5a3970ef4470fae1a190ee3fa\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/3901a6ee1f2f50e5a3970ef4470fae1a190ee3fa\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"comment_count\": 1, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3mUCRBK7hj4Ov3rIwAAAucIAJAlkrV/qT5m0/F0YIhJs23E\\ntg6RZ1qaknSnMY+TJCpeNfUpbaxzA/bAmpmXD3DzCBkQ8EwufmPd6NZ8NIhkTp/i\\nOEElX6kibd8tYRuX3PZQ5qdJ3U/eZIWlc4/oo35Fwz9YaDmGze5LwgYeX7kf2Wsd\\nU2vGQ5uu85G+LSWHBumiU/rHSvPQUAED9AStMW9/0gp0ciHKxHx2Qb/pNK9Ks5+y\\nAW1ccY2DXWUNIqe3EDg/XsO5x7HWgVwiB+QRj9elfx6GPfd1QjC7ka7+Y5FVjdjW\\nDhsWo1m+FlzaQeLvRiKcAxTO3u6Lc4an2o1mXVExJcZW2cOcJrQiu+le8X0t2lA=\\n=JPTD\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 3901a6ee1f2f50e5a3970ef4470fae1a190ee3fa\\nparent 2ed15877e7427801d1699611d0b29f23718b01ab\\nauthor Danila Malyutin <danilaml@users.noreply.github.com> 1700231572 +0400\\ncommitter GitHub <noreply@github.com> 1700231572 +0400\\n\\n[Statepoint] Return undef value for the statepoint of the none token (#72552)\\n\\nHelps avoid the crash in verifier when it tries to print the error.\\r\\n`none` token might be produced by llvm-reduce, since it's a default\\r\\nvalue, so by extension this also fixes llvm-reduce crash, allowing it to\\r\\njust discard invalid IR.\\r\\n\\r\\n---------\\r\\n\\r\\nCo-authored-by: arpilipe <apilipenko@azul.com>\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/44af5924b1cbbb395e7e71250a5445053c4ec4a3/comments\", \"author\": {\"login\": \"danilaml\", \"id\": 2046350, \"node_id\": \"MDQ6VXNlcjIwNDYzNTA=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/2046350?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danilaml\", \"html_url\": \"https://github.com/danilaml\", \"followers_url\": \"https://api.github.com/users/danilaml/followers\", \"following_url\": \"https://api.github.com/users/danilaml/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danilaml/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danilaml/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danilaml/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danilaml/orgs\", \"repos_url\": \"https://api.github.com/users/danilaml/repos\", \"events_url\": \"https://api.github.com/users/danilaml/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danilaml/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"2ed15877e7427801d1699611d0b29f23718b01ab\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/2ed15877e7427801d1699611d0b29f23718b01ab\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/2ed15877e7427801d1699611d0b29f23718b01ab\"}], \"stats\": {\"total\": 22, \"additions\": 22, \"deletions\": 0}, \"files\": [{\"sha\": \"7a3b708e7400677f96db65bd08ba7289cef6b04d\", \"filename\": \"llvm/lib/IR/IntrinsicInst.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/44af5924b1cbbb395e7e71250a5445053c4ec4a3/llvm%2Flib%2FIR%2FIntrinsicInst.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/44af5924b1cbbb395e7e71250a5445053c4ec4a3/llvm%2Flib%2FIR%2FIntrinsicInst.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FIR%2FIntrinsicInst.cpp?ref=44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"patch\": \"@@ -870,6 +870,10 @@ const Value *GCProjectionInst::getStatepoint() const {\\n   if (isa<UndefValue>(Token))\\n     return Token;\\n \\n+  // Treat none token as if it was undef here\\n+  if (isa<ConstantTokenNone>(Token))\\n+    return UndefValue::get(Token->getType());\\n+\\n   // This takes care both of relocates for call statepoints and relocates\\n   // on normal path of invoke statepoint.\\n   if (!isa<LandingPadInst>(Token))\"}, {\"sha\": \"3847f625c4869f8a03c9e768410c7c7bd8f65cf1\", \"filename\": \"llvm/test/Verifier/gc_none_token.ll\", \"status\": \"added\", \"additions\": 18, \"deletions\": 0, \"changes\": 18, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/44af5924b1cbbb395e7e71250a5445053c4ec4a3/llvm%2Ftest%2FVerifier%2Fgc_none_token.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/44af5924b1cbbb395e7e71250a5445053c4ec4a3/llvm%2Ftest%2FVerifier%2Fgc_none_token.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FVerifier%2Fgc_none_token.ll?ref=44af5924b1cbbb395e7e71250a5445053c4ec4a3\", \"patch\": \"@@ -0,0 +1,18 @@\\n+; RUN: not opt -passes=verify -S %s 2>&1 | FileCheck %s\\n+; Check that verifier doesn't crash on relocate with none token\\n+\\n+target triple = \\\"x86_64-unknown-linux-gnu\\\"\\n+\\n+define i32 @check_verify_none_token() gc \\\"statepoint-example\\\" {\\n+\\n+entry:\\n+    ret i32 0\\n+\\n+unreach:\\n+    ; CHECK: gc relocate is incorrectly tied to the statepoint\\n+    ; CHECK: (undef, undef)\\n+    %token_call = call i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token none, i32 0, i32 0)\\n+    ret i32 1\\n+}\\n+\\n+declare i32 addrspace(1)* @llvm.experimental.gc.relocate.p1i32(token, i32, i32)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy82ZDJkZmQzN2JkNTBiMjFlZDkwNDI3MDUyMTk4YmQxZjA2Yzc2MWY4Ig==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/6d2dfd37bd50b21ed90427052198bd1f06c761f8", "content": "{\"sha\": \"6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"node_id\": \"C_kwDOBITxeNoAKDZkMmRmZDM3YmQ1MGIyMWVkOTA0MjcwNTIxOThiZDFmMDZjNzYxZjg\", \"commit\": {\"author\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-11-30T09:18:49Z\"}, \"committer\": {\"name\": \"Nikita Popov\", \"email\": \"npopov@redhat.com\", \"date\": \"2023-11-30T09:21:35Z\"}, \"message\": \"[LPM] Set gen_crash_diag=false for non-MSSA pass in MSSA pipeline\\n\\nWhen a loop pass that does not preserve MSSA is run as part of a\\nloop-mssa pipeline, this is user error and we should not ask for\\na bug report.\\n\\nFixes https://github.com/llvm/llvm-project/issues/73554.\", \"tree\": {\"sha\": \"6166a8fd9ab25f0fb6d956082238b89e45b660d6\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/6166a8fd9ab25f0fb6d956082238b89e45b660d6\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/6d2dfd37bd50b21ed90427052198bd1f06c761f8/comments\", \"author\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"nikic\", \"id\": 216080, \"node_id\": \"MDQ6VXNlcjIxNjA4MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/216080?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/nikic\", \"html_url\": \"https://github.com/nikic\", \"followers_url\": \"https://api.github.com/users/nikic/followers\", \"following_url\": \"https://api.github.com/users/nikic/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/nikic/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/nikic/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/nikic/subscriptions\", \"organizations_url\": \"https://api.github.com/users/nikic/orgs\", \"repos_url\": \"https://api.github.com/users/nikic/repos\", \"events_url\": \"https://api.github.com/users/nikic/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/nikic/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ae6eedd27556c32232f4e8be1292ffa0e1f16d90\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ae6eedd27556c32232f4e8be1292ffa0e1f16d90\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ae6eedd27556c32232f4e8be1292ffa0e1f16d90\"}], \"stats\": {\"total\": 5, \"additions\": 3, \"deletions\": 2}, \"files\": [{\"sha\": \"a4f2dbf9a5828993eabcfbbdac26a399b04cbd28\", \"filename\": \"llvm/lib/Transforms/Scalar/LoopPassManager.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6d2dfd37bd50b21ed90427052198bd1f06c761f8/llvm%2Flib%2FTransforms%2FScalar%2FLoopPassManager.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6d2dfd37bd50b21ed90427052198bd1f06c761f8/llvm%2Flib%2FTransforms%2FScalar%2FLoopPassManager.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FTransforms%2FScalar%2FLoopPassManager.cpp?ref=6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"patch\": \"@@ -313,7 +313,8 @@ PreservedAnalyses FunctionToLoopPassAdaptor::run(Function &F,\\n \\n     if (LAR.MSSA && !PassPA.getChecker<MemorySSAAnalysis>().preserved())\\n       report_fatal_error(\\\"Loop pass manager using MemorySSA contains a pass \\\"\\n-                         \\\"that does not preserve MemorySSA\\\");\\n+                         \\\"that does not preserve MemorySSA\\\",\\n+                         /*gen_crash_diag*/ false);\\n \\n #ifndef NDEBUG\\n     // LoopAnalysisResults should always be valid.\"}, {\"sha\": \"d33e7a83326f492de77773fe63ad5f6b71ecd613\", \"filename\": \"llvm/test/Other/loop-mssa-not-preserved.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/6d2dfd37bd50b21ed90427052198bd1f06c761f8/llvm%2Ftest%2FOther%2Floop-mssa-not-preserved.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/6d2dfd37bd50b21ed90427052198bd1f06c761f8/llvm%2Ftest%2FOther%2Floop-mssa-not-preserved.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FOther%2Floop-mssa-not-preserved.ll?ref=6d2dfd37bd50b21ed90427052198bd1f06c761f8\", \"patch\": \"@@ -1,4 +1,4 @@\\n-; RUN: not --crash opt -passes='loop-mssa(loop-unroll-full)' 2>&1 < %s | FileCheck %s\\n+; RUN: not opt -passes='loop-mssa(loop-unroll-full)' 2>&1 < %s | FileCheck %s\\n \\n ; CHECK: LLVM ERROR: Loop pass manager using MemorySSA contains a pass that does not preserve MemorySSA\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbGx2bS9sbHZtLXByb2plY3QvY29tbWl0cy9hYjNmZGJkZmJlN2VkYzYyMDQ5YzYwMmQ4N2JlOTFjM2FkM2Y1ZTNiIg==.json", "commit": "https://api.github.com/repos/llvm/llvm-project/commits/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b", "content": "{\"sha\": \"ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"node_id\": \"C_kwDOBITxeNoAKGFiM2ZkYmRmYmU3ZWRjNjIwNDljNjAyZDg3YmU5MWMzYWQzZjVlM2I\", \"commit\": {\"author\": {\"name\": \"Allen\", \"email\": \"zhongyunde@huawei.com\", \"date\": \"2023-12-01T08:20:38Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-12-01T08:20:38Z\"}, \"message\": \"[ValueTracking] Support srem/urem for isKnownNonNullFromDominatingCondition (#74021)\\n\\nSimilar to div, the rem should also proof its second operand is\\r\\nnon-zero, otherwise it is a UB.\\r\\n\\r\\nFix https://github.com/llvm/llvm-project/issues/71782\", \"tree\": {\"sha\": \"15df683eeb8765c7e72e655251697868d26a5bdb\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/trees/15df683eeb8765c7e72e655251697868d26a5bdb\"}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/git/commits/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlaZdWCRBK7hj4Ov3rIwAArhsIAA37wNiY/nJ9HK5WfHwlA4JH\\ngALamnwr4J+ehGvY3rGX1doxSM6QGoSe4IxENPqnb2b2/En25DQGHn/2V3vWYaYu\\nmqDIkub+5MYUJ5PSd9YhEfc4igtv1pvGuDdFB8+Z4rnzvFBvL2g+CBweGn3kwtaz\\nlRsPBT7HTV/THlvJPb3Q0xdqjqpP8TQ/YDE2A5HveS0ukXLlnyejA8meTAlDz8KK\\nlIxWWvHuof7CAVJ6FFPuy0KLH0LVDMTwL4ymukwCupQelTAHhzHzKQHuEvQ7P52c\\nF1T5fjklbvarS06BPQIm25xd93PiXGsVGNCoDd9WGwwWwNIWt89Oeoz+XEGq5bc=\\n=JPNE\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 15df683eeb8765c7e72e655251697868d26a5bdb\\nparent 0e163e75d44cfa024092cda5099bd41af2218215\\nauthor Allen <zhongyunde@huawei.com> 1701418838 +0800\\ncommitter GitHub <noreply@github.com> 1701418838 +0800\\n\\n[ValueTracking] Support srem/urem for isKnownNonNullFromDominatingCondition (#74021)\\n\\nSimilar to div, the rem should also proof its second operand is\\r\\nnon-zero, otherwise it is a UB.\\r\\n\\r\\nFix https://github.com/llvm/llvm-project/issues/71782\"}}, \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"comments_url\": \"https://api.github.com/repos/llvm/llvm-project/commits/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/comments\", \"author\": {\"login\": \"vfdff\", \"id\": 6094516, \"node_id\": \"MDQ6VXNlcjYwOTQ1MTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/6094516?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vfdff\", \"html_url\": \"https://github.com/vfdff\", \"followers_url\": \"https://api.github.com/users/vfdff/followers\", \"following_url\": \"https://api.github.com/users/vfdff/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vfdff/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vfdff/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vfdff/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vfdff/orgs\", \"repos_url\": \"https://api.github.com/users/vfdff/repos\", \"events_url\": \"https://api.github.com/users/vfdff/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vfdff/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0e163e75d44cfa024092cda5099bd41af2218215\", \"url\": \"https://api.github.com/repos/llvm/llvm-project/commits/0e163e75d44cfa024092cda5099bd41af2218215\", \"html_url\": \"https://github.com/llvm/llvm-project/commit/0e163e75d44cfa024092cda5099bd41af2218215\"}], \"stats\": {\"total\": 63, \"additions\": 58, \"deletions\": 5}, \"files\": [{\"sha\": \"ef8fa5826deb94aa547e7897b69bf0984f6a0eb6\", \"filename\": \"llvm/lib/Analysis/ValueTracking.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Flib%2FAnalysis%2FValueTracking.cpp\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Flib%2FAnalysis%2FValueTracking.cpp\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Flib%2FAnalysis%2FValueTracking.cpp?ref=ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"patch\": \"@@ -2186,7 +2186,8 @@ static bool isKnownNonNullFromDominatingCondition(const Value *V,\\n         return true;\\n     }\\n \\n-    if (match(U, m_IDiv(m_Value(), m_Specific(V))) &&\\n+    if ((match(U, m_IDiv(m_Value(), m_Specific(V))) ||\\n+         match(U, m_IRem(m_Value(), m_Specific(V)))) &&\\n         isValidAssumeForContext(cast<Instruction>(U), CtxI, DT))\\n       return true;\\n \"}, {\"sha\": \"53ed4485c94f0867c98267b8a3244216e76303a9\", \"filename\": \"llvm/test/Analysis/ValueTracking/select-known-non-zero.ll\", \"status\": \"modified\", \"additions\": 55, \"deletions\": 1, \"changes\": 56, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Ftest%2FAnalysis%2FValueTracking%2Fselect-known-non-zero.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Ftest%2FAnalysis%2FValueTracking%2Fselect-known-non-zero.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FAnalysis%2FValueTracking%2Fselect-known-non-zero.ll?ref=ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"patch\": \"@@ -2,6 +2,8 @@\\n ; RUN: opt < %s -passes=instsimplify -S | FileCheck %s\\n \\n declare void @llvm.assume(i1)\\n+declare void @use(i64)\\n+declare void @use4(i4)\\n \\n define i1 @select_v_ne_fail(i8 %v, i8 %C, i8 %y) {\\n ; CHECK-LABEL: @select_v_ne_fail(\\n@@ -446,4 +448,56 @@ define i64 @incorrect_safe_div_call_2(i64 %n, i64 %d) {\\n   ret i64 %3\\n }\\n \\n-declare void @use(i64)\\n+; https://alive2.llvm.org/ce/z/Si_B7b\\n+define i4 @icmp_urem(i4 %n, i4 %d) {\\n+; CHECK-LABEL: @icmp_urem(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = urem i4 [[N:%.*]], [[D:%.*]]\\n+; CHECK-NEXT:    ret i4 [[TMP1]]\\n+;\\n+  %1 = icmp eq i4 %d, 0\\n+  %2 = urem i4 %n, %d\\n+  %3 = select i1 %1, i4 -1, i4 %2\\n+  ret i4 %3\\n+}\\n+\\n+define i4 @icmp_urem_clobber_by_call(i4 %n, i4 %d) {\\n+; CHECK-LABEL: @icmp_urem_clobber_by_call(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i4 [[D:%.*]], 0\\n+; CHECK-NEXT:    tail call void @use4(i4 [[D]])\\n+; CHECK-NEXT:    [[TMP2:%.*]] = urem i4 [[N:%.*]], [[D]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = select i1 [[TMP1]], i4 -1, i4 [[TMP2]]\\n+; CHECK-NEXT:    ret i4 [[TMP3]]\\n+;\\n+  %1 = icmp eq i4 %d, 0\\n+  tail call void @use4(i4 %d)\\n+  %2 = urem i4 %n, %d\\n+  %3 = select i1 %1, i4 -1, i4 %2\\n+  ret i4 %3\\n+}\\n+\\n+; https://alive2.llvm.org/ce/z/Fn3Wac\\n+define i4 @icmp_srem(i4 %n, i4 %d) {\\n+; CHECK-LABEL: @icmp_srem(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = srem i4 [[N:%.*]], [[D:%.*]]\\n+; CHECK-NEXT:    ret i4 [[TMP1]]\\n+;\\n+  %1 = icmp eq i4 %d, 0\\n+  %2 = srem i4 %n, %d\\n+  %3 = select i1 %1, i4 -1, i4 %2\\n+  ret i4 %3\\n+}\\n+\\n+define i4 @icmp_srem_clobber_by_call(i4 %n, i4 %d) {\\n+; CHECK-LABEL: @icmp_srem_clobber_by_call(\\n+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i4 [[D:%.*]], 0\\n+; CHECK-NEXT:    tail call void @use4(i4 [[D]])\\n+; CHECK-NEXT:    [[TMP2:%.*]] = srem i4 [[N:%.*]], [[D]]\\n+; CHECK-NEXT:    [[TMP3:%.*]] = select i1 [[TMP1]], i4 -1, i4 [[TMP2]]\\n+; CHECK-NEXT:    ret i4 [[TMP3]]\\n+;\\n+  %1 = icmp eq i4 %d, 0\\n+  tail call void @use4(i4 %d)\\n+  %2 = srem i4 %n, %d\\n+  %3 = select i1 %1, i4 -1, i4 %2\\n+  ret i4 %3\\n+}\"}, {\"sha\": \"9ec3ddc80c57f7fa62d0922a1dfba8cd80a5a668\", \"filename\": \"llvm/test/Transforms/InstCombine/zext-or-icmp.ll\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 3, \"changes\": 4, \"blob_url\": \"https://github.com/llvm/llvm-project/blob/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext-or-icmp.ll\", \"raw_url\": \"https://github.com/llvm/llvm-project/raw/ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext-or-icmp.ll\", \"contents_url\": \"https://api.github.com/repos/llvm/llvm-project/contents/llvm%2Ftest%2FTransforms%2FInstCombine%2Fzext-or-icmp.ll?ref=ab3fdbdfbe7edc62049c602d87be91c3ad3f5e3b\", \"patch\": \"@@ -231,9 +231,7 @@ define i1 @PR51762(ptr %i, i32 %t0, i16 %t1, ptr %p, ptr %d, ptr %f, i32 %p2, i1\\n ; CHECK-NEXT:    [[INSERT_INSERT41:%.*]] = or i64 [[INSERT_SHIFT52]], [[INSERT_EXT39]]\\n ; CHECK-NEXT:    [[REM:%.*]] = urem i64 [[S1]], [[INSERT_INSERT41]]\\n ; CHECK-NEXT:    [[NE:%.*]] = icmp ne i64 [[REM]], 0\\n-; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[INSERT_INSERT41]], 0\\n-; CHECK-NEXT:    [[SPEC_SELECT57:%.*]] = or i1 [[NE]], [[CMP]]\\n-; CHECK-NEXT:    [[LOR_EXT:%.*]] = zext i1 [[SPEC_SELECT57]] to i32\\n+; CHECK-NEXT:    [[LOR_EXT:%.*]] = zext i1 [[NE]] to i32\\n ; CHECK-NEXT:    [[T2:%.*]] = load i32, ptr [[D:%.*]], align 4\\n ; CHECK-NEXT:    [[CONV15:%.*]] = sext i16 [[T1]] to i32\\n ; CHECK-NEXT:    [[CMP16:%.*]] = icmp sge i32 [[T2]], [[CONV15]]\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMDk5YjQ0MzVjMzhkZDUyZGRiMzhlNmIxNzA2ZDljOTg4Njk5YzA4MiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/099b4435c38dd52ddb38e6b1706d9c988699c082", "content": "{\"sha\": \"099b4435c38dd52ddb38e6b1706d9c988699c082\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjA5OWI0NDM1YzM4ZGQ1MmRkYjM4ZTZiMTcwNmQ5Yzk4ODY5OWMwODI=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2017-05-24T09:16:41Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2017-05-24T09:16:41Z\"}, \"message\": \"Fixed #8074 (Preprocessor::getConfigs: wrong configuration extracted 'A;B;;')\", \"tree\": {\"sha\": \"afa6345559f0ed79253afe45126665ebda38dab6\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/afa6345559f0ed79253afe45126665ebda38dab6\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/099b4435c38dd52ddb38e6b1706d9c988699c082\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/099b4435c38dd52ddb38e6b1706d9c988699c082\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/099b4435c38dd52ddb38e6b1706d9c988699c082\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/099b4435c38dd52ddb38e6b1706d9c988699c082/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3930f2d6bc607ed6afd1511d65ef03e37ecca904\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/3930f2d6bc607ed6afd1511d65ef03e37ecca904\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/3930f2d6bc607ed6afd1511d65ef03e37ecca904\"}], \"stats\": {\"total\": 25, \"additions\": 22, \"deletions\": 3}, \"files\": [{\"sha\": \"96c46589c173b7cdd7d4725f584b7d1abf3bf9d2\", \"filename\": \"lib/preprocessor.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 3, \"changes\": 9, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/099b4435c38dd52ddb38e6b1706d9c988699c082/lib%2Fpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/099b4435c38dd52ddb38e6b1706d9c988699c082/lib%2Fpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fpreprocessor.cpp?ref=099b4435c38dd52ddb38e6b1706d9c988699c082\", \"patch\": \"@@ -352,9 +352,12 @@ static void getConfigs(const simplecpp::TokenList &tokens, std::set<std::string>\\n                 sameline(cmdtok->next, cmdtok->next->next) &&\\n                 cmdtok->next->op == '#' &&\\n                 cmdtok->next->next->str == \\\"error\\\") {\\n-                if (!elseError.empty())\\n-                    elseError += ';';\\n-                elseError += cfg(configs_if, userDefines);\\n+                const std::string &ifcfg = cfg(configs_if, userDefines);\\n+                if (!ifcfg.empty()) {\\n+                    if (!elseError.empty())\\n+                        elseError += ';';\\n+                    elseError += ifcfg;\\n+                }\\n             }\\n             if (!configs_if.empty())\\n                 configs_if.pop_back();\"}, {\"sha\": \"9da8c946db238acada8eea3a8fb04fa95781b85f\", \"filename\": \"test/testpreprocessor.cpp\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/099b4435c38dd52ddb38e6b1706d9c988699c082/test%2Ftestpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/099b4435c38dd52ddb38e6b1706d9c988699c082/test%2Ftestpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestpreprocessor.cpp?ref=099b4435c38dd52ddb38e6b1706d9c988699c082\", \"patch\": \"@@ -79,6 +79,7 @@ class TestPreprocessor : public TestFixture {\\n         TEST_CASE(error4);  // #2919 - wrong filename is reported\\n         TEST_CASE(error5);\\n         TEST_CASE(error6);\\n+        TEST_CASE(error7);\\n \\n         TEST_CASE(setPlatformInfo);\\n \\n@@ -409,6 +410,21 @@ class TestPreprocessor : public TestFixture {\\n \\n     }\\n \\n+    void error7() { // #8074\\n+        const char filedata[] = \\\"#define A\\\\n\\\"\\n+                                \\\"\\\\n\\\"\\n+                                \\\"#if defined(B)\\\\n\\\"\\n+                                \\\"#else\\\\n\\\"\\n+                                \\\"#error \\\\\\\"1\\\\\\\"\\\\n\\\"\\n+                                \\\"#endif\\\\n\\\"\\n+                                \\\"\\\\n\\\"\\n+                                \\\"#if defined(A)\\\\n\\\"\\n+                                \\\"#else\\\\n\\\"\\n+                                \\\"#error \\\\\\\"2\\\\\\\"\\\\n\\\"\\n+                                \\\"#endif\\\\n\\\";\\n+        ASSERT_EQUALS(\\\"\\\\nB\\\\n\\\", getConfigsStr(filedata));\\n+    }\\n+\\n     void setPlatformInfo() {\\n         Settings settings;\\n         Preprocessor preprocessor(settings, this);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvY2FhNmZmN2MyYTZlZjY0ZGY1M2UwNDcwMTk0NGFhYTQ3MTJhMTkxNSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/caa6ff7c2a6ef64df53e04701944aaa4712a1915", "content": "{\"sha\": \"caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"node_id\": \"C_kwDOAAIvG9oAKGNhYTZmZjdjMmE2ZWY2NGRmNTNlMDQ3MDE5NDRhYWE0NzEyYTE5MTU\", \"commit\": {\"author\": {\"name\": \"Jim Kuhn\", \"email\": \"jim.kuhn@gmail.com\", \"date\": \"2022-09-21T15:38:23Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@cppchecksolutions.com\", \"date\": \"2022-11-10T22:01:07Z\"}, \"message\": \"Fix sense of test (.analyzerinfo files get placed in wrong directory) (#4486)\\n\\n* Fix sense of test (.analyzerinfo files get placed in wrong directory)\\r\\n\\r\\n* Update testanalyzerinformation.cpp\\r\\n\\r\\nstyle (tabs -> spaces)\", \"tree\": {\"sha\": \"7c7be96781b330d888fe17728257cc4c3b418f94\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/7c7be96781b330d888fe17728257cc4c3b418f94\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/caa6ff7c2a6ef64df53e04701944aaa4712a1915/comments\", \"author\": {\"login\": \"JimKuhn\", \"id\": 7101341, \"node_id\": \"MDQ6VXNlcjcxMDEzNDE=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7101341?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/JimKuhn\", \"html_url\": \"https://github.com/JimKuhn\", \"followers_url\": \"https://api.github.com/users/JimKuhn/followers\", \"following_url\": \"https://api.github.com/users/JimKuhn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/JimKuhn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/JimKuhn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/JimKuhn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/JimKuhn/orgs\", \"repos_url\": \"https://api.github.com/users/JimKuhn/repos\", \"events_url\": \"https://api.github.com/users/JimKuhn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/JimKuhn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"9a0303e0ae20b7d3c2dbd999421292ccc96222b5\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/9a0303e0ae20b7d3c2dbd999421292ccc96222b5\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/9a0303e0ae20b7d3c2dbd999421292ccc96222b5\"}], \"stats\": {\"total\": 4, \"additions\": 3, \"deletions\": 1}, \"files\": [{\"sha\": \"0140aeb37b1f7d863c94ea36ff37423bb86e9e3a\", \"filename\": \"lib/analyzerinfo.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/caa6ff7c2a6ef64df53e04701944aaa4712a1915/lib%2Fanalyzerinfo.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/caa6ff7c2a6ef64df53e04701944aaa4712a1915/lib%2Fanalyzerinfo.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fanalyzerinfo.cpp?ref=caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"patch\": \"@@ -120,7 +120,7 @@ std::string AnalyzerInformation::getAnalyzerInfoFile(const std::string &buildDir\\n \\n     const std::string::size_type pos = sourcefile.rfind('/');\\n     std::string filename;\\n-    if (pos != std::string::npos)\\n+    if (pos == std::string::npos)\\n         filename = sourcefile;\\n     else\\n         filename = sourcefile.substr(pos + 1);\"}, {\"sha\": \"a440074a6f4afcc15b9d6c1f4872c6daa870f015\", \"filename\": \"test/testanalyzerinformation.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/caa6ff7c2a6ef64df53e04701944aaa4712a1915/test%2Ftestanalyzerinformation.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/caa6ff7c2a6ef64df53e04701944aaa4712a1915/test%2Ftestanalyzerinformation.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestanalyzerinformation.cpp?ref=caa6ff7c2a6ef64df53e04701944aaa4712a1915\", \"patch\": \"@@ -38,6 +38,8 @@ class TestAnalyzerInformation : public TestFixture, private AnalyzerInformation\\n         ASSERT_EQUALS(\\\"file1.a4\\\", getAnalyzerInfoFileFromFilesTxt(f1, \\\"file1.c\\\", \\\"\\\"));\\n         std::istringstream f2(filesTxt);\\n         ASSERT_EQUALS(\\\"file1.a4\\\", getAnalyzerInfoFileFromFilesTxt(f2, \\\"./file1.c\\\", \\\"\\\"));\\n+        ASSERT_EQUALS(\\\"builddir/file1.c.analyzerinfo\\\", AnalyzerInformation::getAnalyzerInfoFile(\\\"builddir\\\", \\\"file1.c\\\", \\\"\\\"));\\n+        ASSERT_EQUALS(\\\"builddir/file1.c.analyzerinfo\\\", AnalyzerInformation::getAnalyzerInfoFile(\\\"builddir\\\", \\\"some/path/file1.c\\\", \\\"\\\"));\\n     }\\n };\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNDk5NmVjMTkwZWNmMjdhNGJmMDE4ZWIwZGNkMTJlMmE1MWZkNTUwZSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e", "content": "{\"sha\": \"4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjQ5OTZlYzE5MGVjZjI3YTRiZjAxOGViMGRjZDEyZTJhNTFmZDU1MGU=\", \"commit\": {\"author\": {\"name\": \"Rikard Falkeborn\", \"email\": \"rikard.falkeborn@gmail.com\", \"date\": \"2020-07-07T21:46:24Z\"}, \"committer\": {\"name\": \"Rikard Falkeborn\", \"email\": \"rikard.falkeborn@gmail.com\", \"date\": \"2020-07-07T22:02:39Z\"}, \"message\": \"Fix #9652 (fp memleak with function call with cast)\\n\\nWhen the first argument was (void *)(1), at the start of the second\\niteration, arg was pointing to the \\\"1\\\", which caused problems for\\nnextArgument(), which saw the \\\")\\\" as the next token and returned\\nnullptr, signalling that there are no more arguments.\\n\\nInstead, save the first token in the argument, which makes\\nnextArgument() do the right thing.\", \"tree\": {\"sha\": \"c7ab6fb4f81c3e14356f2b6ce1a7fe293c22ed72\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/c7ab6fb4f81c3e14356f2b6ce1a7fe293c22ed72\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e/comments\", \"author\": {\"login\": \"rikardfalkeborn\", \"id\": 4839044, \"node_id\": \"MDQ6VXNlcjQ4MzkwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4839044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rikardfalkeborn\", \"html_url\": \"https://github.com/rikardfalkeborn\", \"followers_url\": \"https://api.github.com/users/rikardfalkeborn/followers\", \"following_url\": \"https://api.github.com/users/rikardfalkeborn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rikardfalkeborn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rikardfalkeborn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rikardfalkeborn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rikardfalkeborn/orgs\", \"repos_url\": \"https://api.github.com/users/rikardfalkeborn/repos\", \"events_url\": \"https://api.github.com/users/rikardfalkeborn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rikardfalkeborn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"rikardfalkeborn\", \"id\": 4839044, \"node_id\": \"MDQ6VXNlcjQ4MzkwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4839044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rikardfalkeborn\", \"html_url\": \"https://github.com/rikardfalkeborn\", \"followers_url\": \"https://api.github.com/users/rikardfalkeborn/followers\", \"following_url\": \"https://api.github.com/users/rikardfalkeborn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rikardfalkeborn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rikardfalkeborn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rikardfalkeborn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rikardfalkeborn/orgs\", \"repos_url\": \"https://api.github.com/users/rikardfalkeborn/repos\", \"events_url\": \"https://api.github.com/users/rikardfalkeborn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rikardfalkeborn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6c90de0101a9aa1e7f770190dcd5f34161095fb4\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6c90de0101a9aa1e7f770190dcd5f34161095fb4\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/6c90de0101a9aa1e7f770190dcd5f34161095fb4\"}], \"stats\": {\"total\": 46, \"additions\": 45, \"deletions\": 1}, \"files\": [{\"sha\": \"551e475ce8cf2ec66d1309e361bb70f4472f65c4\", \"filename\": \"lib/checkleakautovar.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e/lib%2Fcheckleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e/lib%2Fcheckleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckleakautovar.cpp?ref=4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"patch\": \"@@ -856,7 +856,8 @@ void CheckLeakAutoVar::functionCall(const Token *tokName, const Token *tokOpenin\\n     }\\n \\n     int argNr = 1;\\n-    for (const Token *arg = tokFirstArg; arg; arg = arg->nextArgument()) {\\n+    for (const Token *funcArg = tokFirstArg; funcArg; funcArg = funcArg->nextArgument()) {\\n+        const Token* arg = funcArg;\\n         if (mTokenizer->isCPP() && arg->str() == \\\"new\\\") {\\n             arg = arg->next();\\n             if (Token::simpleMatch(arg, \\\"( std :: nothrow )\\\"))\"}, {\"sha\": \"7aea76b0646fe51164275264185c21221fabfca2\", \"filename\": \"test/testleakautovar.cpp\", \"status\": \"modified\", \"additions\": 43, \"deletions\": 0, \"changes\": 43, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e/test%2Ftestleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e/test%2Ftestleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestleakautovar.cpp?ref=4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"patch\": \"@@ -184,6 +184,8 @@ class TestLeakAutoVar : public TestFixture {\\n         TEST_CASE(smartPtrInContainer); // #8262\\n \\n         TEST_CASE(recursiveCountLimit); // #5872 #6157 #9097\\n+\\n+        TEST_CASE(functionCallCastConfig); // #9652\\n     }\\n \\n     void check(const char code[], bool cpp = false) {\\n@@ -202,6 +204,22 @@ class TestLeakAutoVar : public TestFixture {\\n         c.runChecks(&tokenizer, &settings, this);\\n     }\\n \\n+    void check(const char code[], Settings & settings) {\\n+        // Clear the error buffer..\\n+        errout.str(\\\"\\\");\\n+\\n+        // Tokenize..\\n+        Tokenizer tokenizer(&settings, this);\\n+        std::istringstream istr(code);\\n+        tokenizer.tokenize(istr, \\\"test.cpp\\\");\\n+\\n+        // Check for leaks..\\n+        CheckLeakAutoVar c;\\n+        settings.checkLibrary = true;\\n+        settings.addEnabled(\\\"information\\\");\\n+        c.runChecks(&tokenizer, &settings, this);\\n+    }\\n+\\n     void checkP(const char code[], bool cpp = false) {\\n         // Clear the error buffer..\\n         errout.str(\\\"\\\");\\n@@ -2023,6 +2041,31 @@ class TestLeakAutoVar : public TestFixture {\\n                                \\\"}\\\"));\\n     }\\n \\n+    void functionCallCastConfig() { // #9652\\n+        Settings settingsFunctionCall = settings;\\n+\\n+        const char xmldata[] = \\\"<?xml version=\\\\\\\"1.0\\\\\\\"?>\\\\n\\\"\\n+                               \\\"<def format=\\\\\\\"2\\\\\\\">\\\\n\\\"\\n+                               \\\"  <function name=\\\\\\\"free_func\\\\\\\">\\\\n\\\"\\n+                               \\\"    <noreturn>false</noreturn>\\\\n\\\"\\n+                               \\\"    <arg nr=\\\\\\\"1\\\\\\\">\\\\n\\\"\\n+                               \\\"      <not-uninit/>\\\\n\\\"\\n+                               \\\"    </arg>\\\\n\\\"\\n+                               \\\"    <arg nr=\\\\\\\"2\\\\\\\">\\\\n\\\"\\n+                               \\\"      <not-uninit/>\\\\n\\\"\\n+                               \\\"    </arg>\\\\n\\\"\\n+                               \\\"  </function>\\\\n\\\"\\n+                               \\\"</def>\\\";\\n+        tinyxml2::XMLDocument doc;\\n+        doc.Parse(xmldata, sizeof(xmldata));\\n+        settingsFunctionCall.library.load(doc);\\n+        check(\\\"void test_func()\\\\n\\\"\\n+              \\\"{\\\\n\\\"\\n+              \\\"    char * buf = malloc(4);\\\\n\\\"\\n+              \\\"    free_func((void *)(1), buf);\\\\n\\\"\\n+              \\\"}\\\", settingsFunctionCall);\\n+        ASSERT_EQUALS(\\\"[test.cpp:5]: (information) --check-library: Function free_func() should have <use>/<leak-ignore> configuration\\\\n\\\", errout.str());\\n+    }\\n };\\n \\n REGISTER_TEST(TestLeakAutoVar)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZDBiNjA3OWE4MzJkNWMxNTZhZjFlNTEyNzRlMDlmMjhlZTg2NzdhNyI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/d0b6079a832d5c156af1e51274e09f28ee8677a7", "content": "{\"sha\": \"d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmQwYjYwNzlhODMyZDVjMTU2YWYxZTUxMjc0ZTA5ZjI4ZWU4Njc3YTc=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-08-10T07:38:28Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-08-10T07:38:28Z\"}, \"message\": \"Fixed #10372 (Confusing message for compareValueOutOfTypeRangeError)\", \"tree\": {\"sha\": \"13bc5fba7c572b1267617fd16cee2483c7acfbe0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/13bc5fba7c572b1267617fd16cee2483c7acfbe0\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d0b6079a832d5c156af1e51274e09f28ee8677a7/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0093452bed30f27a8a63665ec1beb0a75935adbc\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0093452bed30f27a8a63665ec1beb0a75935adbc\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/0093452bed30f27a8a63665ec1beb0a75935adbc\"}], \"stats\": {\"total\": 30, \"additions\": 29, \"deletions\": 1}, \"files\": [{\"sha\": \"8b13fe127ee81e90498faa64ed548b50f3b8f144\", \"filename\": \"lib/checkcondition.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d0b6079a832d5c156af1e51274e09f28ee8677a7/lib%2Fcheckcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d0b6079a832d5c156af1e51274e09f28ee8677a7/lib%2Fcheckcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckcondition.cpp?ref=d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"patch\": \"@@ -1807,7 +1807,9 @@ void CheckCondition::checkCompareValueOutOfTypeRange()\\n \\n                 const auto typeMinValue = (typeTok->valueType()->sign == ValueType::Sign::SIGNED) ? (-(1LL << (bits-1))) : 0;\\n                 const auto unsignedTypeMaxValue = (1LL << bits) - 1LL;\\n-                const auto typeMaxValue = (typeTok->valueType()->sign == ValueType::Sign::SIGNED) ? (unsignedTypeMaxValue / 2) : unsignedTypeMaxValue;\\n+                const auto typeMaxValue = (typeTok->valueType()->sign != ValueType::Sign::SIGNED || bits >= mSettings->int_bit) ?\\n+                                          unsignedTypeMaxValue : // unsigned type. signed int/long/long long; comparing sign bit is ok. i.e. 'i == 0xffffffff'\\n+                                          (unsignedTypeMaxValue / 2); // signed char/short\\n \\n                 if (valueTok->getKnownIntValue() < typeMinValue)\\n                     compareValueOutOfTypeRangeError(valueTok, typeTok->valueType()->str(), valueTok->getKnownIntValue());\"}, {\"sha\": \"fbf7932f8e0e0edabac140e461abb1ea90c9a810\", \"filename\": \"test/testcondition.cpp\", \"status\": \"modified\", \"additions\": 26, \"deletions\": 0, \"changes\": 26, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d0b6079a832d5c156af1e51274e09f28ee8677a7/test%2Ftestcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d0b6079a832d5c156af1e51274e09f28ee8677a7/test%2Ftestcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestcondition.cpp?ref=d0b6079a832d5c156af1e51274e09f28ee8677a7\", \"patch\": \"@@ -4439,6 +4439,32 @@ class TestCondition : public TestFixture {\\n               \\\"  if (b == true) {}\\\\n\\\"\\n               \\\"}\\\", &settingsUnix64);\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        // #10372\\n+        check(\\\"void f(signed char x) {\\\\n\\\"\\n+              \\\"  if (x == 0xff) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"[test.cpp:2]: (style) Comparing expression of type 'signed char' against value 255. Condition is always true/false.\\\\n\\\", errout.str());\\n+\\n+        check(\\\"void f(short x) {\\\\n\\\"\\n+              \\\"  if (x == 0xffff) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"[test.cpp:2]: (style) Comparing expression of type 'signed short' against value 65535. Condition is always true/false.\\\\n\\\", errout.str());\\n+\\n+        check(\\\"void f(int x) {\\\\n\\\"\\n+              \\\"  if (x == 0xffffffff) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void f(long x) {\\\\n\\\"\\n+              \\\"  if (x == ~0L) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void f(long long x) {\\\\n\\\"\\n+              \\\"  if (x == ~0LL) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n     void knownConditionCast() { // #9976\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNGFkOTBiZjZmMWNiMDE0OWM3OTMyNGRmZjAyN2NmODU1OGMwNDFjMSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/4ad90bf6f1cb0149c79324dff027cf8558c041c1", "content": "{\"sha\": \"4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjRhZDkwYmY2ZjFjYjAxNDljNzkzMjRkZmYwMjdjZjg1NThjMDQxYzE=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-05-24T15:02:19Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-05-24T15:02:19Z\"}, \"message\": \"Uninitialized variables; Fixed FP in inner for loop\", \"tree\": {\"sha\": \"d282885d3b6910d29d51834b3e40c2a2f07bd413\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/d282885d3b6910d29d51834b3e40c2a2f07bd413\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4ad90bf6f1cb0149c79324dff027cf8558c041c1/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"fa72ec20b26765a5fc3cefc9641fd8a92b8207c2\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/fa72ec20b26765a5fc3cefc9641fd8a92b8207c2\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/fa72ec20b26765a5fc3cefc9641fd8a92b8207c2\"}], \"stats\": {\"total\": 14, \"additions\": 12, \"deletions\": 2}, \"files\": [{\"sha\": \"01617d263b70a235bb2ca7559c90ca30e8c5cb10\", \"filename\": \"lib/checkuninitvar.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4ad90bf6f1cb0149c79324dff027cf8558c041c1/lib%2Fcheckuninitvar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4ad90bf6f1cb0149c79324dff027cf8558c041c1/lib%2Fcheckuninitvar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckuninitvar.cpp?ref=4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"patch\": \"@@ -902,8 +902,8 @@ const Token* CheckUninitVar::checkLoopBodyRecursive(const Token *start, const Va\\n                 continue;\\n             const Token *bodyStart = top->link()->next();\\n             const Token *errorToken1 = checkLoopBodyRecursive(bodyStart, var, alloc, membervar, bailout);\\n-            if (errorToken1)\\n-                return errorToken1;\\n+            if (!errorToken)\\n+                errorToken = errorToken1;\\n             if (bailout)\\n                 return nullptr;\\n         }\"}, {\"sha\": \"dcb729f8290cbf6c96ae4e50dda6ec88487ea919\", \"filename\": \"test/testuninitvar.cpp\", \"status\": \"modified\", \"additions\": 10, \"deletions\": 0, \"changes\": 10, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4ad90bf6f1cb0149c79324dff027cf8558c041c1/test%2Ftestuninitvar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4ad90bf6f1cb0149c79324dff027cf8558c041c1/test%2Ftestuninitvar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestuninitvar.cpp?ref=4ad90bf6f1cb0149c79324dff027cf8558c041c1\", \"patch\": \"@@ -1259,6 +1259,16 @@ class TestUninitVar : public TestFixture {\\n                        \\\"}\\\");\\n         ASSERT_EQUALS(\\\"[test.cpp:6]: (error) Uninitialized variable: x\\\\n\\\", errout.str());\\n \\n+        checkUninitVar(\\\"void foo(int n) {\\\\n\\\"\\n+                       \\\"  int one[10];\\\\n\\\"\\n+                       \\\"  for (int rank = 0; rank < n; ++rank) {\\\\n\\\"\\n+                       \\\"    for (int i=0;i<rank;i++)\\\\n\\\"\\n+                       \\\"      f = one[i];\\\\n\\\"\\n+                       \\\"    one[rank] = -1;\\\\n\\\"\\n+                       \\\"  }\\\\n\\\"\\n+                       \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n         // Ticket #2226: C++0x loop\\n         checkUninitVar(\\\"void f() {\\\\n\\\"\\n                        \\\"    container c;\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMmRhZjdmNTQzMGYxMWRlZjVmZDFkNjc1OTg0ODczNjlmOTdjNDJmNCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/2daf7f5430f11def5fd1d67598487369f97c42f4", "content": "{\"sha\": \"2daf7f5430f11def5fd1d67598487369f97c42f4\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjJkYWY3ZjU0MzBmMTFkZWY1ZmQxZDY3NTk4NDg3MzY5Zjk3YzQyZjQ=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2017-03-05T19:33:53Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2017-03-05T19:33:53Z\"}, \"message\": \"Merge pull request #874 from simartin/ticket_7912\\n\\nTicket #7912: Properly preprocess files with decreasing line numbers, due to #line directives\", \"tree\": {\"sha\": \"99cd140acced4bc1761df604d8176a59995990e2\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/99cd140acced4bc1761df604d8176a59995990e2\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/2daf7f5430f11def5fd1d67598487369f97c42f4\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/2daf7f5430f11def5fd1d67598487369f97c42f4\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/2daf7f5430f11def5fd1d67598487369f97c42f4\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/2daf7f5430f11def5fd1d67598487369f97c42f4/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"34dd4935d974db3c9189a1c091776f63054cf9bb\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/34dd4935d974db3c9189a1c091776f63054cf9bb\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/34dd4935d974db3c9189a1c091776f63054cf9bb\"}, {\"sha\": \"43e4364675d4d47125b0d919039ba73dd4f6376e\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/43e4364675d4d47125b0d919039ba73dd4f6376e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/43e4364675d4d47125b0d919039ba73dd4f6376e\"}], \"stats\": {\"total\": 17, \"additions\": 16, \"deletions\": 1}, \"files\": [{\"sha\": \"1e75339428494eef45b94ceedb1ac538a6001eef\", \"filename\": \"lib/preprocessor.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/2daf7f5430f11def5fd1d67598487369f97c42f4/lib%2Fpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/2daf7f5430f11def5fd1d67598487369f97c42f4/lib%2Fpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fpreprocessor.cpp?ref=2daf7f5430f11def5fd1d67598487369f97c42f4\", \"patch\": \"@@ -615,7 +615,7 @@ std::string Preprocessor::getcode(const simplecpp::TokenList &tokens1, const std\\n             line = tok->location.line;\\n         }\\n \\n-        if (tok->previous && line == tok->location.line)\\n+        if (tok->previous && line >= tok->location.line) // #7912\\n             ret << ' ';\\n         bool newline = false;\\n         while (tok->location.line > line) {\"}, {\"sha\": \"1eb54098854fe9fac029129bff7d4f7531820622\", \"filename\": \"test/testpreprocessor.cpp\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/2daf7f5430f11def5fd1d67598487369f97c42f4/test%2Ftestpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/2daf7f5430f11def5fd1d67598487369f97c42f4/test%2Ftestpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestpreprocessor.cpp?ref=2daf7f5430f11def5fd1d67598487369f97c42f4\", \"patch\": \"@@ -240,6 +240,8 @@ class TestPreprocessor : public TestFixture {\\n         TEST_CASE(testDirectiveIncludeTypes);\\n         TEST_CASE(testDirectiveIncludeLocations);\\n         TEST_CASE(testDirectiveIncludeComments);\\n+\\n+        TEST_CASE(testSameLine);  // #7912\\n     }\\n \\n     void preprocess(const char* code, std::map<std::string, std::string>& actual, const char filename[] = \\\"file.c\\\") {\\n@@ -2294,6 +2296,19 @@ class TestPreprocessor : public TestFixture {\\n         ASSERT_EQUALS(dumpdata, ostr.str());\\n     }\\n \\n+    void testSameLine() { // Ticket #7912\\n+        const char code[] = \\\"#line 1 \\\\\\\"bench/btl/libs/BLAS/blas_interface_impl.hh\\\\\\\" \\\\n\\\"\\n+                            \\\"template < > class blas_interface < float > : public c_interface_base < float > \\\\n\\\"\\n+                            \\\"{ } ;\\\\n\\\"\\n+                            \\\"#line 1 \\\\\\\"bench/btl/libs/BLAS/blas_interface_impl.hh\\\\\\\" \\\\n\\\"\\n+                            \\\"template < > class blas_interface < double > : public c_interface_base < double > \\\\n\\\"\\n+                            \\\"{ } ;\\\";\\n+        const char exp[]  = \\\"template < > class blas_interface < float > : public c_interface_base < float >\\\\n\\\"\\n+                            \\\"{ } ; template < > class blas_interface < double > : public c_interface_base < double > { } ;\\\";\\n+        Preprocessor preprocessor(settings0, this);\\n+        ASSERT_EQUALS(exp, preprocessor.getcode(code, \\\"\\\", \\\"test.cpp\\\"));\\n+    }\\n+\\n };\\n \\n REGISTER_TEST(TestPreprocessor)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNDZhYzBkNzljMTAzNmFmYjBjNTY1ZTJiYzMzMGQ5ZWI1ZmZhOWViMSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1", "content": "{\"sha\": \"46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjQ2YWMwZDc5YzEwMzZhZmIwYzU2NWUyYmMzMzBkOWViNWZmYTllYjE=\", \"commit\": {\"author\": {\"name\": \"Rikard Falkeborn\", \"email\": \"rikard.falkeborn@gmail.com\", \"date\": \"2019-09-21T12:59:54Z\"}, \"committer\": {\"name\": \"Sebastian\", \"email\": \"versat@users.noreply.github.com\", \"date\": \"2019-09-21T12:59:54Z\"}, \"message\": \"Checkmemleakautovar: fix crash and FP (#2196)\\n\\nThis fixes crashes found by daca where valueType() is NULL. Also,\\r\\nsomewhat related, it removes warnings when casting to a type that is\\r\\nunknown to cppcheck, for example, there is no longer a warning for the\\r\\nfollowing code:\\r\\n\\r\\n\\tvoid* f() {\\r\\n\\t\\tvoid *x = malloc(1);\\r\\n\\t\\treturn (mytype)x;\\r\\n\\t}\", \"tree\": {\"sha\": \"4d58dde64365fc260d7e2f79bca469717eb0056a\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/4d58dde64365fc260d7e2f79bca469717eb0056a\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/comments\", \"author\": {\"login\": \"rikardfalkeborn\", \"id\": 4839044, \"node_id\": \"MDQ6VXNlcjQ4MzkwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4839044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rikardfalkeborn\", \"html_url\": \"https://github.com/rikardfalkeborn\", \"followers_url\": \"https://api.github.com/users/rikardfalkeborn/followers\", \"following_url\": \"https://api.github.com/users/rikardfalkeborn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rikardfalkeborn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rikardfalkeborn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rikardfalkeborn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rikardfalkeborn/orgs\", \"repos_url\": \"https://api.github.com/users/rikardfalkeborn/repos\", \"events_url\": \"https://api.github.com/users/rikardfalkeborn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rikardfalkeborn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"versat\", \"id\": 7264306, \"node_id\": \"MDQ6VXNlcjcyNjQzMDY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7264306?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/versat\", \"html_url\": \"https://github.com/versat\", \"followers_url\": \"https://api.github.com/users/versat/followers\", \"following_url\": \"https://api.github.com/users/versat/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/versat/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/versat/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/versat/subscriptions\", \"organizations_url\": \"https://api.github.com/users/versat/orgs\", \"repos_url\": \"https://api.github.com/users/versat/repos\", \"events_url\": \"https://api.github.com/users/versat/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/versat/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5ac0b0e752378f825017a1ff9065a9305d38a08e\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/5ac0b0e752378f825017a1ff9065a9305d38a08e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/5ac0b0e752378f825017a1ff9065a9305d38a08e\"}], \"stats\": {\"total\": 30, \"additions\": 27, \"deletions\": 3}, \"files\": [{\"sha\": \"868156e8f9d6f03d955f8afd8c983943194344c4\", \"filename\": \"Makefile\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/Makefile\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/Makefile\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/Makefile?ref=46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"patch\": \"@@ -465,7 +465,7 @@ $(libcppdir)/ctu.o: lib/ctu.cpp externals/tinyxml/tinyxml2.h lib/astutils.h lib/\\n $(libcppdir)/errorlogger.o: lib/errorlogger.cpp externals/tinyxml/tinyxml2.h lib/analyzerinfo.h lib/check.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h\\n \\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CPPFILESDIR) $(CXXFLAGS) $(UNDEF_STRICT_ANSI) -c -o $(libcppdir)/errorlogger.o $(libcppdir)/errorlogger.cpp\\n \\n-$(libcppdir)/exprengine.o: lib/exprengine.cpp lib/config.h lib/errorlogger.h lib/exprengine.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h\\n+$(libcppdir)/exprengine.o: lib/exprengine.cpp lib/astutils.h lib/config.h lib/errorlogger.h lib/exprengine.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h\\n \\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CPPFILESDIR) $(CXXFLAGS) $(UNDEF_STRICT_ANSI) -c -o $(libcppdir)/exprengine.o $(libcppdir)/exprengine.cpp\\n \\n $(libcppdir)/importproject.o: lib/importproject.cpp externals/picojson.h externals/tinyxml/tinyxml2.h lib/config.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h\\n@@ -603,7 +603,7 @@ test/testinternal.o: test/testinternal.cpp lib/check.h lib/checkinternal.h lib/c\\n test/testio.o: test/testio.cpp lib/check.h lib/checkio.h lib/config.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h test/testsuite.h\\n \\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CPPFILESDIR) $(CXXFLAGS) $(UNDEF_STRICT_ANSI) -c -o test/testio.o test/testio.cpp\\n \\n-test/testleakautovar.o: test/testleakautovar.cpp externals/simplecpp/simplecpp.h lib/check.h lib/checkleakautovar.h lib/config.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h test/testsuite.h\\n+test/testleakautovar.o: test/testleakautovar.cpp externals/simplecpp/simplecpp.h externals/tinyxml/tinyxml2.h lib/check.h lib/checkleakautovar.h lib/config.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h test/testsuite.h\\n \\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CPPFILESDIR) $(CXXFLAGS) $(UNDEF_STRICT_ANSI) -c -o test/testleakautovar.o test/testleakautovar.cpp\\n \\n test/testlibrary.o: test/testlibrary.cpp externals/tinyxml/tinyxml2.h lib/config.h lib/errorlogger.h lib/importproject.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h test/testsuite.h\"}, {\"sha\": \"2314c6925c4226c4196bf2b44d0f3e977d337a51\", \"filename\": \"lib/checkleakautovar.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/lib%2Fcheckleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/lib%2Fcheckleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckleakautovar.cpp?ref=46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"patch\": \"@@ -936,7 +936,10 @@ void CheckLeakAutoVar::ret(const Token *tok, const VarInfo &varInfo)\\n                     continue;\\n \\n                 tok2 = tok2->next();\\n-                while (tok2 && tok2->isCast() && (tok2->valueType() && (tok2->valueType()->pointer || (tok2->valueType()->typeSize(*mSettings) >= mSettings->sizeof_pointer))))\\n+                while (tok2 && tok2->isCast() && tok2->valueType() &&\\n+                       (tok2->valueType()->pointer ||\\n+                        (tok2->valueType()->typeSize(*mSettings) == 0) ||\\n+                        (tok2->valueType()->typeSize(*mSettings) >= mSettings->sizeof_pointer)))\\n                     tok2 = tok2->astOperand2() ? tok2->astOperand2() : tok2->astOperand1();\\n                 if (Token::Match(tok2, \\\"%varid%\\\", varid))\\n                     tok2 = tok2->next();\"}, {\"sha\": \"39d4d527657cc8451b0567cecf1fee5c43fe7ad5\", \"filename\": \"test/testleakautovar.cpp\", \"status\": \"modified\", \"additions\": 21, \"deletions\": 0, \"changes\": 21, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/test%2Ftestleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1/test%2Ftestleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestleakautovar.cpp?ref=46ac0d79c1036afb0c565e2bc330d9eb5ffa9eb1\", \"patch\": \"@@ -24,6 +24,7 @@\\n #include \\\"tokenize.h\\\"\\n \\n #include <simplecpp.h>\\n+#include <tinyxml2.h>\\n #include <vector>\\n \\n class TestLeakAutoVar : public TestFixture {\\n@@ -47,6 +48,14 @@ class TestLeakAutoVar : public TestFixture {\\n         settings.library.smartPointers.insert(\\\"std::shared_ptr\\\");\\n         settings.library.smartPointers.insert(\\\"std::unique_ptr\\\");\\n \\n+        const char xmldata[] = \\\"<?xml version=\\\\\\\"1.0\\\\\\\"?>\\\\n\\\"\\n+        \\\"<def>\\\\n\\\"\\n+        \\\"  <podtype name=\\\\\\\"uint8_t\\\\\\\" sign=\\\\\\\"u\\\\\\\" size=\\\\\\\"1\\\\\\\"/>\\\\n\\\"\\n+        \\\"</def>\\\";\\n+        tinyxml2::XMLDocument doc;\\n+        doc.Parse(xmldata, sizeof(xmldata));\\n+        settings.library.load(doc);\\n+\\n         // Assign\\n         TEST_CASE(assign1);\\n         TEST_CASE(assign2);\\n@@ -1735,6 +1744,18 @@ class TestLeakAutoVar : public TestFixture {\\n               \\\"    return (void*)(short)x;\\\\n\\\"\\n               \\\"}\\\", true);\\n         ASSERT_EQUALS(\\\"[test.cpp:3]: (error) Memory leak: x\\\\n\\\", errout.str());\\n+\\n+        check(\\\"void* f() {\\\\n\\\"\\n+              \\\"    void *x = malloc(1);\\\\n\\\"\\n+              \\\"    return (mytype)x;\\\\n\\\"\\n+              \\\"}\\\", true);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void* f() {\\\\n\\\" // Do not crash\\n+              \\\"    void *x = malloc(1);\\\\n\\\"\\n+              \\\"    return (mytype)y;\\\\n\\\"\\n+              \\\"}\\\", true);\\n+        ASSERT_EQUALS(\\\"[test.cpp:3]: (error) Memory leak: x\\\\n\\\", errout.str());\\n     }\\n \\n     void test1() { // 3809\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMjkwNTYzYjk2NDA1MDVkMTQwNjg0NTg3ZTVjMjFlODg3ZDUxMDQ5NSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/290563b9640505d140684587e5c21e887d510495", "content": "{\"sha\": \"290563b9640505d140684587e5c21e887d510495\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjI5MDU2M2I5NjQwNTA1ZDE0MDY4NDU4N2U1YzIxZTg4N2Q1MTA0OTU=\", \"commit\": {\"author\": {\"name\": \"IOBYTE\", \"email\": \"reif@earthlink.net\", \"date\": \"2018-10-15T17:35:26Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2018-10-15T17:35:26Z\"}, \"message\": \"Fix specialized template regression. (#1425)\\n\\n* Fix specialized template regression.\\r\\n\\r\\nOnly check for instantiation of template being processed rather than\\r\\ncount of all instantiations.\\r\\n\\r\\n* Add 2 more tests.\", \"tree\": {\"sha\": \"0a0358372260af25d4263dc24a165631171aa624\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/0a0358372260af25d4263dc24a165631171aa624\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/290563b9640505d140684587e5c21e887d510495\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/290563b9640505d140684587e5c21e887d510495\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/290563b9640505d140684587e5c21e887d510495\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/290563b9640505d140684587e5c21e887d510495/comments\", \"author\": {\"login\": \"IOBYTE\", \"id\": 1819479, \"node_id\": \"MDQ6VXNlcjE4MTk0Nzk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1819479?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/IOBYTE\", \"html_url\": \"https://github.com/IOBYTE\", \"followers_url\": \"https://api.github.com/users/IOBYTE/followers\", \"following_url\": \"https://api.github.com/users/IOBYTE/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/IOBYTE/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/IOBYTE/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/IOBYTE/subscriptions\", \"organizations_url\": \"https://api.github.com/users/IOBYTE/orgs\", \"repos_url\": \"https://api.github.com/users/IOBYTE/repos\", \"events_url\": \"https://api.github.com/users/IOBYTE/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/IOBYTE/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f72847530e9431a3042306e0748ddc90667d859c\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/f72847530e9431a3042306e0748ddc90667d859c\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/f72847530e9431a3042306e0748ddc90667d859c\"}], \"stats\": {\"total\": 59, \"additions\": 58, \"deletions\": 1}, \"files\": [{\"sha\": \"15778fcfec60d070d14d555f42800e5409853053\", \"filename\": \"lib/templatesimplifier.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 1, \"changes\": 6, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/290563b9640505d140684587e5c21e887d510495/lib%2Ftemplatesimplifier.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/290563b9640505d140684587e5c21e887d510495/lib%2Ftemplatesimplifier.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftemplatesimplifier.cpp?ref=290563b9640505d140684587e5c21e887d510495\", \"patch\": \"@@ -1704,8 +1704,12 @@ bool TemplateSimplifier::simplifyTemplateInstantiations(\\n     }\\n \\n     // process uninstantiated templates\\n+    const std::list<TokenAndName>::iterator it = std::find_if(mTemplateInstantiations.begin(),\\n+            mTemplateInstantiations.end(),\\n+            FindName(templateDeclaration.name));\\n+\\n     // TODO: remove the specialized check and handle all uninstantiated templates someday.\\n-    if (mTemplateInstantiations.empty() && specialized) {\\n+    if (it == mTemplateInstantiations.end() && specialized) {\\n         simplifyCalculations();\\n \\n         Token * tok2 = const_cast<Token *>(tok->tokAt(namepos));\"}, {\"sha\": \"cef7fa7f08921122542ea7c63c520acffcbbe54d\", \"filename\": \"test/testsimplifytemplate.cpp\", \"status\": \"modified\", \"additions\": 53, \"deletions\": 0, \"changes\": 53, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/290563b9640505d140684587e5c21e887d510495/test%2Ftestsimplifytemplate.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/290563b9640505d140684587e5c21e887d510495/test%2Ftestsimplifytemplate.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestsimplifytemplate.cpp?ref=290563b9640505d140684587e5c21e887d510495\", \"patch\": \"@@ -130,6 +130,7 @@ class TestSimplifyTemplate : public TestFixture {\\n         TEST_CASE(expandSpecialized1);\\n         TEST_CASE(expandSpecialized2);\\n         TEST_CASE(expandSpecialized3); // #8671\\n+        TEST_CASE(expandSpecialized4);\\n \\n         TEST_CASE(templateAlias1);\\n         TEST_CASE(templateAlias2);\\n@@ -1818,6 +1819,58 @@ class TestSimplifyTemplate : public TestFixture {\\n         ASSERT_EQUALS(expected, tok(code));\\n     }\\n \\n+    void expandSpecialized4() {\\n+        {\\n+            const char code[] = \\\"template<> class C<char> { };\\\\n\\\"\\n+                                \\\"map<int> m;\\\";\\n+            const char expected[] = \\\"class C<char> { } ; \\\"\\n+                                    \\\"map < int > m ;\\\";\\n+            ASSERT_EQUALS(expected, tok(code));\\n+        }\\n+        {\\n+            const char code[] = \\\"template<> class C<char> { };\\\\n\\\"\\n+                                \\\"map<int> m;\\\\n\\\"\\n+                                \\\"C<char> c;\\\";\\n+            const char expected[] = \\\"class C<char> { } ; \\\"\\n+                                    \\\"map < int > m ; \\\"\\n+                                    \\\"C<char> c ;\\\";\\n+            ASSERT_EQUALS(expected, tok(code));\\n+        }\\n+        {\\n+            const char code[] = \\\"template<typename T> class C { };\\\\n\\\"\\n+                                \\\"template<> class C<char> { };\\\\n\\\"\\n+                                \\\"map<int> m;\\\\n\\\";\\n+            const char expected[] = \\\"template < typename T > class C { } ; \\\"\\n+                                    \\\"class C<char> { } ; \\\"\\n+                                    \\\"map < int > m ;\\\";\\n+            ASSERT_EQUALS(expected, tok(code));\\n+        }\\n+        {\\n+            const char code[] = \\\"template<typename T> class C { };\\\\n\\\"\\n+                                \\\"template<> class C<char> { };\\\\n\\\"\\n+                                \\\"map<int> m;\\\\n\\\"\\n+                                \\\"C<int> i;\\\";\\n+            const char expected[] = \\\"class C<char> { } ; \\\"\\n+                                    \\\"map < int > m ; \\\"\\n+                                    \\\"C<int> i ; \\\"\\n+                                    \\\"class C<int> { } ;\\\";\\n+            ASSERT_EQUALS(expected, tok(code));\\n+        }\\n+        {\\n+            const char code[] = \\\"template<typename T> class C { };\\\\n\\\"\\n+                                \\\"template<> class C<char> { };\\\\n\\\"\\n+                                \\\"map<int> m;\\\\n\\\"\\n+                                \\\"C<int> i;\\\\n\\\"\\n+                                \\\"C<char> c;\\\";\\n+            const char expected[] = \\\"class C<char> { } ; \\\"\\n+                                    \\\"map < int > m ; \\\"\\n+                                    \\\"C<int> i ; \\\"\\n+                                    \\\"C<char> c ; \\\"\\n+                                    \\\"class C<int> { } ;\\\";\\n+            ASSERT_EQUALS(expected, tok(code));\\n+        }\\n+    }\\n+\\n     void templateAlias1() {\\n         const char code[] = \\\"template<class T, int N> struct Foo {};\\\\n\\\"\\n                             \\\"template<class T> using Bar = Foo<T,3>;\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMGM2YWFiZTQ0NDVmMDk3NTM5YTVkMWYyYTczODE1ZTY5Y2UzZDUyZiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/0c6aabe4445f097539a5d1f2a73815e69ce3d52f", "content": "{\"sha\": \"0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjBjNmFhYmU0NDQ1ZjA5NzUzOWE1ZDFmMmE3MzgxNWU2OWNlM2Q1MmY=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2020-07-08T13:10:41Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-07-08T13:10:41Z\"}, \"message\": \"Merge pull request #2703 from rikardfalkeborn/9652-fp-function-call-cast-config\\n\\nFix #9652 (fp memleak with function call with cast)\", \"tree\": {\"sha\": \"7224c0afee4e5e7550b648cc368c9b29457ad365\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/7224c0afee4e5e7550b648cc368c9b29457ad365\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJfBcXRCRBK7hj4Ov3rIwAAdHIIABkDe628FDrOWpLG5T84p1jn\\nciVPFLC1OlQfeXU0wSPtwICSJnJJ2ec5Tk8s3DMGCoFzNe4zdQ+M4YXmsPMNhjdB\\nQj11FYu5N8nROW/uHe4WKODZmnpX+/l7rTPKcq6NoXEm3RL5RdzPOcG1ihgnZYhF\\n3dTfHncQLO34FEphMwnZMByoV0aHjuO5zePjIBNGjMmwdpN9unlzwYKaMM0e+tM9\\nUTizfrjWnr2uzBfHcTUGD19vjGhumuifpPgrLVGaHUQDvZhOz3ul3qbRpyQ5nV87\\ndgw6cPWkyztXuaiAAl3rK4FNxBx5gh2UvLYXnwSj9Fod89IQyJtFQ3dBbgKQP6I=\\n=fOST\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 7224c0afee4e5e7550b648cc368c9b29457ad365\\nparent e26f717f59bd89b2ba2e9dd7721a439586e12366\\nparent 4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\\nauthor Daniel Marjam\\u00e4ki <daniel.marjamaki@gmail.com> 1594213841 +0200\\ncommitter GitHub <noreply@github.com> 1594213841 +0200\\n\\nMerge pull request #2703 from rikardfalkeborn/9652-fp-function-call-cast-config\\n\\nFix #9652 (fp memleak with function call with cast)\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0c6aabe4445f097539a5d1f2a73815e69ce3d52f/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e26f717f59bd89b2ba2e9dd7721a439586e12366\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/e26f717f59bd89b2ba2e9dd7721a439586e12366\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/e26f717f59bd89b2ba2e9dd7721a439586e12366\"}, {\"sha\": \"4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4996ec190ecf27a4bf018eb0dcd12e2a51fd550e\"}], \"stats\": {\"total\": 46, \"additions\": 45, \"deletions\": 1}, \"files\": [{\"sha\": \"551e475ce8cf2ec66d1309e361bb70f4472f65c4\", \"filename\": \"lib/checkleakautovar.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0c6aabe4445f097539a5d1f2a73815e69ce3d52f/lib%2Fcheckleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0c6aabe4445f097539a5d1f2a73815e69ce3d52f/lib%2Fcheckleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckleakautovar.cpp?ref=0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"patch\": \"@@ -856,7 +856,8 @@ void CheckLeakAutoVar::functionCall(const Token *tokName, const Token *tokOpenin\\n     }\\n \\n     int argNr = 1;\\n-    for (const Token *arg = tokFirstArg; arg; arg = arg->nextArgument()) {\\n+    for (const Token *funcArg = tokFirstArg; funcArg; funcArg = funcArg->nextArgument()) {\\n+        const Token* arg = funcArg;\\n         if (mTokenizer->isCPP() && arg->str() == \\\"new\\\") {\\n             arg = arg->next();\\n             if (Token::simpleMatch(arg, \\\"( std :: nothrow )\\\"))\"}, {\"sha\": \"7aea76b0646fe51164275264185c21221fabfca2\", \"filename\": \"test/testleakautovar.cpp\", \"status\": \"modified\", \"additions\": 43, \"deletions\": 0, \"changes\": 43, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0c6aabe4445f097539a5d1f2a73815e69ce3d52f/test%2Ftestleakautovar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0c6aabe4445f097539a5d1f2a73815e69ce3d52f/test%2Ftestleakautovar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestleakautovar.cpp?ref=0c6aabe4445f097539a5d1f2a73815e69ce3d52f\", \"patch\": \"@@ -184,6 +184,8 @@ class TestLeakAutoVar : public TestFixture {\\n         TEST_CASE(smartPtrInContainer); // #8262\\n \\n         TEST_CASE(recursiveCountLimit); // #5872 #6157 #9097\\n+\\n+        TEST_CASE(functionCallCastConfig); // #9652\\n     }\\n \\n     void check(const char code[], bool cpp = false) {\\n@@ -202,6 +204,22 @@ class TestLeakAutoVar : public TestFixture {\\n         c.runChecks(&tokenizer, &settings, this);\\n     }\\n \\n+    void check(const char code[], Settings & settings) {\\n+        // Clear the error buffer..\\n+        errout.str(\\\"\\\");\\n+\\n+        // Tokenize..\\n+        Tokenizer tokenizer(&settings, this);\\n+        std::istringstream istr(code);\\n+        tokenizer.tokenize(istr, \\\"test.cpp\\\");\\n+\\n+        // Check for leaks..\\n+        CheckLeakAutoVar c;\\n+        settings.checkLibrary = true;\\n+        settings.addEnabled(\\\"information\\\");\\n+        c.runChecks(&tokenizer, &settings, this);\\n+    }\\n+\\n     void checkP(const char code[], bool cpp = false) {\\n         // Clear the error buffer..\\n         errout.str(\\\"\\\");\\n@@ -2023,6 +2041,31 @@ class TestLeakAutoVar : public TestFixture {\\n                                \\\"}\\\"));\\n     }\\n \\n+    void functionCallCastConfig() { // #9652\\n+        Settings settingsFunctionCall = settings;\\n+\\n+        const char xmldata[] = \\\"<?xml version=\\\\\\\"1.0\\\\\\\"?>\\\\n\\\"\\n+                               \\\"<def format=\\\\\\\"2\\\\\\\">\\\\n\\\"\\n+                               \\\"  <function name=\\\\\\\"free_func\\\\\\\">\\\\n\\\"\\n+                               \\\"    <noreturn>false</noreturn>\\\\n\\\"\\n+                               \\\"    <arg nr=\\\\\\\"1\\\\\\\">\\\\n\\\"\\n+                               \\\"      <not-uninit/>\\\\n\\\"\\n+                               \\\"    </arg>\\\\n\\\"\\n+                               \\\"    <arg nr=\\\\\\\"2\\\\\\\">\\\\n\\\"\\n+                               \\\"      <not-uninit/>\\\\n\\\"\\n+                               \\\"    </arg>\\\\n\\\"\\n+                               \\\"  </function>\\\\n\\\"\\n+                               \\\"</def>\\\";\\n+        tinyxml2::XMLDocument doc;\\n+        doc.Parse(xmldata, sizeof(xmldata));\\n+        settingsFunctionCall.library.load(doc);\\n+        check(\\\"void test_func()\\\\n\\\"\\n+              \\\"{\\\\n\\\"\\n+              \\\"    char * buf = malloc(4);\\\\n\\\"\\n+              \\\"    free_func((void *)(1), buf);\\\\n\\\"\\n+              \\\"}\\\", settingsFunctionCall);\\n+        ASSERT_EQUALS(\\\"[test.cpp:5]: (information) --check-library: Function free_func() should have <use>/<leak-ignore> configuration\\\\n\\\", errout.str());\\n+    }\\n };\\n \\n REGISTER_TEST(TestLeakAutoVar)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNTM3MzRhM2RhMWRkMzk0YWVlOTM5ODEyNzY5MmIwZTM4ZTlmZmE5ZiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/53734a3da1dd394aee9398127692b0e38e9ffa9f", "content": "{\"sha\": \"53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjUzNzM0YTNkYTFkZDM5NGFlZTkzOTgxMjc2OTJiMGUzOGU5ZmZhOWY=\", \"commit\": {\"author\": {\"name\": \"shaneasd\", \"email\": \"thatguyiknow5@hotmail.com\", \"date\": \"2020-12-28T09:50:42Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-12-28T09:50:42Z\"}, \"message\": \"Test for return address of reference (#2991)\", \"tree\": {\"sha\": \"b9200be1408e3cd2a9cbc23bef2d33597db11064\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/b9200be1408e3cd2a9cbc23bef2d33597db11064\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJf6apyCRBK7hj4Ov3rIwAAdHIIACl7TeUahed1YCVQUGZu90yb\\nozFHfWs1nvlkGiaJ1K3H/LqIVIwMFSTVEiRUPloIymqd+cnWSwpjoESEbmGJMg2d\\nFqTVCYXGeWBhq4lx+Iz6oURi/FBb9staq0C5qNUW4F5k/ICxcYfzQYbI0Fcyil7Y\\ncIwcFP3TRRvJJUVnyXLBNiiDXaXhIwn0Sk8oWuGB+SwdEJekZKtBvVc+ks3tDIyR\\nmTDm45Wgpv+SzCwRvekJYd2ywhJOLLhVesUViqbkA3A84JS83pYtySuhq+1gyNWB\\n02mZTcAEZVijcgmxjY8vJMErZYF6GpUhYJpPXeCZ9pO8Q1XzRIowsH9cTqgxXZc=\\n=k7b3\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree b9200be1408e3cd2a9cbc23bef2d33597db11064\\nparent 28b4d1a6b3fcde84b0f4b2ff5c150da53f1c437b\\nauthor shaneasd <thatguyiknow5@hotmail.com> 1609149042 +0800\\ncommitter GitHub <noreply@github.com> 1609149042 +0100\\n\\nTest for return address of reference (#2991)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/53734a3da1dd394aee9398127692b0e38e9ffa9f/comments\", \"author\": {\"login\": \"shaneasd\", \"id\": 23055764, \"node_id\": \"MDQ6VXNlcjIzMDU1NzY0\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/23055764?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/shaneasd\", \"html_url\": \"https://github.com/shaneasd\", \"followers_url\": \"https://api.github.com/users/shaneasd/followers\", \"following_url\": \"https://api.github.com/users/shaneasd/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/shaneasd/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/shaneasd/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/shaneasd/subscriptions\", \"organizations_url\": \"https://api.github.com/users/shaneasd/orgs\", \"repos_url\": \"https://api.github.com/users/shaneasd/repos\", \"events_url\": \"https://api.github.com/users/shaneasd/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/shaneasd/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"28b4d1a6b3fcde84b0f4b2ff5c150da53f1c437b\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/28b4d1a6b3fcde84b0f4b2ff5c150da53f1c437b\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/28b4d1a6b3fcde84b0f4b2ff5c150da53f1c437b\"}], \"stats\": {\"total\": 18, \"additions\": 17, \"deletions\": 1}, \"files\": [{\"sha\": \"8ece5b7fa6b9817411433725cb8efeace379f6b2\", \"filename\": \"lib/valueflow.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/53734a3da1dd394aee9398127692b0e38e9ffa9f/lib%2Fvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/53734a3da1dd394aee9398127692b0e38e9ffa9f/lib%2Fvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fvalueflow.cpp?ref=53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"patch\": \"@@ -2742,7 +2742,8 @@ std::vector<LifetimeToken> getLifetimeTokens(const Token* tok, bool escape, Valu\\n             } else if (Token::simpleMatch(var->declEndToken(), \\\"=\\\")) {\\n                 errorPath.emplace_back(var->declEndToken(), \\\"Assigned to reference.\\\");\\n                 const Token *vartok = var->declEndToken()->astOperand2();\\n-                const bool temporary = isTemporary(true, vartok, nullptr, true);\\n+                const bool temporaryDefault = false; //If we can't tell then assume the value is not temporary as this will result in fewer false positives.\\n+                const bool temporary = isTemporary(true, vartok, nullptr, temporaryDefault);\\n                 const bool nonlocal = var->isStatic() || var->isGlobal();\\n                 if (vartok == tok || (nonlocal && temporary) || (!escape && (var->isConst() || var->isRValueReference()) && temporary))\\n                     return {{tok, true, std::move(errorPath)}};\"}, {\"sha\": \"bfc9439ffa9a8adeb9bf5bfa22d52b1a53470360\", \"filename\": \"test/testautovariables.cpp\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/53734a3da1dd394aee9398127692b0e38e9ffa9f/test%2Ftestautovariables.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/53734a3da1dd394aee9398127692b0e38e9ffa9f/test%2Ftestautovariables.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestautovariables.cpp?ref=53734a3da1dd394aee9398127692b0e38e9ffa9f\", \"patch\": \"@@ -2564,6 +2564,21 @@ class TestAutoVariables : public TestFixture {\\n               \\\"    }\\\\n\\\"\\n               \\\"};\\\\n\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        //Make sure we can still take the address of a reference without warning\\n+        check(\\\"int* foo() {\\\\n\\\"\\n+              \\\"  int& x = getX();\\\\n\\\"\\n+              \\\"  return &x;\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+        check(\\\"struct C {\\\\n\\\"\\n+              \\\"  int* m_x;\\\\n\\\"\\n+              \\\"  void foo() {\\\\n\\\"\\n+              \\\"    const int& x = getX();\\\\n\\\"\\n+              \\\"    m_x = &x;\\\\n\\\"\\n+              \\\"  }\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n     void danglingLifetimeFunction() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMGM2NTlhMTQ5OTUzYjlhNjc5MDFhNWIzMDI1OWI3ZWY1MzRiYmFhZCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/0c659a149953b9a67901a5b30259b7ef534bbaad", "content": "{\"sha\": \"0c659a149953b9a67901a5b30259b7ef534bbaad\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjBjNjU5YTE0OTk1M2I5YTY3OTAxYTViMzAyNTliN2VmNTM0YmJhYWQ=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2020-06-09T06:16:53Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-06-09T06:16:53Z\"}, \"message\": \"Fix incorrect logic for condition (#2675)\", \"tree\": {\"sha\": \"498bce07dfe18c9f51d6765c8c795ec00ca4392f\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/498bce07dfe18c9f51d6765c8c795ec00ca4392f\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/0c659a149953b9a67901a5b30259b7ef534bbaad\", \"comment_count\": 1, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJe3ylVCRBK7hj4Ov3rIwAAdHIIAJb51IWLbKR80IZFmSjkURLZ\\nmfAsXkyndeGLj95FOdew+2UQfvdap3s3cw23TJPjPKBIAZywEUTs+iY5XDMit9K2\\nfqPKP16E1fVnSz6qVPwogcxLSx/OJRKifXnQQIc42rDJJ3LGy9ifYGErY6SlPM0I\\nB6fKIdHI3yMqwerTSmgol8HIh63Tvh/vgYlHHPjVmOOsz6r9hsoI9ek5jAXVdDCu\\nq8AObYDkeNALyDOp2x1Mk6s3vOPS45mp/Wzh9+tYPKPJoSWvmLOqvQi5nSX795N7\\nAHS8lkWyz4Ra60ndN+cwgwQiQugb55Fay6stA/fNkBkx104nPUNeszU87rjqNrM=\\n=/gZs\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 498bce07dfe18c9f51d6765c8c795ec00ca4392f\\nparent 6d796b434ea4060c99995a01a9e6b5b90e04bb17\\nauthor Paul Fultz II <pfultz2@yahoo.com> 1591683413 -0500\\ncommitter GitHub <noreply@github.com> 1591683413 +0200\\n\\nFix incorrect logic for condition (#2675)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0c659a149953b9a67901a5b30259b7ef534bbaad\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/0c659a149953b9a67901a5b30259b7ef534bbaad\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0c659a149953b9a67901a5b30259b7ef534bbaad/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6d796b434ea4060c99995a01a9e6b5b90e04bb17\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6d796b434ea4060c99995a01a9e6b5b90e04bb17\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/6d796b434ea4060c99995a01a9e6b5b90e04bb17\"}], \"stats\": {\"total\": 4, \"additions\": 2, \"deletions\": 2}, \"files\": [{\"sha\": \"8873687a10a1cffac664c5fb14d5cf292a020646\", \"filename\": \"lib/forwardanalyzer.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0c659a149953b9a67901a5b30259b7ef534bbaad/lib%2Fforwardanalyzer.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0c659a149953b9a67901a5b30259b7ef534bbaad/lib%2Fforwardanalyzer.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fforwardanalyzer.cpp?ref=0c659a149953b9a67901a5b30259b7ef534bbaad\", \"patch\": \"@@ -299,7 +299,7 @@ struct ForwardTraversal {\\n                     if (!condTok->hasKnownIntValue()) {\\n                         if (!analyzer->lowerToPossible())\\n                             return Progress::Break;\\n-                    } else if (condTok->values().front().intvalue == !inElse) {\\n+                    } else if (condTok->values().front().intvalue == inElse) {\\n                         return Progress::Break;\\n                     }\\n                     analyzer->assume(condTok, !inElse, tok);\"}, {\"sha\": \"9fe5441320ce3d09089e97e6f1b2b4d81bba20a2\", \"filename\": \"test/testvalueflow.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0c659a149953b9a67901a5b30259b7ef534bbaad/test%2Ftestvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0c659a149953b9a67901a5b30259b7ef534bbaad/test%2Ftestvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestvalueflow.cpp?ref=0c659a149953b9a67901a5b30259b7ef534bbaad\", \"patch\": \"@@ -1819,7 +1819,7 @@ class TestValueFlow : public TestFixture {\\n                \\\"    y = 42 / x;\\\\n\\\" // <- x is 2\\n                \\\"}\\\";\\n         ASSERT_EQUALS(false, testValueOfX(code, 5U, 0));\\n-        TODO_ASSERT_EQUALS(true, false, testValueOfX(code, 5U, 2));\\n+        ASSERT_EQUALS(true, testValueOfX(code, 5U, 2));\\n \\n         code = \\\"void f() {\\\\n\\\" // #6118 - FN\\n                \\\"    int x = 0;\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNjhkNzdiNzNkYTBkODZiOGQxOGJmNmZjYmJmNDVlNzdhMjlhNmIyNiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26", "content": "{\"sha\": \"68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjY4ZDc3YjczZGEwZDg2YjhkMThiZjZmY2JiZjQ1ZTc3YTI5YTZiMjY=\", \"commit\": {\"author\": {\"name\": \"PKEuS\", \"email\": \"philipp@pkeus.de\", \"date\": \"2017-05-07T07:03:30Z\"}, \"committer\": {\"name\": \"PKEuS\", \"email\": \"philipp@pkeus.de\", \"date\": \"2017-05-07T07:03:58Z\"}, \"message\": \"SymbolDatabase: Fixed parsing of unnamed arguments, properly detect pointers (#8052)\", \"tree\": {\"sha\": \"0bde41799807a09b558d168c403db0315c2711cd\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/0bde41799807a09b558d168c403db0315c2711cd\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26/comments\", \"author\": {\"login\": \"PKEuS\", \"id\": 731902, \"node_id\": \"MDQ6VXNlcjczMTkwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/731902?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/PKEuS\", \"html_url\": \"https://github.com/PKEuS\", \"followers_url\": \"https://api.github.com/users/PKEuS/followers\", \"following_url\": \"https://api.github.com/users/PKEuS/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/PKEuS/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/PKEuS/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/PKEuS/subscriptions\", \"organizations_url\": \"https://api.github.com/users/PKEuS/orgs\", \"repos_url\": \"https://api.github.com/users/PKEuS/repos\", \"events_url\": \"https://api.github.com/users/PKEuS/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/PKEuS/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"PKEuS\", \"id\": 731902, \"node_id\": \"MDQ6VXNlcjczMTkwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/731902?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/PKEuS\", \"html_url\": \"https://github.com/PKEuS\", \"followers_url\": \"https://api.github.com/users/PKEuS/followers\", \"following_url\": \"https://api.github.com/users/PKEuS/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/PKEuS/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/PKEuS/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/PKEuS/subscriptions\", \"organizations_url\": \"https://api.github.com/users/PKEuS/orgs\", \"repos_url\": \"https://api.github.com/users/PKEuS/repos\", \"events_url\": \"https://api.github.com/users/PKEuS/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/PKEuS/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"28b8bc57a87dbb3936d6554d204f0db85597a4b0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/28b8bc57a87dbb3936d6554d204f0db85597a4b0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/28b8bc57a87dbb3936d6554d204f0db85597a4b0\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"79384e67de66a4010589ca9ccab2193828613b5a\", \"filename\": \"lib/symboldatabase.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26/lib%2Fsymboldatabase.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26/lib%2Fsymboldatabase.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fsymboldatabase.cpp?ref=68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"patch\": \"@@ -1725,7 +1725,10 @@ void Variable::evaluate(const Library* lib)\\n     const Token* tok = _start;\\n     while (tok && tok->previous() && tok->previous()->isName())\\n         tok = tok->previous();\\n-    for (const Token* const end = _name?_name:_end; tok != end;) {\\n+    const Token* end = _end;\\n+    if (end)\\n+        end = end->next();\\n+    while (tok != end) {\\n         if (tok->str() == \\\"static\\\")\\n             setFlag(fIsStatic, true);\\n         else if (tok->str() == \\\"extern\\\")\"}, {\"sha\": \"e190bbf6e78c092f6ac5faac82b960a4dd027dce\", \"filename\": \"test/testsymboldatabase.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26/test%2Ftestsymboldatabase.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26/test%2Ftestsymboldatabase.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestsymboldatabase.cpp?ref=68d77b73da0d86b8d18bf6fcbbf45e77a29a6b26\", \"patch\": \"@@ -1615,6 +1615,12 @@ class TestSymbolDatabase: public TestFixture {\\n             ASSERT(g && g->type == Scope::eFunction && g->function && g->function->argumentList.size() == 1 && g->function->argumentList.front().hasDefault());\\n             ASSERT_EQUALS(\\\"\\\", errout.str());\\n         }\\n+        {\\n+            GET_SYMBOL_DB(\\\"void g(int*) { }\\\"); // unnamed pointer argument (#8052)\\n+            const Scope* g = db->findScopeByName(\\\"g\\\");\\n+            ASSERT(g && g->type == Scope::eFunction && g->function && g->function->argumentList.size() == 1 && g->function->argumentList.front().nameToken() == nullptr && g->function->argumentList.front().isPointer());\\n+            ASSERT_EQUALS(\\\"\\\", errout.str());\\n+        }\\n         {\\n             GET_SYMBOL_DB(\\\"void g(int* const) { }\\\"); // 'const' is not the name of the variable - #5882\\n             const Scope* g = db->findScopeByName(\\\"g\\\");\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNzk3ZGU0ZWY5MjBkZGE1YzU2OWU1ZmQ3NGUyNzczMWJjMzIwNTNkZCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/797de4ef920dda5c569e5fd74e27731bc32053dd", "content": "{\"sha\": \"797de4ef920dda5c569e5fd74e27731bc32053dd\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjc5N2RlNGVmOTIwZGRhNWM1NjllNWZkNzRlMjc3MzFiYzMyMDUzZGQ=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-07-16T17:08:08Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2021-07-16T17:08:08Z\"}, \"message\": \"Fixed #10363 (FP: compareValueOutOfTypeRangeError)\", \"tree\": {\"sha\": \"75eb28561ac94ba4e30355be014cd66d12cb8a75\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/75eb28561ac94ba4e30355be014cd66d12cb8a75\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/797de4ef920dda5c569e5fd74e27731bc32053dd\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/797de4ef920dda5c569e5fd74e27731bc32053dd\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/797de4ef920dda5c569e5fd74e27731bc32053dd\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/797de4ef920dda5c569e5fd74e27731bc32053dd/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"65a6d4b45c37152e06a240bb8dd377e041ca1aa2\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/65a6d4b45c37152e06a240bb8dd377e041ca1aa2\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/65a6d4b45c37152e06a240bb8dd377e041ca1aa2\"}], \"stats\": {\"total\": 16, \"additions\": 13, \"deletions\": 3}, \"files\": [{\"sha\": \"d62c7984e3984e46aeabfc1a001f854f7113e7b1\", \"filename\": \"lib/checkcondition.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/797de4ef920dda5c569e5fd74e27731bc32053dd/lib%2Fcheckcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/797de4ef920dda5c569e5fd74e27731bc32053dd/lib%2Fcheckcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckcondition.cpp?ref=797de4ef920dda5c569e5fd74e27731bc32053dd\", \"patch\": \"@@ -1806,7 +1806,7 @@ void CheckCondition::checkCompareValueOutOfTypeRange()\\n                     continue;\\n \\n                 const auto typeMinValue = (typeTok->valueType()->sign == ValueType::Sign::SIGNED) ? (-(1LL << (bits-1))) : 0;\\n-                const auto unsignedTypeMaxValue = (1LL << (bits-1)) - 1LL;\\n+                const auto unsignedTypeMaxValue = (1LL << bits) - 1LL;\\n                 const auto typeMaxValue = (typeTok->valueType()->sign == ValueType::Sign::SIGNED) ? (unsignedTypeMaxValue / 2) : unsignedTypeMaxValue;\\n \\n                 if (valueTok->getKnownIntValue() < typeMinValue)\"}, {\"sha\": \"7503b76f04008b78600a30f75a6f167ea20f7069\", \"filename\": \"test/testcondition.cpp\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 2, \"changes\": 14, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/797de4ef920dda5c569e5fd74e27731bc32053dd/test%2Ftestcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/797de4ef920dda5c569e5fd74e27731bc32053dd/test%2Ftestcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestcondition.cpp?ref=797de4ef920dda5c569e5fd74e27731bc32053dd\", \"patch\": \"@@ -4304,9 +4304,19 @@ class TestCondition : public TestFixture {\\n         settingsUnix64.platform(cppcheck::Platform::PlatformType::Unix64);\\n \\n         check(\\\"void f(unsigned char c) {\\\\n\\\"\\n-              \\\"  if (c == 1234) {}\\\\n\\\"\\n+              \\\"  if (c == 256) {}\\\\n\\\"\\n               \\\"}\\\", &settingsUnix64);\\n-        ASSERT_EQUALS(\\\"[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 1234. Condition is always true/false.\\\\n\\\", errout.str());\\n+        ASSERT_EQUALS(\\\"[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always true/false.\\\\n\\\", errout.str());\\n+\\n+        check(\\\"void f(unsigned char c) {\\\\n\\\"\\n+              \\\"  if (c == 255) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void f(bool b) {\\\\n\\\"\\n+              \\\"  if (b == true) {}\\\\n\\\"\\n+              \\\"}\\\", &settingsUnix64);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n };\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMGVlM2Y2NzhiNTJkMDIwM2Q0Yjg0YWJmNjVlNWNhYzkyZjI2YTU1MyI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/0ee3f678b52d0203d4b84abf65e5cac92f26a553", "content": "{\"sha\": \"0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjBlZTNmNjc4YjUyZDAyMDNkNGI4NGFiZjY1ZTVjYWM5MmYyNmE1NTM=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2019-02-20T14:28:31Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-02-20T14:28:31Z\"}, \"message\": \"Fix issue 8987: False positive knownConditionTrueFalse (#1678)\", \"tree\": {\"sha\": \"9ff0d267998ab3c7d34c61e1ff4daff13237fe60\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/9ff0d267998ab3c7d34c61e1ff4daff13237fe60\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/0ee3f678b52d0203d4b84abf65e5cac92f26a553/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c3244cb3599ab93bb0ed6fdc0bc83e9cfa3ec3d0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/c3244cb3599ab93bb0ed6fdc0bc83e9cfa3ec3d0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/c3244cb3599ab93bb0ed6fdc0bc83e9cfa3ec3d0\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"cfeef48c400c0a3b463152cea6de0d248391c4f4\", \"filename\": \"lib/checkcondition.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0ee3f678b52d0203d4b84abf65e5cac92f26a553/lib%2Fcheckcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0ee3f678b52d0203d4b84abf65e5cac92f26a553/lib%2Fcheckcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckcondition.cpp?ref=0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"patch\": \"@@ -1331,7 +1331,7 @@ void CheckCondition::alwaysTrueFalse()\\n             if (!(constIfWhileExpression || constValExpr || compExpr || returnStatement))\\n                 continue;\\n \\n-            if (returnStatement && scope->function && !Token::simpleMatch(scope->function->retDef, \\\"bool\\\"))\\n+            if (returnStatement && (!scope->function || !Token::simpleMatch(scope->function->retDef, \\\"bool\\\")))\\n                 continue;\\n \\n             if (returnStatement && isConstVarExpression(tok))\"}, {\"sha\": \"2467c44ba9bb19ac9d084a28215a2d98bc973f42\", \"filename\": \"test/testcondition.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/0ee3f678b52d0203d4b84abf65e5cac92f26a553/test%2Ftestcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/0ee3f678b52d0203d4b84abf65e5cac92f26a553/test%2Ftestcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestcondition.cpp?ref=0ee3f678b52d0203d4b84abf65e5cac92f26a553\", \"patch\": \"@@ -2872,6 +2872,15 @@ class TestCondition : public TestFixture {\\n               \\\"  else return 42;\\\\n\\\"\\n               \\\"}\\\\n\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"long X::g(bool unknown, int& result) {\\\\n\\\"\\n+              \\\"    long ret = 0;\\\\n\\\"\\n+              \\\"    bool f = false;\\\\n\\\"\\n+              \\\"    f = f || unknown;\\\\n\\\"\\n+              \\\"    f ? result = 42 : ret = -1;\\\\n\\\"\\n+              \\\"    return ret;\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n     void multiConditionAlwaysTrue() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMjZiZDg2M2QwYTRjNTQ5OTI1OGM5NjcyZmJiOTQ1MzQzYzM5MDFkZCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/26bd863d0a4c5499258c9672fbb945343c3901dd", "content": "{\"sha\": \"26bd863d0a4c5499258c9672fbb945343c3901dd\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjI2YmQ4NjNkMGE0YzU0OTkyNThjOTY3MmZiYjk0NTM0M2MzOTAxZGQ=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2017-06-04T10:16:49Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2017-06-04T10:16:49Z\"}, \"message\": \"Fixed #7724 (hang: long expression => wrong AST)\", \"tree\": {\"sha\": \"43799171a700f9796d4903b1609bfc5d1046a28d\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/43799171a700f9796d4903b1609bfc5d1046a28d\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/26bd863d0a4c5499258c9672fbb945343c3901dd\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/26bd863d0a4c5499258c9672fbb945343c3901dd\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/26bd863d0a4c5499258c9672fbb945343c3901dd\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/26bd863d0a4c5499258c9672fbb945343c3901dd/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4c62190e32d3a7b325329e5b8229821ef0865f24\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4c62190e32d3a7b325329e5b8229821ef0865f24\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4c62190e32d3a7b325329e5b8229821ef0865f24\"}], \"stats\": {\"total\": 70, \"additions\": 68, \"deletions\": 2}, \"files\": [{\"sha\": \"78a5637442dc70c5397ced2dcc4f27eb7e09f8d3\", \"filename\": \"lib/tokenize.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/26bd863d0a4c5499258c9672fbb945343c3901dd/lib%2Ftokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/26bd863d0a4c5499258c9672fbb945343c3901dd/lib%2Ftokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftokenize.cpp?ref=26bd863d0a4c5499258c9672fbb945343c3901dd\", \"patch\": \"@@ -3805,8 +3805,8 @@ bool Tokenizer::simplifyTokenList2()\\n     Token::assignProgressValues(list.front());\\n \\n     list.createAst();\\n-    // skipping this here may help improve performance. Might be enabled later on demand. #7208\\n-    // list.validateAst();\\n+    // needed for #7208 (garbage code) and #7724 (ast max depth limit)\\n+    list.validateAst();\\n \\n     // Create symbol database and then remove const keywords\\n     createSymbolDatabase();\"}, {\"sha\": \"7e4a5368737bd537599302b86758f81daaa706a8\", \"filename\": \"test/testtokenize.cpp\", \"status\": \"modified\", \"additions\": 66, \"deletions\": 0, \"changes\": 66, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/26bd863d0a4c5499258c9672fbb945343c3901dd/test%2Ftesttokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/26bd863d0a4c5499258c9672fbb945343c3901dd/test%2Ftesttokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftesttokenize.cpp?ref=26bd863d0a4c5499258c9672fbb945343c3901dd\", \"patch\": \"@@ -445,6 +445,7 @@ class TestTokenizer : public TestFixture {\\n \\n         // AST data\\n         TEST_CASE(astexpr);\\n+        TEST_CASE(astexpr2); // limit large expressions\\n         TEST_CASE(astpar);\\n         TEST_CASE(astnewdelete);\\n         TEST_CASE(astbrackets);\\n@@ -7866,6 +7867,8 @@ class TestTokenizer : public TestFixture {\\n         tokenList.prepareTernaryOpForAST();\\n         tokenList.list.createAst();\\n \\n+        tokenList.list.validateAst();\\n+\\n         // Basic AST validation\\n         for (const Token *tok = tokenList.list.front(); tok; tok = tok->next()) {\\n             if (tok->astOperand2() && !tok->astOperand1() && tok->str() != \\\";\\\" && tok->str() != \\\":\\\")\\n@@ -7987,6 +7990,69 @@ class TestTokenizer : public TestFixture {\\n         ASSERT_EQUALS(\\\"ifCA_FarReadfilenew(,sizeofobjtype(,(!(\\\", testAst(\\\"if (!CA_FarRead(file, (void far *)new, sizeof(objtype)))\\\")); // #5910 - don't hang if C code is parsed as C++\\n     }\\n \\n+    void astexpr2() { // limit for large expressions\\n+        // #7724 - wrong AST causes hang\\n+        // Ideally a proper AST is created for this code.\\n+        const char code[] = \\\"const char * a(int type) {\\\\n\\\"\\n+                            \\\"  return (\\\\n\\\"\\n+                            \\\"   (type == 1) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 2) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 3) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 4) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 5) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 6) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 7) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 8) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 9) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 10) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 11) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 12) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 13) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 14) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 15) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 16) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 17) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 18) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 19) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 20) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 21) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 22) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 23) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 24) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 25) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 26) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 27) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 28) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 29) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 30) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 31) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 32) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 33) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 34) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 35) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 36) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 37) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 38) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 39) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 40) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 41) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 42) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 43) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 44) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 45) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 46) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 47) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 48) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 49) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 50) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : (type == 51) ? \\\\\\\"\\\\\\\"\\\\n\\\"\\n+                            \\\" : \\\\\\\"\\\\\\\");\\\\n\\\"\\n+                            \\\"}\\\\n\\\";\\n+        // Ensure that the AST is validated for the simplified token list\\n+        tokenizeAndStringify(code); // this does not crash/hang\\n+        ASSERT_THROW(tokenizeAndStringify(code,true), InternalError); // when parentheses are simplified the AST will be wrong\\n+    }\\n+\\n     void astnewdelete() {\\n         ASSERT_EQUALS(\\\"aintnew=\\\", testAst(\\\"a = new int;\\\"));\\n         ASSERT_EQUALS(\\\"aint4[new=\\\", testAst(\\\"a = new int[4];\\\"));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZjVkYmZjZThmZmIzMTMyYmI0OWExNTU1MjdhNjIwYzk4ZTYxYjRhMSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/f5dbfce8ffb3132bb49a155527a620c98e61b4a1", "content": "{\"sha\": \"f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmY1ZGJmY2U4ZmZiMzEzMmJiNDlhMTU1NTI3YTYyMGM5OGU2MWI0YTE=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2018-05-08T18:43:57Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2018-05-08T18:43:57Z\"}, \"message\": \"Fix false positive with oppositeExpression when using binary op (#1211)\\n\\n* Fix false positive with oppositeExpression when using binary op\\r\\n\\r\\n* Simplify conditional\", \"tree\": {\"sha\": \"b92a29df0bb1ccaa68b194a770e5d8fe97ca2dc7\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/b92a29df0bb1ccaa68b194a770e5d8fe97ca2dc7\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/f5dbfce8ffb3132bb49a155527a620c98e61b4a1/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d934065d218aa1e8cc91e06cdd41c3e9c42d13f8\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d934065d218aa1e8cc91e06cdd41c3e9c42d13f8\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/d934065d218aa1e8cc91e06cdd41c3e9c42d13f8\"}], \"stats\": {\"total\": 5, \"additions\": 4, \"deletions\": 1}, \"files\": [{\"sha\": \"af0442619d98c43412c4f40242b7d94797939550\", \"filename\": \"lib/astutils.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/f5dbfce8ffb3132bb49a155527a620c98e61b4a1/lib%2Fastutils.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/f5dbfce8ffb3132bb49a155527a620c98e61b4a1/lib%2Fastutils.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fastutils.cpp?ref=f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"patch\": \"@@ -367,7 +367,7 @@ bool isOppositeExpression(bool cpp, const Token * const tok1, const Token * cons\\n         return true;\\n     if (tok1->str() == \\\"-\\\" && !tok1->astOperand2())\\n         return isSameExpression(cpp, true, tok1->astOperand1(), tok2, library, pure);\\n-    if (tok2->str() == \\\"-\\\" && !tok1->astOperand2())\\n+    if (tok2->str() == \\\"-\\\" && !tok2->astOperand2())\\n         return isSameExpression(cpp, true, tok2->astOperand1(), tok1, library, pure);\\n     return false;\\n }\"}, {\"sha\": \"c0261afa2a242483e3da02dc1b616edca72b3d03\", \"filename\": \"test/testother.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/f5dbfce8ffb3132bb49a155527a620c98e61b4a1/test%2Ftestother.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/f5dbfce8ffb3132bb49a155527a620c98e61b4a1/test%2Ftestother.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestother.cpp?ref=f5dbfce8ffb3132bb49a155527a620c98e61b4a1\", \"patch\": \"@@ -3958,6 +3958,9 @@ class TestOther : public TestFixture {\\n \\n         check(\\\"bool f(int i){ return !((i - 1) & i); }\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"bool f(unsigned i){ return (x > 0) && (x & (x-1)) == 0; }\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n     void duplicateVarExpression() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvM2YxZTJiNDI3MDBhMWViMTQ2NmQ0MjAwZWI4NzI2NWRlZmQ5NjJmNiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/3f1e2b42700a1eb1466d4200eb87265defd962f6", "content": "{\"sha\": \"3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjNmMWUyYjQyNzAwYTFlYjE0NjZkNDIwMGViODcyNjVkZWZkOTYyZjY=\", \"commit\": {\"author\": {\"name\": \"PKEuS\", \"email\": \"philipp@pkeus.de\", \"date\": \"2017-02-24T19:56:47Z\"}, \"committer\": {\"name\": \"PKEuS\", \"email\": \"philipp@pkeus.de\", \"date\": \"2017-02-24T19:56:47Z\"}, \"message\": \"More conservative fallback for function overload matching\", \"tree\": {\"sha\": \"f49a7346ad32473dd752be6988a6142e6726f5f3\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/f49a7346ad32473dd752be6988a6142e6726f5f3\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/3f1e2b42700a1eb1466d4200eb87265defd962f6/comments\", \"author\": {\"login\": \"PKEuS\", \"id\": 731902, \"node_id\": \"MDQ6VXNlcjczMTkwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/731902?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/PKEuS\", \"html_url\": \"https://github.com/PKEuS\", \"followers_url\": \"https://api.github.com/users/PKEuS/followers\", \"following_url\": \"https://api.github.com/users/PKEuS/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/PKEuS/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/PKEuS/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/PKEuS/subscriptions\", \"organizations_url\": \"https://api.github.com/users/PKEuS/orgs\", \"repos_url\": \"https://api.github.com/users/PKEuS/repos\", \"events_url\": \"https://api.github.com/users/PKEuS/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/PKEuS/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"PKEuS\", \"id\": 731902, \"node_id\": \"MDQ6VXNlcjczMTkwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/731902?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/PKEuS\", \"html_url\": \"https://github.com/PKEuS\", \"followers_url\": \"https://api.github.com/users/PKEuS/followers\", \"following_url\": \"https://api.github.com/users/PKEuS/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/PKEuS/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/PKEuS/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/PKEuS/subscriptions\", \"organizations_url\": \"https://api.github.com/users/PKEuS/orgs\", \"repos_url\": \"https://api.github.com/users/PKEuS/repos\", \"events_url\": \"https://api.github.com/users/PKEuS/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/PKEuS/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"4e28d40bf091cb0aa5d277521df97af54e6c3b98\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4e28d40bf091cb0aa5d277521df97af54e6c3b98\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4e28d40bf091cb0aa5d277521df97af54e6c3b98\"}], \"stats\": {\"total\": 9, \"additions\": 6, \"deletions\": 3}, \"files\": [{\"sha\": \"733b6946f5003c0e1687947e31ac074cef756bf2\", \"filename\": \"lib/symboldatabase.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/3f1e2b42700a1eb1466d4200eb87265defd962f6/lib%2Fsymboldatabase.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/3f1e2b42700a1eb1466d4200eb87265defd962f6/lib%2Fsymboldatabase.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fsymboldatabase.cpp?ref=3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"patch\": \"@@ -3900,10 +3900,9 @@ const Function* Scope::findFunction(const Token *tok, bool requireConst) const\\n             ++i;\\n     }\\n \\n-    // no exact match so just return first function found\\n-    if (!matches.empty()) {\\n+    // no exact match, but only one candidate left\\n+    if (matches.size() == 1)\\n         return matches[0];\\n-    }\\n \\n     return nullptr;\\n }\"}, {\"sha\": \"2754d6a4a5f45e1cdbc9a5c96771ec892f39d1a0\", \"filename\": \"test/testsymboldatabase.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/3f1e2b42700a1eb1466d4200eb87265defd962f6/test%2Ftestsymboldatabase.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/3f1e2b42700a1eb1466d4200eb87265defd962f6/test%2Ftestsymboldatabase.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestsymboldatabase.cpp?ref=3f1e2b42700a1eb1466d4200eb87265defd962f6\", \"patch\": \"@@ -3495,12 +3495,16 @@ class TestSymbolDatabase: public TestFixture {\\n                       \\\"void foo(long long a) { }\\\\n\\\"\\n                       \\\"void foo() {\\\\n\\\"\\n                       \\\"    foo(0);\\\\n\\\"\\n+                      \\\"    foo(bar());\\\\n\\\"\\n                       \\\"}\\\");\\n \\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n \\n         const Token *f = Token::findsimplematch(tokenizer.tokens(), \\\"foo ( 0 ) ;\\\");\\n         ASSERT_EQUALS(true, db && f && f->function() && f->function()->tokenDef->linenr() == 2);\\n+\\n+        f = Token::findsimplematch(tokenizer.tokens(), \\\"foo ( bar ( ) ) ;\\\");\\n+        ASSERT_EQUALS(true, db && f && f->function() == nullptr);\\n     }\\n \\n #define FUNC(x) const Function *x = findFunctionByName(#x, &db->scopeList.front()); \\\\\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNDNlNDM2NDY3NWQ0ZDQ3MTI1YjBkOTE5MDM5YmE3M2RkNGY2Mzc2ZSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/43e4364675d4d47125b0d919039ba73dd4f6376e", "content": "{\"sha\": \"43e4364675d4d47125b0d919039ba73dd4f6376e\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjQzZTQzNjQ2NzVkNGQ0NzEyNWIwZDkxOTAzOWJhNzNkZDRmNjM3NmU=\", \"commit\": {\"author\": {\"name\": \"Simon Martin\", \"email\": \"simartin@users.sourceforge.net\", \"date\": \"2017-03-05T15:46:43Z\"}, \"committer\": {\"name\": \"Simon Martin\", \"email\": \"simartin@users.sourceforge.net\", \"date\": \"2017-03-05T15:46:43Z\"}, \"message\": \"Ticket #7912: Properly preprocess files with decreasing line numbers, due to #line directives.\", \"tree\": {\"sha\": \"28fe4807fffa37f8661f56aa717771122c8fd2b8\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/28fe4807fffa37f8661f56aa717771122c8fd2b8\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/43e4364675d4d47125b0d919039ba73dd4f6376e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/43e4364675d4d47125b0d919039ba73dd4f6376e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/43e4364675d4d47125b0d919039ba73dd4f6376e\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/43e4364675d4d47125b0d919039ba73dd4f6376e/comments\", \"author\": {\"login\": \"simartin\", \"id\": 935202, \"node_id\": \"MDQ6VXNlcjkzNTIwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/935202?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/simartin\", \"html_url\": \"https://github.com/simartin\", \"followers_url\": \"https://api.github.com/users/simartin/followers\", \"following_url\": \"https://api.github.com/users/simartin/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/simartin/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/simartin/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/simartin/subscriptions\", \"organizations_url\": \"https://api.github.com/users/simartin/orgs\", \"repos_url\": \"https://api.github.com/users/simartin/repos\", \"events_url\": \"https://api.github.com/users/simartin/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/simartin/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"simartin\", \"id\": 935202, \"node_id\": \"MDQ6VXNlcjkzNTIwMg==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/935202?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/simartin\", \"html_url\": \"https://github.com/simartin\", \"followers_url\": \"https://api.github.com/users/simartin/followers\", \"following_url\": \"https://api.github.com/users/simartin/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/simartin/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/simartin/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/simartin/subscriptions\", \"organizations_url\": \"https://api.github.com/users/simartin/orgs\", \"repos_url\": \"https://api.github.com/users/simartin/repos\", \"events_url\": \"https://api.github.com/users/simartin/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/simartin/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6c1096bf715e624e788a7989fe936d0bdc403cec\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6c1096bf715e624e788a7989fe936d0bdc403cec\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/6c1096bf715e624e788a7989fe936d0bdc403cec\"}], \"stats\": {\"total\": 17, \"additions\": 16, \"deletions\": 1}, \"files\": [{\"sha\": \"1e75339428494eef45b94ceedb1ac538a6001eef\", \"filename\": \"lib/preprocessor.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/43e4364675d4d47125b0d919039ba73dd4f6376e/lib%2Fpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/43e4364675d4d47125b0d919039ba73dd4f6376e/lib%2Fpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fpreprocessor.cpp?ref=43e4364675d4d47125b0d919039ba73dd4f6376e\", \"patch\": \"@@ -615,7 +615,7 @@ std::string Preprocessor::getcode(const simplecpp::TokenList &tokens1, const std\\n             line = tok->location.line;\\n         }\\n \\n-        if (tok->previous && line == tok->location.line)\\n+        if (tok->previous && line >= tok->location.line) // #7912\\n             ret << ' ';\\n         bool newline = false;\\n         while (tok->location.line > line) {\"}, {\"sha\": \"1eb54098854fe9fac029129bff7d4f7531820622\", \"filename\": \"test/testpreprocessor.cpp\", \"status\": \"modified\", \"additions\": 15, \"deletions\": 0, \"changes\": 15, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/43e4364675d4d47125b0d919039ba73dd4f6376e/test%2Ftestpreprocessor.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/43e4364675d4d47125b0d919039ba73dd4f6376e/test%2Ftestpreprocessor.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestpreprocessor.cpp?ref=43e4364675d4d47125b0d919039ba73dd4f6376e\", \"patch\": \"@@ -240,6 +240,8 @@ class TestPreprocessor : public TestFixture {\\n         TEST_CASE(testDirectiveIncludeTypes);\\n         TEST_CASE(testDirectiveIncludeLocations);\\n         TEST_CASE(testDirectiveIncludeComments);\\n+\\n+        TEST_CASE(testSameLine);  // #7912\\n     }\\n \\n     void preprocess(const char* code, std::map<std::string, std::string>& actual, const char filename[] = \\\"file.c\\\") {\\n@@ -2294,6 +2296,19 @@ class TestPreprocessor : public TestFixture {\\n         ASSERT_EQUALS(dumpdata, ostr.str());\\n     }\\n \\n+    void testSameLine() { // Ticket #7912\\n+        const char code[] = \\\"#line 1 \\\\\\\"bench/btl/libs/BLAS/blas_interface_impl.hh\\\\\\\" \\\\n\\\"\\n+                            \\\"template < > class blas_interface < float > : public c_interface_base < float > \\\\n\\\"\\n+                            \\\"{ } ;\\\\n\\\"\\n+                            \\\"#line 1 \\\\\\\"bench/btl/libs/BLAS/blas_interface_impl.hh\\\\\\\" \\\\n\\\"\\n+                            \\\"template < > class blas_interface < double > : public c_interface_base < double > \\\\n\\\"\\n+                            \\\"{ } ;\\\";\\n+        const char exp[]  = \\\"template < > class blas_interface < float > : public c_interface_base < float >\\\\n\\\"\\n+                            \\\"{ } ; template < > class blas_interface < double > : public c_interface_base < double > { } ;\\\";\\n+        Preprocessor preprocessor(settings0, this);\\n+        ASSERT_EQUALS(exp, preprocessor.getcode(code, \\\"\\\", \\\"test.cpp\\\"));\\n+    }\\n+\\n };\\n \\n REGISTER_TEST(TestPreprocessor)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNmE4MWI0YzE3Yzg3MjQxYzZmMjA1ZTlkNDdlYmM5YjVhZjdmMGYzOCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38", "content": "{\"sha\": \"6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjZhODFiNGMxN2M4NzI0MWM2ZjIwNWU5ZDQ3ZWJjOWI1YWY3ZjBmMzg=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2021-07-30T13:52:00Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2021-07-30T13:52:00Z\"}, \"message\": \"Fix 10264: FP invalidContainer when address of container is passed inside struct (#3368)\", \"tree\": {\"sha\": \"111b4364251f298c9945a05121e780ebdefc06cf\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/111b4364251f298c9945a05121e780ebdefc06cf\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJhBAQACRBK7hj4Ov3rIwAADS8IAKhNZ7Sb8SHV0OjbQfyK2YJ+\\nPqpL1TActhdRdkNsRvByixwc3GdLsXl+MPmJZk9xrjj+euWPWfz8OegTvusmn2rS\\nz6l9S+q8m3hEzapF4njDAofdJcJ1y6NFc38xqAdTfSO5W0CdYQbdL85LeG7mUB7n\\nIWi2Eo+4ftFd5W+QNj8ceWScYO6fcQU4UejAf3PycaT9QV73V1IUKHTRhn7BW0Yc\\nq35MBYkaoK6dnN6lMKY3DTrTcaoIK7E+EODVvsGCf/1g6dPpVwE4U7SeGHXITvHt\\nMwIvUFOUKOuxEPyOt7S4/mSlA0j4CGpZ2MISKfKOeChzD5D+S65xuyCk+X77F4c=\\n=2Dh1\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 111b4364251f298c9945a05121e780ebdefc06cf\\nparent 9d51b4450b676264ddba49935fc4f58f429a291a\\nauthor Paul Fultz II <pfultz2@yahoo.com> 1627653120 -0500\\ncommitter GitHub <noreply@github.com> 1627653120 +0200\\n\\nFix 10264: FP invalidContainer when address of container is passed inside struct (#3368)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"9d51b4450b676264ddba49935fc4f58f429a291a\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/9d51b4450b676264ddba49935fc4f58f429a291a\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/9d51b4450b676264ddba49935fc4f58f429a291a\"}], \"stats\": {\"total\": 20, \"additions\": 18, \"deletions\": 2}, \"files\": [{\"sha\": \"24c05908158b8fa3ffc8758dde7006b0e644efdc\", \"filename\": \"lib/valueflow.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38/lib%2Fvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38/lib%2Fvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fvalueflow.cpp?ref=6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"patch\": \"@@ -3515,13 +3515,13 @@ static void valueFlowLifetimeConstructor(Token* tok, TokenList* tokenlist, Error\\n         // Assume range constructor if passed a pair of iterators\\n         if (astIsContainer(parent) && args.size() == 2 && astIsIterator(args[0]) && astIsIterator(args[1])) {\\n             LifetimeStore::forEach(\\n-            args, \\\"Passed to initializer list.\\\", ValueFlow::Value::LifetimeKind::Object, [&](const LifetimeStore& ls) {\\n+            args, \\\"Passed to initializer list.\\\", ValueFlow::Value::LifetimeKind::SubObject, [&](const LifetimeStore& ls) {\\n                 ls.byDerefCopy(tok, tokenlist, errorLogger, settings);\\n             });\\n         } else {\\n             LifetimeStore::forEach(args,\\n                                    \\\"Passed to initializer list.\\\",\\n-                                   ValueFlow::Value::LifetimeKind::Object,\\n+                                   ValueFlow::Value::LifetimeKind::SubObject,\\n             [&](const LifetimeStore& ls) {\\n                 ls.byVal(tok, tokenlist, errorLogger, settings);\\n             });\"}, {\"sha\": \"97b7b819480dfe3e1e0d4ad24c33fc81f9a01591\", \"filename\": \"test/teststl.cpp\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38/test%2Fteststl.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38/test%2Fteststl.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Fteststl.cpp?ref=6a81b4c17c87241c6f205e9d47ebc9b5af7f0f38\", \"patch\": \"@@ -4768,6 +4768,22 @@ class TestStl : public TestFixture {\\n               \\\"  Parse(i);\\\\n\\\"\\n               \\\"}\\\\n\\\",true);\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void f() {\\\\n\\\"\\n+              \\\"  std::string x;\\\\n\\\"\\n+              \\\"  struct V {\\\\n\\\"\\n+              \\\"    std::string* pStr{};\\\\n\\\"\\n+              \\\"  };\\\\n\\\"\\n+              \\\"  struct I {\\\\n\\\"\\n+              \\\"    std::vector<V> v;\\\\n\\\"\\n+              \\\"  };\\\\n\\\"\\n+              \\\"  I b[] = {{{{ &x }}}};\\\\n\\\"\\n+              \\\"  x = \\\\\\\"Arial\\\\\\\";\\\\n\\\"\\n+              \\\"  I cb[1];\\\\n\\\"\\n+              \\\"  for (long i = 0; i < 1; ++i)\\\\n\\\"\\n+              \\\"    cb[i] = b[i];\\\\n\\\"\\n+              \\\"}\\\\n\\\",true);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n     void invalidContainerLoop() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNmYyODc5YTU5YjJjNzFiMWZkYjQ3MjQ3MTQxMmM0YjczMTg0ZmVhMCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/6f2879a59b2c71b1fdb472471412c4b73184fea0", "content": "{\"sha\": \"6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjZmMjg3OWE1OWIyYzcxYjFmZGI0NzI0NzE0MTJjNGI3MzE4NGZlYTA=\", \"commit\": {\"author\": {\"name\": \"Sebastian\", \"email\": \"versat@users.noreply.github.com\", \"date\": \"2019-12-11T08:07:18Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2019-12-11T08:07:18Z\"}, \"message\": \"errorlogger.cpp: Handle empty file-name like \\\"*\\\" (unmatchedSuppression) (#2440)\\n\\nUsing \\\"--suppress=unmatchedSuppression\\\" did not suppress the error-id in\\r\\nall files, one needed to specify \\\"*\\\" as file-name. This commit also\\r\\nallows empty file-names to suppress \\\"unmatchedSuppression\\\", not only \\\"*\\\"\\r\\nor the exact file-name.\\r\\nThe manual uses the following example for suppressions specified in a\\r\\nfile:\\r\\n// suppress all uninitvar errors in all files\\r\\nuninitvar\\r\\n\\r\\nThis example suggests that no \\\"*\\\" has to be used to get suppression in\\r\\nall files. I think that the command line parameter should work in the\\r\\nsame way.\", \"tree\": {\"sha\": \"467d488ca229e70f6d62b2fe52c637c2da034b26\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/467d488ca229e70f6d62b2fe52c637c2da034b26\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJd8KO2CRBK7hj4Ov3rIwAAdHIIALJdcw2ysEoIjmNHtWn2guf4\\nOLMaT7UEZk32yZ57VG7v4y/AODMW93EYtjvmGqBK+E6qXP9OqSO+f4o+/HR4uY+a\\nxfj3SEI6lz2X4t4AVMGTO4HSl4bu0hXq03PVIy+C44w0NpfLSeN2KTw86k9p9bBa\\nSZ8gh2toGNr+dzSNA10g0YBXyTsTRkJGmU0kmbynTsmd2BLZuoABp2rnxS7ulXw4\\nPvFv9bqbhA4DI7DXc+SLEGzm7a5VkHhuHtmi39zohq/o+oeiFIrzgD86s8Ft/bPG\\n19eVpTlMuPH85eE4GD47aYnUQEZlr/eJCmSVQ6CRSWxlBNoxheGLHZCjd3F7TiA=\\n=hQky\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 467d488ca229e70f6d62b2fe52c637c2da034b26\\nparent ad2f71338cb34fbca1a83ab53a5db171a66ea0f0\\nauthor Sebastian <versat@users.noreply.github.com> 1576051638 +0100\\ncommitter GitHub <noreply@github.com> 1576051638 +0100\\n\\nerrorlogger.cpp: Handle empty file-name like \\\"*\\\" (unmatchedSuppression) (#2440)\\n\\nUsing \\\"--suppress=unmatchedSuppression\\\" did not suppress the error-id in\\r\\nall files, one needed to specify \\\"*\\\" as file-name. This commit also\\r\\nallows empty file-names to suppress \\\"unmatchedSuppression\\\", not only \\\"*\\\"\\r\\nor the exact file-name.\\r\\nThe manual uses the following example for suppressions specified in a\\r\\nfile:\\r\\n// suppress all uninitvar errors in all files\\r\\nuninitvar\\r\\n\\r\\nThis example suggests that no \\\"*\\\" has to be used to get suppression in\\r\\nall files. I think that the command line parameter should work in the\\r\\nsame way.\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/6f2879a59b2c71b1fdb472471412c4b73184fea0/comments\", \"author\": {\"login\": \"versat\", \"id\": 7264306, \"node_id\": \"MDQ6VXNlcjcyNjQzMDY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7264306?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/versat\", \"html_url\": \"https://github.com/versat\", \"followers_url\": \"https://api.github.com/users/versat/followers\", \"following_url\": \"https://api.github.com/users/versat/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/versat/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/versat/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/versat/subscriptions\", \"organizations_url\": \"https://api.github.com/users/versat/orgs\", \"repos_url\": \"https://api.github.com/users/versat/repos\", \"events_url\": \"https://api.github.com/users/versat/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/versat/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ad2f71338cb34fbca1a83ab53a5db171a66ea0f0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/ad2f71338cb34fbca1a83ab53a5db171a66ea0f0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/ad2f71338cb34fbca1a83ab53a5db171a66ea0f0\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"8dc654b32d6e4410e8aaaea4901dd4defd31091f\", \"filename\": \"lib/errorlogger.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/6f2879a59b2c71b1fdb472471412c4b73184fea0/lib%2Ferrorlogger.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/6f2879a59b2c71b1fdb472471412c4b73184fea0/lib%2Ferrorlogger.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ferrorlogger.cpp?ref=6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"patch\": \"@@ -564,7 +564,7 @@ bool ErrorLogger::reportUnmatchedSuppressions(const std::list<Suppressions::Supp\\n         bool suppressed = false;\\n         for (const Suppressions::Suppression &s2 : unmatched) {\\n             if (s2.errorId == \\\"unmatchedSuppression\\\") {\\n-                if ((s2.fileName == \\\"*\\\" || s2.fileName == s.fileName) &&\\n+                if ((s2.fileName.empty() || s2.fileName == \\\"*\\\" || s2.fileName == s.fileName) &&\\n                     (s2.lineNumber == Suppressions::Suppression::NO_LINE || s2.lineNumber == s.lineNumber)) {\\n                     suppressed = true;\\n                     break;\"}, {\"sha\": \"1c1a4bb7ee284380a810fb519beb0f316ed7d5c3\", \"filename\": \"test/testerrorlogger.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/6f2879a59b2c71b1fdb472471412c4b73184fea0/test%2Ftesterrorlogger.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/6f2879a59b2c71b1fdb472471412c4b73184fea0/test%2Ftesterrorlogger.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftesterrorlogger.cpp?ref=6f2879a59b2c71b1fdb472471412c4b73184fea0\", \"patch\": \"@@ -325,6 +325,14 @@ class TestErrorLogger : public TestFixture {\\n         reportUnmatchedSuppressions(suppressions);\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n \\n+        // suppress all unmatchedSuppression (corresponds to \\\"--suppress=unmatchedSuppression\\\")\\n+        errout.str(\\\"\\\");\\n+        suppressions.clear();\\n+        suppressions.emplace_back(\\\"abc\\\", \\\"a.c\\\", 10U);\\n+        suppressions.emplace_back(\\\"unmatchedSuppression\\\", \\\"\\\", Suppressions::Suppression::NO_LINE);\\n+        reportUnmatchedSuppressions(suppressions);\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n         // suppress all unmatchedSuppression in a.c\\n         errout.str(\\\"\\\");\\n         suppressions.clear();\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvYzRkY2ZlZjM4NTY0ZTk3NDQyZmI2YzEyMmY1ZTY3YzkwOGUwYzY2NSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/c4dcfef38564e97442fb6c122f5e67c908e0c665", "content": "{\"sha\": \"c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"node_id\": \"C_kwDOAAIvG9oAKGM0ZGNmZWYzODU2NGU5NzQ0MmZiNmMxMjJmNWU2N2M5MDhlMGM2NjU\", \"commit\": {\"author\": {\"name\": \"chrchr-github\", \"email\": \"78114321+chrchr-github@users.noreply.github.com\", \"date\": \"2022-04-05T13:52:16Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-04-05T13:52:16Z\"}, \"message\": \"Fix #10260 debug: Executable scope 'x' with unknown function. (#3974)\\n\\n* Fix #10174 debug: Executable scope 'x' with unknown function\\r\\n\\r\\n* Format\\r\\n\\r\\n* Add test for #10198\\r\\n\\r\\n* Fix #10260 debug: Executable scope 'x' with unknown function.\", \"tree\": {\"sha\": \"71dd4ad6c3f184ad6257f03393c71a9da1776e2b\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/71dd4ad6c3f184ad6257f03393c71a9da1776e2b\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiTEmQCRBK7hj4Ov3rIwAAsY8IAFFSgq6CzaQft9nzvwDnlaje\\npPcUmfYiLtlY6UYfHzFq9Tecr5+0IChCFpH8lULo7OPJipRTUtUuqgGj/e0Zjq28\\n2EPcrx0F/LqOleBf3Id5R0YGno9+YtgcL+dhVPQdH/BNOcd3uQ/A6EsrHmBkZUpp\\nThN3QpJ3/f0S46A1BUjrJAQKII2dO4nTqChZCxqrU8o3umg4SE3OSg9wqwSVcKAk\\npqceg4Owdh6prOPpE3+pg41zdkPlMFBNa9L96aF32EqJhQNjefOKB+p1cCabvP9Z\\nQJYkGmN3v26MCOnYVdLWGwpsuzHpbblfA9CWfqBdWEvMri1TloJ0FVG2vuYdui0=\\n=8W+L\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 71dd4ad6c3f184ad6257f03393c71a9da1776e2b\\nparent 3ba69145635a4ff01d4cec65a0293f5b8ccd13b0\\nauthor chrchr-github <78114321+chrchr-github@users.noreply.github.com> 1649166736 +0200\\ncommitter GitHub <noreply@github.com> 1649166736 +0200\\n\\nFix #10260 debug: Executable scope 'x' with unknown function. (#3974)\\n\\n* Fix #10174 debug: Executable scope 'x' with unknown function\\r\\n\\r\\n* Format\\r\\n\\r\\n* Add test for #10198\\r\\n\\r\\n* Fix #10260 debug: Executable scope 'x' with unknown function.\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/c4dcfef38564e97442fb6c122f5e67c908e0c665/comments\", \"author\": {\"login\": \"chrchr-github\", \"id\": 78114321, \"node_id\": \"MDQ6VXNlcjc4MTE0MzIx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/78114321?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/chrchr-github\", \"html_url\": \"https://github.com/chrchr-github\", \"followers_url\": \"https://api.github.com/users/chrchr-github/followers\", \"following_url\": \"https://api.github.com/users/chrchr-github/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/chrchr-github/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/chrchr-github/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/chrchr-github/subscriptions\", \"organizations_url\": \"https://api.github.com/users/chrchr-github/orgs\", \"repos_url\": \"https://api.github.com/users/chrchr-github/repos\", \"events_url\": \"https://api.github.com/users/chrchr-github/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/chrchr-github/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"3ba69145635a4ff01d4cec65a0293f5b8ccd13b0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/3ba69145635a4ff01d4cec65a0293f5b8ccd13b0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/3ba69145635a4ff01d4cec65a0293f5b8ccd13b0\"}], \"stats\": {\"total\": 25, \"additions\": 24, \"deletions\": 1}, \"files\": [{\"sha\": \"199fbb993192d7209a0491d6a566e21963ecc6bd\", \"filename\": \"lib/tokenize.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/c4dcfef38564e97442fb6c122f5e67c908e0c665/lib%2Ftokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/c4dcfef38564e97442fb6c122f5e67c908e0c665/lib%2Ftokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftokenize.cpp?ref=c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"patch\": \"@@ -2130,7 +2130,7 @@ namespace {\\n         const ScopeInfo3 *scopeInfo = memberClassScope ? memberClassScope : currentScope;\\n \\n         // check in base types\\n-        if (scopeInfo->findTypeInBase(scope))\\n+        if (qualification.empty() && scopeInfo->findTypeInBase(scope))\\n             return true;\\n \\n         // check using namespace\"}, {\"sha\": \"163788a3502db9eb8a503b494288106f25996a2e\", \"filename\": \"test/testsymboldatabase.cpp\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/c4dcfef38564e97442fb6c122f5e67c908e0c665/test%2Ftestsymboldatabase.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/c4dcfef38564e97442fb6c122f5e67c908e0c665/test%2Ftestsymboldatabase.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestsymboldatabase.cpp?ref=c4dcfef38564e97442fb6c122f5e67c908e0c665\", \"patch\": \"@@ -4919,6 +4919,29 @@ class TestSymbolDatabase : public TestFixture {\\n             ASSERT(function && function->token->str() == \\\"A\\\");\\n             ASSERT(function->hasBody());\\n         }\\n+        {\\n+            GET_SYMBOL_DB(\\\"namespace N {\\\\n\\\" // #10260\\n+                          \\\"    namespace O {\\\\n\\\"\\n+                          \\\"        struct B;\\\\n\\\"\\n+                          \\\"    }\\\\n\\\"\\n+                          \\\"}\\\\n\\\"\\n+                          \\\"struct I {\\\\n\\\"\\n+                          \\\"    using B = N::O::B;\\\\n\\\"\\n+                          \\\"};\\\\n\\\"\\n+                          \\\"struct A : I {\\\\n\\\"\\n+                          \\\"    void f(B*);\\\\n\\\"\\n+                          \\\"};\\\\n\\\"\\n+                          \\\"void A::f(N::O::B*) {}\\\\n\\\");\\n+            ASSERT(db);\\n+            ASSERT_EQUALS(1, db->functionScopes.size());\\n+            auto it = std::find_if(db->scopeList.begin(), db->scopeList.end(), [](const Scope& s) {\\n+                return s.className == \\\"A\\\";\\n+            });\\n+            ASSERT(it != db->scopeList.end());\\n+            const Function* function = findFunctionByName(\\\"f\\\", &*it);\\n+            ASSERT(function && function->token->str() == \\\"f\\\");\\n+            ASSERT(function->hasBody());\\n+        }\\n     }\\n \\n     void createSymbolDatabaseFindAllScopes1() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvODFhMWQ3NDRjNmU5ZDEzZjJmYWM4OTRjMzgwY2FhZmIyNzA3NDFkZiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/81a1d744c6e9d13f2fac894c380caafb270741df", "content": "{\"sha\": \"81a1d744c6e9d13f2fac894c380caafb270741df\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjgxYTFkNzQ0YzZlOWQxM2YyZmFjODk0YzM4MGNhYWZiMjcwNzQxZGY=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-03-13T05:39:09Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-03-13T05:39:09Z\"}, \"message\": \"CheckBufferOverrun: fix FP for array definition of static class member\", \"tree\": {\"sha\": \"ae9e1228e5667a1bb5951e3d7c42c88766311e8a\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/ae9e1228e5667a1bb5951e3d7c42c88766311e8a\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/81a1d744c6e9d13f2fac894c380caafb270741df\", \"comment_count\": 2, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/81a1d744c6e9d13f2fac894c380caafb270741df\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/81a1d744c6e9d13f2fac894c380caafb270741df\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/81a1d744c6e9d13f2fac894c380caafb270741df/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"67e8b99c2c52956c66895c4b61b9a2f2e037125e\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/67e8b99c2c52956c66895c4b61b9a2f2e037125e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/67e8b99c2c52956c66895c4b61b9a2f2e037125e\"}], \"stats\": {\"total\": 10, \"additions\": 7, \"deletions\": 3}, \"files\": [{\"sha\": \"8a1920a63a55de407992e31695983ccf539b75e3\", \"filename\": \"lib/checkbufferoverrun.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/81a1d744c6e9d13f2fac894c380caafb270741df/lib%2Fcheckbufferoverrun.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/81a1d744c6e9d13f2fac894c380caafb270741df/lib%2Fcheckbufferoverrun.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckbufferoverrun.cpp?ref=81a1d744c6e9d13f2fac894c380caafb270741df\", \"patch\": \"@@ -188,7 +188,7 @@ void CheckBufferOverrun::arrayIndex()\\n             const Token *parent = tok;\\n             while (parent && !Token::simpleMatch(parent->astParent(), \\\"=\\\"))\\n                 parent = parent->astParent();\\n-            if (parent && parent == parent->astParent()->astOperand1())\\n+            if (!parent || parent == parent->astParent()->astOperand1())\\n                 continue;\\n         }\\n \"}, {\"sha\": \"05a5dc7f86ee75e70ba37b9118f1673ce0f44990\", \"filename\": \"test/testbufferoverrun.cpp\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/81a1d744c6e9d13f2fac894c380caafb270741df/test%2Ftestbufferoverrun.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/81a1d744c6e9d13f2fac894c380caafb270741df/test%2Ftestbufferoverrun.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestbufferoverrun.cpp?ref=81a1d744c6e9d13f2fac894c380caafb270741df\", \"patch\": \"@@ -2138,11 +2138,15 @@ class TestBufferOverrun : public TestFixture {\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n \\n         check(\\\"class X { static const int x[100]; };\\\\n\\\" // #6070\\n-              \\\"const int X::x[100] = {0};\\\", false, \\\"test.cpp\\\");\\n+              \\\"const int X::x[100] = {0};\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n \\n         check(\\\"namespace { class X { static const int x[100]; };\\\\n\\\" // #6232\\n-              \\\"const int X::x[100] = {0}; }\\\", false, \\\"test.cpp\\\");\\n+              \\\"const int X::x[100] = {0}; }\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"class ActorSprite { static ImageSet * targetCursorImages[2][10]; };\\\\n\\\"\\n+              \\\"ImageSet *ActorSprite::targetCursorImages[2][10];\\\\n\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n \\n     }\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvNDc3OWYwZTE3MjVjNTgwN2IzMjk3OThlMTJkYmVhZGRiZjU2OGI2NSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/4779f0e1725c5807b329798e12dbeaddbf568b65", "content": "{\"sha\": \"4779f0e1725c5807b329798e12dbeaddbf568b65\", \"node_id\": \"C_kwDOAAIvG9oAKDQ3NzlmMGUxNzI1YzU4MDdiMzI5Nzk4ZTEyZGJlYWRkYmY1NjhiNjU\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2022-09-01T18:24:01Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2022-09-01T18:24:01Z\"}, \"message\": \"TemplateSimplifier: Fixed instantiation when template parameters are A<..>, B<..>\", \"tree\": {\"sha\": \"e613458d063086e8fd4da19402150a99efa71557\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/e613458d063086e8fd4da19402150a99efa71557\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/4779f0e1725c5807b329798e12dbeaddbf568b65\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4779f0e1725c5807b329798e12dbeaddbf568b65\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/4779f0e1725c5807b329798e12dbeaddbf568b65\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/4779f0e1725c5807b329798e12dbeaddbf568b65/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5804cc44e71d132c85e496e5653bd77e38aedf32\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/5804cc44e71d132c85e496e5653bd77e38aedf32\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/5804cc44e71d132c85e496e5653bd77e38aedf32\"}], \"stats\": {\"total\": 13, \"additions\": 12, \"deletions\": 1}, \"files\": [{\"sha\": \"83f51b22ae1d476bbebe068572559cad314b0f80\", \"filename\": \"lib/templatesimplifier.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4779f0e1725c5807b329798e12dbeaddbf568b65/lib%2Ftemplatesimplifier.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4779f0e1725c5807b329798e12dbeaddbf568b65/lib%2Ftemplatesimplifier.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftemplatesimplifier.cpp?ref=4779f0e1725c5807b329798e12dbeaddbf568b65\", \"patch\": \"@@ -2966,7 +2966,7 @@ std::string TemplateSimplifier::getNewName(\\n             ++indentlevel;\\n         else if (indentlevel > 0 && Token::Match(tok3, \\\"> ,|>|::\\\"))\\n             --indentlevel;\\n-        if (indentlevel == 0 && Token::Match(tok3->previous(), \\\"[<,]\\\")) {\\n+        else if (indentlevel == 0 && Token::Match(tok3->previous(), \\\"[<,]\\\")) {\\n             mTypesUsedInTemplateInstantiation.emplace_back(tok3, \\\"\\\");\\n         }\\n         if (Token::Match(tok3, \\\"(|[\\\"))\"}, {\"sha\": \"52c4f58f92f706230997b6cf3416e3f2bf01f859\", \"filename\": \"test/testsimplifytemplate.cpp\", \"status\": \"modified\", \"additions\": 11, \"deletions\": 0, \"changes\": 11, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/4779f0e1725c5807b329798e12dbeaddbf568b65/test%2Ftestsimplifytemplate.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/4779f0e1725c5807b329798e12dbeaddbf568b65/test%2Ftestsimplifytemplate.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestsimplifytemplate.cpp?ref=4779f0e1725c5807b329798e12dbeaddbf568b65\", \"patch\": \"@@ -220,6 +220,7 @@ class TestSimplifyTemplate : public TestFixture {\\n         TEST_CASE(template174); // #10506 hang\\n         TEST_CASE(template175); // #10908\\n         TEST_CASE(template176); // #11146\\n+        TEST_CASE(template177);\\n         TEST_CASE(template_specialization_1);  // #7868 - template specialization template <typename T> struct S<C<T>> {..};\\n         TEST_CASE(template_specialization_2);  // #7868 - template specialization template <typename T> struct S<C<T>> {..};\\n         TEST_CASE(template_enum);  // #6299 Syntax error in complex enum declaration (including template)\\n@@ -4491,6 +4492,16 @@ class TestSimplifyTemplate : public TestFixture {\\n         ASSERT_EQUALS(exp, tok(code));\\n     }\\n \\n+    void template177() {\\n+        const char code[] = \\\"template <typename Encoding, typename Allocator>\\\\n\\\"\\n+                            \\\"class C { xyz<Encoding, Allocator> x; };\\\\n\\\"\\n+                            \\\"C<UTF8<>, MemoryPoolAllocator<>> c;\\\";\\n+        const char exp[] = \\\"class C<UTF8<>,MemoryPoolAllocator<>> ; \\\"\\n+                           \\\"C<UTF8<>,MemoryPoolAllocator<>> c ; \\\"\\n+                           \\\"class C<UTF8<>,MemoryPoolAllocator<>> { xyz < UTF8 < > , MemoryPoolAllocator < > > x ; } ;\\\";\\n+        ASSERT_EQUALS(exp, tok(code));\\n+    }\\n+\\n     void template_specialization_1() {  // #7868 - template specialization template <typename T> struct S<C<T>> {..};\\n         const char code[] = \\\"template <typename T> struct C {};\\\\n\\\"\\n                             \\\"template <typename T> struct S {a};\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZjExNjliZjJiNDNmYzFiZWFiMGRhMjFlNDMwYWRhYTBhN2E5ZWI0OSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49", "content": "{\"sha\": \"f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmYxMTY5YmYyYjQzZmMxYmVhYjBkYTIxZTQzMGFkYWEwYTdhOWViNDk=\", \"commit\": {\"author\": {\"name\": \"Ken-Patrick Lehrmann\", \"email\": \"kp.lehrmann+github@gmail.com\", \"date\": \"2020-12-27T09:14:46Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-12-27T09:14:46Z\"}, \"message\": \"10062: Fix FP due to assignment in reverseanalyzer (#2983)\\n\\nreverseanalyzer has a special process for assignments, and would not see\\r\\na stop condition on a rhs of an assignment.\", \"tree\": {\"sha\": \"64a7046a0f90a3430ae02f5cafe5b5d28353b87b\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/64a7046a0f90a3430ae02f5cafe5b5d28353b87b\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJf6FCGCRBK7hj4Ov3rIwAAdHIIAKQDiEXIGbZTf5bcNZ0wH/1p\\nzdWbQO9xEi89ibNowoPNE/6W8cVmt/AZ6ISSNMPmAP2IVjH38y9npyKuvAan3I8T\\nBV3eo5uV0aM8vdwfH2XRKLplvddKwFgIzJ0RFuj+x3RkLazaVN3qEUDdShOTDzQF\\n6N82X0Hipei1gHG/6VmNv2YiFIA2JSSMByF3cAjrOGVAifhOJSc3FG10jS4sIAVy\\niK5QvyOrwbQ4N4RH1iOjxH4ulWot2jbVv2lS4rtfaV8iDsPXNo0x1m71oBzP28QD\\ne9lfKoh9t8MDiHJokwNzDl/Adf2D8LyHnOPdcexqu2BZGGl6TBY/dEjTSfe0wU0=\\n=ZDh/\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 64a7046a0f90a3430ae02f5cafe5b5d28353b87b\\nparent 30fbded4060ef7c61a733fd0e8443c85232287d0\\nauthor Ken-Patrick Lehrmann <kp.lehrmann+github@gmail.com> 1609060486 +0100\\ncommitter GitHub <noreply@github.com> 1609060486 +0100\\n\\n10062: Fix FP due to assignment in reverseanalyzer (#2983)\\n\\nreverseanalyzer has a special process for assignments, and would not see\\r\\na stop condition on a rhs of an assignment.\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49/comments\", \"author\": {\"login\": \"Ken-Patrick\", \"id\": 26419077, \"node_id\": \"MDQ6VXNlcjI2NDE5MDc3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/26419077?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/Ken-Patrick\", \"html_url\": \"https://github.com/Ken-Patrick\", \"followers_url\": \"https://api.github.com/users/Ken-Patrick/followers\", \"following_url\": \"https://api.github.com/users/Ken-Patrick/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/Ken-Patrick/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/Ken-Patrick/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/Ken-Patrick/subscriptions\", \"organizations_url\": \"https://api.github.com/users/Ken-Patrick/orgs\", \"repos_url\": \"https://api.github.com/users/Ken-Patrick/repos\", \"events_url\": \"https://api.github.com/users/Ken-Patrick/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/Ken-Patrick/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"30fbded4060ef7c61a733fd0e8443c85232287d0\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/30fbded4060ef7c61a733fd0e8443c85232287d0\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/30fbded4060ef7c61a733fd0e8443c85232287d0\"}], \"stats\": {\"total\": 32, \"additions\": 31, \"deletions\": 1}, \"files\": [{\"sha\": \"9d62078164ebac6d104864b0888780f01b2e938d\", \"filename\": \"lib/reverseanalyzer.cpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49/lib%2Freverseanalyzer.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49/lib%2Freverseanalyzer.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Freverseanalyzer.cpp?ref=f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"patch\": \"@@ -177,7 +177,9 @@ struct ReverseTraversal {\\n                 }\\n                 if (!continueB)\\n                     break;\\n-                valueFlowGenericForward(assignTop->astOperand2(), analyzer, settings);\\n+                Analyzer::Action a = valueFlowGenericForward(assignTop->astOperand2(), analyzer, settings);\\n+                if (a.isModified())\\n+                    break;\\n                 tok = previousBeforeAstLeftmostLeaf(assignTop)->next();\\n                 continue;\\n             }\"}, {\"sha\": \"0bd5f5f21e5e86f139ada64572ff5fe4bcc8d346\", \"filename\": \"test/testnullpointer.cpp\", \"status\": \"modified\", \"additions\": 28, \"deletions\": 0, \"changes\": 28, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49/test%2Ftestnullpointer.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/f1169bf2b43fc1beab0da21e430adaa0a7a9eb49/test%2Ftestnullpointer.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestnullpointer.cpp?ref=f1169bf2b43fc1beab0da21e430adaa0a7a9eb49\", \"patch\": \"@@ -107,6 +107,7 @@ class TestNullPointer : public TestFixture {\\n         TEST_CASE(nullpointer64);\\n         TEST_CASE(nullpointer65); // #9980\\n         TEST_CASE(nullpointer66); // #10024\\n+        TEST_CASE(nullpointer67); // #10062\\n         TEST_CASE(nullpointer_addressOf); // address of\\n         TEST_CASE(nullpointerSwitch); // #2626\\n         TEST_CASE(nullpointer_cast); // #4692\\n@@ -2050,6 +2051,33 @@ class TestNullPointer : public TestFixture {\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n+    void nullpointer67() {\\n+        check(\\\"int result;\\\\n\\\"\\n+              \\\"\\\\n\\\"\\n+              \\\"int test_b(void) {\\\\n\\\"\\n+              \\\"    char **string = NULL;\\\\n\\\"\\n+              \\\"\\\\n\\\"\\n+              \\\"    /* The bug disappears if \\\\\\\"result =\\\\\\\" is omitted. */\\\\n\\\"\\n+              \\\"    result = some_other_call(&string);\\\\n\\\"\\n+              \\\"    if (string && string[0])\\\\n\\\"\\n+              \\\"        return 0;\\\\n\\\"\\n+              \\\"    return -1;\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"int result;\\\\n\\\"\\n+              \\\"\\\\n\\\"\\n+              \\\"int test_b(void) {\\\\n\\\"\\n+              \\\"    char **string = NULL;\\\\n\\\"\\n+              \\\"\\\\n\\\"\\n+              \\\"    some_other_call(&string);\\\\n\\\"\\n+              \\\"    if (string && string[0])\\\\n\\\"\\n+              \\\"        return 0;\\\\n\\\"\\n+              \\\"    return -1;\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+    }\\n+\\n     void nullpointer_addressOf() { // address of\\n         check(\\\"void f() {\\\\n\\\"\\n               \\\"  struct X *x = 0;\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZDkwOWFjODU2NTY5ZTM5Y2IyZjUzYjE1OGM2MjQ2YWM4MmQ0NjFiNyI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/d909ac856569e39cb2f53b158c6246ac82d461b7", "content": "{\"sha\": \"d909ac856569e39cb2f53b158c6246ac82d461b7\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmQ5MDlhYzg1NjU2OWUzOWNiMmY1M2IxNThjNjI0NmFjODJkNDYxYjc=\", \"commit\": {\"author\": {\"name\": \"Rikard Falkeborn\", \"email\": \"rikard.falkeborn@gmail.com\", \"date\": \"2019-06-16T14:02:27Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-06-16T14:02:27Z\"}, \"message\": \"Bugfix buffer size for strdup like functions (#1893)\\n\\nstrdup() allocates the string length plus one for a terminating null\\r\\ncharacter. Add one to compensate for this.\\r\\n\\r\\nFixes false positive buffer out of bounds on code like this:\\r\\n\\r\\n\\tvoid f() {\\r\\n\\t\\tconst char *a = \\\"abcd\\\";\\r\\n\\t\\tchar * b = strdup(a);\\r\\n\\t\\tprintf(\\\"%c\\\", b[4]); // prints the terminating null character\\r\\n\\t\\tfree(b);\\r\\n\\t}\\r\\n\\r\\nAlso, add a testcase for valueFlowDynamicBufferSize() and add tests for\\r\\nstrdup(), malloc() and calloc().\", \"tree\": {\"sha\": \"6da4442df2e464164a8549117a77dfe8e2611373\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/6da4442df2e464164a8549117a77dfe8e2611373\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/d909ac856569e39cb2f53b158c6246ac82d461b7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d909ac856569e39cb2f53b158c6246ac82d461b7\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/d909ac856569e39cb2f53b158c6246ac82d461b7\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d909ac856569e39cb2f53b158c6246ac82d461b7/comments\", \"author\": {\"login\": \"rikardfalkeborn\", \"id\": 4839044, \"node_id\": \"MDQ6VXNlcjQ4MzkwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4839044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rikardfalkeborn\", \"html_url\": \"https://github.com/rikardfalkeborn\", \"followers_url\": \"https://api.github.com/users/rikardfalkeborn/followers\", \"following_url\": \"https://api.github.com/users/rikardfalkeborn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rikardfalkeborn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rikardfalkeborn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rikardfalkeborn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rikardfalkeborn/orgs\", \"repos_url\": \"https://api.github.com/users/rikardfalkeborn/repos\", \"events_url\": \"https://api.github.com/users/rikardfalkeborn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rikardfalkeborn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ba0a75881ab4c0539fbb83d3be5c9f677dc7e40d\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/ba0a75881ab4c0539fbb83d3be5c9f677dc7e40d\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/ba0a75881ab4c0539fbb83d3be5c9f677dc7e40d\"}], \"stats\": {\"total\": 48, \"additions\": 47, \"deletions\": 1}, \"files\": [{\"sha\": \"32e31dc6cffcdcec99b81747eed03f9e022e25b1\", \"filename\": \"lib/valueflow.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d909ac856569e39cb2f53b158c6246ac82d461b7/lib%2Fvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d909ac856569e39cb2f53b158c6246ac82d461b7/lib%2Fvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fvalueflow.cpp?ref=d909ac856569e39cb2f53b158c6246ac82d461b7\", \"patch\": \"@@ -5329,7 +5329,7 @@ static void valueFlowDynamicBufferSize(TokenList *tokenlist, SymbolDatabase *sym\\n                 if (arg1 && arg1->hasKnownValue()) {\\n                     const ValueFlow::Value &value = arg1->values().back();\\n                     if (value.isTokValue() && value.tokvalue->tokType() == Token::eString)\\n-                        sizeValue = Token::getStrLength(value.tokvalue);\\n+                        sizeValue = Token::getStrLength(value.tokvalue) + 1; // Add one for the null terminator\\n                 }\\n                 break;\\n             };\"}, {\"sha\": \"aae831172b06acbbe00c0927edeec4fa88ca0d4a\", \"filename\": \"test/testvalueflow.cpp\", \"status\": \"modified\", \"additions\": 46, \"deletions\": 0, \"changes\": 46, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d909ac856569e39cb2f53b158c6246ac82d461b7/test%2Ftestvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d909ac856569e39cb2f53b158c6246ac82d461b7/test%2Ftestvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestvalueflow.cpp?ref=d909ac856569e39cb2f53b158c6246ac82d461b7\", \"patch\": \"@@ -117,6 +117,8 @@ class TestValueFlow : public TestFixture {\\n         TEST_CASE(valueFlowTerminatingCond);\\n \\n         TEST_CASE(valueFlowContainerSize);\\n+\\n+        TEST_CASE(valueFlowDynamicBufferSize);\\n     }\\n \\n     static bool isNotTokValue(const ValueFlow::Value &val) {\\n@@ -223,6 +225,24 @@ class TestValueFlow : public TestFixture {\\n         return false;\\n     }\\n \\n+    bool testValueOfX(const char code[], unsigned int linenr, int value, ValueFlow::Value::ValueType type) {\\n+        // Tokenize..\\n+        Tokenizer tokenizer(&settings, this);\\n+        std::istringstream istr(code);\\n+        tokenizer.tokenize(istr, \\\"test.cpp\\\");\\n+\\n+        for (const Token *tok = tokenizer.tokens(); tok; tok = tok->next()) {\\n+            if (tok->str() == \\\"x\\\" && tok->linenr() == linenr) {\\n+                for (const ValueFlow::Value &v : tok->values()) {\\n+                    if (v.valueType == type && v.intvalue == value)\\n+                        return true;\\n+                }\\n+            }\\n+        }\\n+\\n+        return false;\\n+    }\\n+\\n     bool testValueOfX(const char code[], unsigned int linenr, ValueFlow::Value::MoveKind moveKind) {\\n         // Tokenize..\\n         Tokenizer tokenizer(&settings, this);\\n@@ -3819,6 +3839,32 @@ class TestValueFlow : public TestFixture {\\n                \\\"}\\\";\\n         ASSERT_EQUALS(\\\"\\\", isKnownContainerSizeValue(tokenValues(code, \\\"+\\\"), 8));\\n     }\\n+\\n+    void valueFlowDynamicBufferSize() {\\n+        const char *code;\\n+\\n+        LOAD_LIB_2(settings.library, \\\"std.cfg\\\");\\n+        LOAD_LIB_2(settings.library, \\\"posix.cfg\\\");\\n+\\n+        code = \\\"void* f() {\\\\n\\\"\\n+               \\\"  void* x = malloc(10);\\\\n\\\"\\n+               \\\"  return x;\\\\n\\\"\\n+               \\\"}\\\";\\n+        ASSERT_EQUALS(true, testValueOfX(code, 3U, 10,  ValueFlow::Value::BUFFER_SIZE));\\n+\\n+        code = \\\"void* f() {\\\\n\\\"\\n+               \\\"  void* x = calloc(4, 5);\\\\n\\\"\\n+               \\\"  return x;\\\\n\\\"\\n+               \\\"}\\\";\\n+        ASSERT_EQUALS(true, testValueOfX(code, 3U, 20,  ValueFlow::Value::BUFFER_SIZE));\\n+\\n+        code = \\\"void* f() {\\\\n\\\"\\n+               \\\"  const char* y = \\\\\\\"abcd\\\\\\\";\\\\n\\\"\\n+               \\\"  const char* x = strdup(y);\\\\n\\\"\\n+               \\\"  return x;\\\\n\\\"\\n+               \\\"}\\\";\\n+        ASSERT_EQUALS(true, testValueOfX(code, 4U, 5,  ValueFlow::Value::BUFFER_SIZE));\\n+    }\\n };\\n \\n REGISTER_TEST(TestValueFlow)\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvYTBjMzdjZWJhMjcxNzk0OTZmYTJmNDQwNzJmODVlMmE1NDQ4MjE2ZSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/a0c37ceba27179496fa2f44072f85e2a5448216e", "content": "{\"sha\": \"a0c37ceba27179496fa2f44072f85e2a5448216e\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmEwYzM3Y2ViYTI3MTc5NDk2ZmEyZjQ0MDcyZjg1ZTJhNTQ0ODIxNmU=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2021-08-21T19:17:05Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2021-08-21T19:17:05Z\"}, \"message\": \"Fix FP: Set correct bounds for interval (#3411)\", \"tree\": {\"sha\": \"1c2f616903d982c1083593f2421ea6783351353a\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/1c2f616903d982c1083593f2421ea6783351353a\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/a0c37ceba27179496fa2f44072f85e2a5448216e\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJhIVExCRBK7hj4Ov3rIwAASosIADH126aJFAPdKHuSQtXlB/k+\\nz9wOFHJ43vEmOI3MPXis2Kn25xScBuZ9d82zNjX6/FXsu2J71JqVkbgIxAbnxUAs\\nN74frFrNLKmwrO2LLr6aoRKEXmbehNII1y41uRS5eNYW36HadDyeVGLRYmZ0AFIm\\nqPi7DanUDo2PaTC8uPF4KiB8igGfT4TMO1vq8HaRS9PI9JvpwTc+v0iKd7+aSTQg\\niRwpBterpQsyUOy0g/wv9iT76a3R2oHYcSk5M6r3SiKbZx2E0xwUqcCVKxU80FwS\\nZc7ZxrWf9j8Tg/B+sQG6ut8/E1gFYSNE25UDpjlykqAszU/VNQMj0WL7iYUN5yk=\\n=tNIH\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 1c2f616903d982c1083593f2421ea6783351353a\\nparent d30f42e0da85ef23cd5efb46225a8be29b90b5f8\\nauthor Paul Fultz II <pfultz2@yahoo.com> 1629573425 -0500\\ncommitter GitHub <noreply@github.com> 1629573425 +0200\\n\\nFix FP: Set correct bounds for interval (#3411)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/a0c37ceba27179496fa2f44072f85e2a5448216e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/a0c37ceba27179496fa2f44072f85e2a5448216e\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/a0c37ceba27179496fa2f44072f85e2a5448216e/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d30f42e0da85ef23cd5efb46225a8be29b90b5f8\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d30f42e0da85ef23cd5efb46225a8be29b90b5f8\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/d30f42e0da85ef23cd5efb46225a8be29b90b5f8\"}], \"stats\": {\"total\": 12, \"additions\": 10, \"deletions\": 2}, \"files\": [{\"sha\": \"348b71ec6525afce97a61a6bc984364f1acb57cf\", \"filename\": \"lib/valueflow.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/a0c37ceba27179496fa2f44072f85e2a5448216e/lib%2Fvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/a0c37ceba27179496fa2f44072f85e2a5448216e/lib%2Fvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fvalueflow.cpp?ref=a0c37ceba27179496fa2f44072f85e2a5448216e\", \"patch\": \"@@ -4545,14 +4545,14 @@ static std::vector<ValueFlow::Value> infer(const ValuePtr<InferModel>& model,\\n             if (!diff.minvalue.empty()) {\\n                 ValueFlow::Value value(diff.minvalue.front() - 1);\\n                 value.setImpossible();\\n-                value.bound = ValueFlow::Value::Bound::Lower;\\n+                value.bound = ValueFlow::Value::Bound::Upper;\\n                 addToErrorPath(value, diff.minRef);\\n                 result.push_back(value);\\n             }\\n             if (!diff.maxvalue.empty()) {\\n                 ValueFlow::Value value(diff.maxvalue.front() + 1);\\n                 value.setImpossible();\\n-                value.bound = ValueFlow::Value::Bound::Upper;\\n+                value.bound = ValueFlow::Value::Bound::Lower;\\n                 addToErrorPath(value, diff.maxRef);\\n                 result.push_back(value);\\n             }\"}, {\"sha\": \"cbee6cc8a45ad965ee7c46f4d7690ae9ebf630dd\", \"filename\": \"test/testcondition.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/a0c37ceba27179496fa2f44072f85e2a5448216e/test%2Ftestcondition.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/a0c37ceba27179496fa2f44072f85e2a5448216e/test%2Ftestcondition.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestcondition.cpp?ref=a0c37ceba27179496fa2f44072f85e2a5448216e\", \"patch\": \"@@ -3787,6 +3787,14 @@ class TestCondition : public TestFixture {\\n         check(\\\"bool f(bool a, bool b) { if(a && b && (!a)){} }\\\");\\n         ASSERT_EQUALS(\\\"[test.cpp:1] -> [test.cpp:1]: (style) Condition '!a' is always false\\\\n\\\", errout.str());\\n \\n+        check(\\\"void f(int x, int y) {\\\\n\\\"\\n+              \\\"  if (x < y) {\\\\n\\\"\\n+              \\\"    auto z = y - x;\\\\n\\\"\\n+              \\\"    if (z < 1) {}\\\\n\\\"\\n+              \\\"  }\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"[test.cpp:4]: (style) Condition 'z<1' is always false\\\\n\\\", errout.str());\\n+\\n         check(\\\"struct a {\\\\n\\\"\\n               \\\"  a *b() const;\\\\n\\\"\\n               \\\"} c;\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMjcyNzYwZjljYWMxODdiZDE2YWI0YTU5NmEwY2FiODcwY2ViNDJiZSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/272760f9cac187bd16ab4a596a0cab870ceb42be", "content": "{\"sha\": \"272760f9cac187bd16ab4a596a0cab870ceb42be\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOjI3Mjc2MGY5Y2FjMTg3YmQxNmFiNGE1OTZhMGNhYjg3MGNlYjQyYmU=\", \"commit\": {\"author\": {\"name\": \"Nicodemes\", \"email\": \"sasha64sasha@gmail.com\", \"date\": \"2019-04-23T08:46:22Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-04-23T08:46:22Z\"}, \"message\": \"Fix explicit constructor with default arguments check bug\\n\\nBefore this fix, the code:\\n```\\nclass A {\\n    A(int, int x=3){\\n        x;\\n    }\\n};\\n```\\nWas considered OK.\\nBut explicit keyword is still needed\\n\\nI'm still new to open-source contributions, so I will gladly take advice.\", \"tree\": {\"sha\": \"c7d8a6968ba25b38bb7e38b0783bd5b159478423\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/c7d8a6968ba25b38bb7e38b0783bd5b159478423\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/272760f9cac187bd16ab4a596a0cab870ceb42be\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/272760f9cac187bd16ab4a596a0cab870ceb42be\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/272760f9cac187bd16ab4a596a0cab870ceb42be\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/272760f9cac187bd16ab4a596a0cab870ceb42be/comments\", \"author\": {\"login\": \"sasha-tkachev\", \"id\": 3898216, \"node_id\": \"MDQ6VXNlcjM4OTgyMTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/3898216?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/sasha-tkachev\", \"html_url\": \"https://github.com/sasha-tkachev\", \"followers_url\": \"https://api.github.com/users/sasha-tkachev/followers\", \"following_url\": \"https://api.github.com/users/sasha-tkachev/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/sasha-tkachev/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/sasha-tkachev/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/sasha-tkachev/subscriptions\", \"organizations_url\": \"https://api.github.com/users/sasha-tkachev/orgs\", \"repos_url\": \"https://api.github.com/users/sasha-tkachev/repos\", \"events_url\": \"https://api.github.com/users/sasha-tkachev/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/sasha-tkachev/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"315a093e185613d85b71d580f3d0b5e106e215de\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/315a093e185613d85b71d580f3d0b5e106e215de\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/315a093e185613d85b71d580f3d0b5e106e215de\"}], \"stats\": {\"total\": 7, \"additions\": 6, \"deletions\": 1}, \"files\": [{\"sha\": \"b8e04ea23abe15b95af8dc3ffebefc04cab4f838\", \"filename\": \"lib/checkclass.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/272760f9cac187bd16ab4a596a0cab870ceb42be/lib%2Fcheckclass.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/272760f9cac187bd16ab4a596a0cab870ceb42be/lib%2Fcheckclass.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckclass.cpp?ref=272760f9cac187bd16ab4a596a0cab870ceb42be\", \"patch\": \"@@ -273,7 +273,7 @@ void CheckClass::checkExplicitConstructors()\\n                 continue;\\n \\n             if (!func.isExplicit() &&\\n-                func.argCount() == 1 &&\\n+                func.minArgCount() == 1 &&\\n                 func.type != Function::eCopyConstructor &&\\n                 func.type != Function::eMoveConstructor) {\\n                 noExplicitConstructorError(func.tokenDef, scope->className, scope->type == Scope::eStruct);\"}, {\"sha\": \"0a8dfcba5dfb5769fd672eca700f40ffd3dafa4d\", \"filename\": \"test/testclass.cpp\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/272760f9cac187bd16ab4a596a0cab870ceb42be/test%2Ftestclass.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/272760f9cac187bd16ab4a596a0cab870ceb42be/test%2Ftestclass.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestclass.cpp?ref=272760f9cac187bd16ab4a596a0cab870ceb42be\", \"patch\": \"@@ -430,6 +430,11 @@ class TestClass : public TestFixture {\\n                                   \\\"    B(const B&) {}\\\\n\\\"\\n                                   \\\"};\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        checkExplicitConstructors(\\\"struct A{\\\"\\n+                                  \\\"    A(int, int y=2) {}\\\"\\n+                                  \\\"};\\\");\\n+        ASSERT_EQUALS(\\\"[test.cpp:1]: (style) Struct 'A' has a constructor with 1 argument that is not explicit.\\\\n\\\", errout.str());\\n     }\\n \\n     void checkDuplInheritedMembers(const char code[]) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMzk4ZmEyODAyMTM3NzFhMGZhN2E2NDlhNTRkZDZlNjYyNWQ0OGUyMCI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/398fa280213771a0fa7a649a54dd6e6625d48e20", "content": "{\"sha\": \"398fa280213771a0fa7a649a54dd6e6625d48e20\", \"node_id\": \"C_kwDOAAIvG9oAKDM5OGZhMjgwMjEzNzcxYTBmYTdhNjQ5YTU0ZGQ2ZTY2MjVkNDhlMjA\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2021-12-16T21:34:51Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2021-12-16T21:34:51Z\"}, \"message\": \"Fix 10657: False positive; ValueFlow - invalid iterator (#3636)\", \"tree\": {\"sha\": \"ba32a9c0ae05b735926331e9336d547e59b7286f\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/ba32a9c0ae05b735926331e9336d547e59b7286f\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/398fa280213771a0fa7a649a54dd6e6625d48e20\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJhu7D7CRBK7hj4Ov3rIwAAaqQIAIIwXCuKVy2Kofe4lgq0m352\\nFzza6IAvQsUfppDfLzIzQixh6h4wyZAmNK5FzTlMFLGWfITbHnHcYJN8okOpc8Pb\\nBcTVmCpSzrA6MkpzOj0cRYTFSeWAabLb4Wc7gSe05QysFKUEYhH8Y9e4whQE6q/l\\nD41jFnET6btWEogj8EeDMHIjpNDBkhmeYBQ+rKSsyGwA6+ScO72DD9gacFayzvGQ\\n7IpKZQ8Nz5oGR5NprSkeocFRSMcCKrYXZXk6sKsdrZrfkn1nJr+Sqle0QbfxELHX\\nUR75wZc48Fcc0EU+UgQfQQybPI0H5QYvBLEOHjnq7AsZMknv6bWdaXvm3+cvazw=\\n=TuMz\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree ba32a9c0ae05b735926331e9336d547e59b7286f\\nparent ac4f4258a00dd15ddf1816e711a44a085512f714\\nauthor Paul Fultz II <pfultz2@yahoo.com> 1639690491 -0600\\ncommitter GitHub <noreply@github.com> 1639690491 +0100\\n\\nFix 10657: False positive; ValueFlow - invalid iterator (#3636)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/398fa280213771a0fa7a649a54dd6e6625d48e20\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/398fa280213771a0fa7a649a54dd6e6625d48e20\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/398fa280213771a0fa7a649a54dd6e6625d48e20/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"ac4f4258a00dd15ddf1816e711a44a085512f714\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/ac4f4258a00dd15ddf1816e711a44a085512f714\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/ac4f4258a00dd15ddf1816e711a44a085512f714\"}], \"stats\": {\"total\": 16, \"additions\": 15, \"deletions\": 1}, \"files\": [{\"sha\": \"1bb3c395fb6a6b409236546036f84352fe4c7d03\", \"filename\": \"lib/valueflow.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/398fa280213771a0fa7a649a54dd6e6625d48e20/lib%2Fvalueflow.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/398fa280213771a0fa7a649a54dd6e6625d48e20/lib%2Fvalueflow.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fvalueflow.cpp?ref=398fa280213771a0fa7a649a54dd6e6625d48e20\", \"patch\": \"@@ -7188,7 +7188,7 @@ struct IteratorConditionHandler : SimpleConditionHandler {\\n             if (!values.empty()) {\\n                 cond.vartok = tok->astOperand2();\\n             } else {\\n-                values = getIteratorValues(tok->astOperand2()->values());\\n+                values = getIteratorValues(tok->astOperand2()->values(), &kind);\\n                 if (!values.empty())\\n                     cond.vartok = tok->astOperand1();\\n             }\"}, {\"sha\": \"74c66fa5d9eaba777a90b573a629679f30d9a463\", \"filename\": \"test/teststl.cpp\", \"status\": \"modified\", \"additions\": 14, \"deletions\": 0, \"changes\": 14, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/398fa280213771a0fa7a649a54dd6e6625d48e20/test%2Fteststl.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/398fa280213771a0fa7a649a54dd6e6625d48e20/test%2Fteststl.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Fteststl.cpp?ref=398fa280213771a0fa7a649a54dd6e6625d48e20\", \"patch\": \"@@ -4201,6 +4201,20 @@ class TestStl : public TestFixture {\\n             \\\"[test.cpp:4] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\\\\n\\\",\\n             errout.str());\\n \\n+        // #10657\\n+        check(\\\"std::list<int> mValues;\\\\n\\\"\\n+              \\\"typedef std::list<int>::iterator ValueIterator;\\\\n\\\"\\n+              \\\"void foo(ValueIterator beginValue, ValueIterator endValue) {\\\\n\\\"\\n+              \\\"    ValueIterator prevValue = beginValue;\\\\n\\\"\\n+              \\\"    ValueIterator curValue = beginValue;\\\\n\\\"\\n+              \\\"    for (++curValue; prevValue != endValue && curValue != mValues.end(); ++curValue) {\\\\n\\\"\\n+              \\\"        a = bar(*curValue);\\\\n\\\"\\n+              \\\"        prevValue = curValue;\\\\n\\\"\\n+              \\\"    }\\\\n\\\"\\n+              \\\"    if (endValue == mValues.end()) {}\\\\n\\\"\\n+              \\\"}\\\\n\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n         // #10642\\n         check(\\\"int f(std::vector<int> v) {\\\\n\\\"\\n               \\\"    return *(v.begin() + v.size() - 1);\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZDIyODRkZGJjZDJhNzBiNGEzOTA0N2FlMzJiMWM1NjYyMDYwNDA3ZiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/d2284ddbcd2a70b4a39047ae32b1c5662060407f", "content": "{\"sha\": \"d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmQyMjg0ZGRiY2QyYTcwYjRhMzkwNDdhZTMyYjFjNTY2MjA2MDQwN2Y=\", \"commit\": {\"author\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-07-14T14:20:45Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-07-14T14:20:45Z\"}, \"message\": \"Fix false positives in self check: Variable t is assigned a value that is never used. Classes with destructors was not handled properly.\", \"tree\": {\"sha\": \"597569e602f27677950ca19885e527a4800f18e2\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/597569e602f27677950ca19885e527a4800f18e2\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/d2284ddbcd2a70b4a39047ae32b1c5662060407f/comments\", \"author\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"534659e5968f907c54a829738efe65a129b2c648\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/534659e5968f907c54a829738efe65a129b2c648\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/534659e5968f907c54a829738efe65a129b2c648\"}], \"stats\": {\"total\": 22, \"additions\": 21, \"deletions\": 1}, \"files\": [{\"sha\": \"ba9168e02dec6daccac20882ffc027e1656b366b\", \"filename\": \"lib/checkunusedvar.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d2284ddbcd2a70b4a39047ae32b1c5662060407f/lib%2Fcheckunusedvar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d2284ddbcd2a70b4a39047ae32b1c5662060407f/lib%2Fcheckunusedvar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckunusedvar.cpp?ref=d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"patch\": \"@@ -1131,7 +1131,7 @@ void CheckUnusedVar::checkFunctionVariableUsage()\\n                     case ValueType::Type::UNKNOWN_TYPE:\\n                     case ValueType::Type::NONSTD:\\n                     case ValueType::Type::RECORD:\\n-                        check = tok->valueType()->typeScope && tok->valueType()->typeScope->getDestructor();\\n+                        check = tok->valueType()->typeScope && !tok->valueType()->typeScope->getDestructor();\\n                         break;\\n                     case ValueType::Type::CONTAINER:\\n                     case ValueType::Type::ITERATOR:\"}, {\"sha\": \"714fc97d4fff3ea6ee75c48e5803cd9cebc78ac2\", \"filename\": \"test/testunusedvar.cpp\", \"status\": \"modified\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/d2284ddbcd2a70b4a39047ae32b1c5662060407f/test%2Ftestunusedvar.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/d2284ddbcd2a70b4a39047ae32b1c5662060407f/test%2Ftestunusedvar.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestunusedvar.cpp?ref=d2284ddbcd2a70b4a39047ae32b1c5662060407f\", \"patch\": \"@@ -149,6 +149,7 @@ class TestUnusedVar : public TestFixture {\\n         TEST_CASE(localvarthrow); // ticket #3687\\n \\n         TEST_CASE(localVarStd);\\n+        TEST_CASE(localVarClass);\\n \\n         // Don't give false positives for variables in structs/unions\\n         TEST_CASE(localvarStruct1);\\n@@ -4148,6 +4149,25 @@ class TestUnusedVar : public TestFixture {\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n     }\\n \\n+    void localVarClass() {\\n+        functionVariableUsage(\\\"void f() {\\\\n\\\"\\n+                              \\\"    Fred f;\\\\n\\\"\\n+                              \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        functionVariableUsage(\\\"class C { int x; };\\\\n\\\"\\n+                              \\\"void f() {\\\\n\\\"\\n+                              \\\"    C c;\\\\n\\\"\\n+                              \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"[test.cpp:3]: (style) Unused variable: c\\\\n\\\", errout.str());\\n+\\n+        functionVariableUsage(\\\"class C { public: C(int); ~C(); };\\\\n\\\"\\n+                              \\\"void f() {\\\\n\\\"\\n+                              \\\"    C c(12);\\\\n\\\"\\n+                              \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"\\\", errout.str());\\n+    }\\n+\\n     // ticket #3104 - false positive when variable is read with \\\"if (NOT var)\\\"\\n     void localvarIfNOT() {\\n         functionVariableUsage(\\\"void f() {\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZmQzY2IyNDk3MzY0ZDM1MDYzMmMyODhjZTM3NzE3Mzg0OTlmNzE4ZSI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/fd3cb2497364d350632c288ce3771738499f718e", "content": "{\"sha\": \"fd3cb2497364d350632c288ce3771738499f718e\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmZkM2NiMjQ5NzM2NGQzNTA2MzJjMjg4Y2UzNzcxNzM4NDk5ZjcxOGU=\", \"commit\": {\"author\": {\"name\": \"Rikard Falkeborn\", \"email\": \"rikard.falkeborn@gmail.com\", \"date\": \"2019-08-23T04:33:00Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-08-23T04:33:00Z\"}, \"message\": \"leakNoReturnVar: Don't break early (#2095)\\n\\nThere seems to be no reason for stopping checking the scope if a call to\\r\\nfree() is seen (or fclose() or realloc()), so just continue checking.\\r\\nAlso, if there are multiple arguments, check all, perhaps there are more\\r\\nmemory leaks to warn about.\", \"tree\": {\"sha\": \"9450e7482e80bce174cc19bf946a34ae77bf0f2c\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/9450e7482e80bce174cc19bf946a34ae77bf0f2c\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/fd3cb2497364d350632c288ce3771738499f718e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/fd3cb2497364d350632c288ce3771738499f718e\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/fd3cb2497364d350632c288ce3771738499f718e\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/fd3cb2497364d350632c288ce3771738499f718e/comments\", \"author\": {\"login\": \"rikardfalkeborn\", \"id\": 4839044, \"node_id\": \"MDQ6VXNlcjQ4MzkwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/4839044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rikardfalkeborn\", \"html_url\": \"https://github.com/rikardfalkeborn\", \"followers_url\": \"https://api.github.com/users/rikardfalkeborn/followers\", \"following_url\": \"https://api.github.com/users/rikardfalkeborn/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rikardfalkeborn/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rikardfalkeborn/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rikardfalkeborn/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rikardfalkeborn/orgs\", \"repos_url\": \"https://api.github.com/users/rikardfalkeborn/repos\", \"events_url\": \"https://api.github.com/users/rikardfalkeborn/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rikardfalkeborn/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c0a8d628b98ff0b65a02e603c496020edb7a0e82\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/c0a8d628b98ff0b65a02e603c496020edb7a0e82\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/c0a8d628b98ff0b65a02e603c496020edb7a0e82\"}], \"stats\": {\"total\": 15, \"additions\": 13, \"deletions\": 2}, \"files\": [{\"sha\": \"a0ffc1eaf5478d378bb768ff11d839953380534b\", \"filename\": \"lib/checkmemoryleak.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 2, \"changes\": 3, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/fd3cb2497364d350632c288ce3771738499f718e/lib%2Fcheckmemoryleak.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/fd3cb2497364d350632c288ce3771738499f718e/lib%2Fcheckmemoryleak.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Fcheckmemoryleak.cpp?ref=fd3cb2497364d350632c288ce3771738499f718e\", \"patch\": \"@@ -1000,7 +1000,7 @@ void CheckMemoryLeakNoVar::checkForUnreleasedInputArgument(const Scope *scope)\\n             functionName == \\\"free\\\" ||\\n             functionName == \\\"fclose\\\" ||\\n             functionName == \\\"realloc\\\")\\n-            break;\\n+            continue;\\n \\n         if (!CheckMemoryLeakInFunction::test_white_list(functionName, mSettings, mTokenizer->isCPP()))\\n             continue;\\n@@ -1016,7 +1016,6 @@ void CheckMemoryLeakNoVar::checkForUnreleasedInputArgument(const Scope *scope)\\n             if (isReopenStandardStream(arg))\\n                 continue;\\n             functionCallLeak(arg, arg->str(), functionName);\\n-            break;\\n         }\\n \\n     }\"}, {\"sha\": \"17342d1eaf88c1ea6332641db3fdf3a41339eb91\", \"filename\": \"test/testmemleak.cpp\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 0, \"changes\": 12, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/fd3cb2497364d350632c288ce3771738499f718e/test%2Ftestmemleak.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/fd3cb2497364d350632c288ce3771738499f718e/test%2Ftestmemleak.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftestmemleak.cpp?ref=fd3cb2497364d350632c288ce3771738499f718e\", \"patch\": \"@@ -2159,6 +2159,18 @@ class TestMemleakNoVar : public TestFixture {\\n               \\\"    return ret;\\\\n\\\"\\n               \\\"}\\\");\\n         ASSERT_EQUALS(\\\"\\\", errout.str());\\n+\\n+        check(\\\"void f() {\\\\n\\\"\\n+              \\\"    free(malloc(1));\\\\n\\\"\\n+              \\\"    strcpy(a, strdup(p));\\\\n\\\"\\n+              \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"[test.cpp:3]: (error) Allocation with strdup, strcpy doesn't release it.\\\\n\\\", errout.str());\\n+\\n+        check(\\\"void f() {\\\\n\\\"\\n+              \\\"    memcmp(calloc(10, 10), strdup(q), 100);\\\\n\\\"\\n+              \\\"}\\\");\\n+        ASSERT_EQUALS(\\\"[test.cpp:2]: (error) Allocation with calloc, memcmp doesn't release it.\\\\n\\\"\\n+                      \\\"[test.cpp:2]: (error) Allocation with strdup, memcmp doesn't release it.\\\\n\\\", errout.str());\\n     }\\n \\n     void missingAssignment() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvMTkyYzMwYWIxZDNlYzk3YWU3YzY5NTVkODk1M2ZhYzEzM2I4ZTRmZiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff", "content": "{\"sha\": \"192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"node_id\": \"C_kwDOAAIvG9oAKDE5MmMzMGFiMWQzZWM5N2FlN2M2OTU1ZDg5NTNmYWMxMzNiOGU0ZmY\", \"commit\": {\"author\": {\"name\": \"chrchr-github\", \"email\": \"78114321+chrchr-github@users.noreply.github.com\", \"date\": \"2022-10-19T17:19:01Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-10-19T17:19:01Z\"}, \"message\": \"Fix crash in arraySize() (#4556)\\n\\n* Fix  #11355 FN: arrayIndexOutOfBounds\\r\\n\\r\\n* Fix\\r\\n\\r\\n* Fix crash in arraySize()\", \"tree\": {\"sha\": \"14b81308ddcb8ccc43a53c13945364a93e05273a\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/14b81308ddcb8ccc43a53c13945364a93e05273a\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjUDGFCRBK7hj4Ov3rIwAAywYIAHQMcxGaOl4voq7VTrHyl4bO\\nybbWa7ljrJjJtQjoMzRqPupqC6fBUG55uqB+lRX+0Qdz22jwZ2PKofw0gNwIlAzt\\n+1kBcLigUO3ECBkyF2FsFPL7+DO+6bzvo1CYu3speAWV1zUWEiVjHSVmZobd/LhH\\n1bWKV5C5J1f+jXe33ROtaOcihWcl8zMYL2zlj2DWJb+W9qC7Vq34uNj5qEGiBdvc\\nbq1SNhZTF4Eic3ElG9EZQQ3owseEnTQz4x3Bz+mCo1Vcw0CanNJDm9XmRt3loUgp\\nQs7YCjX//MzzRR8I7+0DSuXraxLAd39DWovfRzr+77T5c7t3l5GCrjnIzqQEzCM=\\n=EYA8\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 14b81308ddcb8ccc43a53c13945364a93e05273a\\nparent 49f1282ce13081ccf2e423e436926f867e5fe62d\\nauthor chrchr-github <78114321+chrchr-github@users.noreply.github.com> 1666199941 +0200\\ncommitter GitHub <noreply@github.com> 1666199941 +0200\\n\\nFix crash in arraySize() (#4556)\\n\\n* Fix  #11355 FN: arrayIndexOutOfBounds\\r\\n\\r\\n* Fix\\r\\n\\r\\n* Fix crash in arraySize()\"}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff/comments\", \"author\": {\"login\": \"chrchr-github\", \"id\": 78114321, \"node_id\": \"MDQ6VXNlcjc4MTE0MzIx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/78114321?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/chrchr-github\", \"html_url\": \"https://github.com/chrchr-github\", \"followers_url\": \"https://api.github.com/users/chrchr-github/followers\", \"following_url\": \"https://api.github.com/users/chrchr-github/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/chrchr-github/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/chrchr-github/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/chrchr-github/subscriptions\", \"organizations_url\": \"https://api.github.com/users/chrchr-github/orgs\", \"repos_url\": \"https://api.github.com/users/chrchr-github/repos\", \"events_url\": \"https://api.github.com/users/chrchr-github/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/chrchr-github/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"49f1282ce13081ccf2e423e436926f867e5fe62d\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/49f1282ce13081ccf2e423e436926f867e5fe62d\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/49f1282ce13081ccf2e423e436926f867e5fe62d\"}], \"stats\": {\"total\": 3, \"additions\": 2, \"deletions\": 1}, \"files\": [{\"sha\": \"be13fa6e566d1234b1937dae1cb35c1946169077\", \"filename\": \"lib/tokenize.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff/lib%2Ftokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff/lib%2Ftokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftokenize.cpp?ref=192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"patch\": \"@@ -3161,7 +3161,7 @@ void Tokenizer::arraySize()\\n {\\n     auto getStrTok = [](Token* tok, bool addLength, Token** endStmt) -> Token* {\\n         if (addLength) {\\n-            *endStmt = tok->tokAt(6);\\n+            *endStmt = tok->tokAt(5);\\n             return tok->tokAt(4);\\n         }\\n         if (Token::Match(tok, \\\"%var% [ ] =\\\")) {\"}, {\"sha\": \"a20a6b6675a40b3223b9e142f217b9e9ba41c8fe\", \"filename\": \"test/testtokenize.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff/test%2Ftesttokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/192c30ab1d3ec97ae7c6955d8953fac133b8e4ff/test%2Ftesttokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftesttokenize.cpp?ref=192c30ab1d3ec97ae7c6955d8953fac133b8e4ff\", \"patch\": \"@@ -4013,6 +4013,7 @@ class TestTokenizer : public TestFixture {\\n         ASSERT_EQUALS(\\\"; int a [ 3 ] = { [ 2 ] = 5 } ;\\\", tokenizeAndStringify(\\\";int a[]={ [2] = 5 };\\\"));\\n         ASSERT_EQUALS(\\\"; int a [ 5 ] = { 1 , 2 , [ 2 ] = 5 , 3 , 4 } ;\\\", tokenizeAndStringify(\\\";int a[]={ 1, 2, [2] = 5, 3, 4 };\\\"));\\n         ASSERT_EQUALS(\\\"; int a [ ] = { 1 , 2 , [ x ] = 5 , 3 , 4 } ;\\\", tokenizeAndStringify(\\\";int a[]={ 1, 2, [x] = 5, 3, 4 };\\\"));\\n+        ASSERT_EQUALS(\\\"; const char c [ 4 ] = \\\\\\\"abc\\\\\\\" ;\\\", tokenizeAndStringify(\\\";const char c[] = { \\\\\\\"abc\\\\\\\" };\\\"));\\n     }\\n \\n     void labels() {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZGFubWFyL2NwcGNoZWNrL2NvbW1pdHMvZWEyOTE2YTNlNDk5MzRkNDgyY2Q5YjMwYjUyMGM3ODczZGI0ZGU4MiI=.json", "commit": "https://api.github.com/repos/danmar/cppcheck/commits/ea2916a3e49934d482cd9b30b520c7873db4de82", "content": "{\"sha\": \"ea2916a3e49934d482cd9b30b520c7873db4de82\", \"node_id\": \"MDY6Q29tbWl0MTQzMTMxOmVhMjkxNmEzZTQ5OTM0ZDQ4MmNkOWIzMGI1MjBjNzg3M2RiNGRlODI=\", \"commit\": {\"author\": {\"name\": \"Paul Fultz II\", \"email\": \"pfultz2@yahoo.com\", \"date\": \"2019-12-07T20:16:25Z\"}, \"committer\": {\"name\": \"Daniel Marjam\\u00e4ki\", \"email\": \"daniel.marjamaki@gmail.com\", \"date\": \"2019-12-07T20:16:25Z\"}, \"message\": \"Fix issue 9514: Syntax Error: AST broken, 'for' doesn't have two operands. (#2429)\\n\\n* Fix issue 9514: Syntax Error: AST broken, 'for' doesn't have two operands.\\r\\n\\r\\n* Fix typo\", \"tree\": {\"sha\": \"b3a1691a7200a5517bc40829def6093db67c1bae\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/trees/b3a1691a7200a5517bc40829def6093db67c1bae\"}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/git/commits/ea2916a3e49934d482cd9b30b520c7873db4de82\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/ea2916a3e49934d482cd9b30b520c7873db4de82\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/ea2916a3e49934d482cd9b30b520c7873db4de82\", \"comments_url\": \"https://api.github.com/repos/danmar/cppcheck/commits/ea2916a3e49934d482cd9b30b520c7873db4de82/comments\", \"author\": {\"login\": \"pfultz2\", \"id\": 1306044, \"node_id\": \"MDQ6VXNlcjEzMDYwNDQ=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1306044?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pfultz2\", \"html_url\": \"https://github.com/pfultz2\", \"followers_url\": \"https://api.github.com/users/pfultz2/followers\", \"following_url\": \"https://api.github.com/users/pfultz2/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pfultz2/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pfultz2/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pfultz2/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pfultz2/orgs\", \"repos_url\": \"https://api.github.com/users/pfultz2/repos\", \"events_url\": \"https://api.github.com/users/pfultz2/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pfultz2/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"danmar\", \"id\": 60195, \"node_id\": \"MDQ6VXNlcjYwMTk1\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/60195?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/danmar\", \"html_url\": \"https://github.com/danmar\", \"followers_url\": \"https://api.github.com/users/danmar/followers\", \"following_url\": \"https://api.github.com/users/danmar/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/danmar/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/danmar/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/danmar/subscriptions\", \"organizations_url\": \"https://api.github.com/users/danmar/orgs\", \"repos_url\": \"https://api.github.com/users/danmar/repos\", \"events_url\": \"https://api.github.com/users/danmar/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/danmar/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"56e17fb2287fef9b9ef4c5511975aaf0487d6db2\", \"url\": \"https://api.github.com/repos/danmar/cppcheck/commits/56e17fb2287fef9b9ef4c5511975aaf0487d6db2\", \"html_url\": \"https://github.com/danmar/cppcheck/commit/56e17fb2287fef9b9ef4c5511975aaf0487d6db2\"}], \"stats\": {\"total\": 10, \"additions\": 9, \"deletions\": 1}, \"files\": [{\"sha\": \"91d11aeae700d2fcbef837ff9a80ff7eb3112335\", \"filename\": \"lib/tokenlist.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/ea2916a3e49934d482cd9b30b520c7873db4de82/lib%2Ftokenlist.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/ea2916a3e49934d482cd9b30b520c7873db4de82/lib%2Ftokenlist.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/lib%2Ftokenlist.cpp?ref=ea2916a3e49934d482cd9b30b520c7873db4de82\", \"patch\": \"@@ -883,7 +883,7 @@ static void compilePrecedence2(Token *&tok, AST_state& state)\\n                 compileUnaryOp(tok, state, compileExpression);\\n             else\\n                 compileBinOp(tok, state, compileExpression);\\n-            if (Token::simpleMatch(tok, \\\"}\\\"))\\n+            while (Token::simpleMatch(tok, \\\"}\\\"))\\n                 tok = tok->next();\\n         } else break;\\n     }\"}, {\"sha\": \"a54ae343c4d69b536738648a961fb9d4be137a69\", \"filename\": \"test/testtokenize.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 0, \"changes\": 8, \"blob_url\": \"https://github.com/danmar/cppcheck/blob/ea2916a3e49934d482cd9b30b520c7873db4de82/test%2Ftesttokenize.cpp\", \"raw_url\": \"https://github.com/danmar/cppcheck/raw/ea2916a3e49934d482cd9b30b520c7873db4de82/test%2Ftesttokenize.cpp\", \"contents_url\": \"https://api.github.com/repos/danmar/cppcheck/contents/test%2Ftesttokenize.cpp?ref=ea2916a3e49934d482cd9b30b520c7873db4de82\", \"patch\": \"@@ -474,6 +474,7 @@ class TestTokenizer : public TestFixture {\\n         TEST_CASE(checkLambdas);\\n         TEST_CASE(checkIfCppCast);\\n         TEST_CASE(checkRefQualifiers);\\n+        TEST_CASE(checkConditionBlock);\\n \\n         // #9052\\n         TEST_CASE(noCrash1);\\n@@ -7692,6 +7693,7 @@ class TestTokenizer : public TestFixture {\\n         ASSERT_EQUALS(\\\"Abc({newreturn\\\", testAst(\\\"return new A {b(c)};\\\"));\\n         ASSERT_EQUALS(\\\"a{{return\\\", testAst(\\\"return{{a}};\\\"));\\n         ASSERT_EQUALS(\\\"a{b{,{return\\\", testAst(\\\"return{{a},{b}};\\\"));\\n+        ASSERT_EQUALS(\\\"stdvector::\\\", testAst(\\\"std::vector<std::vector<int>>{{},{}}\\\"));\\n     }\\n \\n     void astbrackets() { // []\\n@@ -8178,6 +8180,12 @@ class TestTokenizer : public TestFixture {\\n \\n     }\\n \\n+    void checkConditionBlock() {\\n+        ASSERT_NO_THROW(tokenizeAndStringify(\\\"void a() {\\\\n\\\"\\n+                                             \\\"  for (auto b : std::vector<std::vector<int>>{{}, {}}) {}\\\\n\\\"\\n+                                             \\\"}\\\\n\\\"))\\n+    }\\n+\\n     void noCrash1() {\\n         ASSERT_NO_THROW(tokenizeAndStringify(\\n                             \\\"struct A {\\\\n\\\"\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0xJVXRpbHMvQ0xJMTEvY29tbWl0cy9kZTIxNWVmOTc4MTA0YTBlOWVmZGM3Yjc4YTlkNThjZDUyOWNmMTdhIg==.json", "commit": "https://api.github.com/repos/CLIUtils/CLI11/commits/de215ef978104a0e9efdc7b78a9d58cd529cf17a", "content": "{\"sha\": \"de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"node_id\": \"C_kwDOBMWu_NoAKGRlMjE1ZWY5NzgxMDRhMGU5ZWZkYzdiNzhhOWQ1OGNkNTI5Y2YxN2E\", \"commit\": {\"author\": {\"name\": \"Philip Top\", \"email\": \"phlptp@gmail.com\", \"date\": \"2022-05-24T19:19:41Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-05-24T19:19:41Z\"}, \"message\": \"Incorrect subcommand callback trigger (#733)\\n\\n* fix the issue where subcommand callbacks would be triggered multiple times if specified as configurable.\\r\\n\\r\\n* style: pre-commit.ci fixes\\r\\n\\r\\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\", \"tree\": {\"sha\": \"8dade6c00ac7cb3a613660deef8a9c7b6bf1a476\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/trees/8dade6c00ac7cb3a613660deef8a9c7b6bf1a476\"}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/commits/de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJijS/NCRBK7hj4Ov3rIwAA6HAIAKjHZ9DMnK4Bp9pCGj6q40LI\\nP1bV5kKLbfY9OddJRBm1Z3PnrIN2PPl2ugUr1N1VxUUufMnH0Q4sSv91TQ0rJKeq\\nxdsUvUVbwH+eM4TJ4ZhtpkXwSfEpIbDc2yDQuLyJNZvEc6ENY3SZp/3SIhJA7DE1\\nYvSryqGAiHNA8uUD+4f6AcY54LFrlxqycqY5Lnp3SwojwdHODYWnlSbCy0Yd2exL\\nM44KzhD+VIxRzCy1KE61KHujPL0YCOG3yNvnmmN0TwqDL/60Bgwjm2rv1B8Ypti1\\n6uJHLYvppZF3pEvNFPpMmNEVKowsjerMGdi2C+lrSw8jLPH+J0My5mPCp3yMi5M=\\n=ktHf\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 8dade6c00ac7cb3a613660deef8a9c7b6bf1a476\\nparent efbfd460a7baef597d9e968c25d67c53ded61966\\nauthor Philip Top <phlptp@gmail.com> 1653419981 -0700\\ncommitter GitHub <noreply@github.com> 1653419981 -0400\\n\\nIncorrect subcommand callback trigger (#733)\\n\\n* fix the issue where subcommand callbacks would be triggered multiple times if specified as configurable.\\r\\n\\r\\n* style: pre-commit.ci fixes\\r\\n\\r\\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\"}}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"comments_url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/de215ef978104a0e9efdc7b78a9d58cd529cf17a/comments\", \"author\": {\"login\": \"phlptp\", \"id\": 20667153, \"node_id\": \"MDQ6VXNlcjIwNjY3MTUz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20667153?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phlptp\", \"html_url\": \"https://github.com/phlptp\", \"followers_url\": \"https://api.github.com/users/phlptp/followers\", \"following_url\": \"https://api.github.com/users/phlptp/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phlptp/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phlptp/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phlptp/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phlptp/orgs\", \"repos_url\": \"https://api.github.com/users/phlptp/repos\", \"events_url\": \"https://api.github.com/users/phlptp/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phlptp/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"efbfd460a7baef597d9e968c25d67c53ded61966\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/efbfd460a7baef597d9e968c25d67c53ded61966\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/efbfd460a7baef597d9e968c25d67c53ded61966\"}], \"stats\": {\"total\": 21, \"additions\": 20, \"deletions\": 1}, \"files\": [{\"sha\": \"013d2db30117bdbb5653bb0a1371bdcacd1512bd\", \"filename\": \"include/CLI/App.hpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/de215ef978104a0e9efdc7b78a9d58cd529cf17a/include%2FCLI%2FApp.hpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/de215ef978104a0e9efdc7b78a9d58cd529cf17a/include%2FCLI%2FApp.hpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/include%2FCLI%2FApp.hpp?ref=de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"patch\": \"@@ -2413,7 +2413,7 @@ class App {\\n         }\\n         // check for section close\\n         if(item.name == \\\"--\\\") {\\n-            if(configurable_) {\\n+            if(configurable_ && parse_complete_callback_) {\\n                 _process_callbacks();\\n                 _process_requirements();\\n                 run_callback();\"}, {\"sha\": \"8359a9cf1871ff27f3e34acc85ab4ea288252839\", \"filename\": \"tests/ConfigFileTest.cpp\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 0, \"changes\": 19, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/de215ef978104a0e9efdc7b78a9d58cd529cf17a/tests%2FConfigFileTest.cpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/de215ef978104a0e9efdc7b78a9d58cd529cf17a/tests%2FConfigFileTest.cpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/tests%2FConfigFileTest.cpp?ref=de215ef978104a0e9efdc7b78a9d58cd529cf17a\", \"patch\": \"@@ -1581,6 +1581,25 @@ TEST_CASE_METHOD(TApp, \\\"DuplicateSubcommandCallbacks\\\", \\\"[config]\\\") {\\n     CHECK(3 == count);\\n }\\n \\n+TEST_CASE_METHOD(TApp, \\\"SubcommandCallbackSingle\\\", \\\"[config]\\\") {\\n+\\n+    TempFile tmptoml{\\\"Testtomlcallback.toml\\\"};\\n+\\n+    app.set_config(\\\"--config\\\", tmptoml);\\n+\\n+    {\\n+        std::ofstream out{tmptoml};\\n+        out << \\\"[foo]\\\" << std::endl;\\n+    }\\n+    int count{0};\\n+    auto *foo = app.add_subcommand(\\\"foo\\\");\\n+    foo->configurable();\\n+    foo->callback([&count]() { ++count; });\\n+\\n+    run();\\n+    CHECK(1 == count);\\n+}\\n+\\n TEST_CASE_METHOD(TApp, \\\"IniFailure\\\", \\\"[config]\\\") {\\n \\n     TempFile tmpini{\\\"TestIniTmp.ini\\\"};\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0xJVXRpbHMvQ0xJMTEvY29tbWl0cy8wMjBhMjFhZmM2NWZlODQzZWZjYTViMmY3NGUzZDViNTAyNDI1Zjc2Ig==.json", "commit": "https://api.github.com/repos/CLIUtils/CLI11/commits/020a21afc65fe843efca5b2f74e3d5b502425f76", "content": "{\"sha\": \"020a21afc65fe843efca5b2f74e3d5b502425f76\", \"node_id\": \"C_kwDOBMWu_NoAKDAyMGEyMWFmYzY1ZmU4NDNlZmNhNWIyZjc0ZTNkNWI1MDI0MjVmNzY\", \"commit\": {\"author\": {\"name\": \"Philip Top\", \"email\": \"phlptp@gmail.com\", \"date\": \"2022-06-06T02:36:30Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-06-06T02:36:30Z\"}, \"message\": \"Fix an issue where an error was generated if just a file name was supplied to the split_program_name parsing (#740)\", \"tree\": {\"sha\": \"aba5362fd836e036e5d9a84c70fa3d84841f70cc\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/trees/aba5362fd836e036e5d9a84c70fa3d84841f70cc\"}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/commits/020a21afc65fe843efca5b2f74e3d5b502425f76\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJinWguCRBK7hj4Ov3rIwAAKPAIACR8FWNVZMTGjoMQPtxnINpF\\nKyImzX9XSEx4xIv9Urv0+OLxYlwwuBdZXxznl4IDDcLUBHTgFCvkzzX7t/hUbY/m\\nnx0wYREtq19Z6Ou4fxawRp+4XOzBttCEyIAUwKQarTb5wXCpzL0kOAMjCmXVGXJw\\nPljcV+F2XMT0Ecd8Pwa3wdPR24ge/iZZ/ke1DITaiU06aQiI7kRKm5jApAGS+yPG\\n5IgkH3hkEWrU1Q7B1dEhwBmiSOIyaXm+BfjhiXVF8qJTRSo+SvtAugkl8atLID9i\\n8yODHFvQTagl6TJxK/bASabEm09GPLloV3zpLeJZU/Ou2JvLouN9q/UN4MVX8bM=\\n=bvNs\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree aba5362fd836e036e5d9a84c70fa3d84841f70cc\\nparent c692be41cf7ea9c11e23d23515c8c082227d234d\\nauthor Philip Top <phlptp@gmail.com> 1654482990 -0700\\ncommitter GitHub <noreply@github.com> 1654482990 -0700\\n\\nFix an issue where an error was generated if just a file name was supplied to the split_program_name parsing (#740)\\n\\n\"}}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/020a21afc65fe843efca5b2f74e3d5b502425f76\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/020a21afc65fe843efca5b2f74e3d5b502425f76\", \"comments_url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/020a21afc65fe843efca5b2f74e3d5b502425f76/comments\", \"author\": {\"login\": \"phlptp\", \"id\": 20667153, \"node_id\": \"MDQ6VXNlcjIwNjY3MTUz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20667153?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phlptp\", \"html_url\": \"https://github.com/phlptp\", \"followers_url\": \"https://api.github.com/users/phlptp/followers\", \"following_url\": \"https://api.github.com/users/phlptp/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phlptp/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phlptp/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phlptp/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phlptp/orgs\", \"repos_url\": \"https://api.github.com/users/phlptp/repos\", \"events_url\": \"https://api.github.com/users/phlptp/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phlptp/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"c692be41cf7ea9c11e23d23515c8c082227d234d\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/c692be41cf7ea9c11e23d23515c8c082227d234d\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/c692be41cf7ea9c11e23d23515c8c082227d234d\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"a03cbe5e342d49d827e8595ff1b6efda9c11231e\", \"filename\": \"include/CLI/Validators.hpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/020a21afc65fe843efca5b2f74e3d5b502425f76/include%2FCLI%2FValidators.hpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/020a21afc65fe843efca5b2f74e3d5b502425f76/include%2FCLI%2FValidators.hpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/include%2FCLI%2FValidators.hpp?ref=020a21afc65fe843efca5b2f74e3d5b502425f76\", \"patch\": \"@@ -1163,7 +1163,7 @@ inline std::pair<std::string, std::string> split_program_name(std::string comman\\n     }\\n \\n     // strip the program name\\n-    vals.second = (esp != std::string::npos) ? commandline.substr(esp + 1) : std::string{};\\n+    vals.second = (esp < commandline.length() - 1) ? commandline.substr(esp + 1) : std::string{};\\n     ltrim(vals.second);\\n     return vals;\\n }\"}, {\"sha\": \"88b42a42dbe8f40ba1531a2477c9d20b7ea082fa\", \"filename\": \"tests/StringParseTest.cpp\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/020a21afc65fe843efca5b2f74e3d5b502425f76/tests%2FStringParseTest.cpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/020a21afc65fe843efca5b2f74e3d5b502425f76/tests%2FStringParseTest.cpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/tests%2FStringParseTest.cpp?ref=020a21afc65fe843efca5b2f74e3d5b502425f76\", \"patch\": \"@@ -89,6 +89,15 @@ TEST_CASE_METHOD(TApp, \\\"ProgNameWithSpace\\\", \\\"[stringparse]\\\") {\\n     CHECK(app.get_name() == \\\"Foo Bar\\\");\\n }\\n \\n+// From GitHub issue #739 https://github.com/CLIUtils/CLI11/issues/739\\n+TEST_CASE_METHOD(TApp, \\\"ProgNameOnly\\\", \\\"[stringparse]\\\") {\\n+\\n+    app.add_flag(\\\"--foo\\\");\\n+    CHECK_NOTHROW(app.parse(\\\"\\\\\\\"C:\\\\\\\\example.exe\\\\\\\"\\\", true));\\n+\\n+    CHECK(app.get_name() == \\\"C:\\\\\\\\example.exe\\\");\\n+}\\n+\\n TEST_CASE_METHOD(TApp, \\\"ProgNameWithSpaceEmbeddedQuote\\\", \\\"[stringparse]\\\") {\\n \\n     app.add_flag(\\\"--foo\\\");\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvQ0xJVXRpbHMvQ0xJMTEvY29tbWl0cy9kY2JjYjQ3MjFkZGE1ZGFiMGE1NmQ5ZmFhYWVlNTBlNmEzMGY3NzU4Ig==.json", "commit": "https://api.github.com/repos/CLIUtils/CLI11/commits/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758", "content": "{\"sha\": \"dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"node_id\": \"C_kwDOBMWu_NoAKGRjYmNiNDcyMWRkYTVkYWIwYTU2ZDlmYWFhZWU1MGU2YTMwZjc3NTg\", \"commit\": {\"author\": {\"name\": \"Philip Top\", \"email\": \"phlptp@gmail.com\", \"date\": \"2022-09-14T14:45:22Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-09-14T14:45:22Z\"}, \"message\": \"fix: negated flag config files (#775)\\n\\n* add some coverage tests, and fix the issue with negated flags and config files\\r\\n\\r\\n* style: pre-commit.ci fixes\\r\\n\\r\\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\", \"tree\": {\"sha\": \"01c7b5a895bcf86c1ae0d6e40935de9c6e6407cd\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/trees/01c7b5a895bcf86c1ae0d6e40935de9c6e6407cd\"}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/git/commits/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjIekCCRBK7hj4Ov3rIwAAgA4IADhQP9LHSam6pUPQsb68BWXc\\nlH/ilOOLcTFUGPq0IxSzQOAqM0TpAAlpGYa/aTVFbZRuxgxJ5C7gnJNrIj99KTJl\\nrPU4VDhlOiY+U1rqC9DN+y5mvp0DcuJuTM6zb6DzHX5JtMkg9EyCUkPl5NhrhYXP\\nkJZJFPV1wessDK9q3nQjswlV2s3aSW9cSefcrvqogOxgL36dx2NgXB0j1N9UnBic\\n+dS1Ov9uLgQszP26gpWLaLhMtH+Yfy5rclqYNcibsLs28uG/vddB6sOlWjJL09W5\\nRhXvl0oTPcdv/rSB1ZHlJuX/5fS4rLuoklCl9jEx8iNggV+AegnN+SAfgwpOZKQ=\\n=QDDE\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 01c7b5a895bcf86c1ae0d6e40935de9c6e6407cd\\nparent 1a26afab049bb75c0523a754d62b961439248d44\\nauthor Philip Top <phlptp@gmail.com> 1663166722 -0700\\ncommitter GitHub <noreply@github.com> 1663166722 -0400\\n\\nfix: negated flag config files (#775)\\n\\n* add some coverage tests, and fix the issue with negated flags and config files\\r\\n\\r\\n* style: pre-commit.ci fixes\\r\\n\\r\\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\"}}, \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"comments_url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/comments\", \"author\": {\"login\": \"phlptp\", \"id\": 20667153, \"node_id\": \"MDQ6VXNlcjIwNjY3MTUz\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/20667153?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phlptp\", \"html_url\": \"https://github.com/phlptp\", \"followers_url\": \"https://api.github.com/users/phlptp/followers\", \"following_url\": \"https://api.github.com/users/phlptp/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phlptp/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phlptp/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phlptp/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phlptp/orgs\", \"repos_url\": \"https://api.github.com/users/phlptp/repos\", \"events_url\": \"https://api.github.com/users/phlptp/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phlptp/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"1a26afab049bb75c0523a754d62b961439248d44\", \"url\": \"https://api.github.com/repos/CLIUtils/CLI11/commits/1a26afab049bb75c0523a754d62b961439248d44\", \"html_url\": \"https://github.com/CLIUtils/CLI11/commit/1a26afab049bb75c0523a754d62b961439248d44\"}], \"stats\": {\"total\": 61, \"additions\": 61, \"deletions\": 0}, \"files\": [{\"sha\": \"9fbb423f0ea7f89604196469fe4288e3577dc972\", \"filename\": \"include/CLI/impl/Config_inl.hpp\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/include%2FCLI%2Fimpl%2FConfig_inl.hpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/include%2FCLI%2Fimpl%2FConfig_inl.hpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/include%2FCLI%2Fimpl%2FConfig_inl.hpp?ref=dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"patch\": \"@@ -344,6 +344,9 @@ ConfigBase::to_config(const App *app, bool default_also, bool write_description,\\n                 }\\n \\n                 if(!value.empty()) {\\n+                    if(!opt->get_fnames().empty()) {\\n+                        value = opt->get_flag_value(name, value);\\n+                    }\\n                     if(write_description && opt->has_description()) {\\n                         out << '\\\\n';\\n                         out << commentLead << detail::fix_newlines(commentLead, opt->get_description()) << '\\\\n';\"}, {\"sha\": \"e6425f02b4e39858f2ee0017c63d52a99c8dd9f2\", \"filename\": \"tests/ConfigFileTest.cpp\", \"status\": \"modified\", \"additions\": 23, \"deletions\": 0, \"changes\": 23, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FConfigFileTest.cpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FConfigFileTest.cpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/tests%2FConfigFileTest.cpp?ref=dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"patch\": \"@@ -2497,6 +2497,29 @@ TEST_CASE_METHOD(TApp, \\\"ConfigWriteReadWrite\\\", \\\"[config]\\\") {\\n     CHECK(config2 == config1);\\n }\\n \\n+TEST_CASE_METHOD(TApp, \\\"ConfigWriteReadNegated\\\", \\\"[config]\\\") {\\n+\\n+    TempFile tmpini{\\\"TestIniTmp.ini\\\"};\\n+    bool flag{true};\\n+    app.add_flag(\\\"!--no-flag\\\", flag);\\n+    args = {\\\"--no-flag\\\"};\\n+    run();\\n+\\n+    // Save config, with default values too\\n+    std::string config1 = app.config_to_str(false, false);\\n+    {\\n+        std::ofstream out{tmpini};\\n+        out << config1 << std::endl;\\n+    }\\n+    CHECK_FALSE(flag);\\n+    args.clear();\\n+    flag = true;\\n+    app.set_config(\\\"--config\\\", tmpini, \\\"Read an ini file\\\", true);\\n+    run();\\n+\\n+    CHECK_FALSE(flag);\\n+}\\n+\\n /////// INI output tests\\n \\n TEST_CASE_METHOD(TApp, \\\"IniOutputSimple\\\", \\\"[config]\\\") {\"}, {\"sha\": \"9f55f6c85a59c1d92be73f9c39da9aaf887cc618\", \"filename\": \"tests/CreationTest.cpp\", \"status\": \"modified\", \"additions\": 19, \"deletions\": 0, \"changes\": 19, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FCreationTest.cpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FCreationTest.cpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/tests%2FCreationTest.cpp?ref=dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"patch\": \"@@ -549,6 +549,25 @@ TEST_CASE_METHOD(TApp, \\\"GetOptionList\\\", \\\"[creation]\\\") {\\n     }\\n }\\n \\n+TEST_CASE_METHOD(TApp, \\\"GetOptionListFilter\\\", \\\"[creation]\\\") {\\n+    int two{0};\\n+    auto *flag = app.add_flag(\\\"--one\\\");\\n+    app.add_option(\\\"--two\\\", two);\\n+\\n+    const CLI::App &const_app = app;  // const alias to force use of const-methods\\n+    std::vector<const CLI::Option *> opt_listc =\\n+        const_app.get_options([](const CLI::Option *opt) { return opt->get_name() == \\\"--one\\\"; });\\n+\\n+    REQUIRE(static_cast<std::size_t>(1) == opt_listc.size());\\n+    CHECK(flag == opt_listc.at(0));\\n+\\n+    std::vector<CLI::Option *> opt_list =\\n+        app.get_options([](const CLI::Option *opt) { return opt->get_name() == \\\"--one\\\"; });\\n+\\n+    REQUIRE(static_cast<std::size_t>(1) == opt_list.size());\\n+    CHECK(flag == opt_list.at(0));\\n+}\\n+\\n TEST_CASE(\\\"ValidatorTests: TestValidatorCreation\\\", \\\"[creation]\\\") {\\n     std::function<std::string(std::string &)> op1 = [](std::string &val) {\\n         return (val.size() >= 5) ? std::string{} : val;\"}, {\"sha\": \"84a62d8253ef77933bca3d1db2425098ac19b740\", \"filename\": \"tests/SubcommandTest.cpp\", \"status\": \"modified\", \"additions\": 16, \"deletions\": 0, \"changes\": 16, \"blob_url\": \"https://github.com/CLIUtils/CLI11/blob/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FSubcommandTest.cpp\", \"raw_url\": \"https://github.com/CLIUtils/CLI11/raw/dcbcb4721dda5dab0a56d9faaaee50e6a30f7758/tests%2FSubcommandTest.cpp\", \"contents_url\": \"https://api.github.com/repos/CLIUtils/CLI11/contents/tests%2FSubcommandTest.cpp?ref=dcbcb4721dda5dab0a56d9faaaee50e6a30f7758\", \"patch\": \"@@ -916,6 +916,10 @@ TEST_CASE_METHOD(TApp, \\\"SubcomInheritCaseCheck\\\", \\\"[subcom]\\\") {\\n     CHECK(app.get_subcommands({}).size() == 2u);\\n     CHECK(app.get_subcommands([](const CLI::App *s) { return s->get_name() == \\\"sub1\\\"; }).size() == 1u);\\n \\n+    // check the const version of get_subcommands\\n+    const auto &app_const = app;\\n+    CHECK(app_const.get_subcommands([](const CLI::App *s) { return s->get_name() == \\\"sub1\\\"; }).size() == 1u);\\n+\\n     args = {\\\"SuB1\\\"};\\n     run();\\n     CHECK(app.get_subcommands().at(0) == sub1);\\n@@ -1192,6 +1196,18 @@ TEST_CASE_METHOD(ManySubcommands, \\\"manyIndexQueryPtr\\\", \\\"[subcom]\\\") {\\n     CHECK_THROWS_AS(app.get_subcommand_ptr(4), CLI::OptionNotFound);\\n }\\n \\n+TEST_CASE_METHOD(ManySubcommands, \\\"manyIndexQueryPtrByName\\\", \\\"[subcom]\\\") {\\n+    auto s1 = app.get_subcommand_ptr(\\\"sub1\\\");\\n+    auto s2 = app.get_subcommand_ptr(\\\"sub2\\\");\\n+    auto s3 = app.get_subcommand_ptr(\\\"sub3\\\");\\n+    auto s4 = app.get_subcommand_ptr(\\\"sub4\\\");\\n+    CHECK(sub1 == s1.get());\\n+    CHECK(sub2 == s2.get());\\n+    CHECK(sub3 == s3.get());\\n+    CHECK(sub4 == s4.get());\\n+    CHECK_THROWS_AS(app.get_subcommand_ptr(\\\"sub5\\\"), CLI::OptionNotFound);\\n+}\\n+\\n TEST_CASE_METHOD(ManySubcommands, \\\"Required1Fuzzy\\\", \\\"[subcom]\\\") {\\n \\n     app.require_subcommand(0, 1);\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdW5jcnVzdGlmeS91bmNydXN0aWZ5L2NvbW1pdHMvZGZlNzkxNjg0YjI0YWRjOWVlZjgxYmFlZjg2N2Y4MjQ4NjZhYmRmYSI=.json", "commit": "https://api.github.com/repos/uncrustify/uncrustify/commits/dfe791684b24adc9eef81baef867f824866abdfa", "content": "{\"sha\": \"dfe791684b24adc9eef81baef867f824866abdfa\", \"node_id\": \"MDY6Q29tbWl0MzQwNjM3OmRmZTc5MTY4NGIyNGFkYzllZWY4MWJhZWY4NjdmODI0ODY2YWJkZmE=\", \"commit\": {\"author\": {\"name\": \"Guy Maurel\", \"email\": \"g.maurel@agwest.de\", \"date\": \"2017-09-22T16:13:19Z\"}, \"committer\": {\"name\": \"Guy Maurel\", \"email\": \"g.maurel@agwest.de\", \"date\": \"2017-09-22T16:13:19Z\"}, \"message\": \"A bugfix for #1352.\\nA new run in the loop is necessary.\", \"tree\": {\"sha\": \"b72bb48f7a744b71a9d561e23f4ff4ef618f85b4\", \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/git/trees/b72bb48f7a744b71a9d561e23f4ff4ef618f85b4\"}, \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/git/commits/dfe791684b24adc9eef81baef867f824866abdfa\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/dfe791684b24adc9eef81baef867f824866abdfa\", \"html_url\": \"https://github.com/uncrustify/uncrustify/commit/dfe791684b24adc9eef81baef867f824866abdfa\", \"comments_url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/dfe791684b24adc9eef81baef867f824866abdfa/comments\", \"author\": {\"login\": \"guy-maurel\", \"id\": 25404740, \"node_id\": \"MDQ6VXNlcjI1NDA0NzQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/25404740?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guy-maurel\", \"html_url\": \"https://github.com/guy-maurel\", \"followers_url\": \"https://api.github.com/users/guy-maurel/followers\", \"following_url\": \"https://api.github.com/users/guy-maurel/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guy-maurel/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guy-maurel/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guy-maurel/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guy-maurel/orgs\", \"repos_url\": \"https://api.github.com/users/guy-maurel/repos\", \"events_url\": \"https://api.github.com/users/guy-maurel/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guy-maurel/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"guy-maurel\", \"id\": 25404740, \"node_id\": \"MDQ6VXNlcjI1NDA0NzQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/25404740?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guy-maurel\", \"html_url\": \"https://github.com/guy-maurel\", \"followers_url\": \"https://api.github.com/users/guy-maurel/followers\", \"following_url\": \"https://api.github.com/users/guy-maurel/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guy-maurel/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guy-maurel/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guy-maurel/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guy-maurel/orgs\", \"repos_url\": \"https://api.github.com/users/guy-maurel/repos\", \"events_url\": \"https://api.github.com/users/guy-maurel/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guy-maurel/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"f4043299e5ee9b8607e6eed1b1bf0901b85fe747\", \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/f4043299e5ee9b8607e6eed1b1bf0901b85fe747\", \"html_url\": \"https://github.com/uncrustify/uncrustify/commit/f4043299e5ee9b8607e6eed1b1bf0901b85fe747\"}], \"stats\": {\"total\": 10, \"additions\": 8, \"deletions\": 2}, \"files\": [{\"sha\": \"ffc546bdb3ee40efe2c5ca105b565ef31c8502a6\", \"filename\": \"src/width.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/dfe791684b24adc9eef81baef867f824866abdfa/src%2Fwidth.cpp\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/dfe791684b24adc9eef81baef867f824866abdfa/src%2Fwidth.cpp\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/src%2Fwidth.cpp?ref=dfe791684b24adc9eef81baef867f824866abdfa\", \"patch\": \"@@ -338,6 +338,8 @@ static bool split_line(chunk_t *start)\\n       LOG_FMT(LSPLIT, \\\" ** ONCE LINER SPLIT **\\\\n\\\");\\n       undo_one_liner(start);\\n       newlines_cleanup_braces(false);\\n+      // Issue #1352\\n+      cpd.changes++;\\n       return(false);\\n    }\\n \"}, {\"sha\": \"f8edcb46078dc003fcf401bacdf39fa81e80b250\", \"filename\": \"tests/output/c/00451-enum_gallery.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/dfe791684b24adc9eef81baef867f824866abdfa/tests%2Foutput%2Fc%2F00451-enum_gallery.c\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/dfe791684b24adc9eef81baef867f824866abdfa/tests%2Foutput%2Fc%2F00451-enum_gallery.c\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Foutput%2Fc%2F00451-enum_gallery.c?ref=dfe791684b24adc9eef81baef867f824866abdfa\", \"patch\": \"@@ -13,7 +13,9 @@ enum foo { bar, baz, quux };\\n  * In some tests, the following line remains longer than 80\\n  * characters. Perhaps a bug?\\n  */\\n-enum longer_enum_that { will, not, all, fit, on, one, line, as, longg, as, the, cutoff, is, reasonable, because, this, is, a, very, very, wide, line };\\n+enum longer_enum_that { will, not, all, fit, on, one, line, as, longg, as, the,\\n+\\t                cutoff, is, reasonable, because, this, is, a, very,\\n+\\t                very, wide, line };\\n \\n enum q { w,\\n \\t e,r,\"}, {\"sha\": \"300b9c0a363a070e3aa2471d708b93613ce6ca7e\", \"filename\": \"tests/output/c/00453-enum_gallery.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 1, \"changes\": 4, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/dfe791684b24adc9eef81baef867f824866abdfa/tests%2Foutput%2Fc%2F00453-enum_gallery.c\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/dfe791684b24adc9eef81baef867f824866abdfa/tests%2Foutput%2Fc%2F00453-enum_gallery.c\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Foutput%2Fc%2F00453-enum_gallery.c?ref=dfe791684b24adc9eef81baef867f824866abdfa\", \"patch\": \"@@ -13,7 +13,9 @@ enum foo { bar, baz, quux };\\n  * In some tests, the following line remains longer than 80\\n  * characters. Perhaps a bug?\\n  */\\n-enum longer_enum_that { will, not, all, fit, on, one, line, as, longg, as, the, cutoff, is, reasonable, because, this, is, a, very, very, wide, line };\\n+enum longer_enum_that { will, not, all, fit, on, one, line, as, longg, as, the,\\n+\\t                cutoff, is, reasonable, because, this, is, a, very,\\n+\\t                very, wide, line };\\n \\n enum q { w,e,r,t,y}\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdW5jcnVzdGlmeS91bmNydXN0aWZ5L2NvbW1pdHMvMDU5ODk4ZTgwZDU1ZGJlOGQ1YzVlY2E2ZTZjMWIxMDY2ODU1M2Y5MiI=.json", "commit": "https://api.github.com/repos/uncrustify/uncrustify/commits/059898e80d55dbe8d5c5eca6e6c1b10668553f92", "content": "{\"sha\": \"059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"node_id\": \"MDY6Q29tbWl0MzQwNjM3OjA1OTg5OGU4MGQ1NWRiZThkNWM1ZWNhNmU2YzFiMTA2Njg1NTNmOTI=\", \"commit\": {\"author\": {\"name\": \"Guy Maurel\", \"email\": \"g.maurel@agwest.de\", \"date\": \"2017-10-12T15:09:34Z\"}, \"committer\": {\"name\": \"Guy Maurel\", \"email\": \"g.maurel@agwest.de\", \"date\": \"2017-10-12T15:09:34Z\"}, \"message\": \"A bugfix proposal for #1340\", \"tree\": {\"sha\": \"9834ab81ba89bca5c4995ab558ad9b25ee004a2c\", \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/git/trees/9834ab81ba89bca5c4995ab558ad9b25ee004a2c\"}, \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/git/commits/059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"html_url\": \"https://github.com/uncrustify/uncrustify/commit/059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"comments_url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/059898e80d55dbe8d5c5eca6e6c1b10668553f92/comments\", \"author\": {\"login\": \"guy-maurel\", \"id\": 25404740, \"node_id\": \"MDQ6VXNlcjI1NDA0NzQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/25404740?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guy-maurel\", \"html_url\": \"https://github.com/guy-maurel\", \"followers_url\": \"https://api.github.com/users/guy-maurel/followers\", \"following_url\": \"https://api.github.com/users/guy-maurel/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guy-maurel/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guy-maurel/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guy-maurel/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guy-maurel/orgs\", \"repos_url\": \"https://api.github.com/users/guy-maurel/repos\", \"events_url\": \"https://api.github.com/users/guy-maurel/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guy-maurel/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"guy-maurel\", \"id\": 25404740, \"node_id\": \"MDQ6VXNlcjI1NDA0NzQw\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/25404740?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/guy-maurel\", \"html_url\": \"https://github.com/guy-maurel\", \"followers_url\": \"https://api.github.com/users/guy-maurel/followers\", \"following_url\": \"https://api.github.com/users/guy-maurel/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/guy-maurel/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/guy-maurel/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/guy-maurel/subscriptions\", \"organizations_url\": \"https://api.github.com/users/guy-maurel/orgs\", \"repos_url\": \"https://api.github.com/users/guy-maurel/repos\", \"events_url\": \"https://api.github.com/users/guy-maurel/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/guy-maurel/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a38a422316def5f5101ed6012cc94d78edf468a7\", \"url\": \"https://api.github.com/repos/uncrustify/uncrustify/commits/a38a422316def5f5101ed6012cc94d78edf468a7\", \"html_url\": \"https://github.com/uncrustify/uncrustify/commit/a38a422316def5f5101ed6012cc94d78edf468a7\"}], \"stats\": {\"total\": 54, \"additions\": 51, \"deletions\": 3}, \"files\": [{\"sha\": \"6de22898aac7f578fa8c061e2848e555ddace49d\", \"filename\": \"src/align.cpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/src%2Falign.cpp\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/src%2Falign.cpp\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/src%2Falign.cpp?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -730,7 +730,7 @@ chunk_t *align_assign(chunk_t *first, size_t span, size_t thresh, size_t *p_nl_c\\n               __func__, __LINE__, pc->orig_line, pc->text());\\n       // Don't check inside PAREN or SQUARE groups\\n       if (  pc->type == CT_SPAREN_OPEN\\n-         || pc->type == CT_FPAREN_OPEN\\n+         // || pc->type == CT_FPAREN_OPEN Issue #1340\\n          || pc->type == CT_SQUARE_OPEN\\n          || pc->type == CT_PAREN_OPEN)\\n       {\"}, {\"sha\": \"6f651f6a170d64f7f531ca95a331e3d242ae15c2\", \"filename\": \"tests/config/bug_1340.cfg\", \"status\": \"added\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Fconfig%2Fbug_1340.cfg\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Fconfig%2Fbug_1340.cfg\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Fconfig%2Fbug_1340.cfg?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -0,0 +1,6 @@\\n+output_tab_size                 = 4\\n+indent_columns                  = 4\\n+indent_with_tabs                = 0\\n+indent_align_string             = true\\n+indent_cpp_lambda_body          = true\\n+align_assign_span               = 1\"}, {\"sha\": \"504010ea60e9a8fe1138d3968e1166981ece7a87\", \"filename\": \"tests/cpp.test\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Fcpp.test\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Fcpp.test\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Fcpp.test?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -111,6 +111,8 @@\\n 30209 empty.cfg                        cpp/bug_1134.cpp\\n 30210 bug_1338.cfg                     cpp/bug_1338.cpp\\n \\n+30220 bug_1340.cfg                     cpp/bug_1340.cpp\\n+\\n 30240 align_func_params.cfg            cpp/align_func_params.cpp\\n 30241 align_func_params_span.cfg       cpp/align_func_params.cpp\\n 30242 align_func_params_gap.cfg        cpp/align_func_params.cpp\"}, {\"sha\": \"680d6d5189fb51056a2011483bb77af8e491ffc1\", \"filename\": \"tests/input/cpp/bug_1340.cpp\", \"status\": \"added\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Finput%2Fcpp%2Fbug_1340.cpp\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Finput%2Fcpp%2Fbug_1340.cpp\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Finput%2Fcpp%2Fbug_1340.cpp?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -0,0 +1,20 @@\\n+double t               = 111; \\n+double t1                         = 222; \\n+double t123 = 333;\\n+\\n+\\n+auto f = [](double x) -> double\\n+         {\\n+             double t                          = 1111;\\n+             double t1              = 1222;\\n+             double t123 = 1333;\\n+         };\\n+\\n+\\n+std::transform(v1.begin(), v1.end(), v2.begin(),\\n+               [](double x) -> double\\n+               {\\n+                   double t = 2111;\\n+                   double t1                       = 2222;\\n+                   double t123            = 2333;\\n+               }; );\"}, {\"sha\": \"f244caefd20f3c7c5b1d2986a9152e80bfe4ce78\", \"filename\": \"tests/output/cpp/30023-templates.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Foutput%2Fcpp%2F30023-templates.cpp\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Foutput%2Fcpp%2F30023-templates.cpp\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Foutput%2Fcpp%2F30023-templates.cpp?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -163,8 +163,8 @@ void g(X<>& x);\\n typedef std::vector<std::vector<int> >    Table; // OK\\n typedef std::vector<std::vector<bool> >   Flags; // Error\\n \\n-void func(List<B> =default_val1);\\n-void func(List<List<B> > =default_val2);\\n+void func(List<B>       =default_val1);\\n+void func(List<List<B> >=default_val2);\\n \\n BLAH<(3.14 >= 42)> blah;\\n bool               X = j<3> > 1;\"}, {\"sha\": \"f64bc6a031c6a3a07f983fca8679edc9eeff7dcd\", \"filename\": \"tests/output/cpp/30220-bug_1340.cpp\", \"status\": \"added\", \"additions\": 20, \"deletions\": 0, \"changes\": 20, \"blob_url\": \"https://github.com/uncrustify/uncrustify/blob/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Foutput%2Fcpp%2F30220-bug_1340.cpp\", \"raw_url\": \"https://github.com/uncrustify/uncrustify/raw/059898e80d55dbe8d5c5eca6e6c1b10668553f92/tests%2Foutput%2Fcpp%2F30220-bug_1340.cpp\", \"contents_url\": \"https://api.github.com/repos/uncrustify/uncrustify/contents/tests%2Foutput%2Fcpp%2F30220-bug_1340.cpp?ref=059898e80d55dbe8d5c5eca6e6c1b10668553f92\", \"patch\": \"@@ -0,0 +1,20 @@\\n+double t    = 111;\\n+double t1   = 222;\\n+double t123 = 333;\\n+\\n+\\n+auto f = [](double x) -> double\\n+         {\\n+             double t    = 1111;\\n+             double t1   = 1222;\\n+             double t123 = 1333;\\n+         };\\n+\\n+\\n+std::transform(v1.begin(), v1.end(), v2.begin(),\\n+               [](double x) -> double\\n+               {\\n+                   double t    = 2111;\\n+                   double t1   = 2222;\\n+                   double t123 = 2333;\\n+               }; );\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc2t5cGphY2svZW50dC9jb21taXRzL2NmMGRhMzJmZDBkMGM5ZmU2YWMzMjJmMThhOGI2MTc2NDA3Zjc2Nzki.json", "commit": "https://api.github.com/repos/skypjack/entt/commits/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679", "content": "{\"sha\": \"cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"node_id\": \"MDY6Q29tbWl0ODYzMzczNDM6Y2YwZGEzMmZkMGQwYzlmZTZhYzMyMmYxOGE4YjYxNzY0MDdmNzY3OQ==\", \"commit\": {\"author\": {\"name\": \"Michele Caini\", \"email\": \"michele.caini@gmail.com\", \"date\": \"2021-01-25T14:12:59Z\"}, \"committer\": {\"name\": \"Michele Caini\", \"email\": \"michele.caini@gmail.com\", \"date\": \"2021-01-25T14:12:59Z\"}, \"message\": \"meta: iterators of meta associative containers return keys by const reference rather than by copy\", \"tree\": {\"sha\": \"8c5dc7b985c6ad1f9b297a7ce575229627c2f286\", \"url\": \"https://api.github.com/repos/skypjack/entt/git/trees/8c5dc7b985c6ad1f9b297a7ce575229627c2f286\"}, \"url\": \"https://api.github.com/repos/skypjack/entt/git/commits/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/skypjack/entt/commits/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"html_url\": \"https://github.com/skypjack/entt/commit/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"comments_url\": \"https://api.github.com/repos/skypjack/entt/commits/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679/comments\", \"author\": {\"login\": \"skypjack\", \"id\": 1812216, \"node_id\": \"MDQ6VXNlcjE4MTIyMTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1812216?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/skypjack\", \"html_url\": \"https://github.com/skypjack\", \"followers_url\": \"https://api.github.com/users/skypjack/followers\", \"following_url\": \"https://api.github.com/users/skypjack/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/skypjack/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/skypjack/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/skypjack/subscriptions\", \"organizations_url\": \"https://api.github.com/users/skypjack/orgs\", \"repos_url\": \"https://api.github.com/users/skypjack/repos\", \"events_url\": \"https://api.github.com/users/skypjack/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/skypjack/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"skypjack\", \"id\": 1812216, \"node_id\": \"MDQ6VXNlcjE4MTIyMTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1812216?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/skypjack\", \"html_url\": \"https://github.com/skypjack\", \"followers_url\": \"https://api.github.com/users/skypjack/followers\", \"following_url\": \"https://api.github.com/users/skypjack/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/skypjack/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/skypjack/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/skypjack/subscriptions\", \"organizations_url\": \"https://api.github.com/users/skypjack/orgs\", \"repos_url\": \"https://api.github.com/users/skypjack/repos\", \"events_url\": \"https://api.github.com/users/skypjack/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/skypjack/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"5a3085c42be70982414a32450c7055d3f22f0f0b\", \"url\": \"https://api.github.com/repos/skypjack/entt/commits/5a3085c42be70982414a32450c7055d3f22f0f0b\", \"html_url\": \"https://github.com/skypjack/entt/commit/5a3085c42be70982414a32450c7055d3f22f0f0b\"}], \"stats\": {\"total\": 17, \"additions\": 10, \"deletions\": 7}, \"files\": [{\"sha\": \"9920dd0e17472f0321720d8d1ff06b181d9e76db\", \"filename\": \"src/entt/meta/meta.hpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 2, \"changes\": 4, \"blob_url\": \"https://github.com/skypjack/entt/blob/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679/src%2Fentt%2Fmeta%2Fmeta.hpp\", \"raw_url\": \"https://github.com/skypjack/entt/raw/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679/src%2Fentt%2Fmeta%2Fmeta.hpp\", \"contents_url\": \"https://api.github.com/repos/skypjack/entt/contents/src%2Fentt%2Fmeta%2Fmeta.hpp?ref=cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"patch\": \"@@ -2044,9 +2044,9 @@ class meta_associative_container::meta_iterator {\\n             break;\\n         case operation::DEREF:\\n             if constexpr(KeyOnly) {\\n-                static_cast<std::pair<meta_any, meta_any> *>(to)->first = *any_cast<const It &>(from);\\n+                static_cast<std::pair<meta_any, meta_any> *>(to)->first = std::cref(*any_cast<const It &>(from));\\n             } else {\\n-                *static_cast<std::pair<meta_any, meta_any> *>(to) = std::make_pair<meta_any, meta_any>(any_cast<const It &>(from)->first, std::reference_wrapper{any_cast<const It &>(from)->second});\\n+                *static_cast<std::pair<meta_any, meta_any> *>(to) = std::make_pair<meta_any, meta_any>(std::cref(any_cast<const It &>(from)->first), std::reference_wrapper{any_cast<const It &>(from)->second});\\n             }\\n             break;\\n         }\"}, {\"sha\": \"629286639138469a1edf3d177ad22ab0e62a79cf\", \"filename\": \"test/entt/meta/meta_container.cpp\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 5, \"changes\": 13, \"blob_url\": \"https://github.com/skypjack/entt/blob/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679/test%2Fentt%2Fmeta%2Fmeta_container.cpp\", \"raw_url\": \"https://github.com/skypjack/entt/raw/cf0da32fd0d0c9fe6ac322f18a8b6176407f7679/test%2Fentt%2Fmeta%2Fmeta_container.cpp\", \"contents_url\": \"https://api.github.com/repos/skypjack/entt/contents/test%2Fentt%2Fmeta%2Fmeta_container.cpp?ref=cf0da32fd0d0c9fe6ac322f18a8b6176407f7679\", \"patch\": \"@@ -259,9 +259,9 @@ TEST_F(MetaContainer, StdSet) {\\n     ASSERT_EQ(view.size(), 4u);\\n     ASSERT_EQ(view.find(0), view.end());\\n \\n-    (*view.find(1)).first.cast<int &>() = 42;\\n-\\n-    ASSERT_EQ((*view.find(1)).first.cast<int>(), 1);\\n+    ASSERT_EQ((*view.find(1)).first.try_cast<int>(), nullptr);\\n+    ASSERT_NE((*view.find(1)).first.try_cast<const int>(), nullptr);\\n+    ASSERT_EQ((*view.find(1)).first.cast<const int &>(), 1);\\n \\n     ASSERT_TRUE(view.erase(1.));\\n     ASSERT_TRUE(view.clear());\\n@@ -365,8 +365,9 @@ TEST_F(MetaContainer, ConstKeyOnlyAssociativeContainer) {\\n     ASSERT_EQ(view.size(), 1u);\\n     ASSERT_NE(view.begin(), view.end());\\n \\n+    ASSERT_EQ((*view.find(2)).first.try_cast<int>(), nullptr);\\n+    ASSERT_NE((*view.find(2)).first.try_cast<const int>(), nullptr);\\n     ASSERT_EQ((*view.find(2)).first.cast<int>(), 2);\\n-    ASSERT_EQ((*view.find(2)).first.cast<int &>(), 2);\\n     ASSERT_EQ((*view.find(2)).first.cast<const int &>(), 2);\\n \\n     ASSERT_FALSE(view.insert(0));\\n@@ -422,8 +423,10 @@ TEST_F(MetaContainer, KeyOnlyAssociativeContainerConstMetaAny) {\\n \\n         ASSERT_TRUE(view);\\n         ASSERT_EQ(view.value_type(), (entt::resolve<int>()));\\n+\\n+        ASSERT_EQ((*view.find(2)).first.try_cast<int>(), nullptr);\\n+        ASSERT_NE((*view.find(2)).first.try_cast<const int>(), nullptr);\\n         ASSERT_EQ((*view.find(2)).first.cast<int>(), 2);\\n-        ASSERT_EQ((*view.find(2)).first.cast<int &>(), 2);\\n         ASSERT_EQ((*view.find(2)).first.cast<const int &>(), 2);\\n     };\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mvc2t5cGphY2svZW50dC9jb21taXRzL2FkNWJiNTE5OGJhZTNlNDFiZWFmYzk2YTBhNTA5NzI1ZGYwZDNmNzki.json", "commit": "https://api.github.com/repos/skypjack/entt/commits/ad5bb5198bae3e41beafc96a0a509725df0d3f79", "content": "{\"sha\": \"ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"node_id\": \"MDY6Q29tbWl0ODYzMzczNDM6YWQ1YmI1MTk4YmFlM2U0MWJlYWZjOTZhMGE1MDk3MjVkZjBkM2Y3OQ==\", \"commit\": {\"author\": {\"name\": \"Michele Caini\", \"email\": \"michele.caini@gmail.com\", \"date\": \"2020-06-22T15:02:45Z\"}, \"committer\": {\"name\": \"Michele Caini\", \"email\": \"michele.caini@gmail.com\", \"date\": \"2020-06-22T15:02:45Z\"}, \"message\": \"meta: fixed key_only member function for meta associative containers\", \"tree\": {\"sha\": \"a2f06bc231a5dbe39af22372fb7ae42f0c7daacb\", \"url\": \"https://api.github.com/repos/skypjack/entt/git/trees/a2f06bc231a5dbe39af22372fb7ae42f0c7daacb\"}, \"url\": \"https://api.github.com/repos/skypjack/entt/git/commits/ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/skypjack/entt/commits/ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"html_url\": \"https://github.com/skypjack/entt/commit/ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"comments_url\": \"https://api.github.com/repos/skypjack/entt/commits/ad5bb5198bae3e41beafc96a0a509725df0d3f79/comments\", \"author\": {\"login\": \"skypjack\", \"id\": 1812216, \"node_id\": \"MDQ6VXNlcjE4MTIyMTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1812216?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/skypjack\", \"html_url\": \"https://github.com/skypjack\", \"followers_url\": \"https://api.github.com/users/skypjack/followers\", \"following_url\": \"https://api.github.com/users/skypjack/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/skypjack/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/skypjack/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/skypjack/subscriptions\", \"organizations_url\": \"https://api.github.com/users/skypjack/orgs\", \"repos_url\": \"https://api.github.com/users/skypjack/repos\", \"events_url\": \"https://api.github.com/users/skypjack/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/skypjack/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"skypjack\", \"id\": 1812216, \"node_id\": \"MDQ6VXNlcjE4MTIyMTY=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1812216?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/skypjack\", \"html_url\": \"https://github.com/skypjack\", \"followers_url\": \"https://api.github.com/users/skypjack/followers\", \"following_url\": \"https://api.github.com/users/skypjack/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/skypjack/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/skypjack/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/skypjack/subscriptions\", \"organizations_url\": \"https://api.github.com/users/skypjack/orgs\", \"repos_url\": \"https://api.github.com/users/skypjack/repos\", \"events_url\": \"https://api.github.com/users/skypjack/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/skypjack/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"d306bc4a9a008e15eb0179bf9000e1154c2d052c\", \"url\": \"https://api.github.com/repos/skypjack/entt/commits/d306bc4a9a008e15eb0179bf9000e1154c2d052c\", \"html_url\": \"https://github.com/skypjack/entt/commit/d306bc4a9a008e15eb0179bf9000e1154c2d052c\"}], \"stats\": {\"total\": 4, \"additions\": 3, \"deletions\": 1}, \"files\": [{\"sha\": \"e0726a02a7aba915430221b86f9e736cd34ab4e3\", \"filename\": \"src/entt/meta/meta.hpp\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/skypjack/entt/blob/ad5bb5198bae3e41beafc96a0a509725df0d3f79/src%2Fentt%2Fmeta%2Fmeta.hpp\", \"raw_url\": \"https://github.com/skypjack/entt/raw/ad5bb5198bae3e41beafc96a0a509725df0d3f79/src%2Fentt%2Fmeta%2Fmeta.hpp\", \"contents_url\": \"https://api.github.com/repos/skypjack/entt/contents/src%2Fentt%2Fmeta%2Fmeta.hpp?ref=ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"patch\": \"@@ -1972,7 +1972,7 @@ struct meta_associative_container::meta_associative_container_proxy {\\n  */\\n template<typename Type>\\n meta_associative_container::meta_associative_container(Type &container)\\n-    : key_only_container{!is_key_only_meta_associative_container_v<Type>},\\n+    : key_only_container{is_key_only_meta_associative_container_v<Type>},\\n       key_type_fn{&meta_associative_container_proxy<Type>::key_type},\\n       mapped_type_fn{&meta_associative_container_proxy<Type>::mapped_type},\\n       value_type_fn{&meta_associative_container_proxy<Type>::value_type},\"}, {\"sha\": \"9e63d51753499226e3039aa9e861df5da30a0d58\", \"filename\": \"test/entt/meta/meta_container.cpp\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/skypjack/entt/blob/ad5bb5198bae3e41beafc96a0a509725df0d3f79/test%2Fentt%2Fmeta%2Fmeta_container.cpp\", \"raw_url\": \"https://github.com/skypjack/entt/raw/ad5bb5198bae3e41beafc96a0a509725df0d3f79/test%2Fentt%2Fmeta%2Fmeta_container.cpp\", \"contents_url\": \"https://api.github.com/repos/skypjack/entt/contents/test%2Fentt%2Fmeta%2Fmeta_container.cpp?ref=ad5bb5198bae3e41beafc96a0a509725df0d3f79\", \"patch\": \"@@ -145,6 +145,7 @@ TEST(MetaAssociativeContainer, StdMap) {\\n     auto view = any.as_associative_container();\\n \\n     ASSERT_TRUE(view);\\n+    ASSERT_FALSE(view.key_only());\\n     ASSERT_EQ(view.key_type(), entt::resolve<int>());\\n     ASSERT_EQ(view.mapped_type(), entt::resolve<char>());\\n     ASSERT_EQ(view.value_type(), (entt::resolve<std::pair<const int, char>>()));\\n@@ -196,6 +197,7 @@ TEST(MetaAssociativeContainer, StdSet) {\\n     auto view = any.as_associative_container();\\n \\n     ASSERT_TRUE(view);\\n+    ASSERT_TRUE(view.key_only());\\n     ASSERT_EQ(view.key_type(), entt::resolve<int>());\\n     ASSERT_EQ(view.mapped_type(), entt::meta_type{});\\n     ASSERT_EQ(view.value_type(), entt::resolve<int>());\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmFub21zZy9ubmcvY29tbWl0cy9lM2I4ZjMxYjA0NGU0ZmU3ZDQ3NDM5NDY3ZmMxNjIyMjY2YjUzMzVjIg==.json", "commit": "https://api.github.com/repos/nanomsg/nng/commits/e3b8f31b044e4fe7d47439467fc1622266b5335c", "content": "{\"sha\": \"e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"node_id\": \"MDY6Q29tbWl0NzYxNTc3NzQ6ZTNiOGYzMWIwNDRlNGZlN2Q0NzQzOTQ2N2ZjMTYyMjI2NmI1MzM1Yw==\", \"commit\": {\"author\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2018-04-14T22:09:27Z\"}, \"committer\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2018-04-15T03:18:02Z\"}, \"message\": \"fixes #350 Incorrect compat error code from nn_setsockopt\", \"tree\": {\"sha\": \"deee625b2d01daa5558137f664c5b49d0a0e9e48\", \"url\": \"https://api.github.com/repos/nanomsg/nng/git/trees/deee625b2d01daa5558137f664c5b49d0a0e9e48\"}, \"url\": \"https://api.github.com/repos/nanomsg/nng/git/commits/e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"html_url\": \"https://github.com/nanomsg/nng/commit/e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"comments_url\": \"https://api.github.com/repos/nanomsg/nng/commits/e3b8f31b044e4fe7d47439467fc1622266b5335c/comments\", \"author\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"0467702bf1e5b4777c254d4116d8f8972b5a44a2\", \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/0467702bf1e5b4777c254d4116d8f8972b5a44a2\", \"html_url\": \"https://github.com/nanomsg/nng/commit/0467702bf1e5b4777c254d4116d8f8972b5a44a2\"}], \"stats\": {\"total\": 64, \"additions\": 63, \"deletions\": 1}, \"files\": [{\"sha\": \"cbb88a27435cbc4bcf1cdad52970ab04ac32568f\", \"filename\": \"src/compat/nanomsg/nn.c\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/nanomsg/nng/blob/e3b8f31b044e4fe7d47439467fc1622266b5335c/src%2Fcompat%2Fnanomsg%2Fnn.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/e3b8f31b044e4fe7d47439467fc1622266b5335c/src%2Fcompat%2Fnanomsg%2Fnn.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/src%2Fcompat%2Fnanomsg%2Fnn.c?ref=e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"patch\": \"@@ -835,7 +835,8 @@ nn_setsockopt(int s, int nnlevel, int nnopt, const void *valp, size_t sz)\\n \\t}\\n \\n \\tif (name == NULL) {\\n-\\t\\treturn (ENOPROTOOPT);\\n+\\t\\terrno = ENOPROTOOPT;\\n+\\t\\treturn (-1);\\n \\t}\\n \\n \\tif ((rv = nng_setopt((nng_socket) s, name, valp, sz)) != 0) {\"}, {\"sha\": \"d6283dbc43a690edf2230e757b5a3404bb0b4f7a\", \"filename\": \"tests/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/nanomsg/nng/blob/e3b8f31b044e4fe7d47439467fc1622266b5335c/tests%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/e3b8f31b044e4fe7d47439467fc1622266b5335c/tests%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/tests%2FCMakeLists.txt?ref=e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"patch\": \"@@ -187,5 +187,9 @@ add_nng_compat_test(compat_survey 5)\\n add_nng_compat_test(compat_reqttl 5)\\n add_nng_compat_test(compat_shutdown 5)\\n \\n+# These are special tests for compat mode, not inherited from the\\n+# legacy libnanomsg suite.\\n+add_nng_test(compat_options 5 NNG_PROTO_REP0)\\n+\\n # c++ tests\\n add_nng_cpp_test(cplusplus_pair 5)\"}, {\"sha\": \"1cf147f5e593566ff7f92f55b4216c13c175285b\", \"filename\": \"tests/compat_options.c\", \"status\": \"added\", \"additions\": 57, \"deletions\": 0, \"changes\": 57, \"blob_url\": \"https://github.com/nanomsg/nng/blob/e3b8f31b044e4fe7d47439467fc1622266b5335c/tests%2Fcompat_options.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/e3b8f31b044e4fe7d47439467fc1622266b5335c/tests%2Fcompat_options.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/tests%2Fcompat_options.c?ref=e3b8f31b044e4fe7d47439467fc1622266b5335c\", \"patch\": \"@@ -0,0 +1,57 @@\\n+//\\n+// Copyright 2018 Staysail Systems, Inc. <info@staysail.tech>\\n+// Copyright 2018 Capitar IT Group BV <info@capitar.com>\\n+//\\n+// This software is supplied under the terms of the MIT License, a\\n+// copy of which should be located in the distribution where this\\n+// file was obtained (LICENSE.txt).  A copy of the license may also be\\n+// found online at https://opensource.org/licenses/MIT.\\n+//\\n+\\n+#include \\\"convey.h\\\"\\n+\\n+#include \\\"compat/nanomsg/nn.h\\\"\\n+\\n+#include \\\"compat_testutil.h\\\"\\n+\\n+#include <string.h>\\n+\\n+#define SECONDS(x) ((x) *1000)\\n+\\n+TestMain(\\\"Compatible Options\\\", {\\n+\\n+\\tatexit(nn_term);\\n+\\n+\\tConvey(\\\"Given a compat NN_REP socket\\\", {\\n+\\t\\tint repsock;\\n+\\n+\\t\\tSo((repsock = nn_socket(AF_SP, NN_REP)) != -1);\\n+\\t\\tReset({ nn_close(repsock); });\\n+\\n+\\t\\tConvey(\\\"NN_DOMAIN works\\\", {\\n+\\t\\t\\tint    dom = 4321;\\n+\\t\\t\\tsize_t sz;\\n+\\t\\t\\tsz = sizeof(dom);\\n+\\t\\t\\tSo(nn_getsockopt(repsock, NN_SOL_SOCKET, NN_DOMAIN,\\n+\\t\\t\\t       &dom, &sz) == 0);\\n+\\t\\t\\tSo(sz == sizeof(dom));\\n+\\t\\t\\tSo(dom == AF_SP);\\n+\\n+\\t\\t\\tSo(nn_setsockopt(repsock, NN_SOL_SOCKET, NN_DOMAIN,\\n+\\t\\t\\t       &dom, sz) == -1);\\n+\\t\\t\\tSo(nn_errno() == ENOPROTOOPT);\\n+\\t\\t});\\n+\\t\\tConvey(\\\"NN_LINGER has no effect\\\", {\\n+\\t\\t\\tint    l = 4321;\\n+\\t\\t\\tsize_t sz;\\n+\\t\\t\\tsz = sizeof(l);\\n+\\t\\t\\tSo(nn_setsockopt(repsock, NN_SOL_SOCKET, NN_LINGER, &l,\\n+\\t\\t\\t       sz) == 0);\\n+\\n+\\t\\t\\tSo(nn_getsockopt(repsock, NN_SOL_SOCKET, NN_LINGER, &l,\\n+\\t\\t\\t       &sz) == 0);\\n+\\t\\t\\tSo(sz == sizeof(l));\\n+\\t\\t\\tSo(l == 0);\\n+\\t\\t});\\n+\\t});\\n+})\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmFub21zZy9ubmcvY29tbWl0cy82YTU5YjE1ZmJhMTA4NTQzMmM0YzE4OTUyNjgwZTE0ZDgwZGQxMzRhIg==.json", "commit": "https://api.github.com/repos/nanomsg/nng/commits/6a59b15fba1085432c4c18952680e14d80dd134a", "content": "{\"sha\": \"6a59b15fba1085432c4c18952680e14d80dd134a\", \"node_id\": \"MDY6Q29tbWl0NzYxNTc3NzQ6NmE1OWIxNWZiYTEwODU0MzJjNGMxODk1MjY4MGUxNGQ4MGRkMTM0YQ==\", \"commit\": {\"author\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2020-02-26T05:04:19Z\"}, \"committer\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2020-02-26T05:04:19Z\"}, \"message\": \"fixes #1201 Unexpected error return code: NNG_ENOMEM\", \"tree\": {\"sha\": \"ccdfae8ef436fa47cdf79544b54ed73d4b668597\", \"url\": \"https://api.github.com/repos/nanomsg/nng/git/trees/ccdfae8ef436fa47cdf79544b54ed73d4b668597\"}, \"url\": \"https://api.github.com/repos/nanomsg/nng/git/commits/6a59b15fba1085432c4c18952680e14d80dd134a\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/6a59b15fba1085432c4c18952680e14d80dd134a\", \"html_url\": \"https://github.com/nanomsg/nng/commit/6a59b15fba1085432c4c18952680e14d80dd134a\", \"comments_url\": \"https://api.github.com/repos/nanomsg/nng/commits/6a59b15fba1085432c4c18952680e14d80dd134a/comments\", \"author\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"57e315d7b3a2baf38ec3085faf59c4aef4a0ab9e\", \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/57e315d7b3a2baf38ec3085faf59c4aef4a0ab9e\", \"html_url\": \"https://github.com/nanomsg/nng/commit/57e315d7b3a2baf38ec3085faf59c4aef4a0ab9e\"}], \"stats\": {\"total\": 61, \"additions\": 53, \"deletions\": 8}, \"files\": [{\"sha\": \"dd82bceedfeb87cfc0ea623a4d84b06419abcb64\", \"filename\": \"src/nng.c\", \"status\": \"modified\", \"additions\": 12, \"deletions\": 7, \"changes\": 19, \"blob_url\": \"https://github.com/nanomsg/nng/blob/6a59b15fba1085432c4c18952680e14d80dd134a/src%2Fnng.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/6a59b15fba1085432c4c18952680e14d80dd134a/src%2Fnng.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/src%2Fnng.c?ref=6a59b15fba1085432c4c18952680e14d80dd134a\", \"patch\": \"@@ -105,14 +105,19 @@ nng_recv(nng_socket s, void *buf, size_t *szp, int flags)\\n \\t\\t// better use nng_recvmsg() instead.\\n \\t\\tvoid *nbuf;\\n \\n-\\t\\tif ((nbuf = nni_alloc(nng_msg_len(msg))) == NULL) {\\n-\\t\\t\\tnng_msg_free(msg);\\n-\\t\\t\\treturn (NNG_ENOMEM);\\n+\\t\\tif (nng_msg_len(msg) != 0) {\\n+\\t\\t\\tif ((nbuf = nni_alloc(nng_msg_len(msg))) == NULL) {\\n+\\t\\t\\t\\tnng_msg_free(msg);\\n+\\t\\t\\t\\treturn (NNG_ENOMEM);\\n+\\t\\t\\t}\\n+\\n+\\t\\t\\t*(void **) buf = nbuf;\\n+\\t\\t\\tmemcpy(nbuf, nni_msg_body(msg), nni_msg_len(msg));\\n+\\t\\t\\t*szp = nng_msg_len(msg);\\n+\\t\\t} else {\\n+\\t\\t\\t*(void **)buf = NULL;\\n+\\t\\t\\t*szp = 0;\\n \\t\\t}\\n-\\n-\\t\\t*(void **) buf = nbuf;\\n-\\t\\tmemcpy(nbuf, nni_msg_body(msg), nni_msg_len(msg));\\n-\\t\\t*szp = nng_msg_len(msg);\\n \\t}\\n \\tnni_msg_free(msg);\\n \\treturn (0);\"}, {\"sha\": \"cf803402be9308971f6ab5dc3bf72fa570a632a7\", \"filename\": \"tests/sock.c\", \"status\": \"modified\", \"additions\": 41, \"deletions\": 1, \"changes\": 42, \"blob_url\": \"https://github.com/nanomsg/nng/blob/6a59b15fba1085432c4c18952680e14d80dd134a/tests%2Fsock.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/6a59b15fba1085432c4c18952680e14d80dd134a/tests%2Fsock.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/tests%2Fsock.c?ref=6a59b15fba1085432c4c18952680e14d80dd134a\", \"patch\": \"@@ -1,5 +1,5 @@\\n //\\n-// Copyright 2019 Staysail Systems, Inc. <info@staysail.tech>\\n+// Copyright 2020 Staysail Systems, Inc. <info@staysail.tech>\\n // Copyright 2018 Capitar IT Group BV <info@capitar.com>\\n //\\n // This software is supplied under the terms of the MIT License, a\\n@@ -216,6 +216,45 @@ test_send_recv(void)\\n \\tTEST_CHECK(nng_close(s2) == 0);\\n }\\n \\n+void\\n+test_send_recv_zero_length(void)\\n+{\\n+\\tnng_socket   s1;\\n+\\tnng_socket   s2;\\n+\\tint          len;\\n+\\tsize_t       sz;\\n+\\tnng_duration to = 3000; // 3 seconds\\n+\\tchar *       buf;\\n+\\tchar *       a = \\\"inproc://send-recv-zero-length\\\";\\n+\\n+\\tTEST_NNG_PASS(nng_pair1_open(&s1));\\n+\\tTEST_NNG_PASS(nng_pair1_open(&s2));\\n+\\n+\\tTEST_NNG_PASS(nng_setopt_int(s1, NNG_OPT_RECVBUF, 1));\\n+\\tTEST_NNG_PASS(nng_getopt_int(s1, NNG_OPT_RECVBUF, &len));\\n+\\tTEST_CHECK(len == 1);\\n+\\n+\\tTEST_NNG_PASS(nng_setopt_int(s1, NNG_OPT_SENDBUF, 1));\\n+\\tTEST_NNG_PASS(nng_setopt_int(s2, NNG_OPT_SENDBUF, 1));\\n+\\n+\\tTEST_NNG_PASS(nng_setopt_ms(s1, NNG_OPT_SENDTIMEO, to));\\n+\\tTEST_NNG_PASS(nng_setopt_ms(s1, NNG_OPT_RECVTIMEO, to));\\n+\\tTEST_NNG_PASS(nng_setopt_ms(s2, NNG_OPT_SENDTIMEO, to));\\n+\\tTEST_NNG_PASS(nng_setopt_ms(s2, NNG_OPT_RECVTIMEO, to));\\n+\\n+\\tTEST_NNG_PASS(nng_listen(s1, a, NULL, 0));\\n+\\tTEST_NNG_PASS(nng_dial(s2, a, NULL, 0));\\n+\\n+\\tTEST_NNG_PASS(nng_send(s1, \\\"\\\", 0, 0));\\n+\\tTEST_NNG_PASS(nng_recv(s2, &buf, &sz, NNG_FLAG_ALLOC));\\n+\\tTEST_CHECK(buf == NULL);\\n+\\tTEST_CHECK(sz == 0);\\n+\\tnng_free(buf, sz);\\n+\\n+\\tTEST_NNG_PASS(nng_close(s1));\\n+\\tTEST_NNG_PASS(nng_close(s2));\\n+}\\n+\\n void\\n test_connection_refused(void)\\n {\\n@@ -611,6 +650,7 @@ TEST_LIST = {\\n \\t{ \\\"socket name\\\", test_socket_name },\\n \\t{ \\\"socket name oversize\\\", test_socket_name_oversize },\\n \\t{ \\\"send recv\\\", test_send_recv },\\n+\\t{ \\\"send recv zero length\\\", test_send_recv_zero_length },\\n \\t{ \\\"connection refused\\\", test_connection_refused },\\n \\t{ \\\"late connection\\\", test_late_connection },\\n \\t{ \\\"address busy\\\", test_address_busy },\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvbmFub21zZy9ubmcvY29tbWl0cy8xMTFiMjQxNDczY2VlZWNlZTFmMWMyMzJkM2M5ODc5ZmI4NTAzNjFkIg==.json", "commit": "https://api.github.com/repos/nanomsg/nng/commits/111b241473ceeecee1f1c232d3c9879fb850361d", "content": "{\"sha\": \"111b241473ceeecee1f1c232d3c9879fb850361d\", \"node_id\": \"C_kwDOBIoTTtoAKDExMWIyNDE0NzNjZWVlY2VlMWYxYzIzMmQzYzk4NzlmYjg1MDM2MWQ\", \"commit\": {\"author\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2021-12-02T22:29:06Z\"}, \"committer\": {\"name\": \"Garrett D'Amore\", \"email\": \"garrett@damore.org\", \"date\": \"2021-12-02T22:33:21Z\"}, \"message\": \"fixes #1541 bug in nni_chunk_insert\", \"tree\": {\"sha\": \"c1f7af8f05973e1ce47213f18bce9db5a10109c5\", \"url\": \"https://api.github.com/repos/nanomsg/nng/git/trees/c1f7af8f05973e1ce47213f18bce9db5a10109c5\"}, \"url\": \"https://api.github.com/repos/nanomsg/nng/git/commits/111b241473ceeecee1f1c232d3c9879fb850361d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/111b241473ceeecee1f1c232d3c9879fb850361d\", \"html_url\": \"https://github.com/nanomsg/nng/commit/111b241473ceeecee1f1c232d3c9879fb850361d\", \"comments_url\": \"https://api.github.com/repos/nanomsg/nng/commits/111b241473ceeecee1f1c232d3c9879fb850361d/comments\", \"author\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"gdamore\", \"id\": 1295229, \"node_id\": \"MDQ6VXNlcjEyOTUyMjk=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1295229?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/gdamore\", \"html_url\": \"https://github.com/gdamore\", \"followers_url\": \"https://api.github.com/users/gdamore/followers\", \"following_url\": \"https://api.github.com/users/gdamore/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/gdamore/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/gdamore/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/gdamore/subscriptions\", \"organizations_url\": \"https://api.github.com/users/gdamore/orgs\", \"repos_url\": \"https://api.github.com/users/gdamore/repos\", \"events_url\": \"https://api.github.com/users/gdamore/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/gdamore/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"e792d31b4a3b04658108e59edeab78495ac6b5a8\", \"url\": \"https://api.github.com/repos/nanomsg/nng/commits/e792d31b4a3b04658108e59edeab78495ac6b5a8\", \"html_url\": \"https://github.com/nanomsg/nng/commit/e792d31b4a3b04658108e59edeab78495ac6b5a8\"}], \"stats\": {\"total\": 7, \"additions\": 4, \"deletions\": 3}, \"files\": [{\"sha\": \"b819daf751ef96edf8a0ca9c49d65c04f08db080\", \"filename\": \"src/core/message.c\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/nanomsg/nng/blob/111b241473ceeecee1f1c232d3c9879fb850361d/src%2Fcore%2Fmessage.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/111b241473ceeecee1f1c232d3c9879fb850361d/src%2Fcore%2Fmessage.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/src%2Fcore%2Fmessage.c?ref=111b241473ceeecee1f1c232d3c9879fb850361d\", \"patch\": \"@@ -273,7 +273,7 @@ nni_chunk_insert(nni_chunk *ch, const void *data, size_t len)\\n \\t\\tch->ch_ptr -= len;\\n \\t} else if ((ch->ch_len + len) <= ch->ch_cap) {\\n \\t\\t// We had enough capacity, just shuffle data down.\\n-\\t\\tmemmove(ch->ch_ptr + len, ch->ch_ptr, ch->ch_len);\\n+\\t\\tmemmove(ch->ch_buf + len, ch->ch_ptr, ch->ch_len);\\n \\t} else if ((rv = nni_chunk_grow(ch, 0, len)) == 0) {\\n \\t\\t// We grew the chunk, so adjust.\\n \\t\\tch->ch_ptr -= len;\"}, {\"sha\": \"b3887b1089fa4fd87ceadd09afa613b6ca5b3f1a\", \"filename\": \"src/core/message_test.c\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 2, \"changes\": 5, \"blob_url\": \"https://github.com/nanomsg/nng/blob/111b241473ceeecee1f1c232d3c9879fb850361d/src%2Fcore%2Fmessage_test.c\", \"raw_url\": \"https://github.com/nanomsg/nng/raw/111b241473ceeecee1f1c232d3c9879fb850361d/src%2Fcore%2Fmessage_test.c\", \"contents_url\": \"https://api.github.com/repos/nanomsg/nng/contents/src%2Fcore%2Fmessage_test.c?ref=111b241473ceeecee1f1c232d3c9879fb850361d\", \"patch\": \"@@ -62,8 +62,9 @@ test_msg_insert_body(void)\\n \\tNUTS_PASS(nng_msg_alloc(&msg, 0));\\n \\tNUTS_PASS(nng_msg_append(msg, \\\"xyz\\\", 4));\\n \\tNUTS_PASS(nng_msg_insert(msg, \\\"uvw\\\", 3));\\n-\\tNUTS_ASSERT(nng_msg_len(msg) == 7);\\n-\\tNUTS_ASSERT(strcmp(nng_msg_body(msg), \\\"uvwxyz\\\") == 0);\\n+\\tNUTS_PASS(nng_msg_insert(msg, \\\"st\\\", 2));\\n+\\tNUTS_ASSERT(nng_msg_len(msg) == 9);\\n+\\tNUTS_ASSERT(strcmp(nng_msg_body(msg), \\\"stuvwxyz\\\") == 0);\\n \\tnng_msg_free(msg);\\n }\\n \"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzZhMTM0NjQwNTk0OWNhMWNmNWJlZmM1ZTgzYzZjNjZjODZlNGY5ZDEi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1", "content": "{\"sha\": \"6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"node_id\": \"C_kwDOAGurStoAKDZhMTM0NjQwNTk0OWNhMWNmNWJlZmM1ZTgzYzZjNjZjODZlNGY5ZDE\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2022-02-16T23:28:16Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2022-02-17T00:57:06Z\"}, \"message\": \"Include 128-bit with other signed integers in specifier check\", \"tree\": {\"sha\": \"0d6c40122a52fdb271280feec6d364b8be2e6dda\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/0d6c40122a52fdb271280feec6d364b8be2e6dda\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"70de324aa801eaf52e94c402d526a3849797c620\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/70de324aa801eaf52e94c402d526a3849797c620\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/70de324aa801eaf52e94c402d526a3849797c620\"}], \"stats\": {\"total\": 6, \"additions\": 5, \"deletions\": 1}, \"files\": [{\"sha\": \"d8baed9ec4cc652f5735665567d8bb50351c4f22\", \"filename\": \"include/fmt/core.h\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1/include%2Ffmt%2Fcore.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1/include%2Ffmt%2Fcore.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fcore.h?ref=6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"patch\": \"@@ -2819,7 +2819,8 @@ template <typename Handler> class specs_checker : public Handler {\\n   FMT_CONSTEXPR void on_sign(sign_t s) {\\n     require_numeric_argument();\\n     if (is_integral_type(arg_type_) && arg_type_ != type::int_type &&\\n-        arg_type_ != type::long_long_type && arg_type_ != type::char_type) {\\n+        arg_type_ != type::long_long_type && arg_type_ != type::int128_type &&\\n+        arg_type_ != type::char_type) {\\n       this->on_error(\\\"format specifier requires signed argument\\\");\\n     }\\n     Handler::on_sign(s);\"}, {\"sha\": \"b63445eac859a25a863f6b018b24eb1c679ba373\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 3, \"deletions\": 0, \"changes\": 3, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/6a1346405949ca1cf5befc5e83c6c66c86e4f9d1/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=6a1346405949ca1cf5befc5e83c6c66c86e4f9d1\", \"patch\": \"@@ -570,6 +570,9 @@ TEST(format_test, plus_sign) {\\n   EXPECT_THROW_MSG((void)fmt::format(runtime(\\\"{0:+}\\\"), 42ul), format_error,\\n                    \\\"format specifier requires signed argument\\\");\\n   EXPECT_EQ(\\\"+42\\\", fmt::format(\\\"{0:+}\\\", 42ll));\\n+#if FMT_USE_INT128\\n+  EXPECT_EQ(\\\"+42\\\", fmt::format(\\\"{0:+}\\\", __int128_t(42)));\\n+#endif\\n   EXPECT_THROW_MSG((void)fmt::format(runtime(\\\"{0:+}\\\"), 42ull), format_error,\\n                    \\\"format specifier requires signed argument\\\");\\n   EXPECT_EQ(\\\"+42\\\", fmt::format(\\\"{0:+}\\\", 42.0));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzYxMWNmMGIzYzY0NGQzM2I5ZDM0N2I4MjRiZjA2YmQ1OTRiZmE1NjQi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/611cf0b3c644d33b9d347b824bf06bd594bfa564", "content": "{\"sha\": \"611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjo2MTFjZjBiM2M2NDRkMzNiOWQzNDdiODI0YmYwNmJkNTk0YmZhNTY0\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-09-06T14:03:47Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-09-06T14:03:47Z\"}, \"message\": \"Format octal 0 as 0\", \"tree\": {\"sha\": \"4a293487f22212e4b8ca9be7b6c1ad6ff9bd1e8f\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/4a293487f22212e4b8ca9be7b6c1ad6ff9bd1e8f\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/611cf0b3c644d33b9d347b824bf06bd594bfa564/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"58a8f2f539cda653b8ee9e038507f221fed13b4e\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/58a8f2f539cda653b8ee9e038507f221fed13b4e\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/58a8f2f539cda653b8ee9e038507f221fed13b4e\"}], \"stats\": {\"total\": 3, \"additions\": 2, \"deletions\": 1}, \"files\": [{\"sha\": \"2c4cda3eb6a97af38232db5e66990d26f9518673\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/611cf0b3c644d33b9d347b824bf06bd594bfa564/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/611cf0b3c644d33b9d347b824bf06bd594bfa564/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"patch\": \"@@ -1441,7 +1441,7 @@ template <typename Range> class basic_writer {\\n \\n     void on_oct() {\\n       int num_digits = internal::count_digits<3>(abs_value);\\n-      if (specs.alt && specs.precision <= num_digits) {\\n+      if (specs.alt && specs.precision <= num_digits && abs_value != 0) {\\n         // Octal prefix '0' is counted as a digit, so only add it if precision\\n         // is not greater than the number of digits.\\n         prefix[prefix_size++] = '0';\"}, {\"sha\": \"1637bdd26bd3e1c16405b57c0a7f5388d4b6e1b4\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/611cf0b3c644d33b9d347b824bf06bd594bfa564/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/611cf0b3c644d33b9d347b824bf06bd594bfa564/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=611cf0b3c644d33b9d347b824bf06bd594bfa564\", \"patch\": \"@@ -1001,6 +1001,7 @@ TEST(FormatterTest, HashFlag) {\\n   EXPECT_EQ(\\\"0x42\\\", format(\\\"{0:#x}\\\", 0x42));\\n   EXPECT_EQ(\\\"0X42\\\", format(\\\"{0:#X}\\\", 0x42));\\n   EXPECT_EQ(\\\"-0x42\\\", format(\\\"{0:#x}\\\", -0x42));\\n+  EXPECT_EQ(\\\"0\\\", format(\\\"{0:#o}\\\", 0));\\n   EXPECT_EQ(\\\"042\\\", format(\\\"{0:#o}\\\", 042));\\n   EXPECT_EQ(\\\"-042\\\", format(\\\"{0:#o}\\\", -042));\\n   EXPECT_EQ(\\\"42\\\", format(\\\"{0:#}\\\", 42u));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzI4N2VhYWIzYjI3NzdkYWE1ZDBkMGNmNzJkOTc3MTk2YmE1NGVmYjci.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/287eaab3b2777daa5d0d0cf72d977196ba54efb7", "content": "{\"sha\": \"287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjoyODdlYWFiM2IyNzc3ZGFhNWQwZDBjZjcyZDk3NzE5NmJhNTRlZmI3\", \"commit\": {\"author\": {\"name\": \"Alexander Bolz\", \"email\": \"lt.morris.schaffer@googlemail.com\", \"date\": \"2019-02-26T19:38:03Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-02-26T22:16:34Z\"}, \"message\": \"Increment output iterator in basic_writer::write for character types (#1056)\", \"tree\": {\"sha\": \"337dd2df72fca461ac54638d73e4694033addf17\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/337dd2df72fca461ac54638d73e4694033addf17\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/287eaab3b2777daa5d0d0cf72d977196ba54efb7/comments\", \"author\": {\"login\": \"abolz\", \"id\": 1213085, \"node_id\": \"MDQ6VXNlcjEyMTMwODU=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/1213085?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/abolz\", \"html_url\": \"https://github.com/abolz\", \"followers_url\": \"https://api.github.com/users/abolz/followers\", \"following_url\": \"https://api.github.com/users/abolz/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/abolz/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/abolz/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/abolz/subscriptions\", \"organizations_url\": \"https://api.github.com/users/abolz/orgs\", \"repos_url\": \"https://api.github.com/users/abolz/repos\", \"events_url\": \"https://api.github.com/users/abolz/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/abolz/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"a97757736b8e4cf7ae5a911b9455fdcbae76563a\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/a97757736b8e4cf7ae5a911b9455fdcbae76563a\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/a97757736b8e4cf7ae5a911b9455fdcbae76563a\"}], \"stats\": {\"total\": 30, \"additions\": 28, \"deletions\": 2}, \"files\": [{\"sha\": \"44584c1094abdb2d5b033d06f34b13cc748d6cd8\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 2, \"changes\": 8, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/287eaab3b2777daa5d0d0cf72d977196ba54efb7/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/287eaab3b2777daa5d0d0cf72d977196ba54efb7/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"patch\": \"@@ -2755,10 +2755,14 @@ template <typename Range> class basic_writer {\\n   void write(long double value) { write_double(value, format_specs()); }\\n \\n   /** Writes a character to the buffer. */\\n-  void write(char value) { *reserve(1) = value; }\\n+  void write(char value) {\\n+    auto&& it = reserve(1);\\n+    *it++ = value;\\n+  }\\n   void write(wchar_t value) {\\n     static_assert(std::is_same<char_type, wchar_t>::value, \\\"\\\");\\n-    *reserve(1) = value;\\n+    auto&& it = reserve(1);\\n+    *it++ = value;\\n   }\\n \\n   /**\"}, {\"sha\": \"822557b7f827498a07710b7cf2cee3bb612eb25c\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 22, \"deletions\": 0, \"changes\": 22, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/287eaab3b2777daa5d0d0cf72d977196ba54efb7/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/287eaab3b2777daa5d0d0cf72d977196ba54efb7/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=287eaab3b2777daa5d0d0cf72d977196ba54efb7\", \"patch\": \"@@ -2040,6 +2040,17 @@ TEST(FormatTest, FormatToN) {\\n   EXPECT_EQ(6u, result.size);\\n   EXPECT_EQ(buffer + 3, result.out);\\n   EXPECT_EQ(\\\"foox\\\", fmt::string_view(buffer, 4));\\n+  buffer[0] = 'x';\\n+  buffer[1] = 'x';\\n+  buffer[2] = 'x';\\n+  result = fmt::format_to_n(buffer, 3, \\\"{}\\\", 'A');\\n+  EXPECT_EQ(1u, result.size);\\n+  EXPECT_EQ(buffer + 1, result.out);\\n+  EXPECT_EQ(\\\"Axxx\\\", fmt::string_view(buffer, 4));\\n+  result = fmt::format_to_n(buffer, 3, \\\"{}{} \\\", 'B', 'C');\\n+  EXPECT_EQ(3u, result.size);\\n+  EXPECT_EQ(buffer + 3, result.out);\\n+  EXPECT_EQ(\\\"BC x\\\", fmt::string_view(buffer, 4));\\n }\\n \\n TEST(FormatTest, WideFormatToN) {\\n@@ -2049,6 +2060,17 @@ TEST(FormatTest, WideFormatToN) {\\n   EXPECT_EQ(5u, result.size);\\n   EXPECT_EQ(buffer + 3, result.out);\\n   EXPECT_EQ(L\\\"123x\\\", fmt::wstring_view(buffer, 4));\\n+  buffer[0] = L'x';\\n+  buffer[1] = L'x';\\n+  buffer[2] = L'x';\\n+  result = fmt::format_to_n(buffer, 3, L\\\"{}\\\", L'A');\\n+  EXPECT_EQ(1u, result.size);\\n+  EXPECT_EQ(buffer + 1, result.out);\\n+  EXPECT_EQ(L\\\"Axxx\\\", fmt::wstring_view(buffer, 4));\\n+  result = fmt::format_to_n(buffer, 3, L\\\"{}{} \\\", L'B', L'C');\\n+  EXPECT_EQ(3u, result.size);\\n+  EXPECT_EQ(buffer + 3, result.out);\\n+  EXPECT_EQ(L\\\"BC x\\\", fmt::wstring_view(buffer, 4));\\n }\\n \\n #if FMT_USE_CONSTEXPR\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzBjYzczZWJmNzllYzM5YmE3NGYzZDMxYTc2YzBhY2IyZGY4MjQ5MDgi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/0cc73ebf79ec39ba74f3d31a76c0acb2df824908", "content": "{\"sha\": \"0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjowY2M3M2ViZjc5ZWMzOWJhNzRmM2QzMWE3NmMwYWNiMmRmODI0OTA4\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-07-30T14:16:15Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-08-06T14:38:18Z\"}, \"message\": \"Report error on missing named argument (#1796)\", \"tree\": {\"sha\": \"22ca788a7577b81acfbe4ac6527b8fa432513d9a\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/22ca788a7577b81acfbe4ac6527b8fa432513d9a\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/0cc73ebf79ec39ba74f3d31a76c0acb2df824908/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"33efc3c94fb8eea56dbf6067d7957a8cee0c9a8d\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/33efc3c94fb8eea56dbf6067d7957a8cee0c9a8d\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/33efc3c94fb8eea56dbf6067d7957a8cee0c9a8d\"}], \"stats\": {\"total\": 5, \"additions\": 3, \"deletions\": 2}, \"files\": [{\"sha\": \"e83800cef69a85cecd4e82f34e6dab60c98290be\", \"filename\": \"include/fmt/core.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/0cc73ebf79ec39ba74f3d31a76c0acb2df824908/include%2Ffmt%2Fcore.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/0cc73ebf79ec39ba74f3d31a76c0acb2df824908/include%2Ffmt%2Fcore.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fcore.h?ref=0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"patch\": \"@@ -1713,7 +1713,7 @@ template <typename Context> class basic_format_args {\\n   }\\n \\n   template <typename Char> int get_id(basic_string_view<Char> name) const {\\n-    if (!has_named_args()) return {};\\n+    if (!has_named_args()) return -1;\\n     const auto& named_args =\\n         (is_packed() ? values_[-1] : args_[-1].value_).named_args;\\n     for (size_t i = 0; i < named_args.size; ++i) {\"}, {\"sha\": \"2a25566c693e92a689f72c5b357fd9343f5452de\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/0cc73ebf79ec39ba74f3d31a76c0acb2df824908/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/0cc73ebf79ec39ba74f3d31a76c0acb2df824908/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=0cc73ebf79ec39ba74f3d31a76c0acb2df824908\", \"patch\": \"@@ -543,7 +543,6 @@ TEST(FormatterTest, ManyArgs) {\\n TEST(FormatterTest, NamedArg) {\\n   EXPECT_EQ(\\\"1/a/A\\\", format(\\\"{_1}/{a_}/{A_}\\\", fmt::arg(\\\"a_\\\", 'a'),\\n                             fmt::arg(\\\"A_\\\", \\\"A\\\"), fmt::arg(\\\"_1\\\", 1)));\\n-  EXPECT_THROW_MSG(format(\\\"{a}\\\"), format_error, \\\"argument not found\\\");\\n   EXPECT_EQ(\\\" -42\\\", format(\\\"{0:{width}}\\\", -42, fmt::arg(\\\"width\\\", 4)));\\n   EXPECT_EQ(\\\"st\\\", format(\\\"{0:.{precision}}\\\", \\\"str\\\", fmt::arg(\\\"precision\\\", 2)));\\n   EXPECT_EQ(\\\"1 2\\\", format(\\\"{} {two}\\\", 1, fmt::arg(\\\"two\\\", 2)));\\n@@ -553,6 +552,8 @@ TEST(FormatterTest, NamedArg) {\\n                          fmt::arg(\\\"i\\\", 0), fmt::arg(\\\"j\\\", 0), fmt::arg(\\\"k\\\", 0),\\n                          fmt::arg(\\\"l\\\", 0), fmt::arg(\\\"m\\\", 0), fmt::arg(\\\"n\\\", 0),\\n                          fmt::arg(\\\"o\\\", 0), fmt::arg(\\\"p\\\", 0)));\\n+  EXPECT_THROW_MSG(format(\\\"{a}\\\"), format_error, \\\"argument not found\\\");\\n+  EXPECT_THROW_MSG(format(\\\"{a}\\\", 42), format_error, \\\"argument not found\\\");\\n }\\n \\n TEST(FormatterTest, AutoArgIndex) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzL2ZjNmUwZmU5OTIxNTY5MzViZmI2NmJiMjEyMWM2MmVlODQ0Njc1OGUi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/fc6e0fe992156935bfb66bb2121c62ee8446758e", "content": "{\"sha\": \"fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjpmYzZlMGZlOTkyMTU2OTM1YmZiNjZiYjIxMjFjNjJlZTg0NDY3NThl\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2018-06-07T16:41:40Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2018-06-07T16:41:40Z\"}, \"message\": \"Fix FP formatting to a non-back_insert_iterator with sign & numeric alignment (#756)\", \"tree\": {\"sha\": \"9dd45fbc627e67c44afadc03829b3938a29f5de8\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/9dd45fbc627e67c44afadc03829b3938a29f5de8\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/fc6e0fe992156935bfb66bb2121c62ee8446758e/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"6322b47e60de9849f469348df307dc50d65c127f\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/6322b47e60de9849f469348df307dc50d65c127f\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/6322b47e60de9849f469348df307dc50d65c127f\"}], \"stats\": {\"total\": 9, \"additions\": 8, \"deletions\": 1}, \"files\": [{\"sha\": \"fe2a140b3910a5d4036d801941338e7bc81c1a34\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 1, \"changes\": 3, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/fc6e0fe992156935bfb66bb2121c62ee8446758e/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/fc6e0fe992156935bfb66bb2121c62ee8446758e/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"patch\": \"@@ -2927,7 +2927,8 @@ void basic_writer<Range>::write_double(T value, const format_specs &spec) {\\n   align_spec as = spec;\\n   if (spec.align() == ALIGN_NUMERIC) {\\n     if (sign) {\\n-      *reserve(1) = sign;\\n+      auto &&it = reserve(1);\\n+      *it++ = sign;\\n       sign = 0;\\n       if (as.width_)\\n         --as.width_;\"}, {\"sha\": \"769e57189b1fff10b829a59acaf292a4c1db0a94\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 6, \"deletions\": 0, \"changes\": 6, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/fc6e0fe992156935bfb66bb2121c62ee8446758e/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/fc6e0fe992156935bfb66bb2121c62ee8446758e/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=fc6e0fe992156935bfb66bb2121c62ee8446758e\", \"patch\": \"@@ -232,6 +232,12 @@ TEST(FormatToTest, Format) {\\n   EXPECT_EQ(\\\"part1part2\\\", s);\\n }\\n \\n+TEST(FormatToTest, FormatToNonbackInsertIteratorWithSignAndNumericAlignment) {\\n+  char buffer[16] = {};\\n+  fmt::format_to(buffer, \\\"{: =+}\\\", 42.0);\\n+  EXPECT_STREQ(\\\"+42\\\", buffer);\\n+}\\n+\\n TEST(FormatterTest, Escape) {\\n   EXPECT_EQ(\\\"{\\\", format(\\\"{{\\\"));\\n   EXPECT_EQ(\\\"before {\\\", format(\\\"before {{\\\"));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzk2YzE4YjI2YzI4YmJkYjgzMDViNzliZTRlYWNmYjI4ZWU0YWE4NzIi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/96c18b26c28bbdb8305b79be4eacfb28ee4aa872", "content": "{\"sha\": \"96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjo5NmMxOGIyNmMyOGJiZGI4MzA1Yjc5YmU0ZWFjZmIyOGVlNGFhODcy\", \"commit\": {\"author\": {\"name\": \"rimathia\", \"email\": \"rimathia@users.noreply.github.com\", \"date\": \"2020-05-15T13:45:51Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2020-05-15T13:45:51Z\"}, \"message\": \"make plus flag for printf not be ignored for char argument (#1683)\\n\\n* make plus flag for printf not be ignored for char argument\\r\\n\\r\\n* clarify overwriting of alignment specifiers for printf with char argument\", \"tree\": {\"sha\": \"a26ba75ba1e69c9f52b96b8543b8c6dab9f7f113\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/a26ba75ba1e69c9f52b96b8543b8c6dab9f7f113\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJevp0PCRBK7hj4Ov3rIwAAdHIIAGvd9ZKzoFn5uMbu4mUhNyKc\\na7RE8PNw6ULqU7SzVKZj/wfyVoWgQHROMJyljTn0zWPV5XD4CroQKmcGrmMQcaAT\\n8sKwldTqNmNhgSCwCl1DsbgtZ/9dUFnCWTBC6FqO16x4R1TpeyU1ZPGwPobIq+hR\\n3MrgJZTKRvXLefTMSrIfO/f7mLVXKO3T5OqLe8BDku4OPDYePQuc+dKFs2hK2OvJ\\n25lyzyO1+XL3FYIdFM4awcNvzRPowh8gJZA+AQnT9Skn4ee1yZO9sUuMHdBGveQI\\nUTN0l9++wMt0SmNqcNDytIKAJUhQb+VSBXRxUyFXsgT3mrTaFERmCgERzZbaOVo=\\n=OMq5\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree a26ba75ba1e69c9f52b96b8543b8c6dab9f7f113\\nparent 981b517ccf2d91bf3bf52c518ac43710b57b5e17\\nauthor rimathia <rimathia@users.noreply.github.com> 1589550351 +0200\\ncommitter GitHub <noreply@github.com> 1589550351 -0700\\n\\nmake plus flag for printf not be ignored for char argument (#1683)\\n\\n* make plus flag for printf not be ignored for char argument\\r\\n\\r\\n* clarify overwriting of alignment specifiers for printf with char argument\"}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/96c18b26c28bbdb8305b79be4eacfb28ee4aa872/comments\", \"author\": {\"login\": \"rimathia\", \"id\": 7736877, \"node_id\": \"MDQ6VXNlcjc3MzY4Nzc=\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/7736877?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/rimathia\", \"html_url\": \"https://github.com/rimathia\", \"followers_url\": \"https://api.github.com/users/rimathia/followers\", \"following_url\": \"https://api.github.com/users/rimathia/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/rimathia/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/rimathia/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/rimathia/subscriptions\", \"organizations_url\": \"https://api.github.com/users/rimathia/orgs\", \"repos_url\": \"https://api.github.com/users/rimathia/repos\", \"events_url\": \"https://api.github.com/users/rimathia/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/rimathia/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"981b517ccf2d91bf3bf52c518ac43710b57b5e17\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/981b517ccf2d91bf3bf52c518ac43710b57b5e17\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/981b517ccf2d91bf3bf52c518ac43710b57b5e17\"}], \"stats\": {\"total\": 9, \"additions\": 8, \"deletions\": 1}, \"files\": [{\"sha\": \"951825ed092ec4e30f2fe0bf3609b9bdbfc2e7e3\", \"filename\": \"include/fmt/printf.h\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 1, \"changes\": 5, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/96c18b26c28bbdb8305b79be4eacfb28ee4aa872/include%2Ffmt%2Fprintf.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/96c18b26c28bbdb8305b79be4eacfb28ee4aa872/include%2Ffmt%2Fprintf.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fprintf.h?ref=96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"patch\": \"@@ -257,7 +257,10 @@ class printf_arg_formatter : public detail::arg_formatter_base<Range> {\\n         return (*this)(static_cast<int>(value));\\n       fmt_specs.sign = sign::none;\\n       fmt_specs.alt = false;\\n-      fmt_specs.align = align::right;\\n+      // align::numeric needs to be overwritten here since the '0' flag is\\n+      // ignored for non-numeric types\\n+      if (fmt_specs.align == align::none || fmt_specs.align == align::numeric)\\n+        fmt_specs.align = align::right;\\n       return base::operator()(value);\\n     } else {\\n       return base::operator()(value);\"}, {\"sha\": \"e556ef36d27f644df03bddc7cb9747c32abfc3ff\", \"filename\": \"test/printf-test.cc\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/96c18b26c28bbdb8305b79be4eacfb28ee4aa872/test%2Fprintf-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/96c18b26c28bbdb8305b79be4eacfb28ee4aa872/test%2Fprintf-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fprintf-test.cc?ref=96c18b26c28bbdb8305b79be4eacfb28ee4aa872\", \"patch\": \"@@ -156,6 +156,10 @@ TEST(PrintfTest, PlusFlag) {\\n TEST(PrintfTest, MinusFlag) {\\n   EXPECT_PRINTF(\\\"abc  \\\", \\\"%-5s\\\", \\\"abc\\\");\\n   EXPECT_PRINTF(\\\"abc  \\\", \\\"%0--5s\\\", \\\"abc\\\");\\n+\\n+  EXPECT_PRINTF(\\\"7    \\\", \\\"%-5d\\\", 7);\\n+  EXPECT_PRINTF(\\\"97   \\\", \\\"%-5hhi\\\", 'a');\\n+  EXPECT_PRINTF(\\\"a    \\\", \\\"%-5c\\\", 'a');\\n }\\n \\n TEST(PrintfTest, SpaceFlag) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzI3OWQ2OThlMWIzN2YzZjBhOWI1YzIxYjEyMTk4ODk0ZDMxYzM4MWQi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/279d698e1b37f3f0a9b5c21b12198894d31c381d", "content": "{\"sha\": \"279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjoyNzlkNjk4ZTFiMzdmM2YwYTliNWMyMWIxMjE5ODg5NGQzMWMzODFk\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-08-03T17:51:42Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-08-03T17:51:42Z\"}, \"message\": \"Fix handling of default alignmment with locale (#1801)\", \"tree\": {\"sha\": \"90cbc8934f3667552580c9e4d20e771ff72a56e4\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/90cbc8934f3667552580c9e4d20e771ff72a56e4\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/279d698e1b37f3f0a9b5c21b12198894d31c381d/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"76cfb50b2d8df5b0193744091f2bc3c8b4f87eaa\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/76cfb50b2d8df5b0193744091f2bc3c8b4f87eaa\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/76cfb50b2d8df5b0193744091f2bc3c8b4f87eaa\"}], \"stats\": {\"total\": 12, \"additions\": 10, \"deletions\": 2}, \"files\": [{\"sha\": \"aaea683b0f326f22332a1d4de95f03180cfd124f\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/279d698e1b37f3f0a9b5c21b12198894d31c381d/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/279d698e1b37f3f0a9b5c21b12198894d31c381d/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"patch\": \"@@ -1613,8 +1613,11 @@ template <typename OutputIt, typename Char, typename UInt> struct int_writer {\\n                               make_checked(p, s.size()));\\n     }\\n     if (prefix_size != 0) p[-1] = static_cast<Char>('-');\\n-    out = write(out, basic_string_view<Char>(buffer.data(), buffer.size()),\\n-                specs);\\n+    using iterator = remove_reference_t<decltype(reserve(out, 0))>;\\n+    auto data = buffer.data();\\n+    out = write_padded<align::right>(out, specs, size, size, [=](iterator it) {\\n+      return copy_str<Char>(data, data + size, it);\\n+    });\\n   }\\n \\n   void on_chr() { *out++ = static_cast<Char>(abs_value); }\"}, {\"sha\": \"0e05d148e640621b1d64c4800e63a7be283f4fb6\", \"filename\": \"test/locale-test.cc\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/279d698e1b37f3f0a9b5c21b12198894d31c381d/test%2Flocale-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/279d698e1b37f3f0a9b5c21b12198894d31c381d/test%2Flocale-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Flocale-test.cc?ref=279d698e1b37f3f0a9b5c21b12198894d31c381d\", \"patch\": \"@@ -70,6 +70,11 @@ TEST(LocaleTest, Format) {\\n             fmt::format(small_grouping_loc, \\\"{:L}\\\", max_value<uint32_t>()));\\n }\\n \\n+TEST(LocaleTest, FormatDetaultAlign) {\\n+  std::locale special_grouping_loc(std::locale(), new special_grouping<char>());\\n+  EXPECT_EQ(\\\"  12,345\\\", fmt::format(special_grouping_loc, \\\"{:8L}\\\", 12345));\\n+}\\n+\\n TEST(LocaleTest, WFormat) {\\n   std::locale loc(std::locale(), new numpunct<wchar_t>());\\n   EXPECT_EQ(L\\\"1234567\\\", fmt::format(std::locale(), L\\\"{:L}\\\", 1234567));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzL2MxZDQzMGU2MWFiMzA2ZTBlMWQ0NTRmZWE2ZTA3YjRmNjY2NjdhNjUi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/c1d430e61ab306e0e1d454fea6e07b4f66667a65", "content": "{\"sha\": \"c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjpjMWQ0MzBlNjFhYjMwNmUwZTFkNDU0ZmVhNmUwN2I0ZjY2NjY3YTY1\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-05-04T23:33:17Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-05-05T00:52:20Z\"}, \"message\": \"Improve handling of negative durations\", \"tree\": {\"sha\": \"b1b7a28d7ebfcbff3bf6242315529a301141205b\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/b1b7a28d7ebfcbff3bf6242315529a301141205b\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/c1d430e61ab306e0e1d454fea6e07b4f66667a65/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"38a85502ed824d34a751ab4a122005a9d4454fd3\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/38a85502ed824d34a751ab4a122005a9d4454fd3\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/38a85502ed824d34a751ab4a122005a9d4454fd3\"}], \"stats\": {\"total\": 17, \"additions\": 12, \"deletions\": 5}, \"files\": [{\"sha\": \"39369addd7ce01af49965bc71de202b60b766214\", \"filename\": \"include/fmt/chrono.h\", \"status\": \"modified\", \"additions\": 8, \"deletions\": 5, \"changes\": 13, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/c1d430e61ab306e0e1d454fea6e07b4f66667a65/include%2Ffmt%2Fchrono.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/c1d430e61ab306e0e1d454fea6e07b4f66667a65/include%2Ffmt%2Fchrono.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fchrono.h?ref=c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"patch\": \"@@ -430,11 +430,14 @@ struct chrono_formatter {\\n \\n   explicit chrono_formatter(FormatContext& ctx, OutputIt o,\\n                             std::chrono::duration<Rep, Period> d)\\n-      : context(ctx),\\n-        out(o),\\n-        val(d.count()),\\n-        s(std::chrono::duration_cast<seconds>(d)),\\n-        ms(std::chrono::duration_cast<milliseconds>(d - s)) {}\\n+      : context(ctx), out(o), val(d.count()) {\\n+    if (d.count() < 0) {\\n+      d = -d;\\n+      *out++ = '-';\\n+    }\\n+    s = std::chrono::duration_cast<seconds>(d);\\n+    ms = std::chrono::duration_cast<milliseconds>(d - s);\\n+  }\\n \\n   int hour() const { return to_int(mod((s.count() / 3600), 24)); }\\n \"}, {\"sha\": \"573606d8dbdfd5ff0aa482b43437b82d7446d783\", \"filename\": \"test/chrono-test.cc\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 0, \"changes\": 4, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/c1d430e61ab306e0e1d454fea6e07b4f66667a65/test%2Fchrono-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/c1d430e61ab306e0e1d454fea6e07b4f66667a65/test%2Fchrono-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fchrono-test.cc?ref=c1d430e61ab306e0e1d454fea6e07b4f66667a65\", \"patch\": \"@@ -310,4 +310,8 @@ TEST(ChronoTest, LargeDuration) {\\n   EXPECT_EQ(\\\"40\\\", fmt::format(\\\"{:%S}\\\", std::chrono::duration<double>(1e20)));\\n }\\n \\n+TEST(ChronoTest, NegativeDuration) {\\n+  EXPECT_EQ(\\\"-00:01\\\", fmt::format(\\\"{:%M:%S}\\\", std::chrono::duration<double>(-1)));\\n+}\\n+\\n #endif  // FMT_STATIC_THOUSANDS_SEPARATOR\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzL2NkNzIwMmUwMzk5Njc3OTQyYTU0MjhhN2RiOWRlYzFkM2M4YjVjNDUi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/cd7202e0399677942a5428a7db9dec1d3c8b5c45", "content": "{\"sha\": \"cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"node_id\": \"C_kwDOAGurStoAKGNkNzIwMmUwMzk5Njc3OTQyYTU0MjhhN2RiOWRlYzFkM2M4YjVjNDU\", \"commit\": {\"author\": {\"name\": \"Vladislav Shchapov\", \"email\": \"vladislav@shchapov.ru\", \"date\": \"2022-10-16T21:04:55Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2022-10-16T21:04:55Z\"}, \"message\": \"Fix overflow error (#3143)\\n\\nSigned-off-by: Vladislav Shchapov <vladislav@shchapov.ru>\\r\\n\\r\\nSigned-off-by: Vladislav Shchapov <vladislav@shchapov.ru>\", \"tree\": {\"sha\": \"8caf8dba88949a1b227fadb175e2b53a8a307421\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/8caf8dba88949a1b227fadb175e2b53a8a307421\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJjTHH3CRBK7hj4Ov3rIwAABYgIABREvaJriPWbWu4nSoOD2B4M\\nXpWRotMOleP+qETfiDivV+LDtV1V0yuVbPWEG6KJgu706pZnaGKKAyBYT+c0IHmJ\\n9Pvndqq7J9TyyVTOJWhhI4pDKN3i8ii0zNqOTLXdYe8hFp0dKuc6qicTXBEWMf2Z\\nxzjvUEg0/Fmu/3mmo1bGAdClYMeqWTxk0ElJZgu6hKqoUQwjkLzUiQRiLiXfD7Vj\\nVYOnZA61U93d9GVxQJkMIslOW5abZuBARhvtbYYHTaaE8BhWyHrBYnZVTEs329o3\\nayqU79FFvXuJFEefV/+SCXV9/H6pC7WH1ltoW067N9G58UDSZVhVz6uJUUJa9qU=\\n=mtgw\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree 8caf8dba88949a1b227fadb175e2b53a8a307421\\nparent 51d3685efe0eb8a44656f9fd5dac6a04f4e58259\\nauthor Vladislav Shchapov <vladislav@shchapov.ru> 1665954295 +0500\\ncommitter GitHub <noreply@github.com> 1665954295 -0700\\n\\nFix overflow error (#3143)\\n\\nSigned-off-by: Vladislav Shchapov <vladislav@shchapov.ru>\\r\\n\\r\\nSigned-off-by: Vladislav Shchapov <vladislav@shchapov.ru>\"}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/cd7202e0399677942a5428a7db9dec1d3c8b5c45/comments\", \"author\": {\"login\": \"phprus\", \"id\": 382460, \"node_id\": \"MDQ6VXNlcjM4MjQ2MA==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/382460?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/phprus\", \"html_url\": \"https://github.com/phprus\", \"followers_url\": \"https://api.github.com/users/phprus/followers\", \"following_url\": \"https://api.github.com/users/phprus/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/phprus/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/phprus/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/phprus/subscriptions\", \"organizations_url\": \"https://api.github.com/users/phprus/orgs\", \"repos_url\": \"https://api.github.com/users/phprus/repos\", \"events_url\": \"https://api.github.com/users/phprus/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/phprus/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"51d3685efe0eb8a44656f9fd5dac6a04f4e58259\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/51d3685efe0eb8a44656f9fd5dac6a04f4e58259\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/51d3685efe0eb8a44656f9fd5dac6a04f4e58259\"}], \"stats\": {\"total\": 11, \"additions\": 10, \"deletions\": 1}, \"files\": [{\"sha\": \"46a93fdee2da97d2e7668cf95e7c40a7932e6759\", \"filename\": \"include/fmt/chrono.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/cd7202e0399677942a5428a7db9dec1d3c8b5c45/include%2Ffmt%2Fchrono.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/cd7202e0399677942a5428a7db9dec1d3c8b5c45/include%2Ffmt%2Fchrono.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fchrono.h?ref=cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"patch\": \"@@ -1838,7 +1838,7 @@ struct chrono_formatter {\\n       } else {\\n         write(second(), 2);\\n         write_fractional_seconds<char_type>(\\n-            out, std::chrono::duration<Rep, Period>(val));\\n+            out, std::chrono::duration<rep, Period>(val));\\n       }\\n       return;\\n     }\"}, {\"sha\": \"d53ad56b8a4e499a117a77c71d7a1fe3f293c015\", \"filename\": \"test/chrono-test.cc\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 0, \"changes\": 9, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/cd7202e0399677942a5428a7db9dec1d3c8b5c45/test%2Fchrono-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/cd7202e0399677942a5428a7db9dec1d3c8b5c45/test%2Fchrono-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fchrono-test.cc?ref=cd7202e0399677942a5428a7db9dec1d3c8b5c45\", \"patch\": \"@@ -642,6 +642,15 @@ TEST(chrono_test, cpp20_duration_subsecond_support) {\\n                         std::chrono::duration<long long, std::ratio<1, 7>>(1)),\\n             \\\"00.142857\\\");\\n \\n+  EXPECT_EQ(fmt::format(\\\"{:%S}\\\",\\n+                        std::chrono::duration<char, std::ratio<1, 100>>(0x80)),\\n+            \\\"-01.28\\\");\\n+\\n+  EXPECT_EQ(\\n+      fmt::format(\\\"{:%M:%S}\\\",\\n+                  std::chrono::duration<short, std::ratio<1, 100>>(0x8000)),\\n+      \\\"-05:27.68\\\");\\n+\\n   // Check that floating point seconds with ratio<1,1> are printed.\\n   EXPECT_EQ(fmt::format(\\\"{:%S}\\\", std::chrono::duration<double>{1.5}),\\n             \\\"01.500000\\\");\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzk3MWZiNTg0YzNlYTU0OGMxMmRjZmE4MTNiMGJhZmI5NGUxYzBmZGUi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/971fb584c3ea548c12dcfa813b0bafb94e1c0fde", "content": "{\"sha\": \"971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjo5NzFmYjU4NGMzZWE1NDhjMTJkY2ZhODEzYjBiYWZiOTRlMWMwZmRl\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2017-12-09T16:15:13Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2017-12-09T16:15:13Z\"}, \"message\": \"Allow mixing named and automatic arguments\", \"tree\": {\"sha\": \"c16ff14f23bc5f173079f1b1da27ff890c29d07f\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/c16ff14f23bc5f173079f1b1da27ff890c29d07f\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/971fb584c3ea548c12dcfa813b0bafb94e1c0fde/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7cea16380939074d00df0aa30ccdea07de6a9497\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/7cea16380939074d00df0aa30ccdea07de6a9497\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/7cea16380939074d00df0aa30ccdea07de6a9497\"}], \"stats\": {\"total\": 11, \"additions\": 5, \"deletions\": 6}, \"files\": [{\"sha\": \"93c0ed1afc23b82e76228b4154e501622519aaba\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 6, \"changes\": 10, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/971fb584c3ea548c12dcfa813b0bafb94e1c0fde/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/971fb584c3ea548c12dcfa813b0bafb94e1c0fde/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"patch\": \"@@ -3001,12 +3001,10 @@ struct dynamic_formatter {\\n template <typename Char>\\n inline typename basic_context<Char>::format_arg\\n   basic_context<Char>::get_arg(basic_string_view<Char> name) {\\n-  if (this->check_no_auto_index()) {\\n-    map_.init(this->args());\\n-    if (const format_arg *arg = map_.find(name))\\n-      return *arg;\\n-    this->on_error(\\\"argument not found\\\");\\n-  }\\n+  map_.init(this->args());\\n+  if (const format_arg *arg = map_.find(name))\\n+    return *arg;\\n+  this->on_error(\\\"argument not found\\\");\\n   return format_arg();\\n }\\n \"}, {\"sha\": \"916dcc47a683fb7a7f331abbc41fdd9bd5f71dfd\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/971fb584c3ea548c12dcfa813b0bafb94e1c0fde/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/971fb584c3ea548c12dcfa813b0bafb94e1c0fde/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=971fb584c3ea548c12dcfa813b0bafb94e1c0fde\", \"patch\": \"@@ -488,6 +488,7 @@ TEST(FormatterTest, NamedArg) {\\n   EXPECT_THROW_MSG(format(\\\"{a}\\\"), format_error, \\\"argument not found\\\");\\n   EXPECT_EQ(\\\" -42\\\", format(\\\"{0:{width}}\\\", -42, fmt::arg(\\\"width\\\", 4)));\\n   EXPECT_EQ(\\\"st\\\", format(\\\"{0:.{precision}}\\\", \\\"str\\\", fmt::arg(\\\"precision\\\", 2)));\\n+  EXPECT_EQ(\\\"1 2\\\", format(\\\"{} {two}\\\", 1, fmt::arg(\\\"two\\\", 2)));\\n }\\n \\n TEST(FormatterTest, AutoArgIndex) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzL2U2YjM3YjRhZmYxYTY3M2NiNzM1YjliMjg3YWE2MzcxNDIxMjBmNmQi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/e6b37b4aff1a673cb735b9b287aa637142120f6d", "content": "{\"sha\": \"e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjplNmIzN2I0YWZmMWE2NzNjYjczNWI5YjI4N2FhNjM3MTQyMTIwZjZk\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-12-22T00:33:34Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2019-12-22T00:33:34Z\"}, \"message\": \"Handle block boundaries in utf8_to_utf16\", \"tree\": {\"sha\": \"c7a120ac069b86c9746da935db07f8709035b465\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/c7a120ac069b86c9746da935db07f8709035b465\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/e6b37b4aff1a673cb735b9b287aa637142120f6d/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"8cf4c52068054661a9b2fdeae5b2baa25fc9d175\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/8cf4c52068054661a9b2fdeae5b2baa25fc9d175\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/8cf4c52068054661a9b2fdeae5b2baa25fc9d175\"}], \"stats\": {\"total\": 8, \"additions\": 6, \"deletions\": 2}, \"files\": [{\"sha\": \"ec5da1db97f031da4678d65746a97a2ef5de6093\", \"filename\": \"include/fmt/format-inl.h\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 2, \"changes\": 7, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/e6b37b4aff1a673cb735b9b287aa637142120f6d/include%2Ffmt%2Fformat-inl.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/e6b37b4aff1a673cb735b9b287aa637142120f6d/include%2Ffmt%2Fformat-inl.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat-inl.h?ref=e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"patch\": \"@@ -1292,9 +1292,12 @@ FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {\\n     for (auto end = p + s.size() - block_size + 1; p < end;) p = transcode(p);\\n   }\\n   if (auto num_chars_left = s.data() + s.size() - p) {\\n-    char buf[4] = {};\\n+    char buf[2 * block_size - 1] = {};\\n     memcpy(buf, p, num_chars_left);\\n-    transcode(buf);\\n+    p = buf;\\n+    do {\\n+      p = transcode(p);\\n+    } while (p - buf < num_chars_left);\\n   }\\n   buffer_.push_back(0);\\n }\"}, {\"sha\": \"050a442e54ce788f79e84e3efc3b4a15291c3efb\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/e6b37b4aff1a673cb735b9b287aa637142120f6d/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/e6b37b4aff1a673cb735b9b287aa637142120f6d/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=e6b37b4aff1a673cb735b9b287aa637142120f6d\", \"patch\": \"@@ -410,6 +410,7 @@ TEST(UtilTest, UTF8ToUTF16) {\\n                    \\\"invalid utf8\\\");\\n   EXPECT_THROW_MSG(fmt::internal::utf8_to_utf16(fmt::string_view(\\\"\\u043b\\\", 1)),\\n                    std::runtime_error, \\\"invalid utf8\\\");\\n+  EXPECT_EQ(L\\\"123456\\\", fmt::internal::utf8_to_utf16(\\\"123456\\\").str());\\n }\\n \\n TEST(UtilTest, UTF8ToUTF16EmptyString) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzZiN2JmZWQ0MGM1NTljMDZkMmE0ZTA3NDQyN2RiYzI0ODE5YmQ0NDci.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/6b7bfed40c559c06d2a4e074427dbc24819bd447", "content": "{\"sha\": \"6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjo2YjdiZmVkNDBjNTU5YzA2ZDJhNGUwNzQ0MjdkYmMyNDgxOWJkNDQ3\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2020-11-04T03:19:10Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2020-11-04T03:19:10Z\"}, \"message\": \"Fix fallback float formatter at assymetric bounds (#1976)\", \"tree\": {\"sha\": \"222a776278c421f609363c9baa8d48a2ed56f649\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/222a776278c421f609363c9baa8d48a2ed56f649\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/6b7bfed40c559c06d2a4e074427dbc24819bd447/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"bcab36da3f593270fe41f1d490bc06091dc02eba\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/bcab36da3f593270fe41f1d490bc06091dc02eba\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/bcab36da3f593270fe41f1d490bc06091dc02eba\"}], \"stats\": {\"total\": 4, \"additions\": 3, \"deletions\": 1}, \"files\": [{\"sha\": \"9046de91f07c2426474e376c1d4c35cfef4c86fe\", \"filename\": \"include/fmt/format-inl.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/6b7bfed40c559c06d2a4e074427dbc24819bd447/include%2Ffmt%2Fformat-inl.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/6b7bfed40c559c06d2a4e074427dbc24819bd447/include%2Ffmt%2Fformat-inl.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat-inl.h?ref=6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"patch\": \"@@ -2332,7 +2332,7 @@ void fallback_format(Double d, int num_digits, bool binary32, buffer<char>& buf,\\n       upper = &upper_store;\\n     }\\n     denominator.assign_pow10(exp10);\\n-    denominator <<= 1;\\n+    denominator <<= shift;\\n   } else if (exp10 < 0) {\\n     numerator.assign_pow10(-exp10);\\n     lower.assign(numerator);\"}, {\"sha\": \"1f9a208fe33f7704c09bbff4b83b0fa4eede274e\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 0, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/6b7bfed40c559c06d2a4e074427dbc24819bd447/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/6b7bfed40c559c06d2a4e074427dbc24819bd447/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=6b7bfed40c559c06d2a4e074427dbc24819bd447\", \"patch\": \"@@ -1317,6 +1317,8 @@ TEST(FormatterTest, FormatDouble) {\\n   EXPECT_EQ(buffer, format(\\\"{:a}\\\", -42.0));\\n   safe_sprintf(buffer, \\\"%A\\\", -42.0);\\n   EXPECT_EQ(buffer, format(\\\"{:A}\\\", -42.0));\\n+  EXPECT_EQ(\\\"9223372036854775808.000000\\\",\\n+            format(\\\"{:f}\\\", 9223372036854775807.0));\\n }\\n \\n TEST(FormatterTest, PrecisionRounding) {\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzL2MwNGZiOTFiMDNjYjY0ODBjNGEzOWIyMTRlZmI2YjA1ZTQ1MmIyMGMi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/c04fb91b03cb6480c4a39b214efb6b05e452b20c", "content": "{\"sha\": \"c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjpjMDRmYjkxYjAzY2I2NDgwYzRhMzliMjE0ZWZiNmIwNWU0NTJiMjBj\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2018-07-04T14:40:56Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"victor.zverovich@gmail.com\", \"date\": \"2018-07-04T14:40:56Z\"}, \"message\": \"Fix handling of user-defined types in format_to (#793)\", \"tree\": {\"sha\": \"dd7f22e41ada40f4ab31c9dd1fdd385b12010ae7\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/dd7f22e41ada40f4ab31c9dd1fdd385b12010ae7\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/c04fb91b03cb6480c4a39b214efb6b05e452b20c/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"323b92bffef75c9cf99dd8666bfc2f7e11fb8cb0\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/323b92bffef75c9cf99dd8666bfc2f7e11fb8cb0\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/323b92bffef75c9cf99dd8666bfc2f7e11fb8cb0\"}], \"stats\": {\"total\": 15, \"additions\": 11, \"deletions\": 4}, \"files\": [{\"sha\": \"d5d65817128c9aed71ec2a03c5d324b6d70612d9\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 2, \"deletions\": 3, \"changes\": 5, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/c04fb91b03cb6480c4a39b214efb6b05e452b20c/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/c04fb91b03cb6480c4a39b214efb6b05e452b20c/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"patch\": \"@@ -3216,9 +3216,8 @@ struct formatter<\\n       specs_.precision_, specs_.precision_ref, ctx);\\n     typedef output_range<typename FormatContext::iterator,\\n                          typename FormatContext::char_type> range_type;\\n-    visit(arg_formatter<range_type>(ctx, specs_),\\n-          internal::make_arg<FormatContext>(val));\\n-    return ctx.out();\\n+    return visit(arg_formatter<range_type>(ctx, specs_),\\n+                 internal::make_arg<FormatContext>(val));\\n   }\\n \\n  private:\"}, {\"sha\": \"39855ae8dc802b3b8567518dd9d2f6b797a13648\", \"filename\": \"test/format-test.cc\", \"status\": \"modified\", \"additions\": 9, \"deletions\": 1, \"changes\": 10, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/c04fb91b03cb6480c4a39b214efb6b05e452b20c/test%2Fformat-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/c04fb91b03cb6480c4a39b214efb6b05e452b20c/test%2Fformat-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Fformat-test.cc?ref=c04fb91b03cb6480c4a39b214efb6b05e452b20c\", \"patch\": \"@@ -1122,7 +1122,8 @@ class Answer {};\\n FMT_BEGIN_NAMESPACE\\n template <>\\n struct formatter<Answer> : formatter<int> {\\n-  auto format(Answer, fmt::format_context &ctx) -> decltype(ctx.out()) {\\n+  template <typename FormatContext>\\n+  auto format(Answer, FormatContext &ctx) -> decltype(ctx.out()) {\\n     return formatter<int>::format(42, ctx);\\n   }\\n };\\n@@ -1133,6 +1134,13 @@ TEST(FormatterTest, CustomFormat) {\\n   EXPECT_EQ(\\\"0042\\\", format(\\\"{:04}\\\", Answer()));\\n }\\n \\n+TEST(FormatterTest, CustomFormatTo) {\\n+  char buf[10] = {};\\n+  auto end = fmt::format_to(buf, \\\"{}\\\", Answer());\\n+  EXPECT_EQ(end, buf + 2);\\n+  EXPECT_STREQ(buf, \\\"42\\\");\\n+}\\n+\\n TEST(FormatterTest, WideFormatString) {\\n   EXPECT_EQ(L\\\"42\\\", format(L\\\"{}\\\", 42));\\n   EXPECT_EQ(L\\\"4.2\\\", format(L\\\"{}\\\", 4.2));\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvZm10bGliL2ZtdC9jb21taXRzLzJiN2ExNDZmYTFmOTFlZTNkN2ViYzZhNzgyNjYzMTg1NTQzYmMzNzMi.json", "commit": "https://api.github.com/repos/fmtlib/fmt/commits/2b7a146fa1f91ee3d7ebc6a782663185543bc373", "content": "{\"sha\": \"2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"node_id\": \"MDY6Q29tbWl0NzA1NjIwMjoyYjdhMTQ2ZmExZjkxZWUzZDdlYmM2YTc4MjY2MzE4NTU0M2JjMzcz\", \"commit\": {\"author\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-07-18T15:31:38Z\"}, \"committer\": {\"name\": \"Victor Zverovich\", \"email\": \"viz@fb.com\", \"date\": \"2020-07-29T14:04:11Z\"}, \"message\": \"Fix a regression in handling digit separators (#1782)\", \"tree\": {\"sha\": \"866a4c6f604ddcaef783f96b2f59b7f9e86adcd4\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/trees/866a4c6f604ddcaef783f96b2f59b7f9e86adcd4\"}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/git/commits/2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"comment_count\": 0, \"verification\": {\"verified\": false, \"reason\": \"unsigned\", \"signature\": null, \"payload\": null}}, \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"comments_url\": \"https://api.github.com/repos/fmtlib/fmt/commits/2b7a146fa1f91ee3d7ebc6a782663185543bc373/comments\", \"author\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"vitaut\", \"id\": 576385, \"node_id\": \"MDQ6VXNlcjU3NjM4NQ==\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/576385?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/vitaut\", \"html_url\": \"https://github.com/vitaut\", \"followers_url\": \"https://api.github.com/users/vitaut/followers\", \"following_url\": \"https://api.github.com/users/vitaut/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/vitaut/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/vitaut/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/vitaut/subscriptions\", \"organizations_url\": \"https://api.github.com/users/vitaut/orgs\", \"repos_url\": \"https://api.github.com/users/vitaut/repos\", \"events_url\": \"https://api.github.com/users/vitaut/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/vitaut/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"89d0c7124bc7330e90712f9b1fa9824a0fa8303a\", \"url\": \"https://api.github.com/repos/fmtlib/fmt/commits/89d0c7124bc7330e90712f9b1fa9824a0fa8303a\", \"html_url\": \"https://github.com/fmtlib/fmt/commit/89d0c7124bc7330e90712f9b1fa9824a0fa8303a\"}], \"stats\": {\"total\": 3, \"additions\": 2, \"deletions\": 1}, \"files\": [{\"sha\": \"7c403bf80d38da87575934a3a19400c7517bd706\", \"filename\": \"include/fmt/format.h\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 1, \"changes\": 2, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/2b7a146fa1f91ee3d7ebc6a782663185543bc373/include%2Ffmt%2Fformat.h\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/2b7a146fa1f91ee3d7ebc6a782663185543bc373/include%2Ffmt%2Fformat.h\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/include%2Ffmt%2Fformat.h?ref=2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"patch\": \"@@ -1559,7 +1559,7 @@ template <typename OutputIt, typename Char, typename UInt> struct int_writer {\\n     int num_digits = count_digits(abs_value);\\n     int size = num_digits, n = num_digits;\\n     std::string::const_iterator group = groups.cbegin();\\n-    while (group != groups.cend() && num_digits > *group && *group > 0 &&\\n+    while (group != groups.cend() && n > *group && *group > 0 &&\\n            *group != max_value<char>()) {\\n       size += sep_size;\\n       n -= *group;\"}, {\"sha\": \"15a40d99970510477ba102bf546ad7ae68c17c19\", \"filename\": \"test/locale-test.cc\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/fmtlib/fmt/blob/2b7a146fa1f91ee3d7ebc6a782663185543bc373/test%2Flocale-test.cc\", \"raw_url\": \"https://github.com/fmtlib/fmt/raw/2b7a146fa1f91ee3d7ebc6a782663185543bc373/test%2Flocale-test.cc\", \"contents_url\": \"https://api.github.com/repos/fmtlib/fmt/contents/test%2Flocale-test.cc?ref=2b7a146fa1f91ee3d7ebc6a782663185543bc373\", \"patch\": \"@@ -61,6 +61,7 @@ TEST(LocaleTest, Format) {\\n \\n   std::locale special_grouping_loc(std::locale(), new special_grouping<char>());\\n   EXPECT_EQ(\\\"1,23,45,678\\\", fmt::format(special_grouping_loc, \\\"{:L}\\\", 12345678));\\n+  EXPECT_EQ(\\\"12,345\\\", fmt::format(special_grouping_loc, \\\"{:L}\\\", 12345));\\n \\n   std::locale small_grouping_loc(std::locale(), new small_grouping<char>());\\n   EXPECT_EQ(\\\"4,2,9,4,9,6,7,2,9,5\\\",\"}]}"}
{"id": "/data3/defect4C_dirs/defect4C_paper/api_dirs_v2/Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvemVyb21xL2xpYnptcS9jb21taXRzL2VjYzYzZDBkM2IwZTFhNjJjOTBiNThiMWNjZGI1YWMxNmNiMjQwMGEi.json", "commit": "https://api.github.com/repos/zeromq/libzmq/commits/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a", "content": "{\"sha\": \"ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"node_id\": \"C_kwDOAAQE09oAKGVjYzYzZDBkM2IwZTFhNjJjOTBiNThiMWNjZGI1YWMxNmNiMjQwMGE\", \"commit\": {\"author\": {\"name\": \"Cornelius\", \"email\": \"cornelius.soell@rohde-schwarz.com\", \"date\": \"2023-06-20T14:17:26Z\"}, \"committer\": {\"name\": \"GitHub\", \"email\": \"noreply@github.com\", \"date\": \"2023-06-20T14:17:26Z\"}, \"message\": \"Problem: long flag isn't set for subscriptions if topic has between 246 and 255 characters (#4564)\\n\\n* Problem: long flag isn't set for subscriptions if topic has between 246 and 255 characters\\r\\n\\r\\nSolution: fix V3.1 encoder to calculate long flag after evaluating the subscribe and cancel commands\", \"tree\": {\"sha\": \"fbeb83aee2564106e2c7cfadae199642f349720f\", \"url\": \"https://api.github.com/repos/zeromq/libzmq/git/trees/fbeb83aee2564106e2c7cfadae199642f349720f\"}, \"url\": \"https://api.github.com/repos/zeromq/libzmq/git/commits/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"comment_count\": 0, \"verification\": {\"verified\": true, \"reason\": \"valid\", \"signature\": \"-----BEGIN PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkkbT2CRBK7hj4Ov3rIwAADucIABsDTxNrnz5f9QEZvc7ILFAW\\nghXUDDd8av0/KtN55BsHJrDIC1ZWdQMPCXhJMtliCpCnXRmZCPExuHxozyQ2MTwv\\n6M7GuZbG7HJkcNA3QuUgvjYRVImjonLIWKo/bewPiHQUupxuXxhDhjbxx4Umfssr\\n07/b0Ox7Z23QVurAdeknzhMtU5i/iq528yms6IORP4Ip1aJ/v8/KoOLdX+BORTYs\\n8b2X3Ui8NIEijoHl0B9o1inSUQsOKooJHXQcrNJDAYs6/3ec+p/cujGBx8IHNTB1\\njLlX1Vcbl7D4PRGUv55MXqERpaeg/Iluj7Lse0dObegkMT1ehlksirSzz56wJp8=\\n=4YTa\\n-----END PGP SIGNATURE-----\\n\", \"payload\": \"tree fbeb83aee2564106e2c7cfadae199642f349720f\\nparent 7af09a0e3bca37d9da21a1bca2ab27e494b4e3d8\\nauthor Cornelius <cornelius.soell@rohde-schwarz.com> 1687270646 +0200\\ncommitter GitHub <noreply@github.com> 1687270646 +0100\\n\\nProblem: long flag isn't set for subscriptions if topic has between 246 and 255 characters (#4564)\\n\\n* Problem: long flag isn't set for subscriptions if topic has between 246 and 255 characters\\r\\n\\r\\nSolution: fix V3.1 encoder to calculate long flag after evaluating the subscribe and cancel commands\"}}, \"url\": \"https://api.github.com/repos/zeromq/libzmq/commits/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"html_url\": \"https://github.com/zeromq/libzmq/commit/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"comments_url\": \"https://api.github.com/repos/zeromq/libzmq/commits/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/comments\", \"author\": {\"login\": \"soell\", \"id\": 19773951, \"node_id\": \"MDQ6VXNlcjE5NzczOTUx\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19773951?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/soell\", \"html_url\": \"https://github.com/soell\", \"followers_url\": \"https://api.github.com/users/soell/followers\", \"following_url\": \"https://api.github.com/users/soell/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/soell/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/soell/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/soell/subscriptions\", \"organizations_url\": \"https://api.github.com/users/soell/orgs\", \"repos_url\": \"https://api.github.com/users/soell/repos\", \"events_url\": \"https://api.github.com/users/soell/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/soell/received_events\", \"type\": \"User\", \"site_admin\": false}, \"committer\": {\"login\": \"web-flow\", \"id\": 19864447, \"node_id\": \"MDQ6VXNlcjE5ODY0NDQ3\", \"avatar_url\": \"https://avatars.githubusercontent.com/u/19864447?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/web-flow\", \"html_url\": \"https://github.com/web-flow\", \"followers_url\": \"https://api.github.com/users/web-flow/followers\", \"following_url\": \"https://api.github.com/users/web-flow/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/web-flow/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/web-flow/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/web-flow/subscriptions\", \"organizations_url\": \"https://api.github.com/users/web-flow/orgs\", \"repos_url\": \"https://api.github.com/users/web-flow/repos\", \"events_url\": \"https://api.github.com/users/web-flow/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/web-flow/received_events\", \"type\": \"User\", \"site_admin\": false}, \"parents\": [{\"sha\": \"7af09a0e3bca37d9da21a1bca2ab27e494b4e3d8\", \"url\": \"https://api.github.com/repos/zeromq/libzmq/commits/7af09a0e3bca37d9da21a1bca2ab27e494b4e3d8\", \"html_url\": \"https://github.com/zeromq/libzmq/commit/7af09a0e3bca37d9da21a1bca2ab27e494b4e3d8\"}], \"stats\": {\"total\": 97, \"additions\": 95, \"deletions\": 2}, \"files\": [{\"sha\": \"77fe616b298a5ba5ef3e20281e6e5afedc315283\", \"filename\": \"Makefile.am\", \"status\": \"modified\", \"additions\": 5, \"deletions\": 0, \"changes\": 5, \"blob_url\": \"https://github.com/zeromq/libzmq/blob/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/Makefile.am\", \"raw_url\": \"https://github.com/zeromq/libzmq/raw/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/Makefile.am\", \"contents_url\": \"https://api.github.com/repos/zeromq/libzmq/contents/Makefile.am?ref=ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"patch\": \"@@ -493,6 +493,7 @@ test_apps = \\\\\\n \\ttests/test_capabilities \\\\\\n \\ttests/test_xpub_nodrop \\\\\\n \\ttests/test_xpub_manual \\\\\\n+\\ttests/test_xpub_topic \\\\\\n \\ttests/test_xpub_welcome_msg \\\\\\n \\ttests/test_xpub_verbose \\\\\\n \\ttests/test_atomics \\\\\\n@@ -766,6 +767,10 @@ tests_test_xpub_manual_SOURCES = tests/test_xpub_manual.cpp\\n tests_test_xpub_manual_LDADD = ${TESTUTIL_LIBS} src/libzmq.la\\n tests_test_xpub_manual_CPPFLAGS = ${TESTUTIL_CPPFLAGS}\\n \\n+tests_test_xpub_topic_SOURCES = tests/test_xpub_topic.cpp\\n+tests_test_xpub_topic_LDADD = ${TESTUTIL_LIBS} src/libzmq.la\\n+tests_test_xpub_topic_CPPFLAGS = ${TESTUTIL_CPPFLAGS}\\n+\\n tests_test_xpub_welcome_msg_SOURCES = tests/test_xpub_welcome_msg.cpp\\n tests_test_xpub_welcome_msg_LDADD = ${TESTUTIL_LIBS} src/libzmq.la\\n tests_test_xpub_welcome_msg_CPPFLAGS = ${TESTUTIL_CPPFLAGS}\"}, {\"sha\": \"f6b04c3549b8b7eac06197a7dd145bd398dd10ce\", \"filename\": \"src/v3_1_encoder.cpp\", \"status\": \"modified\", \"additions\": 4, \"deletions\": 2, \"changes\": 6, \"blob_url\": \"https://github.com/zeromq/libzmq/blob/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/src%2Fv3_1_encoder.cpp\", \"raw_url\": \"https://github.com/zeromq/libzmq/raw/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/src%2Fv3_1_encoder.cpp\", \"contents_url\": \"https://api.github.com/repos/zeromq/libzmq/contents/src%2Fv3_1_encoder.cpp?ref=ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"patch\": \"@@ -29,8 +29,6 @@ void zmq::v3_1_encoder_t::message_ready ()\\n     protocol_flags = 0;\\n     if (in_progress ()->flags () & msg_t::more)\\n         protocol_flags |= v2_protocol_t::more_flag;\\n-    if (in_progress ()->size () > UCHAR_MAX)\\n-        protocol_flags |= v2_protocol_t::large_flag;\\n     if (in_progress ()->flags () & msg_t::command\\n         || in_progress ()->is_subscribe () || in_progress ()->is_cancel ()) {\\n         protocol_flags |= v2_protocol_t::command_flag;\\n@@ -39,6 +37,10 @@ void zmq::v3_1_encoder_t::message_ready ()\\n         else if (in_progress ()->is_cancel ())\\n             size += zmq::msg_t::cancel_cmd_name_size;\\n     }\\n+    // Calculate large_flag after command_flag. Subscribe or cancel commands\\n+    // increase the message size.\\n+    if (size > UCHAR_MAX)\\n+        protocol_flags |= v2_protocol_t::large_flag;\\n \\n     //  Encode the message length. For messages less then 256 bytes,\\n     //  the length is encoded as 8-bit unsigned integer. For larger\"}, {\"sha\": \"6b7f6cfa8359bda6df7f2d210954e77339be9c30\", \"filename\": \"tests/CMakeLists.txt\", \"status\": \"modified\", \"additions\": 1, \"deletions\": 0, \"changes\": 1, \"blob_url\": \"https://github.com/zeromq/libzmq/blob/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/tests%2FCMakeLists.txt\", \"raw_url\": \"https://github.com/zeromq/libzmq/raw/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/tests%2FCMakeLists.txt\", \"contents_url\": \"https://api.github.com/repos/zeromq/libzmq/contents/tests%2FCMakeLists.txt?ref=ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"patch\": \"@@ -64,6 +64,7 @@ set(tests\\n   test_srcfd\\n   test_stream_timeout\\n   test_xpub_manual\\n+  test_xpub_topic\\n   test_xpub_welcome_msg\\n   test_xpub_verbose\\n   test_base85\"}, {\"sha\": \"8609cfe2b42eb51b37d48354036123a4d9bdd5ac\", \"filename\": \"tests/test_xpub_topic.cpp\", \"status\": \"added\", \"additions\": 85, \"deletions\": 0, \"changes\": 85, \"blob_url\": \"https://github.com/zeromq/libzmq/blob/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/tests%2Ftest_xpub_topic.cpp\", \"raw_url\": \"https://github.com/zeromq/libzmq/raw/ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a/tests%2Ftest_xpub_topic.cpp\", \"contents_url\": \"https://api.github.com/repos/zeromq/libzmq/contents/tests%2Ftest_xpub_topic.cpp?ref=ecc63d0d3b0e1a62c90b58b1ccdb5ac16cb2400a\", \"patch\": \"@@ -0,0 +1,85 @@\\n+/* SPDX-License-Identifier: MPL-2.0 */\\n+\\n+#include \\\"testutil.hpp\\\"\\n+#include \\\"testutil_unity.hpp\\\"\\n+\\n+SETUP_TEARDOWN_TESTCONTEXT\\n+\\n+const char bind_address[] = \\\"tcp://127.0.0.1:*\\\";\\n+char connect_address[MAX_SOCKET_STRING];\\n+\\n+// 245 chars + 10 chars for subscribe command = 255 chars\\n+const char short_topic[] =\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDE\\\";\\n+\\n+// 246 chars + 10 chars for subscribe command = 256 chars\\n+const char long_topic[] =\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP\\\"\\n+  \\\"ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEFGHIJKLMNOPABCDEF\\\";\\n+\\n+\\n+template <size_t SIZE>\\n+void test_subscribe_cancel (void *xpub, void *sub, const char (&topic)[SIZE])\\n+{\\n+    // Ignore '\\\\0' terminating the topic string.\\n+    const size_t topic_len = SIZE - 1;\\n+\\n+    //  Subscribe for topic\\n+    TEST_ASSERT_SUCCESS_ERRNO (\\n+      zmq_setsockopt (sub, ZMQ_SUBSCRIBE, topic, topic_len));\\n+\\n+    // Allow receiving more than the expected number of bytes\\n+    char buffer[topic_len + 5];\\n+\\n+    // Receive subscription\\n+    int rc =\\n+      TEST_ASSERT_SUCCESS_ERRNO (zmq_recv (xpub, buffer, sizeof (buffer), 0));\\n+    TEST_ASSERT_EQUAL_INT (topic_len + 1, rc);\\n+    TEST_ASSERT_EQUAL_UINT8 (1, buffer[0]);\\n+    TEST_ASSERT_EQUAL_UINT8_ARRAY (topic, buffer + 1, topic_len);\\n+\\n+    // Unsubscribe from topic\\n+    TEST_ASSERT_SUCCESS_ERRNO (\\n+      zmq_setsockopt (sub, ZMQ_UNSUBSCRIBE, topic, topic_len));\\n+\\n+    // Receive unsubscription\\n+    rc =\\n+      TEST_ASSERT_SUCCESS_ERRNO (zmq_recv (xpub, buffer, sizeof (buffer), 0));\\n+    TEST_ASSERT_EQUAL_INT (topic_len + 1, rc);\\n+    TEST_ASSERT_EQUAL_UINT8 (0, buffer[0]);\\n+    TEST_ASSERT_EQUAL_UINT8_ARRAY (topic, buffer + 1, topic_len);\\n+}\\n+\\n+void test_xpub_subscribe_long_topic ()\\n+{\\n+    void *xpub = test_context_socket (ZMQ_XPUB);\\n+    TEST_ASSERT_SUCCESS_ERRNO (zmq_bind (xpub, bind_address));\\n+    size_t len = MAX_SOCKET_STRING;\\n+    TEST_ASSERT_SUCCESS_ERRNO (\\n+      zmq_getsockopt (xpub, ZMQ_LAST_ENDPOINT, connect_address, &len));\\n+\\n+    void *sub = test_context_socket (ZMQ_SUB);\\n+    TEST_ASSERT_SUCCESS_ERRNO (zmq_connect (sub, connect_address));\\n+\\n+    test_subscribe_cancel (xpub, sub, short_topic);\\n+    test_subscribe_cancel (xpub, sub, long_topic);\\n+\\n+    //  Clean up.\\n+    test_context_socket_close (xpub);\\n+    test_context_socket_close (sub);\\n+}\\n+\\n+int main ()\\n+{\\n+    setup_test_environment ();\\n+\\n+    UNITY_BEGIN ();\\n+    RUN_TEST (test_xpub_subscribe_long_topic);\\n+\\n+    return UNITY_END ();\\n+}\"}]}"}
